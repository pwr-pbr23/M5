/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq xbean
import java beans propertyeditormanager
import java net uri
import org apache activemq broker brokerservice
import org apache commons logging log
import org apache commons logging logfactory
import org apache xbean spring context resourcexmlapplicationcontext
import org apache xbean spring context impl urieditor
import org springframework beans beansexception
import org springframework beans factory disposablebean
import org springframework beans factory factorybean
import org springframework beans factory initializingbean
import org springframework context applicationcontext
import org springframework context applicationcontextaware
import org springframework core io resource
/**
* a spring {@link factorybean} which creates an embedded broker inside a spring
* xml using an external <a href="http://gbean.org/custom+xml">xbean spring xml
* configuration file</a> which provides a much neater and more concise xml
* format.
*
* @version $revision: 1.1 $
*/
public class brokerfactorybean implements factorybean  initializingbean  disposablebean  applicationcontextaware
static
propertyeditormanager registereditor uri class  urieditor class
private resource config
private xbeanbrokerservice broker
private boolean start
private resourcexmlapplicationcontext context
private applicationcontext parentcontext
public brokerfactorybean
public brokerfactorybean resource config
this config   config
public object getobject   throws exception
return broker
public class getobjecttype
return brokerservice class
public boolean issingleton
return true
public void setapplicationcontext applicationcontext parentcontext  throws beansexception
this parentcontext   parentcontext
public void afterpropertiesset   throws exception
if  config    null
throw new illegalargumentexception
context   new resourcexmlapplicationcontext config  parentcontext
try
broker    xbeanbrokerservice context getbean
catch  beansexception e
// ignore...
// log.trace("no bean named broker available: " + e, e);
if  broker    null
// lets try find by type
string names   context getbeannamesfortype brokerservice class
for  int i   0  i < names length  i
string name   names
broker    xbeanbrokerservice context getbean name
if  broker    null
break
if  broker    null
throw new illegalargumentexception     config
if  start
broker start
public void destroy   throws exception
if  context    null
context close
if  broker    null
broker stop
public resource getconfig
return config
public void setconfig resource config
this config   config
public brokerservice getbroker
return broker
public boolean isstart
return start
public void setstart boolean start
this start   start