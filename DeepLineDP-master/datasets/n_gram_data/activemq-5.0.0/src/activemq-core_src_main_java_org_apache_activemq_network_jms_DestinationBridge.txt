/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network jms
import java util concurrent atomic atomicboolean
import javax jms connection
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms messagelistener
import javax jms messageproducer
import javax naming namingexception
import org apache activemq service
import org apache commons logging log
import org apache commons logging logfactory
/**
* a destination bridge is used to bridge between to different jms systems
*
* @version $revision: 1.1.1.1 $
*/
public abstract class destinationbridge implements service  messagelistener
private static final log log   logfactory getlog destinationbridge class
protected messageconsumer consumer
protected atomicboolean started   new atomicboolean false
protected jmsmesageconvertor jmsmessageconvertor
protected boolean dohandlereplyto   true
protected jmsconnector jmsconnector
private int maximumretries   10
/**
* @return returns the consumer.
*/
public messageconsumer getconsumer
return consumer
/**
* @param consumer the consumer to set.
*/
public void setconsumer messageconsumer consumer
this consumer   consumer
/**
* @param connector
*/
public void setjmsconnector jmsconnector connector
this jmsconnector   connector
/**
* @return returns the inboundmessageconvertor.
*/
public jmsmesageconvertor getjmsmessageconvertor
return jmsmessageconvertor
/**
* @param jmsmessageconvertor
*/
public void setjmsmessageconvertor jmsmesageconvertor jmsmessageconvertor
this jmsmessageconvertor   jmsmessageconvertor
public int getmaximumretries
return maximumretries
/**
* sets the maximum number of retries if a send fails before closing the
* bridge
*/
public void setmaximumretries int maximumretries
this maximumretries   maximumretries
protected destination processreplytodestination destination destination
return jmsconnector createreplytobridge destination  getconnnectionforconsumer    getconnectionforproducer
public void start   throws exception
if  started compareandset false  true
messageconsumer consumer   createconsumer
consumer setmessagelistener this
createproducer
public void stop   throws exception
started set false
public void onmessage message message
if  started get      message    null
int attempt   0
try
if  attempt > 0
restartproducer
message converted
if  dohandlereplyto
destination replyto   message getjmsreplyto
if  replyto    null
converted   jmsmessageconvertor convert message  processreplytodestination replyto
else
converted   jmsmessageconvertor convert message
else
message setjmsreplyto null
converted   jmsmessageconvertor convert message
sendmessage converted
message acknowledge
catch  exception e
log error        attempt        e       message  e
if  maximumretries > 0    attempt >  maximumretries
try
stop
catch  exception e1
log warn    e1
/**
* @return returns the dohandlereplyto.
*/
protected boolean isdohandlereplyto
return dohandlereplyto
/**
* @param dohandlereplyto the dohandlereplyto to set.
*/
protected void setdohandlereplyto boolean dohandlereplyto
this dohandlereplyto   dohandlereplyto
protected abstract messageconsumer createconsumer   throws jmsexception
protected abstract messageproducer createproducer   throws jmsexception
protected abstract void sendmessage message message  throws jmsexception
protected abstract connection getconnnectionforconsumer
protected abstract connection getconnectionforproducer
protected void restartproducer   throws jmsexception  namingexception
try
getconnectionforproducer   close
catch  exception e
log debug     e  e
jmsconnector restartproducerconnection
createproducer