/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java util enumeration
import java util concurrent atomic atomicboolean
import javax jms illegalstateexception
import javax jms jmsexception
import javax jms message
import javax jms queue
import javax jms queuebrowser
import org apache activemq command activemqdestination
import org apache activemq command consumerid
import org apache activemq command messagedispatch
/**
* a client uses a <code>queuebrowser</code> object to look at messages on a
* queue without removing them. <p/>
* <p>
* the <code>getenumeration</code> method returns a <code>
* java.util.enumeration</code>
* that is used to scan the queue's messages. it may be an enumeration of the
* entire content of a queue, or it may contain only the messages matching a
* message selector. <p/>
* <p>
* messages may be arriving and expiring while the scan is done. the jms api
* does not require the content of an enumeration to be a static snapshot of
* queue content. whether these changes are visible or not depends on the jms
* provider. <p/>
* <p>
* a <code>queuebrowser</code> can be created from either a <code>session
* </code>
* or a <code>queuesession</code>.
*
* @see javax.jms.session#createbrowser
* @see javax.jms.queuesession#createbrowser
* @see javax.jms.queuebrowser
* @see javax.jms.queuereceiver
*/
public class activemqqueuebrowser implements queuebrowser  enumeration
private final activemqsession session
private final activemqdestination destination
private final string selector
private activemqmessageconsumer consumer
private boolean closed
private final consumerid consumerid
private final atomicboolean browsedone   new atomicboolean true
private final boolean dispatchasync
private object semaphore   new object
/**
* constructor for an activemqqueuebrowser - used internally
*
* @param thesession
* @param dest
* @param selector
* @throws jmsexception
*/
protected activemqqueuebrowser activemqsession session  consumerid consumerid  activemqdestination destination  string selector  boolean dispatchasync  throws jmsexception
this session   session
this consumerid   consumerid
this destination   destination
this selector   selector
this dispatchasync   dispatchasync
this consumer   createconsumer
/**
* @param session
* @param originaldestination
* @param selectorexpression
* @param cnum
* @return
* @throws jmsexception
*/
private activemqmessageconsumer createconsumer   throws jmsexception
browsedone set false
activemqprefetchpolicy prefetchpolicy   session connection getprefetchpolicy
return new activemqmessageconsumer session  consumerid  destination  null  selector  prefetchpolicy getqueuebrowserprefetch    prefetchpolicy
getmaximumpendingmessagelimit    false  true  dispatchasync  null
public void dispatch messagedispatch md
if  md getmessage      null
browsedone set true
else
super dispatch md
notifymessageavailable
private void destroyconsumer
if  consumer    null
return
try
consumer close
consumer   null
catch  jmsexception e
e printstacktrace
/**
* gets an enumeration for browsing the current queue messages in the order
* they would be received.
*
* @return an enumeration for browsing the messages
* @throws jmsexception if the jms provider fails to get the enumeration for
*                 this browser due to some internal error.
*/
public enumeration getenumeration   throws jmsexception
checkclosed
if  consumer    null
consumer   createconsumer
return this
private void checkclosed   throws illegalstateexception
if  closed
throw new illegalstateexception
/**
* @return true if more messages to process
*/
public boolean hasmoreelements
while  true
synchronized  this
if  consumer    null
return false
if  consumer getmessagesize   > 0
return true
if  browsedone get       session isrunning
destroyconsumer
return false
waitformessage
/**
* @return the next message
*/
public object nextelement
while  true
synchronized  this
if  consumer    null
return null
try
message answer   consumer receivenowait
if  answer    null
return answer
catch  jmsexception e
this session connection onasyncexception e
return null
if  browsedone get       session isrunning
destroyconsumer
return null
waitformessage
public synchronized void close   throws jmsexception
destroyconsumer
closed   true
/**
* gets the queue associated with this queue browser.
*
* @return the queue
* @throws jmsexception if the jms provider fails to get the queue
*                 associated with this browser due to some internal error.
*/
public queue getqueue   throws jmsexception
return  queue destination
public string getmessageselector   throws jmsexception
return selector
// implementation methods
// -------------------------------------------------------------------------
/**
* wait on a semaphore for a fixed amount of time for a message to come in.
*/
protected void waitformessage
try
synchronized  semaphore
semaphore wait 2000
catch  interruptedexception e
thread currentthread   interrupt
protected void notifymessageavailable
synchronized  semaphore
semaphore notifyall
public string tostring
return     consumerid