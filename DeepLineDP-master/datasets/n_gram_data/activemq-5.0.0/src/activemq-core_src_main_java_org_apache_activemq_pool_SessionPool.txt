/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq pool
import javax jms jmsexception
import org apache activemq activemqconnection
import org apache activemq activemqsession
import org apache activemq alreadyclosedexception
import org apache activemq util jmsexceptionsupport
import org apache commons pool objectpool
import org apache commons pool poolableobjectfactory
/**
* represents the session pool for a given jms connection.
*
* @version $revision: 1.1 $
*/
public class sessionpool implements poolableobjectfactory
private connectionpool connectionpool
private sessionkey key
private objectpool sessionpool
public sessionpool connectionpool connectionpool  sessionkey key  objectpool sessionpool
this connectionpool   connectionpool
this key   key
this sessionpool   sessionpool
sessionpool setfactory this
public void close   throws exception
if  sessionpool    null
sessionpool close
sessionpool   null
public pooledsession borrowsession   throws jmsexception
try
object object   getsessionpool   borrowobject
return  pooledsession object
catch  jmsexception e
throw e
catch  exception e
throw jmsexceptionsupport create e
public void returnsession pooledsession session  throws jmsexception
// lets check if we are already closed
getconnection
try
getsessionpool   returnobject session
catch  exception e
throw jmsexceptionsupport create     e  e
// poolableobjectfactory methods
// -------------------------------------------------------------------------
public object makeobject   throws exception
return new pooledsession createsession    this
public void destroyobject object o  throws exception
pooledsession session    pooledsession o
session getsession   close
public boolean validateobject object o
return true
public void activateobject object o  throws exception
public void passivateobject object o  throws exception
// implemention methods
// -------------------------------------------------------------------------
protected objectpool getsessionpool   throws alreadyclosedexception
if  sessionpool    null
throw new alreadyclosedexception
return sessionpool
protected activemqconnection getconnection   throws jmsexception
return connectionpool getconnection
protected activemqsession createsession   throws jmsexception
return  activemqsession getconnection   createsession key istransacted    key getackmode