/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import java util arraylist
import java util list
import javax jms jmsexception
import org apache activemq command activemqdestination
import org apache activemq command message
/**
* helper class for decomposing a destination into a number of paths
*
* @version $revision: 1.3 $
*/
public final class destinationpath
protected static final char separator
private destinationpath
public static string getdestinationpaths string subject
list<string> list   new arraylist<string>
int previous   0
int lastindex   subject length     1
while  true
int idx   subject indexof separator  previous
if  idx < 0
list add subject substring previous  lastindex   1
break
list add subject substring previous  idx
previous   idx   1
string answer   new string
list toarray answer
return answer
public static string getdestinationpaths message message  throws jmsexception
return getdestinationpaths message getdestination
public static string getdestinationpaths activemqdestination destination
return getdestinationpaths destination getphysicalname
/**
* converts the paths to a single string seperated by dots.
*
* @param paths
* @return
*/
public static string tostring string paths
stringbuffer buffer   new stringbuffer
for  int i   0  i < paths length  i
if  i > 0
buffer append separator
string path   paths
if  path    null
buffer append
else
buffer append path
return buffer tostring