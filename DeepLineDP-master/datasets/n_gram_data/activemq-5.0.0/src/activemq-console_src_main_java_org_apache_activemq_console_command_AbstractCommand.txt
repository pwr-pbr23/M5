/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java util list
import org apache activemq activemqconnectionmetadata
import org apache activemq console formatter globalwriter
public abstract class abstractcommand implements command
public static final string command_option_delimeter
private boolean isprinthelp
private boolean isprintversion
/**
* execute a generic command, which includes parsing the options for the
* command and running the specific task.
*
* @param tokens - command arguments
* @throws exception
*/
public void execute list<string> tokens  throws exception
// parse the options specified by "-"
parseoptions tokens
// print the help file of the task
if  isprinthelp
printhelp
// print the amq version
else if  isprintversion
globalwriter printversion activemqconnectionmetadata provider_version
// run the specified task
else
runtask tokens
/**
* parse any option parameters in the command arguments specified by a '-'
* as the first character of the token.
*
* @param tokens - command arguments
* @throws exception
*/
protected void parseoptions list<string> tokens  throws exception
while   tokens isempty
string token   tokens remove 0
if  token startswith
// token is an option
handleoption token  tokens
else
// push back to list of tokens
tokens add 0  token
return
/**
* handle the general options for each command, which includes -h, -?,
* --help, -d, --version.
*
* @param token - option token to handle
* @param tokens - succeeding command arguments
* @throws exception
*/
protected void handleoption string token  list<string> tokens  throws exception
// if token is a help option
if  token equals       token equals       token equals
isprinthelp   true
tokens clear
// if token is a version option
else if  token equals
isprintversion   true
tokens clear
else if  token startswith
// if token is a system property define option
string key   token substring 2
string value
int pos   key indexof
if  pos >  0
value   key substring pos   1
key   key substring 0  pos
system setproperty key  value
else
// token is unrecognized
globalwriter printinfo     token
isprinthelp   true
/**
* run the specific task.
*
* @param tokens - command arguments
* @throws exception
*/
protected abstract void runtask list<string> tokens  throws exception
/**
* print the help messages for the specific task
*/
protected abstract void printhelp