/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq memory buffer
import java util arraylist
import java util iterator
import java util linkedlist
import java util list
import org apache activemq broker region messagereference
import org apache activemq command activemqmessage
import org apache activemq command message
/**
* allows messages to be added to the end of the buffer such that they are kept
* around and evicted in a fifo manner.
*
* @version $revision: 1.1 $
*/
public class messagequeue
private messagebuffer buffer
private linkedlist<messagereference> list   new linkedlist<messagereference>
private int size
private object lock   new object
private int position
public messagequeue messagebuffer buffer
this buffer   buffer
public void add messagereference messageref
message message   messageref getmessagehardref
int delta   message getsize
int newsize   0
synchronized  lock
list add messageref
size    delta
newsize   size
buffer onsizechanged this  delta  newsize
public void add activemqmessage message
int delta   message getsize
int newsize   0
synchronized  lock
list add message
size    delta
newsize   size
buffer onsizechanged this  delta  newsize
public int evictmessage
synchronized  lock
if   list isempty
activemqmessage message    activemqmessage  list removefirst
int messagesize   message getsize
size    messagesize
return messagesize
return 0
/**
* returns a copy of the list
*/
public list<messagereference> getlist
synchronized  lock
return new arraylist<messagereference> list
public void appendmessages list<messagereference> answer
synchronized  lock
for  iterator<messagereference> iter   list iterator    iter hasnext
answer add iter next
public int getsize
synchronized  lock
return size
public int getposition
return position
public void setposition int position
this position   position
public void clear
synchronized  lock
list clear
size   0