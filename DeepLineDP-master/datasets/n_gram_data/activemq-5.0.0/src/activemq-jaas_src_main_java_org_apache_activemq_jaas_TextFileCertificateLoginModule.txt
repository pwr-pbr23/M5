/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq jaas
import java io file
import java io ioexception
import java security cert x509certificate
import java util enumeration
import java util hashset
import java util map
import java util properties
import java util set
import javax security auth subject
import javax security auth callback callbackhandler
import javax security auth login loginexception
/**
* a loginmodule allowing for ssl certificate based authentication based on
* distinguished names (dn) stored in text files. the dns are parsed using a
* properties class where each line is <user_name>=<user_dn>. this class also
* uses a group definition file where each line is <group_name>=<user_name_1>,<user_name_2>,etc.
* the user and group files' locations must be specified in the
* org.apache.activemq.jaas.textfiledn.user and
* org.apache.activemq.jaas.textfiledn.user properties respectively. note: this
* class will re-read user and group files for every authentication (i.e it does
* live updates of allowed groups and users).
*
* @author sepandm@gmail.com (sepand)
*/
public class textfilecertificateloginmodule extends certificateloginmodule
private static final string user_file
private static final string group_file
private file basedir
private string usersfilepathname
private string groupsfilepathname
/**
* performs initialization of file paths. a standard jaas override.
*/
public void initialize subject subject  callbackhandler callbackhandler  map sharedstate  map options
super initialize subject  callbackhandler  sharedstate  options
if  system getproperty       null
basedir   new file system getproperty     getparentfile
else
basedir   new file
usersfilepathname    string options get user_file
groupsfilepathname    string options get group_file
/**
* overriding to allow dn authorization based on dns specified in text
* files.
*
* @param certs the certificate the incoming connection provided.
* @return the user's authenticated name or null if unable to authenticate
*         the user.
* @throws loginexception thrown if unable to find user file or connection
*                 certificate.
*/
protected string getusernameforcertificates final x509certificate certs  throws loginexception
if  certs    null
throw new loginexception
file usersfile   new file basedir  usersfilepathname
properties users   new properties
try
java io fileinputstream in   new java io fileinputstream usersfile
users load in
in close
catch  ioexception ioe
throw new loginexception     usersfile
string dn   getdistinguishedname certs
enumeration<object> keys   users keys
for  enumeration vals   users elements    vals hasmoreelements
if    string vals nextelement    equals dn
return  string keys nextelement
else
keys nextelement
return null
/**
* overriding to allow for group discovery based on text files.
*
* @param username the name of the user being examined. this is the same
*                name returned by getusernameforcertificates.
* @return a set of name strings for groups this user belongs to.
* @throws loginexception thrown if unable to find group definition file.
*/
protected set<string> getusergroups string username  throws loginexception
file groupsfile   new file basedir  groupsfilepathname
properties groups   new properties
try
java io fileinputstream in   new java io fileinputstream groupsfile
groups load in
in close
catch  ioexception ioe
throw new loginexception     groupsfile
set<string> usergroups   new hashset<string>
for  enumeration enumeration   groups keys    enumeration hasmoreelements
string groupname    string enumeration nextelement
string userlist    groups getproperty groupname       split
for  int i   0  i < userlist length  i
if  username equals userlist
usergroups add groupname
break
return usergroups