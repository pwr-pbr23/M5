/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store memory
import java io ioexception
import java util collections
import java util iterator
import java util linkedhashmap
import java util map
import java util map entry
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq store messagerecoverylistener
import org apache activemq store messagestore
import org apache activemq usage memoryusage
import org apache activemq usage systemusage
/**
* an implementation of {@link org.apache.activemq.store.messagestore} which
* uses a
*
* @version $revision: 1.7 $
*/
public class memorymessagestore implements messagestore
protected final activemqdestination destination
protected final map<messageid  message> messagetable
protected messageid lastbatchid
public memorymessagestore activemqdestination destination
this destination  new linkedhashmap<messageid  message>
public memorymessagestore activemqdestination destination  map<messageid  message> messagetable
this destination   destination
this messagetable   collections synchronizedmap messagetable
public synchronized void addmessage connectioncontext context  message message  throws ioexception
synchronized  messagetable
messagetable put message getmessageid    message
// public void addmessagereference(connectioncontext context,messageid
// messageid,long expirationtime,string messageref)
// throws ioexception{
// synchronized(messagetable){
// messagetable.put(messageid,messageref);
// }
// }
public message getmessage messageid identity  throws ioexception
return messagetable get identity
// public string getmessagereference(messageid identity) throws ioexception{
// return (string)messagetable.get(identity);
// }
public void removemessage connectioncontext context  messageack ack  throws ioexception
removemessage ack getlastmessageid
public void removemessage messageid msgid  throws ioexception
synchronized  messagetable
messagetable remove msgid
if   lastbatchid    null    lastbatchid equals msgid      messagetable isempty
lastbatchid   null
public void recover messagerecoverylistener listener  throws exception
// the message table is a synchronizedmap - so just have to synchronize
// here
synchronized  messagetable
for  iterator<message> iter   messagetable values   iterator    iter hasnext
object msg   iter next
if  msg getclass      messageid class
listener recovermessagereference  messageid msg
else
listener recovermessage  message msg
public void start
public void stop
public void removeallmessages connectioncontext context  throws ioexception
synchronized  messagetable
messagetable clear
public activemqdestination getdestination
return destination
public void delete
synchronized  messagetable
messagetable clear
public int getmessagecount
return messagetable size
public void recovernextmessages int maxreturned  messagerecoverylistener listener  throws exception
synchronized  messagetable
boolean pastlackbatch   lastbatchid    null
int count   0
for  iterator iter   messagetable entryset   iterator    iter hasnext
map entry entry    entry iter next
if  pastlackbatch
count
object msg   entry getvalue
lastbatchid    messageid entry getkey
if  msg getclass      messageid class
listener recovermessagereference  messageid msg
else
listener recovermessage  message msg
else
pastlackbatch   entry getkey   equals lastbatchid
public void resetbatching
lastbatchid   null
/**
* @param memoeyusage
* @see org.apache.activemq.store.messagestore#setmemoryusage(org.apache.activemq.usage.memoryusage)
*/
public void setmemoryusage memoryusage memoeyusage
// todo auto-generated method stub