/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import javax jms jmsexception
import javax transaction xa xaexception
import javax transaction xa xaresource
import javax transaction xa xid
import org apache activemq transactioncontext
import org apache activemq command transactionid
import org apache activemq transaction synchronization
/**
* allows us to switch between using a shared transaction context, or using a
* local transaction context.
*
* @version $revision$
*/
public class managedtransactioncontext extends transactioncontext
private final transactioncontext sharedcontext
private boolean usesharedtxcontext
public managedtransactioncontext transactioncontext sharedcontext
super sharedcontext getconnection
this sharedcontext   sharedcontext
setlocaltransactioneventlistener sharedcontext getlocaltransactioneventlistener
public void setusesharedtxcontext boolean enable  throws jmsexception
if  isinlocaltransaction      isinxatransaction
throw new jmsexception
usesharedtxcontext   enable
public void begin   throws jmsexception
if  usesharedtxcontext
sharedcontext begin
else
super begin
public void commit   throws jmsexception
if  usesharedtxcontext
sharedcontext commit
else
super commit
public void commit xid xid  boolean onephase  throws xaexception
if  usesharedtxcontext
sharedcontext commit xid  onephase
else
super commit xid  onephase
public void end xid xid  int flags  throws xaexception
if  usesharedtxcontext
sharedcontext end xid  flags
else
super end xid  flags
public void forget xid xid  throws xaexception
if  usesharedtxcontext
sharedcontext forget xid
else
super forget xid
public transactionid gettransactionid
if  usesharedtxcontext
return sharedcontext gettransactionid
else
return super gettransactionid
public int gettransactiontimeout   throws xaexception
if  usesharedtxcontext
return sharedcontext gettransactiontimeout
else
return super gettransactiontimeout
public boolean isinlocaltransaction
if  usesharedtxcontext
return sharedcontext isinlocaltransaction
else
return super isinlocaltransaction
public boolean isinxatransaction
if  usesharedtxcontext
return sharedcontext isinxatransaction
else
return super isinxatransaction
public boolean issamerm xaresource xaresource  throws xaexception
if  usesharedtxcontext
return sharedcontext issamerm xaresource
else
return super issamerm xaresource
public int prepare xid xid  throws xaexception
if  usesharedtxcontext
return sharedcontext prepare xid
else
return super prepare xid
public xid recover int flag  throws xaexception
if  usesharedtxcontext
return sharedcontext recover flag
else
return super recover flag
public void rollback   throws jmsexception
if  usesharedtxcontext
sharedcontext rollback
else
super rollback
public void rollback xid xid  throws xaexception
if  usesharedtxcontext
sharedcontext rollback xid
else
super rollback xid
public boolean settransactiontimeout int seconds  throws xaexception
if  usesharedtxcontext
return sharedcontext settransactiontimeout seconds
else
return super settransactiontimeout seconds
public void start xid xid  int flags  throws xaexception
if  usesharedtxcontext
sharedcontext start xid  flags
else
super start xid  flags
public void addsynchronization synchronization s
if  usesharedtxcontext
sharedcontext addsynchronization s
else
super addsynchronization s