/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import javax management openmbean compositedata
import javax management openmbean opendataexception
public interface queueviewmbean extends destinationviewmbean
/**
* retrieve a message from the destination's queue.
*
* @param messageid the message id of the message to retrieve
* @return a compositedata object which is a jmx version of the messages
* @throws opendataexception
*/
compositedata getmessage string messageid  throws opendataexception
/**
* removes a message from the queue. if the message has already been
* dispatched to another consumer, the message cannot be deleted and this
* method will return false.
*
* @param messageid
* @return true if the message was found and could be successfully deleted.
* @throws exception
*/
boolean removemessage string messageid  throws exception
/**
* removes the messages matching the given selector
*
* @return the number of messages removed
*/
int removematchingmessages string selector  throws exception
/**
* removes the messages matching the given selector up to the maximum number
* of matched messages
*
* @return the number of messages removed
*/
int removematchingmessages string selector  int maximummessages  throws exception
/**
* removes all of the messages in the queue.
*
* @throws exception
*/
void purge   throws exception
/**
* copies a given message to another destination.
*
* @param messageid
* @param destinationname
* @return true if the message was found and was successfully copied to the
*         other destination.
* @throws exception
*/
boolean copymessageto string messageid  string destinationname  throws exception
/**
* copies the messages matching the given selector
*
* @return the number of messages copied
*/
int copymatchingmessagesto string selector  string destinationname  throws exception
/**
* copies the messages matching the given selector up to the maximum number
* of matched messages
*
* @return the number of messages copied
*/
int copymatchingmessagesto string selector  string destinationname  int maximummessages  throws exception
/**
* moves the message to another destination.
*
* @param messageid
* @param destinationname
* @return true if the message was found and was successfully copied to the
*         other destination.
* @throws exception
*/
boolean movemessageto string messageid  string destinationname  throws exception
/**
* moves the messages matching the given selector
*
* @return the number of messages removed
*/
int movematchingmessagesto string selector  string destinationname  throws exception
/**
* moves the messages matching the given selector up to the maximum number
* of matched messages
*/
int movematchingmessagesto string selector  string destinationname  int maximummessages  throws exception