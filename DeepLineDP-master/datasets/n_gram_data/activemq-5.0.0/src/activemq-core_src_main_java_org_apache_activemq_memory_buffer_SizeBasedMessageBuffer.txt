/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq memory buffer
import java util arraylist
import java util iterator
import java util list
/**
* a {@link messagebuffer} which evicts from the largest buffers first.
*
* @version $revision: 1.1 $
*/
public class sizebasedmessagebuffer implements messagebuffer
private int limit   100   64   1024
private list<messagequeue> bubblelist   new arraylist<messagequeue>
private int size
private object lock   new object
public sizebasedmessagebuffer
public sizebasedmessagebuffer int limit
this limit   limit
public int getsize
synchronized  lock
return size
/**
* creates a new message queue instance
*/
public messagequeue createmessagequeue
messagequeue queue   new messagequeue this
synchronized  lock
queue setposition bubblelist size
bubblelist add queue
return queue
/**
* after a message queue has changed we may need to perform some evictions
*
* @param delta
* @param queuesize
*/
public void onsizechanged messagequeue queue  int delta  int queuesize
synchronized  lock
bubbleup queue  queuesize
size    delta
while  size > limit
messagequeue biggest   bubblelist get 0
size    biggest evictmessage
bubbledown biggest  0
public void clear
synchronized  lock
for  iterator<messagequeue> iter   bubblelist iterator    iter hasnext
messagequeue queue   iter next
queue clear
size   0
protected void bubbleup messagequeue queue  int queuesize
// lets bubble up to head of queueif we need to
int position   queue getposition
while    position >  0
messagequeue pivot   bubblelist get position
if  pivot getsize   < queuesize
swap position  pivot  position   1  queue
else
break
protected void bubbledown messagequeue biggest  int position
int queuesize   biggest getsize
int end   bubblelist size
for  int second   position   1  second < end  second
messagequeue pivot   bubblelist get second
if  pivot getsize   > queuesize
swap position  biggest  second  pivot
else
break
position   second
protected void swap int firstposition  messagequeue first  int secondposition  messagequeue second
bubblelist set firstposition  second
bubblelist set secondposition  first
first setposition secondposition
second setposition firstposition