/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadaptor
import java io ioexception
import java util iterator
import java util map
import java util map entry
import java util concurrent concurrenthashmap
import javax transaction xa xaexception
import org apache activemq broker connectioncontext
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq store messagestore
import org apache activemq store proxymessagestore
import org apache activemq store proxytopicmessagestore
import org apache activemq store topicmessagestore
import org apache activemq store transactionrecoverylistener
import org apache activemq store transactionstore
/**
* provides a transactionstore implementation that can create transaction aware
* messagestore objects from non transaction aware messagestore objects.
*
* @version $revision: 1.4 $
*/
public class kahatransactionstore implements transactionstore
private map transactions   new concurrenthashmap
private map prepared
private kahapersistenceadapter adaptor
kahatransactionstore kahapersistenceadapter adaptor  map preparedmap
this adaptor   adaptor
this prepared   preparedmap
public messagestore proxy messagestore messagestore
return new proxymessagestore messagestore
public void addmessage connectioncontext context  final message send  throws ioexception
kahatransactionstore this addmessage getdelegate    send
public void removemessage connectioncontext context  final messageack ack  throws ioexception
kahatransactionstore this removemessage getdelegate    ack
public topicmessagestore proxy topicmessagestore messagestore
return new proxytopicmessagestore messagestore
public void addmessage connectioncontext context  final message send  throws ioexception
kahatransactionstore this addmessage getdelegate    send
public void removemessage connectioncontext context  final messageack ack  throws ioexception
kahatransactionstore this removemessage getdelegate    ack
/**
* @see org.apache.activemq.store.transactionstore#prepare(transactionid)
*/
public void prepare transactionid txid
kahatransaction tx   gettx txid
if  tx    null
tx prepare
prepared put txid  tx
/**
* @throws xaexception
* @see org.apache.activemq.store.transactionstore#commit(org.apache.activemq.service.transaction)
*/
public void commit transactionid txid  boolean wasprepared  throws ioexception
kahatransaction tx   gettx txid
if  tx    null
tx commit this
removetx txid
/**
* @see org.apache.activemq.store.transactionstore#rollback(transactionid)
*/
public void rollback transactionid txid
kahatransaction tx   gettx txid
if  tx    null
tx rollback
removetx txid
public void start   throws exception
public void stop   throws exception
public synchronized void recover transactionrecoverylistener listener  throws ioexception
for  iterator i   prepared entryset   iterator    i hasnext
map entry entry    entry i next
xatransactionid xid    xatransactionid entry getkey
kahatransaction kt    kahatransaction entry getvalue
listener recover xid  kt getmessages    kt getacks
/**
* @param message
* @throws ioexception
*/
void addmessage final messagestore destination  final message message  throws ioexception
if  message isintransaction
kahatransaction tx   getorcreatetx message gettransactionid
tx add  kahamessagestore destination  message
else
destination addmessage null  message
/**
* @param ack
* @throws ioexception
*/
final void removemessage final messagestore destination  final messageack ack  throws ioexception
if  ack isintransaction
kahatransaction tx   getorcreatetx ack gettransactionid
tx add  kahamessagestore destination  ack
else
destination removemessage null  ack
protected synchronized kahatransaction gettx transactionid key
kahatransaction result    kahatransaction transactions get key
if  result    null
result    kahatransaction prepared get key
return result
protected synchronized kahatransaction getorcreatetx transactionid key
kahatransaction result    kahatransaction transactions get key
if  result    null
result   new kahatransaction
transactions put key  result
return result
protected synchronized void removetx transactionid key
transactions remove key
prepared remove key
public void delete
transactions clear
prepared clear
protected messagestore getstorebyid object id
return adaptor retrievemessagestore id