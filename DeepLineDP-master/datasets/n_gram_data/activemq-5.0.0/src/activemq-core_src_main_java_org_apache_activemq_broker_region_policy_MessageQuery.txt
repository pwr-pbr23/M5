/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region policy
import javax jms messagelistener
import org apache activemq command activemqdestination
import org apache activemq command message
/**
* represents some kind of query which will load initial messages from some source for a new topic subscriber.
*
* @version $revision$
*/
public interface messagequery
/**
* executes the query for messages; each message is passed into the listener
*
* @param destination the destination on which the query is to be performed
* @param listener is the listener to notify as each message is created or loaded
*/
void execute activemqdestination destination  messagelistener listener  throws exception
/**
* returns true if the given update is valid and does not overlap with the initial message query.
* when performing an initial load from some source, there is a chance that an update may occur which is logically before
* the message sent on the initial load - so this method provides a hook where the query instance can keep track of the version ids
* of the messages sent so that if an older version is sent as an update it can be excluded to avoid going backwards in time.
*
* e.g. if the execute() method creates version 2 of an object and then an update message is sent for version 1, this method should return false to
* hide the old update message.
*
* @param message the update message which may have been sent before the query actually completed
* @return true if the update message is valid otherwise false in which case the update message will be discarded.
*/
boolean validateupdate message message