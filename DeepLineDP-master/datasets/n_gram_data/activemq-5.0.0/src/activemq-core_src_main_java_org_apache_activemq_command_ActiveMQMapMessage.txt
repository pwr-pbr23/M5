/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io datainputstream
import java io dataoutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import java util collections
import java util enumeration
import java util hashmap
import java util map
import java util zip deflateroutputstream
import java util zip inflaterinputstream
import javax jms jmsexception
import javax jms mapmessage
import javax jms messageformatexception
import javax jms messagenotwriteableexception
import org apache activemq activemqconnection
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util jmsexceptionsupport
import org apache activemq util marshallingsupport
import org apache activemq wireformat wireformat
/**
* a <code>mapmessage</code> object is used to send a set of name-value pairs.
* the names are <code>string</code> objects, and the values are primitive
* data types in the java programming language. the names must have a value that
* is not null, and not an empty string. the entries can be accessed
* sequentially or randomly by name. the order of the entries is undefined.
* <code>mapmessage</code> inherits from the <code>message</code> interface
* and adds a message body that contains a map.
* <p>
* the primitive types can be read or written explicitly using methods for each
* type. they may also be read or written generically as objects. for instance,
* a call to <code>mapmessage.setint("foo", 6)</code> is equivalent to
* <code> mapmessage.setobject("foo", new integer(6))</code>. both forms are
* provided, because the explicit form is convenient for static programming, and
* the object form is needed when types are not known at compile time.
* <p>
* when a client receives a <code>mapmessage</code>, it is in read-only mode.
* if a client attempts to write to the message at this point, a
* <code>messagenotwriteableexception</code> is thrown. if
* <code>clearbody</code> is called, the message can now be both read from and
* written to.
* <p>
* <code>mapmessage</code> objects support the following conversion table. the
* marked cases must be supported. the unmarked cases must throw a
* <code>jmsexception</code>. the <code>string</code> -to-primitive
* conversions may throw a runtime exception if the primitive's
* <code>valueof()</code> method does not accept it as a valid
* <code> string</code> representation of the primitive.
* <p>
* a value written as the row type can be read as the column type. <p/>
*
* <pre>
* | | boolean byte short char int long float double string byte[] |----------------------------------------------------------------------
* |boolean | x x |byte | x x x x x |short | x x x x |char | x x |int | x x x |long | x x |float | x x x |double | x x
* |string | x x x x x x x x |byte[] | x |----------------------------------------------------------------------
* &lt;p/&gt;
* </pre>
*
* <p/>
* <p>
* attempting to read a null value as a primitive type must be treated as
* calling the primitive's corresponding <code>valueof(string)</code>
* conversion method with a null value. since <code>char</code> does not
* support a <code>string</code> conversion, attempting to read a null value
* as a <code>char</code> must throw a <code>nullpointerexception</code>.
*
* @openwire:marshaller code="25"
* @see javax.jms.session#createmapmessage()
* @see javax.jms.bytesmessage
* @see javax.jms.message
* @see javax.jms.objectmessage
* @see javax.jms.streammessage
* @see javax.jms.textmessage
*/
public class activemqmapmessage extends activemqmessage implements mapmessage
public static final byte data_structure_type   commandtypes activemq_map_message
protected transient map<string  object> map   new hashmap<string  object>
public message copy
activemqmapmessage copy   new activemqmapmessage
copy copy
return copy
private void copy activemqmapmessage copy
storecontent
super copy copy
// we only need to marshal the content if we are hitting the wire.
public void beforemarshall wireformat wireformat  throws ioexception
super beforemarshall wireformat
storecontent
private void storecontent
try
if  getcontent      null     map isempty
bytearrayoutputstream bytesout   new bytearrayoutputstream
outputstream os   bytesout
activemqconnection connection   getconnection
if  connection    null    connection isusecompression
compressed   true
os   new deflateroutputstream os
dataoutputstream dataout   new dataoutputstream os
marshallingsupport marshalprimitivemap map  dataout
dataout close
setcontent bytesout tobytesequence
catch  ioexception e
throw new runtimeexception e
/**
* builds the message body from data
*
* @throws jmsexception
* @throws ioexception
*/
private void loadcontent   throws jmsexception
try
if  getcontent      null    map isempty
bytesequence content   getcontent
inputstream is   new bytearrayinputstream content
if  iscompressed
is   new inflaterinputstream is
datainputstream datain   new datainputstream is
map   marshallingsupport unmarshalprimitivemap datain
datain close
catch  ioexception e
throw jmsexceptionsupport create e
public byte getdatastructuretype
return data_structure_type
public string getjmsxmimetype
return
/**
* clears out the message body. clearing a message's body does not clear its
* header values or property entries.
* <p>
* if this message body was read-only, calling this method leaves the
* message body in the same state as an empty body in a newly created
* message.
*/
public void clearbody   throws jmsexception
super clearbody
map clear
/**
* returns the <code>boolean</code> value with the specified name.
*
* @param name the name of the <code>boolean</code>
* @return the <code>boolean</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public boolean getboolean string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return false
if  value instanceof boolean
return   boolean value  booleanvalue
if  value instanceof string
return boolean valueof value tostring    booleanvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>byte</code> value with the specified name.
*
* @param name the name of the <code>byte</code>
* @return the <code>byte</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public byte getbyte string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof byte
return   byte value  bytevalue
if  value instanceof string
return byte valueof value tostring    bytevalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>short</code> value with the specified name.
*
* @param name the name of the <code>short</code>
* @return the <code>short</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public short getshort string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof short
return   short value  shortvalue
if  value instanceof byte
return   byte value  shortvalue
if  value instanceof string
return short valueof value tostring    shortvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the unicode character value with the specified name.
*
* @param name the name of the unicode character
* @return the unicode character value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public char getchar string name  throws jmsexception
initializereading
object value   map get name
if  value    null
throw new nullpointerexception
if  value instanceof character
return   character value  charvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>int</code> value with the specified name.
*
* @param name the name of the <code>int</code>
* @return the <code>int</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public int getint string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof integer
return   integer value  intvalue
if  value instanceof short
return   short value  intvalue
if  value instanceof byte
return   byte value  intvalue
if  value instanceof string
return integer valueof value tostring    intvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>long</code> value with the specified name.
*
* @param name the name of the <code>long</code>
* @return the <code>long</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public long getlong string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof long
return   long value  longvalue
if  value instanceof integer
return   integer value  longvalue
if  value instanceof short
return   short value  longvalue
if  value instanceof byte
return   byte value  longvalue
if  value instanceof string
return long valueof value tostring    longvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>float</code> value with the specified name.
*
* @param name the name of the <code>float</code>
* @return the <code>float</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public float getfloat string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof float
return   float value  floatvalue
if  value instanceof string
return float valueof value tostring    floatvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>double</code> value with the specified name.
*
* @param name the name of the <code>double</code>
* @return the <code>double</code> value with the specified name
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public double getdouble string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return 0
if  value instanceof double
return   double value  doublevalue
if  value instanceof float
return   float value  floatvalue
if  value instanceof string
return float valueof value tostring    floatvalue
else
throw new messageformatexception     value getclass   getname
/**
* returns the <code>string</code> value with the specified name.
*
* @param name the name of the <code>string</code>
* @return the <code>string</code> value with the specified name; if there
*         is no item by this name, a null value is returned
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public string getstring string name  throws jmsexception
initializereading
object value   map get name
if  value    null
return null
if  value instanceof byte
throw new messageformatexception
else
return value tostring
/**
* returns the byte array value with the specified name.
*
* @param name the name of the byte array
* @return a copy of the byte array value with the specified name; if there
*         is no item by this name, a null value is returned.
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageformatexception if this type conversion is invalid.
*/
public byte getbytes string name  throws jmsexception
initializereading
object value   map get name
if  value instanceof byte
return  byte value
else
throw new messageformatexception     value getclass   getname
/**
* returns the value of the object with the specified name.
* <p>
* this method can be used to return, in objectified format, an object in
* the java programming language ("java object") that had been stored in the
* map with the equivalent <code>setobject</code> method call, or its
* equivalent primitive <code>set <i>type </i></code> method.
* <p>
* note that byte values are returned as <code>byte[]</code>, not
* <code>byte[]</code>.
*
* @param name the name of the java object
* @return a copy of the java object value with the specified name, in
*         objectified format (for example, if the object was set as an
*         <code>int</code>, an <code>integer</code> is returned); if
*         there is no item by this name, a null value is returned
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
*/
public object getobject string name  throws jmsexception
initializereading
return map get name
/**
* returns an <code>enumeration</code> of all the names in the
* <code>mapmessage</code> object.
*
* @return an enumeration of all the names in this <code>mapmessage</code>
* @throws jmsexception
*/
public enumeration<string> getmapnames   throws jmsexception
initializereading
return collections enumeration map keyset
protected void put string name  object value  throws jmsexception
if  name    null
throw new illegalargumentexception
if  name length      0
throw new illegalargumentexception
map put name  value
/**
* sets a <code>boolean</code> value with the specified name into the map.
*
* @param name the name of the <code>boolean</code>
* @param value the <code>boolean</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setboolean string name  boolean value  throws jmsexception
initializewriting
put name  value ? boolean true   boolean false
/**
* sets a <code>byte</code> value with the specified name into the map.
*
* @param name the name of the <code>byte</code>
* @param value the <code>byte</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setbyte string name  byte value  throws jmsexception
initializewriting
put name  byte valueof value
/**
* sets a <code>short</code> value with the specified name into the map.
*
* @param name the name of the <code>short</code>
* @param value the <code>short</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setshort string name  short value  throws jmsexception
initializewriting
put name  short valueof value
/**
* sets a unicode character value with the specified name into the map.
*
* @param name the name of the unicode character
* @param value the unicode character value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setchar string name  char value  throws jmsexception
initializewriting
put name  character valueof value
/**
* sets an <code>int</code> value with the specified name into the map.
*
* @param name the name of the <code>int</code>
* @param value the <code>int</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setint string name  int value  throws jmsexception
initializewriting
put name  integer valueof value
/**
* sets a <code>long</code> value with the specified name into the map.
*
* @param name the name of the <code>long</code>
* @param value the <code>long</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setlong string name  long value  throws jmsexception
initializewriting
put name  long valueof value
/**
* sets a <code>float</code> value with the specified name into the map.
*
* @param name the name of the <code>float</code>
* @param value the <code>float</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setfloat string name  float value  throws jmsexception
initializewriting
put name  new float value
/**
* sets a <code>double</code> value with the specified name into the map.
*
* @param name the name of the <code>double</code>
* @param value the <code>double</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setdouble string name  double value  throws jmsexception
initializewriting
put name  new double value
/**
* sets a <code>string</code> value with the specified name into the map.
*
* @param name the name of the <code>string</code>
* @param value the <code>string</code> value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setstring string name  string value  throws jmsexception
initializewriting
put name  value
/**
* sets a byte array value with the specified name into the map.
*
* @param name the name of the byte array
* @param value the byte array value to set in the map; the array is copied
*                so that the value for <code>name </code> will not be
*                altered by future modifications
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws nullpointerexception if the name is null, or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setbytes string name  byte value  throws jmsexception
initializewriting
if  value    null
put name  value
else
map remove name
/**
* sets a portion of the byte array value with the specified name into the
* map.
*
* @param name the name of the byte array
* @param value the byte array value to set in the map
* @param offset the initial offset within the byte array
* @param length the number of bytes to use
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setbytes string name  byte value  int offset  int length  throws jmsexception
initializewriting
byte data   new byte
system arraycopy value  offset  data  0  length
put name  data
/**
* sets an object value with the specified name into the map.
* <p>
* this method works only for the objectified primitive object types (<code>integer</code>,<code>double</code>,
* <code>long</code> &nbsp;...), <code>string</code> objects, and byte
* arrays.
*
* @param name the name of the java object
* @param value the java object value to set in the map
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws illegalargumentexception if the name is null or if the name is an
*                 empty string.
* @throws messageformatexception if the object is invalid.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void setobject string name  object value  throws jmsexception
initializewriting
if  value    null
// byte[] not allowed on properties
if    value instanceof byte
checkvalidobject value
put name  value
else
put name  null
/**
* indicates whether an item exists in this <code>mapmessage</code>
* object.
*
* @param name the name of the item to test
* @return true if the item exists
* @throws jmsexception if the jms provider fails to determine if the item
*                 exists due to some internal error.
*/
public boolean itemexists string name  throws jmsexception
initializereading
return map containskey name
private void initializereading   throws jmsexception
loadcontent
private void initializewriting   throws messagenotwriteableexception
checkreadonlybody
setcontent null
public string tostring
return super tostring             map
public map<string  object> getcontentmap   throws jmsexception
initializereading
return map