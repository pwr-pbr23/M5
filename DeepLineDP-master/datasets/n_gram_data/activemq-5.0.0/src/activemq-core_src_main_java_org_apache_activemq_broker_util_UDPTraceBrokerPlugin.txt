/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker util
import java io dataoutputstream
import java io ioexception
import java net datagrampacket
import java net datagramsocket
import java net inetaddress
import java net inetsocketaddress
import java net socketaddress
import java net uri
import java net urisyntaxexception
import java net unknownhostexception
import org apache activemq broker brokerpluginsupport
import org apache activemq broker connectioncontext
import org apache activemq broker consumerbrokerexchange
import org apache activemq broker producerbrokerexchange
import org apache activemq broker region subscription
import org apache activemq command activemqdestination
import org apache activemq command brokerid
import org apache activemq command connectioninfo
import org apache activemq command consumerinfo
import org apache activemq command datastructure
import org apache activemq command destinationinfo
import org apache activemq command journaltrace
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messagedispatchnotification
import org apache activemq command messagepull
import org apache activemq command producerinfo
import org apache activemq command removesubscriptioninfo
import org apache activemq command response
import org apache activemq command sessioninfo
import org apache activemq command transactionid
import org apache activemq command transactioninfo
import org apache activemq openwire openwireformatfactory
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq wireformat wireformat
import org apache activemq wireformat wireformatfactory
import org apache commons logging log
import org apache commons logging logfactory
/**
* a broker interceptor which allows you to trace all operations to a udp
* socket.
*
* @org.apache.xbean.xbean element="udptracebrokerplugin"
* @version $revision: 427613 $
*/
public class udptracebrokerplugin extends brokerpluginsupport
private static final log log   logfactory getlog udptracebrokerplugin class
protected wireformat wireformat
protected wireformatfactory wireformatfactory
protected int maxtracedatagramsize   1024   4
protected uri destination
protected datagramsocket socket
protected brokerid brokerid
protected socketaddress address
protected boolean broadcast
public udptracebrokerplugin
try
destination   new uri
catch  urisyntaxexception wonthappen
public void start   throws exception
super start
if  getwireformat      null
throw new illegalargumentexception
if  address    null
address   createsocketaddress destination
socket   createsocket
brokerid   super getbrokerid
trace new journaltrace
protected datagramsocket createsocket   throws ioexception
datagramsocket s   new datagramsocket
s setsendbuffersize maxtracedatagramsize
s setbroadcast broadcast
return s
public void stop   throws exception
trace new journaltrace
socket close
super stop
private void trace datastructure command
try
bytearrayoutputstream baos   new bytearrayoutputstream maxtracedatagramsize
dataoutputstream out   new dataoutputstream baos
wireformat marshal brokerid  out
wireformat marshal command  out
out close
bytesequence sequence   baos tobytesequence
datagrampacket datagram   new datagrampacket sequence getdata    sequence getoffset    sequence getlength    address
socket send datagram
catch  throwable e
log debug     command  e
public void send producerbrokerexchange producerexchange  message messagesend  throws exception
trace messagesend
super send producerexchange  messagesend
public void acknowledge consumerbrokerexchange consumerexchange  messageack ack  throws exception
trace ack
super acknowledge consumerexchange  ack
public void addconnection connectioncontext context  connectioninfo info  throws exception
trace info
super addconnection context  info
public subscription addconsumer connectioncontext context  consumerinfo info  throws exception
trace info
return super addconsumer context  info
public void adddestinationinfo connectioncontext context  destinationinfo info  throws exception
trace info
super adddestinationinfo context  info
public void addproducer connectioncontext context  producerinfo info  throws exception
trace info
super addproducer context  info
public void addsession connectioncontext context  sessioninfo info  throws exception
trace info
super addsession context  info
public void begintransaction connectioncontext context  transactionid xid  throws exception
trace new transactioninfo context getconnectionid    xid  transactioninfo begin
super begintransaction context  xid
public void committransaction connectioncontext context  transactionid xid  boolean onephase  throws exception
trace new transactioninfo context getconnectionid    xid  onephase ? transactioninfo commit_one_phase   transactioninfo commit_two_phase
super committransaction context  xid  onephase
public void forgettransaction connectioncontext context  transactionid xid  throws exception
trace new transactioninfo context getconnectionid    xid  transactioninfo forget
super forgettransaction context  xid
public response messagepull connectioncontext context  messagepull pull  throws exception
trace pull
return super messagepull context  pull
public int preparetransaction connectioncontext context  transactionid xid  throws exception
trace new transactioninfo context getconnectionid    xid  transactioninfo prepare
return super preparetransaction context  xid
public void postprocessdispatch messagedispatch messagedispatch
trace messagedispatch
super postprocessdispatch messagedispatch
public void processdispatchnotification messagedispatchnotification messagedispatchnotification  throws exception
trace messagedispatchnotification
super processdispatchnotification messagedispatchnotification
public void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
trace info createremovecommand
super removeconnection context  info  error
public void removeconsumer connectioncontext context  consumerinfo info  throws exception
trace info createremovecommand
super removeconsumer context  info
public void removedestination connectioncontext context  activemqdestination destination  long timeout  throws exception
super removedestination context  destination  timeout
public void removedestinationinfo connectioncontext context  destinationinfo info  throws exception
trace info
super removedestinationinfo context  info
public void removeproducer connectioncontext context  producerinfo info  throws exception
trace info createremovecommand
super removeproducer context  info
public void removesession connectioncontext context  sessioninfo info  throws exception
trace info createremovecommand
super removesession context  info
public void removesubscription connectioncontext context  removesubscriptioninfo info  throws exception
trace info
super removesubscription context  info
public void rollbacktransaction connectioncontext context  transactionid xid  throws exception
trace new transactioninfo context getconnectionid    xid  transactioninfo rollback
super rollbacktransaction context  xid
public wireformat getwireformat
if  wireformat    null
wireformat   createwireformat
return wireformat
protected wireformat createwireformat
return getwireformatfactory   createwireformat
public void setwireformat wireformat wireformat
this wireformat   wireformat
public wireformatfactory getwireformatfactory
if  wireformatfactory    null
wireformatfactory   createwireformatfactory
return wireformatfactory
protected openwireformatfactory createwireformatfactory
openwireformatfactory wf   new openwireformatfactory
wf setcacheenabled false
wf setversion 1
wf settightencodingenabled true
wf setsizeprefixdisabled true
return wf
public void setwireformatfactory wireformatfactory wireformatfactory
this wireformatfactory   wireformatfactory
protected socketaddress createsocketaddress uri location  throws unknownhostexception
inetaddress a   inetaddress getbyname location gethost
int port   location getport
return new inetsocketaddress a  port
public uri getdestination
return destination
public void setdestination uri destination
this destination   destination
public int getmaxtracedatagramsize
return maxtracedatagramsize
public void setmaxtracedatagramsize int maxtracedatagramsize
this maxtracedatagramsize   maxtracedatagramsize
public boolean isbroadcast
return broadcast
public void setbroadcast boolean broadcast
this broadcast   broadcast
public socketaddress getaddress
return address
public void setaddress socketaddress address
this address   address