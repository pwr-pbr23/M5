/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl container
import java io ioexception
import java util arraylist
import java util collection
import java util iterator
import java util list
import java util listiterator
import org apache activemq kaha containerid
import org apache activemq kaha listcontainer
import org apache activemq kaha marshaller
import org apache activemq kaha runtimestoreexception
import org apache activemq kaha store
import org apache activemq kaha storeentry
import org apache activemq kaha storelocation
import org apache activemq kaha impl datamanager
import org apache activemq kaha impl data item
import org apache activemq kaha impl index indexitem
import org apache activemq kaha impl index indexmanager
import org apache commons logging log
import org apache commons logging logfactory
/**
* implementation of a listcontainer
*
* @version $revision: 1.2 $
*/
public class listcontainerimpl extends basecontainerimpl implements listcontainer
private static final log log   logfactory getlog listcontainerimpl class
protected marshaller marshaller   store object_marshaller
public listcontainerimpl containerid id  indexitem root  indexmanager indexmanager
datamanager datamanager  boolean persistentindex  throws ioexception
super id  root  indexmanager  datamanager  persistentindex
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#load()
*/
public synchronized void load
checkclosed
if   loaded
if   loaded
loaded   true
try
init
long nextitem   root getnextitem
while  nextitem    item position_not_set
indexitem item   indexmanager getindex nextitem
indexlist add item
itemadded item  indexlist size     1  getvalue item
nextitem   item getnextitem
catch  ioexception e
log error     getid    e
throw new runtimestoreexception e
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#unload()
*/
public synchronized void unload
checkclosed
if  loaded
loaded   false
indexlist clear
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#setkeymarshaller(org.apache.activemq.kaha.marshaller)
*/
public synchronized void setmarshaller marshaller marshaller
checkclosed
this marshaller   marshaller
public synchronized boolean equals object obj
load
boolean result   false
if  obj    null    obj instanceof list
list other    list obj
result   other size      size
if  result
for  int i   0  i < indexlist size    i
object o1   other get i
object o2   get i
result   o1    o2     o1    null    o2    null    o1 equals o2
if   result
break
return result
public int hashcode
return super hashcode
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#size()
*/
public synchronized int size
load
return indexlist size
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#addfirst(java.lang.object)
*/
public synchronized void addfirst object o
internaladdfirst o
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#addlast(java.lang.object)
*/
public synchronized void addlast object o
internaladdlast o
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#removefirst()
*/
public synchronized object removefirst
load
object result   null
indexitem item   indexlist getfirst
if  item    null
itemremoved 0
result   getvalue item
indexitem prev   root
indexitem next   indexlist size   > 1 ?  indexitem indexlist get 1    null
indexlist removefirst
delete item  prev  next
item   null
return result
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#removelast()
*/
public synchronized object removelast
load
object result   null
indexitem last   indexlist getlast
if  last    null
itemremoved indexlist size     1
result   getvalue last
indexitem prev   indexlist getpreventry last
indexitem next   null
indexlist removelast
delete last  prev  next
return result
/*
* (non-javadoc)
*
* @see java.util.list#isempty()
*/
public synchronized boolean isempty
load
return indexlist isempty
/*
* (non-javadoc)
*
* @see java.util.list#contains(java.lang.object)
*/
public synchronized boolean contains object o
load
boolean result   false
if  o    null
indexitem next   indexlist getfirst
while  next    null
object value   getvalue next
if  value    null    value equals o
result   true
break
next   indexlist getnextentry next
return result
/*
* (non-javadoc)
*
* @see java.util.list#iterator()
*/
public synchronized iterator iterator
load
return listiterator
/*
* (non-javadoc)
*
* @see java.util.list#toarray()
*/
public synchronized object toarray
load
list<object> tmp   new arraylist<object> indexlist size
indexitem next   indexlist getfirst
while  next    null
object value   getvalue next
tmp add value
next   indexlist getnextentry next
return tmp toarray
/*
* (non-javadoc)
*
* @see java.util.list#toarray(t[])
*/
public synchronized object toarray object a
load
list<object> tmp   new arraylist<object> indexlist size
indexitem next   indexlist getfirst
while  next    null
object value   getvalue next
tmp add value
next   indexlist getnextentry next
return tmp toarray a
/*
* (non-javadoc)
*
* @see java.util.list#add(e)
*/
public synchronized boolean add object o
load
addlast o
return true
/*
* (non-javadoc)
*
* @see java.util.list#remove(java.lang.object)
*/
public synchronized boolean remove object o
load
boolean result   false
int pos   0
indexitem next   indexlist getfirst
while  next    null
object value   getvalue next
if  value    null    value equals o
remove next
itemremoved pos
result   true
break
next   indexlist getnextentry next
pos
return result
protected synchronized void remove indexitem item
indexitem prev   indexlist getpreventry item
indexitem next   indexlist getnextentry item
indexlist remove item
delete item  prev  next
/*
* (non-javadoc)
*
* @see java.util.list#containsall(java.util.collection)
*/
public synchronized boolean containsall collection c
load
for  iterator i   c iterator    i hasnext
object obj   i next
if   contains obj
return false
return true
/*
* (non-javadoc)
*
* @see java.util.list#addall(java.util.collection)
*/
public synchronized boolean addall collection c
load
for  iterator i   c iterator    i hasnext
add i next
return true
/*
* (non-javadoc)
*
* @see java.util.list#addall(int, java.util.collection)
*/
public synchronized boolean addall int index  collection c
load
boolean result   false
listiterator e1   listiterator index
iterator e2   c iterator
while  e2 hasnext
e1 add e2 next
result   true
return result
/*
* (non-javadoc)
*
* @see java.util.list#removeall(java.util.collection)
*/
public synchronized boolean removeall collection c
load
boolean result   true
for  iterator i   c iterator    i hasnext
object obj   i next
result    remove obj
return result
/*
* (non-javadoc)
*
* @see java.util.list#retainall(java.util.collection)
*/
public synchronized boolean retainall collection c
load
list<object> tmplist   new arraylist<object>
indexitem next   indexlist getfirst
while  next    null
object o   getvalue next
if   c contains o
tmplist add o
next   indexlist getnextentry next
for  iterator<object> i   tmplist iterator    i hasnext
remove i next
return  tmplist isempty
/*
* (non-javadoc)
*
* @see java.util.list#clear()
*/
public synchronized void clear
checkclosed
super clear
doclear
/*
* (non-javadoc)
*
* @see java.util.list#get(int)
*/
public synchronized object get int index
load
object result   null
indexitem item   indexlist get index
if  item    null
result   getvalue item
return result
/*
* (non-javadoc)
*
* @see java.util.list#set(int, e)
*/
public synchronized object set int index  object element
load
object result   null
indexitem replace   indexlist isempty   ? null    indexitem indexlist get index
indexitem prev    indexlist isempty       index   1  < 0  ? null    indexitem indexlist
get index   1
indexitem next    indexlist isempty       index   1  >  size    ? null    indexitem indexlist
get index   1
result   getvalue replace
indexlist remove index
delete replace  prev  next
itemremoved index
add index  element
return result
protected synchronized indexitem internalset int index  object element
indexitem replace   indexlist isempty   ? null    indexitem indexlist get index
indexitem prev    indexlist isempty       index   1  < 0  ? null    indexitem indexlist
get index   1
indexitem next    indexlist isempty       index   1  >  size    ? null    indexitem indexlist
get index   1
indexlist remove index
delete replace  prev  next
itemremoved index
return internaladd index  element
/*
* (non-javadoc)
*
* @see java.util.list#add(int, e)
*/
public synchronized void add int index  object element
load
indexitem item   insert index  element
indexlist add index  item
itemadded item  index  element
protected synchronized storeentry internaladdlast object o
load
indexitem item   writelast o
indexlist addlast item
itemadded item  indexlist size     1  o
return item
protected synchronized storeentry internaladdfirst object o
load
indexitem item   writefirst o
indexlist addfirst item
itemadded item  0  o
return item
protected synchronized indexitem internaladd int index  object element
load
indexitem item   insert index  element
indexlist add index  item
itemadded item  index  element
return item
protected synchronized storeentry internalget int index
load
if  index >  0    index < indexlist size
return indexlist get index
return null
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#doremove(int)
*/
public synchronized boolean doremove int index
load
boolean result   false
indexitem item   indexlist get index
if  item    null
result   true
indexitem prev   indexlist getpreventry item
prev   prev    null ? prev   root
indexitem next   indexlist getnextentry prev
indexlist remove index
itemremoved index
delete item  prev  next
return result
/*
* (non-javadoc)
*
* @see java.util.list#remove(int)
*/
public synchronized object remove int index
load
object result   null
indexitem item   indexlist get index
if  item    null
itemremoved index
result   getvalue item
indexitem prev   indexlist getpreventry item
prev   prev    null ? prev   root
indexitem next   indexlist getnextentry item
indexlist remove index
delete item  prev  next
return result
/*
* (non-javadoc)
*
* @see java.util.list#indexof(java.lang.object)
*/
public synchronized int indexof object o
load
int result    1
if  o    null
int count   0
indexitem next   indexlist getfirst
while  next    null
object value   getvalue next
if  value    null    value equals o
result   count
break
count
next   indexlist getnextentry next
return result
/*
* (non-javadoc)
*
* @see java.util.list#lastindexof(java.lang.object)
*/
public synchronized int lastindexof object o
load
int result    1
if  o    null
int count   indexlist size     1
indexitem next   indexlist getlast
while  next    null
object value   getvalue next
if  value    null    value equals o
result   count
break
count
next   indexlist getpreventry next
return result
/*
* (non-javadoc)
*
* @see java.util.list#listiterator()
*/
public synchronized listiterator listiterator
load
return new containerlistiterator this  indexlist  indexlist getroot
/*
* (non-javadoc)
*
* @see java.util.list#listiterator(int)
*/
public synchronized listiterator listiterator int index
load
indexitem start    index   1  > 0 ? indexlist get index   1    indexlist getroot
return new containerlistiterator this  indexlist  start
/*
* (non-javadoc)
*
* @see java.util.list#sublist(int, int)
*/
public synchronized list<object> sublist int fromindex  int toindex
load
list<object> result   new arraylist<object>
int count   fromindex
indexitem next   indexlist get fromindex
while  next    null    count   < toindex
result add getvalue next
next   indexlist getnextentry next
return result
/**
* add an object to the list but get a storeentry of its position
*
* @param object
* @return the entry in the store
*/
public synchronized storeentry placelast object object
storeentry item   internaladdlast object
return item
/**
* insert an object in first position int the list but get a storeentry of
* its position
*
* @param object
* @return the location in the store
*/
public synchronized storeentry placefirst object object
storeentry item   internaladdfirst object
return item
/**
* @param entry
* @param object
* @see org.apache.activemq.kaha.listcontainer#update(org.apache.activemq.kaha.storeentry,
*      java.lang.object)
*/
public synchronized void update storeentry entry  object object
try
datamanager updateitem entry getvaluedataitem    marshaller  object
catch  ioexception e
throw new runtimeexception e
/**
* retrieve an object from the store by its location
*
* @param entry
* @return the object at that entry
*/
public synchronized object get final storeentry entry
load
storeentry entrytouse   refresh entry
return getvalue entrytouse
/**
* remove the object at the storeentry
*
* @param entry
* @return true if successful
*/
public synchronized boolean remove storeentry entry
indexitem item    indexitem entry
load
boolean result   false
if  item    null
remove item
result   true
return result
/**
* get the storeentry for the first item of the list
*
* @return the first storeentry or null if the list is empty
*/
public synchronized storeentry getfirst
load
return indexlist getfirst
/**
* get the storeentry for the last item of the list
*
* @return the last storeentry or null if the list is empty
*/
public synchronized storeentry getlast
load
return indexlist getlast
/**
* get the next storeentry from the list
*
* @param entry
* @return the next storeentry or null
*/
public synchronized storeentry getnext storeentry entry
load
indexitem item    indexitem entry
return indexlist getnextentry item
/**
* get the previous storeentry from the list
*
* @param entry
* @return the previous store entry or null
*/
public synchronized storeentry getprevious storeentry entry
load
indexitem item    indexitem entry
return indexlist getpreventry item
/**
* it's possible that a storeentry could be come stale this will return an
* upto date entry for the storeentry position
*
* @param entry old entry
* @return a refreshed storeentry
*/
public synchronized storeentry refresh storeentry entry
load
return indexlist getentry entry
protected synchronized indexitem writelast object value
indexitem index   null
try
if  value    null
storelocation data   datamanager storedataitem marshaller  value
index   indexmanager createnewindex
index setvaluedata data
indexitem prev   indexlist getlast
prev   prev    null ? prev   root
indexitem next   indexlist getnextentry prev
prev setnextitem index getoffset
index setpreviousitem prev getoffset
updateindexes prev
if  next    null
next setpreviousitem index getoffset
index setnextitem next getoffset
updateindexes next
storeindex index
catch  ioexception e
log error     value  e
throw new runtimestoreexception e
return index
protected synchronized indexitem writefirst object value
indexitem index   null
try
if  value    null
storelocation data   datamanager storedataitem marshaller  value
index   indexmanager createnewindex
index setvaluedata data
indexitem prev   root
indexitem next   indexlist getnextentry prev
prev setnextitem index getoffset
index setpreviousitem prev getoffset
updateindexes prev
if  next    null
next setpreviousitem index getoffset
index setnextitem next getoffset
updateindexes next
storeindex index
catch  ioexception e
log error     value  e
throw new runtimestoreexception e
return index
protected synchronized indexitem insert int insertpos  object value
indexitem index   null
try
if  value    null
storelocation data   datamanager storedataitem marshaller  value
index   indexmanager createnewindex
index setvaluedata data
indexitem prev   null
indexitem next   null
if  insertpos <  0
prev   root
next   indexlist getnextentry root
else if  insertpos >  indexlist size
prev   indexlist getlast
if  prev  null
prev root
next   null
else
prev   indexlist get insertpos
prev   prev    null ? prev   root
next   indexlist getnextentry prev
prev setnextitem index getoffset
index setpreviousitem prev getoffset
updateindexes prev
if  next    null
next setpreviousitem index getoffset
index setnextitem next getoffset
updateindexes next
storeindex index
indexlist setroot root
catch  ioexception e
log error     value  e
throw new runtimestoreexception e
return index
protected synchronized object getvalue storeentry item
object result   null
if  item    null
try
storelocation data   item getvaluedataitem
result   datamanager readitem marshaller  data
catch  ioexception e
log error     item  e
throw new runtimestoreexception e
return result
/**
* @return a string representation of this collection.
*/
public synchronized string tostring
stringbuffer result   new stringbuffer
result append
iterator i   iterator
boolean hasnext   i hasnext
while  hasnext
object o   i next
result append string valueof o
hasnext   i hasnext
if  hasnext
result append
result append
return result tostring
protected synchronized void itemadded indexitem item  int pos  object value
protected synchronized void itemremoved int pos