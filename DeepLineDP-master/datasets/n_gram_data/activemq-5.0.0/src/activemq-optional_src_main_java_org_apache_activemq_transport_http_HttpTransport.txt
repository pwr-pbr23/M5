/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport http
import java io ioexception
import java io inputstream
import java io outputstreamwriter
import java io writer
import java net httpurlconnection
import java net malformedurlexception
import java net uri
import java net url
import org apache activemq command command
import org apache activemq command connectioninfo
import org apache activemq transport util textwireformat
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util callback
import org apache activemq util ioexceptionsupport
import org apache activemq util servicestopper
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision$
*/
public class httptransport extends httptransportsupport
private static final log log   logfactory getlog httptransport class
private httpurlconnection sendconnection
private httpurlconnection receiveconnection
private url url
private string clientid
// private string sessionid;
public httptransport textwireformat wireformat  uri remoteurl  throws malformedurlexception
super wireformat  remoteurl
url   new url remoteurl tostring
public void oneway object o  throws ioexception
final command command    command o
try
if  command getdatastructuretype      connectioninfo data_structure_type
boolean startgetthread   clientid    null
clientid     connectioninfo command  getclientid
if  startgetthread    isstarted
try
super dostart
catch  exception e
throw ioexceptionsupport create e
httpurlconnection connection   getsendconnection
string text   gettextwireformat   marshaltext command
writer writer   new outputstreamwriter connection getoutputstream
writer write text
writer flush
int answer   connection getresponsecode
if  answer    httpurlconnection http_ok
throw new ioexception     command       answer
// checksession(connection);
catch  ioexception e
throw ioexceptionsupport create     command       e  e
public void run
log trace     this
uri remoteurl   getremoteurl
while   isstopped
try
httpurlconnection connection   getreceiveconnection
int answer   connection getresponsecode
if  answer    httpurlconnection http_ok
if  answer    httpurlconnection http_client_timeout
log trace
else
log warn     remoteurl       answer
else
// checksession(connection);
// create a string for the utf content
inputstream is   connection getinputstream
bytearrayoutputstream baos   new bytearrayoutputstream connection getcontentlength   > 0 ? connection getcontentlength     1024
int c   0
while   c   is read    >  0
baos write c
bytesequence sequence   baos tobytesequence
string data   new string sequence data  sequence offset  sequence length
command command    command gettextwireformat   unmarshaltext data
if  command    null
log warn     remoteurl
else
doconsume command
catch  throwable e
if   isstopped
log error     remoteurl       e  e
else
log trace     e  e
finally
safeclose receiveconnection
receiveconnection   null
// implementation methods
// -------------------------------------------------------------------------
protected httpurlconnection createsendconnection   throws ioexception
httpurlconnection conn    httpurlconnection getremoteurl   openconnection
conn setdooutput true
conn setrequestmethod
configureconnection conn
conn connect
return conn
protected httpurlconnection createreceiveconnection   throws ioexception
httpurlconnection conn    httpurlconnection getremoteurl   openconnection
conn setdooutput false
conn setdoinput true
conn setrequestmethod
configureconnection conn
conn connect
return conn
// protected void checksession(httpurlconnection connection)
// {
// string set_cookie=connection.getheaderfield("set-cookie");
// if (set_cookie!=null && set_cookie.startswith("jsessionid="))
// {
// string[] bits=set_cookie.split("[=;]");
// sessionid=bits[1];
// }
// }
protected void configureconnection httpurlconnection connection
// if (sessionid !=null) {
// connection.addrequestproperty("cookie", "jsessionid="+sessionid);
// }
// else
if  clientid    null
connection setrequestproperty    clientid
protected url getremoteurl
return url
protected httpurlconnection getsendconnection   throws ioexception
setsendconnection createsendconnection
return sendconnection
protected httpurlconnection getreceiveconnection   throws ioexception
setreceiveconnection createreceiveconnection
return receiveconnection
protected void setsendconnection httpurlconnection conn
safeclose sendconnection
sendconnection   conn
protected void setreceiveconnection httpurlconnection conn
safeclose receiveconnection
receiveconnection   conn
protected void dostart   throws exception
// don't start the background thread until the clientid has been
// established.
if  clientid    null
super dostart
protected void dostop servicestopper stopper  throws exception
stopper run new callback
public void execute   throws exception
safeclose sendconnection
sendconnection   null
stopper run new callback
public void execute
safeclose receiveconnection
/**
* @param connection todo
*/
private void safeclose httpurlconnection connection
if  connection    null
connection disconnect