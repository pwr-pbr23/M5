/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java io datainput
import java io datainputstream
import java io dataoutput
import java io dataoutputstream
import java io ioexception
import java io utfdataformatexception
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util properties
/**
* the fixed version of the utf8 encoding function. some older jvm's utf8
* encoding function breaks when handling large strings.
*
* @version $revision$
*/
public final class marshallingsupport
public static final byte null   0
public static final byte boolean_type   1
public static final byte byte_type   2
public static final byte char_type   3
public static final byte short_type   4
public static final byte integer_type   5
public static final byte long_type   6
public static final byte double_type   7
public static final byte float_type   8
public static final byte string_type   9
public static final byte byte_array_type   10
public static final byte map_type   11
public static final byte list_type   12
public static final byte big_string_type   13
private marshallingsupport
public static void marshalprimitivemap map map  dataoutputstream out  throws ioexception
if  map    null
out writeint  1
else
out writeint map size
for  iterator iter   map keyset   iterator    iter hasnext
string name    string iter next
out writeutf name
object value   map get name
marshalprimitive out  value
public static map<string  object> unmarshalprimitivemap datainputstream in  throws ioexception
return unmarshalprimitivemap in  integer max_value
/**
* @param in
* @return
* @throws ioexception
* @throws ioexception
*/
public static map<string  object> unmarshalprimitivemap datainputstream in  int maxpropertysize  throws ioexception
int size   in readint
if  size > maxpropertysize
throw new ioexception     size
if  size < 0
return null
else
map<string  object> rc   new hashmap<string  object> size
for  int i   0  i < size  i
string name   in readutf
rc put name  unmarshalprimitive in
return rc
public static void marshalprimitivelist list list  dataoutputstream out  throws ioexception
out writeint list size
for  iterator iter   list iterator    iter hasnext
object element    object iter next
marshalprimitive out  element
public static list<object> unmarshalprimitivelist datainputstream in  throws ioexception
int size   in readint
list<object> answer   new arraylist<object> size
while  size   > 0
answer add unmarshalprimitive in
return answer
public static void marshalprimitive dataoutputstream out  object value  throws ioexception
if  value    null
marshalnull out
else if  value getclass      boolean class
marshalboolean out    boolean value  booleanvalue
else if  value getclass      byte class
marshalbyte out    byte value  bytevalue
else if  value getclass      character class
marshalchar out    character value  charvalue
else if  value getclass      short class
marshalshort out    short value  shortvalue
else if  value getclass      integer class
marshalint out    integer value  intvalue
else if  value getclass      long class
marshallong out    long value  longvalue
else if  value getclass      float class
marshalfloat out    float value  floatvalue
else if  value getclass      double class
marshaldouble out    double value  doublevalue
else if  value getclass      byte class
marshalbytearray out   byte value
else if  value getclass      string class
marshalstring out   string value
else if  value instanceof map
out writebyte map_type
marshalprimitivemap  map value  out
else if  value instanceof list
out writebyte list_type
marshalprimitivelist  list value  out
else
throw new ioexception     value
public static object unmarshalprimitive datainputstream in  throws ioexception
object value   null
byte type   in readbyte
switch  type
case byte_type
value   byte valueof in readbyte
break
case boolean_type
value   in readboolean   ? boolean true   boolean false
break
case char_type
value   character valueof in readchar
break
case short_type
value   short valueof in readshort
break
case integer_type
value   integer valueof in readint
break
case long_type
value   long valueof in readlong
break
case float_type
value   new float in readfloat
break
case double_type
value   new double in readdouble
break
case byte_array_type
value   new byte
in readfully  byte value
break
case string_type
value   in readutf
break
case big_string_type
value   readutf8 in
break
case map_type
value   unmarshalprimitivemap in
break
case list_type
value   unmarshalprimitivelist in
break
case null
value   null
break
default
throw new ioexception     type
return value
public static void marshalnull dataoutputstream out  throws ioexception
out writebyte null
public static void marshalboolean dataoutputstream out  boolean value  throws ioexception
out writebyte boolean_type
out writeboolean value
public static void marshalbyte dataoutputstream out  byte value  throws ioexception
out writebyte byte_type
out writebyte value
public static void marshalchar dataoutputstream out  char value  throws ioexception
out writebyte char_type
out writechar value
public static void marshalshort dataoutputstream out  short value  throws ioexception
out writebyte short_type
out writeshort value
public static void marshalint dataoutputstream out  int value  throws ioexception
out writebyte integer_type
out writeint value
public static void marshallong dataoutputstream out  long value  throws ioexception
out writebyte long_type
out writelong value
public static void marshalfloat dataoutputstream out  float value  throws ioexception
out writebyte float_type
out writefloat value
public static void marshaldouble dataoutputstream out  double value  throws ioexception
out writebyte double_type
out writedouble value
public static void marshalbytearray dataoutputstream out  byte value  throws ioexception
marshalbytearray out  value  0  value length
public static void marshalbytearray dataoutputstream out  byte value  int offset  int length  throws ioexception
out writebyte byte_array_type
out writeint length
out write value  offset  length
public static void marshalstring dataoutputstream out  string s  throws ioexception
// if it's too big, out.writeutf may not able able to write it out.
if  s length   < short max_value   4
out writebyte string_type
out writeutf s
else
out writebyte big_string_type
writeutf8 out  s
public static void writeutf8 dataoutput dataout  string text  throws ioexception
if  text    null
int strlen   text length
int utflen   0
char charr   new char
int c   0
int count   0
text getchars 0  strlen  charr  0
for  int i   0  i < strlen  i
c   charr
if   c >  0x0001      c <  0x007f
utflen
else if  c > 0x07ff
utflen    3
else
utflen    2
// todo diff: sun code - removed
byte bytearr   new byte     todo diff  sun code
bytearr    byte   utflen >>> 24    0xff      todo diff
// sun code
bytearr    byte   utflen >>> 16    0xff      todo diff
// sun code
bytearr    byte   utflen >>> 8    0xff
bytearr    byte   utflen >>> 0    0xff
for  int i   0  i < strlen  i
c   charr
if   c >  0x0001      c <  0x007f
bytearr    byte c
else if  c > 0x07ff
bytearr    byte  0xe0     c >> 12    0x0f
bytearr    byte  0x80     c >> 6    0x3f
bytearr    byte  0x80     c >> 0    0x3f
else
bytearr    byte  0xc0     c >> 6    0x1f
bytearr    byte  0x80     c >> 0    0x3f
dataout write bytearr
else
dataout writeint  1
public static string readutf8 datainput datain  throws ioexception
int utflen   datain readint       todo diff  sun code
if  utflen >  1
stringbuffer str   new stringbuffer utflen
byte bytearr   new byte
int c
int char2
int char3
int count   0
datain readfully bytearr  0  utflen
while  count < utflen
c   bytearr   0xff
switch  c >> 4
case 0
case 1
case 2
case 3
case 4
case 5
case 6
case 7
/* 0xxxxxxx */
count
str append  char c
break
case 12
case 13
/* 110x xxxx 10xx xxxx */
count    2
if  count > utflen
throw new utfdataformatexception
char2   bytearr
if   char2   0xc0     0x80
throw new utfdataformatexception
str append  char    c   0x1f  << 6     char2   0x3f
break
case 14
/* 1110 xxxx 10xx xxxx 10xx xxxx */
count    3
if  count > utflen
throw new utfdataformatexception
char2   bytearr     todo diff  sun code
char3   bytearr     todo diff  sun code
if    char2   0xc0     0x80       char3   0xc0     0x80
throw new utfdataformatexception
str append  char    c   0x0f  << 12      char2   0x3f  << 6      char3   0x3f  << 0
break
default
/* 10xx xxxx, 1111 xxxx */
throw new utfdataformatexception
// the number of chars produced may be less than utflen
return new string str
else
return null
public static string propertiestostring properties props  throws ioexception
string result
if  props    null
databytearrayoutputstream dataout   new databytearrayoutputstream
props store dataout
result   new string dataout getdata    0  dataout size
dataout close
return result
public static properties stringtoproperties string str  throws ioexception
properties result   new properties
if  str    null    str length   > 0
databytearrayinputstream datain   new databytearrayinputstream str getbytes
result load datain
datain close
return result