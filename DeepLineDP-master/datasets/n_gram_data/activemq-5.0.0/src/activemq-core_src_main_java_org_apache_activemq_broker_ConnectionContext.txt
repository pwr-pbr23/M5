/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io ioexception
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicboolean
import org apache activemq broker region messagereference
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command transactionid
import org apache activemq command wireformatinfo
import org apache activemq filter messageevaluationcontext
import org apache activemq security messageauthorizationpolicy
import org apache activemq security securitycontext
import org apache activemq transaction transaction
/**
* used to hold context information needed to process requests sent to a broker.
*
* @version $revision: 1.5 $
*/
public class connectioncontext
private connection connection
private connector connector
private broker broker
private boolean inrecoverymode
private transaction transaction
private concurrenthashmap<transactionid  transaction> transactions
private securitycontext securitycontext
private connectionid connectionid
private string clientid
private string username
private boolean haaware
private wireformatinfo wireformatinfo
private object longtermstorecontext
private boolean producerflowcontrol   true
private messageauthorizationpolicy messageauthorizationpolicy
private boolean networkconnection
private final atomicboolean stopping   new atomicboolean
private final messageevaluationcontext messageevaluationcontext   new messageevaluationcontext
private boolean dontsendreponse
private boolean clientmaster   true
public connectioncontext
public connectioncontext connectioninfo info
setclientid info getclientid
setusername info getusername
setconnectionid info getconnectionid
public securitycontext getsecuritycontext
return securitycontext
public void setsecuritycontext securitycontext subject
this securitycontext   subject
if  subject    null
setusername subject getusername
else
setusername null
/**
* @return the broker being used.
*/
public broker getbroker
return broker
/**
* @param broker being used
*/
public void setbroker broker broker
this broker   broker
/**
* @return the connection being used
*/
public connection getconnection
return connection
/**
* @param connection being used
*/
public void setconnection connection connection
this connection   connection
/**
* @return the transaction being used.
*/
public transaction gettransaction
return transaction
/**
* @param transaction being used.
*/
public void settransaction transaction transaction
this transaction   transaction
/**
* @return the connector being used.
*/
public connector getconnector
return connector
/**
* @param connector being used.
*/
public void setconnector connector connector
this connector   connector
public messageauthorizationpolicy getmessageauthorizationpolicy
return messageauthorizationpolicy
/**
* sets the policy used to decide if the current connection is authorized to
* consume a given message
*/
public void setmessageauthorizationpolicy messageauthorizationpolicy messageauthorizationpolicy
this messageauthorizationpolicy   messageauthorizationpolicy
/**
* @return
*/
public boolean isinrecoverymode
return inrecoverymode
public void setinrecoverymode boolean inrecoverymode
this inrecoverymode   inrecoverymode
public concurrenthashmap<transactionid  transaction> gettransactions
return transactions
public void settransactions concurrenthashmap<transactionid  transaction> transactions
this transactions   transactions
public boolean isintransaction
return transaction    null
public string getclientid
return clientid
public void setclientid string clientid
this clientid   clientid
public boolean ishaaware
return haaware
public void sethaaware boolean haaware
this haaware   haaware
public wireformatinfo getwireformatinfo
return wireformatinfo
public void setwireformatinfo wireformatinfo wireformatinfo
this wireformatinfo   wireformatinfo
public connectionid getconnectionid
return connectionid
public void setconnectionid connectionid connectionid
this connectionid   connectionid
public string getusername
return username
protected void setusername string username
this username   username
public messageevaluationcontext getmessageevaluationcontext
return messageevaluationcontext
public object getlongtermstorecontext
return longtermstorecontext
public void setlongtermstorecontext object longtermstorecontext
this longtermstorecontext   longtermstorecontext
public boolean isproducerflowcontrol
return producerflowcontrol
public void setproducerflowcontrol boolean disableproducerflowcontrol
this producerflowcontrol   disableproducerflowcontrol
public boolean isallowedtoconsume messagereference n  throws ioexception
if  messageauthorizationpolicy    null
return messageauthorizationpolicy isallowedtoconsume this  n getmessage
return true
public synchronized boolean isnetworkconnection
return networkconnection
public synchronized void setnetworkconnection boolean networkconnection
this networkconnection   networkconnection
public atomicboolean getstopping
return stopping
public void setdontsendreponse boolean b
this dontsendreponse   b
public boolean isdontsendreponse
return dontsendreponse
/**
* @return the slave
*/
public boolean isslave
return  this broker    null    this broker getbrokerservice   isslave        this clientmaster
/**
* @return the clientmaster
*/
public boolean isclientmaster
return this clientmaster
/**
* @param clientmaster the clientmaster to set
*/
public void setclientmaster boolean clientmaster
this clientmaster   clientmaster