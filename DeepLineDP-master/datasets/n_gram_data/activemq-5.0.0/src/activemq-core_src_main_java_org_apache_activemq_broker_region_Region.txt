/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java util map
import java util set
import org apache activemq service
import org apache activemq broker connectioncontext
import org apache activemq broker consumerbrokerexchange
import org apache activemq broker producerbrokerexchange
import org apache activemq command activemqdestination
import org apache activemq command consumerinfo
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatchnotification
import org apache activemq command messagepull
import org apache activemq command removesubscriptioninfo
import org apache activemq command response
/**
* a region is used to implement the different qos options available to
* a broker.  a broker is composed of multiple message processing regions that
* provide different qos options.
*
* @version $revision$
*/
public interface region extends service
/**
* used to create a destination.  usually, this method is invoked as a side-effect of sending
* a message to a destination that does not exist yet.
*
* @param context
* @param destination the destination to create.
* @return todo
* @throws exception todo
*/
destination adddestination connectioncontext context  activemqdestination destination  throws exception
/**
* used to destroy a destination.
* this should try to quiesce use of the destination up to the timeout allotted time before removing the destination.
* this will remove all persistent messages associated with the destination.
*
* @param context the environment the operation is being executed under.
* @param destination what is being removed from the broker.
* @param timeout the max amount of time to wait for the destination to quiesce
* @throws exception todo
*/
void removedestination connectioncontext context  activemqdestination destination  long timeout  throws exception
/**
* returns a copy of the current destinations available in the region
*
* @return a copy of the regions currently active at the time of the call with the key the destination and the value the destination.
*/
map<activemqdestination  destination> getdestinationmap
/**
* adds a consumer.
* @param context the environment the operation is being executed under.
* @return todo
* @throws exception todo
*/
subscription addconsumer connectioncontext context  consumerinfo info  throws exception
/**
* removes a consumer.
* @param context the environment the operation is being executed under.
* @throws exception todo
*/
void removeconsumer connectioncontext context  consumerinfo info  throws exception
/**
* deletes a durable subscription.
* @param context the environment the operation is being executed under.
* @param info todo
* @throws exception todo
*/
void removesubscription connectioncontext context  removesubscriptioninfo info  throws exception
/**
* send a message to the broker to using the specified destination.  the destination specified
* in the message does not need to match the destination the message is sent to.  this is
* handy in case the message is being sent to a dead letter destination.
* @param producerexchange the environment the operation is being executed under.
* @param message
* @throws exception todo
*/
void send producerbrokerexchange producerexchange  message message  throws exception
/**
* used to acknowledge the receipt of a message by a client.
* @param consumerexchange the environment the operation is being executed under.
* @throws exception todo
*/
void acknowledge consumerbrokerexchange consumerexchange  messageack ack  throws exception
/**
* allows a consumer to pull a message from a queue
*/
response messagepull connectioncontext context  messagepull pull  throws exception
/**
* process a notification of a dispatch - used by a slave broker
* @param messagedispatchnotification
* @throws exception todo
*/
void processdispatchnotification messagedispatchnotification messagedispatchnotification  throws exception
void gc
/**
* provide an exact or wildcard lookup of destinations in the region
*
* @return a set of matching destination objects.
*/
set getdestinations activemqdestination destination