/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store
import java io ioexception
import org apache activemq service
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq usage memoryusage
import org apache activemq usage systemusage
/**
* represents a message store which is used by the persistent implementations
*
* @version $revision: 1.5 $
*/
public interface messagestore extends service
/**
* adds a message to the message store
*
* @param context context
* @param message
* @throws ioexception
*/
void addmessage connectioncontext context  message message  throws ioexception
/**
* looks up a message using either the string messageid or the
* messagenumber. implementations are encouraged to fill in the missing key
* if its easy to do so.
*
* @param identity which contains either the messageid or the messagenumber
* @return the message or null if it does not exist
* @throws ioexception
*/
message getmessage messageid identity  throws ioexception
/**
* removes a message from the message store.
*
* @param context
* @param ack the ack request that cause the message to be removed. it
*                conatins the identity which contains the messageid of the
*                message that needs to be removed.
* @throws ioexception
*/
void removemessage connectioncontext context  messageack ack  throws ioexception
/**
* removes all the messages from the message store.
*
* @param context
* @throws ioexception
*/
void removeallmessages connectioncontext context  throws ioexception
/**
* recover any messages to be delivered.
*
* @param container
* @throws exception
*/
void recover messagerecoverylistener container  throws exception
/**
* the destination that the message store is holding messages for.
*
* @return the destination
*/
activemqdestination getdestination
/**
* @param memoeyusage the systemusage that is controlling the
*                destination's memory usage.
*/
void setmemoryusage memoryusage memoeyusage
/**
* @return the number of messages ready to deliver
* @throws ioexception
*
*/
int getmessagecount   throws ioexception
/**
* a hint to the store to reset any batching state for the destination
*
*/
void resetbatching
void recovernextmessages int maxreturned  messagerecoverylistener listener  throws exception