/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl index
import java io ioexception
import org apache activemq kaha storeentry
/**
* a linked list used by indexitems
*
* @version $revision$
*/
public class diskindexlinkedlist implements indexlinkedlist
protected indexmanager indexmanager
protected transient indexitem root
protected transient indexitem last
protected transient int size
/**
* constructs an empty list.
*/
public diskindexlinkedlist indexmanager im  indexitem header
this indexmanager   im
this root   header
public synchronized indexitem getroot
return root
public void setroot indexitem e
this root   e
/**
* returns the first element in this list.
*
* @return the first element in this list.
*/
public synchronized indexitem getfirst
if  size    0
return null
return getnextentry root
/**
* returns the last element in this list.
*
* @return the last element in this list.
*/
public synchronized indexitem getlast
if  size    0
return null
if  last    null
last next   null
last setnextitem indexitem position_not_set
return last
/**
* removes and returns the first element from this list.
*
* @return the first element from this list.
*/
public synchronized storeentry removefirst
if  size    0
return null
indexitem result   getnextentry root
remove result
return result
/**
* removes and returns the last element from this list.
*
* @return the last element from this list.
*/
public synchronized object removelast
if  size    0
return null
storeentry result   last
remove last
return result
/**
* inserts the given element at the beginning of this list.
*
* @param o the element to be inserted at the beginning of this list.
*/
public synchronized void addfirst indexitem item
if  size    0
last   item
size
/**
* appends the given element to the end of this list. (identical in function
* to the <tt>add</tt> method; included only for consistency.)
*
* @param o the element to be inserted at the end of this list.
*/
public synchronized void addlast indexitem item
size
last   item
/**
* returns the number of elements in this list.
*
* @return the number of elements in this list.
*/
public synchronized int size
return size
/**
* is the list empty?
*
* @return true if there are no elements in the list
*/
public synchronized boolean isempty
return size    0
/**
* appends the specified element to the end of this list.
*
* @param o element to be appended to this list.
* @return <tt>true</tt> (as per the general contract of
*         <tt>collection.add</tt>).
*/
public synchronized boolean add indexitem item
addlast item
return true
/**
* removes all of the elements from this list.
*/
public synchronized void clear
last   null
size   0
// positional access operations
/**
* returns the element at the specified position in this list.
*
* @param index index of element to return.
* @return the element at the specified position in this list.
* @throws indexoutofboundsexception if the specified index is is out of
*                 range (<tt>index &lt; 0 || index &gt;= size()</tt>).
*/
public synchronized indexitem get int index
return entry index
/**
* inserts the specified element at the specified position in this list.
* shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).
*
* @param index index at which the specified element is to be inserted.
* @param element element to be inserted.
* @throws indexoutofboundsexception if the specified index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).
*/
public synchronized void add int index  indexitem element
if  index    size
last   element
size
/**
* removes the element at the specified position in this list. shifts any
* subsequent elements to the left (subtracts one from their indices).
* returns the element that was removed from the list.
*
* @param index the index of the element to removed.
* @return the element previously at the specified position.
* @throws indexoutofboundsexception if the specified index is out of range (<tt>index &lt; 0 || index &gt;= size()</tt>).
*/
public synchronized object remove int index
indexitem e   entry index
remove e
return e
/**
* return the indexed entry.
*/
private indexitem entry int index
if  index < 0    index >  size
throw new indexoutofboundsexception     index       size
indexitem e   root
for  int i   0  i <  index  i
e   getnextentry e
if  e    null    last    null    last equals e
last   e
return e
// search operations
/**
* returns the index in this list of the first occurrence of the specified
* element, or -1 if the list does not contain this element. more formally,
* returns the lowest index i such that
* <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if there
* is no such index.
*
* @param o element to search for.
* @return the index in this list of the first occurrence of the specified
*         element, or -1 if the list does not contain this element.
*/
public synchronized int indexof storeentry o
int index   0
if  size > 0
for  indexitem e   getnextentry root   e    null  e   getnextentry e
if  o equals e
return index
index
return  1
/**
* retrieve the next entry after this entry
*
* @param entry
* @return next entry
*/
public synchronized indexitem getnextentry indexitem current
indexitem result   null
if  current    null
current    indexitem  refreshentry current
if  current getnextitem   >  0
try
result   indexmanager getindex current getnextitem
catch  ioexception e
throw new runtimeexception
indexmanager       current  e
// essential last get's updated consistently
if  result    null    last    null    last equals result
result   last
return result
/**
* retrive the prev entry after this entry
*
* @param entry
* @return prev entry
*/
public synchronized indexitem getpreventry indexitem current
indexitem result   null
if  current    null
if  current getpreviousitem   >  0
current    indexitem  refreshentry current
try
result   indexmanager getindex current getpreviousitem
catch  ioexception e
throw new runtimeexception
current  e
// essential root get's updated consistently
if  result    null    root    null    root equals result
return null
return result
public synchronized storeentry getentry storeentry current
storeentry result   null
if  current    null    current getoffset   >  0
try
result   indexmanager getindex current getoffset
catch  ioexception e
throw new runtimeexception    e
// essential root get's updated consistently
if  result    null    root    null    root equals result
return root
return result
/**
* update the indexes of a storeentry
*
* @param current
*/
public synchronized storeentry refreshentry storeentry current
storeentry result   null
if  current    null    current getoffset   >  0
try
result   indexmanager refreshindex  indexitem current
catch  ioexception e
throw new runtimeexception    e
// essential root get's updated consistently
if  result    null    root    null    root equals result
return root
return result
public synchronized void remove indexitem e
if  e  null    e    root    e equals root
return
if  e    last    e equals last
if  size > 1
last    indexitem refreshentry last
last   getpreventry last
else
last   null
size