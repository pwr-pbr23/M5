/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq jaas
import java io ioexception
import java security principal
import java security cert x509certificate
import java util hashset
import java util iterator
import java util map
import java util set
import javax security auth subject
import javax security auth callback callback
import javax security auth callback callbackhandler
import javax security auth callback unsupportedcallbackexception
import javax security auth login failedloginexception
import javax security auth login loginexception
import javax security auth spi loginmodule
import org apache commons logging log
import org apache commons logging logfactory
/**
* a loginmodule that allows for authentication based on ssl certificates.
* allows for subclasses to define methods used to verify user certificates and
* find user groups. uses certificatecallbacks to retrieve certificates.
*
* @author sepandm@gmail.com (sepand)
*/
public abstract class certificateloginmodule implements loginmodule
private static final log log   logfactory getlog certificateloginmodule class
private callbackhandler callbackhandler
private subject subject
private x509certificate certificates
private string username
private set groups
private set<principal> principals   new hashset<principal>
private boolean debug
/**
* overriding to allow for proper initialization. standard jaas.
*/
public void initialize subject subject  callbackhandler callbackhandler  map sharedstate  map options
this subject   subject
this callbackhandler   callbackhandler
debug     equalsignorecase  string options get
if  debug
log debug
/**
* overriding to allow for certificate-based login. standard jaas.
*/
public boolean login   throws loginexception
callback callbacks   new callback
callbacks   new certificatecallback
try
callbackhandler handle callbacks
catch  ioexception ioe
throw new loginexception ioe getmessage
catch  unsupportedcallbackexception uce
throw new loginexception uce getmessage
certificates     certificatecallback callbacks  getcertificates
username   getusernameforcertificates certificates
if  username    null
throw new failedloginexception     getdistinguishedname certificates
groups   getusergroups username
if  debug
log debug     username
return true
/**
* overriding to complete login process. standard jaas.
*/
public boolean commit   throws loginexception
principals add new userprincipal username
string currentgroup   null
for  iterator iter   groups iterator    iter hasnext
currentgroup    string iter next
principals add new groupprincipal currentgroup
subject getprincipals   addall principals
clear
if  debug
log debug
return true
/**
* standard jaas override.
*/
public boolean abort   throws loginexception
clear
if  debug
log debug
return true
/**
* standard jaas override.
*/
public boolean logout
subject getprincipals   removeall principals
principals clear
if  debug
log debug
return true
/**
* helper method.
*/
private void clear
groups clear
certificates   null
/**
* should return a unique name corresponding to the certificates given. the
* name returned will be used to look up access levels as well as group
* associations.
*
* @param dn the distinguished name.
* @return the unique name if the certificate is recognized, null otherwise.
*/
protected abstract string getusernameforcertificates final x509certificate certs  throws loginexception
/**
* should return a set of the groups this user belongs to. the groups
* returned will be added to the user's credentials.
*
* @param username the username of the client. this is the same name that
*                getusernamefordn returned for the user's dn.
* @return a set of the names of the groups this user belongs to.
*/
protected abstract set getusergroups final string username  throws loginexception
protected string getdistinguishedname final x509certificate certs
if  certs    null    certs length > 0    certs    null
return certs getsubjectdn   getname
else
return null