/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command producerinfo
/**
* this broker filter handles composite destinations. if a broker operation is
* invoked using a composite destination, this filter repeats the operation
* using each destination of the composite. hrc: i think this filter is
* dangerous to use to with the consumer operations. multiple subscription
* objects will be associated with a single jms consumer each having a different
* idea of what the current pre-fetch dispatch size is. if this is used, then
* the client has to expect many more messages to be dispatched than the
* pre-fetch setting allows.
*
* @version $revision: 1.8 $
*/
public class compositedestinationbroker extends brokerfilter
public compositedestinationbroker broker next
super next
/**
* a producer may register to send to multiple destinations via a composite
* destination.
*/
public void addproducer connectioncontext context  producerinfo info  throws exception
// the destination may be null.
activemqdestination destination   info getdestination
if  destination    null    destination iscomposite
activemqdestination destinations   destination getcompositedestinations
for  int i   0  i < destinations length  i
producerinfo copy   info copy
copy setdestination destinations
next addproducer context  copy
else
next addproducer context  info
/**
* a producer may de-register from sending to multiple destinations via a
* composite destination.
*/
public void removeproducer connectioncontext context  producerinfo info  throws exception
// the destination may be null.
activemqdestination destination   info getdestination
if  destination    null    destination iscomposite
activemqdestination destinations   destination getcompositedestinations
for  int i   0  i < destinations length  i
producerinfo copy   info copy
copy setdestination destinations
next removeproducer context  copy
else
next removeproducer context  info
/**
*
*/
public void send producerbrokerexchange producerexchange  message message  throws exception
activemqdestination destination   message getdestination
if  destination iscomposite
activemqdestination destinations   destination getcompositedestinations
for  int i   0  i < destinations length  i
if  i    0
message   message copy
message setoriginaldestination destination
message setdestination destinations
next send producerexchange  message
else
next send producerexchange  message