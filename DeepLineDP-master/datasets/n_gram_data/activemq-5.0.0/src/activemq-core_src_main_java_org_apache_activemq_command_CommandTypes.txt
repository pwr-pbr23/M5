/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
/**
* holds the command id constants used by the command objects.
*
* @version $revision: 1.21 $
*/
public interface commandtypes
// what is the latest version of the openwire protocol
byte protocol_version   3
// a marshaling layer can use this type to specify a null object.
byte null   0
// /////////////////////////////////////////////////
//
// info objects sent back and forth client/server when
// setting up a client connection.
//
// /////////////////////////////////////////////////
byte wireformat_info   1
byte broker_info   2
byte connection_info   3
byte session_info   4
byte consumer_info   5
byte producer_info   6
byte transaction_info   7
byte destination_info   8
byte remove_subscription_info   9
byte keep_alive_info   10
byte shutdown_info   11
byte remove_info   12
byte control_command   14
byte flush_command   15
byte connection_error   16
byte consumer_control   17
byte connection_control   18
// /////////////////////////////////////////////////
//
// messages that go back and forth between the client
// and the server.
//
// /////////////////////////////////////////////////
byte producer_ack   19
byte message_pull   20
byte message_dispatch   21
byte message_ack   22
byte activemq_message   23
byte activemq_bytes_message   24
byte activemq_map_message   25
byte activemq_object_message   26
byte activemq_stream_message   27
byte activemq_text_message   28
byte activemq_blob_message   29
// /////////////////////////////////////////////////
//
// command response messages
//
// /////////////////////////////////////////////////
byte response   30
byte exception_response   31
byte data_response   32
byte data_array_response   33
byte integer_response   34
// /////////////////////////////////////////////////
//
// used by discovery
//
// /////////////////////////////////////////////////
byte discovery_event   40
// /////////////////////////////////////////////////
//
// command object used by the journal
//
// /////////////////////////////////////////////////
byte journal_ack   50
byte journal_remove   52
byte journal_trace   53
byte journal_transaction   54
byte durable_subscription_info   55
// /////////////////////////////////////////////////
//
// reliability and fragmentation
//
// /////////////////////////////////////////////////
byte partial_command   60
byte partial_last_command   61
byte replay   65
// /////////////////////////////////////////////////
//
// types used represent basic java types.
//
// /////////////////////////////////////////////////
byte byte_type   70
byte char_type   71
byte short_type   72
byte integer_type   73
byte long_type   74
byte double_type   75
byte float_type   76
byte string_type   77
byte boolean_type   78
byte byte_array_type   79
// /////////////////////////////////////////////////
//
// broker to broker command objects
//
// /////////////////////////////////////////////////
byte message_dispatch_notification   90
byte network_bridge_filter   91
// /////////////////////////////////////////////////
//
// data structures contained in the command objects.
//
// /////////////////////////////////////////////////
byte activemq_queue   100
byte activemq_topic   101
byte activemq_temp_queue   102
byte activemq_temp_topic   103
byte message_id   110
byte activemq_local_transaction_id   111
byte activemq_xa_transaction_id   112
byte connection_id   120
byte session_id   121
byte consumer_id   122
byte producer_id   123
byte broker_id   124