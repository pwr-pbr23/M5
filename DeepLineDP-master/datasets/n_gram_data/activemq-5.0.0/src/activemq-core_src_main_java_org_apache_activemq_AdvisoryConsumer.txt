/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import org apache activemq advisory advisorysupport
import org apache activemq command activemqdestination
import org apache activemq command activemqtempdestination
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command datastructure
import org apache activemq command destinationinfo
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache commons logging log
import org apache commons logging logfactory
public class advisoryconsumer implements activemqdispatcher
private static final transient log log   logfactory getlog advisoryconsumer class
int deliveredcounter
private final activemqconnection connection
private consumerinfo info
private boolean closed
public advisoryconsumer activemqconnection connection  consumerid consumerid  throws jmsexception
this connection   connection
info   new consumerinfo consumerid
info setdestination advisorysupport temp_destination_composite_advisory_topic
info setprefetchsize 1000
info setnolocal true
this connection adddispatcher info getconsumerid    this
this connection syncsendpacket this info
public synchronized void dispose
if   closed
try
this connection asyncsendpacket info createremovecommand
catch  jmsexception e
log info     e  e
this connection removedispatcher info getconsumerid
closed   true
public void dispatch messagedispatch md
// auto ack messages when we reach 75% of the prefetch
deliveredcounter
if  deliveredcounter >  0 75   info getprefetchsize
try
messageack ack   new messageack md  messageack standard_ack_type  deliveredcounter
connection asyncsendpacket ack
deliveredcounter   0
catch  jmsexception e
connection onasyncexception e
datastructure o   md getmessage   getdatastructure
if  o    null    o getclass      destinationinfo class
processdestinationinfo  destinationinfo o
else
connection onasyncexception new jmsexception
md
private void processdestinationinfo destinationinfo dinfo
activemqdestination dest   dinfo getdestination
if   dest istemporary
return
activemqtempdestination tempdest    activemqtempdestination dest
if  dinfo getoperationtype      destinationinfo add_operation_type
connection activetempdestinations put tempdest  tempdest
else if  dinfo getoperationtype      destinationinfo remove_operation_type
connection activetempdestinations remove tempdest