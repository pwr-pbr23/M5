/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region virtual
import javax jms invalidselectorexception
import javax jms jmsexception
import org apache activemq command activemqdestination
import org apache activemq filter booleanexpression
import org apache activemq filter messageevaluationcontext
import org apache activemq selector selectorparser
/**
* represents a destination which is filtered using some predicate such as a selector
* so that messages are only dispatched to the destination if they match the filter.
*
* @org.apache.xbean.xbean
*
* @version $revision$
*/
public class filtereddestination
private activemqdestination destination
private string selector
private booleanexpression filter
public boolean matches messageevaluationcontext context  throws jmsexception
booleanexpression booleanexpression   getfilter
if  booleanexpression    null
return false
return booleanexpression matches context
public activemqdestination getdestination
return destination
/**
* the destination to send messages to if they match the filter
*/
public void setdestination activemqdestination destination
this destination   destination
public string getselector
return selector
/**
* sets the jms selector used to filter messages before forwarding them to this destination
*/
public void setselector string selector  throws invalidselectorexception
this selector   selector
setfilter new selectorparser   parse selector
public booleanexpression getfilter
return filter
public void setfilter booleanexpression filter
this filter   filter
/**
* sets the destination property to the given queue name
*/
public void setqueue string queue
setdestination activemqdestination createdestination queue  activemqdestination queue_type
/**
* sets the destination property to the given topic name
*/
public void settopic string topic
setdestination activemqdestination createdestination topic  activemqdestination topic_type