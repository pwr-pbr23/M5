/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq openwire tool
import java io file
import java io printwriter
import java util arraylist
import java util collections
import java util comparator
import java util hashmap
import java util iterator
import java util linkedhashmap
import java util list
import org codehaus jam jannotation
import org codehaus jam jannotationvalue
import org codehaus jam jclass
import org codehaus jam jproperty
/**
* @version $revision: 383749 $
*/
public class cheadersgenerator extends singlesourcegenerator
protected string targetdir
public object run
filepostfix
if  destfile    null
destfile   new file targetdir       getopenwireversion
return super run
public string gettargetdir
return targetdir
public void settargetdir string targetdir
this targetdir   targetdir
protected void generatelicence printwriter out
out println
out.println(" * licensed to the apache software foundation (asf) under one or more");
out.println(" * contributor license agreements.  see the notice file distributed with");
out.println(" * this work for additional information regarding copyright ownership.");
out.println(" * the asf licenses this file to you under the apache license, version 2.0");
out.println(" * (the \"license\"); you may not use this file except in compliance with");
out.println(" * the license.  you may obtain a copy of the license at");
out.println(" *");
out.println(" *      http://www.apache.org/licenses/license-2.0");
out.println(" *");
out.println(" * unless required by applicable law or agreed to in writing, software");
out.println(" * distributed under the license is distributed on an \"as is\" basis,");
out.println(" * without warranties or conditions of any kind, either express or implied.");
out.println(" * see the license for the specific language governing permissions and");
out.println(" * limitations under the license.");
out println
string changecase string value
stringbuffer b   new stringbuffer
char cs   value tochararray
for  int i   0  i < cs length  i
char c   cs
if  character isuppercase  char c
b append
b append character tolowercase  char c
else
b append c
return b tostring
string topropertycase string value
return value substring 0  1  tolowercase     value substring 1
/**
* sort the class list so that base classes come up first.
*/
protected list<jclass> sort list source
linkedhashmap<jclass  jclass> rc   new linkedhashmap<jclass  jclass>
arraylist classes   new arraylist source
collections sort classes  new comparator
public int compare object o1  object o2
jclass c1    jclass o1
jclass c2    jclass o2
return c1 getsimplename   compareto c2 getsimplename
// lets make a map of all the class names
hashmap<jclass  jclass> classnames   new hashmap<jclass  jclass>
for  iterator iter   classes iterator    iter hasnext
jclass c    jclass iter next
classnames put c  c
// add all classes that have no parent first
for  iterator iter   classes iterator    iter hasnext
jclass c    jclass iter next
if   classnames containskey c getsuperclass
rc put c  c
// now lets add the rest
for  iterator iter   classes iterator    iter hasnext
jclass c    jclass iter next
if   rc containskey c
rc put c  c
return new arraylist<jclass> rc keyset
void generatefields printwriter out  jclass jclass
if  jclass getsuperclass      null    jclass getsuperclass   getsimplename   equals
out println
out println
else
generatefields out  jclass getsuperclass
arraylist<jproperty> properties   new arraylist<jproperty>
jclass getdeclaredproperties
for  int i   0  i < jclass getdeclaredproperties   length  i
jproperty p   jclass getdeclaredproperties
if  isvalidproperty p
properties add p
for  iterator<jproperty> iter   properties iterator    iter hasnext
jproperty property   iter next
jannotation annotation   property getgetter   getannotation
//            jannotationvalue size = annotation.getvalue("size");
string name   topropertycase property getsimplename
//            boolean cached = iscachedproperty(property);
string type   property gettype   getqualifiedname
if  type equals
out println     type       name
else if  type equals
out println     type       name
else if  type equals
out println     type       name
else if  type equals
out println     type       name
else if  type equals
out println     type       name
else if  type equals
out println     type       name
else if  type equals
out println     name
else if  type equals
out println     name
else if  type equals
out println     name
else if  type equals
out println     name
else
if  property gettype   isarraytype
out println     name
else if  isthrowable property gettype
out println     name
else
out println     property gettype   getsimplename         name
protected void generatesetup printwriter out
generatelicence out
out println
out println
out.println(" *  ");
out.println(" * note!: this file is auto generated - do not modify!");
out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
out.println(" *        this file.");
out.println(" *  ");
out println
out println
out println     openwireversion
out println     openwireversion
out println
out println  ow h
out println
out println
out println  c
out println
out println
out println     openwireversion
out println
out println
out println
out println
for  iterator iterator   sortedclasses iterator    iterator hasnext
jclass jclass    jclass iterator next
string name   jclass getsimplename
string type        name  touppercase
if   isabstract jclass
out println     type       getopenwireopcode jclass
out println
out println
out println
protected void generatefile printwriter out  throws exception
string structname   jclass getsimplename
out println
out println     structname
// this recusivly generates the field definitions of the class and it's
// supper classes.
generatefields out  jclass
out println
out println     structname
out println     structname       structname
out println     structname
protected void generateteardown printwriter out
out println
out println
out println
out println
out println
out println     openwireversion