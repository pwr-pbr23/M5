/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl index tree
import java io file
import java io ioexception
import java io randomaccessfile
import java util concurrent atomic atomicboolean
import org apache activemq kaha marshaller
import org apache activemq kaha storeentry
import org apache activemq kaha impl index index
import org apache activemq kaha impl index indexmanager
import org apache activemq util databytearrayinputstream
import org apache activemq util databytearrayoutputstream
import org apache activemq util iohelper
import org apache activemq util lrucache
import org apache commons logging log
import org apache commons logging logfactory
/**
* btree implementation
*
* @version $revision: 1.1.1.1 $
*/
public class treeindex implements index
private static final string name_prefix
private static final int default_page_size
private static final int default_key_size
private static final log log   logfactory getlog treeindex class
private final string name
private file directory
private file file
private randomaccessfile indexfile
private indexmanager indexmanager
private int pagesize   default_page_size
private int keysize   default_key_size
private int keysperpage   pagesize   keysize
private treepage root
private lrucache<long  treepage> pagecache
private databytearrayinputstream datain
private databytearrayoutputstream dataout
private byte readbuffer
private marshaller keymarshaller
private long length
private treepage firstfree
private treepage lastfree
private atomicboolean loaded   new atomicboolean
private boolean enablepagecaching   true
private int pagecachesize   10
/**
* constructor
*
* @param directory
* @param name
* @param indexmanager
* @throws ioexception
*/
public treeindex file directory  string name  indexmanager indexmanager  throws ioexception
this directory   directory
this name   name
this indexmanager   indexmanager
pagecache   new lrucache<long  treepage> pagecachesize  pagecachesize  0 75f  true
openindexfile
/**
* set the marshaller for key objects
*
* @param marshaller
*/
public void setkeymarshaller marshaller marshaller
this keymarshaller   marshaller
/**
* @return the keysize
*/
public int getkeysize
return this keysize
/**
* @param keysize the keysize to set
*/
public void setkeysize int keysize
this keysize   keysize
if  loaded get
throw new runtimeexception
/**
* @return the pagesize
*/
public int getpagesize
return this pagesize
/**
* @param pagesize the pagesize to set
*/
public void setpagesize int pagesize
if  loaded get      pagesize    this pagesize
throw new runtimeexception
this pagesize   pagesize
public boolean istransient
return false
/**
* @return the enablepagecaching
*/
public boolean isenablepagecaching
return this enablepagecaching
/**
* @param enablepagecaching the enablepagecaching to set
*/
public void setenablepagecaching boolean enablepagecaching
this enablepagecaching   enablepagecaching
/**
* @return the pagecachesize
*/
public int getpagecachesize
return this pagecachesize
/**
* @param pagecachesize the pagecachesize to set
*/
public void setpagecachesize int pagecachesize
this pagecachesize   pagecachesize
pagecache setmaxcachesize pagecachesize
public void load
if  loaded compareandset false  true
keysperpage   pagesize   keysize
datain   new databytearrayinputstream
dataout   new databytearrayoutputstream pagesize
readbuffer   new byte
try
openindexfile
long offset   0
while   offset   pagesize  <  indexfile length
indexfile seek offset
indexfile readfully readbuffer  0  treepage page_header_size
datain restart readbuffer
treepage page   new treepage keysperpage
page settree this
page setid offset
page readheader datain
if   page isactive
if  lastfree    null
lastfree setnextfreepageid offset
indexfile seek lastfree getid
dataout reset
lastfree writeheader dataout
indexfile write dataout getdata    0  treepage page_header_size
lastfree   page
else
lastfree   page
firstfree   page
else if  root    null    page isroot
root   getfullpage offset
offset    pagesize
length   offset
if  root    null
root   createroot
catch  ioexception e
log error    e
throw new runtimeexception e
public void unload   throws ioexception
if  loaded compareandset true  false
if  indexfile    null
indexfile close
indexfile   null
pagecache clear
root   null
firstfree   null
lastfree   null
public void store object key  storeentry value  throws ioexception
treeentry entry   new treeentry
entry setkey  comparable key
entry setindexoffset value getoffset
root put entry
public storeentry get object key  throws ioexception
treeentry entry   new treeentry
entry setkey  comparable key
treeentry result   root find entry
return result    null ? indexmanager getindex result getindexoffset      null
public storeentry remove object key  throws ioexception
treeentry entry   new treeentry
entry setkey  comparable key
treeentry result   root remove entry
return result    null ? indexmanager getindex result getindexoffset      null
public boolean containskey object key  throws ioexception
treeentry entry   new treeentry
entry setkey  comparable key
return root find entry     null
public void clear   throws ioexception
unload
delete
openindexfile
load
public void delete   throws ioexception
unload
if  file exists
boolean result   file delete
length   0
/**
* @return the root
*/
treepage getroot
return this root
treepage lookuppage long pageid  throws ioexception
treepage result   null
if  pageid >  0
if  root    null    root getid      pageid
result   root
else
result   getfromcache pageid
if  result    null
result   getfullpage pageid
if  result    null
if  result isactive
addtocache result
else
throw new illegalstateexception     pageid       root
return result
treepage createroot   throws ioexception
treepage result   createpage  1
root   result
return result
treepage createpage long parentid  throws ioexception
treepage result   getnextfreepage
if  result    null
// allocate one
result   new treepage keysperpage
result setid length
result settree this
result setparentid parentid
writepage result
length    pagesize
indexfile seek length
indexfile write treeentry not_set
addtocache result
return result
void releasepage treepage page  throws ioexception
removefromcache page
page reset
page setactive false
if  lastfree    null
firstfree   page
lastfree   page
else
lastfree setnextfreepageid page getid
writepage lastfree
writepage page
private treepage getnextfreepage   throws ioexception
treepage result   null
if  firstfree    null
if  firstfree equals lastfree
result   firstfree
firstfree   null
lastfree   null
else
result   firstfree
firstfree   getpage firstfree getnextfreepageid
if  firstfree    null
lastfree   null
result setactive true
result reset
result saveheader
return result
void writefullpage treepage page  throws ioexception
dataout reset
page write keymarshaller  dataout
if  dataout size   > pagesize
throw new ioexception     pagesize       dataout size
indexfile seek page getid
indexfile write dataout getdata    0  dataout size
void writepage treepage page  throws ioexception
dataout reset
page writeheader dataout
indexfile seek page getid
indexfile write dataout getdata    0  treepage page_header_size
treepage getfullpage long id  throws ioexception
indexfile seek id
indexfile readfully readbuffer  0  pagesize
datain restart readbuffer
treepage page   new treepage keysperpage
page setid id
page settree this
page read keymarshaller  datain
return page
treepage getpage long id  throws ioexception
indexfile seek id
indexfile readfully readbuffer  0  treepage page_header_size
datain restart readbuffer
treepage page   new treepage keysperpage
page setid id
page settree this
page readheader datain
return page
private treepage getfromcache long pageid
treepage result   null
if  enablepagecaching
result   pagecache get pageid
return result
private void addtocache treepage page
if  enablepagecaching
pagecache put page getid    page
private void removefromcache treepage page
if  enablepagecaching
pagecache remove page getid
protected void openindexfile   throws ioexception
if  indexfile    null
file   new file directory  name_prefix   iohelper tofilesystemsafename name
file getparentfile   mkdirs
indexfile   new randomaccessfile file
static
default_page_size   integer parseint system getproperty
default_key_size   integer parseint system getproperty