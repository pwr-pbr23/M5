/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq tool properties
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java lang reflect method
import java util arraylist
import java util iterator
import java util list
import java util properties
import java util stringtokenizer
import org apache commons logging log
import org apache commons logging logfactory
public final class reflectionutil
private static final log log   logfactory getlog reflectionutil class
private reflectionutil
public static void configureclass object obj  string key  string val
try
string debuginfo
object target   obj
class targetclass   obj getclass
// debug: debugging info
debuginfo       targetclass getname
stringtokenizer tokenizer   new stringtokenizer key
string keysubstring   key
int tokencount   tokenizer counttokens
// for nested settings, get the object first. -1, do not count the
// last token
for  int j   0  j < tokencount   1  j
// find getter method first
string name   tokenizer nexttoken
// check if the target object will accept the settings
if  target instanceof reflectionconfigurable       reflectionconfigurable target  acceptconfig keysubstring  val
return
else
// this will reduce the key, so that it will be recognize by
// the next object. i.e.
// property name: factory.prefetchpolicy.queueprefetch
// calling order:
// this.getfactory().prefetchpolicy().queueprefetch();
// if factory does not accept the config, it should be given
// prefetchpolicy.queueprefetch as the key
// +1 to account for the '.'
keysubstring   keysubstring substring name length     1
string getmethod       name substring 0  1  touppercase     name substring 1
method method   targetclass getmethod getmethod  new class
target   method invoke target  null
targetclass   target getclass
debuginfo        getmethod
// property name
string property   tokenizer nexttoken
// check if the target object will accept the settings
if  target instanceof reflectionconfigurable       reflectionconfigurable target  acceptconfig property  val
return
// find setter method
method settermethod   findsettermethod targetclass  property
// get the first parameter type. this assumes that there is only one
// parameter.
if  settermethod    null
throw new illegalaccessexception     property
class paramtype   settermethod getparametertypes
// set primitive type
debuginfo        settermethod       paramtype getname         val
if  paramtype isprimitive
if  paramtype    boolean type
settermethod invoke target  new object
boolean valueof val
else if  paramtype    integer type
settermethod invoke target  new object
integer valueof val
else if  paramtype    long type
settermethod invoke target  new object
long valueof val
else if  paramtype    double type
settermethod invoke target  new object
double valueof val
else if  paramtype    float type
settermethod invoke target  new object
float valueof val
else if  paramtype    short type
settermethod invoke target  new object
short valueof val
else if  paramtype    byte type
settermethod invoke target  new object
byte valueof val
else if  paramtype    character type
settermethod invoke target  new object
new character val charat 0
else
// set string type
if  paramtype    string class
settermethod invoke target  new object
val
// for unknown object type, try to create an instance of the
// object using a string constructor
else
constructor c   paramtype getconstructor new class
string class
object paramobject   c newinstance new object
val
settermethod invoke target  new object
paramobject
log debug debuginfo
catch  exception e
log warn e
public static void configureclass object obj  properties props
for  iterator i   props keyset   iterator    i hasnext
try
string key    string i next
string val   props getproperty key
configureclass obj  key  val
catch  throwable t
// let's catch any exception as this could be cause by the
// foreign class
t printstacktrace
public static properties retrieveobjectproperties object obj
properties props   new properties
try
props putall retrieveclassproperties    obj getclass    obj
catch  exception e
log warn e
return props
protected static properties retrieveclassproperties string prefix  class targetclass  object targetobject
if  targetclass    null    targetobject    null
return new properties
else
properties props   new properties
method gettermethods   findallgettermethods targetclass
for  int i   0  i < gettermethods length  i
try
string propertyname   getpropertyname gettermethods getname
class rettype   gettermethods getreturntype
// if primitive or string type, return it
if  rettype isprimitive      rettype    string class
// check for an appropriate setter method to consider it
// as a property
if  findsettermethod targetclass  propertyname     null
object val   null
try
val   gettermethods invoke targetobject  null
catch  invocationtargetexception e
e printstacktrace
catch  illegalaccessexception e
e printstacktrace
props setproperty prefix   propertyname  val
else
try
object val   gettermethods invoke targetobject  null
if  val    null
props putall retrieveclassproperties propertyname      val getclass    val
catch  invocationtargetexception e
e printstacktrace
catch  illegalaccessexception e
e printstacktrace
catch  throwable t
// let's catch any exception, cause this could be cause by
// the foreign class
t printstacktrace
return props
private static method findsettermethod class targetclass  string propertyname
string methodname       propertyname substring 0  1  touppercase     propertyname substring 1
method methods   targetclass getmethods
for  int i   0  i < methods length  i
if  methods getname   equals methodname     issettermethod methods
return methods
return null
private static method findgettermethod class targetclass  string propertyname
string methodname1       propertyname substring 0  1  touppercase     propertyname substring 1
string methodname2       propertyname substring 0  1  touppercase     propertyname substring 1
method methods   targetclass getmethods
for  int i   0  i < methods length  i
if   methods getname   equals methodname1     methods getname   equals methodname2      isgettermethod methods
return methods
return null
private static method findallgettermethods class targetclass
list gettermethods   new arraylist
method methods   targetclass getmethods
for  int i   0  i < methods length  i
if  isgettermethod methods
gettermethods add methods
return  method gettermethods toarray new method
private static boolean isgettermethod method method
// check method signature first
// if 'get' method, must return a non-void value
// if 'is' method, must return a boolean value
// both must have no parameters
// method must not belong to the object class to prevent infinite loop
return   method getname   startswith       method getreturntype      boolean type      method getname   startswith       method getreturntype      void type
method getparametertypes   length    0     method getdeclaringclass      object class
private static boolean issettermethod method method
// check method signature first
if  method getname   startswith       method getreturntype      void type
class paramtype   method getparametertypes
// check that it can only accept one parameter
if  paramtype length    1
// check if parameter is a primitive or can accept a string
// parameter
if  paramtype isprimitive      paramtype    string class
return true
else
// check if object can accept a string as a constructor
try
if  paramtype getconstructor new class
string class

return true
catch  nosuchmethodexception e
// do nothing
return false
private static string getpropertyname string methodname
string name
if  methodname startswith
name   methodname substring 3
else if  methodname startswith
name   methodname substring 3
else if  methodname startswith
name   methodname substring 2
else
name
return name substring 0  1  tolowercase     name substring 1