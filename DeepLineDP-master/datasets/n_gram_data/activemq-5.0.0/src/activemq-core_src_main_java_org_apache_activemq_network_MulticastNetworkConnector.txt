/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java net uri
import org apache activemq transport transport
import org apache activemq transport transportfactory
import org apache activemq util servicestopper
/**
* a network connector which uses some kind of multicast-like transport that
* communicates with potentially many remote brokers over a single logical
* {@link transport} instance such as when using multicast.
*
* this implementation does not depend on multicast at all; any other group
* based transport could be used.
*
* @org.apache.xbean.xbean
*
* @version $revision$
*/
public class multicastnetworkconnector extends networkconnector
private transport localtransport
private transport remotetransport
private uri remoteuri
private demandforwardingbridgesupport bridge
public multicastnetworkconnector
public multicastnetworkconnector uri remoteuri
this remoteuri   remoteuri
// properties
// -------------------------------------------------------------------------
public demandforwardingbridgesupport getbridge
return bridge
public void setbridge demandforwardingbridgesupport bridge
this bridge   bridge
public transport getlocaltransport
return localtransport
public void setlocaltransport transport localtransport
this localtransport   localtransport
public transport getremotetransport
return remotetransport
/**
* sets the remote transport implementation
*/
public void setremotetransport transport remotetransport
this remotetransport   remotetransport
public uri getremoteuri
return remoteuri
/**
* sets the remote transport uri to some group transport like
* <code>multicast://address:port</code>
*/
public void setremoteuri uri remoteuri
this remoteuri   remoteuri
// implementation methods
// -------------------------------------------------------------------------
protected void handlestart   throws exception
if  remotetransport    null
if  remoteuri    null
throw new illegalargumentexception
remotetransport   transportfactory connect remoteuri
if  localtransport    null
localtransport   createlocaltransport
bridge   createbridge localtransport  remotetransport
configurebridge bridge
bridge start
// we need to start the transports after we've created the bridge
remotetransport start
localtransport start
super handlestart
protected void handlestop servicestopper stopper  throws exception
super handlestop stopper
if  bridge    null
try
bridge stop
catch  exception e
stopper onexception this  e
if  remotetransport    null
try
remotetransport stop
catch  exception e
stopper onexception this  e
if  localtransport    null
try
localtransport stop
catch  exception e
stopper onexception this  e
public string getname
return remotetransport tostring
protected demandforwardingbridgesupport createbridge transport local  transport remote
return new compositedemandforwardingbridge this  local  remote