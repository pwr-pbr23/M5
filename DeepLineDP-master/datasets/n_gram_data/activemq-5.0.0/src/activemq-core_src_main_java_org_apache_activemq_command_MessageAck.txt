/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import org apache activemq state commandvisitor
/**
* @openwire:marshaller code="22"
* @version $revision: 1.11 $
*/
public class messageack extends basecommand
public static final byte data_structure_type   commandtypes message_ack
/**
* used to let the broker know that the message has been delivered to the
* client. message will still be retained until an standard ack is received.
* this is used get the broker to send more messages past prefetch limits
* when an standard ack has not been sent.
*/
public static final byte delivered_ack_type   0
/**
* the standard ack case where a client wants the message to be discarded.
*/
public static final byte standard_ack_type   2
/**
* in case the client want's to explicitly let the broker know that a
* message was not processed and the message was considered a poison
* message.
*/
public static final byte posion_ack_type   1
/**
* in case the client want's to explicitly let the broker know that a
* message was not processed and it was re-delivered to the consumer
* but it was not yet considered to be a poison message.  the messagecount
* field will hold the number of times the message was re-delivered.
*/
public static final byte redelivered_ack_type   3
protected byte acktype
protected consumerid consumerid
protected messageid firstmessageid
protected messageid lastmessageid
protected activemqdestination destination
protected transactionid transactionid
protected int messagecount
protected transient string consumerkey
public messageack
public messageack messagedispatch md  byte acktype  int messagecount
this acktype   acktype
this consumerid   md getconsumerid
this destination   md getdestination
this lastmessageid   md getmessage   getmessageid
this messagecount   messagecount
public void copy messageack copy
super copy copy
copy firstmessageid   firstmessageid
copy lastmessageid   lastmessageid
copy destination   destination
copy transactionid   transactionid
copy acktype   acktype
copy consumerid   consumerid
public byte getdatastructuretype
return data_structure_type
public boolean ismessageack
return true
public boolean ispoisonack
return acktype    posion_ack_type
public boolean isstandardack
return acktype    standard_ack_type
public boolean isdeliveredack
return acktype    delivered_ack_type
public boolean isredeliveredack
return acktype    redelivered_ack_type
/**
* @openwire:property version=1 cache=true
*/
public activemqdestination getdestination
return destination
public void setdestination activemqdestination destination
this destination   destination
/**
* @openwire:property version=1 cache=true
*/
public transactionid gettransactionid
return transactionid
public void settransactionid transactionid transactionid
this transactionid   transactionid
public boolean isintransaction
return transactionid    null
/**
* @openwire:property version=1 cache=true
*/
public consumerid getconsumerid
return consumerid
public void setconsumerid consumerid consumerid
this consumerid   consumerid
/**
* @openwire:property version=1
*/
public byte getacktype
return acktype
public void setacktype byte acktype
this acktype   acktype
/**
* @openwire:property version=1
*/
public messageid getfirstmessageid
return firstmessageid
public void setfirstmessageid messageid firstmessageid
this firstmessageid   firstmessageid
/**
* @openwire:property version=1
*/
public messageid getlastmessageid
return lastmessageid
public void setlastmessageid messageid lastmessageid
this lastmessageid   lastmessageid
/**
* the number of messages being acknowledged in the range.
*
* @openwire:property version=1
*/
public int getmessagecount
return messagecount
public void setmessagecount int messagecount
this messagecount   messagecount
public response visit commandvisitor visitor  throws exception
return visitor processmessageack this
/**
* a helper method to allow a single message id to be acknowledged
*/
public void setmessageid messageid messageid
setfirstmessageid messageid
setlastmessageid messageid
setmessagecount 1