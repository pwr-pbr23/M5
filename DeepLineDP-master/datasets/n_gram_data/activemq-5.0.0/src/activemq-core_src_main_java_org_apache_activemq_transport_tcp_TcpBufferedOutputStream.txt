/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport tcp
import java io eofexception
import java io filteroutputstream
import java io ioexception
import java io outputstream
/**
* an optimized buffered outputstream for tcp
*
* @version $revision: 1.1.1.1 $
*/
public class tcpbufferedoutputstream extends filteroutputstream
private static final int buffer_size   8192
private byte buffer
private int bufferlen
private int count
/**
* constructor
*
* @param out
*/
public tcpbufferedoutputstream outputstream out
this out  buffer_size
/**
* creates a new buffered output stream to write data to the specified
* underlying output stream with the specified buffer size.
*
* @param out the underlying output stream.
* @param size the buffer size.
* @throws illegalargumentexception if size <= 0.
*/
public tcpbufferedoutputstream outputstream out  int size
super out
if  size <  0
throw new illegalargumentexception
buffer   new byte
bufferlen   size
/**
* write a byte on to the stream
*
* @param b - byte to write
* @throws ioexception
*/
public void write int b  throws ioexception
if   bufferlen   count  < 1
flush
buffer    byte b
/**
* write a byte array to the stream
*
* @param b the byte buffer
* @param off the offset into the buffer
* @param len the length of data to write
* @throws ioexception
*/
public void write byte b  int off  int len  throws ioexception
if   bufferlen   count  < len
flush
if  buffer length >  len
system arraycopy b  off  buffer  count  len
count    len
else
out write b  off  len
/**
* flush the data to the output stream this doesn't call flush on the
* underlying outputstream, because tcp is particularly efficent at doing
* this itself ....
*
* @throws ioexception
*/
public void flush   throws ioexception
if  count > 0    out    null
out write buffer  0  count
count   0
/**
* close this stream
*
* @throws ioexception
*/
public void close   throws ioexception
super close