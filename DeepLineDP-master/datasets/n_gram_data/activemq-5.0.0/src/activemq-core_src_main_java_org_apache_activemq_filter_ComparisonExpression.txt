/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import java util hashset
import java util list
import java util set
import java util regex pattern
import javax jms jmsexception
/**
* a filter performing a comparison of two objects
*
* @version $revision: 1.2 $
*/
public abstract class comparisonexpression extends binaryexpression implements booleanexpression
private static final set<character> regexp_control_chars   new hashset<character>
/**
* @param left
* @param right
*/
public comparisonexpression expression left  expression right
super left  right
public static booleanexpression createbetween expression value  expression left  expression right
return logicexpression createand creategreaterthanequal value  left   createlessthanequal value  right
public static booleanexpression createnotbetween expression value  expression left  expression right
return logicexpression createor createlessthan value  left   creategreaterthan value  right
static
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
regexp_control_chars add character valueof
static class likeexpression extends unaryexpression implements booleanexpression
pattern likepattern
/**
* @param left
*/
public likeexpression expression right  string like  int escape
super right
stringbuffer regexp   new stringbuffer like length     2
regexp append        the beginning of the input
for  int i   0  i < like length    i
char c   like charat i
if  escape     0xffff   c
i
if  i >  like length
// nothing left to escape...
break
char t   like charat i
regexp append
regexp append integer tohexstring 0xffff   t
else if  c
regexp append        do a non greedy match
else if  c
regexp append        match one
else if  regexp_control_chars contains new character c
regexp append
regexp append integer tohexstring 0xffff   c
else
regexp append c
regexp append        the end of the input
likepattern   pattern compile regexp tostring    pattern dotall
/**
* @see org.apache.activemq.filter.unaryexpression#getexpressionsymbol()
*/
public string getexpressionsymbol
return
/**
* @see org.apache.activemq.filter.expression#evaluate(messageevaluationcontext)
*/
public object evaluate messageevaluationcontext message  throws jmsexception
object rv   this getright   evaluate message
if  rv    null
return null
if    rv instanceof string
return boolean false
// throw new runtimeexception("like can only operate on string
// identifiers. like attemped on: '" + rv.getclass());
return likepattern matcher  string rv  matches   ? boolean true   boolean false
public boolean matches messageevaluationcontext message  throws jmsexception
object object   evaluate message
return object    null    object    boolean true
public static booleanexpression createlike expression left  string right  string escape
if  escape    null    escape length      1
throw new runtimeexception     escape
int c    1
if  escape    null
c   0xffff   escape charat 0
return new likeexpression left  right  c
public static booleanexpression createnotlike expression left  string right  string escape
return unaryexpression createnot createlike left  right  escape
public static booleanexpression createinfilter expression left  list elements
if    left instanceof propertyexpression
throw new runtimeexception     left
return unaryexpression createinexpression  propertyexpression left  elements  false
public static booleanexpression createnotinfilter expression left  list elements
if    left instanceof propertyexpression
throw new runtimeexception     left
return unaryexpression createinexpression  propertyexpression left  elements  true
public static booleanexpression createisnull expression left
return docreateequal left  constantexpression null
public static booleanexpression createisnotnull expression left
return unaryexpression createnot docreateequal left  constantexpression null
public static booleanexpression createnotequal expression left  expression right
return unaryexpression createnot createequal left  right
public static booleanexpression createequal expression left  expression right
checkequaloperand left
checkequaloperand right
checkequaloperandcompatability left  right
return docreateequal left  right
private static booleanexpression docreateequal expression left  expression right
return new comparisonexpression left  right
public object evaluate messageevaluationcontext message  throws jmsexception
object lv   left evaluate message
object rv   right evaluate message
// iff one of the values is null
if  lv    null ^ rv    null
return boolean false
if  lv    rv    lv equals rv
return boolean true
if  lv instanceof comparable    rv instanceof comparable
return compare  comparable lv   comparable rv
return boolean false
protected boolean asboolean int answer
return answer    0
public string getexpressionsymbol
return
public static booleanexpression creategreaterthan final expression left  final expression right
checklessthanoperand left
checklessthanoperand right
return new comparisonexpression left  right
protected boolean asboolean int answer
return answer > 0
public string getexpressionsymbol
return
public static booleanexpression creategreaterthanequal final expression left  final expression right
checklessthanoperand left
checklessthanoperand right
return new comparisonexpression left  right
protected boolean asboolean int answer
return answer >  0
public string getexpressionsymbol
return
public static booleanexpression createlessthan final expression left  final expression right
checklessthanoperand left
checklessthanoperand right
return new comparisonexpression left  right
protected boolean asboolean int answer
return answer < 0
public string getexpressionsymbol
return
public static booleanexpression createlessthanequal final expression left  final expression right
checklessthanoperand left
checklessthanoperand right
return new comparisonexpression left  right
protected boolean asboolean int answer
return answer <  0
public string getexpressionsymbol
return
/**
* only numeric expressions can be used in >, >=, < or <= expressions.s
*
* @param expr
*/
public static void checklessthanoperand expression expr
if  expr instanceof constantexpression
object value     constantexpression expr  getvalue
if  value instanceof number
return
// else it's boolean or a string..
throw new runtimeexception     expr
if  expr instanceof booleanexpression
throw new runtimeexception     expr
/**
* validates that the expression can be used in == or <> expression. cannot
* not be null true or false litterals.
*
* @param expr
*/
public static void checkequaloperand expression expr
if  expr instanceof constantexpression
object value     constantexpression expr  getvalue
if  value    null
throw new runtimeexception     expr
/**
* @param left
* @param right
*/
private static void checkequaloperandcompatability expression left  expression right
if  left instanceof constantexpression    right instanceof constantexpression
if  left instanceof booleanexpression      right instanceof booleanexpression
throw new runtimeexception     left       right
public object evaluate messageevaluationcontext message  throws jmsexception
comparable<comparable> lv    comparable left evaluate message
if  lv    null
return null
comparable rv    comparable right evaluate message
if  rv    null
return null
return compare lv  rv
protected boolean compare comparable lv  comparable rv
class<? extends comparable> lc   lv getclass
class<? extends comparable> rc   rv getclass
// if the the objects are not of the same type,
// try to convert up to allow the comparison.
if  lc    rc
if  lc    byte class
if  rc    short class
lv   short valueof   number lv  shortvalue
else if  rc    integer class
lv   integer valueof   number lv  intvalue
else if  rc    long class
lv   long valueof   number lv  longvalue
else if  rc    float class
lv   new float   number lv  floatvalue
else if  rc    double class
lv   new double   number lv  doublevalue
else
return boolean false
else if  lc    short class
if  rc    integer class
lv   integer valueof   number lv  intvalue
else if  rc    long class
lv   long valueof   number lv  longvalue
else if  rc    float class
lv   new float   number lv  floatvalue
else if  rc    double class
lv   new double   number lv  doublevalue
else
return boolean false
else if  lc    integer class
if  rc    long class
lv   long valueof   number lv  longvalue
else if  rc    float class
lv   new float   number lv  floatvalue
else if  rc    double class
lv   new double   number lv  doublevalue
else
return boolean false
else if  lc    long class
if  rc    integer class
rv   long valueof   number rv  longvalue
else if  rc    float class
lv   new float   number lv  floatvalue
else if  rc    double class
lv   new double   number lv  doublevalue
else
return boolean false
else if  lc    float class
if  rc    integer class
rv   new float   number rv  floatvalue
else if  rc    long class
rv   new float   number rv  floatvalue
else if  rc    double class
lv   new double   number lv  doublevalue
else
return boolean false
else if  lc    double class
if  rc    integer class
rv   new double   number rv  doublevalue
else if  rc    long class
rv   new double   number rv  doublevalue
else if  rc    float class
rv   new float   number rv  doublevalue
else
return boolean false
else
return boolean false
return asboolean lv compareto rv   ? boolean true   boolean false
protected abstract boolean asboolean int answer
public boolean matches messageevaluationcontext message  throws jmsexception
object object   evaluate message
return object    null    object    boolean true