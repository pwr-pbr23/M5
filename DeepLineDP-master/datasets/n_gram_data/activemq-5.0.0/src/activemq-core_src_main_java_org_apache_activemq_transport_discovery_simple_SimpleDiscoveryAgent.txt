/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport discovery simple
import java io ioexception
import java net uri
import java util concurrent atomic atomicboolean
import org apache activemq command discoveryevent
import org apache activemq transport discovery discoveryagent
import org apache activemq transport discovery discoverylistener
import org apache commons logging log
import org apache commons logging logfactory
/**
* a simple discoveryagent that allows static configuration of the discovered
* services.
*
* @version $revision$
*/
public class simplediscoveryagent implements discoveryagent
private final static log log   logfactory getlog simplediscoveryagent class
private long initialreconnectdelay   1000
private long maxreconnectdelay   1000   30
private long backoffmultiplier   2
private boolean useexponentialbackoff true
private int maxreconnectattempts
private final object sleepmutex   new object
private long minconnecttime   5000
private discoverylistener listener
private string services   new string
private final atomicboolean running   new atomicboolean false
class simplediscoveryevent extends discoveryevent
private int connectfailures
private long reconnectdelay   initialreconnectdelay
private long connecttime   system currenttimemillis
private atomicboolean failed   new atomicboolean false
public simplediscoveryevent string service
super service
public void setdiscoverylistener discoverylistener listener
this listener   listener
public void registerservice string name  throws ioexception
public void start   throws exception
running set true
for  int i   0  i < services length  i
listener onserviceadd new simplediscoveryevent services
public void stop   throws exception
running set false
synchronized  sleepmutex
sleepmutex notifyall
public string getservices
return services
public void setservices string services
this services   services split
public void setservices string services
this services   services
public void setservices uri services
this services   new string
for  int i   0  i < services length  i
this services   services tostring
public void servicefailed discoveryevent devent  throws ioexception
final simplediscoveryevent event    simplediscoveryevent devent
if  event failed compareandset false  true
listener onserviceremove event
thread thread   new thread
public void run
// we detect a failed connection attempt because the service
// fails right
// away.
if  event connecttime   minconnecttime > system currenttimemillis
log debug   event
event connectfailures
if  maxreconnectattempts > 0    event connectfailures >  maxreconnectattempts
log debug   maxreconnectattempts
return
synchronized  sleepmutex
try
if   running get
return
log debug   event reconnectdelay
sleepmutex wait event reconnectdelay
catch  interruptedexception ie
thread currentthread   interrupt
return
if   useexponentialbackoff
event reconnectdelay   initialreconnectdelay
else
// exponential increment of reconnect delay.
event reconnectdelay    backoffmultiplier
if  event reconnectdelay > maxreconnectdelay
event reconnectdelay   maxreconnectdelay
else
event connectfailures   0
event reconnectdelay   initialreconnectdelay
if   running get
return
event connecttime   system currenttimemillis
event failed set false
listener onserviceadd event
thread setdaemon true
thread start
public long getbackoffmultiplier
return backoffmultiplier
public void setbackoffmultiplier long backoffmultiplier
this backoffmultiplier   backoffmultiplier
public long getinitialreconnectdelay
return initialreconnectdelay
public void setinitialreconnectdelay long initialreconnectdelay
this initialreconnectdelay   initialreconnectdelay
public int getmaxreconnectattempts
return maxreconnectattempts
public void setmaxreconnectattempts int maxreconnectattempts
this maxreconnectattempts   maxreconnectattempts
public long getmaxreconnectdelay
return maxreconnectdelay
public void setmaxreconnectdelay long maxreconnectdelay
this maxreconnectdelay   maxreconnectdelay
public long getminconnecttime
return minconnecttime
public void setminconnecttime long minconnecttime
this minconnecttime   minconnecttime
public boolean isuseexponentialbackoff
return useexponentialbackoff
public void setuseexponentialbackoff boolean useexponentialbackoff
this useexponentialbackoff   useexponentialbackoff