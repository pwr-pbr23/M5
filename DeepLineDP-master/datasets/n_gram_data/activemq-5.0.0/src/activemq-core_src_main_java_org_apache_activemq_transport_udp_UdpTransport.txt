/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport udp
import java io eofexception
import java io ioexception
import java net bindexception
import java net datagramsocket
import java net inetaddress
import java net inetsocketaddress
import java net socketaddress
import java net socketexception
import java net uri
import java net unknownhostexception
import java nio channels asynchronouscloseexception
import java nio channels datagramchannel
import org apache activemq service
import org apache activemq command command
import org apache activemq command endpoint
import org apache activemq openwire openwireformat
import org apache activemq transport transport
import org apache activemq transport transportthreadsupport
import org apache activemq transport reliable exceptionifdroppedreplaystrategy
import org apache activemq transport reliable replaybuffer
import org apache activemq transport reliable replaystrategy
import org apache activemq transport reliable replayer
import org apache activemq util intsequencegenerator
import org apache activemq util servicestopper
import org apache commons logging log
import org apache commons logging logfactory
/**
* an implementation of the {@link transport} interface using raw udp
*
* @version $revision$
*/
public class udptransport extends transportthreadsupport implements transport  service  runnable
private static final log log   logfactory getlog udptransport class
private static final int max_bind_attempts   50
private static final long bind_attempt_delay   100
private commandchannel commandchannel
private openwireformat wireformat
private bytebufferpool bufferpool
private replaystrategy replaystrategy   new exceptionifdroppedreplaystrategy
private replaybuffer replaybuffer
private int datagramsize   4   1024
private socketaddress targetaddress
private socketaddress originaltargetaddress
private datagramchannel channel
private boolean trace
private boolean uselocalhost   true
private int port
private int minmumwireformatversion
private string description
private intsequencegenerator sequencegenerator
private boolean replayenabled   true
protected udptransport openwireformat wireformat  throws ioexception
this wireformat   wireformat
public udptransport openwireformat wireformat  uri remotelocation  throws unknownhostexception  ioexception
this wireformat
this targetaddress   createaddress remotelocation
description   remotelocation tostring
public udptransport openwireformat wireformat  socketaddress socketaddress  throws ioexception
this wireformat
this targetaddress   socketaddress
this description   getprotocolname
/**
* used by the server transport
*/
public udptransport openwireformat wireformat  int port  throws unknownhostexception  ioexception
this wireformat
this port   port
this targetaddress   null
this description   getprotocolname
/**
* creates a replayer for working with the reliable transport
*/
public replayer createreplayer   throws ioexception
if  replayenabled
return getcommandchannel
return null
/**
* a one way asynchronous send
*/
public void oneway object command  throws ioexception
oneway command  targetaddress
/**
* a one way asynchronous send to a given address
*/
public void oneway object command  socketaddress address  throws ioexception
if  log isdebugenabled
log debug     this       targetaddress       command
checkstarted
commandchannel write  command command  address
/**
* @return pretty print of 'this'
*/
public string tostring
if  description    null
return description   port
else
return getprotocolurischeme     targetaddress       port
/**
* reads packets from a socket
*/
public void run
log trace     tostring
while   isstopped
try
command command   commandchannel read
doconsume command
catch  asynchronouscloseexception e
// datagramchannel closed
try
stop
catch  exception e2
log warn     this       e2      e2
catch  socketexception e
// datagramsocket closed
log debug     e  e
try
stop
catch  exception e2
log warn     this       e2      e2
catch  eofexception e
// datainputstream closed
log debug     e  e
try
stop
catch  exception e2
log warn     this       e2      e2
catch  exception e
try
stop
catch  exception e2
log warn     this       e2      e2
if  e instanceof ioexception
onexception  ioexception e
else
log error     e  e
e printstacktrace
/**
* we have received the wireformatinfo from the server on the actual channel
* we should use for all future communication with the server, so lets set
* the target to be the actual channel that the server has chosen for us to
* talk on.
*/
public void settargetendpoint endpoint newtarget
if  newtarget instanceof datagramendpoint
datagramendpoint endpoint    datagramendpoint newtarget
socketaddress address   endpoint getaddress
if  address    null
if  originaltargetaddress    null
originaltargetaddress   targetaddress
targetaddress   address
commandchannel settargetaddress address
// properties
// -------------------------------------------------------------------------
public boolean istrace
return trace
public void settrace boolean trace
this trace   trace
public int getdatagramsize
return datagramsize
public void setdatagramsize int datagramsize
this datagramsize   datagramsize
public boolean isuselocalhost
return uselocalhost
/**
* sets whether 'localhost' or the actual local host name should be used to
* make local connections. on some operating systems such as macs its not
* possible to connect as the local host name so localhost is better.
*/
public void setuselocalhost boolean uselocalhost
this uselocalhost   uselocalhost
public commandchannel getcommandchannel   throws ioexception
if  commandchannel    null
commandchannel   createcommandchannel
return commandchannel
/**
* sets the implementation of the command channel to use.
*/
public void setcommandchannel commanddatagramchannel commandchannel
this commandchannel   commandchannel
public replaystrategy getreplaystrategy
return replaystrategy
/**
* sets the strategy used to replay missed datagrams
*/
public void setreplaystrategy replaystrategy replaystrategy
this replaystrategy   replaystrategy
public int getport
return port
/**
* sets the port to connect on
*/
public void setport int port
this port   port
public int getminmumwireformatversion
return minmumwireformatversion
public void setminmumwireformatversion int minmumwireformatversion
this minmumwireformatversion   minmumwireformatversion
public openwireformat getwireformat
return wireformat
public intsequencegenerator getsequencegenerator
if  sequencegenerator    null
sequencegenerator   new intsequencegenerator
return sequencegenerator
public void setsequencegenerator intsequencegenerator sequencegenerator
this sequencegenerator   sequencegenerator
public boolean isreplayenabled
return replayenabled
/**
* sets whether or not replay should be enabled when using the reliable
* transport. i.e. should we maintain a buffer of messages that can be
* replayed?
*/
public void setreplayenabled boolean replayenabled
this replayenabled   replayenabled
public bytebufferpool getbufferpool
if  bufferpool    null
bufferpool   new defaultbufferpool
return bufferpool
public void setbufferpool bytebufferpool bufferpool
this bufferpool   bufferpool
public replaybuffer getreplaybuffer
return replaybuffer
public void setreplaybuffer replaybuffer replaybuffer  throws ioexception
this replaybuffer   replaybuffer
getcommandchannel   setreplaybuffer replaybuffer
// implementation methods
// -------------------------------------------------------------------------
/**
* creates an address from the given uri
*/
protected inetsocketaddress createaddress uri remotelocation  throws unknownhostexception  ioexception
string host   resolvehostname remotelocation gethost
return new inetsocketaddress host  remotelocation getport
protected string resolvehostname string host  throws unknownhostexception
string localname   inetaddress getlocalhost   gethostname
if  localname    null    isuselocalhost
if  localname equals host
return
return host
protected void dostart   throws exception
getcommandchannel   start
super dostart
protected commandchannel createcommandchannel   throws ioexception
socketaddress localaddress   createlocaladdress
channel   datagramchannel open
channel   connect channel  targetaddress
datagramsocket socket   channel socket
bind socket  localaddress
if  port    0
port   socket getlocalport
return createcommanddatagramchannel
protected commandchannel createcommanddatagramchannel
return new commanddatagramchannel this  getwireformat    getdatagramsize    gettargetaddress    createdatagramheadermarshaller    getchannel    getbufferpool
protected void bind datagramsocket socket  socketaddress localaddress  throws ioexception
channel configureblocking true
if  log isdebugenabled
log debug     localaddress
//
// we have noticed that on some platfoms like linux, after you close
// down
// a previously bound socket, it can take a little while before we can
// bind it again.
//
for  int i   0  i < max_bind_attempts  i
try
socket bind localaddress
return
catch  bindexception e
if  i   1    max_bind_attempts
throw e
try
thread sleep bind_attempt_delay
catch  interruptedexception e1
thread currentthread   interrupt
throw e
protected datagramchannel connect datagramchannel channel  socketaddress targetaddress2  throws ioexception
// todo
// connect to default target address to avoid security checks each time
// channel = channel.connect(targetaddress);
return channel
protected socketaddress createlocaladdress
return new inetsocketaddress port
protected void dostop servicestopper stopper  throws exception
if  channel    null
channel close
protected datagramheadermarshaller createdatagramheadermarshaller
return new datagramheadermarshaller
protected string getprotocolname
return
protected string getprotocolurischeme
return
protected socketaddress gettargetaddress
return targetaddress
protected datagramchannel getchannel
return channel
protected void setchannel datagramchannel channel
this channel   channel
public inetsocketaddress getlocalsocketaddress
if  channel    null
return null
else
return  inetsocketaddress channel socket   getlocalsocketaddress
public string getremoteaddress
if  targetaddress    null
return     targetaddress
return null