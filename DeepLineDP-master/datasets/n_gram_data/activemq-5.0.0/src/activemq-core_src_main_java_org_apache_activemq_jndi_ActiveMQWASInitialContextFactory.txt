/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq jndi
import java util hashtable
import java util iterator
import java util map
import javax naming context
import javax naming namingexception
/**
* this implementation of <code>initialcontextfactory</code> should be used
* when activemq is used as websphere generic jms provider. it is proved that it
* works on websphere 5.1. the reason for using this class is that custom
* property defined for generic jms provider are passed to initialcontextfactory
* only if it begins with java.naming or javax.naming prefix. additionaly
* provider url for the jms provider can not contain ',' character that is
* necessary when the list of nodes is provided. so the role of this class is to
* transform properties before passing it to
* <code>activemqinitialcontextfactory</code>.
*
* @author pawel tucholski
*/
public class activemqwasinitialcontextfactory extends activemqinitialcontextfactory
/**
* @see javax.naming.spi.initialcontextfactory#getinitialcontext(java.util.hashtable)
*/
public context getinitialcontext hashtable environment  throws namingexception
return super getinitialcontext transformenvironment environment
/**
* performs following transformation of properties:
* <ul>
* <li>(java.naming.queue.xxx.yyy,value)=>(queue.xxx/yyy,value)
* <li>(java.naming.topic.xxx.yyy,value)=>(topic.xxx/yyy,value)
* <li>(java.naming.connectionfactorynames,value)=>(connectionfactorynames,value)
* <li>(java.naming.provider.url,url1;url2)=>java.naming.provider.url,url1,url1)
* <ul>
*
* @param environment properties for transformation
* @return environment after transformation
*/
protected hashtable transformenvironment hashtable environment
hashtable environment1   new hashtable
iterator it   environment entryset   iterator
while  it hasnext
map entry entry    map entry it next
string key    string entry getkey
string value    string entry getvalue
if  key startswith
string key1   key substring   length
key1   key1 replace
environment1 put     key1  value
else if  key startswith
string key1   key substring   length
key1   key1 replace
environment1 put     key1  value
else if  key startswith
string key1   key substring   length
environment1 put key1  value
else if  key startswith
string key1   key substring   length
environment1 put key1  value
else if  key startswith context provider_url
// websphere administration console does not exept , character
// in provider url, so ; must be used
// all ; to ,
value   value replace
environment1 put context provider_url  value
else
environment1 put key  value
return environment1