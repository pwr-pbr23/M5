/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq web filter
import java io ioexception
import java util abstractmap
import java util collections
import java util map
import java util set
import javax servlet filter
import javax servlet filterchain
import javax servlet filterconfig
import javax servlet servletcontext
import javax servlet servletexception
import javax servlet servletrequest
import javax servlet servletresponse
import org springframework web bind servletrequestdatabinder
import org springframework web context webapplicationcontext
import org springframework web context support webapplicationcontextutils
/**
* exposes spring applicationcontexts to jsp el and other view technologies.
* currently a variable is placed in application scope (by default called
* 'applicationcontext') so that pojos can be pulled out of spring in a jsp page
* to render things using el expressions. <br/>
*
* e.g. ${applicationcontext.cheese} would access the cheese pojo. or
* ${applicationcontext.cheese.name} would access the name property of the
* cheese pojo. <br/>
*
* you can then use jstl to work with these pojos such as &lt;c.set var="myfoo"
* value="${applicationcontext.foo}"/&gt; <br/>
*
* in addition to applicationcontext a 'requestcontext' variable is created
* which will automatically bind any request parameters to the pojos extracted
* from the applicationcontext - which is ideal for pojos which implement
* queries in view technologies.
*
* @version $revision$
*/
public class applicationcontextfilter implements filter
private servletcontext servletcontext
private string applicationcontextname
private string requestcontextname
private string requestname
public void init filterconfig config  throws servletexception
this servletcontext   config getservletcontext
this applicationcontextname   getinitparameter config     applicationcontextname
this requestcontextname   getinitparameter config     requestcontextname
this requestname   getinitparameter config     requestname
// register the application context in the applicationscope
webapplicationcontext context   webapplicationcontextutils getwebapplicationcontext servletcontext
map wrapper   createapplicationcontextwrapper context
servletcontext setattribute applicationcontextname  wrapper
public void dofilter servletrequest request  servletresponse response  filterchain chain  throws ioexception  servletexception
// lets register a requestcontext in the requestscope
map requestcontextwrapper   createrequestcontextwrapper request
request setattribute requestcontextname  requestcontextwrapper
request setattribute requestname  request
chain dofilter request  response
public void destroy
public servletcontext getservletcontext
return servletcontext
public string getapplicationcontextname
return applicationcontextname
public void setapplicationcontextname string variablename
this applicationcontextname   variablename
public string getrequestcontextname
return requestcontextname
public void setrequestcontextname string requestcontextname
this requestcontextname   requestcontextname
protected string getinitparameter filterconfig config  string key  string defaultvalue
string parameter   config getinitparameter key
return  parameter    null  ? parameter   defaultvalue
/**
* creates a wrapper around the web application context so that it can be
* accessed easily from inside jsp el (or other expression languages in
* other view technologies).
*/
protected map createapplicationcontextwrapper final webapplicationcontext context
map wrapper   new abstractmap
public webapplicationcontext getcontext
return context
public object get object key
if  key    null
return null
return context getbean key tostring
public set entryset
return collections empty_set
return wrapper
/**
* creates a wrapper around the request context (e.g. to allow pojos to be
* auto-injected from request parameter values etc) so that it can be
* accessed easily from inside jsp el (or other expression languages in
* other view technologies).
*/
protected map createrequestcontextwrapper final servletrequest request
final webapplicationcontext context   webapplicationcontextutils getwebapplicationcontext servletcontext
map wrapper   new abstractmap
public webapplicationcontext getcontext
return context
public object get object key
if  key    null
return null
return bindrequestbean context getbean key tostring     request
public set entryset
return collections empty_set
return wrapper
/**
* binds properties from the request parameters to the given pojo which is
* useful for pojos which are configurable via request parameters such as
* for query/view pojos
*/
protected object bindrequestbean object bean  servletrequest request
servletrequestdatabinder binder   new servletrequestdatabinder bean  null
binder bind request
return bean