/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
/**
* a helper class used to provide access to the current active
* {@link inboundcontext} instance being used to process a message in the
* current thread so that messages can be produced using the same session.
*
* @version $revision$
*/
public final class inboundcontextsupport
private static final threadlocal<inboundcontext> thread_local   new threadlocal<inboundcontext>
private inboundcontextsupport
/**
* returns the current {@link inboundcontext} used by the current thread
* which is processing a message. this allows us to access the current
* session to send a message using the same underlying session to avoid
* unnecessary xa or to use regular jms transactions while using message
* driven pojos.
*
* @return
*/
public static inboundcontext getactivesessionandproducer
return thread_local get
/**
* registers the session and producer which should be called before the
* {@link javax.resource.spi.endpoint.messageendpoint#beforedelivery(java.lang.reflect.method)}
* method is called.
*
* @param sessionandproducer
*/
public static void register inboundcontext sessionandproducer
thread_local set sessionandproducer
/**
* unregisters the session and producer which should be called after the
* {@link javax.resource.spi.endpoint.messageendpoint#afterdelivery()}
* method is called.
*
* @param sessionandproducer
*/
public static void unregister inboundcontext sessionandproducer
thread_local set null