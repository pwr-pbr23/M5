/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq tool
import java io ioexception
import java util arraylist
import java util collections
import java util iterator
import java util list
import java util random
import java util concurrent countdownlatch
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import java util concurrent atomic atomicinteger
import javax jms bytesmessage
import javax jms connection
import javax jms deliverymode
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms messageproducer
import javax jms session
import junit framework testcase
import org apache activemq activemqconnectionfactory
import org apache activemq command activemqqueue
/**
* @version $revision$
*/
public class acidtesttool extends testcase
// worker configuration.
protected int recordsize   1024
protected int batchsize   5
protected int workerthinktime   500
protected destination target
private random random   new random
private byte data
private int workercount   10
private atomicboolean ignorejmserrors   new atomicboolean false
private activemqconnectionfactory factory
private connection connection
private atomicinteger publishedbatches   new atomicinteger 0
private atomicinteger consumedbatches   new atomicinteger 0
private list<throwable> errors   collections synchronizedlist new arraylist<throwable>
private interface worker extends runnable
boolean waitforexit long i  throws interruptedexception
private final class producerworker implements worker
private session session
private messageproducer producer
private bytesmessage message
private countdownlatch donelatch   new countdownlatch 1
producerworker session session  string workerid  throws jmsexception
this session   session
producer   session createproducer target
producer setdeliverymode deliverymode persistent
message   session createbytesmessage
message setstringproperty    workerid
message writebytes data
public void run
try
for  int batchid   0  true  batchid
// system.out.println("sending batch: "+workerid+"
// "+batchid);
for  int msgid   0  msgid < batchsize  msgid
// sleep some random amount of time less than
// workerthinktime
try
thread sleep random nextint workerthinktime
catch  interruptedexception e1
return
message setintproperty    batchid
message setintproperty    msgid
producer send message
session commit
publishedbatches incrementandget
// system.out.println("commited send batch: "+workerid+"
// "+batchid);
catch  jmsexception e
if   ignorejmserrors get
e printstacktrace
errors add e
return
catch  throwable e
e printstacktrace
errors add e
return
finally
system out println
donelatch countdown
public boolean waitforexit long i  throws interruptedexception
return donelatch await i  timeunit milliseconds
private final class consumerworker implements worker
private session session
private messageconsumer consumer
private final long timeout
private countdownlatch donelatch   new countdownlatch 1
consumerworker session session  string workerid  long timeout  throws jmsexception
this session   session
this timeout   timeout
consumer   session createconsumer target      workerid
public void run
try
int batchid   0
while  true
for  int msgid   0  msgid < batchsize  msgid
// sleep some random amount of time less than
// workerthinktime
try
thread sleep random nextint workerthinktime
catch  interruptedexception e1
return
message message   consumer receive timeout
if  msgid > 0
assertnotnull message
assertequals message getintproperty     batchid
assertequals message getintproperty     msgid
else
if  message    null
system out println
return
assertequals msgid  message getintproperty
batchid   message getintproperty
// system.out.println("receiving batch: "+workerid+"
// "+batchid);
session commit
consumedbatches incrementandget
// system.out.println("commited receive batch: "+workerid+"
// "+batchid);
catch  jmsexception e
if   ignorejmserrors get
e printstacktrace
errors add e
return
catch  throwable e
e printstacktrace
errors add e
return
finally
system out println
donelatch countdown
public boolean waitforexit long i  throws interruptedexception
return donelatch await i  timeunit milliseconds
/**
* @see junit.framework.testcase#setup()
*/
protected void setup   throws exception
factory   new activemqconnectionfactory
this target   new activemqqueue getclass   getname
protected void teardown   throws exception
if  connection    null
try
connection close
catch  throwable ignore
connection   null
/**
* @throws interruptedexception
* @throws jmsexception
* @throws jmsexception
*/
private void reconnect   throws interruptedexception  jmsexception
if  connection    null
try
connection close
catch  throwable ignore
connection   null
long reconnectdelay   1000
while  connection    null
if  reconnectdelay > 1000   10
reconnectdelay   1000   10
try
connection   factory createconnection
connection start
catch  jmsexception e
thread sleep reconnectdelay
reconnectdelay    2
/**
* @throws throwable
* @throws ioexception
*/
public void testacidtransactions   throws throwable
system out println     recordsize       batchsize       workerthinktime
// create the record and fill it with some values.
data   new byte
for  int i   0  i < data length  i
data    byte i
system out println
system out println
system out println
reconnect
system out println     workercount
arraylist<worker> workers   new arraylist<worker>
for  int i   0  i < workercount  i
string workerid       i
worker w   new consumerworker connection createsession true  session session_transacted   workerid  1000   5
workers add w
new thread w      workerid  start
w   new producerworker connection createsession true  session session_transacted   workerid
workers add w
new thread w      workerid  start
system out println      workercount   10
//
// wait for about 5 batches of messages per worker to be consumed before
// restart.
//
while  publishedbatches get   < workercount   5
system out println     this publishedbatches get         this consumedbatches get
thread sleep 1000
system out println
system out println
system out println
ignorejmserrors set true
// wait for all the workers to finish.
system out println
for  iterator<worker> iter   workers iterator    iter hasnext
worker worker   iter next
while   worker waitforexit 1000
system out println
system out println
system out println
system out println     this publishedbatches get         this consumedbatches get
workers clear
// no errors should have occurred so far.
if  errors size   > 0
throw errors get 0
system out println
system out println
system out println
reconnect
system out println
// validate the all transactions were commited as a uow. looking for
// partial commits.
for  int i   0  i < workercount  i
string workerid       i
worker w   new consumerworker connection createsession true  session session_transacted   workerid  5   1000
workers add w
new thread w      workerid  start
system out println
for  iterator<worker> iter   workers iterator    iter hasnext
worker worker   iter next
while   worker waitforexit 1000   5
system out println
system out println     this publishedbatches get         this consumedbatches get
workers clear
system out println
system out println     this publishedbatches get         this consumedbatches get
if  errors size   > 0
throw errors get 0
public static void main string args
try
acidtesttool tool   new acidtesttool
tool setup
tool testacidtransactions
tool teardown
catch  throwable e
system out println     e getmessage
e printstacktrace