/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq openwire
import java io datainput
import java io dataoutput
import java io ioexception
import java lang reflect method
import java util hashmap
import java util map
import org apache activemq command commandtypes
import org apache activemq command datastructure
import org apache activemq command wireformatinfo
import org apache activemq util bytesequence
import org apache activemq util bytesequencedata
import org apache activemq util classloading
import org apache activemq util databytearrayinputstream
import org apache activemq util databytearrayoutputstream
import org apache activemq wireformat wireformat
/**
*
* @version $revision$
*/
public final class openwireformat implements wireformat
public static final int default_version   commandtypes protocol_version
static final byte null_type   commandtypes null
private static final int marshal_cache_size   short max_value   2
private static final int marshal_cache_free_space   100
private datastreammarshaller datamarshallers
private int version
private boolean stacktraceenabled
private boolean tcpnodelayenabled
private boolean cacheenabled
private boolean tightencodingenabled
private boolean sizeprefixdisabled
// the following fields are used for value caching
private short nextmarshallcacheindex
private short nextmarshallcacheevictionindex
private map<datastructure  short> marshallcachemap   new hashmap<datastructure  short>
private datastructure marshallcache   new datastructure
private datastructure unmarshallcache   new datastructure
private databytearrayoutputstream bytesout   new databytearrayoutputstream
private databytearrayinputstream bytesin   new databytearrayinputstream
private wireformatinfo preferedwireformatinfo
public openwireformat
this default_version
public openwireformat int i
setversion i
public int hashcode
return version ^  cacheenabled ? 0x10000000   0x20000000
^  stacktraceenabled ? 0x01000000   0x02000000
^  tightencodingenabled ? 0x00100000   0x00200000
^  sizeprefixdisabled ? 0x00010000   0x00020000
public openwireformat copy
openwireformat answer   new openwireformat
answer version   version
answer stacktraceenabled   stacktraceenabled
answer tcpnodelayenabled   tcpnodelayenabled
answer cacheenabled   cacheenabled
answer tightencodingenabled   tightencodingenabled
answer sizeprefixdisabled   sizeprefixdisabled
answer preferedwireformatinfo   preferedwireformatinfo
return answer
public boolean equals object object
if  object    null
return false
openwireformat o    openwireformat object
return o stacktraceenabled    stacktraceenabled    o cacheenabled    cacheenabled
o version    version    o tightencodingenabled    tightencodingenabled
o sizeprefixdisabled    sizeprefixdisabled
public string tostring
return     version       cacheenabled       stacktraceenabled
tightencodingenabled       sizeprefixdisabled
// return "openwireformat{id="+id+",
// tightencodingenabled="+tightencodingenabled+"}";
public int getversion
return version
public synchronized bytesequence marshal object command  throws ioexception
if  cacheenabled
runmarshallcacheevictionsweep
//        marshallaware ma = null;
//        // if not using value caching, then the marshaled form is always the
//        // same
//        if (!cacheenabled && ((datastructure)command).ismarshallaware()) {
//            ma = (marshallaware)command;
//        }
bytesequence sequence   null
// if( ma!=null ) {
// sequence = ma.getcachedmarshalledform(this);
// }
if  sequence    null
int size   1
if  command    null
datastructure c    datastructure command
byte type   c getdatastructuretype
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
if  tightencodingenabled
booleanstream bs   new booleanstream
size    dsm tightmarshal1 this  c  bs
size    bs marshalledsize
bytesout restart size
if   sizeprefixdisabled
bytesout writeint size
bytesout writebyte type
bs marshal bytesout
dsm tightmarshal2 this  c  bytesout  bs
sequence   bytesout tobytesequence
else
bytesout restart
if   sizeprefixdisabled
bytesout writeint 0      we don't know the final size
// yet but write this here for
// now.
bytesout writebyte type
dsm loosemarshal this  c  bytesout
sequence   bytesout tobytesequence
if   sizeprefixdisabled
size   sequence getlength     4
int pos   sequence offset
bytesequencedata writeintbig sequence  size
sequence offset   pos
else
bytesout restart 5
bytesout writeint size
bytesout writebyte null_type
sequence   bytesout tobytesequence
// if( ma!=null ) {
// ma.setcachedmarshalledform(this, sequence);
// }
return sequence
public synchronized object unmarshal bytesequence sequence  throws ioexception
bytesin restart sequence
// datainputstream dis = new datainputstream(new
// bytearrayinputstream(sequence));
if   sizeprefixdisabled
int size   bytesin readint
if  sequence getlength     4    size
// throw new ioexception("packet size does not match marshaled
// size");
object command   dounmarshal bytesin
// if( !cacheenabled && ((datastructure)command).ismarshallaware() ) {
// ((marshallaware) command).setcachedmarshalledform(this, sequence);
// }
return command
public synchronized void marshal object o  dataoutput dataout  throws ioexception
if  cacheenabled
runmarshallcacheevictionsweep
int size   1
if  o    null
datastructure c    datastructure o
byte type   c getdatastructuretype
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
if  tightencodingenabled
booleanstream bs   new booleanstream
size    dsm tightmarshal1 this  c  bs
size    bs marshalledsize
if   sizeprefixdisabled
dataout writeint size
dataout writebyte type
bs marshal dataout
dsm tightmarshal2 this  c  dataout  bs
else
dataoutput looseout   dataout
if   sizeprefixdisabled
bytesout restart
looseout   bytesout
looseout writebyte type
dsm loosemarshal this  c  looseout
if   sizeprefixdisabled
bytesequence sequence   bytesout tobytesequence
dataout writeint sequence getlength
dataout write sequence getdata    sequence getoffset    sequence getlength
else
dataout writeint size
dataout writebyte null_type
public object unmarshal datainput dis  throws ioexception
datainput datain   dis
if   sizeprefixdisabled
dis readint
// int size = dis.readint();
// byte[] data = new byte[size];
// dis.readfully(data);
// bytesin.restart(data);
// datain = bytesin;
return dounmarshal datain
/**
* used by nio or aio transports
*/
public int tightmarshal1 object o  booleanstream bs  throws ioexception
int size   1
if  o    null
datastructure c    datastructure o
byte type   c getdatastructuretype
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
size    dsm tightmarshal1 this  c  bs
size    bs marshalledsize
return size
/**
* used by nio or aio transports; note that the size is not written as part
* of this method.
*/
public void tightmarshal2 object o  dataoutput ds  booleanstream bs  throws ioexception
if  cacheenabled
runmarshallcacheevictionsweep
if  o    null
datastructure c    datastructure o
byte type   c getdatastructuretype
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
ds writebyte type
bs marshal ds
dsm tightmarshal2 this  c  ds  bs
/**
* allows you to dynamically switch the version of the openwire protocol
* being used.
*
* @param version
*/
public void setversion int version
string mfname       version
class mfclass
try
mfclass   classloading loadclass mfname  getclass   getclassloader
catch  classnotfoundexception e
throw  illegalargumentexception new illegalargumentexception     version
mfname
initcause e
try
method method   mfclass getmethod    new class  openwireformat class
datamarshallers    datastreammarshaller method invoke null  new object  this
catch  throwable e
throw  illegalargumentexception new illegalargumentexception
version
mfname
initcause e
this version   version
public object dounmarshal datainput dis  throws ioexception
byte datatype   dis readbyte
if  datatype    null_type
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     datatype
object data   dsm createobject
if  this tightencodingenabled
booleanstream bs   new booleanstream
bs unmarshal dis
dsm tightunmarshal this  data  dis  bs
else
dsm looseunmarshal this  data  dis
return data
else
return null
// public void debug(string msg) {
// string t = (thread.currentthread().getname()+" ").substring(0, 40);
// system.out.println(t+": "+msg);
// }
public int tightmarshalnestedobject1 datastructure o  booleanstream bs  throws ioexception
bs writeboolean o    null
if  o    null
return 0
if  o ismarshallaware
// marshallaware ma = (marshallaware)o;
bytesequence sequence   null
// sequence=ma.getcachedmarshalledform(this);
bs writeboolean sequence    null
if  sequence    null
return 1   sequence getlength
byte type   o getdatastructuretype
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
return 1   dsm tightmarshal1 this  o  bs
public void tightmarshalnestedobject2 datastructure o  dataoutput ds  booleanstream bs
throws ioexception
if   bs readboolean
return
byte type   o getdatastructuretype
ds writebyte type
if  o ismarshallaware      bs readboolean
// we should not be doing any caching
throw new ioexception
// marshallaware ma = (marshallaware) o;
// bytesequence sequence=ma.getcachedmarshalledform(this);
// ds.write(sequence.getdata(), sequence.getoffset(),
// sequence.getlength());
else
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
dsm tightmarshal2 this  o  ds  bs
public datastructure tightunmarshalnestedobject datainput dis  booleanstream bs  throws ioexception
if  bs readboolean
byte datatype   dis readbyte
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     datatype
datastructure data   dsm createobject
if  data ismarshallaware      bs readboolean
dis readint
dis readbyte
booleanstream bs2   new booleanstream
bs2 unmarshal dis
dsm tightunmarshal this  data  dis  bs2
// todo: extract the sequence from the dis and associate it.
// marshallaware ma = (marshallaware)data
// ma.setcachedmarshalledform(this, sequence);
else
dsm tightunmarshal this  data  dis  bs
return data
else
return null
public datastructure looseunmarshalnestedobject datainput dis  throws ioexception
if  dis readboolean
byte datatype   dis readbyte
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     datatype
datastructure data   dsm createobject
dsm looseunmarshal this  data  dis
return data
else
return null
public void loosemarshalnestedobject datastructure o  dataoutput dataout  throws ioexception
dataout writeboolean o    null
if  o    null
byte type   o getdatastructuretype
dataout writebyte type
datastreammarshaller dsm    datastreammarshaller datamarshallers
if  dsm    null
throw new ioexception     type
dsm loosemarshal this  o  dataout
public void runmarshallcacheevictionsweep
// do we need to start evicting??
while  marshallcachemap size   > marshallcache length   marshal_cache_free_space
marshallcachemap remove marshallcache
marshallcache   null
nextmarshallcacheevictionindex
if  nextmarshallcacheevictionindex >  marshallcache length
nextmarshallcacheevictionindex   0
public short getmarshallcacheindex datastructure o
return marshallcachemap get o
public short addtomarshallcache datastructure o
short i   nextmarshallcacheindex
if  nextmarshallcacheindex >  marshallcache length
nextmarshallcacheindex   0
// we can only cache that item if there is space left.
if  marshallcachemap size   < marshallcache length
marshallcache   o
short index   new short i
marshallcachemap put o  index
return index
else
// use -1 to indicate that the value was not cached due to cache
// being full.
return new short  short  1
public void setinunmarshallcache short index  datastructure o
// there was no space left in the cache, so we can't
// put this in the cache.
if  index     1
return
unmarshallcache   o
public datastructure getfromunmarshallcache short index
return unmarshallcache
public void setstacktraceenabled boolean b
stacktraceenabled   b
public boolean isstacktraceenabled
return stacktraceenabled
public boolean istcpnodelayenabled
return tcpnodelayenabled
public void settcpnodelayenabled boolean tcpnodelayenabled
this tcpnodelayenabled   tcpnodelayenabled
public boolean iscacheenabled
return cacheenabled
public void setcacheenabled boolean cacheenabled
this cacheenabled   cacheenabled
public boolean istightencodingenabled
return tightencodingenabled
public void settightencodingenabled boolean tightencodingenabled
this tightencodingenabled   tightencodingenabled
public boolean issizeprefixdisabled
return sizeprefixdisabled
public void setsizeprefixdisabled boolean prefixpacketsize
this sizeprefixdisabled   prefixpacketsize
public void setpreferedwireformatinfo wireformatinfo info
this preferedwireformatinfo   info
public wireformatinfo getpreferedwireformatinfo
return preferedwireformatinfo
public void renegotiatewireformat wireformatinfo info  throws ioexception
if  preferedwireformatinfo    null
throw new illegalstateexception
this setversion min preferedwireformatinfo getversion    info getversion
info setversion this getversion
this stacktraceenabled   info isstacktraceenabled      preferedwireformatinfo isstacktraceenabled
info setstacktraceenabled this stacktraceenabled
this tcpnodelayenabled   info istcpnodelayenabled      preferedwireformatinfo istcpnodelayenabled
info settcpnodelayenabled this tcpnodelayenabled
this cacheenabled   info iscacheenabled      preferedwireformatinfo iscacheenabled
info setcacheenabled this cacheenabled
this tightencodingenabled   info istightencodingenabled
preferedwireformatinfo istightencodingenabled
info settightencodingenabled this tightencodingenabled
this sizeprefixdisabled   info issizeprefixdisabled
preferedwireformatinfo issizeprefixdisabled
info setsizeprefixdisabled this sizeprefixdisabled
if  cacheenabled
int size   math min preferedwireformatinfo getcachesize    info getcachesize
info setcachesize size
if  size    0
size   marshal_cache_size
marshallcache   new datastructure
unmarshallcache   new datastructure
nextmarshallcacheindex   0
nextmarshallcacheevictionindex   0
marshallcachemap   new hashmap<datastructure  short>
else
marshallcache   null
unmarshallcache   null
nextmarshallcacheindex   0
nextmarshallcacheevictionindex   0
marshallcachemap   null
protected int min int version1  int version2
if  version1 < version2    version1 > 0    version2 <  0
return version1
return version2