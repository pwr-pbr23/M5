/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import java util hashset
import java util iterator
import java util list
import java util set
import java util sortedset
import java util treeset
import org apache activemq command activemqdestination
/**
* a map-like data structure allowing values to be indexed by
* {@link activemqdestination} and retrieved by destination - supporting both *
* and &gt; style of wildcard as well as composite destinations. <br>
* this class assumes that the index changes rarely but that fast lookup into
* the index is required. so this class maintains a pre-calculated index for
* destination steps. so looking up the values for "test.*" or "*.test" will be
* pretty fast. <br>
* looking up of a value could return a single value or a list of matching
* values if a wildcard or composite destination is used.
*
* @version $revision: 1.3 $
*/
public class destinationmap
protected static final string any_descendent   destinationfilter any_descendent
protected static final string any_child   destinationfilter any_child
private destinationmapnode queuerootnode   new destinationmapnode null
private destinationmapnode topicrootnode   new destinationmapnode null
/**
* looks up the value(s) matching the given destination key. for simple
* destinations this is typically a list of one single value, for wildcards
* or composite destinations this will typically be a list of matching
* values.
*
* @param key the destination to lookup
* @return a list of matching values or an empty list if there are no
*         matching values.
*/
public synchronized set get activemqdestination key
if  key iscomposite
activemqdestination destinations   key getcompositedestinations
set answer   new hashset destinations length
for  int i   0  i < destinations length  i
activemqdestination childdestination   destinations
object value   get childdestination
if  value instanceof set
answer addall  set value
else if  value    null
answer add value
return answer
return findwildcardmatches key
public synchronized void put activemqdestination key  object value
if  key iscomposite
activemqdestination destinations   key getcompositedestinations
for  int i   0  i < destinations length  i
activemqdestination childdestination   destinations
put childdestination  value
return
string paths   key getdestinationpaths
getrootnode key  add paths  0  value
/**
* removes the value from the associated destination
*/
public synchronized void remove activemqdestination key  object value
if  key iscomposite
activemqdestination destinations   key getcompositedestinations
for  int i   0  i < destinations length  i
activemqdestination childdestination   destinations
remove childdestination  value
return
string paths   key getdestinationpaths
getrootnode key  remove paths  0  value
public int gettopicrootchildcount
return topicrootnode getchildcount
public int getqueuerootchildcount
return queuerootnode getchildcount
public destinationmapnode getqueuerootnode
return queuerootnode
public destinationmapnode gettopicrootnode
return topicrootnode
// implementation methods
// -------------------------------------------------------------------------
/**
* a helper method to allow the destination map to be populated from a
* dependency injection framework such as spring
*/
protected void setentries list entries
for  iterator iter   entries iterator    iter hasnext
object element    object iter next
class type   getentryclass
if  type isinstance element
destinationmapentry entry    destinationmapentry element
put entry getdestination    entry getvalue
else
throw new illegalargumentexception     type getname         element
/**
* returns the type of the allowed entries which can be set via the
* {@link #setentries(list)} method. this allows derived classes to further
* restrict the type of allowed entries to make a type safe destination map
* for custom policies.
*/
protected class getentryclass
return destinationmapentry class
protected set findwildcardmatches activemqdestination key
string paths   key getdestinationpaths
set answer   new hashset
getrootnode key  appendmatchingvalues answer  paths  0
return answer
/**
* @param key
* @return
*/
public set removeall activemqdestination key
set rc   new hashset
if  key iscomposite
activemqdestination destinations   key getcompositedestinations
for  int i   0  i < destinations length  i
rc add removeall destinations
return rc
string paths   key getdestinationpaths
getrootnode key  removeall rc  paths  0
return rc
/**
* returns the value which matches the given destination or null if there is
* no matching value. if there are multiple values, the results are sorted
* and the last item (the biggest) is returned.
*
* @param destination the destination to find the value for
* @return the largest matching value or null if no value matches
*/
public object choosevalue activemqdestination destination
set set   get destination
if  set    null    set isempty
return null
sortedset sortedset   new treeset set
return sortedset last
/**
* returns the root node for the given destination type
*/
protected destinationmapnode getrootnode activemqdestination key
if  key isqueue
return queuerootnode
else
return topicrootnode