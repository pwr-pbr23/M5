/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport
import java io ioexception
import java net malformedurlexception
import java net uri
import java net urisyntaxexception
import java net unknownhostexception
import java util hashmap
import java util map
import java util concurrent concurrenthashmap
import java util concurrent executor
import org apache activemq util factoryfinder
import org apache activemq util ioexceptionsupport
import org apache activemq util introspectionsupport
import org apache activemq util urisupport
import org apache activemq wireformat wireformat
import org apache activemq wireformat wireformatfactory
public abstract class transportfactory
private static final factoryfinder transport_factory_finder   new factoryfinder
private static final factoryfinder wireformat_factory_finder   new factoryfinder
private static final concurrenthashmap<string  transportfactory> transport_factorys   new concurrenthashmap<string  transportfactory>
public abstract transportserver dobind string brokerid  uri location  throws ioexception
public transport doconnect uri location  executor ex  throws exception
return doconnect location
public transport docompositeconnect uri location  executor ex  throws exception
return docompositeconnect location
/**
* creates a normal transport.
*
* @param location
* @return the transport
* @throws exception
*/
public static transport connect uri location  throws exception
transportfactory tf   findtransportfactory location
return tf doconnect location
/**
* creates a normal transport.
*
* @param location
* @param ex
* @return the transport
* @throws exception
*/
public static transport connect uri location  executor ex  throws exception
transportfactory tf   findtransportfactory location
return tf doconnect location  ex
/**
* creates a slimmed down transport that is more efficient so that it can be
* used by composite transports like reliable and ha.
*
* @param location
* @return the transport
* @throws exception
*/
public static transport compositeconnect uri location  throws exception
transportfactory tf   findtransportfactory location
return tf docompositeconnect location
/**
* creates a slimmed down transport that is more efficient so that it can be
* used by composite transports like reliable and ha.
*
* @param location
* @param ex
* @return the transport
* @throws exception
*/
public static transport compositeconnect uri location  executor ex  throws exception
transportfactory tf   findtransportfactory location
return tf docompositeconnect location  ex
public static transportserver bind string brokerid  uri location  throws ioexception
transportfactory tf   findtransportfactory location
return tf dobind brokerid  location
public transport doconnect uri location  throws exception
try
map<string  string> options   new hashmap<string  string> urisupport parseparamters location
wireformat wf   createwireformat options
transport transport   createtransport location  wf
transport rc   configure transport  wf  options
if   options isempty
throw new illegalargumentexception     options
return rc
catch  urisyntaxexception e
throw ioexceptionsupport create e
public transport docompositeconnect uri location  throws exception
try
map<string  string> options   new hashmap<string  string> urisupport parseparamters location
wireformat wf   createwireformat options
transport transport   createtransport location  wf
transport rc   compositeconfigure transport  wf  options
if   options isempty
throw new illegalargumentexception     options
return rc
catch  urisyntaxexception e
throw ioexceptionsupport create e
/**
* factory method to create a new transport
*
* @throws ioexception
* @throws unknownhostexception
*/
protected transport createtransport uri location  wireformat wf  throws malformedurlexception  unknownhostexception  ioexception
throw new ioexception
/**
* @param location
* @return
* @throws ioexception
*/
private static transportfactory findtransportfactory uri location  throws ioexception
string scheme   location getscheme
if  scheme    null
throw new ioexception     location
transportfactory tf   transport_factorys get scheme
if  tf    null
// try to load if from a meta-inf property.
try
tf    transportfactory transport_factory_finder newinstance scheme
transport_factorys put scheme  tf
catch  throwable e
throw ioexceptionsupport create     scheme      e
return tf
protected wireformat createwireformat map<string  string> options  throws ioexception
wireformatfactory factory   createwireformatfactory options
wireformat format   factory createwireformat
return format
protected wireformatfactory createwireformatfactory map<string  string> options  throws ioexception
string wireformat    string options get
if  wireformat    null
wireformat   getdefaultwireformattype
try
wireformatfactory wff    wireformatfactory wireformat_factory_finder newinstance wireformat
introspectionsupport setproperties wff  options
return wff
catch  throwable e
throw ioexceptionsupport create     wireformat       e  e
protected string getdefaultwireformattype
return
/**
* fully configures and adds all need transport filters so that the
* transport can be used by the jms client.
*
* @param transport
* @param wf
* @param options
* @return
* @throws exception
*/
public transport configure transport transport  wireformat wf  map options  throws exception
transport   compositeconfigure transport  wf  options
transport   new mutextransport transport
transport   new responsecorrelator transport
return transport
/**
* fully configures and adds all need transport filters so that the
* transport can be used by the activemq message broker. the main difference
* between this and the configure() method is that the broker does not issue
* requests to the client so the responsecorrelator is not needed.
*
* @param transport
* @param format
* @param options
* @return
* @throws exception
*/
public transport serverconfigure transport transport  wireformat format  hashmap options  throws exception
transport   compositeconfigure transport  format  options
transport   new mutextransport transport
return transport
/**
* similar to configure(...) but this avoid adding in the mutextransport and
* responsecorrelator transport layers so that the resulting transport can
* more efficiently be used as part of a composite transport.
*
* @param transport
* @param format
* @param options
* @return
*/
public transport compositeconfigure transport transport  wireformat format  map options
introspectionsupport setproperties transport  options
return transport