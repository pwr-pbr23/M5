/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq tool reports plugins
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util set
import java util stringtokenizer
import org apache activemq tool reports performancestatisticsutil
public class throughputreportplugin implements reportplugin
public static final string key_sys_total_tp
public static final string key_sys_total_clients
public static final string key_sys_ave_tp
public static final string key_sys_ave_emm_tp
public static final string key_sys_ave_client_tp
public static final string key_sys_ave_client_emm_tp
public static final string key_min_client_tp
public static final string key_max_client_tp
public static final string key_min_client_total_tp
public static final string key_max_client_total_tp
public static final string key_min_client_ave_tp
public static final string key_max_client_ave_tp
public static final string key_min_client_ave_emm_tp
public static final string key_max_client_ave_emm_tp
protected map<string  list> clientthroughputs   new hashmap<string  list>
public void handlecsvdata string csvdata
stringtokenizer tokenizer   new stringtokenizer csvdata
string data
string key
string val
string clientname   null
long throughput   null
while  tokenizer hasmoretokens
data   tokenizer nexttoken
key   data substring 0  data indexof
val   data substring data indexof      1
if  key equalsignorecase
clientname   val
else if  key equalsignorecase
throughput   long valueof val
else
// ignore unknown token
addtoclienttplist clientname  throughput
public map<string  string> getsummary
// check if tp sampler wasn't used.
if  clientthroughputs size      0
return new hashmap<string  string>
long minclienttp   long max_value     tp   throughput
long maxclienttp   long min_value
long minclienttotaltp   long max_value
long maxclienttotaltp   long min_value
long systemtotaltp   0
double minclientavetp   double max_value
double maxclientavetp   double min_value
double minclientaveemmtp   double max_value     emm   excluding min max
double maxclientaveemmtp   double min_value
double systemavetp   0 0
double systemaveemmtp   0 0
string nameminclienttp
string namemaxclienttp
string nameminclienttotaltp
string namemaxclienttotaltp
string nameminclientavetp
string namemaxclientavetp
string nameminclientaveemmtp
string namemaxclientaveemmtp
set<string> clientnames   clientthroughputs keyset
string clientname
list clienttplist
long templong
double tempdouble
int clientcount   0
for  iterator<string> i   clientnames iterator    i hasnext
clientname   i next
clienttplist   clientthroughputs get clientname
clientcount
templong   performancestatisticsutil getmin clienttplist
if  templong < minclienttp
minclienttp   templong
nameminclienttp   clientname
templong   performancestatisticsutil getmax clienttplist
if  templong > maxclienttp
maxclienttp   templong
namemaxclienttp   clientname
templong   performancestatisticsutil getsum clienttplist
systemtotaltp    templong     accumulate total tp
if  templong < minclienttotaltp
minclienttotaltp   templong
nameminclienttotaltp   clientname
if  templong > maxclienttotaltp
maxclienttotaltp   templong
namemaxclienttotaltp   clientname
tempdouble   performancestatisticsutil getave clienttplist
systemavetp    tempdouble     accumulate ave throughput
if  tempdouble < minclientavetp
minclientavetp   tempdouble
nameminclientavetp   clientname
if  tempdouble > maxclientavetp
maxclientavetp   tempdouble
namemaxclientavetp   clientname
tempdouble   performancestatisticsutil getaveex clienttplist
systemaveemmtp    tempdouble     accumulate ave throughput
// excluding min/max
if  tempdouble < minclientaveemmtp
minclientaveemmtp   tempdouble
nameminclientaveemmtp   clientname
if  tempdouble > maxclientaveemmtp
maxclientaveemmtp   tempdouble
namemaxclientaveemmtp   clientname
map<string  string> summary   new hashmap<string  string>
summary put key_sys_total_tp  string valueof systemtotaltp
summary put key_sys_total_clients  string valueof clientcount
summary put key_sys_ave_tp  string valueof systemavetp
summary put key_sys_ave_emm_tp  string valueof systemaveemmtp
summary put key_sys_ave_client_tp  string valueof systemavetp   clientcount
summary put key_sys_ave_client_emm_tp  string valueof systemaveemmtp   clientcount
summary put key_min_client_tp  nameminclienttp       minclienttp
summary put key_max_client_tp  namemaxclienttp       maxclienttp
summary put key_min_client_total_tp  nameminclienttotaltp       minclienttotaltp
summary put key_max_client_total_tp  namemaxclienttotaltp       maxclienttotaltp
summary put key_min_client_ave_tp  nameminclientavetp       minclientavetp
summary put key_max_client_ave_tp  namemaxclientavetp       maxclientavetp
summary put key_min_client_ave_emm_tp  nameminclientaveemmtp       minclientaveemmtp
summary put key_max_client_ave_emm_tp  namemaxclientaveemmtp       maxclientaveemmtp
return summary
protected void addtoclienttplist string clientname  long throughput
// write to client's throughput list
if  clientname    null    throughput    null
throw new illegalargumentexception     clientname       throughput
list<long> clienttplist   clientthroughputs get clientname
if  clienttplist    null
clienttplist   new arraylist<long>
clientthroughputs put clientname  clienttplist
clienttplist add throughput