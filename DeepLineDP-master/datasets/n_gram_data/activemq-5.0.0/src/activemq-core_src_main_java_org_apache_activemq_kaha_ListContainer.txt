/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha
import java util list
import java util nosuchelementexception
/**
* represents a container of persistent objects in the store acts as a map, but
* values can be retrieved in insertion order
*
* @version $revision: 1.2 $
*/
public interface listcontainer<v> extends list<v>
/**
* the container is created or retrieved in an unloaded state. load
* populates the container will all the indexes used etc and should be
* called before any operations on the container
*/
void load
/**
* unload indexes from the container
*
*/
void unload
/**
* @return true if the indexes are loaded
*/
boolean isloaded
/**
* for homogenous containers can set a custom marshaller for loading values
* the default uses object serialization
*
* @param marshaller
*/
void setmarshaller marshaller marshaller
/**
* @return the id the mapcontainer was create with
*/
object getid
/**
* @return the number of values in the container
*/
int size
/**
* inserts the given element at the beginning of this list.
*
* @param o the element to be inserted at the beginning of this list.
*/
void addfirst v o
/**
* appends the given element to the end of this list. (identical in function
* to the <tt>add</tt> method; included only for consistency.)
*
* @param o the element to be inserted at the end of this list.
*/
void addlast v o
/**
* removes and returns the first element from this list.
*
* @return the first element from this list.
* @throws nosuchelementexception if this list is empty.
*/
v removefirst
/**
* removes and returns the last element from this list.
*
* @return the last element from this list.
* @throws nosuchelementexception if this list is empty.
*/
v removelast
/**
* remove an objecr from the list without retrieving the old value from the
* store
*
* @param position
* @return true if successful
*/
boolean doremove int position
/**
* add an object to the list but get a storeentry of its position
*
* @param object
* @return the entry in the store
*/
storeentry placelast v object
/**
* insert an object in first position int the list but get a storeentry of
* its position
*
* @param object
* @return the location in the store
*/
storeentry placefirst v object
/**
* advanced feature = must ensure the object written doesn't overwrite other
* objects in the container
*
* @param entry
* @param object
*/
void update storeentry entry  v object
/**
* retrieve an object from the store by its location
*
* @param entry
* @return the object at that entry
*/
v get storeentry entry
/**
* get the storeentry for the first item of the list
*
* @return the first storeentry or null if the list is empty
*/
storeentry getfirst
/**
* get the storeentry for the last item of the list
*
* @return the last storeentry or null if the list is empty
*/
storeentry getlast
/**
* get the next storeentry from the list
*
* @param entry
* @return the next storeentry or null
*/
storeentry getnext storeentry entry
/**
* get the previous storeentry from the list
*
* @param entry
* @return the previous store entry or null
*/
storeentry getprevious storeentry entry
/**
* remove the object at the storeentry
*
* @param entry
* @return true if successful
*/
boolean remove storeentry entry
/**
* it's possible that a storeentry could be come stale this will return an
* upto date entry for the storeentry position
*
* @param entry old entry
* @return a refreshed storeentry
*/
storeentry refresh storeentry entry