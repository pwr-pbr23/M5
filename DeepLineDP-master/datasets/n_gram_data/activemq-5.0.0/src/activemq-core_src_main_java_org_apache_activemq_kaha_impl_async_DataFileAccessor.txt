/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl async
import java io ioexception
import java io randomaccessfile
import java util map
import java util concurrent concurrenthashmap
import org apache activemq kaha impl async datafileappender writecommand
import org apache activemq kaha impl async datafileappender writekey
import org apache activemq util bytesequence
/**
* optimized store reader and updater. single threaded and synchronous. use in
* conjunction with the datafileaccessorpool of concurrent use.
*
* @version $revision: 1.1.1.1 $
*/
final class datafileaccessor
private final datafile datafile
private final map<writekey  writecommand> inflightwrites
private final randomaccessfile file
private boolean disposed
/**
* construct a store reader
*
* @param fileid
* @throws ioexception
*/
public datafileaccessor asyncdatamanager datamanager  datafile datafile  throws ioexception
this datafile   datafile
this inflightwrites   datamanager getinflightwrites
this file   datafile openrandomaccessfile false
public datafile getdatafile
return datafile
public void dispose
if  disposed
return
disposed   true
try
datafile closerandomaccessfile file
catch  ioexception e
e printstacktrace
public bytesequence readrecord location location  throws ioexception
if   location isvalid
throw new ioexception     location
writecommand asyncwrite    writecommand inflightwrites get new writekey location
if  asyncwrite    null
return asyncwrite data
try
if  location getsize      location not_set
file seek location getoffset
location setsize file readint
file seek location getoffset     asyncdatamanager item_head_space
else
file seek location getoffset     asyncdatamanager item_head_space
byte data   new byte
file readfully data
return new bytesequence data  0  data length
catch  runtimeexception e
throw new ioexception     location       e
public void readlocationdetails location location  throws ioexception
writecommand asyncwrite    writecommand inflightwrites get new writekey location
if  asyncwrite    null
location setsize asyncwrite location getsize
location settype asyncwrite location gettype
else
file seek location getoffset
location setsize file readint
location settype file readbyte
public boolean readlocationdetailsandvalidate location location
try
writecommand asyncwrite    writecommand inflightwrites get new writekey location
if  asyncwrite    null
location setsize asyncwrite location getsize
location settype asyncwrite location gettype
else
file seek location getoffset
location setsize file readint
location settype file readbyte
byte data   new byte
file seek location getoffset     asyncdatamanager item_head_offset_to_sor
file readfully data
if  data    asyncdatamanager item_head_sor
data    asyncdatamanager item_head_sor
data    asyncdatamanager item_head_sor
return false
file seek location getoffset     location getsize     asyncdatamanager item_foot_space
file readfully data
if  data    asyncdatamanager item_head_eor
data    asyncdatamanager item_head_eor
data    asyncdatamanager item_head_eor
return false
catch  ioexception e
return false
return true
public void updaterecord location location  bytesequence data  boolean sync  throws ioexception
file seek location getoffset     asyncdatamanager item_head_space
int size   math min data getlength    location getsize
file write data getdata    data getoffset    size
if  sync
file getfd   sync