/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transaction
import java io ioexception
import java util arraylist
import java util iterator
import javax transaction xa xaexception
import org apache activemq command transactionid
/**
* keeps track of all the actions the need to be done when a transaction does a
* commit or rollback.
*
* @version $revision: 1.5 $
*/
public abstract class transaction
public static final byte start_state   0     can go to  1 2 3
public static final byte in_use_state   1     can go to  2 3
public static final byte prepared_state   2     can go to  3
public static final byte finished_state   3
private arraylist<synchronization> synchronizations   new arraylist<synchronization>
private byte state   start_state
public byte getstate
return state
public void setstate byte state
this state   state
public void addsynchronization synchronization r
synchronizations add r
if  state    start_state
state   in_use_state
public void removesynchronization synchronization r
synchronizations remove r
public void preprepare   throws exception
// is it ok to call prepare now given the state of the
// transaction?
switch  state
case start_state
case in_use_state
break
default
xaexception xae   new xaexception
xae errorcode   xaexception xaer_proto
throw xae
// // run the prepreparetasks
// for (iterator iter = prepreparetasks.iterator(); iter.hasnext();) {
// callback r = (callback) iter.next();
// r.execute();
// }
protected void fireaftercommit   throws exception
for  iterator<synchronization> iter   synchronizations iterator    iter hasnext
synchronization s   iter next
s aftercommit
public void fireafterrollback   throws exception
for  iterator<synchronization> iter   synchronizations iterator    iter hasnext
synchronization s   iter next
s afterrollback
public string tostring
return super tostring         synchronizations
public abstract void commit boolean onephase  throws xaexception  ioexception
public abstract void rollback   throws xaexception  ioexception
public abstract int prepare   throws xaexception  ioexception
public abstract transactionid gettransactionid
public boolean isprepared
return getstate      prepared_state