/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import javax jms invalidselectorexception
/**
* @version $revision: 1.5 $
*/
public interface subscriptionviewmbean
/**
* @return the clientid of the connection the subscription is on
*/
string getclientid
/**
* @return the id of the connection the subscription is on
*/
string getconnectionid
/**
* @return the id of the session the subscription is on
*/
long getsessionid
/**
* @return the id of the subscription
*/
long getsubcriptionid
/**
* @return the destination name
*/
string getdestinationname
/**
* @return the jms selector on the current subscription
*/
string getselector
/**
* attempts to change the current active selector on the subscription. this
* operation is not supported for persistent topics.
*/
void setselector string selector  throws invalidselectorexception  unsupportedoperationexception
/**
* @return true if the destination is a queue
*/
boolean isdestinationqueue
/**
* @return true of the destination is a topic
*/
boolean isdestinationtopic
/**
* @return true if the destination is temporary
*/
boolean isdestinationtemporary
/**
* @return true if the subscriber is active
*/
boolean isactive
/**
* @return number of messages pending delivery
*/
int getpendingqueuesize
/**
* @return number of messages dispatched
*/
int getdispatchedqueuesize
/**
* @return number of messages that matched the subscription
*/
long getdispachedcounter
/**
* @return number of messages that matched the subscription
*/
long getenqueuecounter
/**
* @return number of messages queued by the client
*/
long getdequeuecounter
/**
* @return the prefetch that has been configured for this subscriber
*/
int getprefetchsize
/**
* @return whether or not the subscriber is retroactive or not
*/
boolean isretroactive
/**
* @return whether or not the subscriber is an exclusive consumer
*/
boolean isexclusive
/**
* @return whether or not the subscriber is durable (persistent)
*/
boolean isdurable
/**
* @return whether or not the subscriber ignores local messages
*/
boolean isnolocal
/**
* @return the maximum number of pending messages allowed in addition to the
*         prefetch size. if enabled to a non-zero value then this will
*         perform eviction of messages for slow consumers on non-durable
*         topics.
*/
int getmaximumpendingmessagelimit
/**
* @return the consumer priority
*/
byte getpriority
/**
* @return the name of the consumer which is only used for durable
*         consumers.
*/
string getsubcriptionname