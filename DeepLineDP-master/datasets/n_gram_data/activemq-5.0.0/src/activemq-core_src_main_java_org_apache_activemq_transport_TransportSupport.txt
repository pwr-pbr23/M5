/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport
import java io ioexception
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* a useful base class for transport implementations.
*
* @version $revision: 1.1 $
*/
public abstract class transportsupport extends servicesupport implements transport
private static final log log   logfactory getlog transportsupport class
transportlistener transportlistener
/**
* returns the current transport listener
*/
public transportlistener gettransportlistener
return transportlistener
/**
* registers an inbound command listener
*
* @param commandlistener
*/
public void settransportlistener transportlistener commandlistener
this transportlistener   commandlistener
/**
* narrow acceptance
*
* @param target
* @return 'this' if assignable
*/
public <t> t narrow class<t> target
boolean assignablefrom   target isassignablefrom getclass
if  assignablefrom
return target cast this
return null
public futureresponse asyncrequest object command  responsecallback responsecallback  throws ioexception
throw new assertionerror
public object request object command  throws ioexception
throw new assertionerror
public object request object command  int timeout  throws ioexception
throw new assertionerror
/**
* process the inbound command
*/
public void doconsume object command
if  command    null
if  transportlistener    null
transportlistener oncommand command
else
log error     command
/**
* passes any io exceptions into the transport listener
*/
public void onexception ioexception e
if  transportlistener    null
transportlistener onexception e
protected void checkstarted   throws ioexception
if   isstarted
throw new ioexception
public boolean isfaulttolerant
return false