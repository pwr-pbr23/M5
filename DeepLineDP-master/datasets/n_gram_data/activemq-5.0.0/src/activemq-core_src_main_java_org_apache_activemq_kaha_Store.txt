/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha
import java io ioexception
import java util set
/**
* a store is holds persistent containers
*
* @version $revision: 1.2 $
*/
public interface store
/**
* defauly container name
*/
string default_container_name
/**
* byte marshaller
*/
marshaller bytes_marshaller   new bytesmarshaller
/**
* object marshaller
*/
marshaller object_marshaller   new objectmarshaller
/**
* string marshaller
*/
marshaller string_marshaller   new stringmarshaller
/**
* command marshaller
*/
marshaller command_marshaller   new commandmarshaller
/**
* messageid marshaller
*/
marshaller messageid_marshaller   new messageidmarshaller
/**
* close the store
*
* @throws ioexception
*/
void close   throws ioexception
/**
* force all writes to disk
*
* @throws ioexception
*/
void force   throws ioexception
/**
* empty all the contents of the store
*
* @throws ioexception
*/
void clear   throws ioexception
/**
* delete the store
*
* @return true if the delete was successful
* @throws ioexception
*/
boolean delete   throws ioexception
/**
* checks if a mapcontainer exists in the default container
*
* @param id
* @return new mapcontainer
* @throws ioexception
*/
boolean doesmapcontainerexist object id  throws ioexception
/**
* checks if a mapcontainer exists in the named container
*
* @param id
* @param containername
* @return new mapcontainer
* @throws ioexception
*/
boolean doesmapcontainerexist object id  string containername  throws ioexception
/**
* get a mapcontainer with the given id - the mapcontainer is created if
* needed
*
* @param id
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
mapcontainer getmapcontainer object id  throws ioexception
/**
* get a mapcontainer with the given id - the mapcontainer is created if
* needed
*
* @param id
* @param containername
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
mapcontainer getmapcontainer object id  string containername  throws ioexception
/**
* get a mapcontainer with the given id - the mapcontainer is created if
* needed
*
* @param id
* @param containername
* @param persistentindex
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
mapcontainer getmapcontainer object id  string containername  boolean persistentindex  throws ioexception
/**
* delete a container from the default container
*
* @param id
* @throws ioexception
*/
void deletemapcontainer object id  throws ioexception
/**
* delete a mapcontainer from the name container
*
* @param id
* @param containername
* @throws ioexception
*/
void deletemapcontainer object id  string containername  throws ioexception
/**
* delete map container
*
* @param id
* @throws ioexception
*/
void deletemapcontainer containerid id  throws ioexception
/**
* get a set of call mapcontainer ids
*
* @return the set of ids
* @throws ioexception
*/
set<containerid> getmapcontainerids   throws ioexception
/**
* checks if a listcontainer exists in the default container
*
* @param id
* @return new mapcontainer
* @throws ioexception
*/
boolean doeslistcontainerexist object id  throws ioexception
/**
* checks if a listcontainer exists in the named container
*
* @param id
* @param containername
* @return new mapcontainer
* @throws ioexception
*/
boolean doeslistcontainerexist object id  string containername  throws ioexception
/**
* get a listcontainer with the given id and creates it if it doesn't exist
*
* @param id
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
listcontainer getlistcontainer object id  throws ioexception
/**
* get a listcontainer with the given id and creates it if it doesn't exist
*
* @param id
* @param containername
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
listcontainer getlistcontainer object id  string containername  throws ioexception
/**
* get a listcontainer with the given id and creates it if it doesn't exist
*
* @param id
* @param containername
* @param persistentindex
* @return container for the associated id or null if it doesn't exist
* @throws ioexception
*/
listcontainer getlistcontainer object id  string containername  boolean persistentindex  throws ioexception
/**
* delete a listcontainer from the default container
*
* @param id
* @throws ioexception
*/
void deletelistcontainer object id  throws ioexception
/**
* delete a listcontainer from the named container
*
* @param id
* @param containername
* @throws ioexception
*/
void deletelistcontainer object id  string containername  throws ioexception
/**
* delete a list container
*
* @param id
* @throws ioexception
*/
void deletelistcontainer containerid id  throws ioexception
/**
* get a set of call listcontainer ids
*
* @return the set of ids
* @throws ioexception
*/
set<containerid> getlistcontainerids   throws ioexception
/**
* @return the maxdatafilelength
*/
long getmaxdatafilelength
/**
* @param maxdatafilelength the maxdatafilelength to set
*/
void setmaxdatafilelength long maxdatafilelength
/**
* @return true if the store has been initialized
*/
boolean isinitialized
/**
* @return the amount of disk space the store is occupying
*/
long size
public boolean ispersistentindex
public void setpersistentindex boolean persistentindex