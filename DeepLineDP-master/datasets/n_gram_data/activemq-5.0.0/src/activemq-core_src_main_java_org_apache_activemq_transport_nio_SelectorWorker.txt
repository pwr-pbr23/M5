/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport nio
import java io ioexception
import java nio channels selectionkey
import java nio channels selector
import java util iterator
import java util set
import java util concurrent atomic atomicinteger
public class selectorworker implements runnable
private static final atomicinteger next_id   new atomicinteger
final selectormanager manager
final selector selector
final int id   next_id getandincrement
final atomicinteger usecounter   new atomicinteger
private final int maxchannelsperworker
public selectorworker selectormanager manager  throws ioexception
this manager   manager
selector   selector open
maxchannelsperworker   manager getmaxchannelsperworker
void incrementusecounter
int use   usecounter getandincrement
if  use    0
manager getselectorexecutor   execute this
else if  use   1    maxchannelsperworker
manager onworkerfullevent this
void decrementusecounter
int use   usecounter getanddecrement
if  use    1
manager onworkeremptyevent this
else if  use    maxchannelsperworker
manager onworkernotfullevent this
boolean isrunning
return usecounter get      0
public void run
string origname   thread currentthread   getname
try
thread currentthread   setname     id
while  isrunning
int count   selector select 10
if  count    0
continue
if   isrunning
return
// get a java.util.set containing the selectionkey objects
// for all channels that are ready for i/o.
set keys   selector selectedkeys
for  iterator i   keys iterator    i hasnext
final selectionkey key    selectionkey i next
i remove
final selectorselection s    selectorselection key attachment
try
s disable
// kick off another thread to find newly selected keys
// while we process the
// currently selected keys
manager getchannelexecutor   execute new runnable
public void run
try
s onselect
s enable
catch  throwable e
s onerror e
catch  throwable e
s onerror e
catch  ioexception e
// don't accept any more slections
manager onworkeremptyevent this
// notify all the selections that the error occurred.
set keys   selector keys
for  iterator i   keys iterator    i hasnext
selectionkey key    selectionkey i next
selectorselection s    selectorselection key attachment
s onerror e
finally
thread currentthread   setname origname