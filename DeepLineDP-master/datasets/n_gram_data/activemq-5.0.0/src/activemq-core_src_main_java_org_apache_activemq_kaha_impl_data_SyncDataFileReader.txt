/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl data
import java io ioexception
import java io randomaccessfile
import org apache activemq kaha marshaller
import org apache activemq kaha storelocation
import org apache activemq util databytearrayinputstream
/**
* optimized store reader
*
* @version $revision: 1.1.1.1 $
*/
public final class syncdatafilereader
private datamanagerimpl datamanager
private databytearrayinputstream datain
/**
* construct a store reader
*
* @param fileid
*/
syncdatafilereader datamanagerimpl filemanager
this datamanager   filemanager
this datain   new databytearrayinputstream
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.impl.data.datafilereader#readdataitemsize(org.apache.activemq.kaha.impl.data.dataitem)
*/
public synchronized byte readdataitemsize dataitem item  throws ioexception
randomaccessfile file   datamanager getdatafile item  getrandomaccessfile
file seek item getoffset        jump to the size field
byte rc   file readbyte
item setsize file readint
return rc
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.impl.data.datafilereader#readitem(org.apache.activemq.kaha.marshaller,
*      org.apache.activemq.kaha.storelocation)
*/
public synchronized object readitem marshaller marshaller  storelocation item  throws ioexception
randomaccessfile file   datamanager getdatafile item  getrandomaccessfile
// todo: we could reuse the buffer in datain if it's big enough to avoid
// allocating byte[] arrays on every readitem.
byte data   new byte
file seek item getoffset     datamanagerimpl item_head_size
file readfully data
datain restart data
return marshaller readpayload datain