/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java util hashtable
import javax jms connection
import javax jms connectionfactory
import javax jms jmsexception
import javax naming context
import javax naming initialcontext
import javax naming namingexception
import org apache log4j helpers loglog
/**
* a jms 1.1 log4j appender which uses jndi to locate a jms connectionfactory to
* use for logging events.
*
* @version $revision$
*/
public class jndijmslogappender extends jmslogappendersupport
private string jndiname
private string username
private string password
private string initialcontextfactoryname
private string providerurl
private string urlpkgprefixes
private string securityprincipalname
private string securitycredentials
public jndijmslogappender
public string getjndiname
return jndiname
public void setjndiname string jndiname
this jndiname   jndiname
public string getusername
return username
public void setusername string username
this username   username
public string getpassword
return password
public void setpassword string password
this password   password
// to customize the jndi context
// -------------------------------------------------------------------------
public string getinitialcontextfactoryname
return initialcontextfactoryname
public void setinitialcontextfactoryname string initialcontextfactoryname
this initialcontextfactoryname   initialcontextfactoryname
public string getproviderurl
return providerurl
public void setproviderurl string providerurl
this providerurl   providerurl
public string geturlpkgprefixes
return urlpkgprefixes
public void seturlpkgprefixes string urlpkgprefixes
this urlpkgprefixes   urlpkgprefixes
public string getsecurityprincipalname
return securityprincipalname
public void setsecurityprincipalname string securityprincipalname
this securityprincipalname   securityprincipalname
public string getsecuritycredentials
return securitycredentials
public void setsecuritycredentials string securitycredentials
this securitycredentials   securitycredentials
// implementation methods
// -------------------------------------------------------------------------
protected connection createconnection   throws jmsexception  namingexception
initialcontext context   createinitialcontext
loglog debug     jndiname
connectionfactory factory    connectionfactory context lookup jndiname
if  factory    null
throw new jmsexception     jndiname
if  username    null
return factory createconnection username  password
else
return factory createconnection
protected initialcontext createinitialcontext   throws namingexception
if  initialcontextfactoryname    null
return new initialcontext
else
hashtable<string  string> env   new hashtable<string  string>
env put context initial_context_factory  initialcontextfactoryname
if  providerurl    null
env put context provider_url  providerurl
else
loglog warn
if  urlpkgprefixes    null
env put context url_pkg_prefixes  urlpkgprefixes
if  securityprincipalname    null
env put context security_principal  securityprincipalname
if  securitycredentials    null
env put context security_credentials  securitycredentials
else
loglog warn
loglog debug     env
return new initialcontext env