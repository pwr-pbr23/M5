/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport http
import java io datainputstream
import java io ioexception
import java io interruptedioexception
import java net uri
import org apache activemq transport futureresponse
import org apache activemq transport util textwireformat
import org apache activemq util bytearrayinputstream
import org apache activemq util ioexceptionsupport
import org apache activemq util idgenerator
import org apache activemq util servicestopper
import org apache commons httpclient httpclient
import org apache commons httpclient httpmethod
import org apache commons httpclient httpstatus
import org apache commons httpclient methods getmethod
import org apache commons httpclient methods headmethod
import org apache commons httpclient methods postmethod
import org apache commons logging log
import org apache commons logging logfactory
/**
* a http {@link org.apache.activemq.transport.transportchannel} which uses the
* <a href="http://jakarta.apache.org/commons/httpclient/">commons-httpclient</a>
* library
*
* @version $revision$
*/
public class httpclienttransport extends httptransportsupport
public static final int max_client_timeout   30000
private static final log log   logfactory getlog httpclienttransport class
private static final idgenerator client_id_generator   new idgenerator
private httpclient sendhttpclient
private httpclient receivehttpclient
private final string clientid   client_id_generator generateid
private boolean trace
public httpclienttransport textwireformat wireformat  uri remoteurl
super wireformat  remoteurl
public futureresponse asyncrequest object command  throws ioexception
return null
public void oneway object command  throws ioexception
if  isstopped
throw new ioexception
postmethod httpmethod   new postmethod getremoteurl   tostring
configuremethod httpmethod
string data   gettextwireformat   marshaltext command
byte bytes   data getbytes
httpmethod setrequestbody new bytearrayinputstream bytes
try
httpclient client   getsendhttpclient
client settimeout max_client_timeout
int answer   client executemethod httpmethod
if  answer    httpstatus sc_ok
throw new ioexception     command       answer
// checksession(httpmethod);
catch  ioexception e
throw ioexceptionsupport create     command       e  e
finally
httpmethod getresponsebody
httpmethod releaseconnection
public object request object command  throws ioexception
return null
public void run
log trace     this
httpclient httpclient   getreceivehttpclient
uri remoteurl   getremoteurl
while   isstopped       isstopping
getmethod httpmethod   new getmethod remoteurl tostring
configuremethod httpmethod
try
int answer   httpclient executemethod httpmethod
if  answer    httpstatus sc_ok
if  answer    httpstatus sc_request_timeout
log debug
try
thread sleep 1000
catch  interruptedexception e
onexception new interruptedioexception
break
else
onexception new ioexception     remoteurl       answer
break
else
// checksession(httpmethod);
datainputstream stream   new datainputstream httpmethod getresponsebodyasstream
object command    object gettextwireformat   unmarshal stream
if  command    null
log warn     remoteurl
else
doconsume command
catch  ioexception e
onexception ioexceptionsupport create     remoteurl       e getmessage    e
break
finally
httpmethod getresponsebody
httpmethod releaseconnection
// properties
// -------------------------------------------------------------------------
public httpclient getsendhttpclient
if  sendhttpclient    null
sendhttpclient   createhttpclient
return sendhttpclient
public void setsendhttpclient httpclient sendhttpclient
this sendhttpclient   sendhttpclient
public httpclient getreceivehttpclient
if  receivehttpclient    null
receivehttpclient   createhttpclient
return receivehttpclient
public void setreceivehttpclient httpclient receivehttpclient
this receivehttpclient   receivehttpclient
// implementation methods
// -------------------------------------------------------------------------
protected void dostart   throws exception
log trace     this
httpclient httpclient   getreceivehttpclient
uri remoteurl   getremoteurl
headmethod httpmethod   new headmethod remoteurl tostring
configuremethod httpmethod
int answer   httpclient executemethod httpmethod
if  answer    httpstatus sc_ok
throw new ioexception     remoteurl       answer
super dostart
protected void dostop servicestopper stopper  throws exception
protected httpclient createhttpclient
httpclient client   new httpclient
if  getproxyhost      null
client gethostconfiguration   setproxy getproxyhost    getproxyport
return client
protected void configuremethod httpmethod method
method setrequestheader    clientid
public boolean istrace
return trace
public void settrace boolean trace
this trace   trace
// protected void checksession(httpmethod client) {
// header header = client.getrequestheader("set-cookie");
// if (header != null) {
// string set_cookie = header.getvalue();
//
// if (set_cookie != null && set_cookie.startswith("jsessionid=")) {
// string[] bits = set_cookie.split("[=;]");
// sessionid = bits[1];
// }
// }
// }