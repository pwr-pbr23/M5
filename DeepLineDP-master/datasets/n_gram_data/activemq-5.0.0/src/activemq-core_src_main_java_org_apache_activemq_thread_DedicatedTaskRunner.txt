/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq thread
/**
* @version $revision: 1.1 $
*/
class dedicatedtaskrunner implements taskrunner
private final task task
private final thread thread
private final object mutex   new object
private boolean threadterminated
private boolean pending
private boolean shutdown
public dedicatedtaskrunner task task  string name  int priority  boolean daemon
this task   task
thread   new thread name
public void run
runtask
thread setdaemon daemon
thread setname name
thread setpriority priority
thread start
/**
*/
public void wakeup   throws interruptedexception
synchronized  mutex
if  shutdown
return
pending   true
mutex notifyall
/**
* shut down the task
*
* @param timeout
* @throws interruptedexception
*/
public void shutdown long timeout  throws interruptedexception
synchronized  mutex
shutdown   true
pending   true
mutex notifyall
// wait till the thread stops ( no need to wait if shutdown
// is called from thread that is shutting down)
if  thread currentthread      thread     threadterminated
mutex wait timeout
/**
* shut down the task
*
* @throws interruptedexception
*/
public void shutdown   throws interruptedexception
shutdown 0
final void runtask
try
while  true
synchronized  mutex
pending   false
if  shutdown
return
if   task iterate
// wait to be notified.
synchronized  mutex
if  shutdown
return
while   pending
mutex wait
catch  interruptedexception e
// someone really wants this thread to die off.
thread currentthread   interrupt
finally
// make sure we notify any waiting threads that thread
// has terminated.
synchronized  mutex
threadterminated   true
mutex notifyall