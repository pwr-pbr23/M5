/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq thread
/**
* a valve is a synchronization object used enable or disable the "flow" of
* concurrent processing.
*
* @version $revision: 1.2 $
*/
public final class valve
private final object mutex   new object
private boolean on
private int turningoff
private int usage
public valve boolean on
this on   on
/**
* turns the valve on. this method blocks until the valve is off.
*
* @throws interruptedexception
*/
public void turnon   throws interruptedexception
synchronized  mutex
while  on
mutex wait
on   true
mutex notifyall
public boolean ison
synchronized  mutex
return on
/**
* turns the valve off. this method blocks until the valve is on and the
* valve is not in use.
*
* @throws interruptedexception
*/
public void turnoff   throws interruptedexception
synchronized  mutex
try
turningoff
while  usage > 0     on
mutex wait
on   false
mutex notifyall
finally
turningoff
/**
* increments the use counter of the valve. this method blocks if the valve
* is off, or is being turned off.
*
* @throws interruptedexception
*/
public void increment   throws interruptedexception
synchronized  mutex
// do we have to wait for the value to be on?
while  turningoff > 0     on
mutex wait
usage
/**
* decrements the use counter of the valve.
*/
public void decrement
synchronized  mutex
usage
if  turningoff > 0    usage < 1
mutex notifyall