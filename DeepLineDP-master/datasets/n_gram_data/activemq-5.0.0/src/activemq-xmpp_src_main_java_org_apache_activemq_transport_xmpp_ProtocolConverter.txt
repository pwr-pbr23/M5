/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport xmpp
import java io ioexception
import java io printwriter
import java io stringwriter
import java util hashmap
import java util list
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomicboolean
import javax jms jmsexception
import org w3c dom element
import ietf params xml ns xmpp_sasl auth
import ietf params xml ns xmpp_sasl challenge
import ietf params xml ns xmpp_sasl success
import ietf params xml ns xmpp_tls proceed
import ietf params xml ns xmpp_tls starttls
import jabber client body
import jabber client error
import jabber client iq
import jabber client message
import jabber client presence
import jabber iq auth query
import org apache activemq advisory advisorysupport
import org apache activemq command activemqdestination
import org apache activemq command activemqmessage
import org apache activemq command activemqtempqueue
import org apache activemq command activemqtextmessage
import org apache activemq command activemqtopic
import org apache activemq command command
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq command destinationinfo
import org apache activemq command exceptionresponse
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command messageid
import org apache activemq command producerid
import org apache activemq command producerinfo
import org apache activemq command response
import org apache activemq command sessionid
import org apache activemq command sessioninfo
import org apache activemq transport xmpp command handler
import org apache activemq transport xmpp command handlerregistry
import org apache activemq util idgenerator
import org apache activemq util intsequencegenerator
import org apache activemq util longsequencegenerator
import org apache commons logging log
import org apache commons logging logfactory
import org jabber protocol disco_info feature
import org jabber protocol disco_info identity
import org jabber protocol disco_items item
import org jabber protocol muc_user x
/**
* todo lots of this code could be shared with stomp
*/
public class protocolconverter
private static final transient log log   logfactory getlog protocolconverter class
private static final idgenerator connection_id_generator   new idgenerator
private static final idgenerator client_id_generator   new idgenerator
private handlerregistry registry   new handlerregistry
private xmpptransport transport
private final connectionid connectionid   new connectionid connection_id_generator generateid
private final sessionid sessionid   new sessionid connectionid   1
private final producerid producerid   new producerid sessionid  1
private final connectioninfo connectioninfo   new connectioninfo connectionid
private final sessioninfo sessioninfo   new sessioninfo sessionid
private final producerinfo producerinfo   new producerinfo producerid
private final longsequencegenerator consumeridgenerator   new longsequencegenerator
private final longsequencegenerator messageidgenerator   new longsequencegenerator
private final intsequencegenerator tempdestinationidgenerator   new intsequencegenerator
private final map<integer  handler<response>> resposehandlers   new concurrenthashmap<integer  handler<response>>
private final map<consumerid  handler<messagedispatch>> subscriptionsbyconsumerid   new concurrenthashmap<consumerid  handler<messagedispatch>>
private final map<string  consumerinfo> jidtoconsumermap   new hashmap<string  consumerinfo>
private final map<string  consumerinfo> jidtoinboxconsumermap   new hashmap<string  consumerinfo>
private final object commnadidmutex   new object
private int lastcommandid
private final atomicboolean connected   new atomicboolean false
private activemqtempqueue inboxdestination
public protocolconverter xmpptransport transport
this transport   transport
initialiseregistry
protected int generatecommandid
synchronized  commnadidmutex
return lastcommandid
protected void initialiseregistry
// this kinda wiring muck is soooo much cleaner in c# :(
registry registerhandler message class  new handler<message>
public void handle message event  throws exception
onmessage event
registry registerhandler auth class  new handler<auth>
public void handle auth event  throws exception
onauth event
registry registerhandler starttls class  new handler<starttls>
public void handle starttls event  throws exception
onstarttls event
registry registerhandler iq class  new handler<iq>
public void handle iq event  throws exception
oniq event
registry registerhandler presence class  new handler<presence>
public void handle presence event  throws exception
onpresence event
public void onxmppcommand object command  throws exception
// todo we could do some nice code generation to boost performance
// by autogenerating the bytecode to statically lookup a handler from a
// registry maybe?
handler handler   registry gethandler command getclass
if  handler    null
unknowncommand command
else
handler handle command
public void onactivemqcommad command command  throws exception
if  command isresponse
response response    response command
handler<response> handler   resposehandlers remove new integer response getcorrelationid
if  handler    null
handler handle response
else
log warn     response
else if  command ismessagedispatch
messagedispatch md    messagedispatch command
handler<messagedispatch> handler   subscriptionsbyconsumerid get md getconsumerid
if  handler    null
handler handle md
else
log warn     md
protected void unknowncommand object command  throws exception
log warn     command       command getclass   getname
protected void oniq final iq iq  throws exception
object any   iq getany
if  any instanceof query
onauthquery any  iq
else if  any instanceof jabber iq _private query
jabber iq _private query query    jabber iq _private query any
if  log isdebugenabled
log debug     debugstring iq        query getany
iq result   createresult iq
jabber iq _private query answer   new jabber iq _private query
result setany answer
transport marshall result
else if  any instanceof jabber iq roster query
jabber iq roster query query    jabber iq roster query any
if  log isdebugenabled
log debug     debugstring iq        query getitem
iq result   createresult iq
jabber iq roster query roster   new jabber iq roster query
result setany roster
transport marshall result
else if  any instanceof org jabber protocol disco_items query
ondiscoitems iq   org jabber protocol disco_items query any
else if  any instanceof org jabber protocol disco_info query
ondiscoinfo iq   org jabber protocol disco_info query any
else
if  any instanceof element
element element    element any
log warn     debugstring iq        element getnamespaceuri         element getlocalname
else
log warn     debugstring iq        any       any getclass   getname
iq result   createresult iq
jabber client error error   new error
error setunexpectedrequest     any tostring
result setany error
transport marshall result
protected void onauthquery object any  final iq iq  throws ioexception
query query    query any
if  log isdebugenabled
log debug     debugstring iq        query getresource         query getusername
if  query getpassword      null
iq result   createresult iq
query required   new query
required setpassword
required setusername
result setany required
transport marshall result
return
// connectioninfo.setclientid(query.getresource());
connectioninfo setusername query getusername
connectioninfo setpassword query getpassword
// todo support digest?
if  connectioninfo getclientid      null
connectioninfo setclientid client_id_generator generateid
sendtoactivemq connectioninfo  new handler<response>
public void handle response response  throws exception
iq result   createresult iq
if  response instanceof exceptionresponse
exceptionresponse exceptionresponse    exceptionresponse response
throwable exception   exceptionresponse getexception
log warn     exception  exception
error error   new error
result seterror error
stringwriter buffer   new stringwriter
exception printstacktrace new printwriter buffer
error setinternalservererror buffer tostring
else
connected set true
transport marshall result
sendtoactivemq sessioninfo  createerrorhandler
sendtoactivemq producerinfo  createerrorhandler
protected string debugstring iq iq
return     iq getto         iq gettype         iq getfrom         iq getid
protected void ondiscoitems iq iq  org jabber protocol disco_items query query  throws ioexception
string to   iq getto
if  log isdebugenabled
log debug     debugstring iq        query getnode         query getitem
iq result   createresult iq
org jabber protocol disco_items query answer   new org jabber protocol disco_items query
if  to    null    to length      0
answer getitem   add createitem
answer getitem   add createitem
else
// lets not add anything?
result setany answer
transport marshall result
protected void ondiscoinfo iq iq  org jabber protocol disco_info query query  throws ioexception
string to   iq getto
// todo lets create the topic 'to'
if  log isdebugenabled
log debug     debugstring iq        query getnode         query getfeature         query getidentity
iq result   createresult iq
org jabber protocol disco_info query answer   new org jabber protocol disco_info query
answer setnode to
answer getfeature   add createfeature
answer getfeature   add createfeature
if  to    null    to length      0
answer getidentity   add createidentity
answer getidentity   add createidentity
/*
* answer.getidentity().add(createidentity("hierarchy", "queues",
* "branch")); answer.getidentity().add(createidentity("hierarchy",
* "topics", "branch"));
*/
else
// for queues/topics
if  to equals
answer getidentity   add createidentity
answer getidentity   add createidentity
else if  to equals
answer getidentity   add createidentity
answer getidentity   add createidentity
answer getidentity   add createidentity
else
// lets reply to an actual room
answer getidentity   add createidentity    to
answer getfeature   add createfeature
answer getfeature   add createfeature
result setany answer
transport marshall result
protected void onpresence presence presence  throws ioexception  jmsexception
if  log isdebugenabled
log debug     presence getfrom         presence getid         presence getto         presence gettype
presence getshoworstatusorpriority         presence getany
org jabber protocol muc_user item item   new org jabber protocol muc_user item
item setaffiliation
item setrole
item setnick
sendpresence presence  item
/*
* item = new org.jabber.protocol.muc_user.item();
* item.setaffiliation("admin"); item.setrole("moderator");
* sendpresence(presence, item);
*/
// lets create a subscription
final string to   presence getto
activemqdestination destination   createactivemqdestination to
if  destination    null
log debug
return
subscribe to  destination  jidtoconsumermap
// lets subscribe to a personal inbox for replies
// check if destination info is of temporary type.
if  inboxdestination    null
inboxdestination   new activemqtempqueue connectioninfo getconnectionid    tempdestinationidgenerator getnextsequenceid
destinationinfo info   new destinationinfo
info setconnectionid connectioninfo getconnectionid
info setoperationtype destinationinfo add_operation_type
info setdestination inboxdestination
sendtoactivemq info  null
subscribe to  inboxdestination  jidtoinboxconsumermap
protected void subscribe final string to  activemqdestination destination  map<string  consumerinfo> consumermap
boolean createconsumer   false
consumerinfo consumerinfo   null
synchronized  consumermap
consumerinfo   consumermap get to
if  consumerinfo    null
consumerinfo   new consumerinfo
consumermap put to  consumerinfo
consumerid consumerid   new consumerid sessionid  consumeridgenerator getnextsequenceid
consumerinfo setconsumerid consumerid
consumerinfo setprefetchsize 10
consumerinfo setnolocal true
createconsumer   true
if   createconsumer
return
consumerinfo setdestination destination
subscriptionsbyconsumerid put consumerinfo getconsumerid    new handler<messagedispatch>
public void handle messagedispatch messagedispatch  throws exception
// processing the inbound message
if  log isdebugenabled
log debug     messagedispatch getmessage
// lets send back an ack
messageack ack   new messageack messagedispatch  messageack standard_ack_type  1
sendtoactivemq ack  createerrorhandler     messagedispatch getmessage   getmessageid
message message   createxmppmessage to  messagedispatch
if  message    null
if  log isdebugenabled
log debug     message getfrom         message getto         message gettype         message getany
transport marshall message
sendtoactivemq consumerinfo  createerrorhandler     destination
protected message createxmppmessage string to  messagedispatch messagedispatch  throws jmsexception
message answer   new message
answer settype
string from   to
int idx   from indexof
if  idx > 0
from   from substring 0  idx
answer setfrom from
answer setto to
org apache activemq command message message   messagedispatch getmessage
// answer.settype(message.gettype());
if  message instanceof activemqtextmessage
activemqtextmessage activemqtextmessage    activemqtextmessage message
body body   new body
string text   activemqtextmessage gettext
log info     text
body setvalue text
answer getany   add body
else
// todo support other message types
log warn     message
return answer
protected void sendpresence presence presence  org jabber protocol muc_user item item  throws ioexception
presence answer   new presence
answer setfrom presence getto
answer settype presence gettype
answer setto presence getfrom
x x   new x
x getdeclineordestroyorinvite   add item
answer getshoworstatusorpriority   add x
transport marshall answer
protected item createitem string jid  string name  string node
item answer   new item
answer setjid jid
answer setname name
answer setnode node
return answer
protected identity createidentity string category  string type  string name
identity answer   new identity
answer setcategory category
answer setname name
answer settype type
return answer
protected feature createfeature string var
feature feature   new feature
feature setvar var
return feature
/**
* creates a result command from the input
*/
protected iq createresult iq iq
iq result   new iq
result setid iq getid
result setfrom transport getfrom
result setto iq getfrom
result setlang iq getlang
result settype
return result
protected void sendtoactivemq command command  handler<response> handler
command setcommandid generatecommandid
if  handler    null
command setresponserequired true
resposehandlers put command getcommandid    handler
transport gettransportlistener   oncommand command
protected void onstarttls starttls starttls  throws exception
log debug
transport marshall new proceed
protected void onmessage message message  throws exception
if  log isdebugenabled
log debug     message getfrom         message getto         message getsubjectorbodyorthread
final activemqmessage activemqmessage   createactivemqmessage message
activemqdestination destination   createactivemqdestination message getto
activemqmessage setmessageid new messageid producerinfo  messageidgenerator getnextsequenceid
activemqmessage setdestination destination
activemqmessage setproducerid producerid
activemqmessage settimestamp system currenttimemillis
addactivemqmessageheaders activemqmessage  message
/*
* messagedispatch dispatch = new messagedispatch();
* dispatch.setdestination(destination);
* dispatch.setmessage(activemqmessage);
*/
if  log isdebugenabled
log debug     activemqmessage
sendtoactivemq activemqmessage  createerrorhandler
protected handler<response> createerrorhandler final string text
return new handler<response>
public void handle response event  throws exception
if  event instanceof exceptionresponse
exceptionresponse exceptionresponse    exceptionresponse event
throwable exception   exceptionresponse getexception
log error     text       exception  exception
else if  log isdebugenabled
log debug     text
/**
* converts the jabber destination name into a destination in activemq
*/
protected activemqdestination createactivemqdestination string jabberdestination  throws jmsexception
if  jabberdestination    null
return null
string name   jabberdestination
int idx   jabberdestination indexof
if  idx > 0
name   name substring 0  idx
system out println     name
// lets support lower-case versions of the agent topic
if  name equalsignorecase advisorysupport agent_topic
name   advisorysupport agent_topic
return new activemqtopic name
protected activemqmessage createactivemqmessage message message  throws jmsexception
activemqtextmessage answer   new activemqtextmessage
string text
list<object> list   message getsubjectorbodyorthread
for  object object   list
if  object instanceof body
body body    body object
text   body getvalue
break
answer settext text
return answer
protected void addactivemqmessageheaders activemqmessage answer  message message  throws jmsexception
answer setstringproperty    message getfrom
answer setstringproperty    message getid
answer setstringproperty    message getlang
answer setstringproperty    message getto
answer setjmstype message gettype
activemqdestination replyto   createactivemqdestination message getfrom
if  replyto    null
replyto   inboxdestination
system out println     replyto
answer setjmsreplyto replyto
protected void onauth auth auth  throws exception
if  log isdebugenabled
log debug     auth getmechanism         auth getvalue
string value   createchallengevalue auth
if  value    null
challenge challenge   new challenge
challenge setvalue value
transport marshall challenge
else
transport marshall new success
protected string createchallengevalue auth auth
// todo implement the challenge
return null