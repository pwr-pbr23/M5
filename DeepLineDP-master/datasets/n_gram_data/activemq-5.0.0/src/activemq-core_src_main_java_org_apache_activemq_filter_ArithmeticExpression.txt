/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import javax jms jmsexception
/**
* an expression which performs an operation on two expression values
*
* @version $revision: 1.2 $
*/
public abstract class arithmeticexpression extends binaryexpression
protected static final int integer   1
protected static final int long   2
protected static final int double   3
/**
* @param left
* @param right
*/
public arithmeticexpression expression left  expression right
super left  right
public static expression createplus expression left  expression right
return new arithmeticexpression left  right
protected object evaluate object lvalue  object rvalue
if  lvalue instanceof string
string text    string lvalue
string answer   text   rvalue
return answer
else if  lvalue instanceof number
return plus  number lvalue  asnumber rvalue
throw new runtimeexception     lvalue       rvalue
public string getexpressionsymbol
return
public static expression createminus expression left  expression right
return new arithmeticexpression left  right
protected object evaluate object lvalue  object rvalue
if  lvalue instanceof number
return minus  number lvalue  asnumber rvalue
throw new runtimeexception     lvalue       rvalue
public string getexpressionsymbol
return
public static expression createmultiply expression left  expression right
return new arithmeticexpression left  right
protected object evaluate object lvalue  object rvalue
if  lvalue instanceof number
return multiply  number lvalue  asnumber rvalue
throw new runtimeexception     lvalue       rvalue
public string getexpressionsymbol
return
public static expression createdivide expression left  expression right
return new arithmeticexpression left  right
protected object evaluate object lvalue  object rvalue
if  lvalue instanceof number
return divide  number lvalue  asnumber rvalue
throw new runtimeexception     lvalue       rvalue
public string getexpressionsymbol
return
public static expression createmod expression left  expression right
return new arithmeticexpression left  right
protected object evaluate object lvalue  object rvalue
if  lvalue instanceof number
return mod  number lvalue  asnumber rvalue
throw new runtimeexception     lvalue       rvalue
public string getexpressionsymbol
return
protected number plus number left  number right
switch  numbertype left  right
case integer
return new integer left intvalue     right intvalue
case long
return new long left longvalue     right longvalue
default
return new double left doublevalue     right doublevalue
protected number minus number left  number right
switch  numbertype left  right
case integer
return new integer left intvalue     right intvalue
case long
return new long left longvalue     right longvalue
default
return new double left doublevalue     right doublevalue
protected number multiply number left  number right
switch  numbertype left  right
case integer
return new integer left intvalue     right intvalue
case long
return new long left longvalue     right longvalue
default
return new double left doublevalue     right doublevalue
protected number divide number left  number right
return new double left doublevalue     right doublevalue
protected number mod number left  number right
return new double left doublevalue   % right doublevalue
private int numbertype number left  number right
if  isdouble left     isdouble right
return double
else if  left instanceof long    right instanceof long
return long
else
return integer
private boolean isdouble number n
return n instanceof float    n instanceof double
protected number asnumber object value
if  value instanceof number
return  number value
else
throw new runtimeexception     value
public object evaluate messageevaluationcontext message  throws jmsexception
object lvalue   left evaluate message
if  lvalue    null
return null
object rvalue   right evaluate message
if  rvalue    null
return null
return evaluate lvalue  rvalue
/**
* @param lvalue
* @param rvalue
* @return
*/
protected abstract object evaluate object lvalue  object rvalue