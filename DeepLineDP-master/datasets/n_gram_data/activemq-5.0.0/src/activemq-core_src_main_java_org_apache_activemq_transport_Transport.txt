/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport
import java io ioexception
import org apache activemq service
/**
* represents the client side of a transport allowing messages to be sent
* synchronously, asynchronously and consumed.
*
* @version $revision: 1.5 $
*/
public interface transport extends service
/**
* a one way asynchronous send
*
* @param command
* @throws ioexception
*/
void oneway object command  throws ioexception
/**
* an asynchronous request response where the receipt will be returned in
* the future. if responsecallback is not null, then it will be called when
* the response has been completed.
*
* @param command
* @param responsecallback todo
* @return the futureresponse
* @throws ioexception
*/
futureresponse asyncrequest object command  responsecallback responsecallback  throws ioexception
/**
* a synchronous request response
*
* @param command
* @return the response
* @throws ioexception
*/
object request object command  throws ioexception
/**
* a synchronous request response
*
* @param command
* @param timeout
* @return the repsonse or null if timeout
* @throws ioexception
*/
object request object command  int timeout  throws ioexception
// /**
// * a one way asynchronous send
// * @param command
// * @throws ioexception
// */
// void oneway(command command) throws ioexception;
//
// /**
// * an asynchronous request response where the receipt will be returned
// * in the future. if responsecallback is not null, then it will be called
// * when the response has been completed.
// *
// * @param command
// * @param responsecallback todo
// * @return the futureresponse
// * @throws ioexception
// */
// futureresponse asyncrequest(command command, responsecallback
// responsecallback) throws ioexception;
//
// /**
// * a synchronous request response
// * @param command
// * @return the response
// * @throws ioexception
// */
// response request(command command) throws ioexception;
//
// /**
// * a synchronous request response
// * @param command
// * @param timeout
// * @return the repsonse or null if timeout
// * @throws ioexception
// */
// response request(command command, int timeout) throws ioexception;
/**
* returns the current transport listener
*
* @return
*/
transportlistener gettransportlistener
/**
* registers an inbound command listener
*
* @param commandlistener
*/
void settransportlistener transportlistener commandlistener
/**
* @param target
* @return the target
*/
<t> t narrow class<t> target
/**
* @return the remote address for this connection
*/
string getremoteaddress
/**
* indicates if the transport can handle faults
*
* @return tru if fault tolerant
*/
boolean isfaulttolerant