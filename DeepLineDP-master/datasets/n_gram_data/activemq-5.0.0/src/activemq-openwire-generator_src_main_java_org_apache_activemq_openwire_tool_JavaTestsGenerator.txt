/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq openwire tool
import java io file
import java io printwriter
import java util iterator
import java util list
import org codehaus jam jannotation
import org codehaus jam jclass
import org codehaus jam jpackage
import org codehaus jam jproperty
/**
* @version $revision: 384826 $
*/
public class javatestsgenerator extends multisourcegenerator
protected string targetdir
public object run
if  destdir    null
destdir   new file targetdir       getopenwireversion
return super run
protected string getclassname jclass jclass
if  isabstract jclass
return super getclassname jclass
else
return super getclassname jclass
protected string getbaseclassname jclass jclass
string answer
if  superclass    null
string name   superclass getsimplename
if  name    null     name equals        name equals        name equals
answer   name
if  isabstract getjclass   getsuperclass
answer
return answer
private void generatelicence printwriter out
out println
out.println(" *");
out.println(" * licensed to the apache software foundation (asf) under one or more");
out.println(" * contributor license agreements.  see the notice file distributed with");
out.println(" * this work for additional information regarding copyright ownership.");
out.println(" * the asf licenses this file to you under the apache license, version 2.0");
out.println(" * (the \"license\"); you may not use this file except in compliance with");
out.println(" * the license.  you may obtain a copy of the license at");
out.println(" *");
out.println(" * http://www.apache.org/licenses/license-2.0");
out.println(" *");
out.println(" * unless required by applicable law or agreed to in writing, software");
out.println(" * distributed under the license is distributed on an \"as is\" basis,");
out.println(" * without warranties or conditions of any kind, either express or implied.");
out.println(" * see the license for the specific language governing permissions and");
out.println(" * limitations under the license.");
out println
protected void generatefile printwriter out
generatelicence out
out println     openwireversion
out println
out println
out println
out println
out println
out println
out println
out println
for  int i   0  i < getjclass   getimportedpackages   length  i
jpackage pkg   getjclass   getimportedpackages
for  int j   0  j < pkg getclasses   length  j
jclass clazz   pkg getclasses
out println     clazz getqualifiedname
out println
out println
out.println(" * test case for the openwire marshalling for " + jclass.getsimplename() + "");
out.println(" *");
out.println(" *");
out.println(" * note!: this file is auto generated - do not modify!");
out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
out.println(" *        this file.");
out.println(" *");
out.println(" * @version $revision: $");
out println
out println     getabstractclasstext         classname       baseclass
out println
if   isabstractclass
out println
out println     jclass getsimplename         jclass getsimplename
out println
out println
out println     jclass getsimplename         jclass getsimplename
out println
out println
out println
out println
out println
out println
out println     getjclass   getsimplename         getjclass   getsimplename
out println
testdatagenerator generator   new testdatagenerator
list properties   getproperties
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
string size   stringvalue annotation
string testsize   stringvalue annotation
string type   property gettype   getsimplename
//            boolean cached = iscachedproperty(property);
string propertyname   property getsimplename
if    equals testsize
continue
string settername   property getsetter   getsimplename
if  type equals
out println     settername       generator createbool
else if  type equals
out println     settername       generator createbyte
else if  type equals
out println     settername       generator createchar
else if  type equals
out println     settername       generator createshort
else if  type equals
out println     settername       generator createint
else if  type equals
out println     settername       generator createlong
else if  type equals
out println     settername       generator createbytearray propertyname
else if  type equals
out println     settername
else if  type equals
out println
out println     generator createbytearray propertyname
out println     settername
out println
else if  type equals
out println     settername
else
if  property gettype   isarraytype
string arraytype   property gettype   getarraycomponenttype   getsimplename
if  size    null
size
if  arraytype    jclass getsimplename
size
out println
out println     arraytype       arraytype       size
out println     size
out println     arraytype
out println
out println     settername
out println
else
out println     settername       type
out println
out println
public string gettargetdir
return targetdir
public void settargetdir string targetdir
this targetdir   targetdir