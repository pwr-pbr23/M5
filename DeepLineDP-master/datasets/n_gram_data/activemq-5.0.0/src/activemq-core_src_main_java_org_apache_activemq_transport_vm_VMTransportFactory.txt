/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport vm
import java io ioexception
import java net uri
import java net urisyntaxexception
import java util hashmap
import java util map
import java util concurrent concurrenthashmap
import org apache activemq broker brokerfactory
import org apache activemq broker brokerfactoryhandler
import org apache activemq broker brokerregistry
import org apache activemq broker brokerservice
import org apache activemq broker transportconnector
import org apache activemq transport marshallingtransportfilter
import org apache activemq transport transport
import org apache activemq transport transportfactory
import org apache activemq transport transportserver
import org apache activemq util ioexceptionsupport
import org apache activemq util introspectionsupport
import org apache activemq util servicesupport
import org apache activemq util urisupport
import org apache activemq util urisupport compositedata
import org apache commons logging log
import org apache commons logging logfactory
public class vmtransportfactory extends transportfactory
public static final concurrenthashmap<string  brokerservice> brokers   new concurrenthashmap<string  brokerservice>
public static final concurrenthashmap<string  transportconnector> connectors   new concurrenthashmap<string  transportconnector>
public static final concurrenthashmap<string  vmtransportserver> servers   new concurrenthashmap<string  vmtransportserver>
private static final log log   logfactory getlog vmtransportfactory class
brokerfactoryhandler brokerfactoryhandler
public transport doconnect uri location  throws exception
return vmtransportserver configure docompositeconnect location
public transport docompositeconnect uri location  throws exception
uri brokeruri
string host
map<string  string> options
boolean create   true
compositedata data   urisupport parsecomposite location
if  data getcomponents   length    1      equals data getcomponents   getscheme
brokeruri   data getcomponents
compositedata brokerdata   urisupport parsecomposite brokeruri
host    string brokerdata getparameters   get
if  host    null
host
if  brokerdata getpath      null
host   data getpath
options   data getparameters
location   new uri     host
else
// if using the less complex vm://localhost?broker.persistent=true
// form
try
host   location gethost
options   urisupport parseparamters location
string config    string options remove
if  config    null
brokeruri   new uri config
else
map brokeroptions   introspectionsupport extractproperties options
brokeruri   new uri     host
urisupport createquerystring brokeroptions
if    equals options remove
create   false
catch  urisyntaxexception e1
throw ioexceptionsupport create e1
location   new uri     host
if  host    null
host
vmtransportserver server   servers get host
// validate the broker is still active
if   validatebroker host     server    null
brokerservice broker   null
// synchronize on the registry so that multiple concurrent threads
// doing this do not think that the broker has not been created and
// cause multiple
// brokers to be started.
synchronized  brokerregistry getinstance   getregistrymutext
broker   brokerregistry getinstance   lookup host
if  broker    null
if   create
throw new ioexception     host
try
if  brokerfactoryhandler    null
broker   brokerfactoryhandler createbroker brokeruri
else
broker   brokerfactory createbroker brokeruri
broker start
catch  urisyntaxexception e
throw ioexceptionsupport create e
brokers put host  broker
server   servers get host
if  server    null
server    vmtransportserver bind location  true
transportconnector connector   new transportconnector broker getbroker    server
connector seturi location
connector settaskrunnerfactory broker gettaskrunnerfactory
connector start
connectors put host  connector
vmtransport vmtransport   server connect
introspectionsupport setproperties vmtransport  options
transport transport   vmtransport
if  vmtransport ismarshal
map<string  string> optionscopy   new hashmap<string  string> options
transport   new marshallingtransportfilter transport  createwireformat options
createwireformat optionscopy
if   options isempty
throw new illegalargumentexception     options
return transport
public transportserver dobind string brokerid  uri location  throws ioexception
return bind location  false
/**
* @param location
* @return the transportserver
* @throws ioexception
*/
private transportserver bind uri location  boolean dispose  throws ioexception
string host   location gethost
log debug     host
vmtransportserver server   new vmtransportserver location  dispose
object currentboundvalue   servers get host
if  currentboundvalue    null
throw new ioexception     location
servers put host  server
return server
public static void stopped vmtransportserver server
string host   server getbinduri   gethost
servers remove host
transportconnector connector   connectors remove host
if  connector    null
log debug     host
servicesupport dispose connector
brokerservice broker   brokers remove host
if  broker    null
servicesupport dispose broker
public static void stopped string host
servers remove host
transportconnector connector   connectors remove host
if  connector    null
log debug     host
servicesupport dispose connector
brokerservice broker   brokers remove host
if  broker    null
servicesupport dispose broker
public brokerfactoryhandler getbrokerfactoryhandler
return brokerfactoryhandler
public void setbrokerfactoryhandler brokerfactoryhandler brokerfactoryhandler
this brokerfactoryhandler   brokerfactoryhandler
private boolean validatebroker string host
boolean result   true
if  brokers containskey host     servers containskey host     connectors containskey host
// check the broker is still in the brokerregistry
transportconnector connector   connectors get host
if  brokerregistry getinstance   lookup host     null
connector    null    connector getbroker   isstopped
result   false
// clean-up
brokers remove host
servers remove host
if  connector    null
connectors remove host
if  connector    null
servicesupport dispose connector
return result