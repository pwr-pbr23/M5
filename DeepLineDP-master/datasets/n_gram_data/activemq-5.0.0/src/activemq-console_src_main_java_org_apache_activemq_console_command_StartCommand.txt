/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java net uri
import java net urisyntaxexception
import java util arraylist
import java util iterator
import java util list
import org apache activemq broker brokerfactory
import org apache activemq broker brokerservice
import org apache activemq console formatter globalwriter
public class startcommand extends abstractcommand
public static final string default_config_uri
protected string helpfile   new string
private uri configuri
private list<brokerservice> brokers   new arraylist<brokerservice> 5
/**
* the default task to start a broker or a group of brokers
*
* @param brokeruris
*/
protected void runtask list<string> brokeruris  throws exception
try
// if no config uri, use default setting
if  brokeruris isempty
setconfiguri new uri default_config_uri
startbroker getconfiguri
// set configuration data, if available, which in this case
// would be the config uri
else
string strconfiguri
while   brokeruris isempty
strconfiguri    string brokeruris remove 0
try
setconfiguri new uri strconfiguri
catch  urisyntaxexception e
globalwriter printexception e
return
startbroker getconfiguri
// prevent the main thread from exiting unless it is terminated
// elsewhere
waitforshutdown
catch  exception e
globalwriter printexception new runtimeexception     e  e
throw new exception e
/**
* create and run a broker specified by the given configuration uri
*
* @param configuri
* @throws exception
*/
public void startbroker uri configuri  throws exception
system out println     configuri
brokerservice broker   brokerfactory createbroker configuri
brokers add broker
broker start
/**
* wait for a shutdown invocation elsewhere
*
* @throws exception
*/
protected void waitforshutdown   throws exception
final boolean shutdown   new boolean
false
runtime getruntime   addshutdownhook new thread
public void run
synchronized  shutdown
shutdown   true
shutdown notify
// wait for any shutdown event
synchronized  shutdown
while   shutdown
try
shutdown wait
catch  interruptedexception e
// stop each broker
for  iterator<brokerservice> i   brokers iterator    i hasnext
brokerservice broker   i next
broker stop
/**
* sets the current configuration uri used by the start task
*
* @param uri
*/
public void setconfiguri uri uri
configuri   uri
/**
* gets the current configuration uri used by the start task
*
* @return current configuration uri
*/
public uri getconfiguri
return configuri
/**
* print the help messages for the browse command
*/
protected void printhelp
globalwriter printhelp helpfile