/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq filter
import java math bigdecimal
import java util collection
import java util hashset
import java util iterator
import java util list
import javax jms jmsexception
/**
* an expression which performs an operation on two expression values
*
* @version $revision: 1.3 $
*/
public abstract class unaryexpression implements expression
private static final bigdecimal bd_long_min_value   bigdecimal valueof long min_value
protected expression right
public unaryexpression expression left
this right   left
public static expression createnegate expression left
return new unaryexpression left
public object evaluate messageevaluationcontext message  throws jmsexception
object rvalue   right evaluate message
if  rvalue    null
return null
if  rvalue instanceof number
return negate  number rvalue
return null
public string getexpressionsymbol
return
public static booleanexpression createinexpression propertyexpression right  list<object> elements  final boolean not
// use a hashset if there are many elements.
collection<object> t
if  elements size      0
t   null
else if  elements size   < 5
t   elements
else
t   new hashset<object> elements
final collection inlist   t
return new booleanunaryexpression right
public object evaluate messageevaluationcontext message  throws jmsexception
object rvalue   right evaluate message
if  rvalue    null
return null
if  rvalue getclass      string class
return null
if   inlist    null    inlist contains rvalue   ^ not
return boolean true
else
return boolean false
public string tostring
stringbuffer answer   new stringbuffer
answer append right
answer append
answer append getexpressionsymbol
answer append
int count   0
for  iterator i   inlist iterator    i hasnext
object o    object i next
if  count    0
answer append
answer append o
count
answer append
return answer tostring
public string getexpressionsymbol
if  not
return
else
return
abstract static class booleanunaryexpression extends unaryexpression implements booleanexpression
public booleanunaryexpression expression left
super left
public boolean matches messageevaluationcontext message  throws jmsexception
object object   evaluate message
return object    null    object    boolean true
public static booleanexpression createnot booleanexpression left
return new booleanunaryexpression left
public object evaluate messageevaluationcontext message  throws jmsexception
boolean lvalue    boolean right evaluate message
if  lvalue    null
return null
return lvalue booleanvalue   ? boolean false   boolean true
public string getexpressionsymbol
return
public static booleanexpression createxpath final string xpath
return new xpathexpression xpath
public static booleanexpression createxquery final string xpath
return new xqueryexpression xpath
public static booleanexpression createbooleancast expression left
return new booleanunaryexpression left
public object evaluate messageevaluationcontext message  throws jmsexception
object rvalue   right evaluate message
if  rvalue    null
return null
if   rvalue getclass   equals boolean class
return boolean false
return   boolean rvalue  booleanvalue   ? boolean true   boolean false
public string tostring
return right tostring
public string getexpressionsymbol
return
private static number negate number left
class clazz   left getclass
if  clazz    integer class
return new integer  left intvalue
else if  clazz    long class
return new long  left longvalue
else if  clazz    float class
return new float  left floatvalue
else if  clazz    double class
return new double  left doublevalue
else if  clazz    bigdecimal class
// we ussually get a big deciamal when we have long.min_value
// constant in the
// selector. long.min_value is too big to store in a long as a
// positive so we store it
// as a big decimal. but it gets negated right away.. to here we try
// to covert it back
// to a long.
bigdecimal bd    bigdecimal left
bd   bd negate
if  bd_long_min_value compareto bd     0
return long valueof long min_value
return bd
else
throw new runtimeexception     left
public expression getright
return right
public void setright expression expression
right   expression
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     getexpressionsymbol         right tostring
/**
* todo: more efficient hashcode()
*
* @see java.lang.object#hashcode()
*/
public int hashcode
return tostring   hashcode
/**
* todo: more efficient hashcode()
*
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object o
if  o    null     this getclass   equals o getclass
return false
return tostring   equals o tostring
/**
* returns the symbol that represents this binary expression. for example,
* addition is represented by "+"
*
* @return
*/
public abstract string getexpressionsymbol