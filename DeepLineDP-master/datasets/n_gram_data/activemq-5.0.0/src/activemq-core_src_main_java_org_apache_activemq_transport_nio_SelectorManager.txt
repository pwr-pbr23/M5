/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport nio
import java io ioexception
import java nio channels socketchannel
import java util linkedlist
import java util concurrent executor
import java util concurrent executors
import java util concurrent threadfactory
/**
* the selectormanager will manage one selector and the thread that checks the
* selector.
*
* we may need to consider running more than one thread to check the selector if
* servicing the selector takes too long.
*
* @version $rev: 46019 $ $date: 2004-09-14 05:56:06 -0400 (tue, 14 sep 2004) $
*/
public final class selectormanager
public static final selectormanager singleton   new selectormanager
private executor selectorexecutor   executors newcachedthreadpool new threadfactory
public thread newthread runnable r
thread rc   new thread r
rc setname
return rc
private executor channelexecutor   selectorexecutor
private linkedlist<selectorworker> freeworkers   new linkedlist<selectorworker>
private int maxchannelsperworker   64
static selectormanager getinstance
return singleton
public interface listener
void onselect selectorselection selector
void onerror selectorselection selection  throwable error
public synchronized selectorselection register socketchannel socketchannel  listener listener
throws ioexception
selectorworker worker   null
if  freeworkers size   > 0
worker   freeworkers getfirst
else
worker   new selectorworker this
freeworkers addfirst worker
selectorselection selection   new selectorselection worker  socketchannel  listener
return selection
synchronized void onworkerfullevent selectorworker worker
freeworkers remove worker
public synchronized void onworkeremptyevent selectorworker worker
freeworkers remove worker
public synchronized void onworkernotfullevent selectorworker worker
freeworkers add worker
public executor getchannelexecutor
return channelexecutor
public void setchannelexecutor executor channelexecutor
this channelexecutor   channelexecutor
public int getmaxchannelsperworker
return maxchannelsperworker
public void setmaxchannelsperworker int maxchannelsperworker
this maxchannelsperworker   maxchannelsperworker
public executor getselectorexecutor
return selectorexecutor
public void setselectorexecutor executor selectorexecutor
this selectorexecutor   selectorexecutor