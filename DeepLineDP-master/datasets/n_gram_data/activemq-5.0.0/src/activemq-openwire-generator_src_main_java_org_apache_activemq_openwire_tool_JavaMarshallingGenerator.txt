/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq openwire tool
import java io file
import java io filewriter
import java io printwriter
import java util arraylist
import java util collections
import java util comparator
import java util iterator
import java util list
import org codehaus jam jannotation
import org codehaus jam jannotationvalue
import org codehaus jam jclass
import org codehaus jam jpackage
import org codehaus jam jproperty
/**
* @version $revision: 384826 $
*/
public class javamarshallinggenerator extends multisourcegenerator
protected list<jclass> concreteclasses   new arraylist<jclass>
protected file factoryfile
protected string factoryfilename
protected string indent
protected string targetdir
public object run
if  destdir    null
destdir   new file targetdir       getopenwireversion
object answer   super run
processfactory
return answer
protected void generatefile printwriter out  throws exception
generatelicence out
out println
out println     getopenwireversion
out println
out println
out println
out println
out println
out println
out println
out println
out println
for  int i   0  i < getjclass   getimportedpackages   length  i
jpackage pkg   getjclass   getimportedpackages
for  int j   0  j < pkg getclasses   length  j
jclass clazz   pkg getclasses
out println     clazz getqualifiedname
out println
out println
out.println(" * marshalling code for open wire format for " + getclassname() + "");
out.println(" *");
out.println(" *");
out.println(" * note!: this file is auto generated - do not modify!");
out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
out.println(" *        this file.");
out.println(" *");
out.println(" * @version $revision$");
out println
out println     getabstractclasstext         getclassname         getbaseclass
out println
if   isabstractclass
out println
out.println("     * return the type of data structure we marshal");
out.println("     * @return short representation of the type data structure");
out println
out println
out println     getjclass   getsimplename
out println
out println
out println
out.println("     * @return a new object instance");
out println
out println
out println     getjclass   getsimplename
out println
out println
out println
out.println("     * un-marshal an object instance from the data input stream");
out.println("     *");
out.println("     * @param o the object to un-marshal");
out.println("     * @param datain the data input stream to build the object from");
out.println("     * @throws ioexception");
out println
out println
out println
if   getproperties   isempty
out println
out println     getjclass   getsimplename         getjclass   getsimplename
if  ismarshalleraware
out println
out println
out println
generatetightunmarshalbody out
if  ismarshalleraware
out println
out println
out println
out println
out println
out println
out println
out.println("     * write the booleans that this object uses to a booleanstream");
out println
out println
if   getproperties   isempty
out println
out println     getjclass   getsimplename         getjclass   getsimplename
if  ismarshalleraware
out println
out println
out println
out println
int basesize   generatetightmarshal1body out
out println
out println     basesize
out println
out println
out println
out.println("     * write a object instance to data output stream");
out.println("     *");
out.println("     * @param o the instance to be marshaled");
out.println("     * @param dataout the output stream");
out.println("     * @throws ioexception thrown if an error occurs");
out println
out println
out println
if   getproperties   isempty
out println
out println     getjclass   getsimplename         getjclass   getsimplename
generatetightmarshal2body out
if  ismarshalleraware
out println
out println
out println
out println
out println
out println
out.println("     * un-marshal an object instance from the data input stream");
out.println("     *");
out.println("     * @param o the object to un-marshal");
out.println("     * @param datain the data input stream to build the object from");
out.println("     * @throws ioexception");
out println
out println
out println
if   getproperties   isempty
out println
out println     getjclass   getsimplename         getjclass   getsimplename
if  ismarshalleraware
out println
out println
out println
generatelooseunmarshalbody out
if  ismarshalleraware
out println
out println
out println
out println
out println
out println
out println
out.println("     * write the booleans that this object uses to a booleanstream");
out println
out println
if   getproperties   isempty
out println
out println     getjclass   getsimplename         getjclass   getsimplename
if  ismarshalleraware
out println
out println
out println
out println
generateloosemarshalbody out
out println
out println
out println
private void generatelicence printwriter out
out println
out.println(" *");
out.println(" * licensed to the apache software foundation (asf) under one or more");
out.println(" * contributor license agreements.  see the notice file distributed with");
out.println(" * this work for additional information regarding copyright ownership.");
out.println(" * the asf licenses this file to you under the apache license, version 2.0");
out.println(" * (the \"license\"); you may not use this file except in compliance with");
out.println(" * the license.  you may obtain a copy of the license at");
out.println(" *");
out.println(" * http://www.apache.org/licenses/license-2.0");
out.println(" *");
out.println(" * unless required by applicable law or agreed to in writing, software");
out.println(" * distributed under the license is distributed on an \"as is\" basis,");
out.println(" * without warranties or conditions of any kind, either express or implied.");
out.println(" * see the license for the specific language governing permissions and");
out.println(" * limitations under the license.");
out println
protected void processfactory
if  factoryfile    null
factoryfile   new file destdir  factoryfilename   filepostfix
printwriter out   null
try
out   new printwriter new filewriter factoryfile
generatefactory out
catch  exception e
throw new runtimeexception e
finally
if  out    null
out close
protected void generatefactory printwriter out
generatelicence out
out println
out println     getopenwireversion
out println
out println
out println
out println
out println
out.println(" * marshallerfactory for open wire format.");
out.println(" *");
out.println(" *");
out.println(" * note!: this file is auto generated - do not modify!");
out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
out.println(" *        this file.");
out.println(" *");
out.println(" * @version $revision$");
out println
out println
out println
out println
out.println("     * creates a map of command type -> marshallers");
out println
out println
out println
out println
list<jclass> list   new arraylist<jclass> getconcreteclasses
collections sort list  new comparator
public int compare object o1  object o2
jclass c1    jclass o1
jclass c2    jclass o2
return c1 getsimplename   compareto c2 getsimplename
for  iterator<jclass> iter   list iterator    iter hasnext
jclass jclass   iter next
out println     jclass getsimplename
out println
out println
out println
out println
out println
out println
out println
out println
out println
out println
out println
protected void processclass jclass jclass
super processclass jclass
if   jclass isabstract
concreteclasses add jclass
protected string getclassname jclass jclass
return super getclassname jclass
protected string getbaseclassname jclass jclass
string answer
jclass superclass   jclass getsuperclass
if  superclass    null
string supername   superclass getsimplename
if   supername equals        supername equals        supername equals
answer   supername
return answer
protected void initialisemanuallymaintainedclasses
protected void generatetightunmarshalbody printwriter out
list properties   getproperties
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
jannotationvalue size   annotation getvalue
jclass propertytype   property gettype
string propertytypename   propertytype getsimplename
if  propertytype isarraytype       propertytypename equals
generatetightunmarshalbodyforarrayproperty out  property  size
else
generatetightunmarshalbodyforproperty out  property  size
protected void generatetightunmarshalbodyforproperty printwriter out  jproperty property  jannotationvalue size
string setter   property getsetter   getsimplename
string type   property gettype   getsimplename
if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
if  size    null
out println     setter       size asint
else
out println     setter
else if  type equals
out println     setter
else if  isthrowable property gettype
out println     setter       property gettype   getqualifiedname
else if  iscachedproperty property
out println     setter       property gettype   getqualifiedname
else
out println     setter       property gettype   getqualifiedname
protected void generatetightunmarshalbodyforarrayproperty printwriter out  jproperty property  jannotationvalue size
jclass propertytype   property gettype
string arraytype   propertytype getarraycomponenttype   getqualifiedname
string setter   property getsetter   getsimplename
out println
if  size    null
out println
out println     arraytype       arraytype       size asint
out println         size asint
out println     arraytype
out println
out println     setter
out println
else
out println
out println
out println     arraytype       arraytype
out println
out println     arraytype
out println
out println     setter
out println
out println
out println     setter
out println
protected int generatetightmarshal1body printwriter out
list properties   getproperties
int basesize   0
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
jannotationvalue size   annotation getvalue
jclass propertytype   property gettype
string type   propertytype getsimplename
string getter       property getgetter   getsimplename
if  type equals
out println     getter
else if  type equals
basesize    1
else if  type equals
basesize    2
else if  type equals
basesize    2
else if  type equals
basesize    4
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
if  size    null
out println     getter
else
out println     getter       size asint
else if  type equals
out println     getter
else if  propertytype isarraytype
if  size    null
out println     getter       size asint
else
out println     getter
else if  isthrowable propertytype
out println     getter
else
if  iscachedproperty property
out println     getter
else
out println     getter
return basesize
protected void generatetightmarshal2body printwriter out
list properties   getproperties
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
jannotationvalue size   annotation getvalue
jclass propertytype   property gettype
string type   propertytype getsimplename
string getter       property getgetter   getsimplename
if  type equals
out println
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
if  size    null
out println     getter       size asint
else
out println     getter
else if  type equals
out println     getter
else if  propertytype isarraytype
if  size    null
out println     getter       size asint
else
out println     getter
else if  isthrowable propertytype
out println     getter
else
if  iscachedproperty property
out println     getter
else
out println     getter
protected void generateloosemarshalbody printwriter out
list properties   getproperties
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
jannotationvalue size   annotation getvalue
jclass propertytype   property gettype
string type   propertytype getsimplename
string getter       property getgetter   getsimplename
if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
out println     getter
else if  type equals
if  size    null
out println     getter       size asint
else
out println     getter
else if  type equals
out println     getter
else if  propertytype isarraytype
if  size    null
out println     getter       size asint
else
out println     getter
else if  isthrowable propertytype
out println     getter
else
if  iscachedproperty property
out println     getter
else
out println     getter
protected void generatelooseunmarshalbody printwriter out
list properties   getproperties
for  iterator iter   properties iterator    iter hasnext
jproperty property    jproperty iter next
jannotation annotation   property getannotation
jannotationvalue size   annotation getvalue
jclass propertytype   property gettype
string propertytypename   propertytype getsimplename
if  propertytype isarraytype       propertytypename equals
generatelooseunmarshalbodyforarrayproperty out  property  size
else
generatelooseunmarshalbodyforproperty out  property  size
protected void generatelooseunmarshalbodyforproperty printwriter out  jproperty property  jannotationvalue size
string setter   property getsetter   getsimplename
string type   property gettype   getsimplename
if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
out println     setter
else if  type equals
if  size    null
out println     setter       size asint
else
out println     setter
else if  type equals
out println     setter
else if  isthrowable property gettype
out println     setter       property gettype   getqualifiedname
else if  iscachedproperty property
out println     setter       property gettype   getqualifiedname
else
out println     setter       property gettype   getqualifiedname
protected void generatelooseunmarshalbodyforarrayproperty printwriter out  jproperty property  jannotationvalue size
jclass propertytype   property gettype
string arraytype   propertytype getarraycomponenttype   getqualifiedname
string setter   property getsetter   getsimplename
out println
if  size    null
out println
out println     arraytype       arraytype       size asint
out println         size asint
out println     arraytype
out println
out println     setter
out println
else
out println
out println
out println     arraytype       arraytype
out println
out println     arraytype
out println
out println     setter
out println
out println
out println     setter
out println
/**
* returns whether or not the given annotation has a mandatory flag on it or
* not
*/
protected string getmandatoryflag jannotation annotation
jannotationvalue value   annotation getvalue
if  value    null
string text   value asstring
if  text    null    text equalsignorecase
return
return
public list<jclass> getconcreteclasses
return concreteclasses
public void setconcreteclasses list<jclass> concreteclasses
this concreteclasses   concreteclasses
public file getfactoryfile
return factoryfile
public void setfactoryfile file factoryfile
this factoryfile   factoryfile
public string getfactoryfilename
return factoryfilename
public void setfactoryfilename string factoryfilename
this factoryfilename   factoryfilename
public string getindent
return indent
public void setindent string indent
this indent   indent
public string gettargetdir
return targetdir
public void settargetdir string sourcedir
this targetdir   sourcedir