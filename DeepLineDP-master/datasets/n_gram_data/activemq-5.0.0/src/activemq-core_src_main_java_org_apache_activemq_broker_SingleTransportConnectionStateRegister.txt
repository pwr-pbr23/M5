/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util map entry
import org apache activemq command connectionid
import org apache activemq command consumerid
import org apache activemq command producerid
import org apache activemq command sessionid
/**
* @version $revision: 1.8 $
*/
public class singletransportconnectionstateregister  implements transportconnectionstateregister
private  transportconnectionstate connectionstate
private connectionid connectionid
public transportconnectionstate registerconnectionstate connectionid connectionid
transportconnectionstate state
transportconnectionstate rc   connectionstate
connectionstate   state
this connectionid   connectionid
return rc
public synchronized transportconnectionstate unregisterconnectionstate connectionid connectionid
transportconnectionstate rc   null
if  connectionid    null    connectionstate    null    this connectionid  null
if  this connectionid equals connectionid
rc   connectionstate
connectionstate   null
connectionid   null
return rc
public synchronized list<transportconnectionstate> listconnectionstates
list<transportconnectionstate> rc   new arraylist<transportconnectionstate>
if  connectionstate    null
rc add connectionstate
return rc
public synchronized transportconnectionstate lookupconnectionstate string connectionid
transportconnectionstate cs   connectionstate
if  cs    null
throw new illegalstateexception
connectionid
return cs
public synchronized transportconnectionstate lookupconnectionstate consumerid id
transportconnectionstate cs   connectionstate
if  cs    null
throw new illegalstateexception
id getparentid   getparentid
return cs
public synchronized transportconnectionstate lookupconnectionstate producerid id
transportconnectionstate cs   connectionstate
if  cs    null
throw new illegalstateexception
id getparentid   getparentid
return cs
public synchronized transportconnectionstate lookupconnectionstate sessionid id
transportconnectionstate cs   connectionstate
if  cs    null
throw new illegalstateexception
id getparentid
return cs
public synchronized transportconnectionstate lookupconnectionstate connectionid connectionid
transportconnectionstate cs   connectionstate
if  cs    null
throw new illegalstateexception
connectionid
return cs
public synchronized boolean doeshandlemultipleconnectionstates
return false
public synchronized boolean isempty
return connectionstate    null
public void intialize transportconnectionstateregister other
if  other isempty
clear
else
map map   other mapstates
iterator i   map entryset   iterator
map entry<connectionid  transportconnectionstate> entry    entry<connectionid  transportconnectionstate>  i next
connectionid   entry getkey
connectionstate  entry getvalue
public map<connectionid  transportconnectionstate> mapstates
map<connectionid  transportconnectionstate> map   new hashmap<connectionid  transportconnectionstate>
if   isempty
map put connectionid  connectionstate
return map
public void clear
connectionstate null
connectionid null