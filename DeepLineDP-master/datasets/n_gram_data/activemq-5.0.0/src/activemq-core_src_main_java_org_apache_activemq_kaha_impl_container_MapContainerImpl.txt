/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl container
import java io file
import java io ioexception
import java util collection
import java util iterator
import java util map
import java util set
import org apache activemq kaha containerid
import org apache activemq kaha mapcontainer
import org apache activemq kaha marshaller
import org apache activemq kaha runtimestoreexception
import org apache activemq kaha store
import org apache activemq kaha storeentry
import org apache activemq kaha storelocation
import org apache activemq kaha impl datamanager
import org apache activemq kaha impl data item
import org apache activemq kaha impl index index
import org apache activemq kaha impl index indexitem
import org apache activemq kaha impl index indexlinkedlist
import org apache activemq kaha impl index indexmanager
import org apache activemq kaha impl index vmindex
import org apache activemq kaha impl index hash hashindex
import org apache activemq util iohelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* implementation of a mapcontainer
*
* @version $revision: 1.2 $
*/
public final class mapcontainerimpl extends basecontainerimpl implements mapcontainer
private static final log log   logfactory getlog mapcontainerimpl class
protected index index
protected marshaller keymarshaller   store object_marshaller
protected marshaller valuemarshaller   store object_marshaller
protected file directory
private int indexbinsize   hashindex default_bin_size
private int indexkeysize   hashindex default_key_size
private int indexpagesize   hashindex default_page_size
public mapcontainerimpl file directory  containerid id  indexitem root  indexmanager indexmanager
datamanager datamanager  boolean persistentindex
super id  root  indexmanager  datamanager  persistentindex
this directory   directory
public synchronized void init
super init
if  index    null
if  persistentindex
string name   containerid getdatacontainername         containerid getkey
name iohelper tofilesystemsafename name
try
hashindex hashindex   new hashindex directory  name  indexmanager
hashindex setnumberofbins getindexbinsize
hashindex setkeysize getindexkeysize
hashindex setpagesize getindexpagesize
this index   hashindex
catch  ioexception e
log error    e
throw new runtimeexception e
else
this index   new vmindex indexmanager
index setkeymarshaller keymarshaller
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#load()
*/
public synchronized void load
checkclosed
if   loaded
if   loaded
loaded   true
try
init
index load
long nextitem   root getnextitem
while  nextitem    item position_not_set
indexitem item   indexmanager getindex nextitem
storelocation data   item getkeydataitem
object key   datamanager readitem keymarshaller  data
if  index istransient
index store key  item
indexlist add item
nextitem   item getnextitem
catch  ioexception e
log error     getid    e
throw new runtimestoreexception e
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#unload()
*/
public synchronized void unload
checkclosed
if  loaded
loaded   false
try
index unload
catch  ioexception e
log warn    e
indexlist clear
public synchronized void setkeymarshaller marshaller keymarshaller
checkclosed
this keymarshaller   keymarshaller
if  index    null
index setkeymarshaller keymarshaller
public synchronized void setvaluemarshaller marshaller valuemarshaller
checkclosed
this valuemarshaller   valuemarshaller
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#size()
*/
public synchronized int size
load
return indexlist size
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#isempty()
*/
public synchronized boolean isempty
load
return indexlist isempty
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#containskey(java.lang.object)
*/
public synchronized boolean containskey object key
load
try
return index containskey key
catch  ioexception e
log error     key  e
throw new runtimeexception e
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#get(java.lang.object)
*/
public synchronized object get object key
load
object result   null
storeentry item   null
try
item   index get key
catch  ioexception e
log error     key  e
throw new runtimeexception e
if  item    null
result   getvalue item
return result
/**
* get the storeentry associated with the key
*
* @param key
* @return the storeentry
*/
public synchronized storeentry getentry object key
load
storeentry item   null
try
item   index get key
catch  ioexception e
log error     key  e
throw new runtimeexception e
return item
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#containsvalue(java.lang.object)
*/
public synchronized boolean containsvalue object o
load
boolean result   false
if  o    null
indexitem item   indexlist getfirst
while  item    null
object value   getvalue item
if  value    null    value equals o
result   true
break
item   indexlist getnextentry item
return result
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#putall(java.util.map)
*/
public synchronized void putall map t
load
if  t    null
for  iterator i   t entryset   iterator    i hasnext
map entry entry    map entry i next
put entry getkey    entry getvalue
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#keyset()
*/
public synchronized set keyset
load
return new containerkeyset this
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#values()
*/
public synchronized collection values
load
return new containervaluecollection this
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#entryset()
*/
public synchronized set entryset
load
return new containerentryset this
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#put(java.lang.object,
*      java.lang.object)
*/
public synchronized object put object key  object value
load
object result   remove key
indexitem item   write key  value
try
index store key  item
catch  ioexception e
log error     key  e
throw new runtimeexception e
indexlist add item
return result
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#remove(java.lang.object)
*/
public synchronized object remove object key
load
try
object result   null
indexitem item    indexitem index remove key
if  item    null
// refresh the index
item    indexitem indexlist refreshentry item
result   getvalue item
indexitem prev   indexlist getpreventry item
indexitem next   indexlist getnextentry item
indexlist remove item
delete item  prev  next
return result
catch  ioexception e
log error     key  e
throw new runtimeexception e
public synchronized boolean removevalue object o
load
boolean result   false
if  o    null
indexitem item   indexlist getfirst
while  item    null
object value   getvalue item
if  value    null    value equals o
result   true
// find the key
object key   getkey item
if  key    null
remove key
break
item   indexlist getnextentry item
return result
protected synchronized void remove indexitem item
object key   getkey item
if  key    null
remove key
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.mapcontainer#clear()
*/
public synchronized void clear
checkclosed
loaded   true
init
if  index    null
try
index clear
catch  ioexception e
log error    e
throw new runtimeexception e
super clear
doclear
/**
* add an entry to the store map
*
* @param key
* @param value
* @return the storeentry associated with the entry
*/
public synchronized storeentry place object key  object value
load
try
remove key
indexitem item   write key  value
index store key  item
indexlist add item
return item
catch  ioexception e
log error     key  e
throw new runtimeexception e
/**
* remove an entry from ther map
*
* @param entry
* @throws ioexception
*/
public synchronized void remove storeentry entry
load
indexitem item    indexitem entry
if  item    null
object key   getkey item
try
index remove key
catch  ioexception e
log error     entry  e
throw new runtimeexception e
indexitem prev   indexlist getpreventry item
indexitem next   indexlist getnextentry item
indexlist remove item
delete item  prev  next
public synchronized storeentry getfirst
load
return indexlist getfirst
public synchronized storeentry getlast
load
return indexlist getlast
public synchronized storeentry getnext storeentry entry
load
indexitem item    indexitem entry
return indexlist getnextentry item
public synchronized storeentry getprevious storeentry entry
load
indexitem item    indexitem entry
return indexlist getpreventry item
public synchronized storeentry refresh storeentry entry
load
return indexlist getentry entry
/**
* get the value from it's location
*
* @param item
* @return the value associated with the store entry
*/
public synchronized object getvalue storeentry item
load
object result   null
if  item    null
try
// ensure this value is up to date
// item=indexlist.getentry(item);
storelocation data   item getvaluedataitem
result   datamanager readitem valuemarshaller  data
catch  ioexception e
log error     item  e
throw new runtimestoreexception e
return result
/**
* get the key object from it's location
*
* @param item
* @return the key object associated with the storeentry
*/
public synchronized object getkey storeentry item
load
object result   null
if  item    null
try
storelocation data   item getkeydataitem
result   datamanager readitem keymarshaller  data
catch  ioexception e
log error     item  e
throw new runtimestoreexception e
return result
protected indexlinkedlist getitemlist
return indexlist
protected synchronized indexitem write object key  object value
indexitem index   null
try
index   indexmanager createnewindex
storelocation data   datamanager storedataitem keymarshaller  key
index setkeydata data
if  value    null
data   datamanager storedataitem valuemarshaller  value
index setvaluedata data
indexitem prev   indexlist getlast
prev   prev    null ? prev   indexlist getroot
indexitem next   indexlist getnextentry prev
prev setnextitem index getoffset
index setpreviousitem prev getoffset
updateindexes prev
if  next    null
next setpreviousitem index getoffset
index setnextitem next getoffset
updateindexes next
storeindex index
catch  ioexception e
log error     key       value  e
throw new runtimestoreexception e
return index
public int getindexbinsize
return indexbinsize
public void setindexbinsize int indexbinsize
this indexbinsize   indexbinsize
public int getindexkeysize
return indexkeysize
public void setindexkeysize int indexkeysize
this indexkeysize   indexkeysize
public int getindexpagesize
return indexpagesize
public void setindexpagesize int indexpagesize
this indexpagesize   indexpagesize