/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region policy
import java util list
import org apache activemq broker region messagereference
import org apache activemq broker region subscription
import org apache activemq filter messageevaluationcontext
/**
* abstraction to allow different dispatching policies to be plugged
* into the region implementations.  this is used by a queue to deliver
* messages to the matching subscriptions.
*
* @version $revision$
*/
public interface dispatchpolicy
/**
* decides how to dispatch a selected message to a collection of consumers.  a safe
* approach is to dispatch to every subscription that matches.  queue subscriptions that
* have not exceeded their pre-fetch limit will attempt to lock the message before
* dispatching to the client.  first subscription to lock the message wins.
*
* order of dispatching to the subscriptions matters since a subscription with a
* large pre-fetch may take all the messages if he is always dispatched to first.
* once a message has been locked, it does not need to be dispatched to any
* further subscriptions.
*
* @return true if at least one consumer was dispatched or false if there are no active subscriptions that could be dispatched
*/
boolean dispatch messagereference node  messageevaluationcontext msgcontext  list<subscription> consumers  throws exception