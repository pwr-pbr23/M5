/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq memory buffer
import java util iterator
import java util linkedlist
/**
* a {@link messagebuffer} which evicts messages in arrival order so the oldest
* messages are removed first.
*
* @version $revision: 1.1 $
*/
public class orderbasedmessagebuffer implements messagebuffer
private int limit   100   64   1024
private linkedlist<messagequeue> list   new linkedlist<messagequeue>
private int size
private object lock   new object
public orderbasedmessagebuffer
public orderbasedmessagebuffer int limit
this limit   limit
public int getsize
synchronized  lock
return size
/**
* creates a new message queue instance
*/
public messagequeue createmessagequeue
return new messagequeue this
/**
* after a message queue has changed we may need to perform some evictions
*
* @param delta
* @param queuesize
*/
public void onsizechanged messagequeue queue  int delta  int queuesize
synchronized  lock
list addlast queue
size    delta
while  size > limit
messagequeue biggest   list removefirst
size    biggest evictmessage
public void clear
synchronized  lock
for  iterator<messagequeue> iter   list iterator    iter hasnext
messagequeue queue   iter next
queue clear
size   0