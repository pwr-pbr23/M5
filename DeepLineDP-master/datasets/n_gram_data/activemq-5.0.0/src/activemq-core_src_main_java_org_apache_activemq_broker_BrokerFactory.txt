/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io ioexception
import java net uri
import org apache activemq util factoryfinder
import org apache activemq util ioexceptionsupport
/**
* a helper class to create a fully configured broker service using a uri. the
* list of currently supported uri syntaxes is described <a
* href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>
*
* @version $revision$
*/
public final class brokerfactory
private static final factoryfinder broker_factory_handler_finder   new factoryfinder
private brokerfactory
public static brokerfactoryhandler createbrokerfactoryhandler string type  throws ioexception
try
return  brokerfactoryhandler broker_factory_handler_finder newinstance type
catch  throwable e
throw ioexceptionsupport create     type       e  e
/**
* creates a broker from a uri configuration
*
* @param brokeruri the uri scheme to configure the broker
* @throws exception
*/
public static brokerservice createbroker uri brokeruri  throws exception
return createbroker brokeruri  false
/**
* creates a broker from a uri configuration
*
* @param brokeruri the uri scheme to configure the broker
* @param startbroker whether or not the broker should have its
*                {@link brokerservice#start()} method called after
*                construction
* @throws exception
*/
public static brokerservice createbroker uri brokeruri  boolean startbroker  throws exception
if  brokeruri getscheme      null
throw new illegalargumentexception     brokeruri
brokerfactoryhandler handler   createbrokerfactoryhandler brokeruri getscheme
brokerservice broker   handler createbroker brokeruri
if  startbroker
broker start
return broker
/**
* creates a broker from a uri configuration
*
* @param brokeruri the uri scheme to configure the broker
* @throws exception
*/
public static brokerservice createbroker string brokeruri  throws exception
return createbroker new uri brokeruri
/**
* creates a broker from a uri configuration
*
* @param brokeruri the uri scheme to configure the broker
* @param startbroker whether or not the broker should have its
*                {@link brokerservice#start()} method called after
*                construction
* @throws exception
*/
public static brokerservice createbroker string brokeruri  boolean startbroker  throws exception
return createbroker new uri brokeruri   startbroker