/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io datainputstream
import java io dataoutputstream
import java io eofexception
import java io filteroutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import java util zip deflater
import java util zip deflateroutputstream
import java util zip inflaterinputstream
import javax jms bytesmessage
import javax jms jmsexception
import javax jms messageformatexception
import javax jms messagenotreadableexception
import org apache activemq activemqconnection
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util bytesequencedata
import org apache activemq util jmsexceptionsupport
/**
* a <code>bytesmessage</code> object is used to send a message containing a
* stream of uninterpreted bytes. it inherits from the <code>message</code>
* interface and adds a bytes message body. the receiver of the message supplies
* the interpretation of the bytes.
* <p>
* the <code>bytesmessage</code> methods are based largely on those found in
* <code>java.io.datainputstream</code> and
* <code>java.io.dataoutputstream</code>.
* <p>
* this message type is for client encoding of existing message formats. if
* possible, one of the other self-defining message types should be used
* instead.
* <p>
* although the jms api allows the use of message properties with byte messages,
* they are typically not used, since the inclusion of properties may affect the
* format.
* <p>
* the primitive types can be written explicitly using methods for each type.
* they may also be written generically as objects. for instance, a call to
* <code>bytesmessage.writeint(6)</code> is equivalent to
* <code> bytesmessage.writeobject(new integer(6))</code>. both forms are
* provided, because the explicit form is convenient for static programming, and
* the object form is needed when types are not known at compile time.
* <p>
* when the message is first created, and when <code>clearbody</code> is
* called, the body of the message is in write-only mode. after the first call
* to <code>reset</code> has been made, the message body is in read-only mode.
* after a message has been sent, the client that sent it can retain and modify
* it without affecting the message that has been sent. the same message object
* can be sent multiple times. when a message has been received, the provider
* has called <code>reset</code> so that the message body is in read-only mode
* for the client.
* <p>
* if <code>clearbody</code> is called on a message in read-only mode, the
* message body is cleared and the message is in write-only mode.
* <p>
* if a client attempts to read a message in write-only mode, a
* <code>messagenotreadableexception</code> is thrown.
* <p>
* if a client attempts to write a message in read-only mode, a
* <code>messagenotwriteableexception</code> is thrown.
*
* @openwire:marshaller code=24
* @see javax.jms.session#createbytesmessage()
* @see javax.jms.mapmessage
* @see javax.jms.message
* @see javax.jms.objectmessage
* @see javax.jms.streammessage
* @see javax.jms.textmessage
*/
public class activemqbytesmessage extends activemqmessage implements bytesmessage
public static final byte data_structure_type   commandtypes activemq_bytes_message
protected transient dataoutputstream dataout
protected transient bytearrayoutputstream bytesout
protected transient datainputstream datain
protected transient int length
public message copy
activemqbytesmessage copy   new activemqbytesmessage
copy copy
return copy
private void copy activemqbytesmessage copy
storecontent
super copy copy
copy dataout   null
copy bytesout   null
copy datain   null
public void onsend   throws jmsexception
super onsend
storecontent
private void storecontent
try
if  dataout    null
dataout close
bytesequence bs   bytesout tobytesequence
if  compressed
int pos   bs offset
bytesequencedata writeintbig bs  length
bs offset   pos
setcontent bs
bytesout   null
dataout   null
catch  ioexception ioe
throw new runtimeexception ioe getmessage    ioe      todo verify
// runtimeexception
public byte getdatastructuretype
return data_structure_type
public string getjmsxmimetype
return
/**
* clears out the message body. clearing a message's body does not clear its
* header values or property entries.
* <p>
* if this message body was read-only, calling this method leaves the
* message body in the same state as an empty body in a newly created
* message.
*
* @throws jmsexception if the jms provider fails to clear the message body
*                 due to some internal error.
*/
public void clearbody   throws jmsexception
super clearbody
this dataout   null
this datain   null
this bytesout   null
/**
* gets the number of bytes of the message body when the message is in
* read-only mode. the value returned can be used to allocate a byte array.
* the value returned is the entire length of the message body, regardless
* of where the pointer for reading the message is currently located.
*
* @return number of bytes in the message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messagenotreadableexception if the message is in write-only mode.
* @since 1.1
*/
public long getbodylength   throws jmsexception
initializereading
return length
/**
* reads a <code>boolean</code> from the bytes message stream.
*
* @return the <code>boolean</code> value read
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public boolean readboolean   throws jmsexception
initializereading
try
return this datain readboolean
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a signed 8-bit value from the bytes message stream.
*
* @return the next byte from the bytes message stream as a signed 8-bit
*         <code>byte</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public byte readbyte   throws jmsexception
initializereading
try
return this datain readbyte
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads an unsigned 8-bit number from the bytes message stream.
*
* @return the next byte from the bytes message stream, interpreted as an
*         unsigned 8-bit number
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readunsignedbyte   throws jmsexception
initializereading
try
return this datain readunsignedbyte
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a signed 16-bit number from the bytes message stream.
*
* @return the next two bytes from the bytes message stream, interpreted as
*         a signed 16-bit number
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public short readshort   throws jmsexception
initializereading
try
return this datain readshort
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads an unsigned 16-bit number from the bytes message stream.
*
* @return the next two bytes from the bytes message stream, interpreted as
*         an unsigned 16-bit integer
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readunsignedshort   throws jmsexception
initializereading
try
return this datain readunsignedshort
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a unicode character value from the bytes message stream.
*
* @return the next two bytes from the bytes message stream as a unicode
*         character
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public char readchar   throws jmsexception
initializereading
try
return this datain readchar
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a signed 32-bit integer from the bytes message stream.
*
* @return the next four bytes from the bytes message stream, interpreted as
*         an <code>int</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readint   throws jmsexception
initializereading
try
return this datain readint
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a signed 64-bit integer from the bytes message stream.
*
* @return the next eight bytes from the bytes message stream, interpreted
*         as a <code>long</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public long readlong   throws jmsexception
initializereading
try
return this datain readlong
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>float</code> from the bytes message stream.
*
* @return the next four bytes from the bytes message stream, interpreted as
*         a <code>float</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public float readfloat   throws jmsexception
initializereading
try
return this datain readfloat
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>double</code> from the bytes message stream.
*
* @return the next eight bytes from the bytes message stream, interpreted
*         as a <code>double</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public double readdouble   throws jmsexception
initializereading
try
return this datain readdouble
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a string that has been encoded using a modified utf-8 format from
* the bytes message stream.
* <p>
* for more information on the utf-8 format, see "file system safe ucs
* transformation format (fss_utf)", x/open preliminary specification,
* x/open company ltd., document number: p316. this information also appears
* in iso/iec 10646, annex p.
*
* @return a unicode string from the bytes message stream
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of bytes stream has been
*                 reached.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public string readutf   throws jmsexception
initializereading
try
return this datain readutf
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a byte array from the bytes message stream.
* <p>
* if the length of array <code>value</code> is less than the number of
* bytes remaining to be read from the stream, the array should be filled. a
* subsequent call reads the next increment, and so on.
* <p>
* if the number of bytes remaining in the stream is less than the length of
* array <code>value</code>, the bytes should be read into the array. the
* return value of the total number of bytes read will be less than the
* length of the array, indicating that there are no more bytes left to be
* read from the stream. the next read of the stream returns -1.
*
* @param value the buffer into which the data is read
* @return the total number of bytes read into the buffer, or -1 if there is
*         no more data because the end of the stream has been reached
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readbytes byte value  throws jmsexception
return readbytes value  value length
/**
* reads a portion of the bytes message stream.
* <p>
* if the length of array <code>value</code> is less than the number of
* bytes remaining to be read from the stream, the array should be filled. a
* subsequent call reads the next increment, and so on.
* <p>
* if the number of bytes remaining in the stream is less than the length of
* array <code>value</code>, the bytes should be read into the array. the
* return value of the total number of bytes read will be less than the
* length of the array, indicating that there are no more bytes left to be
* read from the stream. the next read of the stream returns -1. <p/> if
* <code>length</code> is negative, or <code>length</code> is greater
* than the length of the array <code>value</code>, then an
* <code>indexoutofboundsexception</code> is thrown. no bytes will be read
* from the stream for this exception case.
*
* @param value the buffer into which the data is read
* @param length the number of bytes to read; must be less than or equal to
*                <code>value.length</code>
* @return the total number of bytes read into the buffer, or -1 if there is
*         no more data because the end of the stream has been reached
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readbytes byte value  int length  throws jmsexception
initializereading
try
int n   0
while  n < length
int count   this datain read value  n  length   n
if  count < 0
break
n    count
if  n    0    length > 0
n    1
return n
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* writes a <code>boolean</code> to the bytes message stream as a 1-byte
* value. the value <code>true</code> is written as the value
* <code>(byte)1</code>; the value <code>false</code> is written as the
* value <code>(byte)0</code>.
*
* @param value the <code>boolean</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeboolean boolean value  throws jmsexception
initializewriting
try
this dataout writeboolean value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>byte</code> to the bytes message stream as a 1-byte
* value.
*
* @param value the <code>byte</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebyte byte value  throws jmsexception
initializewriting
try
this dataout writebyte value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>short</code> to the bytes message stream as two bytes,
* high byte first.
*
* @param value the <code>short</code> to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeshort short value  throws jmsexception
initializewriting
try
this dataout writeshort value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>char</code> to the bytes message stream as a 2-byte
* value, high byte first.
*
* @param value the <code>char</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writechar char value  throws jmsexception
initializewriting
try
this dataout writechar value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes an <code>int</code> to the bytes message stream as four bytes,
* high byte first.
*
* @param value the <code>int</code> to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeint int value  throws jmsexception
initializewriting
try
this dataout writeint value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>long</code> to the bytes message stream as eight bytes,
* high byte first.
*
* @param value the <code>long</code> to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writelong long value  throws jmsexception
initializewriting
try
this dataout writelong value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* converts the <code>float</code> argument to an <code>int</code> using
* the <code>floattointbits</code> method in class <code>float</code>,
* and then writes that <code>int</code> value to the bytes message stream
* as a 4-byte quantity, high byte first.
*
* @param value the <code>float</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writefloat float value  throws jmsexception
initializewriting
try
this dataout writefloat value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* converts the <code>double</code> argument to a <code>long</code>
* using the <code>doubletolongbits</code> method in class
* <code>double</code>, and then writes that <code>long</code> value to
* the bytes message stream as an 8-byte quantity, high byte first.
*
* @param value the <code>double</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writedouble double value  throws jmsexception
initializewriting
try
this dataout writedouble value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a string to the bytes message stream using utf-8 encoding in a
* machine-independent manner.
* <p>
* for more information on the utf-8 format, see "file system safe ucs
* transformation format (fss_utf)", x/open preliminary specification,
* x/open company ltd., document number: p316. this information also appears
* in iso/iec 10646, annex p.
*
* @param value the <code>string</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeutf string value  throws jmsexception
initializewriting
try
this dataout writeutf value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a byte array to the bytes message stream.
*
* @param value the byte array to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebytes byte value  throws jmsexception
initializewriting
try
this dataout write value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a portion of a byte array to the bytes message stream.
*
* @param value the byte array value to be written
* @param offset the initial offset within the byte array
* @param length the number of bytes to use
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebytes byte value  int offset  int length  throws jmsexception
initializewriting
try
this dataout write value  offset  length
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes an object to the bytes message stream.
* <p>
* this method works only for the objectified primitive object types (<code>integer</code>,<code>double</code>,
* <code>long</code> &nbsp;...), <code>string</code> objects, and byte
* arrays.
*
* @param value the object in the java programming language ("java object")
*                to be written; it must not be null
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messageformatexception if the object is of an invalid type.
* @throws messagenotwriteableexception if the message is in read-only mode.
* @throws java.lang.nullpointerexception if the parameter
*                 <code>value</code> is null.
*/
public void writeobject object value  throws jmsexception
if  value    null
throw new nullpointerexception
initializewriting
if  value instanceof boolean
writeboolean   boolean value  booleanvalue
else if  value instanceof character
writechar   character value  charvalue
else if  value instanceof byte
writebyte   byte value  bytevalue
else if  value instanceof short
writeshort   short value  shortvalue
else if  value instanceof integer
writeint   integer value  intvalue
else if  value instanceof long
writelong   long value  longvalue
else if  value instanceof float
writefloat   float value  floatvalue
else if  value instanceof double
writedouble   double value  doublevalue
else if  value instanceof string
writeutf value tostring
else if  value instanceof byte
writebytes  byte value
else
throw new messageformatexception     value getclass
/**
* puts the message body in read-only mode and repositions the stream of
* bytes to the beginning.
*
* @throws jmsexception if an internal error occurs
*/
public void reset   throws jmsexception
storecontent
this bytesout   null
this datain   null
this dataout   null
setreadonlybody true
private void initializewriting   throws jmsexception
checkreadonlybody
if  this dataout    null
this bytesout   new bytearrayoutputstream
outputstream os   bytesout
activemqconnection connection   getconnection
if  connection    null    connection isusecompression
// keep track of the real length of the content if
// we are compressed.
try
os write new byte
catch  ioexception e
throw jmsexceptionsupport create e
length   0
compressed   true
deflater deflater   new deflater deflater best_speed
os   new filteroutputstream new deflateroutputstream os  deflater
public void write byte arg0  throws ioexception
length    arg0 length
out write arg0
public void write byte arg0  int arg1  int arg2  throws ioexception
length    arg2
out write arg0  arg1  arg2
public void write int arg0  throws ioexception
length
out write arg0
this dataout   new dataoutputstream os
protected void checkwriteonlybody   throws messagenotreadableexception
if   readonlybody
throw new messagenotreadableexception
private void initializereading   throws jmsexception
checkwriteonlybody
if  datain    null
bytesequence data   getcontent
if  data    null
data   new bytesequence new byte     0  0
inputstream is   new bytearrayinputstream data
if  iscompressed
// keep track of the real length of the content if
// we are compressed.
try
datainputstream dis   new datainputstream is
length   dis readint
dis close
catch  ioexception e
throw jmsexceptionsupport create e
is   new inflaterinputstream is
else
length   data getlength
datain   new datainputstream is
public void setobjectproperty string name  object value  throws jmsexception
initializewriting
super setobjectproperty name  value
public string tostring
return super tostring             bytesout       dataout       datain