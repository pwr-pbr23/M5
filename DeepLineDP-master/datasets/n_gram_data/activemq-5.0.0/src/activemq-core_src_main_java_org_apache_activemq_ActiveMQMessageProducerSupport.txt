/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms deliverymode
import javax jms destination
import javax jms illegalstateexception
import javax jms jmsexception
import javax jms message
import javax jms messageproducer
/**
* a useful base class for implementing a {@link messageproducer}
*
* @version $revision: $
*/
public abstract class activemqmessageproducersupport implements messageproducer  closeable
protected activemqsession session
protected boolean disablemessageid
protected boolean disablemessagetimestamp
protected int defaultdeliverymode
protected int defaultpriority
protected long defaulttimetolive
public activemqmessageproducersupport activemqsession session
this session   session
disablemessagetimestamp   session connection isdisabletimestampsbydefault
/**
* sets whether message ids are disabled.
* <p>
* since message ids take some effort to create and increase a message's
* size, some jms providers may be able to optimize message overhead if
* they are given a hint that the message id is not used by an application.
* by calling the <code>setdisablemessageid</code> method on this message
* producer, a jms client enables this potential optimization for all
* messages sent by this message producer. if the jms provider accepts this
* hint, these messages must have the message id set to null; if the
* provider ignores the hint, the message id must be set to its normal
* unique value.
* <p>
* message ids are enabled by default.
*
* @param value indicates if message ids are disabled
* @throws javax.jms.jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
*/
public void setdisablemessageid boolean value  throws jmsexception
checkclosed
this disablemessageid   value
/**
* gets an indication of whether message ids are disabled.
*
* @return an indication of whether message ids are disabled
* @throws javax.jms.jmsexception if the jms provider fails to determine if message ids are
*                      disabled due to some internal error.
*/
public boolean getdisablemessageid   throws jmsexception
checkclosed
return this disablemessageid
/**
* sets whether message timestamps are disabled.
* <p>
* since timestamps take some effort to create and increase a message's
* size, some jms providers may be able to optimize message overhead if
* they are given a hint that the timestamp is not used by an application.
* by calling the <code>setdisablemessagetimestamp</code> method on this
* message producer, a jms client enables this potential optimization for
* all messages sent by this message producer. if the jms provider accepts
* this hint, these messages must have the timestamp set to zero; if the
* provider ignores the hint, the timestamp must be set to its normal
* value.
* <p>
* message timestamps are enabled by default.
*
* @param value indicates if message timestamps are disabled
* @throws javax.jms.jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
*/
public void setdisablemessagetimestamp boolean value  throws jmsexception
checkclosed
this disablemessagetimestamp   value
/**
* gets an indication of whether message timestamps are disabled.
*
* @return an indication of whether message timestamps are disabled
* @throws javax.jms.jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
*/
public boolean getdisablemessagetimestamp   throws jmsexception
checkclosed
return this disablemessagetimestamp
/**
* sets the producer's default delivery mode.
* <p>
* delivery mode is set to <code>persistent</code> by default.
*
* @param newdeliverymode the message delivery mode for this message producer; legal
*                        values are <code>deliverymode.non_persistent</code> and
*                        <code>deliverymode.persistent</code>
* @throws javax.jms.jmsexception if the jms provider fails to set the delivery mode due to
*                      some internal error.
* @see javax.jms.messageproducer#getdeliverymode
* @see javax.jms.deliverymode#non_persistent
* @see javax.jms.deliverymode#persistent
* @see javax.jms.message#default_delivery_mode
*/
public void setdeliverymode int newdeliverymode  throws jmsexception
if  newdeliverymode    deliverymode persistent    newdeliverymode    deliverymode non_persistent
throw new javax jms illegalstateexception     newdeliverymode
checkclosed
this defaultdeliverymode   newdeliverymode
/**
* gets the producer's default delivery mode.
*
* @return the message delivery mode for this message producer
* @throws javax.jms.jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
*/
public int getdeliverymode   throws jmsexception
checkclosed
return this defaultdeliverymode
/**
* sets the producer's default priority.
* <p>
* the jms api defines ten levels of priority value, with 0 as the lowest
* priority and 9 as the highest. clients should consider priorities 0-4 as
* gradations of normal priority and priorities 5-9 as gradations of
* expedited priority. priority is set to 4 by default.
*
* @param newdefaultpriority the message priority for this message producer; must be a
*                           value between 0 and 9
* @throws javax.jms.jmsexception if the jms provider fails to set the delivery mode due to
*                      some internal error.
* @see javax.jms.messageproducer#getpriority
* @see javax.jms.message#default_priority
*/
public void setpriority int newdefaultpriority  throws jmsexception
if  newdefaultpriority < 0    newdefaultpriority > 9
throw new illegalstateexception
checkclosed
this defaultpriority   newdefaultpriority
/**
* gets the producer's default priority.
*
* @return the message priority for this message producer
* @throws javax.jms.jmsexception if the jms provider fails to close the producer due to
*                      some internal error.
* @see javax.jms.messageproducer#setpriority
*/
public int getpriority   throws jmsexception
checkclosed
return this defaultpriority
/**
* sets the default length of time in milliseconds from its dispatch time
* that a produced message should be retained by the message system.
* <p>
* time to live is set to zero by default.
*
* @param timetolive the message time to live in milliseconds; zero is unlimited
* @throws javax.jms.jmsexception if the jms provider fails to set the time to live due to
*                      some internal error.
* @see javax.jms.messageproducer#gettimetolive
* @see javax.jms.message#default_time_to_live
*/
public void settimetolive long timetolive  throws jmsexception
if  timetolive < 0l
throw new illegalstateexception
checkclosed
this defaulttimetolive   timetolive
/**
* gets the default length of time in milliseconds from its dispatch time
* that a produced message should be retained by the message system.
*
* @return the message time to live in milliseconds; zero is unlimited
* @throws javax.jms.jmsexception if the jms provider fails to get the time to live due to
*                      some internal error.
* @see javax.jms.messageproducer#settimetolive
*/
public long gettimetolive   throws jmsexception
checkclosed
return this defaulttimetolive
/**
* sends a message using the <code>messageproducer</code>'s default
* delivery mode, priority, and time to live.
*
* @param message the message to send
* @throws javax.jms.jmsexception                if the jms provider fails to send the message due to some
*                                     internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with a <code>
*                                     messageproducer</code> with an invalid destination.
* @throws unsupportedoperationexception
*                                     if a client uses this method with a <code>
*                                     messageproducer</code> that did not specify a
*                                     destination at creation time.
* @see javax.jms.session#createproducer
* @see javax.jms.messageproducer
* @since 1.1
*/
public void send message message  throws jmsexception
this send this getdestination
message
this defaultdeliverymode
this defaultpriority
this defaulttimetolive
/**
* sends a message to the destination, specifying delivery mode, priority,
* and time to live.
*
* @param message      the message to send
* @param deliverymode the delivery mode to use
* @param priority     the priority for this message
* @param timetolive   the message's lifetime (in milliseconds)
* @throws javax.jms.jmsexception                if the jms provider fails to send the message due to some
*                                     internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with a <code>
*                                     messageproducer</code> with an invalid destination.
* @throws unsupportedoperationexception
*                                     if a client uses this method with a <code>
*                                     messageproducer</code> that did not specify a
*                                     destination at creation time.
* @see javax.jms.session#createproducer
* @since 1.1
*/
public void send message message  int deliverymode  int priority  long timetolive  throws jmsexception
this send this getdestination
message
deliverymode
priority
timetolive
/**
* sends a message to a destination for an unidentified message producer.
* uses the <code>messageproducer</code>'s default delivery mode,
* priority, and time to live.
* <p>
* typically, a message producer is assigned a destination at creation
* time; however, the jms api also supports unidentified message producers,
* which require that the destination be supplied every time a message is
* sent.
*
* @param destination the destination to send this message to
* @param message     the message to send
* @throws javax.jms.jmsexception                if the jms provider fails to send the message due to some
*                                     internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with an invalid destination.
* @throws unsupportedoperationexception
*                                     if a client uses this method with a <code>
*                                     messageproducer</code> that specified a destination at
*                                     creation time.
* @see javax.jms.session#createproducer
* @see javax.jms.messageproducer
*/
public void send destination destination  message message  throws jmsexception
this send destination
message
this defaultdeliverymode
this defaultpriority
this defaulttimetolive
protected abstract void checkclosed   throws illegalstateexception