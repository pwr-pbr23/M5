/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import java io ioexception
import java util arraylist
import java util date
import java util hashmap
import java util list
import java util map
import javax jms deliverymode
import javax jms jmsexception
import javax management openmbean arraytype
import javax management openmbean compositedata
import javax management openmbean compositedatasupport
import javax management openmbean compositetype
import javax management openmbean opendataexception
import javax management openmbean opentype
import javax management openmbean simpletype
import org apache activemq command activemqbytesmessage
import org apache activemq command activemqmapmessage
import org apache activemq command activemqmessage
import org apache activemq command activemqobjectmessage
import org apache activemq command activemqstreammessage
import org apache activemq command activemqtextmessage
import org apache activemq command message
public final class opentypesupport
interface opentypefactory
compositetype getcompositetype   throws opendataexception
map<string  object> getfields object o  throws opendataexception
private static final map<class  messageopentypefactory> open_type_factories   new hashmap<class  messageopentypefactory>
abstract static class abstractopentypefactory implements opentypefactory
private compositetype compositetype
private list<string> itemnameslist   new arraylist<string>
private list<string> itemdescriptionslist   new arraylist<string>
private list<opentype> itemtypeslist   new arraylist<opentype>
public compositetype getcompositetype   throws opendataexception
if  compositetype    null
init
compositetype   createcompositetype
return compositetype
protected void init   throws opendataexception
protected compositetype createcompositetype   throws opendataexception
string itemnames   itemnameslist toarray new string
string itemdescriptions   itemdescriptionslist toarray new string
opentype itemtypes   itemtypeslist toarray new opentype
return new compositetype gettypename    getdescription    itemnames  itemdescriptions  itemtypes
protected abstract string gettypename
protected void additem string name  string description  opentype type
itemnameslist add name
itemdescriptionslist add description
itemtypeslist add type
protected string getdescription
return gettypename
public map<string  object> getfields object o  throws opendataexception
map<string  object> rc   new hashmap<string  object>
return rc
static class messageopentypefactory extends abstractopentypefactory
protected string gettypename
return activemqmessage class getname
protected void init   throws opendataexception
super init
additem       simpletype string
additem       simpletype string
additem       simpletype string
additem       simpletype string
additem       simpletype string
additem       simpletype string
additem       simpletype long
additem       simpletype integer
additem       simpletype boolean
additem       simpletype date
additem       simpletype string
public map<string  object> getfields object o  throws opendataexception
activemqmessage m    activemqmessage o
map<string  object> rc   super getfields o
rc put    m getjmscorrelationid
rc put        m getjmsdestination
rc put    m getjmsmessageid
rc put        m getjmsreplyto
rc put    m getjmstype
rc put    m getjmsdeliverymode      deliverymode persistent ?
rc put    long valueof m getjmsexpiration
rc put    integer valueof m getjmspriority
rc put    boolean valueof m getjmsredelivered
rc put    new date m getjmstimestamp
try
rc put        m getproperties
catch  ioexception e
rc put
return rc
static class bytemessageopentypefactory extends messageopentypefactory
protected string gettypename
return activemqbytesmessage class getname
protected void init   throws opendataexception
super init
additem       simpletype long
additem       new arraytype 1  simpletype byte
public map<string  object> getfields object o  throws opendataexception
activemqbytesmessage m    activemqbytesmessage o
map<string  object> rc   super getfields o
long length   0
try
length   m getbodylength
rc put    long valueof length
catch  jmsexception e
rc put    long valueof 0
try
byte preview   new byte
m readbytes preview
// this is whack! java 1.5 jmx spec does not support primitive
// arrays!
// in 1.6 it seems it is supported.. but until then...
byte data   new byte
for  int i   0  i < data length  i
data   new byte preview
rc put    data
catch  jmsexception e
rc put    new byte
return rc
static class mapmessageopentypefactory extends messageopentypefactory
protected string gettypename
return activemqmapmessage class getname
protected void init   throws opendataexception
super init
additem       simpletype string
public map<string  object> getfields object o  throws opendataexception
activemqmapmessage m    activemqmapmessage o
map<string  object> rc   super getfields o
try
rc put        m getcontentmap
catch  jmsexception e
rc put
return rc
static class objectmessageopentypefactory extends messageopentypefactory
protected string gettypename
return activemqobjectmessage class getname
protected void init   throws opendataexception
super init
public map<string  object> getfields object o  throws opendataexception
map<string  object> rc   super getfields o
return rc
static class streammessageopentypefactory extends messageopentypefactory
protected string gettypename
return activemqstreammessage class getname
protected void init   throws opendataexception
super init
public map<string  object> getfields object o  throws opendataexception
map<string  object> rc   super getfields o
return rc
static class textmessageopentypefactory extends messageopentypefactory
protected string gettypename
return activemqtextmessage class getname
protected void init   throws opendataexception
super init
additem       simpletype string
public map<string  object> getfields object o  throws opendataexception
activemqtextmessage m    activemqtextmessage o
map<string  object> rc   super getfields o
try
rc put        m gettext
catch  jmsexception e
rc put
return rc
static
open_type_factories put activemqmessage class  new messageopentypefactory
open_type_factories put activemqbytesmessage class  new bytemessageopentypefactory
open_type_factories put activemqmapmessage class  new mapmessageopentypefactory
open_type_factories put activemqobjectmessage class  new objectmessageopentypefactory
open_type_factories put activemqstreammessage class  new streammessageopentypefactory
open_type_factories put activemqtextmessage class  new textmessageopentypefactory
private opentypesupport
public static opentypefactory getfactory class<? extends message> clazz  throws opendataexception
return open_type_factories get clazz
public static compositedata convert message message  throws opendataexception
opentypefactory f   getfactory message getclass
if  f    null
throw new opendataexception     message getclass   getname
compositetype ct   f getcompositetype
map<string  object> fields   f getfields message
return new compositedatasupport ct  fields