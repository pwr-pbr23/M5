/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java io ioexception
import java net uri
import java net urisyntaxexception
import java util iterator
import java util concurrent concurrenthashmap
import org apache activemq command discoveryevent
import org apache activemq transport transport
import org apache activemq transport transportfactory
import org apache activemq transport discovery discoveryagent
import org apache activemq transport discovery discoveryagentfactory
import org apache activemq transport discovery discoverylistener
import org apache activemq util servicestopper
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* a network connector which uses a discovery agent to detect the remote brokers
* available and setup a connection to each available remote broker
*
* @org.apache.xbean.xbean element="networkconnector"
* @version $revision$
*/
public class discoverynetworkconnector extends networkconnector implements discoverylistener
private static final log log   logfactory getlog discoverynetworkconnector class
private discoveryagent discoveryagent
private concurrenthashmap<uri  networkbridge> bridges   new concurrenthashmap<uri  networkbridge>
public discoverynetworkconnector
public discoverynetworkconnector uri discoveryuri  throws ioexception
seturi discoveryuri
public void seturi uri discoveryuri  throws ioexception
setdiscoveryagent discoveryagentfactory creatediscoveryagent discoveryuri
public void onserviceadd discoveryevent event
string localuriname   localuri getscheme         localuri gethost
// ignore events once we start stopping.
if  servicesupport isstopped      servicesupport isstopping
return
string url   event getservicename
if  url    null
uri uri
try
uri   new uri url
catch  urisyntaxexception e
log warn     url       e  e
return
// should we try to connect to that uri?
if  bridges containskey uri     localuri equals uri      connectionfilter    null     connectionfilter connectto uri
return
uri connecturi   uri
log info     localuriname       connecturi
transport remotetransport
try
remotetransport   transportfactory connect connecturi
catch  exception e
log warn     localuriname       e getmessage
log debug     e  e
return
transport localtransport
try
localtransport   createlocaltransport
catch  exception e
servicesupport dispose remotetransport
log warn     localuriname       e getmessage
log debug     e  e
return
networkbridge bridge   createbridge localtransport  remotetransport  event
bridges put uri  bridge
try
bridge start
catch  exception e
servicesupport dispose localtransport
servicesupport dispose remotetransport
log warn     localuriname       uri       e
log debug     e  e
try
discoveryagent servicefailed event
catch  ioexception e1
return
public void onserviceremove discoveryevent event
string url   event getservicename
if  url    null
uri uri
try
uri   new uri url
catch  urisyntaxexception e
log warn     url       e  e
return
networkbridge bridge   bridges remove uri
if  bridge    null
return
servicesupport dispose bridge
public discoveryagent getdiscoveryagent
return discoveryagent
public void setdiscoveryagent discoveryagent discoveryagent
this discoveryagent   discoveryagent
if  discoveryagent    null
this discoveryagent setdiscoverylistener this
protected void handlestart   throws exception
if  discoveryagent    null
throw new illegalstateexception
this discoveryagent start
super handlestart
protected void handlestop servicestopper stopper  throws exception
for  iterator<networkbridge> i   bridges values   iterator    i hasnext
networkbridge bridge   i next
try
bridge stop
catch  exception e
stopper onexception this  e
try
this discoveryagent stop
catch  exception e
stopper onexception this  e
super handlestop stopper
protected networkbridge createbridge transport localtransport  transport remotetransport  final discoveryevent event
networkbridgelistener listener   new networkbridgelistener
public void bridgefailed
if   servicesupport isstopped
try
discoveryagent servicefailed event
catch  ioexception e
public void onstart networkbridge bridge
registernetworkbridgembean bridge
public void onstop networkbridge bridge
unregisternetworkbridgembean bridge
demandforwardingbridge result   networkbridgefactory createbridge this  localtransport  remotetransport  listener
return configurebridge result
public string getname
return discoveryagent tostring