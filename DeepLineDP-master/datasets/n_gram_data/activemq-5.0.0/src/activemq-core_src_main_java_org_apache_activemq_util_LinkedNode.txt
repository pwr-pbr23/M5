/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
/**
* provides a base class for you to extend when you want object to maintain a
* doubly linked list to other objects without using a collection class.
*
* @author chirino
*/
public class linkednode
protected linkednode next   this
protected linkednode prev   this
protected boolean tail   true
public linkednode getheadnode
if  isheadnode
return this
if  istailnode
return next
linkednode rc   prev
while   rc isheadnode
rc   rc prev
return rc
public linkednode gettailnode
if  istailnode
return this
if  isheadnode
return prev
linkednode rc   next
while   rc istailnode
rc   rc next
return rc
public linkednode getnext
return tail ? null   next
public linkednode getprevious
return prev tail ? null   prev
public boolean isheadnode
return prev istailnode
public boolean istailnode
return tail
/**
* @param righthead the node to link after this node.
* @return this
*/
public linkednode linkafter linkednode righthead
if  righthead    this
throw new illegalargumentexception
if   righthead isheadnode
throw new illegalargumentexception
linkednode righttail   righthead prev
if  tail
tail   false
else
righttail tail   false
righthead prev   this     link the head of the right side
righttail next   next     link the tail of the right side
next prev   righttail     link the head of the left side
next   righthead     link the tail of the left side
return this
/**
* @param lefthead the node to link after this node.
* @return
* @return this
*/
public linkednode linkbefore linkednode lefthead
if  lefthead    this
throw new illegalargumentexception
if   lefthead isheadnode
throw new illegalargumentexception
// the left side is no longer going to be a tail..
linkednode lefttail   lefthead prev
lefttail tail   false
lefttail next   this     link the tail of the left side
lefthead prev   prev     link the head of the left side
prev next   lefthead     link the tail of the right side
prev   lefttail     link the head of the right side
return lefthead
/**
* removes this node out of the linked list it is chained in.
*/
public void unlink
// if we are allready unlinked...
if  prev    this
return
if  tail
prev tail   true
// update the peers links..
next prev   prev
prev next   next
// update our links..
next   this
prev   this
tail   true