/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport discovery
import java io ioexception
import java net uri
import java util hashmap
import java util map
import org apache activemq transport transport
import org apache activemq transport transportserver
import org apache activemq transport failover failovertransportfactory
import org apache activemq util introspectionsupport
import org apache activemq util urisupport compositedata
/**
* @version $revision$
*/
public class discoverytransportfactory extends failovertransportfactory
public transport createtransport compositedata compositdata  throws ioexception
map<string  string> parameters   new hashmap<string  string> compositdata getparameters
discoverytransport transport   new discoverytransport createtransport parameters
discoveryagent discoveryagent   discoveryagentfactory creatediscoveryagent compositdata getcomponents
transport setdiscoveryagent discoveryagent
introspectionsupport setproperties transport  parameters
return transport
public transportserver dobind string brokerid  uri location  throws ioexception
throw new ioexception     location
// try{
//            compositedata compositdata=urisupport.parsecomposite(location);
//            uri[] components=compositdata.getcomponents();
//            if(components.length!=1){
//                throw new ioexception("invalid location: "+location
//                                +", the location must have 1 and only 1 composite uri in it - components = "
//                                +components.length);
//            }
//            map parameters=new hashmap(compositdata.getparameters());
//            discoverytransportserver server=new discoverytransportserver(transportfactory.bind(value,components[0]));
//            introspectionsupport.setproperties(server,parameters,"discovery");
//            discoveryagent discoveryagent=discoveryagentfactory.creatediscoveryagent(server.getdiscovery());
//            // use the host name to configure the group of the discovery agent.
//            if(!parameters.containskey("discovery.group")){
//                if(compositdata.gethost()!=null){
//                    parameters.put("discovery.group",compositdata.gethost());
//                }
//            }
//            if(!parameters.containskey("discovery.brokername")){
//                parameters.put("discovery.brokername",value);
//            }
//            introspectionsupport.setproperties(discoveryagent,parameters,"discovery.");
//            server.setdiscoveryagent(discoveryagent);
//            return server;
//        }catch(urisyntaxexception e){
//            throw new ioexception("invalid location: "+location);
//        }