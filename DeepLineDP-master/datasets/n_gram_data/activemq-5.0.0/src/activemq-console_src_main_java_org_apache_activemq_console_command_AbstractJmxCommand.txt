/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java io ioexception
import java net malformedurlexception
import java util list
import javax management remote jmxconnector
import javax management remote jmxconnectorfactory
import javax management remote jmxserviceurl
import org apache activemq console formatter globalwriter
public abstract class abstractjmxcommand extends abstractcommand
public static final string default_jmx_url
private jmxserviceurl jmxserviceurl
private jmxconnector  jmxconnector
/**
* get the current specified jmx service url.
* @return jmx service url
*/
protected jmxserviceurl getjmxserviceurl
return jmxserviceurl
/**
* get the current jmx service url being used, or create a default one if no jmx service url has been specified.
* @return jmx service url
* @throws malformedurlexception
*/
protected jmxserviceurl usejmxserviceurl   throws malformedurlexception
if  getjmxserviceurl      null
setjmxserviceurl default_jmx_url
return getjmxserviceurl
/**
* sets the jmx service url to use.
* @param jmxserviceurl - new jmx service url to use
*/
protected void setjmxserviceurl jmxserviceurl jmxserviceurl
this jmxserviceurl   jmxserviceurl
/**
* sets the jmx service url to use.
* @param jmxserviceurl - new jmx service url to use
* @throws malformedurlexception
*/
protected void setjmxserviceurl string jmxserviceurl  throws malformedurlexception
setjmxserviceurl new jmxserviceurl jmxserviceurl
/**
* create a jmx connector using the current specified jmx service url. if there is an existing connection,
* it tries to reuse this connection.
* @return created jmx connector
* @throws ioexception
*/
protected jmxconnector createjmxconnector   throws ioexception
// reuse the previous connection
if  jmxconnector    null
jmxconnector connect
return jmxconnector
// create a new jmx connector
jmxconnector   jmxconnectorfactory connect usejmxserviceurl
return jmxconnector
/**
* close the current jmx connector
*/
protected void closejmxconnector
try
if  jmxconnector    null
jmxconnector close
jmxconnector   null
catch  ioexception e
/**
* handle the --jmxurl option.
* @param token - option token to handle
* @param tokens - succeeding command arguments
* @throws exception
*/
protected void handleoption string token  list<string> tokens  throws exception
// try to handle the options first
if  token equals
// if no jmx url specified, or next token is a new option
if  tokens isempty        string tokens get 0   startswith
globalwriter printexception new illegalargumentexception
// if jmx url already specified
if  getjmxserviceurl      null
globalwriter printexception new illegalargumentexception
tokens clear
string strjmxurl    string tokens remove 0
try
this setjmxserviceurl new jmxserviceurl strjmxurl
catch  malformedurlexception e
globalwriter printexception e
tokens clear
else
// let the super class handle the option
super handleoption token  tokens