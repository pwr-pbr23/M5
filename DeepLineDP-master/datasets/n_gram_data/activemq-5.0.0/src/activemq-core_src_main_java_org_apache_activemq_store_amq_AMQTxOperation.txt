/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store amq
import java io datainput
import java io dataoutput
import java io ioexception
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command journaltopicack
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq kaha impl async location
import org apache activemq util bytesequence
import org apache activemq wireformat wireformat
/**
*/
public class amqtxoperation
public static final byte add_operation_type   0
public static final byte remove_operation_type   1
public static final byte ack_operation_type   3
private byte operationtype
private activemqdestination destination
private object data
private location location
public amqtxoperation
public amqtxoperation byte operationtype  activemqdestination destination  object data  location location
this operationtype   operationtype
this destination   destination
this data   data
this location   location
/**
* @return the data
*/
public object getdata
return this data
/**
* @param data the data to set
*/
public void setdata object data
this data   data
/**
* @return the location
*/
public location getlocation
return this location
/**
* @param location the location to set
*/
public void setlocation location location
this location   location
/**
* @return the operationtype
*/
public byte getoperationtype
return this operationtype
/**
* @param operationtype the operationtype to set
*/
public void setoperationtype byte operationtype
this operationtype   operationtype
public boolean replay amqpersistenceadapter adapter  connectioncontext context  throws ioexception
boolean result   false
amqmessagestore store    amqmessagestore adapter createmessagestore destination
if  operationtype    add_operation_type
result   store replayaddmessage context   message data  location
else if  operationtype    remove_operation_type
result   store replayremovemessage context   messageack data
else
journaltopicack ack    journaltopicack data
result     amqtopicmessagestore store  replayacknowledge context  ack getclientid    ack
getsubscritionname    ack getmessageid
return result
public void writeexternal wireformat wireformat  dataoutput dos  throws ioexception
location writeexternal dos
bytesequence packet   wireformat marshal getdata
dos writeint packet length
dos write packet data  packet offset  packet length
packet   wireformat marshal destination
dos writeint packet length
dos write packet data  packet offset  packet length
public void readexternal wireformat wireformat  datainput dis  throws ioexception
this location   new location
this location readexternal dis
int size   dis readint
byte data   new byte
dis readfully data
setdata wireformat unmarshal new bytesequence data
size   dis readint
data   new byte
dis readfully data
this destination    activemqdestination wireformat unmarshal new bytesequence data