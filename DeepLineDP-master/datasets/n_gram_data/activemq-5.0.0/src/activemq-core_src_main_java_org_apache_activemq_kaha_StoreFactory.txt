/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha
import java io file
import java io ioexception
import java util concurrent atomic atomiclong
import org apache activemq kaha impl kahastore
/**
* factory for creating stores
*
* @version $revision: 1.2 $
*/
public final class storefactory
private storefactory
/**
* open or create a store
*
* @param name
* @param mode
* @return the opened/created store
* @throws ioexception
*/
public static store open string name  string mode  throws ioexception
return new kahastore name  mode new atomiclong
/**
* open or create a store
*
* @param directory
* @param mode
* @return
* @throws ioexception
*/
public static store open file directory  string mode  throws ioexception
return new kahastore directory  mode  new atomiclong
/**
* open or create a store
* @param name
* @param mode
* @param size
* @return the opened/created store
* @throws ioexception
*/
public static store open string name  string mode  atomiclong size  throws ioexception
return new kahastore name  mode size
/**
* open or create a store
*
* @param directory
* @param mode
* @param size
* @return
* @throws ioexception
*/
public static store open file directory  string mode  atomiclong size  throws ioexception
return new kahastore directory  mode  size
/**
* delete a database
*
* @param name of the database
* @return true if successful
* @throws ioexception
*/
public static boolean delete string name  throws ioexception
kahastore store   new kahastore name
return store delete
/**
* delete a database
*
* @param directory
* @return true if successful
* @throws ioexception
*/
public static boolean delete file directory  throws ioexception
kahastore store   new kahastore directory
return store delete