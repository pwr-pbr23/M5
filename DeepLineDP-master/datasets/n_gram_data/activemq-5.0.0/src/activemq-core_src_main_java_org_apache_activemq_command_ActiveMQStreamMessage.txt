/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io bufferedinputstream
import java io datainputstream
import java io dataoutputstream
import java io eofexception
import java io ioexception
import java io inputstream
import java io outputstream
import java util zip deflateroutputstream
import java util zip inflaterinputstream
import javax jms jmsexception
import javax jms messageeofexception
import javax jms messageformatexception
import javax jms messagenotreadableexception
import javax jms messagenotwriteableexception
import javax jms streammessage
import org apache activemq activemqconnection
import org apache activemq util bytearrayinputstream
import org apache activemq util bytearrayoutputstream
import org apache activemq util bytesequence
import org apache activemq util jmsexceptionsupport
import org apache activemq util marshallingsupport
/**
* a <code>streammessage</code> object is used to send a stream of primitive
* types in the java programming language. it is filled and read sequentially.
* it inherits from the <code>message</code> interface and adds a stream
* message body. its methods are based largely on those found in
* <code>java.io.datainputstream</code> and
* <code>java.io.dataoutputstream</code>. <p/>
* <p>
* the primitive types can be read or written explicitly using methods for each
* type. they may also be read or written generically as objects. for instance,
* a call to <code>streammessage.writeint(6)</code> is equivalent to
* <code>streammessage.writeobject(new
* integer(6))</code>. both forms are
* provided, because the explicit form is convenient for static programming, and
* the object form is needed when types are not known at compile time. <p/>
* <p>
* when the message is first created, and when <code>clearbody</code> is
* called, the body of the message is in write-only mode. after the first call
* to <code>reset</code> has been made, the message body is in read-only mode.
* after a message has been sent, the client that sent it can retain and modify
* it without affecting the message that has been sent. the same message object
* can be sent multiple times. when a message has been received, the provider
* has called <code>reset</code> so that the message body is in read-only mode
* for the client. <p/>
* <p>
* if <code>clearbody</code> is called on a message in read-only mode, the
* message body is cleared and the message body is in write-only mode. <p/>
* <p>
* if a client attempts to read a message in write-only mode, a
* <code>messagenotreadableexception</code> is thrown. <p/>
* <p>
* if a client attempts to write a message in read-only mode, a
* <code>messagenotwriteableexception</code> is thrown. <p/>
* <p>
* <code>streammessage</code> objects support the following conversion table.
* the marked cases must be supported. the unmarked cases must throw a
* <code>jmsexception</code>. the <code>string</code>-to-primitive
* conversions may throw a runtime exception if the primitive's
* <code>valueof()</code> method does not accept it as a valid
* <code>string</code> representation of the primitive. <p/>
* <p>
* a value written as the row type can be read as the column type. <p/>
*
* <pre>
*  | | boolean byte short char int long float double string byte[]
* |----------------------------------------------------------------------
* |boolean | x x |byte | x x x x x |short | x x x x |char | x x |int | x x x
* |long | x x |float | x x x |double | x x |string | x x x x x x x x |byte[] |
* x |----------------------------------------------------------------------
*
* </pre>
*
* <p/>
* <p>
* attempting to read a null value as a primitive type must be treated as
* calling the primitive's corresponding <code>valueof(string)</code>
* conversion method with a null value. since <code>char</code> does not
* support a <code>string</code> conversion, attempting to read a null value
* as a <code>char</code> must throw a <code>nullpointerexception</code>.
*
* @openwire:marshaller code="27"
* @see javax.jms.session#createstreammessage()
* @see javax.jms.bytesmessage
* @see javax.jms.mapmessage
* @see javax.jms.message
* @see javax.jms.objectmessage
* @see javax.jms.textmessage
*/
public class activemqstreammessage extends activemqmessage implements streammessage
public static final byte data_structure_type   commandtypes activemq_stream_message
protected transient dataoutputstream dataout
protected transient bytearrayoutputstream bytesout
protected transient datainputstream datain
protected transient int remainingbytes    1
public message copy
activemqstreammessage copy   new activemqstreammessage
copy copy
return copy
private void copy activemqstreammessage copy
storecontent
super copy copy
copy dataout   null
copy bytesout   null
copy datain   null
public void onsend   throws jmsexception
super onsend
storecontent
private void storecontent
if  dataout    null
try
dataout close
setcontent bytesout tobytesequence
bytesout   null
dataout   null
catch  ioexception ioe
throw new runtimeexception ioe
public byte getdatastructuretype
return data_structure_type
public string getjmsxmimetype
return
/**
* clears out the message body. clearing a message's body does not clear its
* header values or property entries. <p/>
* <p>
* if this message body was read-only, calling this method leaves the
* message body in the same state as an empty body in a newly created
* message.
*
* @throws jmsexception if the jms provider fails to clear the message body
*                 due to some internal error.
*/
public void clearbody   throws jmsexception
super clearbody
this dataout   null
this datain   null
this bytesout   null
this remainingbytes    1
/**
* reads a <code>boolean</code> from the stream message.
*
* @return the <code>boolean</code> value read
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public boolean readboolean   throws jmsexception
initializereading
try
this datain mark 10
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport boolean_type
return this datain readboolean
if  type    marshallingsupport string_type
return boolean valueof this datain readutf    booleanvalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>byte</code> value from the stream message.
*
* @return the next byte from the stream message as a 8-bit
*         <code>byte</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public byte readbyte   throws jmsexception
initializereading
try
this datain mark 10
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport byte_type
return this datain readbyte
if  type    marshallingsupport string_type
return byte valueof this datain readutf    bytevalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a 16-bit integer from the stream message.
*
* @return a 16-bit integer from the stream message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public short readshort   throws jmsexception
initializereading
try
this datain mark 17
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport short_type
return this datain readshort
if  type    marshallingsupport byte_type
return this datain readbyte
if  type    marshallingsupport string_type
return short valueof this datain readutf    shortvalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a unicode character value from the stream message.
*
* @return a unicode character from the stream message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public char readchar   throws jmsexception
initializereading
try
this datain mark 17
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport char_type
return this datain readchar
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a 32-bit integer from the stream message.
*
* @return a 32-bit integer value from the stream message, interpreted as an
*         <code>int</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public int readint   throws jmsexception
initializereading
try
this datain mark 33
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport integer_type
return this datain readint
if  type    marshallingsupport short_type
return this datain readshort
if  type    marshallingsupport byte_type
return this datain readbyte
if  type    marshallingsupport string_type
return integer valueof this datain readutf    intvalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a 64-bit integer from the stream message.
*
* @return a 64-bit integer value from the stream message, interpreted as a
*         <code>long</code>
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public long readlong   throws jmsexception
initializereading
try
this datain mark 65
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport long_type
return this datain readlong
if  type    marshallingsupport integer_type
return this datain readint
if  type    marshallingsupport short_type
return this datain readshort
if  type    marshallingsupport byte_type
return this datain readbyte
if  type    marshallingsupport string_type
return long valueof this datain readutf    longvalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>float</code> from the stream message.
*
* @return a <code>float</code> value from the stream message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public float readfloat   throws jmsexception
initializereading
try
this datain mark 33
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport float_type
return this datain readfloat
if  type    marshallingsupport string_type
return float valueof this datain readutf    floatvalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>double</code> from the stream message.
*
* @return a <code>double</code> value from the stream message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public double readdouble   throws jmsexception
initializereading
try
this datain mark 65
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport double_type
return this datain readdouble
if  type    marshallingsupport float_type
return this datain readfloat
if  type    marshallingsupport string_type
return double valueof this datain readutf    doublevalue
if  type    marshallingsupport null
this datain reset
throw new nullpointerexception
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a <code>string</code> from the stream message.
*
* @return a unicode string from the stream message
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
*/
public string readstring   throws jmsexception
initializereading
try
this datain mark 65
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport null
return null
if  type    marshallingsupport big_string_type
return marshallingsupport readutf8 datain
if  type    marshallingsupport string_type
return this datain readutf
if  type    marshallingsupport long_type
return new long this datain readlong    tostring
if  type    marshallingsupport integer_type
return new integer this datain readint    tostring
if  type    marshallingsupport short_type
return new short this datain readshort    tostring
if  type    marshallingsupport byte_type
return new byte this datain readbyte    tostring
if  type    marshallingsupport float_type
return new float this datain readfloat    tostring
if  type    marshallingsupport double_type
return new double this datain readdouble    tostring
if  type    marshallingsupport boolean_type
return  this datain readboolean   ? boolean true   boolean false  tostring
if  type    marshallingsupport char_type
return new character this datain readchar    tostring
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
throw jmsexceptionsupport createmessageeofexception e
catch  ioexception e
throw jmsexceptionsupport createmessageformatexception e
/**
* reads a byte array field from the stream message into the specified
* <code>byte[]</code> object (the read buffer). <p/>
* <p>
* to read the field value, <code>readbytes</code> should be successively
* called until it returns a value less than the length of the read buffer.
* the value of the bytes in the buffer following the last byte read is
* undefined. <p/>
* <p>
* if <code>readbytes</code> returns a value equal to the length of the
* buffer, a subsequent <code>readbytes</code> call must be made. if there
* are no more bytes to be read, this call returns -1. <p/>
* <p>
* if the byte array field value is null, <code>readbytes</code> returns
* -1. <p/>
* <p>
* if the byte array field value is empty, <code>readbytes</code> returns
* 0. <p/>
* <p>
* once the first <code>readbytes</code> call on a <code>byte[]</code>
* field value has been made, the full value of the field must be read
* before it is valid to read the next field. an attempt to read the next
* field before that has been done will throw a
* <code>messageformatexception</code>. <p/>
* <p>
* to read the byte field value into a new <code>byte[]</code> object, use
* the <code>readobject</code> method.
*
* @param value the buffer into which the data is read
* @return the total number of bytes read into the buffer, or -1 if there is
*         no more data because the end of the byte field has been reached
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
* @see #readobject()
*/
public int readbytes byte value  throws jmsexception
initializereading
try
if  value    null
throw new nullpointerexception
if  remainingbytes     1
this datain mark value length   1
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport byte_array_type
throw new messageformatexception
remainingbytes   this datain readint
else if  remainingbytes    0
remainingbytes    1
return  1
if  value length <  remainingbytes
// small buffer
remainingbytes    value length
this datain readfully value
return value length
else
// big buffer
int rc   this datain read value  0  remainingbytes
remainingbytes   0
return rc
catch  eofexception e
jmsexception jmsex   new messageeofexception e getmessage
jmsex setlinkedexception e
throw jmsex
catch  ioexception e
jmsexception jmsex   new messageformatexception e getmessage
jmsex setlinkedexception e
throw jmsex
/**
* reads an object from the stream message. <p/>
* <p>
* this method can be used to return, in objectified format, an object in
* the java programming language ("java object") that has been written to
* the stream with the equivalent <code>writeobject</code> method call, or
* its equivalent primitive <code>write<i>type</i></code> method. <p/>
* <p>
* note that byte values are returned as <code>byte[]</code>, not
* <code>byte[]</code>. <p/>
* <p>
* an attempt to call <code>readobject</code> to read a byte field value
* into a new <code>byte[]</code> object before the full value of the byte
* field has been read will throw a <code>messageformatexception</code>.
*
* @return a java object from the stream message, in objectified format (for
*         example, if the object was written as an <code>int</code>, an
*         <code>integer</code> is returned)
* @throws jmsexception if the jms provider fails to read the message due to
*                 some internal error.
* @throws messageeofexception if unexpected end of message stream has been
*                 reached.
* @throws messageformatexception if this type conversion is invalid.
* @throws messagenotreadableexception if the message is in write-only mode.
* @see #readbytes(byte[] value)
*/
public object readobject   throws jmsexception
initializereading
try
this datain mark 65
int type   this datain read
if  type     1
throw new messageeofexception
if  type    marshallingsupport null
return null
if  type    marshallingsupport big_string_type
return marshallingsupport readutf8 datain
if  type    marshallingsupport string_type
return this datain readutf
if  type    marshallingsupport long_type
return long valueof this datain readlong
if  type    marshallingsupport integer_type
return integer valueof this datain readint
if  type    marshallingsupport short_type
return short valueof this datain readshort
if  type    marshallingsupport byte_type
return byte valueof this datain readbyte
if  type    marshallingsupport float_type
return new float this datain readfloat
if  type    marshallingsupport double_type
return new double this datain readdouble
if  type    marshallingsupport boolean_type
return this datain readboolean   ? boolean true   boolean false
if  type    marshallingsupport char_type
return character valueof this datain readchar
if  type    marshallingsupport byte_array_type
int len   this datain readint
byte value   new byte
this datain readfully value
return value
else
this datain reset
throw new messageformatexception
catch  numberformatexception mfe
try
this datain reset
catch  ioexception ioe
throw jmsexceptionsupport create ioe
throw mfe
catch  eofexception e
jmsexception jmsex   new messageeofexception e getmessage
jmsex setlinkedexception e
throw jmsex
catch  ioexception e
jmsexception jmsex   new messageformatexception e getmessage
jmsex setlinkedexception e
throw jmsex
/**
* writes a <code>boolean</code> to the stream message. the value
* <code>true</code> is written as the value <code>(byte)1</code>; the
* value <code>false</code> is written as the value <code>(byte)0</code>.
*
* @param value the <code>boolean</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeboolean boolean value  throws jmsexception
initializewriting
try
marshallingsupport marshalboolean dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>byte</code> to the stream message.
*
* @param value the <code>byte</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebyte byte value  throws jmsexception
initializewriting
try
marshallingsupport marshalbyte dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>short</code> to the stream message.
*
* @param value the <code>short</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeshort short value  throws jmsexception
initializewriting
try
marshallingsupport marshalshort dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>char</code> to the stream message.
*
* @param value the <code>char</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writechar char value  throws jmsexception
initializewriting
try
marshallingsupport marshalchar dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes an <code>int</code> to the stream message.
*
* @param value the <code>int</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeint int value  throws jmsexception
initializewriting
try
marshallingsupport marshalint dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>long</code> to the stream message.
*
* @param value the <code>long</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writelong long value  throws jmsexception
initializewriting
try
marshallingsupport marshallong dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>float</code> to the stream message.
*
* @param value the <code>float</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writefloat float value  throws jmsexception
initializewriting
try
marshallingsupport marshalfloat dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>double</code> to the stream message.
*
* @param value the <code>double</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writedouble double value  throws jmsexception
initializewriting
try
marshallingsupport marshaldouble dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a <code>string</code> to the stream message.
*
* @param value the <code>string</code> value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writestring string value  throws jmsexception
initializewriting
try
if  value    null
marshallingsupport marshalnull dataout
else
marshallingsupport marshalstring dataout  value
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes a byte array field to the stream message. <p/>
* <p>
* the byte array <code>value</code> is written to the message as a byte
* array field. consecutively written byte array fields are treated as two
* distinct fields when the fields are read.
*
* @param value the byte array value to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebytes byte value  throws jmsexception
writebytes value  0  value length
/**
* writes a portion of a byte array as a byte array field to the stream
* message. <p/>
* <p>
* the a portion of the byte array <code>value</code> is written to the
* message as a byte array field. consecutively written byte array fields
* are treated as two distinct fields when the fields are read.
*
* @param value the byte array value to be written
* @param offset the initial offset within the byte array
* @param length the number of bytes to use
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writebytes byte value  int offset  int length  throws jmsexception
initializewriting
try
marshallingsupport marshalbytearray dataout  value  offset  length
catch  ioexception ioe
throw jmsexceptionsupport create ioe
/**
* writes an object to the stream message. <p/>
* <p>
* this method works only for the objectified primitive object types (<code>integer</code>,
* <code>double</code>, <code>long</code>&nbsp;...),
* <code>string</code> objects, and byte arrays.
*
* @param value the java object to be written
* @throws jmsexception if the jms provider fails to write the message due
*                 to some internal error.
* @throws messageformatexception if the object is invalid.
* @throws messagenotwriteableexception if the message is in read-only mode.
*/
public void writeobject object value  throws jmsexception
initializewriting
if  value    null
try
marshallingsupport marshalnull dataout
catch  ioexception ioe
throw jmsexceptionsupport create ioe
else if  value instanceof string
writestring value tostring
else if  value instanceof character
writechar   character value  charvalue
else if  value instanceof boolean
writeboolean   boolean value  booleanvalue
else if  value instanceof byte
writebyte   byte value  bytevalue
else if  value instanceof short
writeshort   short value  shortvalue
else if  value instanceof integer
writeint   integer value  intvalue
else if  value instanceof float
writefloat   float value  floatvalue
else if  value instanceof double
writedouble   double value  doublevalue
else if  value instanceof byte
writebytes  byte value
/**
* puts the message body in read-only mode and repositions the stream of
* bytes to the beginning.
*
* @throws jmsexception if an internal error occurs
*/
public void reset   throws jmsexception
storecontent
this bytesout   null
this datain   null
this dataout   null
this remainingbytes    1
setreadonlybody true
private void initializewriting   throws messagenotwriteableexception
checkreadonlybody
if  this dataout    null
this bytesout   new bytearrayoutputstream
outputstream os   bytesout
activemqconnection connection   getconnection
if  connection    null    connection isusecompression
compressed   true
os   new deflateroutputstream os
this dataout   new dataoutputstream os
protected void checkwriteonlybody   throws messagenotreadableexception
if   readonlybody
throw new messagenotreadableexception
private void initializereading   throws messagenotreadableexception
checkwriteonlybody
if  this datain    null
bytesequence data   getcontent
if  data    null
data   new bytesequence new byte     0  0
inputstream is   new bytearrayinputstream data
if  iscompressed
is   new inflaterinputstream is
is   new bufferedinputstream is
this datain   new datainputstream is
public string tostring
return super tostring             bytesout       dataout       datain