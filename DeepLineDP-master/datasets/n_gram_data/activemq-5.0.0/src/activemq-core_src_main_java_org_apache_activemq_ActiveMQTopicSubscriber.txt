/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import javax jms topic
import javax jms topicsubscriber
import org apache activemq command activemqdestination
import org apache activemq command consumerid
/**
* a client uses a <code>topicsubscriber</code> object to receive messages
* that have been published to a topic. a <code>topicsubscriber</code> object
* is the publish/subscribe form of a message consumer. a <code>
* messageconsumer</code> can be created by using <code>
* session.createconsumer</code>.
* <p/>
* <p>
* a <code>topicsession</code> allows the creation of multiple <code>
* topicsubscriber</code> objects per topic. it will deliver each message for
* a topic to each subscriber eligible to receive it. each copy of the message
* is treated as a completely separate message. work done on one copy has no
* effect on the others; acknowledging one does not acknowledge the others; one
* message may be delivered immediately, while another waits for its subscriber
* to process messages ahead of it.
* <p/>
* <p>
* regular <code>topicsubscriber</code> objects are not durable. they receive
* only messages that are published while they are active.
* <p/>
* <p>
* messages filtered out by a subscriber's message selector will never be
* delivered to the subscriber. from the subscriber's perspective, they do not
* exist.
* <p/>
* <p>
* in some cases, a connection may both publish and subscribe to a topic. the
* subscriber <code>nolocal</code> attribute allows a subscriber to inhibit
* the delivery of messages published by its own connection.
* <p/>
* <p>
* if a client needs to receive all the messages published on a topic,
* including the ones published while the subscriber is inactive, it uses a
* durable <code>topicsubscriber</code>. the jms provider retains a record
* of this durable subscription and insures that all messages from the topic's
* publishers are retained until they are acknowledged by this durable
* subscriber or they have expired.
* <p/>
* <p>
* sessions with durable subscribers must always provide the same client
* identifier. in addition, each client must specify a name that uniquely
* identifies (within client identifier) each durable subscription it creates.
* only one session at a time can have a <code>topicsubscriber</code> for a
* particular durable subscription.
* <p/>
* <p>
* a client can change an existing durable subscription by creating a durable
* <code>topicsubscriber</code> with the same name and a new topic and/or
* message selector. changing a durable subscription is equivalent to
* unsubscribing (deleting) the old one and creating a new one.
* <p/>
* <p>
* the <code>unsubscribe</code> method is used to delete a durable
* subscription. the <code>unsubscribe</code> method can be used at the
* <code>session</code> or <code>topicsession</code> level. this method
* deletes the state being maintained on behalf of the subscriber by its
* provider.
* <p/>
* <p>
* creating a <code>messageconsumer</code> provides the same features as
* creating a <code>topicsubscriber</code>. to create a durable subscriber,
* use of <code>session.createdurablesubscriber</code> is recommended. the
* <code>topicsubscriber</code> is provided to support existing code.
*
* @see javax.jms.session#createconsumer
* @see javax.jms.session#createdurablesubscriber
* @see javax.jms.topicsession
* @see javax.jms.topicsession#createsubscriber
* @see javax.jms.topicsubscriber
* @see javax.jms.messageconsumer
*/
public class activemqtopicsubscriber extends activemqmessageconsumer implements
topicsubscriber
/**
* @param thesession
* @param value
* @param dest
* @param name
* @param selector
* @param cnum
* @param nolocalvalue
* @param browservalue
* @param asyncdispatch
* @throws jmsexception
*/
protected activemqtopicsubscriber activemqsession thesession
consumerid consumerid  activemqdestination dest  string name  string selector  int prefetch  int maximumpendingmessagecount
boolean nolocalvalue  boolean browservalue  boolean asyncdispatch  throws jmsexception
super thesession  consumerid  dest  name  selector  prefetch  maximumpendingmessagecount  nolocalvalue  browservalue  asyncdispatch  null
/**
* gets the <code>topic</code> associated with this subscriber.
*
* @return this subscriber's <code>topic</code>
* @throws jmsexception if the jms provider fails to get the topic for this topic
*                      subscriber due to some internal error.
*/
public topic gettopic   throws jmsexception
checkclosed
return  topic  super getdestination
/**
* gets the <code>nolocal</code> attribute for this subscriber. the
* default value for this attribute is false.
*
* @return true if locally published messages are being inhibited
* @throws jmsexception if the jms provider fails to get the <code>nolocal
*                      </code> attribute for this topic subscriber due to some
*                      internal error.
*/
public boolean getnolocal   throws jmsexception
checkclosed
return super isnolocal