/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java io ioexception
import org apache activemq command brokerid
import org apache activemq command brokerinfo
import org apache activemq command command
import org apache activemq command consumerinfo
import org apache activemq command networkbridgefilter
import org apache activemq transport transport
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* forwards messages from the local broker to the remote broker based on demand.
*
* @org.apache.xbean.xbean
*
* @version $revision$
*/
public class demandforwardingbridge extends demandforwardingbridgesupport
private static final log log   logfactory getlog demandforwardingbridge class
protected final brokerid remotebrokerpath   new brokerid  null
protected object brokerinfomutex   new object
protected brokerid remotebrokerid
public demandforwardingbridge networkbridgeconfiguration configuration  transport localbroker
transport remotebroker
super configuration  localbroker  remotebroker
protected void serviceremotebrokerinfo command command  throws ioexception
synchronized  brokerinfomutex
brokerinfo remotebrokerinfo    brokerinfo command
remotebrokerid   remotebrokerinfo getbrokerid
remotebrokerpath   remotebrokerid
remotebrokername   remotebrokerinfo getbrokername
if  localbrokerid    null
if  localbrokerid equals remotebrokerid
log info
// waitstarted();
servicesupport dispose this
remotebrokernameknownlatch countdown
protected void addremotebrokertobrokerpath consumerinfo info
info setbrokerpath appendtobrokerpath info getbrokerpath    getremotebrokerpath
protected void servicelocalbrokerinfo command command  throws interruptedexception
synchronized  brokerinfomutex
localbrokerid     brokerinfo command  getbrokerid
localbrokerpath   localbrokerid
if  remotebrokerid    null
if  remotebrokerid equals localbrokerid
log info
waitstarted
servicesupport dispose this
protected networkbridgefilter createnetworkbridgefilter consumerinfo info  throws ioexception
return new networkbridgefilter remotebrokerpath  configuration getnetworkttl
protected brokerid getremotebrokerpath
return remotebrokerpath