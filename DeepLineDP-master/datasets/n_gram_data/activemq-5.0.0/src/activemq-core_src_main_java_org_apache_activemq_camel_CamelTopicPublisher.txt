/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq camel
import javax jms jmsexception
import javax jms message
import javax jms topic
import javax jms topicpublisher
import org apache activemq activemqsession
import org apache camel endpoint
/**
* a jms {@link javax.jms.topicpublisher} which sends message exchanges to a
* camel {@link endpoint}
*
* @version $revision: $
*/
public class cameltopicpublisher extends camelmessageproducer implements topicpublisher
public cameltopicpublisher cameltopic destination  endpoint endpoint  activemqsession session  throws jmsexception
super destination  endpoint  session
/**
* gets the topic associated with this <code>topicpublisher</code>.
*
* @return this publisher's topic
* @throws jmsexception if the jms provider fails to get the topic for this
*                      <code>topicpublisher</code> due to some internal error.
*/
public topic gettopic   throws jmsexception
return  topic  super getdestination
/**
* publishes a message to the topic. uses the <code>topicpublisher</code>'s
* default delivery mode, priority, and time to live.
*
* @param message the message to publish
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with a <code>topicpublisher
*                                     </code> with an invalid topic.
* @throws java.lang.unsupportedoperationexception
*                                     if a client uses this method with a <code>topicpublisher
*                                     </code> that did not specify a topic at creation time.
* @see javax.jms.messageproducer#getdeliverymode()
* @see javax.jms.messageproducer#gettimetolive()
* @see javax.jms.messageproducer#getpriority()
*/
public void publish message message  throws jmsexception
super send message
/**
* publishes a message to the topic, specifying delivery mode, priority,
* and time to live.
*
* @param message      the message to publish
* @param deliverymode the delivery mode to use
* @param priority     the priority for this message
* @param timetolive   the message's lifetime (in milliseconds)
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with a <code>topicpublisher
*                                     </code> with an invalid topic.
* @throws java.lang.unsupportedoperationexception
*                                     if a client uses this method with a <code>topicpublisher
*                                     </code> that did not specify a topic at creation time.
*/
public void publish message message  int deliverymode  int priority
long timetolive  throws jmsexception
super send message  deliverymode  priority  timetolive
/**
* publishes a message to a topic for an unidentified message producer.
* uses the <code>topicpublisher</code>'s default delivery mode,
* priority, and time to live.
* <p/>
* <p>
* typically, a message producer is assigned a topic at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the topic be supplied every time a message is published.
*
* @param topic   the topic to publish this message to
* @param message the message to publish
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with an invalid topic.
* @see javax.jms.messageproducer#getdeliverymode()
* @see javax.jms.messageproducer#gettimetolive()
* @see javax.jms.messageproducer#getpriority()
*/
public void publish topic topic  message message  throws jmsexception
super send topic  message
/**
* publishes a message to a topic for an unidentified message producer,
* specifying delivery mode, priority and time to live.
* <p/>
* <p>
* typically, a message producer is assigned a topic at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the topic be supplied every time a message is published.
*
* @param topic        the topic to publish this message to
* @param message      the message to publish
* @param deliverymode the delivery mode to use
* @param priority     the priority for this message
* @param timetolive   the message's lifetime (in milliseconds)
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws javax.jms.messageformatexception      if an invalid message is specified.
* @throws javax.jms.invaliddestinationexception if a client uses this method with an invalid topic.
*/
public void publish topic topic  message message  int deliverymode
int priority  long timetolive  throws jmsexception
super send topic  message  deliverymode  priority  timetolive