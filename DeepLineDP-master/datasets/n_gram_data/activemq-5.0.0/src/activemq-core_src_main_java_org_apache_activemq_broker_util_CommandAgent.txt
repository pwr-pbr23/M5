/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker util
import javax jms connection
import javax jms connectionfactory
import javax jms destination
import javax jms jmsexception
import javax jms messageconsumer
import javax jms session
import org apache activemq activemqconnectionfactory
import org apache activemq service
import org apache activemq advisory advisorysupport
import org apache activemq util servicestopper
import org apache commons logging log
import org apache commons logging logfactory
import org springframework beans factory disposablebean
import org springframework beans factory factorybean
import org springframework beans factory initializingbean
/**
* an agent which listens to commands on a jms destination
*
* @version $revision$
* @org.apache.xbean.xbean
*/
public class commandagent implements service  initializingbean  disposablebean  factorybean
private static final log log   logfactory getlog commandagent class
private string brokerurl
private connectionfactory connectionfactory
private connection connection
private destination commanddestination
private commandmessagelistener listener
private session session
private messageconsumer consumer
public void start   throws exception
session   getconnection   createsession false  session auto_acknowledge
listener   new commandmessagelistener session
destination destination   getcommanddestination
if  log isdebugenabled
log debug     destination
consumer   session createconsumer destination
consumer setmessagelistener listener
public void stop   throws exception
servicestopper stopper   new servicestopper
if  consumer    null
try
consumer close
consumer   null
catch  jmsexception e
stopper onexception this  e
if  session    null
try
session close
session   null
catch  jmsexception e
stopper onexception this  e
if  connection    null
try
connection close
connection   null
catch  jmsexception e
stopper onexception this  e
stopper throwfirstexception
// the following methods ensure that we are created on startup and the
// lifecycles respected
// todo there must be a simpler way?
public void afterpropertiesset   throws exception
start
public void destroy   throws exception
stop
public object getobject   throws exception
return this
public class getobjecttype
return getclass
public boolean issingleton
return true
// properties
// -------------------------------------------------------------------------
public string getbrokerurl
return brokerurl
public void setbrokerurl string brokerurl
this brokerurl   brokerurl
public connectionfactory getconnectionfactory
if  connectionfactory    null
connectionfactory   new activemqconnectionfactory brokerurl
return connectionfactory
public void setconnectionfactory connectionfactory connectionfactory
this connectionfactory   connectionfactory
public connection getconnection   throws jmsexception
if  connection    null
connection   createconnection
connection start
return connection
public void setconnection connection connection
this connection   connection
public destination getcommanddestination
if  commanddestination    null
commanddestination   createcommanddestination
return commanddestination
public void setcommanddestination destination commanddestination
this commanddestination   commanddestination
protected connection createconnection   throws jmsexception
return getconnectionfactory   createconnection
protected destination createcommanddestination
return advisorysupport getagentdestination