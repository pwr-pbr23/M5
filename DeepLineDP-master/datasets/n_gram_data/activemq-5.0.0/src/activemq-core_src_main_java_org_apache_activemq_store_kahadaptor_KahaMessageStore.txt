/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadaptor
import java io ioexception
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq kaha mapcontainer
import org apache activemq kaha storeentry
import org apache activemq store messagerecoverylistener
import org apache activemq store messagestore
import org apache activemq usage memoryusage
import org apache activemq usage systemusage
/**
* an implementation of {@link org.apache.activemq.store.messagestore} which
* uses a jps container
*
* @version $revision: 1.7 $
*/
public class kahamessagestore implements messagestore
protected final activemqdestination destination
protected final mapcontainer<messageid  message> messagecontainer
protected storeentry batchentry
public kahamessagestore mapcontainer<messageid  message> container  activemqdestination destination
throws ioexception
this messagecontainer   container
this destination   destination
protected messageid getmessageid object object
return   message object  getmessageid
public object getid
return messagecontainer getid
public synchronized void addmessage connectioncontext context  message message  throws ioexception
messagecontainer put message getmessageid    message
// todo: we should do the following but it is not need if the message is
// being added within a persistence
// transaction
// but since i can't tell if one is running right now.. i'll leave this
// out for now.
// if( message.isresponserequired() ) {
// messagecontainer.force();
// }
public synchronized message getmessage messageid identity  throws ioexception
message result   messagecontainer get identity
return result
protected boolean recovermessage messagerecoverylistener listener  message msg  throws exception
listener recovermessage msg
return listener hasspace
public void removemessage connectioncontext context  messageack ack  throws ioexception
removemessage ack getlastmessageid
public synchronized void removemessage messageid msgid  throws ioexception
storeentry entry   messagecontainer getentry msgid
if  entry    null
messagecontainer remove entry
if  messagecontainer isempty       batchentry    null    batchentry equals entry
resetbatching
public synchronized void recover messagerecoverylistener listener  throws exception
for  storeentry entry   messagecontainer getfirst    entry    null  entry   messagecontainer
getnext entry
message msg    message messagecontainer getvalue entry
if   recovermessage listener  msg
break
public void start
public void stop
public synchronized void removeallmessages connectioncontext context  throws ioexception
messagecontainer clear
public activemqdestination getdestination
return destination
public synchronized void delete
messagecontainer clear
public void setmemoryusage memoryusage memoryusage
/**
* @return the number of messages held by this destination
* @see org.apache.activemq.store.messagestore#getmessagecount()
*/
public int getmessagecount
return messagecontainer size
/**
* @param id
* @return null
* @throws exception
* @see org.apache.activemq.store.messagestore#getpreviousmessageidtodeliver(org.apache.activemq.command.messageid)
*/
public messageid getpreviousmessageidtodeliver messageid id  throws exception
return null
/**
* @param lastmessageid
* @param maxreturned
* @param listener
* @throws exception
* @see org.apache.activemq.store.messagestore#recovernextmessages(org.apache.activemq.command.messageid,
*      int, org.apache.activemq.store.messagerecoverylistener)
*/
public synchronized void recovernextmessages int maxreturned  messagerecoverylistener listener
throws exception
storeentry entry   batchentry
if  entry    null
entry   messagecontainer getfirst
else
entry   messagecontainer refresh entry
entry   messagecontainer getnext entry
if  entry    null
batchentry   null
if  entry    null
int count   0
do
message msg   messagecontainer getvalue entry
if  msg    null
recovermessage listener  msg
count
batchentry   entry
entry   messagecontainer getnext entry
while  entry    null    count < maxreturned    listener hasspace
/**
* @param nexttodispatch
* @see org.apache.activemq.store.messagestore#resetbatching(org.apache.activemq.command.messageid)
*/
public synchronized void resetbatching
batchentry   null
/**
* @return true if the store supports cursors
*/
public boolean issupportforcursors
return true