/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store journal
import java io ioexception
import java util hashmap
import java util iterator
import org apache activeio journal recordlocation
import org apache activemq broker connectioncontext
import org apache activemq command activemqtopic
import org apache activemq command journaltopicack
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq store messagerecoverylistener
import org apache activemq store topicmessagestore
import org apache activemq transaction synchronization
import org apache activemq util callback
import org apache activemq util subscriptionkey
import org apache commons logging log
import org apache commons logging logfactory
/**
* a messagestore that uses a journal to store it's messages.
*
* @version $revision: 1.13 $
*/
public class journaltopicmessagestore extends journalmessagestore implements topicmessagestore
private static final log log   logfactory getlog journaltopicmessagestore class
private topicmessagestore longtermstore
private hashmap<subscriptionkey  messageid> ackedlastacklocations   new hashmap<subscriptionkey  messageid>
public journaltopicmessagestore journalpersistenceadapter adapter  topicmessagestore checkpointstore
activemqtopic destinationname
super adapter  checkpointstore  destinationname
this longtermstore   checkpointstore
public void recoversubscription string clientid  string subscriptionname  messagerecoverylistener listener
throws exception
this peristenceadapter checkpoint true  true
longtermstore recoversubscription clientid  subscriptionname  listener
public void recovernextmessages string clientid  string subscriptionname  int maxreturned
messagerecoverylistener listener  throws exception
this peristenceadapter checkpoint true  true
longtermstore recovernextmessages clientid  subscriptionname  maxreturned  listener
public subscriptioninfo lookupsubscription string clientid  string subscriptionname  throws ioexception
return longtermstore lookupsubscription clientid  subscriptionname
public void addsubsciption subscriptioninfo subscriptioninfo  boolean retroactive  throws ioexception
this peristenceadapter checkpoint true  true
longtermstore addsubsciption subscriptioninfo  retroactive
public void addmessage connectioncontext context  message message  throws ioexception
super addmessage context  message
/**
*/
public void acknowledge connectioncontext context  string clientid  string subscriptionname
final messageid messageid  throws ioexception
final boolean debug   log isdebugenabled
journaltopicack ack   new journaltopicack
ack setdestination destination
ack setmessageid messageid
ack setmessagesequenceid messageid getbrokersequenceid
ack setsubscritionname subscriptionname
ack setclientid clientid
ack settransactionid context gettransaction      null
? context gettransaction   gettransactionid     null
final recordlocation location   peristenceadapter writecommand ack  false
final subscriptionkey key   new subscriptionkey clientid  subscriptionname
if   context isintransaction
if  debug
log debug     messageid       location
acknowledge messageid  location  key
else
if  debug
log debug     messageid       location
synchronized  this
inflighttxlocations add location
transactionstore acknowledge this  ack  location
context gettransaction   addsynchronization new synchronization
public void aftercommit   throws exception
if  debug
log debug     messageid       location
synchronized  journaltopicmessagestore this
inflighttxlocations remove location
acknowledge messageid  location  key
public void afterrollback   throws exception
if  debug
log debug     messageid       location
synchronized  journaltopicmessagestore this
inflighttxlocations remove location
public void replayacknowledge connectioncontext context  string clientid  string subscritionname
messageid messageid
try
subscriptioninfo sub   longtermstore lookupsubscription clientid  subscritionname
if  sub    null
longtermstore acknowledge context  clientid  subscritionname  messageid
catch  throwable e
log debug     messageid
e
/**
* @param messageid
* @param location
* @param key
*/
protected void acknowledge messageid messageid  recordlocation location  subscriptionkey key
synchronized  this
lastlocation   location
ackedlastacklocations put key  messageid
public recordlocation checkpoint   throws ioexception
final hashmap<subscriptionkey  messageid> cpackedlastacklocations
// swap out the hash maps..
synchronized  this
cpackedlastacklocations   this ackedlastacklocations
this ackedlastacklocations   new hashmap<subscriptionkey  messageid>
return super checkpoint new callback
public void execute   throws exception
// checkpoint the acknowledged messages.
iterator<subscriptionkey> iterator   cpackedlastacklocations keyset   iterator
while  iterator hasnext
subscriptionkey subscriptionkey   iterator next
messageid identity   cpackedlastacklocations get subscriptionkey
longtermstore acknowledge transactiontemplate getcontext    subscriptionkey clientid
subscriptionkey subscriptionname  identity
/**
* @return returns the longtermstore.
*/
public topicmessagestore getlongtermtopicmessagestore
return longtermstore
public void deletesubscription string clientid  string subscriptionname  throws ioexception
longtermstore deletesubscription clientid  subscriptionname
public subscriptioninfo getallsubscriptions   throws ioexception
return longtermstore getallsubscriptions
public int getmessagecount string clientid  string subscribername  throws ioexception
this peristenceadapter checkpoint true  true
return longtermstore getmessagecount clientid  subscribername
public void resetbatching string clientid  string subscriptionname
longtermstore resetbatching clientid  subscriptionname