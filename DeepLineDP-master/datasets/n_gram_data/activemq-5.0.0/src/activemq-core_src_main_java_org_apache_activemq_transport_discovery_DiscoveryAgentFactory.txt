/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport discovery
import java io ioexception
import java net uri
import java util concurrent concurrenthashmap
import org apache activemq util factoryfinder
import org apache activemq util ioexceptionsupport
public abstract class discoveryagentfactory
private static final factoryfinder discovery_agent_finder   new factoryfinder
private static final concurrenthashmap<string  discoveryagentfactory> discovery_agent_factorys   new concurrenthashmap<string  discoveryagentfactory>
/**
* @param uri
* @return
* @throws ioexception
*/
private static discoveryagentfactory finddiscoveryagentfactory uri uri  throws ioexception
string scheme   uri getscheme
if  scheme    null
throw new ioexception     uri
discoveryagentfactory daf   discovery_agent_factorys get scheme
if  daf    null
// try to load if from a meta-inf property.
try
daf    discoveryagentfactory discovery_agent_finder newinstance scheme
discovery_agent_factorys put scheme  daf
catch  throwable e
throw ioexceptionsupport create     scheme      e
return daf
public static discoveryagent creatediscoveryagent uri uri  throws ioexception
discoveryagentfactory tf   finddiscoveryagentfactory uri
return tf docreatediscoveryagent uri
protected abstract discoveryagent docreatediscoveryagent uri uri  throws ioexception
// {
// try {
// string type = ( uri.getscheme() == null ) ? uri.getpath() :
// uri.getscheme();
// discoveryagent rc = (discoveryagent)
// discoveryagentfinder.newinstance(type);
// map options = urisupport.parseparamters(uri);
// introspectionsupport.setproperties(rc, options);
// if( rc.getclass() == simplediscoveryagent.class ) {
// compositedata data = urisupport.parsecomposite(uri);
// ((simplediscoveryagent)rc).setservices(data.getcomponents());
// }
// return rc;
// } catch (throwable e) {
// throw ioexceptionsupport.create("could not create discovery agent: "+uri,
// e);
// }
// }