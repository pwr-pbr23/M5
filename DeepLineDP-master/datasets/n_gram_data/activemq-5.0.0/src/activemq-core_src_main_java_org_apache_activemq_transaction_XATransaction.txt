/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transaction
import java io ioexception
import javax transaction xa xaexception
import javax transaction xa xaresource
import org apache activemq broker transactionbroker
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq store transactionstore
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision: 1.4 $
*/
public class xatransaction extends transaction
private static final log log   logfactory getlog xatransaction class
private final transactionstore transactionstore
private final xatransactionid xid
private final transactionbroker broker
public xatransaction transactionstore transactionstore  xatransactionid xid  transactionbroker broker
this transactionstore   transactionstore
this xid   xid
this broker   broker
public void commit boolean onephase  throws xaexception  ioexception
if  log isdebugenabled
log debug     xid
switch  getstate
case start_state
// 1 phase commit, no work done.
checkforpreparedstate onephase
setstatefinished
break
case in_use_state
// 1 phase commit, work done.
checkforpreparedstate onephase
dopreprepare
setstatefinished
transactionstore commit gettransactionid    false
dopostcommit
break
case prepared_state
// 2 phase commit, work done.
// we would record commit here.
setstatefinished
transactionstore commit gettransactionid    true
dopostcommit
break
default
illegalstatetransition
private void illegalstatetransition string callname  throws xaexception
xaexception xae   new xaexception     callname
xae errorcode   xaexception xaer_proto
throw xae
private void checkforpreparedstate boolean onephase  throws xaexception
if   onephase
xaexception xae   new xaexception
xae errorcode   xaexception xaer_proto
throw xae
private void dopreprepare   throws xaexception  ioexception
try
preprepare
catch  xaexception e
throw e
catch  throwable e
log warn    e
rollback
xaexception xae   new xaexception
xae errorcode   xaexception xa_rbother
xae initcause e
throw xae
private void dopostcommit   throws xaexception
try
fireaftercommit
catch  throwable e
// i guess this could happen. post commit task failed
// to execute properly.
log warn    e
xaexception xae   new xaexception
xae errorcode   xaexception xaer_rmerr
xae initcause e
throw xae
public void rollback   throws xaexception  ioexception
if  log isdebugenabled
log debug     xid
switch  getstate
case start_state
// 1 phase rollback no work done.
setstatefinished
break
case in_use_state
// 1 phase rollback work done.
setstatefinished
transactionstore rollback gettransactionid
dopostrollback
break
case prepared_state
// 2 phase rollback work done.
setstatefinished
transactionstore rollback gettransactionid
dopostrollback
break
default
throw new xaexception
private void dopostrollback   throws xaexception
try
fireafterrollback
catch  throwable e
// i guess this could happen. post commit task failed
// to execute properly.
log warn    e
xaexception xae   new xaexception
xae errorcode   xaexception xaer_rmerr
xae initcause e
throw xae
public int prepare   throws xaexception  ioexception
if  log isdebugenabled
log debug     xid
switch  getstate
case start_state
// no work done.. no commit/rollback needed.
setstatefinished
return xaresource xa_rdonly
case in_use_state
// we would record prepare here.
dopreprepare
setstate transaction prepared_state
transactionstore prepare gettransactionid
return xaresource xa_ok
default
illegalstatetransition
return xaresource xa_rdonly
private void setstatefinished
setstate transaction finished_state
broker removetransaction xid
public transactionid gettransactionid
return xid