/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl
import java io ioexception
import java util linkedlist
import java util map
import java util set
import java util concurrent concurrenthashmap
import org apache activemq kaha containerid
import org apache activemq kaha marshaller
import org apache activemq kaha store
import org apache activemq kaha storeentry
import org apache activemq kaha storelocation
import org apache activemq kaha impl data item
import org apache activemq kaha impl index indexitem
import org apache activemq kaha impl index indexmanager
import org apache commons logging log
import org apache commons logging logfactory
/**
* a container of roots for other containers
*
* @version $revision: 1.2 $
*/
class indexrootcontainer
protected static final marshaller root_marshaller   store object_marshaller
private static final log log   logfactory getlog indexrootcontainer class
protected indexitem root
protected indexmanager indexmanager
protected datamanager datamanager
protected map<object  storeentry> map   new concurrenthashmap<object  storeentry>
protected linkedlist<storeentry> list   new linkedlist<storeentry>
indexrootcontainer indexitem root  indexmanager im  datamanager dfm  throws ioexception
this root   root
this indexmanager   im
this datamanager   dfm
long nextitem   root getnextitem
while  nextitem    item position_not_set
storeentry item   indexmanager getindex nextitem
storelocation data   item getkeydataitem
object key   datamanager readitem root_marshaller  data
map put key  item
list add item
nextitem   item getnextitem
datamanager addinterestinfile item getkeyfile
set<object> getkeys
return map keyset
indexitem addroot indexmanager containerindexmanager  containerid key  throws ioexception
if  map containskey key
removeroot containerindexmanager  key
storelocation data   datamanager storedataitem root_marshaller  key
indexitem newroot   indexmanager createnewindex
newroot setkeydata data
indexitem containerroot   containerindexmanager createnewindex
containerindexmanager storeindex containerroot
newroot setvalueoffset containerroot getoffset
indexitem last   list isempty   ? null    indexitem list getlast
last   last    null ? root   last
long prev   last getoffset
newroot setpreviousitem prev
indexmanager storeindex newroot
last setnextitem newroot getoffset
indexmanager storeindex last
map put key  newroot
list add newroot
return containerroot
void removeroot indexmanager containerindexmanager  containerid key  throws ioexception
storeentry oldroot   map remove key
if  oldroot    null
datamanager removeinterestinfile oldroot getkeyfile
// get the container root
indexitem containerroot   containerindexmanager getindex oldroot getvalueoffset
if  containerroot    null
containerindexmanager freeindex containerroot
int index   list indexof oldroot
indexitem prev   index > 0 ?  indexitem list get index   1    root
prev   prev    null ? root   prev
indexitem next   index <  list size     1  ?  indexitem list get index   1    null
if  next    null
prev setnextitem next getoffset
next setpreviousitem prev getoffset
indexmanager updateindexes next
else
prev setnextitem item position_not_set
indexmanager updateindexes prev
list remove oldroot
indexmanager freeindex  indexitem oldroot
indexitem getroot indexmanager containerindexmanager  containerid key  throws ioexception
storeentry index   map get key
if  index    null
return containerindexmanager getindex index getvalueoffset
return null
boolean doesrootexist object key
return map containskey key