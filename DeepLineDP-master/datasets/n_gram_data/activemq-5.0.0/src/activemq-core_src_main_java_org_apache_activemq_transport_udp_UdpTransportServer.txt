/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport udp
import java io ioexception
import java net inetsocketaddress
import java net socketaddress
import java net uri
import java util hashmap
import java util map
import org apache activemq command brokerinfo
import org apache activemq command command
import org apache activemq openwire openwireformat
import org apache activemq transport commandjoiner
import org apache activemq transport inactivitymonitor
import org apache activemq transport transport
import org apache activemq transport transportlistener
import org apache activemq transport transportserver
import org apache activemq transport transportserversupport
import org apache activemq transport reliable reliabletransport
import org apache activemq transport reliable replaystrategy
import org apache activemq transport reliable replayer
import org apache activemq util servicestopper
import org apache commons logging log
import org apache commons logging logfactory
/**
* a udp based implementation of {@link transportserver}
*
* @version $revision$
*/
public class udptransportserver extends transportserversupport
private static final log log   logfactory getlog udptransportserver class
private udptransport servertransport
private replaystrategy replaystrategy
private transport configuredtransport
private boolean usingwireformatnegotiation
private map<datagramendpoint  transport> transports   new hashmap<datagramendpoint  transport>
public udptransportserver uri connecturi  udptransport servertransport  transport configuredtransport  replaystrategy replaystrategy
super connecturi
this servertransport   servertransport
this configuredtransport   configuredtransport
this replaystrategy   replaystrategy
public string tostring
return     servertransport
public void run
public udptransport getservertransport
return servertransport
public void setbrokerinfo brokerinfo brokerinfo
protected void dostart   throws exception
log info     this
configuredtransport settransportlistener new transportlistener
public void oncommand object o
final command command    command o
processinboundconnection command
public void onexception ioexception error
log error     error  error
public void transportinterupted
public void transportresumed
configuredtransport start
protected void dostop servicestopper stopper  throws exception
configuredtransport stop
protected void processinboundconnection command command
datagramendpoint endpoint    datagramendpoint command getfrom
if  log isdebugenabled
log debug     this       endpoint       command
transport transport   null
synchronized  transports
transport   transports get endpoint
if  transport    null
if  usingwireformatnegotiation     command iswireformatinfo
log error     command getfrom         command
else
if  log isdebugenabled
log debug
try
transport   createtransport command  endpoint
transport   configuretransport transport
transports put endpoint  transport
catch  ioexception e
log error     e  e
getacceptlistener   onaccepterror e
else
log warn     endpoint       command
protected transport configuretransport transport transport
transport   new inactivitymonitor transport
getacceptlistener   onaccept transport
return transport
protected transport createtransport final command command  datagramendpoint endpoint  throws ioexception
if  endpoint    null
throw new ioexception     command
final socketaddress address   endpoint getaddress
final openwireformat connectionwireformat   servertransport getwireformat   copy
final udptransport transport   new udptransport connectionwireformat  address
final reliabletransport reliabletransport   new reliabletransport transport  transport
reliabletransport getreplayer
reliabletransport setreplaystrategy replaystrategy
// joiner must be on outside as the inbound messages must be processed
// by the reliable transport first
return new commandjoiner reliabletransport  connectionwireformat
public void start   throws exception
super start
reliabletransport oncommand command
/**
* final wireformatnegotiator wireformatnegotiator = new
* wireformatnegotiator(configuredtransport, transport.getwireformat(),
* servertransport .getminmumwireformatversion()) { public void start()
* throws exception { super.start(); log.debug("starting a new server
* transport: " + this + " with command: " + command);
* oncommand(command); } // lets use the specific addressing of wire
* format protected void sendwireformat(wireformatinfo info) throws
* ioexception { log.debug("#### we have negotiated the wireformat;
* sending a wireformat to: " + address); transport.oneway(info,
* address); } }; return wireformatnegotiator;
*/
public inetsocketaddress getsocketaddress
return servertransport getlocalsocketaddress