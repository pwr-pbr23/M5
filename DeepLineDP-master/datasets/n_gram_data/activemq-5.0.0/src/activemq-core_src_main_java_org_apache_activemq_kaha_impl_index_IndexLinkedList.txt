/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl index
import org apache activemq kaha storeentry
/**
* inteface to linkedlist of indexes
*
* @version $revision$
*/
public interface indexlinkedlist
/**
* set the new root
* @param newroot
*/
void setroot indexitem newroot
/**
* @return the root used by the list
*/
indexitem getroot
/**
* returns the first element in this list.
*
* @return the first element in this list.
*/
indexitem getfirst
/**
* returns the last element in this list.
*
* @return the last element in this list.
*/
indexitem getlast
/**
* removes and returns the first element from this list.
*
* @return the first element from this list.
*/
storeentry removefirst
/**
* removes and returns the last element from this list.
*
* @return the last element from this list.
*/
object removelast
/**
* inserts the given element at the beginning of this list.
*
* @param item
*/
void addfirst indexitem item
/**
* appends the given element to the end of this list. (identical in function
* to the <tt>add</tt> method; included only for consistency.)
*
* @param item
*/
void addlast indexitem item
/**
* returns the number of elements in this list.
*
* @return the number of elements in this list.
*/
int size
/**
* is the list empty?
*
* @return true if there are no elements in the list
*/
boolean isempty
/**
* appends the specified element to the end of this list.
*
* @param item
*
* @return <tt>true</tt> (as per the general contract of
*         <tt>collection.add</tt>).
*/
boolean add indexitem item
/**
* removes all of the elements from this list.
*/
void clear
// positional access operations
/**
* returns the element at the specified position in this list.
*
* @param index index of element to return.
* @return the element at the specified position in this list.
*
* @throws indexoutofboundsexception if the specified index is is out of
*                 range (<tt>index &lt; 0 || index &gt;= size()</tt>).
*/
indexitem get int index
/**
* inserts the specified element at the specified position in this list.
* shifts the element currently at that position (if any) and any subsequent
* elements to the right (adds one to their indices).
*
* @param index index at which the specified element is to be inserted.
* @param element element to be inserted.
*
* @throws indexoutofboundsexception if the specified index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).
*/
void add int index  indexitem element
/**
* removes the element at the specified position in this list. shifts any
* subsequent elements to the left (subtracts one from their indices).
* returns the element that was removed from the list.
*
* @param index the index of the element to removed.
* @return the element previously at the specified position.
*
* @throws indexoutofboundsexception if the specified index is out of range (<tt>index &lt; 0 || index &gt;= size()</tt>).
*/
object remove int index
// search operations
/**
* returns the index in this list of the first occurrence of the specified
* element, or -1 if the list does not contain this element. more formally,
* returns the lowest index i such that
* <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if there
* is no such index.
*
* @param o element to search for.
* @return the index in this list of the first occurrence of the specified
*         element, or -1 if the list does not contain this element.
*/
int indexof storeentry o
/**
* retrieve the next entry after this entry
*
* @param entry
* @return next entry
*/
indexitem getnextentry indexitem entry
/**
* retrive the prev entry after this entry
*
* @param entry
* @return prev entry
*/
indexitem getpreventry indexitem entry
/**
* remove an entry
*
* @param e
*/
void remove indexitem e
/**
* ensure we have the up to date entry
*
* @param entry
* @return the entry
*/
storeentry getentry storeentry entry
/**
* update the indexes of a storeentry
*
* @param current
* @return update storeentry
*/
storeentry refreshentry storeentry current