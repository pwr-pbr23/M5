/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq tool
import java io file
import java io fileinputstream
import java io ioexception
import java util enumeration
import java util properties
import javax jms connectionfactory
import javax jms connectionmetadata
import javax jms jmsexception
import org apache activemq tool properties abstractobjectproperties
import org apache activemq tool properties jmsclientproperties
import org apache activemq tool properties jmsclientsystemproperties
import org apache activemq tool properties jmsfactoryproperties
import org apache activemq tool properties reflectionutil
import org apache activemq tool reports performancereportwriter
import org apache activemq tool reports verboseperfreportwriter
import org apache activemq tool reports xmlfileperfreportwriter
import org apache activemq tool sampler cpusamplertask
import org apache activemq tool sampler throughputsamplertask
import org apache activemq tool spi spiconnectionfactory
import org apache commons logging log
import org apache commons logging logfactory
public abstract class abstractjmsclientsystem extends abstractobjectproperties
private static final log log   logfactory getlog abstractjmsclientsystem class
protected threadgroup clientthreadgroup
protected connectionfactory jmsconnfactory
// properties
protected jmsfactoryproperties factory   new jmsfactoryproperties
protected throughputsamplertask tpsampler   new throughputsamplertask
protected cpusamplertask cpusampler   new cpusamplertask
private int clientdestindex
private int clientdestcount
public void runsystemtest   throws jmsexception
// create connection factory
jmsconnfactory   loadjmsfactory getsystest   getspiclass    factory getfactorysettings
setprovidermetadata jmsconnfactory createconnection   getmetadata    getjmsclientproperties
// create performance sampler
performancereportwriter writer   createperfwriter
tpsampler setperfreportwriter writer
cpusampler setperfreportwriter writer
writer openreportwriter
writer writeproperties    system getproperties
writer writeproperties    reflectionutil retrieveobjectproperties getsystest
writer writeproperties    reflectionutil retrieveobjectproperties jmsconnfactory
writer writeproperties    reflectionutil retrieveobjectproperties getjmsclientproperties
writer writeproperties    reflectionutil retrieveobjectproperties tpsampler
writer writeproperties    reflectionutil retrieveobjectproperties cpusampler
clientthreadgroup   new threadgroup getsystest   getclientprefix
for  int i   0  i < getsystest   getnumclients    i
distributedestinations getsystest   getdestdistro    i  getsystest   getnumclients    getsystest   gettotaldests
final string clientname   getsystest   getclientprefix     i
final int clientdestindex   this clientdestindex
final int clientdestcount   this clientdestcount
thread t   new thread clientthreadgroup  new runnable
public void run
runjmsclient clientname  clientdestindex  clientdestcount
t setname getsystest   getclientprefix     i
t start
// run samplers
if  getsystest   getsamplers   indexof jmsclientsystemproperties sampler_tp  >  1
tpsampler startsampler
if  getsystest   getsamplers   indexof jmsclientsystemproperties sampler_cpu  >  1
try
cpusampler createplugin
cpusampler startsampler
catch  ioexception e
log warn     e getmessage
tpsampler waituntildone
cpusampler waituntildone
writer closereportwriter
public throughputsamplertask gettpsampler
return tpsampler
public void settpsampler throughputsamplertask tpsampler
this tpsampler   tpsampler
public cpusamplertask getcpusampler
return cpusampler
public void setcpusampler cpusamplertask cpusampler
this cpusampler   cpusampler
public jmsfactoryproperties getfactory
return factory
public void setfactory jmsfactoryproperties factory
this factory   factory
public abstract jmsclientsystemproperties getsystest
public abstract void setsystest jmsclientsystemproperties systestprops
public abstract jmsclientproperties getjmsclientproperties
protected performancereportwriter createperfwriter
if  getsystest   getreporttype   equalsignorecase jmsclientsystemproperties report_xml_file
string reportname
if   reportname   getsystest   getreportname       null
reportname   getsystest   getclientprefix             getsystest   getnumclients             getsystest   gettotaldests         getsystest   getdestdistro
return new xmlfileperfreportwriter getsystest   getreportdir    reportname
else if  getsystest   getreporttype   equalsignorecase jmsclientsystemproperties report_verbose
return new verboseperfreportwriter
else
// use verbose if unknown report type
return new verboseperfreportwriter
protected void distributedestinations string distrotype  int clientindex  int numclients  int numdests
if  distrotype equalsignorecase jmsclientsystemproperties dest_distro_all
clientdestcount   numdests
clientdestindex   0
else if  distrotype equalsignorecase jmsclientsystemproperties dest_distro_equal
int destperclient   numdests   numclients
// there are equal or more destinations per client
if  destperclient > 0
clientdestcount   destperclient
clientdestindex   destperclient   clientindex
// if there are more clients than destinations, share
// destinations per client
else
clientdestcount   1     at most one destination per client
clientdestindex   clientindex % numdests
else if  distrotype equalsignorecase jmsclientsystemproperties dest_distro_divide
int destperclient   numdests   numclients
// there are equal or more destinations per client
if  destperclient > 0
int remain   numdests % numclients
int nextindex
if  clientindex < remain
destperclient
nextindex   clientindex   destperclient
else
nextindex    clientindex   destperclient    remain
clientdestcount   destperclient
clientdestindex   nextindex
// if there are more clients than destinations, share
// destinations per client
else
clientdestcount   1     at most one destination per client
clientdestindex   clientindex % numdests
// send to all for unknown behavior
else
log warn     distrotype
clientdestcount   numdests
clientdestindex   0
protected connectionfactory loadjmsfactory string spiclass  properties factorysettings  throws jmsexception
try
class spi   class forname spiclass
spiconnectionfactory spifactory    spiconnectionfactory spi newinstance
connectionfactory jmsfactory   spifactory createconnectionfactory factorysettings
log info     jmsfactory getclass   getname         spifactory getclass   getname
return jmsfactory
catch  exception e
e printstacktrace
throw new jmsexception e getmessage
protected void setprovidermetadata connectionmetadata metadata  jmsclientproperties props  throws jmsexception
props setjmsprovider metadata getjmsprovidername         metadata getproviderversion
props setjmsversion metadata getjmsversion
string jmsproperties
enumeration jmsprops   metadata getjmsxpropertynames
while  jmsprops hasmoreelements
jmsproperties    jmsprops nextelement   tostring
if  jmsproperties length   > 0
// remove the last comma
jmsproperties   jmsproperties substring 0  jmsproperties length     1
props setjmsproperties jmsproperties
protected abstract void runjmsclient string clientname  int clientdestindex  int clientdestcount
protected static properties parsestringargs string args
file configfile   null
properties props   new properties
if  args    null    args length    0
return props     empty properties
for  int i   0  i < args length  i
string arg   args
if  arg startswith       arg startswith
arg   arg substring 2
int index   arg indexof
string key   arg substring 0  index
string val   arg substring index   1
if  key equalsignorecase
if   val endswith
val
configfile   new file val
props setproperty key  val
properties fileprops   new properties
try
if  configfile    null
log info     configfile getabsolutepath
fileprops load new fileinputstream configfile
catch  ioexception e
e printstacktrace
// overwrite file settings with command line settings
fileprops putall props
return fileprops