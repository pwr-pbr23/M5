/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io ioexception
import org apache activemq service
import org apache activemq broker region connectionstatistics
import org apache activemq command command
import org apache activemq command response
/**
* @version $revision: 1.5 $
*/
public interface connection extends service
/**
* @return the connector that created this connection.
*/
connector getconnector
/**
* sends a message to the client.
*
* @param message the message to send to the client.
*/
void dispatchsync command message
/**
* sends a message to the client.
*
* @param command
*/
void dispatchasync command command
/**
* services a client command and submits it to the broker.
*
* @param command
*/
response service command command
/**
* handles an unexpected error associated with a connection.
*
* @param error
*/
void serviceexception throwable error
/**
* @return true if the connection is slow
*/
boolean isslow
/**
* @return if after being marked, the connection is still writing
*/
boolean isblocked
/**
* @return true if the connection is connected
*/
boolean isconnected
/**
* @return true if the connection is active
*/
boolean isactive
/**
* returns the number of messages to be dispatched to this connection
*/
int getdispatchqueuesize
/**
* returns the statistics for this connection
*/
connectionstatistics getstatistics
/**
* @return true if the connection will process control commands
*/
boolean ismanageable
/**
* @return the source address for this connection
*/
string getremoteaddress
void serviceexceptionasync ioexception e
string getconnectionid