/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl index hash
import java io datainput
import java io dataoutput
import java io ioexception
import java util arraylist
import java util list
import org apache activemq kaha marshaller
import org apache commons logging log
import org apache commons logging logfactory
/**
* a page within a hashpage
*
* @version $revision: 1.1.1.1 $
*/
class hashpage
static final int page_header_size   17
private static final transient log log   logfactory getlog hashpage class
private int maximumentries
private long id
private int binid
private int persistedsize
private list<hashentry> hashindexentries
/*
* for persistence only
*/
private long nextfreepageid   hashentry not_set
private boolean active   true
/**
* constructor
*
* @param hashindex
* @param id
* @param parentid
* @param maximumentries
*/
hashpage long id  int maximumentries
this maximumentries
this id   id
/**
* constructor
*
* @param maximumentries
*/
public hashpage int maximumentries
this maximumentries   maximumentries
this hashindexentries   new arraylist<hashentry> maximumentries
public string tostring
return     getid         binid
public boolean equals object o
boolean result   false
if  o instanceof hashpage
hashpage other    hashpage o
result   other id    id
return result
public int hashcode
return  int id
boolean isactive
return this active
void setactive boolean active
this active   active
long getnextfreepageid
return this nextfreepageid
void setnextfreepageid long nextpageid
this nextfreepageid   nextpageid
long getid
return id
void setid long id
this id   id
int getpersistedsize
return persistedsize
void write marshaller keymarshaller  dataoutput dataout  throws ioexception
writeheader dataout
dataout writeint hashindexentries size
for  hashentry entry   hashindexentries
entry write keymarshaller  dataout
void read marshaller keymarshaller  datainput datain  throws ioexception
readheader datain
int size   datain readint
hashindexentries clear
for  int i   0  i < size  i
hashentry entry   new hashentry
entry read keymarshaller  datain
hashindexentries add entry
void readheader datainput datain  throws ioexception
active   datain readboolean
nextfreepageid   datain readlong
binid   datain readint
persistedsize   datain readint
void writeheader dataoutput dataout  throws ioexception
dataout writeboolean isactive
dataout writelong nextfreepageid
dataout writeint binid
dataout writeint size
boolean isempty
return hashindexentries isempty
boolean isfull
return hashindexentries size   >  maximumentries
boolean isunderflowed
return hashindexentries size   <  maximumentries   2
boolean isoverflowed
return hashindexentries size   > maximumentries
list<hashentry> getentries
return hashindexentries
void setentries list<hashentry> newentries
this hashindexentries   newentries
int getmaximumentries
return this maximumentries
void setmaximumentries int maximumentries
this maximumentries   maximumentries
int size
return hashindexentries size
void reset   throws ioexception
hashindexentries clear
setnextfreepageid hashentry not_set
void addhashentry int index  hashentry entry  throws ioexception
// index = index >= 0 ? index : 0;
// index = (index == 0 || index< size()) ? index : size()-1;
hashindexentries add index  entry
hashentry gethashentry int index
hashentry result   hashindexentries get index
return result
hashentry removehashentry int index  throws ioexception
hashentry result   hashindexentries remove index
return result
void removealltreeentries list<hashentry> c
hashindexentries removeall c
list<hashentry> getsublist int from  int to
return new arraylist<hashentry> hashindexentries sublist from  to
/**
* @return the binid
*/
int getbinid
return this binid
/**
* @param binid the binid to set
*/
void setbinid int binid
this binid   binid
void dump
stringbuffer str   new stringbuffer 32
str append tostring
str append
for  hashentry entry   hashindexentries
str append entry
str append
log info str