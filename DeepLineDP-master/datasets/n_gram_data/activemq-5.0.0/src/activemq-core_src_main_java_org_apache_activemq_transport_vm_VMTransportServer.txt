/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport vm
import java io ioexception
import java net inetsocketaddress
import java net uri
import java util concurrent atomic atomicinteger
import org apache activemq command brokerinfo
import org apache activemq transport mutextransport
import org apache activemq transport responsecorrelator
import org apache activemq transport transport
import org apache activemq transport transportacceptlistener
import org apache activemq transport transportserver
/**
* broker side of the vmtransport
*/
public class vmtransportserver implements transportserver
private transportacceptlistener acceptlistener
private final uri location
private boolean disposed
private final atomicinteger connectioncount   new atomicinteger 0
private final boolean disposeondisconnect
/**
* @param location
* @param disposeondisconnect
*/
public vmtransportserver uri location  boolean disposeondisconnect
this location   location
this disposeondisconnect   disposeondisconnect
/**
* @return a pretty print of this
*/
public string tostring
return     location
/**
* @return new vmtransport
* @throws ioexception
*/
public vmtransport connect   throws ioexception
transportacceptlistener al
synchronized  this
if  disposed
throw new ioexception
al   acceptlistener
if  al    null
throw new ioexception
connectioncount incrementandget
vmtransport client   new vmtransport location
public void stop   throws exception
if  disposed
return
super stop
if  connectioncount decrementandget      0    disposeondisconnect
vmtransportserver this stop
vmtransport server   new vmtransport location
client setpeer server
server setpeer client
al onaccept configure server
return client
/**
* configure transport
*
* @param transport
* @return the transport
*/
public static transport configure transport transport
transport   new mutextransport transport
transport   new responsecorrelator transport
return transport
/**
* set the transport accept listener for new connections
*
* @param acceptlistener
*/
public synchronized void setacceptlistener transportacceptlistener acceptlistener
this acceptlistener   acceptlistener
public void start   throws ioexception
public void stop   throws ioexception
vmtransportfactory stopped this
public uri getconnecturi
return location
public uri getbinduri
return location
public void setbrokerinfo brokerinfo brokerinfo
public inetsocketaddress getsocketaddress
return null