/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import javax jms message
import javax jms topic
import javax jms topicpublisher
import org apache activemq command activemqdestination
/**
* a client uses a <code>topicpublisher</code> object to publish messages on
* a topic. a <code>topicpublisher</code> object is the publish-subscribe
* form of a message producer.
* <p/>
* <p>
* normally, the <code>topic</code> is specified when a <code>topicpublisher
* </code> is created. in this case, an attempt to use the <code>publish
* </code> methods for an unidentified <code>topicpublisher</code> will throw
* a <code>java.lang.unsupportedoperationexception</code>.
* <p/>
* <p>
* if the <code>topicpublisher</code> is created with an unidentified <code>
* topic</code>, an attempt to use the <code>publish</code> methods that
* assume that the <code>topic</code> has been identified will throw a <code>
* java.lang.unsupportedoperationexception</code>.
* <p/>
* <p>
* during the execution of its <code>publish</code> method, a message must
* not be changed by other threads within the client. if the message is
* modified, the result of the <code>publish</code> is undefined.
* <p/>
* <p>
* after publishing a message, a client may retain and modify it without
* affecting the message that has been published. the same message object may
* be published multiple times.
* <p/>
* <p>
* the following message headers are set as part of publishing a message:
* <code>jmsdestination</code>,<code>jmsdeliverymode</code>,<code>jmsexpiration</code>,
* <code>jmspriority</code>,<code>jmsmessageid</code> and <code>jmstimestamp</code>.
* when the message is published, the values of these headers are ignored.
* after completion of the <code>publish</code>, the headers hold the values
* specified by the method publishing the message. it is possible for the
* <code>publish</code> method not to set <code>jmsmessageid</code> and
* <code>jmstimestamp</code> if the setting of these headers is explicitly
* disabled by the <code>messageproducer.setdisablemessageid</code> or <code>messageproducer.setdisablemessagetimestamp</code>
* method.
* <p/>
* <p>
* creating a <code>messageproducer</code> provides the same features as
* creating a <code>topicpublisher</code>. a <code>messageproducer</code>
* object is recommended when creating new code. the <code>topicpublisher
* </code> is provided to support existing code.
* <p/>
* <p/>
* <p>
* because <code>topicpublisher</code> inherits from <code>messageproducer
* </code>, it inherits the <code>send</code> methods that are a part of the
* <code>messageproducer</code> interface. using the <code>send</code>
* methods will have the same effect as using the <code>publish</code>
* methods: they are functionally the same.
*
* @see session#createproducer(destination)
* @see topicsession#createpublisher(topic)
*/
public class activemqtopicpublisher extends activemqmessageproducer implements
topicpublisher
protected activemqtopicpublisher activemqsession session
activemqdestination destination  throws jmsexception
super session  session getnextproducerid    destination
/**
* gets the topic associated with this <code>topicpublisher</code>.
*
* @return this publisher's topic
* @throws jmsexception if the jms provider fails to get the topic for this
*                      <code>topicpublisher</code> due to some internal error.
*/
public topic gettopic   throws jmsexception
return  topic  super getdestination
/**
* publishes a message to the topic. uses the <code>topicpublisher</code>'s
* default delivery mode, priority, and time to live.
*
* @param message the message to publish
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws messageformatexception      if an invalid message is specified.
* @throws invaliddestinationexception if a client uses this method with a <code>topicpublisher
*                                     </code> with an invalid topic.
* @throws java.lang.unsupportedoperationexception
*                                     if a client uses this method with a <code>topicpublisher
*                                     </code> that did not specify a topic at creation time.
* @see javax.jms.messageproducer#getdeliverymode()
* @see javax.jms.messageproducer#gettimetolive()
* @see javax.jms.messageproducer#getpriority()
*/
public void publish message message  throws jmsexception
super send message
/**
* publishes a message to the topic, specifying delivery mode, priority,
* and time to live.
*
* @param message      the message to publish
* @param deliverymode the delivery mode to use
* @param priority     the priority for this message
* @param timetolive   the message's lifetime (in milliseconds)
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws messageformatexception      if an invalid message is specified.
* @throws invaliddestinationexception if a client uses this method with a <code>topicpublisher
*                                     </code> with an invalid topic.
* @throws java.lang.unsupportedoperationexception
*                                     if a client uses this method with a <code>topicpublisher
*                                     </code> that did not specify a topic at creation time.
*/
public void publish message message  int deliverymode  int priority
long timetolive  throws jmsexception
super send message  deliverymode  priority  timetolive
/**
* publishes a message to a topic for an unidentified message producer.
* uses the <code>topicpublisher</code>'s default delivery mode,
* priority, and time to live.
* <p/>
* <p>
* typically, a message producer is assigned a topic at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the topic be supplied every time a message is published.
*
* @param topic   the topic to publish this message to
* @param message the message to publish
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws messageformatexception      if an invalid message is specified.
* @throws invaliddestinationexception if a client uses this method with an invalid topic.
* @see javax.jms.messageproducer#getdeliverymode()
* @see javax.jms.messageproducer#gettimetolive()
* @see javax.jms.messageproducer#getpriority()
*/
public void publish topic topic  message message  throws jmsexception
super send topic  message
/**
* publishes a message to a topic for an unidentified message producer,
* specifying delivery mode, priority and time to live.
* <p/>
* <p>
* typically, a message producer is assigned a topic at creation time;
* however, the jms api also supports unidentified message producers, which
* require that the topic be supplied every time a message is published.
*
* @param topic        the topic to publish this message to
* @param message      the message to publish
* @param deliverymode the delivery mode to use
* @param priority     the priority for this message
* @param timetolive   the message's lifetime (in milliseconds)
* @throws jmsexception                if the jms provider fails to publish the message due to
*                                     some internal error.
* @throws messageformatexception      if an invalid message is specified.
* @throws invaliddestinationexception if a client uses this method with an invalid topic.
*/
public void publish topic topic  message message  int deliverymode
int priority  long timetolive  throws jmsexception
super send topic  message  deliverymode  priority  timetolive