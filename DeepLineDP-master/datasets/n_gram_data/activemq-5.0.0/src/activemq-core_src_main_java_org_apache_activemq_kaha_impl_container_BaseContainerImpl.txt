/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl container
import java io ioexception
import java util arraylist
import java util list
import org apache activemq kaha containerid
import org apache activemq kaha runtimestoreexception
import org apache activemq kaha storeentry
import org apache activemq kaha impl datamanager
import org apache activemq kaha impl data item
import org apache activemq kaha impl index diskindexlinkedlist
import org apache activemq kaha impl index indexitem
import org apache activemq kaha impl index indexlinkedlist
import org apache activemq kaha impl index indexmanager
import org apache activemq kaha impl index vmindexlinkedlist
import org apache commons logging log
import org apache commons logging logfactory
/**
* implementation of a listcontainer
*
* @version $revision: 1.2 $
*/
public abstract class basecontainerimpl
private static final log log   logfactory getlog basecontainerimpl class
protected indexitem root
protected indexlinkedlist indexlist
protected indexmanager indexmanager
protected datamanager datamanager
protected containerid containerid
protected boolean loaded
protected boolean closed
protected boolean initialized
protected boolean persistentindex
protected basecontainerimpl containerid id  indexitem root  indexmanager indexmanager  datamanager datamanager  boolean persistentindex
this containerid   id
this root   root
this indexmanager   indexmanager
this datamanager   datamanager
this persistentindex   persistentindex
public containerid getcontainerid
return containerid
public synchronized void init
if   initialized
if   initialized
initialized   true
if  this indexlist    null
if  persistentindex
this indexlist   new diskindexlinkedlist indexmanager  root
else
this indexlist   new vmindexlinkedlist root
public synchronized void clear
if  indexlist    null
indexlist clear
/**
* @return the indexlist
*/
public indexlinkedlist getlist
return indexlist
/**
* @param indexlist the indexlist to set
*/
public void setlist indexlinkedlist indexlist
this indexlist   indexlist
public abstract void unload
public abstract void load
public abstract int size
protected abstract object getvalue storeentry currentitem
protected abstract void remove indexitem currentitem
protected final synchronized indexlinkedlist getinternallist
return indexlist
public final synchronized void close
unload
closed   true
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#isloaded()
*/
public final synchronized boolean isloaded
checkclosed
return loaded
/*
* (non-javadoc)
*
* @see org.apache.activemq.kaha.listcontainer#getid()
*/
public final object getid
checkclosed
return containerid getkey
public datamanager getdatamanager
return datamanager
public indexmanager getindexmanager
return indexmanager
public final synchronized void expressdatainterest   throws ioexception
long nextitem   root getnextitem
while  nextitem    item position_not_set
indexitem item   indexmanager getindex nextitem
item setoffset nextitem
datamanager addinterestinfile item getkeyfile
datamanager addinterestinfile item getvaluefile
nextitem   item getnextitem
protected final void doclear
checkclosed
loaded   true
list<indexitem> indexlist   new arraylist<indexitem>
try
init
long nextitem   root getnextitem
while  nextitem    item position_not_set
indexitem item   new indexitem
item setoffset nextitem
indexlist add item
nextitem   item getnextitem
root setnextitem item position_not_set
storeindex root
for  int i   0  i < indexlist size    i
indexitem item   indexlist get i
datamanager removeinterestinfile item getkeyfile
datamanager removeinterestinfile item getvaluefile
indexmanager freeindex item
indexlist clear
catch  ioexception e
log error     getid    e
throw new runtimestoreexception e
protected final void delete final indexitem keyitem  final indexitem previtem  final indexitem nextitem
if  keyitem    null
try
root   indexlist getroot
indexitem prev   previtem    null ? root   previtem
indexitem next    nextitem    null     nextitem equals root   ? nextitem   null
datamanager removeinterestinfile keyitem getkeyfile
datamanager removeinterestinfile keyitem getvaluefile
if  next    null
prev setnextitem next getoffset
next setpreviousitem prev getoffset
updateindexes next
else
prev setnextitem item position_not_set
updateindexes prev
indexmanager freeindex keyitem
catch  ioexception e
log error     keyitem  e
throw new runtimestoreexception e
protected final void checkclosed
if  closed
throw new runtimestoreexception
protected void storeindex indexitem item  throws ioexception
indexmanager storeindex item
protected void updateindexes indexitem item  throws ioexception
indexmanager updateindexes item
protected final boolean isroot storeentry item
return item    null    root    null     root    item    root getoffset      item getoffset
// return item != null && indexroot != null && indexroot == item;