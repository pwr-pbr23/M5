/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq memory
import java util iterator
import java util linkedlist
import java util list
import java util concurrent copyonwritearraylist
import org apache activemq thread task
import org apache activemq thread taskrunner
import org apache activemq thread taskrunnerfactory
import org apache activemq usage usage
import org apache activemq usage usagelistener
import org apache commons logging log
import org apache commons logging logfactory
public class cacheevictionusagelistener implements usagelistener
private static final log log   logfactory getlog cacheevictionusagelistener class
private final list<cacheevictor> evictors   new copyonwritearraylist<cacheevictor>
private final int usagehighmark
private final int usagelowmark
private final taskrunner evictiontask
private final usage usage
public cacheevictionusagelistener usage usage  int usagehighmark  int usagelowmark  taskrunnerfactory taskrunnerfactory
this usage   usage
this usagehighmark   usagehighmark
this usagelowmark   usagelowmark
evictiontask   taskrunnerfactory createtaskrunner new task
public boolean iterate
return evictmessages
system identityhashcode this
boolean evictmessages
// try to take the memory usage down below the low mark.
log debug     usage getpercentusage
list<cacheevictor> list   new linkedlist<cacheevictor> evictors
while  list size   > 0    usage getpercentusage   > usagelowmark
// evenly evict messages from all evictors
for  iterator<cacheevictor> iter   list iterator    iter hasnext
cacheevictor evictor   iter next
if  evictor evictcacheentry      null
iter remove
return false
public void onusagechanged usage usage  int oldpercentusage  int newpercentusage
// do we need to start evicting cache entries? usage > than the
// high mark
if  oldpercentusage < newpercentusage    usage getpercentusage   >  usagehighmark
try
evictiontask wakeup
catch  interruptedexception e
thread currentthread   interrupt
public void add cacheevictor evictor
evictors add evictor
public void remove cacheevictor evictor
evictors remove evictor