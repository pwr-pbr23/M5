/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq xbean
import java util hashmap
import org apache activemq broker brokerservice
import org springframework beans factory disposablebean
import org springframework beans factory factorybean
import org springframework beans factory initializingbean
import org springframework core io resource
/**
* used to share a single broker even if you have multiple broker bean
* definitions. a use case is where you have multiple web applications that want
* to start an embedded broker but only the first one to deploy should actually
* start it.
*
* @version $revision$
*/
public class pooledbrokerfactorybean implements factorybean  initializingbean  disposablebean
static final hashmap<string  sharedbroker> shared_broker_map   new hashmap<string  sharedbroker>
private boolean start
private resource config
static class sharedbroker
brokerfactorybean factory
int refcount
public void afterpropertiesset   throws exception
synchronized  shared_broker_map
sharedbroker sharedbroker   shared_broker_map get config getfilename
if  sharedbroker    null
sharedbroker   new sharedbroker
sharedbroker factory   new brokerfactorybean
sharedbroker factory setconfig config
sharedbroker factory setstart start
sharedbroker factory afterpropertiesset
shared_broker_map put config getfilename    sharedbroker
sharedbroker refcount
public void destroy   throws exception
synchronized  shared_broker_map
sharedbroker sharedbroker   shared_broker_map get config getfilename
if  sharedbroker    null
sharedbroker refcount
if  sharedbroker refcount    0
sharedbroker factory destroy
shared_broker_map remove config getfilename
public resource getconfig
return config
public object getobject   throws exception
synchronized  shared_broker_map
sharedbroker sharedbroker   shared_broker_map get config getfilename
if  sharedbroker    null
return sharedbroker factory getobject
return null
public class<brokerservice> getobjecttype
return brokerservice class
public boolean issingleton
return true
public boolean isstart
return start
public void setconfig resource config
this config   config
public void setstart boolean start
this start   start