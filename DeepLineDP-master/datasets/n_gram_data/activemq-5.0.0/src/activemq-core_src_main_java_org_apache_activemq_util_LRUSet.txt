/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java util abstractset
import java util iterator
import java util set
/**
* a simple lru set
*
* @version $revision$
* @param <k>
* @param <v>
*/
public class lruset<e>
extends abstractset<e>
implements set<e>  cloneable  java io serializable
private static final object ignore   new object
private final lrucache cache
/**
* default constructor for an lru cache the default capacity is 10000
*/
public lruset
this 0 10000  0 75f  true
/**
* constructs a lrucache with a maximum capacity
*
* @param maximumcachesize
*/
public lruset int maximumcachesize
this 0  maximumcachesize  0 75f  true
/**
* constructs an empty <tt>lrucache</tt> instance with the specified
* initial capacity, maximumcachesize,load factor and ordering mode.
*
* @param initialcapacity
*            the initial capacity.
* @param maximumcachesize
* @param loadfactor
*            the load factor.
* @param accessorder
*            the ordering mode - <tt>true</tt> for access-order,
*            <tt>false</tt> for insertion-order.
* @throws illegalargumentexception
*             if the initial capacity is negative or the load factor is
*             non-positive.
*/
public lruset int initialcapacity  int maximumcachesize  float loadfactor  boolean accessorder
this cache   new lrucache<e object> initialcapacity maximumcachesize loadfactor accessorder
public iterator<e> iterator
return cache keyset   iterator
public int size
return cache size
public boolean isempty
return cache isempty
public boolean contains object o
return cache containskey o
public boolean add e o
return cache put o  ignore   null
public boolean remove object o
return cache remove o   ignore
public void clear
cache clear