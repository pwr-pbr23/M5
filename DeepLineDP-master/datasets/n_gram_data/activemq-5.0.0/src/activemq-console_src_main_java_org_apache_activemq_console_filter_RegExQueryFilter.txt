/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console filter
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import java util regex pattern
public abstract class regexqueryfilter extends abstractqueryfilter
public static final string regex_prefix
/**
* creates a regular expression query that is able to match an object using
* key-value pattern regex filtering
*
* @param next
*/
protected regexqueryfilter queryfilter next
super next
/**
* separates the regular expressions queries from the usual queries. a query
* is a regex query, if it is key-value pair with the format <key>=<value>,
* and value is a pattern that satisfies the isregularexpression method.
*
* @param queries - list of queries
* @return filtered objects that matches the regex query
* @throws exception
*/
public list query list queries  throws exception
map regex   new hashmap
list newqueries   new arraylist
// lets parse for regular expression queries
for  iterator i   queries iterator    i hasnext
// get key-value pair
string token    string i next
string key
string val
int pos   token indexof
if  pos >  0
val   token substring pos   1
key   token substring 0  pos
// add the regex query to list and make it a non-factor in the
// succeeding queries
if  isregularexpression val
regex put key  compilequery val
// add the normal query to the query list
else
newqueries add token
// filter the result using the regular expressions specified
return filtercollectionusingregex regex  next query newqueries
/**
* checks if a given string is a regular expression query. currently, a
* pattern is a regex query, if it starts with the
* regexqueryfilter.regex_prefix.
*
* @param query
* @return
*/
protected boolean isregularexpression string query
return query startswith regex_prefix
/**
* compiles the regex query to a pattern.
*
* @param query - query string to compile
* @return regex pattern
*/
protected pattern compilequery string query
return pattern compile query substring regex_prefix length
/**
* filter the specified colleciton using the regex patterns extracted.
*
* @param regex - regex map
* @param data - list of objects to filter
* @return filtered list of objects that matches the regex map
* @throws exception
*/
protected list filtercollectionusingregex map regex  list data  throws exception
// no regular expressions filtering needed
if  regex    null    regex isempty
return data
list filteredelems   new arraylist
// get each data object to filter
for  iterator i   data iterator    i hasnext
object dataelem   i next
// if properties of data matches all the regex pattern, add it
if  matches dataelem  regex
filteredelems add dataelem
return filteredelems
/**
* determines how the object is to be matched to the regex map.
*
* @param data - object to match
* @param regex - regex map
* @return true, if the object matches the regex map, false otherwise
* @throws exception
*/
protected abstract boolean matches object data  map regex  throws exception