/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java util arraylist
import java util iterator
import java util linkedhashmap
import java util list
import java util map
import java util concurrent concurrenthashmap
import javax jms jmsexception
import javax transaction xa xaexception
import org apache activemq activemqmessageaudit
import org apache activemq command connectioninfo
import org apache activemq command localtransactionid
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command producerinfo
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq state producerstate
import org apache activemq store transactionrecoverylistener
import org apache activemq store transactionstore
import org apache activemq transaction localtransaction
import org apache activemq transaction synchronization
import org apache activemq transaction transaction
import org apache activemq transaction xatransaction
import org apache activemq util ioexceptionsupport
import org apache activemq util wrappedexception
import org apache commons logging log
import org apache commons logging logfactory
/**
* this broker filter handles the transaction related operations in the broker
* interface.
*
* @version $revision: 1.10 $
*/
public class transactionbroker extends brokerfilter
private static final log log   logfactory getlog transactionbroker class
// the prepared xa transactions.
private transactionstore transactionstore
private map<transactionid  transaction> xatransactions   new linkedhashmap<transactionid  transaction>
private activemqmessageaudit audit
public transactionbroker broker next  transactionstore transactionstore
super next
this transactionstore   transactionstore
// ////////////////////////////////////////////////////////////////////////////
//
// life cycle methods
//
// ////////////////////////////////////////////////////////////////////////////
/**
* recovers any prepared transactions.
*/
public void start   throws exception
transactionstore start
try
final connectioncontext context   new connectioncontext
context setbroker this
context setinrecoverymode true
context settransactions new concurrenthashmap<transactionid  transaction>
context setproducerflowcontrol false
final producerbrokerexchange producerexchange   new producerbrokerexchange
producerexchange setmutable true
producerexchange setconnectioncontext context
producerexchange setproducerstate new producerstate new producerinfo
final consumerbrokerexchange consumerexchange   new consumerbrokerexchange
consumerexchange setconnectioncontext context
transactionstore recover new transactionrecoverylistener
public void recover xatransactionid xid  message addedmessages  messageack aks
try
begintransaction context  xid
for  int i   0  i < addedmessages length  i
send producerexchange  addedmessages
for  int i   0  i < aks length  i
acknowledge consumerexchange  aks
preparetransaction context  xid
catch  throwable e
throw new wrappedexception e
catch  wrappedexception e
throwable cause   e getcause
throw ioexceptionsupport create     cause getmessage    cause
next start
public void stop   throws exception
transactionstore stop
next stop
// ////////////////////////////////////////////////////////////////////////////
//
// brokerfilter overrides
//
// ////////////////////////////////////////////////////////////////////////////
public transactionid getpreparedtransactions connectioncontext context  throws exception
list<transactionid> txs   new arraylist<transactionid>
synchronized  xatransactions
for  iterator<transaction> iter   xatransactions values   iterator    iter hasnext
transaction tx   iter next
if  tx isprepared
txs add tx gettransactionid
xatransactionid rc   new xatransactionid
txs toarray rc
return rc
public void begintransaction connectioncontext context  transactionid xid  throws exception
// the transaction may have already been started.
if  xid isxatransaction
transaction transaction   null
synchronized  xatransactions
transaction   xatransactions get xid
if  transaction    null
return
transaction   new xatransaction transactionstore   xatransactionid xid  this
xatransactions put xid  transaction
else
map<transactionid  transaction> transactionmap   context gettransactions
transaction transaction   transactionmap get xid
if  transaction    null
throw new jmsexception     xid
transaction   new localtransaction transactionstore   localtransactionid xid  context
transactionmap put xid  transaction
public int preparetransaction connectioncontext context  transactionid xid  throws exception
transaction transaction   gettransaction context  xid  false
return transaction prepare
public void committransaction connectioncontext context  transactionid xid  boolean onephase  throws exception
transaction transaction   gettransaction context  xid  true
transaction commit onephase
public void rollbacktransaction connectioncontext context  transactionid xid  throws exception
transaction transaction   gettransaction context  xid  true
transaction rollback
public void forgettransaction connectioncontext context  transactionid xid  throws exception
transaction transaction   gettransaction context  xid  true
transaction rollback
public void acknowledge consumerbrokerexchange consumerexchange  messageack ack  throws exception
// this method may be invoked recursively.
// track original tx so that it can be restored.
final connectioncontext context   consumerexchange getconnectioncontext
transaction originaltx   context gettransaction
transaction transaction   null
if  ack isintransaction
transaction   gettransaction context  ack gettransactionid    false
context settransaction transaction
try
next acknowledge consumerexchange  ack
finally
context settransaction originaltx
public void send producerbrokerexchange producerexchange  final message message  throws exception
// this method may be invoked recursively.
// track original tx so that it can be restored.
final connectioncontext context   producerexchange getconnectioncontext
transaction originaltx   context gettransaction
transaction transaction   null
synchronization sync   null
if  message gettransactionid      null
transaction   gettransaction context  message gettransactionid    false
if  transaction    null
sync   new synchronization
public void afterrollback
if  audit    null
audit rollback message
transaction addsynchronization sync
if  audit    null     audit isduplicate message
context settransaction transaction
try
next send producerexchange  message
finally
context settransaction originaltx
else
if  sync    null    transaction    null
transaction removesynchronization sync
if  log isdebugenabled
log debug     message
public void removeconnection connectioncontext context  connectioninfo info  throwable error  throws exception
for  iterator<transaction> iter   context gettransactions   values   iterator    iter hasnext
try
transaction transaction   iter next
transaction rollback
catch  exception e
log warn    e
iter remove
next removeconnection context  info  error
// ////////////////////////////////////////////////////////////////////////////
//
// implementation help methods.
//
// ////////////////////////////////////////////////////////////////////////////
public transaction gettransaction connectioncontext context  transactionid xid  boolean mightbeprepared  throws jmsexception  xaexception
map transactionmap   null
synchronized  xatransactions
transactionmap   xid isxatransaction   ? xatransactions   context gettransactions
transaction transaction    transaction transactionmap get xid
if  transaction    null
return transaction
if  xid isxatransaction
xaexception e   new xaexception     xid
e errorcode   xaexception xaer_nota
throw e
else
throw new jmsexception     xid
public void removetransaction xatransactionid xid
synchronized  xatransactions
xatransactions remove xid
public synchronized void brokerservicestarted
super brokerservicestarted
if  getbrokerservice   issupportfailover      audit    null
audit   new activemqmessageaudit