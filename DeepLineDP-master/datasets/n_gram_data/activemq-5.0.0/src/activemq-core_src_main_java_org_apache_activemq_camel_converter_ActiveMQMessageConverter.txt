/**
*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
* http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq camel converter
import java io serializable
import javax jms jmsexception
import javax jms messagelistener
import javax jms message
import org apache activemq command activemqmessage
import org apache activemq command activemqobjectmessage
import org apache activemq command activemqtextmessage
import org apache camel converter
import org apache camel exchange
import org apache camel processor
import org apache camel component jms jmsbinding
/**
* @version $revision$
*/
@converter
public class activemqmessageconverter
private jmsbinding binding   new jmsbinding
/**
* converts the inbound message exchange to an activemq jms message
*
* @return the activemq message
*/
@converter
public activemqmessage tomessage exchange exchange  throws jmsexception
activemqmessage message   createactivemqmessage exchange
getbinding   appendjmsproperties message  exchange
return message
/**
* allows a jms {@link messagelistener} to be converted to a camel {@link processor}
* so that we can provide better
* <a href="">bean integration</a> so that we can use any jms messagelistener in
* in camel as a bean
* @param listener the jms message listener
* @return a newly created camel processor which when invoked will invoke
* {@link messagelistener#onmessage(message)}
*/
@converter
public processor toprocessor final messagelistener listener
return new processor
public void process exchange exchange  throws exception
message message   tomessage exchange
listener onmessage message
@override
public string tostring
return     listener
private static activemqmessage createactivemqmessage exchange exchange  throws jmsexception
object body   exchange getin   getbody
if  body instanceof string
activemqtextmessage answer   new activemqtextmessage
answer settext  string  body
return answer
else if  body instanceof serializable
activemqobjectmessage answer   new activemqobjectmessage
answer setobject  serializable  body
return answer
else
return new activemqmessage
// properties
//-------------------------------------------------------------------------
public jmsbinding getbinding
return binding
public void setbinding jmsbinding binding
this binding   binding