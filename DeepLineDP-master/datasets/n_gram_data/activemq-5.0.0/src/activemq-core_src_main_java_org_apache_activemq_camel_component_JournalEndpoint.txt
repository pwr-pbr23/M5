/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq camel component
import java io file
import java io ioexception
import java io interruptedioexception
import java util concurrent atomic atomicreference
import org apache activemq kaha impl async asyncdatamanager
import org apache activemq kaha impl async location
import org apache activemq util bytesequence
import org apache camel camelexchangeexception
import org apache camel consumer
import org apache camel exchange
import org apache camel processor
import org apache camel producer
import org apache camel runtimecamelexception
import org apache camel exchangepattern
import org apache camel impl defaultconsumer
import org apache camel impl defaultendpoint
import org apache camel impl defaultexchange
import org apache camel impl defaultproducer
import org apache commons logging log
import org apache commons logging logfactory
public class journalendpoint extends defaultendpoint<exchange>
private static final transient log log   logfactory getlog journalendpoint class
private final file directory
private final atomicreference<defaultconsumer<exchange>> consumer   new atomicreference<defaultconsumer<exchange>>
private final object activationmutex   new object
private int referencecount
private asyncdatamanager datamanager
private thread thread
private location lastreadlocation
private long idledelay   1000
private boolean syncproduce   true
private boolean syncconsume
public journalendpoint string uri  journalcomponent journalcomponent  file directory
super uri  journalcomponent getcamelcontext
this directory   directory
public boolean issingleton
return true
public file getdirectory
return directory
public consumer<exchange> createconsumer processor processor  throws exception
return new defaultconsumer<exchange> this  processor
@override
public void start   throws exception
super start
activateconsumer this
@override
public void stop   throws exception
deactivateconsumer this
super stop
protected void decrementreference   throws ioexception
synchronized  activationmutex
referencecount
if  referencecount    0
log debug     directory
log debug     lastreadlocation
datamanager close
datamanager   null
protected void incrementreference   throws ioexception
synchronized  activationmutex
referencecount
if  referencecount    1
log debug     directory
datamanager   new asyncdatamanager
datamanager setdirectory directory
datamanager start
lastreadlocation   datamanager getmark
log debug     lastreadlocation
protected void deactivateconsumer defaultconsumer<exchange> consumer  throws ioexception
synchronized  activationmutex
if  this consumer get      consumer
throw new runtimecamelexception
this consumer set null
try
thread join
catch  interruptedexception e
throw new interruptedioexception
decrementreference
protected void activateconsumer defaultconsumer<exchange> consumer  throws ioexception
synchronized  activationmutex
if  this consumer get      null
throw new runtimecamelexception
incrementreference
this consumer set consumer
thread   new thread
@override
public void run
dispatchtoconsumer
thread setname     getendpointuri
thread setdaemon true
thread start
protected void dispatchtoconsumer
try
defaultconsumer<exchange> consumer
while   consumer   this consumer get       null
// see if there is a new record to process
location location   datamanager getnextlocation lastreadlocation
if  location    null
// send it on.
bytesequence read   datamanager read location
exchange exchange   createexchange
exchange getin   setbody read
exchange getin   setheader    getendpointuri
exchange getin   setheader    location
consumer getprocessor   process exchange
// setting the mark makes the data manager forget about
// everything
// before that record.
if  log isdebugenabled
log debug     location
datamanager setmark location  syncconsume
lastreadlocation   location
else
// avoid a tight cpu loop if there is no new record to read.
log debug
thread sleep idledelay
catch  throwable e
e printstacktrace
public producer<exchange> createproducer   throws exception
return new defaultproducer<exchange> this
public void process exchange exchange  throws exception
incrementreference
try
bytesequence body   exchange getin   getbody bytesequence class
if  body    null
byte bytes   exchange getin   getbody byte class
if  bytes    null
body   new bytesequence bytes
if  body    null
throw new camelexchangeexception    exchange
datamanager write body  syncproduce
finally
decrementreference
public boolean issyncconsume
return syncconsume
public void setsyncconsume boolean syncconsume
this syncconsume   syncconsume
public boolean issyncproduce
return syncproduce
public void setsyncproduce boolean syncproduce
this syncproduce   syncproduce
boolean isopen
synchronized  activationmutex
return referencecount > 0