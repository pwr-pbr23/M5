/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq pool
import java io ioexception
import java util hashmap
import java util iterator
import java util map
import java util concurrent atomic atomicboolean
import javax jms jmsexception
import javax jms session
import javax transaction rollbackexception
import javax transaction status
import javax transaction systemexception
import javax transaction transactionmanager
import javax transaction xa xaresource
import org apache activemq activemqconnection
import org apache activemq transport transportlistener
import org apache commons pool objectpoolfactory
/**
* holds a real jms connection along with the session pools associated with it.
*
* @version $revision$
*/
public class connectionpool
private transactionmanager transactionmanager
private activemqconnection connection
private map<sessionkey  sessionpool> cache
private atomicboolean started   new atomicboolean false
private int referencecount
private objectpoolfactory poolfactory
private long lastused   system currenttimemillis
private boolean hasfailed
private boolean hasexpired
private int idletimeout   30   1000
public connectionpool activemqconnection connection  objectpoolfactory poolfactory
transactionmanager transactionmanager
this connection  new hashmap<sessionkey  sessionpool>    poolfactory  transactionmanager
// add a transport listener so that we can notice if this connection
// should be expired due to
// a connection failure.
connection addtransportlistener new transportlistener
public void oncommand object command
public void onexception ioexception error
synchronized  connectionpool this
hasfailed   true
public void transportinterupted
public void transportresumed
public connectionpool activemqconnection connection  map<sessionkey  sessionpool> cache  objectpoolfactory poolfactory
transactionmanager transactionmanager
this connection   connection
this cache   cache
this poolfactory   poolfactory
this transactionmanager   transactionmanager
public void start   throws jmsexception
if  started compareandset false  true
connection start
public synchronized activemqconnection getconnection
return connection
public session createsession boolean transacted  int ackmode  throws jmsexception
try
boolean isxa   transactionmanager    null    transactionmanager getstatus      status status_no_transaction
if  isxa
transacted   true
ackmode   session session_transacted
sessionkey key   new sessionkey transacted  ackmode
sessionpool pool   cache get key
if  pool    null
pool   new sessionpool this  key  poolfactory createpool
cache put key  pool
pooledsession session   pool borrowsession
if  isxa
session setignoreclose true
transactionmanager gettransaction   registersynchronization new synchronization session
incrementreferencecount
transactionmanager gettransaction   enlistresource createxaresource session
return session
catch  rollbackexception e
final jmsexception jmsexception   new jmsexception
jmsexception initcause e
throw jmsexception
catch  systemexception e
final jmsexception jmsexception   new jmsexception
jmsexception initcause e
throw jmsexception
public synchronized void close
if  connection    null
try
iterator<sessionpool> i   cache values   iterator
while  i hasnext
sessionpool pool   i next
i remove
try
pool close
catch  exception e
finally
try
connection close
catch  exception e
finally
connection   null
public synchronized void incrementreferencecount
referencecount
lastused   system currenttimemillis
public synchronized void decrementreferencecount
referencecount
lastused   system currenttimemillis
if  referencecount    0
expiredcheck
/**
* @return true if this connection has expired.
*/
public synchronized boolean expiredcheck
if  connection    null
return true
if  hasexpired
if  referencecount    0
close
return true
if  hasfailed     idletimeout > 0    system currenttimemillis   > lastused   idletimeout
hasexpired   true
if  referencecount    0
close
return true
return false
public int getidletimeout
return idletimeout
public void setidletimeout int idletimeout
this idletimeout   idletimeout
protected xaresource createxaresource pooledsession session  throws jmsexception
return session getsession   gettransactioncontext
protected class synchronization implements javax transaction synchronization
private final pooledsession session
protected synchronization pooledsession session
this session   session
public void beforecompletion
public void aftercompletion int status
try
// this will return session to the pool.
session setignoreclose false
session close
decrementreferencecount
catch  jmsexception e
throw new runtimeexception e