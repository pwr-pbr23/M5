/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store
import java io file
import java io ioexception
import java util set
import org apache activemq service
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq usage systemusage
/**
* adapter to the actual persistence mechanism used with activemq
*
* @version $revision: 1.3 $
*/
public interface persistenceadapter extends service
/**
* returns a set of all the {@link org.apache.activemq.command.activemqdestination}
* objects that the persistence store is aware exist.
*
* @return active destinations
*/
set<activemqdestination> getdestinations
/**
* factory method to create a new queue message store with the given destination name
* @param destination
* @return the message store
* @throws ioexception
*/
messagestore createqueuemessagestore activemqqueue destination  throws ioexception
/**
* factory method to create a new topic message store with the given destination name
* @param destination
* @return the topic message store
* @throws ioexception
*/
topicmessagestore createtopicmessagestore activemqtopic destination  throws ioexception
/**
* factory method to create a new persistent prepared transaction store for xa recovery
* @return transaction store
* @throws ioexception
*/
transactionstore createtransactionstore   throws ioexception
/**
* this method starts a transaction on the persistent storage - which is nothing to
* do with jms or xa transactions - its purely a mechanism to perform multiple writes
* to a persistent store in 1 transaction as a performance optimization.
* <p/>
* typically one transaction will require one disk synchronization point and so for
* real high performance its usually faster to perform many writes within the same
* transaction to minimize latency caused by disk synchronization. this is especially
* true when using tools like berkeley db or embedded jdbc servers.
* @param context
* @throws ioexception
*/
void begintransaction connectioncontext context  throws ioexception
/**
* commit a persistence transaction
* @param context
* @throws ioexception
*
* @see persistenceadapter#begintransaction(connectioncontext context)
*/
void committransaction connectioncontext context  throws ioexception
/**
* rollback a persistence transaction
* @param context
* @throws ioexception
*
* @see persistenceadapter#begintransaction(connectioncontext context)
*/
void rollbacktransaction connectioncontext context  throws ioexception
/**
*
* @return last broker sequence
* @throws ioexception
*/
long getlastmessagebrokersequenceid   throws ioexception
/**
* delete's all the messages in the persistent store.
*
* @throws ioexception
*/
void deleteallmessages   throws ioexception
/**
* @param usagemanager the usagemanager that is controlling the broker's memory usage.
*/
void setusagemanager systemusage usagemanager
/**
* set the name of the broker using the adapter
* @param brokername
*/
void setbrokername string brokername
/**
* set the directory where any data files should be created
* @param dir
*/
void setdirectory file dir
/**
* checkpoint any
* @param sync
* @throws ioexception
*
*/
void checkpoint boolean sync  throws ioexception
/**
* a hint to return the size of the store on disk
* @return disk space used in bytes of 0 if not implemented
*/
long size