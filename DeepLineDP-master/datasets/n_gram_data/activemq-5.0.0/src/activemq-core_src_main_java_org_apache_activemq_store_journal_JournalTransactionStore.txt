/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store journal
import java io ioexception
import java util arraylist
import java util iterator
import java util linkedhashmap
import java util map
import javax transaction xa xaexception
import org apache activeio journal recordlocation
import org apache activemq command journaltopicack
import org apache activemq command journaltransaction
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command transactionid
import org apache activemq command xatransactionid
import org apache activemq store transactionrecoverylistener
import org apache activemq store transactionstore
/**
*/
public class journaltransactionstore implements transactionstore
private final journalpersistenceadapter peristenceadapter
private map<object  tx> inflighttransactions   new linkedhashmap<object  tx>
private map<transactionid  tx> preparedtransactions   new linkedhashmap<transactionid  tx>
private boolean doingrecover
public static class txoperation
static final byte add_operation_type   0
static final byte remove_operation_type   1
static final byte ack_operation_type   3
public byte operationtype
public journalmessagestore store
public object data
public txoperation byte operationtype  journalmessagestore store  object data
this operationtype   operationtype
this store   store
this data   data
/**
* operations
*
* @version $revision: 1.6 $
*/
public static class tx
private final recordlocation location
private arraylist<txoperation> operations   new arraylist<txoperation>
public tx recordlocation location
this location   location
public void add journalmessagestore store  message msg
operations add new txoperation txoperation add_operation_type  store  msg
public void add journalmessagestore store  messageack ack
operations add new txoperation txoperation remove_operation_type  store  ack
public void add journaltopicmessagestore store  journaltopicack ack
operations add new txoperation txoperation ack_operation_type  store  ack
public message getmessages
arraylist<object> list   new arraylist<object>
for  iterator<txoperation> iter   operations iterator    iter hasnext
txoperation op   iter next
if  op operationtype    txoperation add_operation_type
list add op data
message rc   new message
list toarray rc
return rc
public messageack getacks
arraylist<object> list   new arraylist<object>
for  iterator<txoperation> iter   operations iterator    iter hasnext
txoperation op   iter next
if  op operationtype    txoperation remove_operation_type
list add op data
messageack rc   new messageack
list toarray rc
return rc
public arraylist<txoperation> getoperations
return operations
public journaltransactionstore journalpersistenceadapter adapter
this peristenceadapter   adapter
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#prepare(transactionid)
*/
public void prepare transactionid txid  throws ioexception
tx tx   null
synchronized  inflighttransactions
tx   inflighttransactions remove txid
if  tx    null
return
peristenceadapter writecommand new journaltransaction journaltransaction xa_prepare  txid  false
true
synchronized  preparedtransactions
preparedtransactions put txid  tx
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#prepare(transactionid)
*/
public void replayprepare transactionid txid  throws ioexception
tx tx   null
synchronized  inflighttransactions
tx   inflighttransactions remove txid
if  tx    null
return
synchronized  preparedtransactions
preparedtransactions put txid  tx
public tx gettx object txid  recordlocation location
tx tx   null
synchronized  inflighttransactions
tx   inflighttransactions get txid
if  tx    null
tx   new tx location
inflighttransactions put txid  tx
return tx
/**
* @throws xaexception
* @see org.apache.activemq.store.transactionstore#commit(org.apache.activemq.service.transaction)
*/
public void commit transactionid txid  boolean wasprepared  throws ioexception
tx tx
if  wasprepared
synchronized  preparedtransactions
tx   preparedtransactions remove txid
else
synchronized  inflighttransactions
tx   inflighttransactions remove txid
if  tx    null
return
if  txid isxatransaction
peristenceadapter writecommand new journaltransaction journaltransaction xa_commit  txid
wasprepared   true
else
peristenceadapter writecommand new journaltransaction journaltransaction local_commit  txid
wasprepared   true
/**
* @throws xaexception
* @see org.apache.activemq.store.transactionstore#commit(org.apache.activemq.service.transaction)
*/
public tx replaycommit transactionid txid  boolean wasprepared  throws ioexception
if  wasprepared
synchronized  preparedtransactions
return preparedtransactions remove txid
else
synchronized  inflighttransactions
return inflighttransactions remove txid
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#rollback(transactionid)
*/
public void rollback transactionid txid  throws ioexception
tx tx   null
synchronized  inflighttransactions
tx   inflighttransactions remove txid
if  tx    null
synchronized  preparedtransactions
tx   preparedtransactions remove txid
if  tx    null
if  txid isxatransaction
peristenceadapter writecommand new journaltransaction journaltransaction xa_rollback  txid
false   true
else
peristenceadapter writecommand new journaltransaction journaltransaction local_rollback
txid  false   true
/**
* @throws ioexception
* @see org.apache.activemq.store.transactionstore#rollback(transactionid)
*/
public void replayrollback transactionid txid  throws ioexception
boolean inflight   false
synchronized  inflighttransactions
inflight   inflighttransactions remove txid     null
if  inflight
synchronized  preparedtransactions
preparedtransactions remove txid
public void start   throws exception
public void stop   throws exception
public synchronized void recover transactionrecoverylistener listener  throws ioexception
// all the in-flight transactions get rolled back..
synchronized  inflighttransactions
inflighttransactions clear
this doingrecover   true
try
map<transactionid  tx> txs   null
synchronized  preparedtransactions
txs   new linkedhashmap<transactionid  tx> preparedtransactions
for  iterator<transactionid> iter   txs keyset   iterator    iter hasnext
object txid   iter next
tx tx   txs get txid
listener recover  xatransactionid txid  tx getmessages    tx getacks
finally
this doingrecover   false
/**
* @param message
* @throws ioexception
*/
void addmessage journalmessagestore store  message message  recordlocation location  throws ioexception
tx tx   gettx message gettransactionid    location
tx add store  message
/**
* @param ack
* @throws ioexception
*/
public void removemessage journalmessagestore store  messageack ack  recordlocation location
throws ioexception
tx tx   gettx ack gettransactionid    location
tx add store  ack
public void acknowledge journaltopicmessagestore store  journaltopicack ack  recordlocation location
tx tx   gettx ack gettransactionid    location
tx add store  ack
public recordlocation checkpoint   throws ioexception
// nothing really to checkpoint.. since, we don't
// checkpoint tx operations in to long term store until they are
// committed.
// but we keep track of the first location of an operation
// that was associated with an active tx. the journal can not
// roll over active tx records.
recordlocation rc   null
synchronized  inflighttransactions
for  iterator<tx> iter   inflighttransactions values   iterator    iter hasnext
tx tx   iter next
recordlocation location   tx location
if  rc    null    rc compareto location  < 0
rc   location
synchronized  preparedtransactions
for  iterator<tx> iter   preparedtransactions values   iterator    iter hasnext
tx tx   iter next
recordlocation location   tx location
if  rc    null    rc compareto location  < 0
rc   location
return rc
public boolean isdoingrecover
return doingrecover