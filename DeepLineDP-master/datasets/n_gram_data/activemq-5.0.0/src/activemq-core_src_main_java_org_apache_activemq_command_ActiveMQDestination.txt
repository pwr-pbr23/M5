/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq command
import java io externalizable
import java io ioexception
import java io objectinput
import java io objectoutput
import java net urisyntaxexception
import java util arraylist
import java util list
import java util map
import java util properties
import java util stringtokenizer
import javax jms destination
import javax jms jmsexception
import javax jms queue
import javax jms temporaryqueue
import javax jms temporarytopic
import javax jms topic
import org apache activemq jndi jndibasestorable
import org apache activemq util introspectionsupport
import org apache activemq util urisupport
/**
* @openwire:marshaller
* @version $revision: 1.10 $
*/
public abstract class activemqdestination extends jndibasestorable implements datastructure  destination  externalizable  comparable
public static final string path_seperator
public static final char composite_seperator
public static final byte queue_type   0x01
public static final byte topic_type   0x02
public static final byte temp_mask   0x04
public static final byte temp_topic_type   topic_type   temp_mask
public static final byte temp_queue_type   queue_type   temp_mask
public static final string queue_qualified_prefix
public static final string topic_qualified_prefix
public static final string temp_queue_qualifed_prefix
public static final string temp_topic_qualifed_prefix
public static final string temp_destination_name_prefix
private static final long serialversionuid    3885260014960795889l
protected string physicalname
protected transient activemqdestination compositedestinations
protected transient string destinationpaths
protected transient boolean ispattern
protected transient int hashvalue
protected map<string  string> options
public activemqdestination
protected activemqdestination string name
setphysicalname name
public activemqdestination activemqdestination composites
setcompositedestinations composites
// static helper methods for working with destinations
// -------------------------------------------------------------------------
public static activemqdestination createdestination string name  byte defaulttype
if  name startswith queue_qualified_prefix
return new activemqqueue name substring queue_qualified_prefix length
else if  name startswith topic_qualified_prefix
return new activemqtopic name substring topic_qualified_prefix length
else if  name startswith temp_queue_qualifed_prefix
return new activemqtempqueue name substring temp_queue_qualifed_prefix length
else if  name startswith temp_topic_qualifed_prefix
return new activemqtemptopic name substring temp_topic_qualifed_prefix length
switch  defaulttype
case queue_type
return new activemqqueue name
case topic_type
return new activemqtopic name
case temp_queue_type
return new activemqtempqueue name
case temp_topic_type
return new activemqtemptopic name
default
throw new illegalargumentexception     defaulttype
public static activemqdestination transform destination dest  throws jmsexception
if  dest    null
return null
if  dest instanceof activemqdestination
return  activemqdestination dest
if  dest instanceof temporaryqueue
return new activemqtempqueue   temporaryqueue dest  getqueuename
if  dest instanceof temporarytopic
return new activemqtemptopic   temporarytopic dest  gettopicname
if  dest instanceof queue
return new activemqqueue   queue dest  getqueuename
if  dest instanceof topic
return new activemqtopic   topic dest  gettopicname
throw new jmsexception     dest
public static int compare activemqdestination destination  activemqdestination destination2
if  destination    destination2
return 0
if  destination    null
return  1
else if  destination2    null
return 1
else
if  destination isqueue      destination2 isqueue
return destination getphysicalname   compareto destination2 getphysicalname
else
return destination isqueue   ?  1   1
public int compareto object that
if  that instanceof activemqdestination
return compare this   activemqdestination that
if  that    null
return 1
else
return getclass   getname   compareto that getclass   getname
public boolean iscomposite
return compositedestinations    null
public activemqdestination getcompositedestinations
return compositedestinations
public void setcompositedestinations activemqdestination destinations
this compositedestinations   destinations
this destinationpaths   null
this hashvalue   0
this ispattern   false
stringbuffer sb   new stringbuffer
for  int i   0  i < destinations length  i
if  i    0
sb append composite_seperator
if  getdestinationtype      destinations getdestinationtype
sb append destinations getphysicalname
else
sb append destinations getqualifiedname
physicalname   sb tostring
public string getqualifiedname
if  iscomposite
return physicalname
return getqualifiedprefix     physicalname
protected abstract string getqualifiedprefix
/**
* @openwire:property version=1
*/
public string getphysicalname
return physicalname
public void setphysicalname string physicalname
final int len   physicalname length
// options offset
int p    1
boolean composite   false
for  int i   0  i < len  i
char c   physicalname charat i
if  c
p   i
break
if  c    composite_seperator
// won't be wild card
ispattern   false
composite   true
else if   composite     c         c
ispattern   true
// strip off any options
if  p >  0
string optstring   physicalname substring p   1
physicalname   physicalname substring 0  p
try
options   urisupport parsequery optstring
catch  urisyntaxexception e
throw new illegalargumentexception     physicalname       e
this physicalname   physicalname
this destinationpaths   null
this hashvalue   0
if  composite
// check to see if it is a composite.
list<string> l   new arraylist<string>
stringtokenizer iter   new stringtokenizer physicalname      composite_seperator
while  iter hasmoretokens
string name   iter nexttoken   trim
if  name length      0
continue
l add name
if  l size   > 1
compositedestinations   new activemqdestination
int counter   0
for  string dest   l
compositedestinations   createdestination dest
public activemqdestination createdestination string name
return createdestination name  getdestinationtype
public string getdestinationpaths
if  destinationpaths    null
return destinationpaths
list<string> l   new arraylist<string>
stringtokenizer iter   new stringtokenizer physicalname  path_seperator
while  iter hasmoretokens
string name   iter nexttoken   trim
if  name length      0
continue
l add name
destinationpaths   new string
l toarray destinationpaths
return destinationpaths
public abstract byte getdestinationtype
public boolean isqueue
return false
public boolean istopic
return false
public boolean istemporary
return false
public boolean equals object o
if  this    o
return true
if  o    null    getclass      o getclass
return false
activemqdestination d    activemqdestination o
return physicalname equals d physicalname
public int hashcode
if  hashvalue    0
hashvalue   physicalname hashcode
return hashvalue
public string tostring
return getqualifiedname
public void writeexternal objectoutput out  throws ioexception
out writeutf this getphysicalname
out writeobject options
@suppresswarnings
public void readexternal objectinput in  throws ioexception  classnotfoundexception
this setphysicalname in readutf
this options    map<string  string> in readobject
public string getdestinationtypeasstring
switch  getdestinationtype
case queue_type
return
case topic_type
return
case temp_queue_type
return
case temp_topic_type
return
default
throw new illegalargumentexception     getdestinationtype
public map<string  string> getoptions
return options
public boolean ismarshallaware
return false
public void buildfromproperties properties properties
if  properties    null
properties   new properties
introspectionsupport setproperties this  properties
public void populateproperties properties props
props setproperty    getphysicalname
public boolean ispattern
return ispattern