/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha
import java util collection
import java util map
import java util set
/**
* represents a container of persistent objects in the store acts as a map, but
* values can be retrieved in insertion order
*
* @version $revision: 1.2 $
*/
public interface mapcontainer<k  v> extends map<k  v>
/**
* the container is created or retrieved in an unloaded state. load
* populates the container will all the indexes used etc and should be
* called before any operations on the container
*/
void load
/**
* unload indexes from the container
*
*/
void unload
/**
* @return true if the indexes are loaded
*/
boolean isloaded
/**
* for homogenous containers can set a custom marshaller for loading keys
* the default uses object serialization
*
* @param keymarshaller
*/
void setkeymarshaller marshaller<k> keymarshaller
/**
* for homogenous containers can set a custom marshaller for loading values
* the default uses object serialization
*
* @param valuemarshaller
*
*/
void setvaluemarshaller marshaller<v> valuemarshaller
/**
* @return the id the mapcontainer was create with
*/
object getid
/**
* @return the number of values in the container
*/
int size
/**
* @return true if there are no values stored in the container
*/
boolean isempty
/**
* @param key
* @return true if the container contains the key
*/
boolean containskey k key
/**
* get the value associated with the key
*
* @param key
* @return the value associated with the key from the store
*/
v get k key
/**
* @param o
* @return true if the mapcontainer contains the value o
*/
boolean containsvalue k o
/**
* add add entries in the supplied map
*
* @param map
*/
void putall map<k  v> map
/**
* @return a set of all the keys
*/
set<k> keyset
/**
* @return a collection of all the values - the values will be lazily pulled
*         out of the store if iterated etc.
*/
collection<v> values
/**
* @return a set of all the map.entry instances - the values will be lazily
*         pulled out of the store if iterated etc.
*/
set<map entry<k  v>> entryset
/**
* add an entry
*
* @param key
* @param value
* @return the old value for the key
*/
v put k key  v value
/**
* remove an entry associated with the key
*
* @param key
* @return the old value assocaited with the key or null
*/
v remove k key
/**
* empty the container
*/
void clear
/**
* add an entry to the store map
*
* @param key
* @param value
* @return the storeentry associated with the entry
*/
storeentry place k key  v value
/**
* remove an entry from ther map
*
* @param entry
*/
void remove storeentry entry
/**
* get the key object from it's location
*
* @param keylocation
* @return the key for the entry
*/
k getkey storeentry keylocation
/**
* get the value from it's location
*
* @param valuelocation
* @return the object
*/
v getvalue storeentry valuelocation
/**
* get the storeentry for the first value in the map
*
* @return the first storeentry or null if the map is empty
*/
storeentry getfirst
/**
* get the storeentry for the last value item of the map
*
* @return the last storeentry or null if the list is empty
*/
storeentry getlast
/**
* get the next storeentry value from the map
*
* @param entry
* @return the next storeentry or null
*/
storeentry getnext storeentry entry
/**
* get the previous storeentry from the map
*
* @param entry
* @return the previous store entry or null
*/
storeentry getprevious storeentry entry
/**
* it's possible that a storeentry could be come stale this will return an
* upto date entry for the storeentry position
*
* @param entry old entry
* @return a refreshed storeentry
*/
storeentry refresh storeentry entry
/**
* get the storeentry associated with the key
*
* @param key
* @return the storeentry
*/
storeentry getentry k key
/**
* set the index bin size
* @param size
*/
void setindexbinsize int size
/**
* @return index bin size
*/
int getindexbinsize
/**
* add the index key size
* @param size
*/
void setindexkeysize int size
/**
* @return the index key size
*/
int getindexkeysize
/**
* set the index page size
* @param size
*/
void setindexpagesize int size
/**
* @return the index page size
*/
int getindexpagesize