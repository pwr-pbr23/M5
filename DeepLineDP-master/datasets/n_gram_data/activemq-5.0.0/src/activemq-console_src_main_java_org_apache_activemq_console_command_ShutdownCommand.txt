/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java util collection
import java util hashset
import java util iterator
import java util list
import javax management mbeanserverconnection
import javax management objectinstance
import javax management objectname
import javax management remote jmxserviceurl
import org apache activemq console formatter globalwriter
import org apache activemq console util jmxmbeansutil
public class shutdowncommand extends abstractjmxcommand
protected string helpfile   new string
private boolean isstopallbrokers
/**
* shuts down the specified broker or brokers
*
* @param brokernames - names of brokers to shutdown
* @throws exception
*/
protected void runtask list brokernames  throws exception
try
collection mbeans
// stop all brokers
if  isstopallbrokers
mbeans   jmxmbeansutil getallbrokers usejmxserviceurl
brokernames clear
else if  brokernames isempty
// stop the default broker
mbeans   jmxmbeansutil getallbrokers usejmxserviceurl
// if there is no broker to stop
if  mbeans isempty
globalwriter printinfo
return
// there should only be one broker to stop
else if  mbeans size   > 1
globalwriter printinfo
return
// get the first broker only
else
object firstbroker   mbeans iterator   next
mbeans clear
mbeans add firstbroker
else
// stop each specified broker
string brokername
mbeans   new hashset
while   brokernames isempty
brokername    string brokernames remove 0
collection matchedbrokers   jmxmbeansutil getbrokersbyname usejmxserviceurl    brokername
if  matchedbrokers isempty
globalwriter printinfo brokername
else
mbeans addall matchedbrokers
// stop all brokers in set
stopbrokers usejmxserviceurl    mbeans
catch  exception e
globalwriter printexception new runtimeexception     e
throw new exception e
/**
* stops the list of brokers.
*
* @param jmxserviceurl - jmx service url to connect to
* @param brokerbeans - broker mbeans to stop
* @throws exception
*/
protected void stopbrokers jmxserviceurl jmxserviceurl  collection brokerbeans  throws exception
mbeanserverconnection server   createjmxconnector   getmbeanserverconnection
objectname brokerobjname
for  iterator i   brokerbeans iterator    i hasnext
brokerobjname     objectinstance i next    getobjectname
string brokername   brokerobjname getkeyproperty
globalwriter print     brokername
try
server invoke brokerobjname     new object
integer valueof 0
new string
globalwriter print     brokername
catch  exception e
// todo: check exceptions throwned
// system.out.println("failed to stop broker: [ " + brokername +
// " ]. reason: " + e.getmessage());
closejmxconnector
/**
* handle the --all option.
*
* @param token - option token to handle
* @param tokens - succeeding command arguments
* @throws exception
*/
protected void handleoption string token  list<string> tokens  throws exception
// try to handle the options first
if  token equals
isstopallbrokers   true
else
// let the super class handle the option
super handleoption token  tokens
/**
* print the help messages for the browse command
*/
protected void printhelp
globalwriter printhelp helpfile