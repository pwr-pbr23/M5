/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker jmx
import javax jms invalidselectorexception
import org apache activemq broker region subscription
import org apache activemq command activemqdestination
import org apache activemq command consumerinfo
/**
* @version $revision: 1.5 $
*/
public class subscriptionview implements subscriptionviewmbean
protected final subscription subscription
protected final string clientid
/**
* constructor
*
* @param subs
*/
public subscriptionview string clientid  subscription subs
this clientid   clientid
this subscription   subs
/**
* @return the clientid
*/
public string getclientid
return clientid
/**
* @return the id of the connection the subscription is on
*/
public string getconnectionid
consumerinfo info   getconsumerinfo
if  info    null
return info getconsumerid   getconnectionid
return
/**
* @return the id of the session the subscription is on
*/
public long getsessionid
consumerinfo info   getconsumerinfo
if  info    null
return info getconsumerid   getsessionid
return 0
/**
* @return the id of the subscription
*/
public long getsubcriptionid
consumerinfo info   getconsumerinfo
if  info    null
return info getconsumerid   getvalue
return 0
/**
* @return the destination name
*/
public string getdestinationname
consumerinfo info   getconsumerinfo
if  info    null
activemqdestination dest   info getdestination
return dest getphysicalname
return
public string getselector
if  subscription    null
return subscription getselector
return null
public void setselector string selector  throws invalidselectorexception  unsupportedoperationexception
if  subscription    null
subscription setselector selector
else
throw new unsupportedoperationexception
/**
* @return true if the destination is a queue
*/
public boolean isdestinationqueue
consumerinfo info   getconsumerinfo
if  info    null
activemqdestination dest   info getdestination
return dest isqueue
return false
/**
* @return true of the destination is a topic
*/
public boolean isdestinationtopic
consumerinfo info   getconsumerinfo
if  info    null
activemqdestination dest   info getdestination
return dest istopic
return false
/**
* @return true if the destination is temporary
*/
public boolean isdestinationtemporary
consumerinfo info   getconsumerinfo
if  info    null
activemqdestination dest   info getdestination
return dest istemporary
return false
/**
* @return true if the subscriber is active
*/
public boolean isactive
return true
/**
* the subscription should release as may references as it can to help the
* garbage collector reclaim memory.
*/
public void gc
if  subscription    null
subscription gc
/**
* @return whether or not the subscriber is retroactive or not
*/
public boolean isretroactive
consumerinfo info   getconsumerinfo
return info    null ? info isretroactive     false
/**
* @return whether or not the subscriber is an exclusive consumer
*/
public boolean isexclusive
consumerinfo info   getconsumerinfo
return info    null ? info isexclusive     false
/**
* @return whether or not the subscriber is durable (persistent)
*/
public boolean isdurable
consumerinfo info   getconsumerinfo
return info    null ? info isdurable     false
/**
* @return whether or not the subscriber ignores local messages
*/
public boolean isnolocal
consumerinfo info   getconsumerinfo
return info    null ? info isnolocal     false
/**
* @return the maximum number of pending messages allowed in addition to the
*         prefetch size. if enabled to a non-zero value then this will
*         perform eviction of messages for slow consumers on non-durable
*         topics.
*/
public int getmaximumpendingmessagelimit
consumerinfo info   getconsumerinfo
return info    null ? info getmaximumpendingmessagelimit     0
/**
* @return the consumer priority
*/
public byte getpriority
consumerinfo info   getconsumerinfo
return info    null ? info getpriority     0
/**
* @return the name of the consumer which is only used for durable
*         consumers.
*/
public string getsubcriptionname
consumerinfo info   getconsumerinfo
return info    null ? info getsubscriptionname     null
/**
* @return number of messages pending delivery
*/
public int getpendingqueuesize
return subscription    null ? subscription getpendingqueuesize     0
/**
* @return number of messages dispatched
*/
public int getdispatchedqueuesize
return subscription    null ? subscription getdispatchedqueuesize     0
/**
* @return number of messages that matched the subscription
*/
public long getdispachedcounter
return subscription    null ? subscription getdispatchedcounter     0
/**
* @return number of messages that matched the subscription
*/
public long getenqueuecounter
return subscription    null ? subscription getenqueuecounter     0
/**
* @return number of messages queued by the client
*/
public long getdequeuecounter
return subscription    null ? subscription getdequeuecounter     0
protected consumerinfo getconsumerinfo
return subscription    null ? subscription getconsumerinfo     null
/**
* @return pretty print
*/
public string tostring
return     getclientid         getconnectionid
/**
*/
public int getprefetchsize
return subscription    null ? subscription getprefetchsize     0