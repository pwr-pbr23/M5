/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java io dataoutput
import java io ioexception
import java io outputstream
import java io utfdataformatexception
/**
* optimized bytearrayoutputstream
*
* @version $revision: 1.1.1.1 $
*/
public final class databytearrayoutputstream extends outputstream implements dataoutput
private static final int default_size   2048
private byte buf
private int pos
/**
* creates a new byte array output stream, with a buffer capacity of the
* specified size, in bytes.
*
* @param size the initial size.
* @exception illegalargumentexception if size is negative.
*/
public databytearrayoutputstream int size
if  size < 0
throw new illegalargumentexception     size
buf   new byte
/**
* creates a new byte array output stream.
*/
public databytearrayoutputstream
this default_size
/**
* start using a fresh byte array
*
* @param size
*/
public void restart int size
buf   new byte
pos   0
/**
* start using a fresh byte array
*/
public void restart
restart default_size
/**
* get a bytesequence from the stream
*
* @return the byte sequence
*/
public bytesequence tobytesequence
return new bytesequence buf  0  pos
/**
* writes the specified byte to this byte array output stream.
*
* @param b the byte to be written.
*/
public void write int b
int newcount   pos   1
ensureenoughbuffer newcount
buf    byte b
pos   newcount
/**
* writes <code>len</code> bytes from the specified byte array starting at
* offset <code>off</code> to this byte array output stream.
*
* @param b the data.
* @param off the start offset in the data.
* @param len the number of bytes to write.
*/
public void write byte b  int off  int len
if  len    0
return
int newcount   pos   len
ensureenoughbuffer newcount
system arraycopy b  off  buf  pos  len
pos   newcount
/**
* @return the underlying byte[] buffer
*/
public byte getdata
return buf
/**
* reset the output stream
*/
public void reset
pos   0
/**
* set the current position for writing
*
* @param offset
*/
public void position int offset
ensureenoughbuffer offset
pos   offset
public int size
return pos
public void writeboolean boolean v
ensureenoughbuffer pos   1
buf    byte  v ? 1   0
public void writebyte int v
ensureenoughbuffer pos   1
buf    byte  v >>> 0
public void writeshort int v
ensureenoughbuffer pos   2
buf    byte  v >>> 8
buf    byte  v >>> 0
public void writechar int v
ensureenoughbuffer pos   2
buf    byte  v >>> 8
buf    byte  v >>> 0
public void writeint int v
ensureenoughbuffer pos   4
buf    byte  v >>> 24
buf    byte  v >>> 16
buf    byte  v >>> 8
buf    byte  v >>> 0
public void writelong long v
ensureenoughbuffer pos   8
buf    byte  v >>> 56
buf    byte  v >>> 48
buf    byte  v >>> 40
buf    byte  v >>> 32
buf    byte  v >>> 24
buf    byte  v >>> 16
buf    byte  v >>> 8
buf    byte  v >>> 0
public void writefloat float v  throws ioexception
writeint float floattointbits v
public void writedouble double v  throws ioexception
writelong double doubletolongbits v
public void writebytes string s
int length   s length
for  int i   0  i < length  i
write  byte s charat i
public void writechars string s
int length   s length
for  int i   0  i < length  i
int c   s charat i
write  c >>> 8    0xff
write  c >>> 0    0xff
public void writeutf string str  throws ioexception
int strlen   str length
int encodedsize   0
int c
for  int i   0  i < strlen  i
c   str charat i
if   c >  0x0001      c <  0x007f
encodedsize
else if  c > 0x07ff
encodedsize    3
else
encodedsize    2
if  encodedsize > 65535
throw new utfdataformatexception     encodedsize
ensureenoughbuffer pos   encodedsize   2
writeshort encodedsize
int i   0
for  i   0  i < strlen  i
c   str charat i
if     c >  0x0001      c <  0x007f
break
buf    byte c
for    i < strlen  i
c   str charat i
if   c >  0x0001      c <  0x007f
buf    byte c
else if  c > 0x07ff
buf    byte  0xe0     c >> 12    0x0f
buf    byte  0x80     c >> 6    0x3f
buf    byte  0x80     c >> 0    0x3f
else
buf    byte  0xc0     c >> 6    0x1f
buf    byte  0x80     c >> 0    0x3f
private void ensureenoughbuffer int newcount
if  newcount > buf length
byte newbuf   new byte
system arraycopy buf  0  newbuf  0  pos
buf   newbuf