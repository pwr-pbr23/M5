/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql sqlexception
import java util concurrent atomic atomiclong
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messageid
import org apache activemq store messagerecoverylistener
import org apache activemq store messagestore
import org apache activemq usage memoryusage
import org apache activemq usage systemusage
import org apache activemq util bytesequence
import org apache activemq util bytesequencedata
import org apache activemq util ioexceptionsupport
import org apache activemq wireformat wireformat
/**
* @version $revision: 1.10 $
*/
public class jdbcmessagestore implements messagestore
protected final wireformat wireformat
protected final activemqdestination destination
protected final jdbcadapter adapter
protected final jdbcpersistenceadapter persistenceadapter
protected atomiclong lastmessageid   new atomiclong  1
public jdbcmessagestore jdbcpersistenceadapter persistenceadapter  jdbcadapter adapter  wireformat wireformat  activemqdestination destination
this persistenceadapter   persistenceadapter
this adapter   adapter
this wireformat   wireformat
this destination   destination
public void addmessage connectioncontext context  message message  throws ioexception
// serialize the message..
byte data
try
bytesequence packet   wireformat marshal message
data   bytesequencedata tobytearray packet
catch  ioexception e
throw ioexceptionsupport create     message getmessageid         e  e
// get a connection and insert the message into the db.
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doaddmessage c  message getmessageid    destination  data  message getexpiration
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     message getmessageid         e  e
finally
c close
public void addmessagereference connectioncontext context  messageid messageid  long expirationtime  string messageref  throws ioexception
// get a connection and insert the message into the db.
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doaddmessagereference c  messageid  destination  expirationtime  messageref
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public message getmessage messageid messageid  throws ioexception
long id   messageid getbrokersequenceid
// get a connection and pull the message out of the db
transactioncontext c   persistenceadapter gettransactioncontext
try
byte data   adapter dogetmessage c  id
if  data    null
return null
message answer    message wireformat unmarshal new bytesequence data
return answer
catch  ioexception e
throw ioexceptionsupport create     messageid       e  e
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public string getmessagereference messageid messageid  throws ioexception
long id   messageid getbrokersequenceid
// get a connection and pull the message out of the db
transactioncontext c   persistenceadapter gettransactioncontext
try
return adapter dogetmessagereference c  id
catch  ioexception e
throw ioexceptionsupport create     messageid       e  e
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     messageid       e  e
finally
c close
public void removemessage connectioncontext context  messageack ack  throws ioexception
long seq   ack getlastmessageid   getbrokersequenceid
// get a connection and remove the message from the db
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doremovemessage c  seq
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     ack getlastmessageid         e  e
finally
c close
public void recover final messagerecoverylistener listener  throws exception
// get all the message ids out of the database.
transactioncontext c   persistenceadapter gettransactioncontext
try
c   persistenceadapter gettransactioncontext
adapter dorecover c  destination  new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
return listener recovermessage msg
public boolean recovermessagereference string reference  throws exception
return listener recovermessagereference new messageid reference
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
public void start
public void stop
/**
* @see org.apache.activemq.store.messagestore#removeallmessages(connectioncontext)
*/
public void removeallmessages connectioncontext context  throws ioexception
// get a connection and remove the message from the db
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter doremoveallmessages c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
public activemqdestination getdestination
return destination
public void setmemoryusage memoryusage memoryusage
//can ignore as messages aren't buffered
public int getmessagecount   throws ioexception
int result   0
transactioncontext c   persistenceadapter gettransactioncontext
try
result   adapter dogetmessagecount c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     destination       e  e
finally
c close
return result
/**
* @param maxreturned
* @param listener
* @throws exception
* @see org.apache.activemq.store.messagestore#recovernextmessages(int,
*      org.apache.activemq.store.messagerecoverylistener)
*/
public void recovernextmessages int maxreturned  final messagerecoverylistener listener  throws exception
transactioncontext c   persistenceadapter gettransactioncontext
try
adapter dorecovernextmessages c  destination  lastmessageid get    maxreturned  new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
if  listener hasspace
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
listener recovermessage msg
lastmessageid set sequenceid
return true
return false
public boolean recovermessagereference string reference  throws exception
if  listener hasspace
listener recovermessagereference new messageid reference
return true
return false
catch  sqlexception e
jdbcpersistenceadapter log    e
finally
c close
/**
* @see org.apache.activemq.store.messagestore#resetbatching()
*/
public void resetbatching
lastmessageid set  1