/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq memory list
import java io ioexception
import java util arraylist
import java util iterator
import java util linkedlist
import java util list
import org apache activemq broker region messagereference
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq filter destinationfilter
import org apache commons logging log
import org apache commons logging logfactory
/**
* a simple fixed size {@link messagelist} where there is a single, fixed size
* list that all messages are added to for simplicity. though this will lead to
* possibly slow recovery times as many more messages than is necessary will
* have to be iterated through for each subscription.
*
* @version $revision: 1.1 $
*/
public class simplemessagelist implements messagelist
private static final log log   logfactory getlog simplemessagelist class
private linkedlist<messagereference> list   new linkedlist<messagereference>
private int maximumsize   100   64   1024
private int size
private object lock   new object
public simplemessagelist
public simplemessagelist int maximumsize
this maximumsize   maximumsize
public void add messagereference node
int delta   node getmessagehardref   getsize
synchronized  lock
list add node
size    delta
while  size > maximumsize
messagereference evicted   list removefirst
size    evicted getmessagehardref   getsize
public list<messagereference> getmessages activemqdestination destination
return getlist
public message browse activemqdestination destination
list<message> result   new arraylist<message>
destinationfilter filter   destinationfilter parsefilter destination
synchronized  lock
for  iterator<messagereference> i   list iterator    i hasnext
messagereference ref   i next
message msg
try
msg   ref getmessage
if  filter matches msg getdestination
result add msg
catch  ioexception e
log error     ref  e
return result toarray new message
/**
* returns a copy of the list
*/
public list<messagereference> getlist
synchronized  lock
return new arraylist<messagereference> list
public int getsize
synchronized  lock
return size
public void clear
synchronized  lock
list clear
size   0