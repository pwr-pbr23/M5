/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq web
import java io ioexception
import java io printwriter
import java io stringwriter
import java util hashmap
import java util list
import java util map
import javax jms destination
import javax jms jmsexception
import javax jms message
import javax jms messageconsumer
import javax jms objectmessage
import javax jms textmessage
import javax servlet servletconfig
import javax servlet servletexception
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
import javax servlet http httpsession
import org apache activemq messageavailableconsumer
import org apache activemq messageavailablelistener
import org apache commons logging log
import org apache commons logging logfactory
import org mortbay util ajax continuation
import org mortbay util ajax continuationsupport
/**
* a servlet for sending and receiving messages to/from jms destinations using
* http post for sending and http get for receiving. <p/> you can specify the
* destination and whether it is a topic or queue via configuration details on
* the servlet or as request parameters. <p/> for reading messages you can
* specify a readtimeout parameter to determine how long the servlet should
* block for. the servlet can be configured with the following init parameters:
* <dl>
* <dt>defaultreadtimeout</dt>
* <dd>the default time in ms to wait for messages. may be overridden by a
* request using the 'timeout' parameter</dd>
* <dt>maximumreadtimeout</dt>
* <dd>the maximum value a request may specify for the 'timeout' parameter</dd>
* <dt>maximummessages</dt>
* <dd>maximum messages to send per response</dd>
* <dt></dt>
* <dd></dd>
* </dl>
*
* @version $revision: 1.1.1.1 $
*/
public class messagelistenerservlet extends messageservletsupport
private static final log log   logfactory getlog messagelistenerservlet class
private string readtimeoutparameter
private long defaultreadtimeout    1
private long maximumreadtimeout   25000
private int maximummessages   100
public void init   throws servletexception
servletconfig servletconfig   getservletconfig
string name   servletconfig getinitparameter
if  name    null
defaultreadtimeout   aslong name
name   servletconfig getinitparameter
if  name    null
maximumreadtimeout   aslong name
name   servletconfig getinitparameter
if  name    null
maximummessages    int aslong name
/**
* sends a message to a destination or manage subscriptions. if the the
* content type of the post is
* <code>application/x-www-form-urlencoded</code>, then the form
* parameters "destination", "message" and "type" are used to pass a message
* or a subscription. if multiple messages or subscriptions are passed in a
* single post, then additional parameters are shortened to "dn", "mn" and
* "tn" where n is an index starting from 1. the type is either "send",
* "listen" or "unlisten". for send types, the message is the text of the
* textmessage, otherwise it is the id to be used for the subscription. if
* the content type is not <code>application/x-www-form-urlencoded</code>,
* then the body of the post is sent as the message to a destination that is
* derived from a query parameter, the url or the default destination.
*
* @param request
* @param response
* @throws servletexception
* @throws ioexception
*/
protected void dopost httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
// lets turn the http post into a jms message
webclient client   webclient getwebclient request
string messageids
synchronized  client
if  log isdebugenabled
log debug     client       request getsession   getid         request getpathinfo         request getcontenttype
// dump(request.getparametermap());
int messages   0
// loop until no more messages
while  true
// get the message parameters. multiple messages are encoded
// with more compact parameter names.
string destinationname   request getparameter messages    0 ?          messages
if  destinationname    null
destinationname   request getheader
string message   request getparameter messages    0 ?          messages
string type   request getparameter messages    0 ?          messages
if  destinationname    null    message    null    type    null
break
try
destination destination   getdestination client  request  destinationname
if  log isdebugenabled
log debug messages       destinationname       message       type
log debug destination       destination getclass   getname
messages
if    equals type
listener listener   getlistener request
map<messageavailableconsumer  string> consumeridmap   getconsumeridmap request
map<messageavailableconsumer  string> consumerdestinationmap   getconsumerdestinationnamemap request
client closeconsumer destination      drop any existing
// consumer.
messageavailableconsumer consumer    messageavailableconsumer client getconsumer destination
consumer setavailablelistener listener
consumeridmap put consumer  message
consumerdestinationmap put consumer  destinationname
if  log isdebugenabled
log debug     consumer       destination       message
else if    equals type
map<messageavailableconsumer  string> consumeridmap   getconsumeridmap request
map consumerdestinationmap   getconsumerdestinationnamemap request
messageavailableconsumer consumer    messageavailableconsumer client getconsumer destination
consumer setavailablelistener null
consumeridmap remove consumer
consumerdestinationmap remove consumer
client closeconsumer destination
if  log isdebugenabled
log debug     consumer
else if    equals type
textmessage text   client getsession   createtextmessage message
appendparameterstomessage request  text
client send destination  text
messageids    text getjmsmessageid
if  log isdebugenabled
log debug     message       destination
else
log warn     type
catch  jmsexception e
log warn    e
if    equals request getparameter
try
// todo return message ids
domessages client  request  response
catch  jmsexception e
throw new servletexception     e  e
else
// handle simple post of a message
if  request getcontentlength      0     request getcontenttype      null     request getcontenttype   tolowercase   startswith
try
destination destination   getdestination client  request
string body   getpostedmessagebody request
textmessage message   client getsession   createtextmessage body
appendparameterstomessage request  message
client send destination  message
if  log isdebugenabled
log debug     destination       body
messageids    message getjmsmessageid
catch  jmsexception e
throw new servletexception e
response setcontenttype
response setheader
response getwriter   print messageids
/**
* supports a http delete to be equivlanent of consuming a singe message
* from a queue
*/
protected void doget httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
try
webclient client   webclient getwebclient request
if  log isdebugenabled
log debug     client       request getsession   getid         request getrequesturi         request getquerystring
domessages client  request  response
catch  jmsexception e
throw new servletexception     e  e
/**
* reads a message from a destination up to some specific timeout period
*
* @param client the webclient
* @param request
* @param response
* @throws servletexception
* @throws ioexception
*/
protected void domessages webclient client  httpservletrequest request  httpservletresponse response  throws jmsexception  ioexception
int messages   0
// this is a poll for any messages
long timeout   getreadtimeout request
if  log isdebugenabled
log debug     timeout
continuation continuation   continuationsupport getcontinuation request  client
listener listener   getlistener request
if  listener    null    continuation    null     continuation ispending
listener access
message message   null
synchronized  client
list consumers   client getconsumers
messageavailableconsumer consumer   null
// look for a message that is ready to go
for  int i   0  message    null    i < consumers size    i
consumer    messageavailableconsumer consumers get i
if  consumer getavailablelistener      null
continue
// look for any available messages
message   consumer receivenowait
if  log isdebugenabled
log debug     message       consumer
// get an existing continuation or create a new one if there are no
// messages
if  message    null
// register this continuation with our listener.
listener setcontinuation continuation
// get the continuation object (may wait and/or retry
// request here).
continuation suspend timeout
listener setcontinuation null
// prepare the responds
response setcontenttype
response setheader
stringwriter swriter   new stringwriter
printwriter writer   new printwriter swriter
map<messageavailableconsumer  string> consumeridmap   getconsumeridmap request
map<messageavailableconsumer  string> consumerdestinationnamemap   getconsumerdestinationnamemap request
response setstatus httpservletresponse sc_ok
writer println
// send any message we already have
if  message    null
string id   consumeridmap get consumer
string destinationname   consumerdestinationnamemap get consumer
writer print
writer print id
writer print
if  destinationname    null
writer print     destinationname
writer print
writemessageresponse writer  message
writer println
messages
// send the rest of the messages
for  int i   0  i < consumers size      messages < maximummessages  i
consumer    messageavailableconsumer consumers get i
if  consumer getavailablelistener      null
continue
// look for any available messages
while  messages < maximummessages
message   consumer receivenowait
if  message    null
break
messages
string id   consumeridmap get consumer
string destinationname   consumerdestinationnamemap get consumer
writer print
writer print id
writer print
if  destinationname    null
writer print     destinationname
writer print
writemessageresponse writer  message
writer println
// add poll message
// writer.println("<response type='object'
// id='amqpoll'><ok/></response>");
writer print
writer flush
string m   swriter tostring
// system.err.println(m);
response getwriter   println m
protected void writemessageresponse printwriter writer  message message  throws jmsexception  ioexception
if  message instanceof textmessage
textmessage textmsg    textmessage message
string txt   textmsg gettext
if  txt startswith
txt   txt substring txt indexof      2
writer print txt
else if  message instanceof objectmessage
objectmessage objectmsg    objectmessage message
object object   objectmsg getobject
writer print object tostring
protected listener getlistener httpservletrequest request
httpsession session   request getsession
listener listener    listener session getattribute
if  listener    null
listener   new listener webclient getwebclient request
session setattribute    listener
return listener
protected map<messageavailableconsumer  string> getconsumeridmap httpservletrequest request
httpsession session   request getsession true
map<messageavailableconsumer  string> map    map<messageavailableconsumer  string> session getattribute
if  map    null
map   new hashmap<messageavailableconsumer  string>
session setattribute    map
return map
protected map<messageavailableconsumer  string> getconsumerdestinationnamemap httpservletrequest request
httpsession session   request getsession true
map<messageavailableconsumer  string> map    map<messageavailableconsumer  string> session getattribute
if  map    null
map   new hashmap<messageavailableconsumer  string>
session setattribute    map
return map
protected boolean isricoajax httpservletrequest request
string rico   request getparameter
return rico    null    rico equals
/**
* @return the timeout value for read requests which is always >= 0 and <=
*         maximumreadtimeout to avoid dos attacks
*/
protected long getreadtimeout httpservletrequest request
long answer   defaultreadtimeout
string name   request getparameter readtimeoutparameter
if  name    null
answer   aslong name
if  answer < 0    answer > maximumreadtimeout
answer   maximumreadtimeout
return answer
/*
* listen for available messages and wakeup any continuations.
*/
private class listener implements messageavailablelistener
webclient client
long lastaccess
continuation continuation
listener webclient client
this client   client
public void access
lastaccess   system currenttimemillis
public synchronized void setcontinuation continuation continuation
this continuation   continuation
public synchronized void onmessageavailable messageconsumer consumer
if  log isdebugenabled
log debug     consumer       continuation
if  continuation    null
continuation resume
else if  system currenttimemillis     lastaccess > 2   maximumreadtimeout
new thread
public void run
client closeconsumers
start
continuation   null