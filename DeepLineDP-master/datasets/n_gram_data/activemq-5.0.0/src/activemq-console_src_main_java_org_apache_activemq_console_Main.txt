/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console
import java io file
import java io inputstream
import java io printstream
import java lang reflect invocationtargetexception
import java lang reflect method
import java net jarurlconnection
import java net malformedurlexception
import java net uri
import java net url
import java net urlclassloader
import java util arraylist
import java util arrays
import java util comparator
import java util hashset
import java util iterator
import java util linkedlist
import java util list
import java util set
import java util stringtokenizer
/**
* main class that can bootstrap an activemq broker console. handles command
* line argument parsing to set up and run broker tasks.
*
* @version $revision$
*/
public class main
public static final string task_default_class
private static boolean usedefext   true
private file activemqhome
private file activemqbase
private classloader classloader
private set<file> extensions   new hashset<file> 5
private set<file> activemqclasspath   new hashset<file> 5
public static void main string args
main app   new main
// convert arguments to collection for easier management
list<string> tokens   new linkedlist<string> arrays aslist args
// parse for extension directory option
app parseextensions tokens
// lets add the conf directory first, to find the log4j.properties just in case its not
// in the activemq.classpath system property or some jar incorrectly includes one
file confdir   new file app getactivemqbase
app addclasspath confdir
// add the following to the classpath:
//
// ${activemq.base}/conf
// ${activemq.base}/lib/* (only if activemq.base != activemq.home)
// ${activemq.home}/lib/*
// ${activemq.base}/lib/optional/* (only if activemq.base !=
// activemq.home)
// ${activemq.home}/lib/optional/*
// ${activemq.base}/lib/web/* (only if activemq.base != activemq.home)
// ${activemq.home}/lib/web/*
//
if (usedefext && app.canuseextdir()) {
boolean baseishome = app.getactivemqbase().equals(app.getactivemqhome());
file baselibdir = new file(app.getactivemqbase(), "lib");
file homelibdir = new file(app.getactivemqhome(), "lib");
if (!baseishome) {
app.addextensiondirectory(baselibdir);
}
app.addextensiondirectory(homelibdir);
if (!baseishome) {
app.addextensiondirectory(new file(baselibdir, "optional"));
app.addextensiondirectory(new file(baselibdir, "web"));
}
app.addextensiondirectory(new file(homelibdir, "optional"));
app.addextensiondirectory(new file(homelibdir, "web"));
}
// add any custom classpath specified from the system property
// activemq.classpath
app.addclasspathlist(system.getproperty("activemq.classpath"));
try {
app.runtaskclass(tokens);
} catch (classnotfoundexception e) {
system.out.println("could not load class: " + e.getmessage());
try {
classloader cl = app.getclassloader();
if (cl != null) {
system.out.println("class loader setup: ");
printclassloadertree(cl);
}
} catch (malformedurlexception e1) {
}
} catch (throwable e) {
system.out.println("failed to execute main task. reason: " + e);
}
}
/**
* print out what's in the classloader tree being used.
*
* @param cl
* @return depth
*/
private static int printclassloadertree classloader cl
int depth   0
if  cl getparent      null
depth   printclassloadertree cl getparent      1
}
stringbuffer indent   new stringbuffer
for  int i   0  i < depth  i
indent append
}
if  cl instanceof urlclassloader
urlclassloader ucl    urlclassloader cl
system out println indent   cl getclass   getname
url urls   ucl geturls
for  int i   0  i < urls length  i
system out println indent       urls
}
system out println indent
else
system out println indent   cl getclass   getname
}
return depth
}
public void parseextensions list<string> tokens
if  tokens isempty
return
}
int count   tokens size
int i   0
// parse for all --extdir and --nodefext options
while  i < count
string token   tokens get i
// if token is an extension dir option
if  token equals
// process token
count
tokens remove i
// if no extension directory is specified, or next token is
// another option
if  i >  count    tokens get i  startswith
system out println
system out println
continue
}
// process extension dir token
count
file extdir   new file tokens remove i
if   canuseextdir
system out println     task_default_class
system out println
continue
}
if   extdir isdirectory
system out println     extdir
system out println
continue
}
addextensiondirectory extdir
else if  token equals          if token is
// --nodefext option
count
tokens remove i
usedefext   false
else
i
}
}
}
public void runtaskclass list<string> tokens  throws throwable
system out println     getactivemqhome
system out println     getactivemqbase
classloader cl   getclassloader
thread currentthread   setcontextclassloader cl
// use reflection to run the task.
try {
string args   tokens toarray new string
class task   cl loadclass task_default_class
method runtask   task getmethod    new class
string class  inputstream class  printstream class
runtask invoke task newinstance    new object
args  system in  system out
catch  invocationtargetexception e
throw e getcause
}
}
public void addextensiondirectory file directory
extensions add directory
}
public void addclasspathlist string filelist
if  filelist    null    filelist length   > 0
stringtokenizer tokenizer   new stringtokenizer filelist
while  tokenizer hasmoretokens
addclasspath new file tokenizer nexttoken
}
}
}
public void addclasspath file classpath
activemqclasspath add classpath
}
/**
* the extension directory feature will not work if the broker factory is
* already in the classpath since we have to load him from a child
* classloader we build for it to work correctly.
*
* @return true, if extension dir can be used. false otherwise.
*/
public boolean canuseextdir
try {
main class getclassloader   loadclass task_default_class
return false
} catch (classnotfoundexception e) {
return true
}
}
public classloader getclassloader   throws malformedurlexception
if  classloader    null
// setup the classloader
classloader   main class getclassloader
if   extensions isempty       activemqclasspath isempty
arraylist<url> urls   new arraylist<url>
for  iterator<file> iter   activemqclasspath iterator    iter hasnext
file dir   iter next
// try{ system.out.println("adding to classpath: " +
// dir.getcanonicalpath()); }catch(exception e){}
urls add dir tourl
}
for  iterator<file> iter   extensions iterator    iter hasnext
file dir   iter next
if  dir isdirectory
file files   dir listfiles
if  files    null
// sort the jars so that classpath built is
// consistently
// in the same order. also allows us to use jar
// names to control
// classpath order.
arrays sort files  new comparator
public int compare object o1  object o2
file f1    file o1
file f2    file o2
return f1 getname   compareto f2 getname
}
for  int j   0  j < files length  j
if  files getname   endswith       files getname   endswith
// try{ system.out.println("adding to
// classpath: " +
// files[j].getcanonicalpath());
// }catch(exception e){}
urls add files tourl
}
}
}
}
}
url u   new url
urls toarray u
classloader   new urlclassloader u  classloader
}
thread currentthread   setcontextclassloader classloader
}
return classloader
}
public void setactivemqhome file activemqhome
this activemqhome   activemqhome
}
public file getactivemqhome
if  activemqhome    null
if  system getproperty       null
activemqhome   new file system getproperty
}
if  activemqhome    null
// guess from the location of the jar
url url   main class getclassloader   getresource
if  url    null
try {
jarurlconnection jarconnection    jarurlconnection url openconnection
url   jarconnection getjarfileurl
uri baseuri   new uri url tostring    resolve
activemqhome   new file baseuri  getcanonicalfile
system setproperty    activemqhome getabsolutepath
catch  exception ignored
}
}
}
if  activemqhome    null
activemqhome   new file
system setproperty    activemqhome getabsolutepath
}
}
return activemqhome
}
public file getactivemqbase
if  activemqbase    null
if  system getproperty       null
activemqbase   new file system getproperty
}
if  activemqbase    null
activemqbase   getactivemqhome
system setproperty    activemqbase getabsolutepath
}
}
return activemqbase
}
}