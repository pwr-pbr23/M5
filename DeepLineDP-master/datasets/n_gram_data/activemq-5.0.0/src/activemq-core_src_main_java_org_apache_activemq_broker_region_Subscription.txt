/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker region
import java io ioexception
import javax jms invalidselectorexception
import javax management objectname
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command consumerinfo
import org apache activemq command messageack
import org apache activemq command messagedispatchnotification
import org apache activemq command messagepull
import org apache activemq command response
import org apache activemq filter messageevaluationcontext
/**
* @version $revision: 1.5 $
*/
public interface subscription extends subscriptionrecovery
/**
* used to add messages that match the subscription.
* @param node
* @throws interruptedexception
* @throws ioexception
*/
void add messagereference node  throws exception
/**
* used when client acknowledge receipt of dispatched message.
* @param node
* @throws ioexception
* @throws exception
*/
void acknowledge connectioncontext context  final messageack ack  throws exception
/**
* allows a consumer to pull a message on demand
*/
response pullmessage connectioncontext context  messagepull pull  throws exception
/**
* is the subscription interested in the message?
* @param node
* @param context
* @return
* @throws ioexception
*/
boolean matches messagereference node  messageevaluationcontext context  throws ioexception
/**
* is the subscription interested in messages in the destination?
* @param context
* @return
*/
boolean matches activemqdestination destination
/**
* the subscription will be receiving messages from the destination.
* @param context
* @param destination
* @throws exception
*/
void add connectioncontext context  destination destination  throws exception
/**
* the subscription will be no longer be receiving messages from the destination.
* @param context
* @param destination
*/
void remove connectioncontext context  destination destination  throws exception
/**
* the consumerinfo object that created the subscription.
* @param destination
*/
consumerinfo getconsumerinfo
/**
* the subscription should release as may references as it can to help the garbage collector
* reclaim memory.
*/
void gc
/**
* used by a slave broker to update dispatch infomation
* @param mdn
* @throws exception
*/
void processmessagedispatchnotification messagedispatchnotification  mdn  throws exception
/**
* @return true if the broker is currently in slave mode
*/
boolean isslave
/**
* @return number of messages pending delivery
*/
int getpendingqueuesize
/**
* @return number of messages dispatched to the client
*/
int getdispatchedqueuesize
/**
* @return number of messages dispatched to the client
*/
long getdispatchedcounter
/**
* @return number of messages that matched the subscription
*/
long getenqueuecounter
/**
* @return number of messages queued by the client
*/
long getdequeuecounter
/**
* @return the jms selector on the current subscription
*/
string getselector
/**
* attempts to change the current active selector on the subscription.
* this operation is not supported for persistent topics.
*/
void setselector string selector  throws invalidselectorexception  unsupportedoperationexception
/**
* @return the jmx object name that this subscription was registered as if applicable
*/
objectname getobjectname
/**
* set when the subscription is registered in jmx
*/
void setobjectname objectname objectname
/**
* @return true when 60% or more room is left for dispatching messages
*/
boolean islowwatermark
/**
* @return true when 10% or less room is left for dispatching messages
*/
boolean ishighwatermark
/**
* inform the messageconsumer on the client to change it's prefetch
* @param newprefetch
*/
void updateconsumerprefetch int newprefetch
/**
* optimize message consumer prefetch if the consumer supports it
*
*/
void optimizeprefetch
/**
* called when the subscription is destroyed.
*/
void destroy
/**
* @return the prefetch size that is configured for the subscription
*/
int getprefetchsize
/**
* informs the broker if the subscription needs to intervention to recover it's state
* e.g. durabletopicsubscriber may do
* @see org.apache.activemq.region.cursors.pendingmessagecursor
* @return true if recovery required
*/
boolean isrecoveryrequired