/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq maven
import java io file
import java io fileinputstream
import java io fileoutputstream
import java io ioexception
import java nio mappedbytebuffer
import java nio channels filechannel
import org apache activemq console main
import org apache maven plugin abstractmojo
import org apache maven plugin mojoexecutionexception
/**
* goal which starts activemq broker.
*
* @goal broker
* @phase process-sources
*/
public class servermojo extends abstractmojo
/**
* location of the output directory. defaults to target.
*
* @parameter expression="${project.build.directory}"
* @required
*/
private file outputdirectory
/**
* location of the predefined config files.
*
* @parameter expression="${configdirectory}"
*            default-value="${basedir}/src/main/resources/broker-conf"
* @required
*/
private string configdirectory
/**
* type of activemq configuration to use. this is also the filename used.
*
* @parameter expression="${configtype}" default-value="activemq"
* @required
*/
private string configtype
/**
* location of activemq config file other those found in resources/config.
*
* @parameter expression="${configfile}"
*/
private file configfile
/**
* broker url.
*
* @parameter expression="${url}"
*/
private string url
public void execute   throws mojoexecutionexception
file out   outputdirectory
// create output directory if it doesn't exist.
if   out exists
out mkdirs
string args   new string
if  url    null
args
args   url
else
file config
if  configfile    null
config   configfile
else
config   new file configdirectory   file separator   configtype
try
config   copy config
catch  ioexception e
throw new mojoexecutionexception e getmessage
args
args        config touri    tostring
main main args
/**
* copy activemq configuration file to output directory.
*
* @param source
* @return
* @throws ioexception
*/
public file copy file source  throws ioexception
filechannel in   null
filechannel out   null
file dest   new file outputdirectory getabsolutepath     file separator
try
in   new fileinputstream source  getchannel
out   new fileoutputstream dest  getchannel
long size   in size
mappedbytebuffer buf   in map filechannel mapmode read_only  0  size
out write buf
finally
if  in    null
in close
if  out    null
out close
return dest