/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java util arraylist
import java util linkedlist
import java util list
import javax jms jmsexception
import org apache activemq command messagedispatch
public class messagedispatchchannel
private final object mutex   new object
private final linkedlist<messagedispatch> list
private boolean closed
private boolean running
public messagedispatchchannel
this list   new linkedlist<messagedispatch>
public void enqueue messagedispatch message
synchronized  mutex
list addlast message
mutex notify
public void enqueuefirst messagedispatch message
synchronized  mutex
list addfirst message
mutex notify
public boolean isempty
synchronized  mutex
return list isempty
/**
* used to get an enqueued message. the amount of time this method blocks is
* based on the timeout value. - if timeout==-1 then it blocks until a
* message is received. - if timeout==0 then it it tries to not block at
* all, it returns a message if it is available - if timeout>0 then it
* blocks up to timeout amount of time. expired messages will consumed by
* this method.
*
* @throws jmsexception
* @return null if we timeout or if the consumer is closed.
* @throws interruptedexception
*/
public messagedispatch dequeue long timeout  throws interruptedexception
synchronized  mutex
// wait until the consumer is ready to deliver messages.
while  timeout    0     closed     list isempty       running
if  timeout     1
mutex wait
else
mutex wait timeout
break
if  closed     running    list isempty
return null
return list removefirst
public messagedispatch dequeuenowait
synchronized  mutex
if  closed     running    list isempty
return null
return list removefirst
public messagedispatch peek
synchronized  mutex
if  closed     running    list isempty
return null
return list getfirst
public void start
synchronized  mutex
running   true
mutex notifyall
public void stop
synchronized  mutex
running   false
mutex notifyall
public void close
synchronized  mutex
if   closed
running   false
closed   true
mutex notifyall
public void clear
synchronized  mutex
list clear
public boolean isclosed
return closed
public int size
synchronized  mutex
return list size
public object getmutex
return mutex
public boolean isrunning
return running
public list<messagedispatch> removeall
synchronized  mutex
arraylist<messagedispatch> rc   new arraylist<messagedispatch> list
list clear
return rc
public string tostring
synchronized  mutex
return list tostring