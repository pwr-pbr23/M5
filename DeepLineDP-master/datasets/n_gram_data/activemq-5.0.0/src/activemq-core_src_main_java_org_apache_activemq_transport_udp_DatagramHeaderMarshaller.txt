/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport udp
import java io datainputstream
import java io dataoutputstream
import java net datagrampacket
import java net socketaddress
import java nio bytebuffer
import java util hashmap
import java util map
import org apache activemq command command
import org apache activemq command endpoint
/**
*
* @version $revision$
*/
public class datagramheadermarshaller
// todo for large dynamic networks
// we may want to evict endpoints that disconnect
// from a transport - e.g. for multicast
private map<socketaddress  endpoint> endpoints   new hashmap<socketaddress  endpoint>
/**
* reads any header if applicable and then creates an endpoint object
*/
public endpoint createendpoint bytebuffer readbuffer  socketaddress address
return getendpoint address
public endpoint createendpoint datagrampacket datagram  datainputstream datain
return getendpoint datagram getsocketaddress
public void writeheader command command  bytebuffer writebuffer
/*
writebuffer.putlong(command.getcounter());
writebuffer.putint(command.getdatasize());
byte flags = command.getflags();
//system.out.println("writing header with counter: " + header.getcounter() + " size: " + header.getdatasize() + " with flags: " + flags);
writebuffer.put(flags);
*/
public void writeheader command command  dataoutputstream dataout
/**
* gets the current endpoint object for this address or creates one if not available.
*
* note that this method does not need to be synchronized as its only ever going to be
* used by the already-synchronized read() method of a commandchannel
*
*/
protected endpoint getendpoint socketaddress address
endpoint endpoint   endpoints get address
if  endpoint    null
endpoint   createendpoint address
endpoints put address  endpoint
return endpoint
protected endpoint createendpoint socketaddress address
return new datagramendpoint address tostring    address