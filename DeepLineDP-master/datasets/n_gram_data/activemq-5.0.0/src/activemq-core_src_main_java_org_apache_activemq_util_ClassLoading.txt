/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq util
import java lang reflect array
import java util hashmap
import java util map
/**
* utilities for loading classes.
*
* @version $rev: 109957 $ $date$
*/
public final class classloading
/**
* primitive type name -> class map.
*/
private static final map<string  class> primitives   new hashmap<string  class>
/**
* vm primitive type primitive type -> name
*/
private static final map<class  string> vm_primitives_reverse   new hashmap<class  string>
/**
* vm primitive type name -> primitive type
*/
private static final map<string  class> vm_primitives   new hashmap<string  class>
/**
* map of primitive types to their wrapper classes
*/
private static final map<class  class> primitive_wrappers   new hashmap<class  class>
private classloading
/**
* load a class for the given name. <p/>
* <p>
* handles loading primitive types as well as vm class and array syntax.
*
* @param classname
*            the name of the class to be loaded.
* @param classloader
*            the class loader to load the class object from.
* @return the class object for the given name.
* @throws classnotfoundexception
*             failed to load class object.
*/
public static class loadclass final string classname  final classloader classloader  throws classnotfoundexception
if  classname    null
throw new illegalargumentexception
// first just try to load
try
return load classname  classloader
catch  classnotfoundexception ignore
// handle special cases below
class type   null
// check if it is a primitive type
type   getprimitivetype classname
if  type    null
return type
// check if it is a vm primitive
type   getvmprimitivetype classname
if  type    null
return type
// handle vm class syntax (lclassname;)
if  classname charat 0          classname charat classname length     1
string name   classname substring 1  classname length     1
return load name  classloader
// handle vm array syntax ([type)
if  classname charat 0
int arraydimension   classname lastindexof      1
string componentclassname   classname substring arraydimension  classname length
type   loadclass componentclassname  classloader
int dim   new int
java util arrays fill dim  0
return array newinstance type  dim  getclass
// handle user friendly type[] syntax
if  classname endswith
// get the base component class name and the arraydimensions
int arraydimension   0
string componentclassname   classname
while  componentclassname endswith
componentclassname   componentclassname substring 0  componentclassname length     2
arraydimension
// load the base type
type   loadclass componentclassname  classloader
// return the array type
int dim   new int
java util arrays fill dim  0
return array newinstance type  dim  getclass
// else we can not load (give up)
throw new classnotfoundexception classname
private static class load final string classname  final classloader classloader  throws classnotfoundexception
if  classloader    null
return class forname classname
else
return classloader loadclass classname
public static string getclassname class clazz
stringbuffer rc   new stringbuffer
while  clazz isarray
rc append
clazz   clazz getcomponenttype
if   clazz isprimitive
rc append
rc append clazz getname
rc append
else
rc append vm_primitives_reverse get clazz
return rc tostring
/** setup the primitives map. */
static
primitives put    boolean type
primitives put    byte type
primitives put    character type
primitives put    short type
primitives put    integer type
primitives put    long type
primitives put    float type
primitives put    double type
primitives put    void type
/**
* get the primitive type for the given primitive name.
*
* @param name
*            primitive type name (boolean, byte, int, ...)
* @return primitive type or null.
*/
private static class getprimitivetype final string name
return primitives get name
/** setup the vm primitives map. */
static
vm_primitives put    byte class
vm_primitives put    char class
vm_primitives put    double class
vm_primitives put    float class
vm_primitives put    int class
vm_primitives put    long class
vm_primitives put    short class
vm_primitives put    boolean class
vm_primitives put    void class
/** setup the vm primitives reverse map. */
static
vm_primitives_reverse put byte class
vm_primitives_reverse put char class
vm_primitives_reverse put double class
vm_primitives_reverse put float class
vm_primitives_reverse put int class
vm_primitives_reverse put long class
vm_primitives_reverse put short class
vm_primitives_reverse put boolean class
vm_primitives_reverse put void class
/**
* get the primitive type for the given vm primitive name. <p/>
* <p>
* mapping:
*
* <pre>
*
*    b - byte
*    c - char
*    d - double
*    f - float
*    i - int
*    j - long
*    s - short
*    z - boolean
*    v - void
*
* </pre>
*
* @param name
*            vm primitive type name (b, c, j, ...)
* @return primitive type or null.
*/
private static class getvmprimitivetype final string name
return vm_primitives get name
/** setup the wrapper map. */
static
primitive_wrappers put boolean type  boolean class
primitive_wrappers put byte type  byte class
primitive_wrappers put character type  character class
primitive_wrappers put double type  double class
primitive_wrappers put float type  float class
primitive_wrappers put integer type  integer class
primitive_wrappers put long type  long class
primitive_wrappers put short type  short class
primitive_wrappers put void type  void class