/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java io inputstream
import java io printstream
import java util arraylist
import java util arrays
import java util list
import org apache activemq console formatter commandshelloutputformatter
import org apache activemq console formatter globalwriter
public class shellcommand extends abstractcommand
private boolean interactive
private string helpfile
public shellcommand
this false
public shellcommand boolean interactive
this interactive   interactive
this helpfile   new string
interactive ?
interactive ?
/**
* main method to run a command shell client.
*
* @param args - command line arguments
* @param in - input stream to use
* @param out - output stream to use
* @return 0 for a successful run, -1 if there are any exception
*/
public static int main string args  inputstream in  printstream out
globalwriter instantiate new commandshelloutputformatter out
// convert arguments to list for easier management
list<string> tokens   new arraylist<string> arrays aslist args
shellcommand main   new shellcommand
try
main execute tokens
return 0
catch  exception e
globalwriter printexception e
return  1
public boolean isinteractive
return interactive
public void setinteractive boolean interactive
this interactive   interactive
/**
* parses for specific command task.
*
* @param tokens - command arguments
* @throws exception
*/
protected void runtask list<string> tokens  throws exception
// process task token
if  tokens size   > 0
string tasktoken    string tokens remove 0
if  tasktoken equals
new startcommand   execute tokens
else if  tasktoken equals
new shutdowncommand   execute tokens
else if  tasktoken equals
new listcommand   execute tokens
else if  tasktoken equals
new querycommand   execute tokens
else if  tasktoken equals
new bstatcommand   execute tokens
else if  tasktoken equals
new amqbrowsecommand   execute tokens
else if  tasktoken equals
new purgecommand   execute tokens
else if  tasktoken equals
printhelp
else
printhelp
else
printhelp
/**
* print the help messages for the browse command
*/
protected void printhelp
globalwriter printhelp helpfile