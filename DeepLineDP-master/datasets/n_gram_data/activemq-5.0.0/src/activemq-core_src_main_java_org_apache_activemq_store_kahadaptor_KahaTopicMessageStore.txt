/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store kahadaptor
import java io ioexception
import java util iterator
import java util map
import java util concurrent concurrenthashmap
import org apache activemq broker connectioncontext
import org apache activemq command activemqdestination
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq kaha listcontainer
import org apache activemq kaha mapcontainer
import org apache activemq kaha marshaller
import org apache activemq kaha store
import org apache activemq kaha storeentry
import org apache activemq store messagerecoverylistener
import org apache activemq store topicmessagestore
/**
* @version $revision: 1.5 $
*/
public class kahatopicmessagestore extends kahamessagestore implements topicmessagestore
protected listcontainer<topicsuback> ackcontainer
protected map<object  topicsubcontainer> subscribermessages   new concurrenthashmap<object  topicsubcontainer>
private map<string  subscriptioninfo> subscribercontainer
private store store
public kahatopicmessagestore store store  mapcontainer<messageid  message> messagecontainer
listcontainer<topicsuback> ackcontainer  mapcontainer<string  subscriptioninfo> subscontainer
activemqdestination destination  throws ioexception
super messagecontainer  destination
this store   store
this ackcontainer   ackcontainer
subscribercontainer   subscontainer
// load all the ack containers
for  iterator<string> i   subscribercontainer keyset   iterator    i hasnext
object key   i next
addsubscribermessagecontainer key
@override
public synchronized void addmessage connectioncontext context  message message  throws ioexception
int subscribercount   subscribermessages size
if  subscribercount > 0
messageid id   message getmessageid
storeentry messageentry   messagecontainer place id  message
topicsuback tsa   new topicsuback
tsa setcount subscribercount
tsa setmessageentry messageentry
storeentry ackentry   ackcontainer placelast tsa
for  iterator<topicsubcontainer> i   subscribermessages values   iterator    i hasnext
topicsubcontainer container   i next
consumermessageref ref   new consumermessageref
ref setackentry ackentry
ref setmessageentry messageentry
ref setmessageid id
container add ref
public synchronized void acknowledge connectioncontext context  string clientid  string subscriptionname
messageid messageid  throws ioexception
string subcriberid   getsubscriptionkey clientid  subscriptionname
topicsubcontainer container   subscribermessages get subcriberid
if  container    null
consumermessageref ref   container remove messageid
if  container isempty
container reset
if  ref    null
topicsuback tsa   ackcontainer get ref getackentry
if  tsa    null
if  tsa decrementcount   <  0
storeentry entry   ref getackentry
entry   ackcontainer refresh entry
ackcontainer remove entry
entry   tsa getmessageentry
entry   messagecontainer refresh entry
messagecontainer remove entry
else
ackcontainer update ref getackentry    tsa
public subscriptioninfo lookupsubscription string clientid  string subscriptionname  throws ioexception
return subscribercontainer get getsubscriptionkey clientid  subscriptionname
public synchronized void addsubsciption subscriptioninfo info  boolean retroactive  throws ioexception
string key   getsubscriptionkey info getclientid    info getsubscriptionname
// if already exists - won't add it again as it causes data files
// to hang around
if   subscribercontainer containskey key
subscribercontainer put key  info
// add the subscriber
addsubscribermessagecontainer key
/*
* if(retroactive){ for(storeentry
* entry=ackcontainer.getfirst();entry!=null;entry=ackcontainer.getnext(entry)){
* topicsuback tsa=(topicsuback)ackcontainer.get(entry);
* consumermessageref ref=new consumermessageref();
* ref.setackentry(entry); ref.setmessageentry(tsa.getmessageentry());
* container.add(ref); } }
*/
public synchronized void deletesubscription string clientid  string subscriptionname  throws ioexception
string key   getsubscriptionkey clientid  subscriptionname
removesubscribermessagecontainer key
public void recoversubscription string clientid  string subscriptionname  messagerecoverylistener listener
throws exception
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer container   subscribermessages get key
if  container    null
for  iterator i   container iterator    i hasnext
consumermessageref ref    consumermessageref i next
message msg   messagecontainer get ref getmessageentry
if  msg    null
if   recovermessage listener  msg
break
public void recovernextmessages string clientid  string subscriptionname  int maxreturned
messagerecoverylistener listener  throws exception
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer container   subscribermessages get key
if  container    null
int count   0
storeentry entry   container getbatchentry
if  entry    null
entry   container getentry
else
entry   container refreshentry entry
if  entry    null
entry   container getnextentry entry
if  entry    null
do
consumermessageref consumerref   container get entry
message msg   messagecontainer getvalue consumerref getmessageentry
if  msg    null
recovermessage listener  msg
count
container setbatchentry msg getmessageid   tostring    entry
else
container reset
entry   container getnextentry entry
while  entry    null    count < maxreturned    listener hasspace
public void delete
super delete
ackcontainer clear
subscribercontainer clear
public subscriptioninfo getallsubscriptions   throws ioexception
return subscribercontainer values
toarray new subscriptioninfo
protected string getsubscriptionkey string clientid  string subscribername
string result   clientid
result    subscribername    null ? subscribername
return result
protected mapcontainer addsubscribermessagecontainer object key  throws ioexception
mapcontainer container   store getmapcontainer key
container setkeymarshaller store messageid_marshaller
marshaller marshaller   new consumermessagerefmarshaller
container setvaluemarshaller marshaller
topicsubcontainer tsc   new topicsubcontainer container
subscribermessages put key  tsc
return container
protected void removesubscribermessagecontainer object key
throws ioexception
subscribercontainer remove key
topicsubcontainer container   subscribermessages remove key
if  container    null
for  iterator i   container iterator    i hasnext
consumermessageref ref    consumermessageref  i next
if  ref    null
topicsuback tsa   ackcontainer get ref getackentry
if  tsa    null
if  tsa decrementcount   <  0
ackcontainer remove ref getackentry
messagecontainer remove tsa getmessageentry
else
ackcontainer update ref getackentry    tsa
container clear
store deletelistcontainer key
public int getmessagecount string clientid  string subscribername  throws ioexception
string key   getsubscriptionkey clientid  subscribername
topicsubcontainer container   subscribermessages get key
return container    null ? container size     0
/**
* @param context
* @throws ioexception
* @see org.apache.activemq.store.messagestore#removeallmessages(org.apache.activemq.broker.connectioncontext)
*/
public synchronized void removeallmessages connectioncontext context  throws ioexception
messagecontainer clear
ackcontainer clear
for  iterator<topicsubcontainer> i   subscribermessages values   iterator    i hasnext
topicsubcontainer container   i next
container clear
public synchronized void resetbatching string clientid  string subscriptionname
string key   getsubscriptionkey clientid  subscriptionname
topicsubcontainer topicsubcontainer   subscribermessages get key
if  topicsubcontainer    null
topicsubcontainer reset