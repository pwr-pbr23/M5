/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java io serializable
import java util random
/**
* configuration options used to control how messages are re-delivered when they
* are rolled back.
*
* @org.apache.xbean.xbean element="redeliverypolicy"
* @version $revision: 1.11 $
*/
public class redeliverypolicy implements cloneable  serializable
public static final int no_maximum_redeliveries    1
private static random randomnumbergenerator
// +/-15% for a 30% spread -cgs
private double collisionavoidancefactor   0 15d
private int maximumredeliveries   6
private long initialredeliverydelay   1000l
private boolean usecollisionavoidance
private boolean useexponentialbackoff
private short backoffmultiplier   5
public redeliverypolicy
public redeliverypolicy copy
try
return  redeliverypolicy clone
catch  clonenotsupportedexception e
throw new runtimeexception     e  e
public short getbackoffmultiplier
return backoffmultiplier
public void setbackoffmultiplier short backoffmultiplier
this backoffmultiplier   backoffmultiplier
public short getcollisionavoidancepercent
return  short math round collisionavoidancefactor   100
public void setcollisionavoidancepercent short collisionavoidancepercent
this collisionavoidancefactor   collisionavoidancepercent   0 01d
public long getinitialredeliverydelay
return initialredeliverydelay
public void setinitialredeliverydelay long initialredeliverydelay
this initialredeliverydelay   initialredeliverydelay
public int getmaximumredeliveries
return maximumredeliveries
public void setmaximumredeliveries int maximumredeliveries
this maximumredeliveries   maximumredeliveries
public long getredeliverydelay long previousdelay
long redeliverydelay
if  previousdelay    0
redeliverydelay   initialredeliverydelay
else if  useexponentialbackoff    backoffmultiplier > 1
redeliverydelay   previousdelay   backoffmultiplier
else
redeliverydelay   previousdelay
if  usecollisionavoidance
/*
* first random determines +/-, second random determines how far to
* go in that direction. -cgs
*/
random random   getrandomnumbergenerator
double variance    random nextboolean   ? collisionavoidancefactor    collisionavoidancefactor    random nextdouble
redeliverydelay    redeliverydelay   variance
return redeliverydelay
public boolean isusecollisionavoidance
return usecollisionavoidance
public void setusecollisionavoidance boolean usecollisionavoidance
this usecollisionavoidance   usecollisionavoidance
public boolean isuseexponentialbackoff
return useexponentialbackoff
public void setuseexponentialbackoff boolean useexponentialbackoff
this useexponentialbackoff   useexponentialbackoff
protected static synchronized random getrandomnumbergenerator
if  randomnumbergenerator    null
randomnumbergenerator   new random
return randomnumbergenerator