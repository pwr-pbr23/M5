/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java io ioexception
import org apache activemq command brokerid
import org apache activemq command brokerinfo
import org apache activemq command command
import org apache activemq command consumerinfo
import org apache activemq command endpoint
import org apache activemq command networkbridgefilter
import org apache activemq transport transport
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* a demand forwarding bridge which works with multicast style transports where
* a single transport could be communicating with multiple remote brokers
*
* @org.apache.xbean.xbean
*
* @version $revision$
*/
public class compositedemandforwardingbridge extends demandforwardingbridgesupport
private static final log log   logfactory getlog compositedemandforwardingbridge class
protected final brokerid remotebrokerpath   new brokerid  null
protected object brokerinfomutex   new object
public compositedemandforwardingbridge networkbridgeconfiguration configuration  transport localbroker
transport remotebroker
super configuration  localbroker  remotebroker
remotebrokername   remotebroker tostring
remotebrokernameknownlatch countdown
protected void serviceremotebrokerinfo command command  throws ioexception
synchronized  brokerinfomutex
brokerinfo remotebrokerinfo    brokerinfo command
brokerid remotebrokerid   remotebrokerinfo getbrokerid
// lets associate the incoming endpoint with a broker id so we can
// refer to it later
endpoint from   command getfrom
if  from    null
log warn     command
else
from setbrokerinfo remotebrokerinfo
if  localbrokerid    null
if  localbrokerid equals remotebrokerid
log info
// waitstarted();
servicesupport dispose this
if   disposed
triggerlocalstartbridge
protected void addremotebrokertobrokerpath consumerinfo info  throws ioexception
info setbrokerpath appendtobrokerpath info getbrokerpath    getfrombrokerid info
/**
* returns the broker id that the command came from
*/
protected brokerid getfrombrokerid command command  throws ioexception
brokerid answer   null
endpoint from   command getfrom
if  from    null
log warn     command
else
answer   from getbrokerid
if  answer    null
return answer
else
throw new ioexception     from
command
protected void servicelocalbrokerinfo command command  throws interruptedexception
// todo is there much we can do here?
protected networkbridgefilter createnetworkbridgefilter consumerinfo info  throws ioexception
return new networkbridgefilter getfrombrokerid info   configuration getnetworkttl
protected brokerid getremotebrokerpath
return remotebrokerpath