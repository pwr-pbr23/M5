/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java io ioexception
import java util concurrent atomic atomiclong
import org apache activemq service
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq command brokerid
import org apache activemq command brokerinfo
import org apache activemq command command
import org apache activemq command connectionid
import org apache activemq command connectioninfo
import org apache activemq command consumerinfo
import org apache activemq command exceptionresponse
import org apache activemq command message
import org apache activemq command messageack
import org apache activemq command messagedispatch
import org apache activemq command producerinfo
import org apache activemq command response
import org apache activemq command sessioninfo
import org apache activemq command shutdowninfo
import org apache activemq transport defaulttransportlistener
import org apache activemq transport futureresponse
import org apache activemq transport responsecallback
import org apache activemq transport transport
import org apache activemq util idgenerator
import org apache activemq util servicestopper
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* forwards all messages from the local broker to the remote broker.
*
* @org.apache.xbean.xbean
*
* @version $revision$
*/
public class forwardingbridge implements service
private static final idgenerator id_generator   new idgenerator
private static final log log   logfactory getlog forwardingbridge class
final atomiclong enqueuecounter   new atomiclong
final atomiclong dequeuecounter   new atomiclong
connectioninfo connectioninfo
sessioninfo sessioninfo
producerinfo producerinfo
consumerinfo queueconsumerinfo
consumerinfo topicconsumerinfo
brokerid localbrokerid
brokerid remotebrokerid
brokerinfo localbrokerinfo
brokerinfo remotebrokerinfo
private final transport localbroker
private final transport remotebroker
private string clientid
private int prefetchsize   1000
private boolean dispatchasync
private string destinationfilter
private networkbridgelistener bridgefailedlistener
public forwardingbridge transport localbroker  transport remotebroker
this localbroker   localbroker
this remotebroker   remotebroker
public void start   throws exception
log info     localbroker       remotebroker
localbroker settransportlistener new defaulttransportlistener
public void oncommand object o
command command    command o
servicelocalcommand command
public void onexception ioexception error
servicelocalexception error
remotebroker settransportlistener new defaulttransportlistener
public void oncommand object o
command command    command o
serviceremotecommand command
public void onexception ioexception error
serviceremoteexception error
localbroker start
remotebroker start
protected void triggerstartbridge   throws ioexception
thread thead   new thread
public void run
try
startbridge
catch  ioexception e
log error     e  e
thead start
/**
* @throws ioexception
*/
final void startbridge   throws ioexception
connectioninfo   new connectioninfo
connectioninfo setconnectionid new connectionid id_generator generateid
connectioninfo setclientid clientid
localbroker oneway connectioninfo
remotebroker oneway connectioninfo
sessioninfo   new sessioninfo connectioninfo  1
localbroker oneway sessioninfo
remotebroker oneway sessioninfo
queueconsumerinfo   new consumerinfo sessioninfo  1
queueconsumerinfo setdispatchasync dispatchasync
queueconsumerinfo setdestination new activemqqueue destinationfilter
queueconsumerinfo setprefetchsize prefetchsize
queueconsumerinfo setpriority consumerinfo network_consumer_priority
localbroker oneway queueconsumerinfo
producerinfo   new producerinfo sessioninfo  1
producerinfo setresponserequired false
remotebroker oneway producerinfo
if  connectioninfo getclientid      null
topicconsumerinfo   new consumerinfo sessioninfo  2
topicconsumerinfo setdispatchasync dispatchasync
topicconsumerinfo setsubscriptionname
topicconsumerinfo setretroactive true
topicconsumerinfo setdestination new activemqtopic destinationfilter
topicconsumerinfo setprefetchsize prefetchsize
topicconsumerinfo setpriority consumerinfo network_consumer_priority
localbroker oneway topicconsumerinfo
log info     localbroker       remotebroker
public void stop   throws exception
try
if  connectioninfo    null
localbroker request connectioninfo createremovecommand
remotebroker request connectioninfo createremovecommand
localbroker settransportlistener null
remotebroker settransportlistener null
localbroker oneway new shutdowninfo
remotebroker oneway new shutdowninfo
finally
servicestopper ss   new servicestopper
ss stop localbroker
ss stop remotebroker
ss throwfirstexception
public void serviceremoteexception throwable error
log info     error
log debug    error
protected void serviceremotecommand command command
try
if  command isbrokerinfo
synchronized  this
remotebrokerinfo    brokerinfo command
remotebrokerid   remotebrokerinfo getbrokerid
if  localbrokerid    null
if  localbrokerid equals remotebrokerid
log info
servicesupport dispose this
else
triggerstartbridge
else
log warn     command
catch  ioexception e
servicelocalexception e
public void servicelocalexception throwable error
log info     error
log debug    error
firebridgefailed
protected void servicelocalcommand command command
try
if  command ismessagedispatch
enqueuecounter incrementandget
final messagedispatch md    messagedispatch command
message message   md getmessage
message setproducerid producerinfo getproducerid
if  message getoriginaltransactionid      null
message setoriginaltransactionid message gettransactionid
message settransactionid null
if   message isresponserequired
// if the message was originally sent using async send, we
// will preserve that qos
// by bridging it using an async send (small chance of
// message loss).
remotebroker oneway message
dequeuecounter incrementandget
localbroker oneway new messageack md  messageack standard_ack_type  1
else
// the message was not sent using async send, so we should
// only ack the local
// broker when we get confirmation that the remote broker
// has received the message.
responsecallback callback   new responsecallback
public void oncompletion futureresponse future
try
response response   future getresult
if  response isexception
exceptionresponse er    exceptionresponse response
servicelocalexception er getexception
else
dequeuecounter incrementandget
localbroker oneway new messageack md  messageack standard_ack_type  1
catch  ioexception e
servicelocalexception e
remotebroker asyncrequest message  callback
// ack on every message since we don't know if the broker is
// blocked due to memory
// usage and is waiting for an ack to un-block him.
// acking a range is more efficient, but also more prone to
// locking up a server
// perhaps doing something like the following should be policy
// based.
// if(
// md.getconsumerid().equals(queueconsumerinfo.getconsumerid())
// ) {
// queuedispatched++;
// if( queuedispatched > (queueconsumerinfo.getprefetchsize()/2)
// ) {
// localbroker.oneway(new messageack(md,
// messageack.standard_ack_type, queuedispatched));
// queuedispatched=0;
// }
// } else {
// topicdispatched++;
// if( topicdispatched > (topicconsumerinfo.getprefetchsize()/2)
// ) {
// localbroker.oneway(new messageack(md,
// messageack.standard_ack_type, topicdispatched));
// topicdispatched=0;
// }
// }
else if  command isbrokerinfo
synchronized  this
localbrokerinfo    brokerinfo command
localbrokerid   localbrokerinfo getbrokerid
if  remotebrokerid    null
if  remotebrokerid equals localbrokerid
log info
servicesupport dispose this
else
triggerstartbridge
else
log debug     command
catch  ioexception e
servicelocalexception e
public string getclientid
return clientid
public void setclientid string clientid
this clientid   clientid
public int getprefetchsize
return prefetchsize
public void setprefetchsize int prefetchsize
this prefetchsize   prefetchsize
public boolean isdispatchasync
return dispatchasync
public void setdispatchasync boolean dispatchasync
this dispatchasync   dispatchasync
public string getdestinationfilter
return destinationfilter
public void setdestinationfilter string destinationfilter
this destinationfilter   destinationfilter
public void setnetworkbridgefailedlistener networkbridgelistener listener
this bridgefailedlistener   listener
private void firebridgefailed
networkbridgelistener l   this bridgefailedlistener
if  l    null
l bridgefailed
public string getremoteaddress
return remotebroker getremoteaddress
public string getlocaladdress
return localbroker getremoteaddress
public string getlocalbrokername
return localbrokerinfo    null ? null   localbrokerinfo getbrokername
public string getremotebrokername
return remotebrokerinfo    null ? null   remotebrokerinfo getbrokername
public long getdequeuecounter
return dequeuecounter get
public long getenqueuecounter
return enqueuecounter get