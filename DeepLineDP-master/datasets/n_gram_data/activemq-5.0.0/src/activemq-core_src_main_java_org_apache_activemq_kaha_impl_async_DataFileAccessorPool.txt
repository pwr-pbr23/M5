/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq kaha impl async
import java io ioexception
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
/**
* used to pool datafileaccessors.
*
* @author chirino
*/
public class datafileaccessorpool
private final asyncdatamanager datamanager
private final map<integer  pool> pools   new hashmap<integer  pool>
private boolean closed
private int maxopenreadersperfile   5
class pool
private final datafile file
private final list<datafileaccessor> pool   new arraylist<datafileaccessor>
private boolean used
private int opencounter
private boolean disposed
public pool datafile file
this file   file
public datafileaccessor opendatafilereader   throws ioexception
datafileaccessor rc   null
if  pool isempty
rc   new datafileaccessor datamanager  file
else
rc    datafileaccessor pool remove pool size     1
used   true
opencounter
return rc
public synchronized void closedatafilereader datafileaccessor reader
opencounter
if  pool size   >  maxopenreadersperfile    disposed
reader dispose
else
pool add reader
public synchronized void clearusedmark
used   false
public synchronized boolean isused
return used
public synchronized void dispose
for  datafileaccessor reader   pool
reader dispose
pool clear
disposed   true
public synchronized int getopencounter
return opencounter
public datafileaccessorpool asyncdatamanager datamanager
this datamanager   datamanager
synchronized void clearusedmark
for  iterator iter   pools values   iterator    iter hasnext
pool pool    pool iter next
pool clearusedmark
synchronized void disposeunused
for  iterator<pool> iter   pools values   iterator    iter hasnext
pool pool   iter next
if   pool isused
pool dispose
iter remove
synchronized void disposedatafileaccessors datafile datafile
if  closed
throw new illegalstateexception
pool pool   pools get datafile getdatafileid
if  pool    null
if  pool getopencounter      0
pool dispose
pools remove datafile getdatafileid
else
throw new illegalstateexception     datafile       pool getopencounter
synchronized datafileaccessor opendatafileaccessor datafile datafile  throws ioexception
if  closed
throw new ioexception
pool pool   pools get datafile getdatafileid
if  pool    null
pool   new pool datafile
pools put datafile getdatafileid    pool
return pool opendatafilereader
synchronized void closedatafileaccessor datafileaccessor reader
pool pool   pools get reader getdatafile   getdatafileid
if  pool    null    closed
reader dispose
else
pool closedatafilereader reader
public synchronized void close
if  closed
return
closed   true
for  iterator<pool> iter   pools values   iterator    iter hasnext
pool pool   iter next
pool dispose
pools clear