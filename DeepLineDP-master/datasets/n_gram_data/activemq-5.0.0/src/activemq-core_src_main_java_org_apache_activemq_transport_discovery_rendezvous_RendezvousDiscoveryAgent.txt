/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq transport discovery rendezvous
import java io ioexception
import java net inetaddress
import java net unknownhostexception
import java util hashmap
import java util iterator
import java util map
import java util concurrent copyonwritearraylist
import javax jmdns jmdns
import javax jmdns serviceevent
import javax jmdns serviceinfo
import javax jmdns servicelistener
import org apache activemq command discoveryevent
import org apache activemq transport discovery discoveryagent
import org apache activemq transport discovery discoverylistener
import org apache activemq util jmsexceptionsupport
import org apache activemq util maphelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* a {@link discoveryagent} using <a href="http://www.zeroconf.org/">zeroconf</a>
* via the <a href="http://jmdns.sf.net/">jmdns</a> library
*
* @version $revision$
*/
public class rendezvousdiscoveryagent implements discoveryagent  servicelistener
private static final log log   logfactory getlog rendezvousdiscoveryagent class
private static final string type_suffix
private jmdns jmdns
private inetaddress localaddress
private string localhost
private int weight
private int priority
private discoverylistener listener
private string group
private final copyonwritearraylist<serviceinfo> serviceinfos   new copyonwritearraylist<serviceinfo>
// discoveryagent interface
// -------------------------------------------------------------------------
public void start   throws exception
if  group    null
throw new ioexception
string type   gettype
if   type endswith
log warn     type
type
try
// force lazy construction
getjmdns
if  listener    null
log info     type
jmdns addservicelistener type  this
catch  ioexception e
jmsexceptionsupport create     e  e
public void stop
if  jmdns    null
for  iterator<serviceinfo> iter   serviceinfos iterator    iter hasnext
serviceinfo si   iter next
jmdns unregisterservice si
// close it down async since this could block for a while.
final jmdns closetarget   jmdns
thread thread   new thread
public void run
closetarget close
thread setdaemon true
thread start
jmdns   null
public void registerservice string name  throws ioexception
serviceinfo si   createserviceinfo name  new hashmap
serviceinfos add si
getjmdns   registerservice si
// servicelistener interface
// -------------------------------------------------------------------------
public void addservice jmdns jmdns  string type  string name
if  log isdebugenabled
log debug     type       name
if  listener    null
listener onserviceadd new discoveryevent name
jmdns requestserviceinfo type  name
public void removeservice jmdns jmdns  string type  string name
if  log isdebugenabled
log debug     type       name
if  listener    null
listener onserviceremove new discoveryevent name
public void serviceadded serviceevent event
addservice event getdns    event gettype    event getname
public void serviceremoved serviceevent event
removeservice event getdns    event gettype    event getname
public void serviceresolved serviceevent event
public void resolveservice jmdns jmdns  string type  string name  serviceinfo serviceinfo
public int getpriority
return priority
public void setpriority int priority
this priority   priority
public int getweight
return weight
public void setweight int weight
this weight   weight
public jmdns getjmdns   throws ioexception
if  jmdns    null
jmdns   createjmdns
return jmdns
public void setjmdns jmdns jmdns
this jmdns   jmdns
public inetaddress getlocaladdress   throws unknownhostexception
if  localaddress    null
localaddress   createlocaladdress
return localaddress
public void setlocaladdress inetaddress localaddress
this localaddress   localaddress
public string getlocalhost
return localhost
public void setlocalhost string localhost
this localhost   localhost
// implementation methods
// -------------------------------------------------------------------------
protected serviceinfo createserviceinfo string name  map map
int port   maphelper getint map     0
string type   gettype
if  log isdebugenabled
log debug     type       name       map
return new serviceinfo type  name       type  port  weight  priority
protected jmdns createjmdns   throws ioexception
return jmdnsfactory create getlocaladdress
protected inetaddress createlocaladdress   throws unknownhostexception
if  localhost    null
return inetaddress getbyname localhost
return inetaddress getlocalhost
public void setdiscoverylistener discoverylistener listener
this listener   listener
public string getgroup
return group
public void setgroup string group
this group   group
public string gettype
return     group       type_suffix
public void servicefailed discoveryevent event  throws ioexception
// todo: is there a way to notify the jmdns that the service failed?