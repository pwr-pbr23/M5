/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store jdbc
import java io ioexception
import java sql sqlexception
import java util map
import java util concurrent concurrenthashmap
import java util concurrent atomic atomiclong
import org apache activemq broker connectioncontext
import org apache activemq command activemqtopic
import org apache activemq command message
import org apache activemq command messageid
import org apache activemq command subscriptioninfo
import org apache activemq store messagerecoverylistener
import org apache activemq store topicmessagestore
import org apache activemq util bytesequence
import org apache activemq util ioexceptionsupport
import org apache activemq wireformat wireformat
/**
* @version $revision: 1.6 $
*/
public class jdbctopicmessagestore extends jdbcmessagestore implements topicmessagestore
private map<string  atomiclong> subscriberlastmessagemap   new concurrenthashmap<string  atomiclong>
public jdbctopicmessagestore jdbcpersistenceadapter persistenceadapter  jdbcadapter adapter  wireformat wireformat  activemqtopic topic
super persistenceadapter  adapter  wireformat  topic
public void acknowledge connectioncontext context  string clientid  string subscriptionname  messageid messageid  throws ioexception
long seq   messageid getbrokersequenceid
// get a connection and insert the message into the db.
transactioncontext c   persistenceadapter gettransactioncontext context
try
adapter dosetlastack c  destination  clientid  subscriptionname  seq
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     clientid       messageid       e  e
finally
c close
/**
* @throws exception
*/
public void recoversubscription string clientid  string subscriptionname  final messagerecoverylistener listener  throws exception
transactioncontext c   persistenceadapter gettransactioncontext
try
adapter dorecoversubscription c  destination  clientid  subscriptionname  new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
return listener recovermessage msg
public boolean recovermessagereference string reference  throws exception
return listener recovermessagereference new messageid reference
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     clientid       e  e
finally
c close
public synchronized void recovernextmessages final string clientid  final string subscriptionname  final int maxreturned  final messagerecoverylistener listener
throws exception
transactioncontext c   persistenceadapter gettransactioncontext
string subcriberid   getsubscriptionkey clientid  subscriptionname
atomiclong last   subscriberlastmessagemap get subcriberid
if  last    null
long lastacked   adapter dogetlastackeddurablesubscribermessageid c  destination  clientid  subscriptionname
last   new atomiclong lastacked
subscriberlastmessagemap put subcriberid  last
final atomiclong finallast   last
try
adapter dorecovernextmessages c  destination  clientid  subscriptionname  last get    maxreturned  new jdbcmessagerecoverylistener
public boolean recovermessage long sequenceid  byte data  throws exception
if  listener hasspace
message msg    message wireformat unmarshal new bytesequence data
msg getmessageid   setbrokersequenceid sequenceid
listener recovermessage msg
finallast set sequenceid
return true
return false
public boolean recovermessagereference string reference  throws exception
return listener recovermessagereference new messageid reference
catch  sqlexception e
jdbcpersistenceadapter log    e
finally
c close
last set finallast get
public void resetbatching string clientid  string subscriptionname
string subcriberid   getsubscriptionkey clientid  subscriptionname
subscriberlastmessagemap remove subcriberid
/**
* @see org.apache.activemq.store.topicmessagestore#storesubsciption(org.apache.activemq.service.subscriptioninfo,
*      boolean)
*/
public void addsubsciption subscriptioninfo subscriptioninfo  boolean retroactive  throws ioexception
transactioncontext c   persistenceadapter gettransactioncontext
try
c   persistenceadapter gettransactioncontext
adapter dosetsubscriberentry c  subscriptioninfo  retroactive
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     subscriptioninfo getclientid         e  e
finally
c close
/**
* @see org.apache.activemq.store.topicmessagestore#lookupsubscription(string,
*      string)
*/
public subscriptioninfo lookupsubscription string clientid  string subscriptionname  throws ioexception
transactioncontext c   persistenceadapter gettransactioncontext
try
return adapter dogetsubscriberentry c  destination  clientid  subscriptionname
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     clientid       e  e
finally
c close
public void deletesubscription string clientid  string subscriptionname  throws ioexception
transactioncontext c   persistenceadapter gettransactioncontext
try
adapter dodeletesubscription c  destination  clientid  subscriptionname
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     clientid       e  e
finally
c close
resetbatching clientid  subscriptionname
public subscriptioninfo getallsubscriptions   throws ioexception
transactioncontext c   persistenceadapter gettransactioncontext
try
return adapter dogetallsubscriptions c  destination
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     e  e
finally
c close
public int getmessagecount string clientid  string subscribername  throws ioexception
int result   0
transactioncontext c   persistenceadapter gettransactioncontext
try
result   adapter dogetdurablesubscribermessagecount c  destination  clientid  subscribername
catch  sqlexception e
jdbcpersistenceadapter log    e
throw ioexceptionsupport create     clientid       e  e
finally
c close
return result
protected string getsubscriptionkey string clientid  string subscribername
string result   clientid
result    subscribername    null ? subscribername
return result