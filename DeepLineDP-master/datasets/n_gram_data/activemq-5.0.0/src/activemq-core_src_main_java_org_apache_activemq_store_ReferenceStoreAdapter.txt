/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq store
import java io ioexception
import java util map
import java util set
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq command transactionid
import org apache activemq store amq amqtx
/**
* adapter to the actual persistence mechanism used with activemq
*
* @version $revision: 1.3 $
*/
public interface referencestoreadapter extends persistenceadapter
/**
* factory method to create a new queue message store with the given
* destination name
*
* @param destination
* @return the queuereferencestore
* @throws ioexception
*/
referencestore createqueuereferencestore activemqqueue destination  throws ioexception
/**
* factory method to create a new topic message store with the given
* destination name
*
* @param destination
* @return the topicrefererencestore
* @throws ioexception
*/
topicreferencestore createtopicreferencestore activemqtopic destination  throws ioexception
/**
* @return set of file ids in use
* @throws ioexception
*/
set<integer> getreferencefileidsinuse   throws ioexception
/**
* if the store isn't valid, it can be recoverd at start-up
*
* @return true if the reference store is in a consistent state
*/
boolean isstorevalid
/**
* called by recover to clear out message references
*
* @throws ioexception
*/
void clearmessages   throws ioexception
/**
* recover any state
*
* @throws ioexception
*/
void recoverstate   throws ioexception
/**
* save prepared transactions
*
* @param map
* @throws ioexception
*/
void savepreparedstate map<transactionid  amqtx> map  throws ioexception
/**
* @return saved prepared transactions
* @throws ioexception
*/
map<transactionid  amqtx> retrievepreparedstate   throws ioexception