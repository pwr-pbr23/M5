/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq console command
import java util arraylist
import java util hashset
import java util iterator
import java util list
import java util set
import java util stringtokenizer
import javax jms destination
import org apache activemq command activemqqueue
import org apache activemq command activemqtopic
import org apache activemq console formatter globalwriter
import org apache activemq console util amqmessagesutil
public class amqbrowsecommand extends abstractamqcommand
public static final string queue_prefix
public static final string topic_prefix
public static final string view_group_header
public static final string view_group_custom
public static final string view_group_body
protected string helpfile   new string
private final list<string> queryaddobjects   new arraylist<string> 10
private final list<string> querysubobjects   new arraylist<string> 10
private final set<string> groupviews   new hashset<string> 10
private final set queryviews   new hashset 10
/**
* execute the browse command, which allows you to browse the messages in a
* given jms destination
*
* @param tokens - command arguments
* @throws exception
*/
protected void runtask list tokens  throws exception
try
// if no destination specified
if  tokens isempty
globalwriter printexception new illegalargumentexception
return
// if no broker url specified
if  getbrokerurl      null
globalwriter printexception new illegalstateexception
return
// display the messages for each destination
for  iterator i   tokens iterator    i hasnext
string destname    string i next
destination dest
// if destination has been explicitly specified as a queue
if  destname startswith queue_prefix
dest   new activemqqueue destname substring queue_prefix length
// if destination has been explicitly specified as a topic
else if  destname startswith topic_prefix
dest   new activemqtopic destname substring topic_prefix length
// by default destination is assumed to be a queue
else
dest   new activemqqueue destname
// query for the messages to view
list addmsgs   amqmessagesutil getmessages getbrokerurl    dest  queryaddobjects
// query for the messages to remove from view
if  querysubobjects size   > 0
list submsgs   amqmessagesutil getmessages getbrokerurl    dest  querysubobjects
addmsgs removeall submsgs
// display the messages
globalwriter printmessage amqmessagesutil filtermessagesview addmsgs  groupviews  queryviews
catch  exception e
globalwriter printexception new runtimeexception     e
throw new exception e
/**
* handle the --msgsel, --xmsgsel, --view, -v options.
*
* @param token - option token to handle
* @param tokens - succeeding command arguments
* @throws exception
*/
protected void handleoption string token  list tokens  throws exception
// if token is an additive message selector option
if  token startswith
// if no message selector is specified, or next token is a new
// option
if  tokens isempty        string tokens get 0   startswith
globalwriter printexception new illegalargumentexception
return
stringtokenizer querytokens   new stringtokenizer  string tokens remove 0   command_option_delimeter
while  querytokens hasmoretokens
queryaddobjects add querytokens nexttoken
else if  token startswith
// if token is a substractive message selector option
// if no message selector is specified, or next token is a new
// option
if  tokens isempty        string tokens get 0   startswith
globalwriter printexception new illegalargumentexception
return
stringtokenizer querytokens   new stringtokenizer  string tokens remove 0   command_option_delimeter
while  querytokens hasmoretokens
querysubobjects add querytokens nexttoken
else if  token startswith
// if token is a view option
// if no view specified, or next token is a new option
if  tokens isempty        string tokens get 0   startswith
globalwriter printexception new illegalargumentexception
return
// add the attributes to view
stringtokenizer viewtokens   new stringtokenizer  string tokens remove 0   command_option_delimeter
while  viewtokens hasmoretokens
string viewtoken   viewtokens nexttoken
// if view is explicitly specified to belong to the jms header
if  viewtoken equals view_group_header
queryviews add amqmessagesutil jms_message_header_prefix   viewtoken substring view_group_header length
// if view is explicitly specified to belong to the jms
// custom header
else if  viewtoken equals view_group_custom
queryviews add amqmessagesutil jms_message_custom_prefix   viewtoken substring view_group_custom length
// if view is explicitly specified to belong to the jms body
else if  viewtoken equals view_group_body
queryviews add amqmessagesutil jms_message_body_prefix   viewtoken substring view_group_body length
// if no view explicitly specified, let's check the view for
// each group
else
queryviews add amqmessagesutil jms_message_header_prefix   viewtoken
queryviews add amqmessagesutil jms_message_custom_prefix   viewtoken
queryviews add amqmessagesutil jms_message_body_prefix   viewtoken
else if  token startswith
// if token is a predefined group view option
string viewgroup   token substring 2
// if option is a header group view
if  viewgroup equals
groupviews add amqmessagesutil jms_message_header_prefix
// if option is a custom header group view
else if  viewgroup equals
groupviews add amqmessagesutil jms_message_custom_prefix
// if option is a body group view
else if  viewgroup equals
groupviews add amqmessagesutil jms_message_body_prefix
// unknown group view
else
globalwriter printinfo     viewgroup
else
// let super class handle unknown option
super handleoption token  tokens
/**
* print the help messages for the browse command
*/
protected void printhelp
globalwriter printhelp helpfile