/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import java net uri
import java net urisyntaxexception
import java util hashmap
import java util map
import java util properties
import java util concurrent executor
import java util concurrent scheduledthreadpoolexecutor
import java util concurrent threadfactory
import javax jms connection
import javax jms connectionfactory
import javax jms jmsexception
import javax jms queueconnection
import javax jms queueconnectionfactory
import javax jms topicconnection
import javax jms topicconnectionfactory
import javax naming context
import org apache activemq blob blobtransferpolicy
import org apache activemq jndi jndibasestorable
import org apache activemq management jmsstatsimpl
import org apache activemq management statscapable
import org apache activemq management statsimpl
import org apache activemq transport transport
import org apache activemq transport transportfactory
import org apache activemq transport transportlistener
import org apache activemq util idgenerator
import org apache activemq util introspectionsupport
import org apache activemq util jmsexceptionsupport
import org apache activemq util urisupport
import org apache activemq util urisupport compositedata
/**
* a connectionfactory is an an administered object, and is used for creating
* connections. <p/> this class also implements queueconnectionfactory and
* topicconnectionfactory. you can use this connection to create both
* queueconnections and topicconnections.
*
* @version $revision: 1.9 $
* @see javax.jms.connectionfactory
*/
public class activemqconnectionfactory extends jndibasestorable implements connectionfactory  queueconnectionfactory  topicconnectionfactory  statscapable  cloneable
public static final string default_broker_url
public static final string default_user   null
public static final string default_password   null
public static final int default_producer_window_size   0
protected static final executor default_connection_executor   new scheduledthreadpoolexecutor 5  new threadfactory
public thread newthread runnable run
thread thread   new thread run
thread setpriority threadpriorities inbound_client_connection
return thread
protected uri brokerurl
protected string username
protected string password
protected string clientid
protected boolean dispatchasync
protected boolean alwayssessionasync   true
jmsstatsimpl factorystats   new jmsstatsimpl
private idgenerator clientidgenerator
private string clientidprefix
// client policies
private activemqprefetchpolicy prefetchpolicy   new activemqprefetchpolicy
private redeliverypolicy redeliverypolicy   new redeliverypolicy
private blobtransferpolicy blobtransferpolicy   new blobtransferpolicy
private messagetransformer transformer
private boolean disabletimestampsbydefault
private boolean optimizedmessagedispatch   true
private boolean copymessageonsend   true
private boolean usecompression
private boolean objectmessageserializationdefered
private boolean useasyncsend
private boolean optimizeacknowledge
private int closetimeout   15000
private boolean useretroactiveconsumer
private boolean exclusiveconsumer
private boolean nestedmapandlistenabled   true
private boolean alwayssyncsend
private boolean watchtopicadvisories   true
private int producerwindowsize   default_producer_window_size
private long warnaboutunstartedconnectiontimeout   500l
private transportlistener transportlistener
// /////////////////////////////////////////////
//
// connectionfactory, queueconnectionfactory, topicconnectionfactory methods
//
// /////////////////////////////////////////////
public activemqconnectionfactory
this default_broker_url
public activemqconnectionfactory string brokerurl
this createuri brokerurl
public activemqconnectionfactory uri brokerurl
setbrokerurl brokerurl tostring
public activemqconnectionfactory string username  string password  uri brokerurl
setusername username
setpassword password
setbrokerurl brokerurl tostring
public activemqconnectionfactory string username  string password  string brokerurl
setusername username
setpassword password
setbrokerurl brokerurl
/**
* returns a copy of the given connection factory
*/
public activemqconnectionfactory copy
try
return  activemqconnectionfactory super clone
catch  clonenotsupportedexception e
throw new runtimeexception     e  e
/**
* @param brokerurl
* @return
* @throws urisyntaxexception
*/
private static uri createuri string brokerurl
try
return new uri brokerurl
catch  urisyntaxexception e
throw  illegalargumentexception new illegalargumentexception     brokerurl  initcause e
/**
* @return returns the connection.
*/
public connection createconnection   throws jmsexception
return createactivemqconnection
/**
* @return returns the connection.
*/
public connection createconnection string username  string password  throws jmsexception
return createactivemqconnection username  password
/**
* @return returns the queueconnection.
* @throws jmsexception
*/
public queueconnection createqueueconnection   throws jmsexception
return createactivemqconnection
/**
* @return returns the queueconnection.
*/
public queueconnection createqueueconnection string username  string password  throws jmsexception
return createactivemqconnection username  password
/**
* @return returns the topicconnection.
* @throws jmsexception
*/
public topicconnection createtopicconnection   throws jmsexception
return createactivemqconnection
/**
* @return returns the topicconnection.
*/
public topicconnection createtopicconnection string username  string password  throws jmsexception
return createactivemqconnection username  password
public statsimpl getstats
// todo
return null
// /////////////////////////////////////////////
//
// implementation methods.
//
// /////////////////////////////////////////////
protected activemqconnection createactivemqconnection   throws jmsexception
return createactivemqconnection username  password
/**
* creates a transport based on this object's connection settings. separated
* from createactivemqconnection to allow for subclasses to override.
*
* @return the newly created transport.
* @throws jmsexception if unable to create trasnport.
* @author sepandm@gmail.com
*/
protected transport createtransport   throws jmsexception
try
return transportfactory connect brokerurl  default_connection_executor
catch  exception e
throw jmsexceptionsupport create     e  e
/**
* @return returns the connection.
*/
protected activemqconnection createactivemqconnection string username  string password  throws jmsexception
if  brokerurl    null
throw new configurationexception
activemqconnection connection   null
try
transport transport   createtransport
connection   createactivemqconnection transport  factorystats
connection setusername username
connection setpassword password
configureconnection connection
transport start
if  clientid    null
connection setdefaultclientid clientid
return connection
catch  jmsexception e
// clean up!
try
connection close
catch  throwable ignore
throw e
catch  exception e
// clean up!
try
connection close
catch  throwable ignore
throw jmsexceptionsupport create     brokerurl       e  e
protected activemqconnection createactivemqconnection transport transport  jmsstatsimpl stats  throws exception
activemqconnection connection   new activemqconnection transport  getclientidgenerator    stats
return connection
protected void configureconnection activemqconnection connection
connection setprefetchpolicy getprefetchpolicy
connection setdisabletimestampsbydefault isdisabletimestampsbydefault
connection setoptimizedmessagedispatch isoptimizedmessagedispatch
connection setcopymessageonsend iscopymessageonsend
connection setusecompression isusecompression
connection setobjectmessageserializationdefered isobjectmessageserializationdefered
connection setdispatchasync isdispatchasync
connection setuseasyncsend isuseasyncsend
connection setalwayssyncsend isalwayssyncsend
connection setalwayssessionasync isalwayssessionasync
connection setoptimizeacknowledge isoptimizeacknowledge
connection setuseretroactiveconsumer isuseretroactiveconsumer
connection setredeliverypolicy getredeliverypolicy
connection settransformer gettransformer
connection setblobtransferpolicy getblobtransferpolicy   copy
connection setwatchtopicadvisories iswatchtopicadvisories
connection setproducerwindowsize getproducerwindowsize
connection setwarnaboutunstartedconnectiontimeout getwarnaboutunstartedconnectiontimeout
if  transportlistener    null
connection addtransportlistener transportlistener
// /////////////////////////////////////////////
//
// property accessors
//
// /////////////////////////////////////////////
public string getbrokerurl
return brokerurl    null ? null   brokerurl tostring
/**
* sets the <a
* href="http://activemq.apache.org/configuring-transports.html">connection
* url</a> used to connect to the activemq broker.
*/
public void setbrokerurl string brokerurl
this brokerurl   createuri brokerurl
// use all the properties prefixed with 'jms.' to set the connection
// factory
// options.
if  this brokerurl getquery      null
// it might be a standard uri or...
try
map map   urisupport parsequery this brokerurl getquery
if  buildfrommap introspectionsupport extractproperties map
this brokerurl   urisupport createremaininguri this brokerurl  map
catch  urisyntaxexception e
else
// it might be a composite uri.
try
compositedata data   urisupport parsecomposite this brokerurl
if  buildfrommap introspectionsupport extractproperties data getparameters
this brokerurl   data touri
catch  urisyntaxexception e
public string getclientid
return clientid
/**
* sets the jms clientid to use for the created connection. note that this
* can only be used by one connection at once so generally its a better idea
* to set the clientid on a connection
*/
public void setclientid string clientid
this clientid   clientid
public boolean iscopymessageonsend
return copymessageonsend
/**
* should a jms message be copied to a new jms message object as part of the
* send() method in jms. this is enabled by default to be compliant with the
* jms specification. you can disable it if you do not mutate jms messages
* after they are sent for a performance boost
*/
public void setcopymessageonsend boolean copymessageonsend
this copymessageonsend   copymessageonsend
public boolean isdisabletimestampsbydefault
return disabletimestampsbydefault
/**
* sets whether or not timestamps on messages should be disabled or not. if
* you disable them it adds a small performance boost.
*/
public void setdisabletimestampsbydefault boolean disabletimestampsbydefault
this disabletimestampsbydefault   disabletimestampsbydefault
public boolean isoptimizedmessagedispatch
return optimizedmessagedispatch
/**
* if this flag is set then an larger prefetch limit is used - only
* applicable for durable topic subscribers.
*/
public void setoptimizedmessagedispatch boolean optimizedmessagedispatch
this optimizedmessagedispatch   optimizedmessagedispatch
public string getpassword
return password
/**
* sets the jms password used for connections created from this factory
*/
public void setpassword string password
this password   password
public activemqprefetchpolicy getprefetchpolicy
return prefetchpolicy
/**
* sets the <a
* href="http://activemq.apache.org/what-is-the-prefetch-limit-for.html">prefetch
* policy</a> for consumers created by this connection.
*/
public void setprefetchpolicy activemqprefetchpolicy prefetchpolicy
this prefetchpolicy   prefetchpolicy
public boolean isuseasyncsend
return useasyncsend
public blobtransferpolicy getblobtransferpolicy
return blobtransferpolicy
/**
* sets the policy used to describe how out-of-band blobs (binary large
* objects) are transferred from producers to brokers to consumers
*/
public void setblobtransferpolicy blobtransferpolicy blobtransferpolicy
this blobtransferpolicy   blobtransferpolicy
/**
* forces the use of <a
* href="http://activemq.apache.org/async-sends.html">async sends</a> which
* adds a massive performance boost; but means that the send() method will
* return immediately whether the message has been sent or not which could
* lead to message loss.
*/
public void setuseasyncsend boolean useasyncsend
this useasyncsend   useasyncsend
public synchronized boolean iswatchtopicadvisories
return watchtopicadvisories
public synchronized void setwatchtopicadvisories boolean watchtopicadvisories
this watchtopicadvisories   watchtopicadvisories
/**
* @return true if always sync send messages
*/
public boolean isalwayssyncsend
return this alwayssyncsend
/**
* set true if always require messages to be sync sent
*
* @param alwayssyncsend
*/
public void setalwayssyncsend boolean alwayssyncsend
this alwayssyncsend   alwayssyncsend
public string getusername
return username
/**
* sets the jms username used by connections created by this factory
*/
public void setusername string username
this username   username
public boolean isuseretroactiveconsumer
return useretroactiveconsumer
/**
* sets whether or not retroactive consumers are enabled. retroactive
* consumers allow non-durable topic subscribers to receive old messages
* that were published before the non-durable subscriber started.
*/
public void setuseretroactiveconsumer boolean useretroactiveconsumer
this useretroactiveconsumer   useretroactiveconsumer
public boolean isexclusiveconsumer
return exclusiveconsumer
/**
* enables or disables whether or not queue consumers should be exclusive or
* not for example to preserve ordering when not using <a
* href="http://activemq.apache.org/message-groups.html">message groups</a>
*
* @param exclusiveconsumer
*/
public void setexclusiveconsumer boolean exclusiveconsumer
this exclusiveconsumer   exclusiveconsumer
public redeliverypolicy getredeliverypolicy
return redeliverypolicy
/**
* sets the global redelivery policy to be used when a message is delivered
* but the session is rolled back
*/
public void setredeliverypolicy redeliverypolicy redeliverypolicy
this redeliverypolicy   redeliverypolicy
public messagetransformer gettransformer
return transformer
/**
* sets the transformer used to transform messages before they are sent on
* to the jms bus or when they are received from the bus but before they are
* delivered to the jms client
*/
public void settransformer messagetransformer transformer
this transformer   transformer
public void buildfromproperties properties properties
if  properties    null
properties   new properties
string temp   properties getproperty context provider_url
if  temp    null    temp length      0
temp   properties getproperty
if  temp    null    temp length   > 0
setbrokerurl temp
map<string  object> p   new hashmap properties
buildfrommap p
public boolean buildfrommap map<string  object> properties
boolean rc   false
activemqprefetchpolicy p   new activemqprefetchpolicy
if  introspectionsupport setproperties p  properties
setprefetchpolicy p
rc   true
redeliverypolicy rp   new redeliverypolicy
if  introspectionsupport setproperties rp  properties
setredeliverypolicy rp
rc   true
blobtransferpolicy blobtransferpolicy   new blobtransferpolicy
if  introspectionsupport setproperties blobtransferpolicy  properties
setblobtransferpolicy blobtransferpolicy
rc   true
rc    introspectionsupport setproperties this  properties
return rc
public void populateproperties properties props
props setproperty    boolean tostring isdispatchasync
if  getbrokerurl      null
props setproperty context provider_url  getbrokerurl
props setproperty    getbrokerurl
if  getclientid      null
props setproperty    getclientid
introspectionsupport getproperties getprefetchpolicy    props
introspectionsupport getproperties getredeliverypolicy    props
introspectionsupport getproperties getblobtransferpolicy    props
props setproperty    boolean tostring iscopymessageonsend
props setproperty    boolean tostring isdisabletimestampsbydefault
props setproperty    boolean tostring isobjectmessageserializationdefered
props setproperty    boolean tostring isoptimizedmessagedispatch
if  getpassword      null
props setproperty    getpassword
props setproperty    boolean tostring isuseasyncsend
props setproperty    boolean tostring isusecompression
props setproperty    boolean tostring isuseretroactiveconsumer
props setproperty    boolean tostring iswatchtopicadvisories
if  getusername      null
props setproperty    getusername
props setproperty    integer tostring getclosetimeout
props setproperty    boolean tostring isalwayssessionasync
props setproperty    boolean tostring isoptimizeacknowledge
props setproperty    boolean tostring isstatsenabled
props setproperty    boolean tostring isalwayssyncsend
props setproperty    integer tostring getproducerwindowsize
public boolean isusecompression
return usecompression
/**
* enables the use of compression of the message bodies
*/
public void setusecompression boolean usecompression
this usecompression   usecompression
public boolean isobjectmessageserializationdefered
return objectmessageserializationdefered
/**
* when an object is set on an objectmessage, the jms spec requires the
* object to be serialized by that set method. enabling this flag causes the
* object to not get serialized. the object may subsequently get serialized
* if the message needs to be sent over a socket or stored to disk.
*/
public void setobjectmessageserializationdefered boolean objectmessageserializationdefered
this objectmessageserializationdefered   objectmessageserializationdefered
public boolean isdispatchasync
return dispatchasync
/**
* enables or disables the default setting of whether or not consumers have
* their messages <a
* href="http://activemq.apache.org/consumer-dispatch-async.html">dispatched
* synchronously or asynchronously by the broker</a>. for non-durable
* topics for example we typically dispatch synchronously by default to
* minimize context switches which boost performance. however sometimes its
* better to go slower to ensure that a single blocked consumer socket does
* not block delivery to other consumers.
*
* @param asyncdispatch if true then consumers created on this connection
*                will default to having their messages dispatched
*                asynchronously. the default value is false.
*/
public void setdispatchasync boolean asyncdispatch
this dispatchasync   asyncdispatch
/**
* @return returns the closetimeout.
*/
public int getclosetimeout
return closetimeout
/**
* sets the timeout before a close is considered complete. normally a
* close() on a connection waits for confirmation from the broker; this
* allows that operation to timeout to save the client hanging if there is
* no broker
*/
public void setclosetimeout int closetimeout
this closetimeout   closetimeout
/**
* @return returns the alwayssessionasync.
*/
public boolean isalwayssessionasync
return alwayssessionasync
/**
* if this flag is set then a separate thread is not used for dispatching
* messages for each session in the connection. however, a separate thread
* is always used if there is more than one session, or the session isn't in
* auto acknowledge or duplicates ok mode
*/
public void setalwayssessionasync boolean alwayssessionasync
this alwayssessionasync   alwayssessionasync
/**
* @return returns the optimizeacknowledge.
*/
public boolean isoptimizeacknowledge
return optimizeacknowledge
/**
* @param optimizeacknowledge the optimizeacknowledge to set.
*/
public void setoptimizeacknowledge boolean optimizeacknowledge
this optimizeacknowledge   optimizeacknowledge
public boolean isnestedmapandlistenabled
return nestedmapandlistenabled
/**
* enables/disables whether or not message properties and mapmessage entries
* support <a
* href="http://activemq.apache.org/structured-message-properties-and-mapmessages.html">nested
* structures</a> of map and list objects
*/
public void setnestedmapandlistenabled boolean structuredmapsenabled
this nestedmapandlistenabled   structuredmapsenabled
public string getclientidprefix
return clientidprefix
/**
* sets the prefix used by autogenerated jms client id values which are used
* if the jms client does not explicitly specify on.
*
* @param clientidprefix
*/
public void setclientidprefix string clientidprefix
this clientidprefix   clientidprefix
protected synchronized idgenerator getclientidgenerator
if  clientidgenerator    null
if  clientidprefix    null
clientidgenerator   new idgenerator clientidprefix
else
clientidgenerator   new idgenerator
return clientidgenerator
protected void setclientidgenerator idgenerator clientidgenerator
this clientidgenerator   clientidgenerator
/**
* @return the statsenabled
*/
public boolean isstatsenabled
return this factorystats isenabled
/**
* @param statsenabled the statsenabled to set
*/
public void setstatsenabled boolean statsenabled
this factorystats setenabled statsenabled
public synchronized int getproducerwindowsize
return producerwindowsize
public synchronized void setproducerwindowsize int producerwindowsize
this producerwindowsize   producerwindowsize
public long getwarnaboutunstartedconnectiontimeout
return warnaboutunstartedconnectiontimeout
/**
* enables the timeout from a connection creation to when a warning is
* generated if the connection is not properly started via
* {@link connection#start()} and a message is received by a consumer. it is
* a very common gotcha to forget to <a
* href="http://activemq.apache.org/i-am-not-receiving-any-messages-what-is-wrong.html">start
* the connection</a> so this option makes the default case to create a
* warning if the user forgets. to disable the warning just set the value to <
* 0 (say -1).
*/
public void setwarnaboutunstartedconnectiontimeout long warnaboutunstartedconnectiontimeout
this warnaboutunstartedconnectiontimeout   warnaboutunstartedconnectiontimeout
public transportlistener gettransportlistener
return transportlistener
/**
* allows a listener to be configured on the connectionfactory so that when this factory is used
* with frameworks which don't expose the connection such as spring jmstemplate, you can still register
* a transport listener.
*
* @param transportlistener sets the listener to be registered on all connections
* created by this factory
*/
public void settransportlistener transportlistener transportlistener
this transportlistener   transportlistener