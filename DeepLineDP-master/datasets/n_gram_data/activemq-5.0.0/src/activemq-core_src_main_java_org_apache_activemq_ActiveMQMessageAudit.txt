/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq
import javax jms jmsexception
import javax jms message
import org apache activemq broker region messagereference
import org apache activemq command messageid
import org apache activemq command producerid
import org apache activemq util bitarraybin
import org apache activemq util idgenerator
import org apache activemq util lrucache
/**
* provides basic audit functions for messages
*
* @version $revision: 1.1.1.1 $
*/
public class activemqmessageaudit
private static final int default_window_size   2048
private static final int maximum_producer_count   64
private int auditdepth
private int maximumnumberofproducerstotrack
private lrucache<object  bitarraybin> map
/**
* default constructor windowsize = 1024, maximumnumberofproducerstotrack =
* 128
*/
public activemqmessageaudit
this default_window_size  maximum_producer_count
/**
* construct a messageaudit
*
* @param auditdepth range of ids to track
* @param maximumnumberofproducerstotrack number of producers expected in
*                the system
*/
public activemqmessageaudit int auditdepth  final int maximumnumberofproducerstotrack
this auditdepth   auditdepth
this maximumnumberofproducerstotrack maximumnumberofproducerstotrack
this map   new lrucache<object  bitarraybin> 0  maximumnumberofproducerstotrack  0 75f  true
/**
* @return the auditdepth
*/
public int getauditdepth
return auditdepth
/**
* @param auditdepth the auditdepth to set
*/
public void setauditdepth int auditdepth
this auditdepth   auditdepth
/**
* @return the maximumnumberofproducerstotrack
*/
public int getmaximumnumberofproducerstotrack
return maximumnumberofproducerstotrack
/**
* @param maximumnumberofproducerstotrack the maximumnumberofproducerstotrack to set
*/
public void setmaximumnumberofproducerstotrack
int maximumnumberofproducerstotrack
this maximumnumberofproducerstotrack   maximumnumberofproducerstotrack
this map setmaxcachesize maximumnumberofproducerstotrack
/**
* checks if this message has beeb seen before
*
* @param message
* @return true if the message is a duplicate
* @throws jmsexception
*/
public boolean isduplicate message message  throws jmsexception
return isduplicate message getjmsmessageid
/**
* checks whether this messageid has been seen before and adds this
* messageid to the list
*
* @param id
* @return true if the message is a duplicate
*/
public synchronized boolean isduplicate string id
boolean answer   false
string seed   idgenerator getseedfromid id
if  seed    null
bitarraybin bab   map get seed
if  bab    null
bab   new bitarraybin auditdepth
map put seed  bab
long index   idgenerator getsequencefromid id
if  index >  0
answer   bab setbit index  true
return answer
/**
* checks if this message has been seen before
*
* @param message
* @return true if the message is a duplicate
*/
public boolean isduplicate final messagereference message
messageid id   message getmessageid
return isduplicate id
/**
* checks if this messageid has been seen before
*
* @param id
* @return true if the message is a duplicate
*/
public synchronized boolean isduplicate final messageid id
boolean answer   false
if  id    null
producerid pid   id getproducerid
if  pid    null
bitarraybin bab   map get pid
if  bab    null
bab   new bitarraybin auditdepth
map put pid  bab
answer   bab setbit id getproducersequenceid    true
return answer
/**
* mark this message as being received
*
* @param message
*/
public void rollback final messagereference message
messageid id   message getmessageid
rollback id
/**
* mark this message as being received
*
* @param id
*/
public synchronized void rollback final  messageid id
if  id    null
producerid pid   id getproducerid
if  pid    null
bitarraybin bab   map get pid
if  bab    null
bab setbit id getproducersequenceid    false
/**
* check the message is in order
* @param msg
* @return
* @throws jmsexception
*/
public boolean isinorder message msg  throws jmsexception
return isinorder msg getjmsmessageid
/**
* check the message id is in order
* @param id
* @return
*/
public synchronized boolean isinorder final string id
boolean answer   true
if  id    null
string seed   idgenerator getseedfromid id
if  seed    null
bitarraybin bab   map get seed
if  bab    null
long index   idgenerator getsequencefromid id
answer   bab isinorder index
return answer
/**
* check the messageid is in order
* @param message
* @return
*/
public synchronized boolean isinorder final messagereference message
return isinorder message getmessageid
/**
* check the messageid is in order
* @param id
* @return
*/
public synchronized boolean isinorder final messageid id
boolean answer   false
if  id    null
producerid pid   id getproducerid
if  pid    null
bitarraybin bab   map get pid
if  bab    null
bab   new bitarraybin auditdepth
map put pid  bab
answer   bab isinorder id getproducersequenceid
return answer