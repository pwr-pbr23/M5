/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component browse
import java util list
import java util concurrent copyonwritearraylist
import org apache camel component
import org apache camel consumer
import org apache camel exchange
import org apache camel processor
import org apache camel producer
import org apache camel service
import org apache camel impl defaultendpoint
import org apache camel impl defaultproducer
import org apache camel processor loadbalancer loadbalancer
import org apache camel processor loadbalancer loadbalancerconsumer
import org apache camel processor loadbalancer topicloadbalancer
import org apache camel spi browsableendpoint
/**
* an endpoint which maintains a {@link list} of {@link exchange} instances
* which can be useful for tooling, debugging and visualising routes.
*
* @version
*/
public class browseendpoint extends defaultendpoint implements browsableendpoint  service
private list<exchange> exchanges
private final loadbalancer loadbalancer   new topicloadbalancer
public browseendpoint
public browseendpoint string uri  component component
super uri  component
public boolean issingleton
return true
public list<exchange> getexchanges
if  exchanges    null
exchanges   createexchangelist
return exchanges
public producer createproducer   throws exception
return new defaultproducer this
public void process exchange exchange  throws exception
onexchange exchange
public consumer createconsumer processor processor  throws exception
return new loadbalancerconsumer this  processor  loadbalancer
protected list<exchange> createexchangelist
return new copyonwritearraylist<exchange>
/**
* invoked on a message exchange being sent by a producer
*
* @param exchange the exchange
* @throws exception is thrown if failed to process the exchange
*/
protected void onexchange exchange exchange  throws exception
getexchanges   add exchange
// now fire any consumers
loadbalancer process exchange
@override
protected void dostart   throws exception
exchanges   createexchangelist
super dostart
@override
protected void dostop   throws exception
if  exchanges    null
exchanges clear
exchanges   null
super dostop