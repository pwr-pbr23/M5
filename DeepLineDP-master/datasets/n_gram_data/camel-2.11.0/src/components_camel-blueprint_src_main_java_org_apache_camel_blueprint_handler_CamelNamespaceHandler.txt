/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel blueprint handler
import java lang reflect field
import java lang reflect method
import java lang reflect modifier
import java net url
import java util arrays
import java util hashset
import java util list
import java util set
import java util concurrent callable
import javax xml bind binder
import javax xml bind jaxbcontext
import javax xml bind jaxbexception
import org w3c dom document
import org w3c dom element
import org w3c dom node
import org w3c dom nodelist
import org apache aries blueprint beanprocessor
import org apache aries blueprint componentdefinitionregistry
import org apache aries blueprint componentdefinitionregistryprocessor
import org apache aries blueprint namespacehandler
import org apache aries blueprint parsercontext
import org apache aries blueprint passthroughmetadata
import org apache aries blueprint mutable mutablebeanmetadata
import org apache aries blueprint mutable mutablepassthroughmetadata
import org apache aries blueprint mutable mutablerefmetadata
import org apache aries blueprint mutable mutablereferencemetadata
import org apache camel camelcontext
import org apache camel endpointinject
import org apache camel produce
import org apache camel blueprint blueprintcamelcontext
import org apache camel blueprint camelcontextfactorybean
import org apache camel blueprint camelroutecontextfactorybean
import org apache camel builder xml namespaces
import org apache camel core xml abstractcamelcontextfactorybean
import org apache camel core xml abstractcamelfactorybean
import org apache camel impl camelpostprocessorhelper
import org apache camel impl defaultcamelcontextnamestrategy
import org apache camel model aggregatedefinition
import org apache camel model catchdefinition
import org apache camel model dataformatdefinition
import org apache camel model expressionnode
import org apache camel model expressionsubelementdefinition
import org apache camel model fromdefinition
import org apache camel model marshaldefinition
import org apache camel model onexceptiondefinition
import org apache camel model processordefinition
import org apache camel model resequencedefinition
import org apache camel model routedefinition
import org apache camel model senddefinition
import org apache camel model sortdefinition
import org apache camel model unmarshaldefinition
import org apache camel model wiretapdefinition
import org apache camel model language expressiondefinition
import org apache camel spi camelcontextnamestrategy
import org apache camel spi componentresolver
import org apache camel spi dataformatresolver
import org apache camel spi languageresolver
import org apache camel spi namespaceaware
import org apache camel util objecthelper
import org apache camel util blueprint keystoreparametersfactorybean
import org apache camel util blueprint sslcontextparametersfactorybean
import org apache camel util blueprint securerandomparametersfactorybean
import org osgi framework bundle
import org osgi service blueprint container blueprintcontainer
import org osgi service blueprint container componentdefinitionexception
import org osgi service blueprint reflect beanmetadata
import org osgi service blueprint reflect componentmetadata
import org osgi service blueprint reflect metadata
import org osgi service blueprint reflect refmetadata
import org slf4j logger
import org slf4j loggerfactory
import static org osgi service blueprint reflect servicereferencemetadata availability_mandatory
import static org osgi service blueprint reflect servicereferencemetadata availability_optional
public class camelnamespacehandler implements namespacehandler
private static final string camel_context
private static final string route_context
private static final string key_store_parameters
private static final string secure_random_parameters
private static final string ssl_context_parameters
private static final string spring_ns
private static final string blueprint_ns
private static final transient logger log   loggerfactory getlogger camelnamespacehandler class
private jaxbcontext jaxbcontext
public static void renamenamespacerecursive node node
if  node getnodetype      node element_node
document doc   node getownerdocument
if  node getnamespaceuri   equals blueprint_ns
doc renamenode node  spring_ns  node getlocalname
nodelist list   node getchildnodes
for  int i   0  i < list getlength      i
renamenamespacerecursive list item i
public url getschemalocation string namespace
return getclass   getclassloader   getresource
@suppresswarnings
public set<class> getmanagedclasses
return new hashset<class> arrays aslist blueprintcamelcontext class
public metadata parse element element  parsercontext context
log trace    element
renamenamespacerecursive element
if  element getlocalname   equals camel_context
return parsecamelcontextnode element  context
if  element getlocalname   equals route_context
return parseroutecontextnode element  context
if  element getlocalname   equals key_store_parameters
return parsekeystoreparametersnode element  context
if  element getlocalname   equals secure_random_parameters
return parsesecurerandomparametersnode element  context
if  element getlocalname   equals ssl_context_parameters
return parsesslcontextparametersnode element  context
return null
private metadata parsecamelcontextnode element element  parsercontext context
log trace    element
// find the id, generate one if needed
string contextid   element getattribute
boolean implicitid   false
// let's avoid folks having to explicitly give an id to a camel context
if  objecthelper isempty contextid
// if no explicit id was set then use a default auto generated name
camelcontextnamestrategy strategy   new defaultcamelcontextnamestrategy
contextid   strategy getname
element setattribute    contextid
implicitid   true
// now let's parse the routes with jaxb
binder<node> binder
try
binder   getjaxbcontext   createbinder
catch  jaxbexception e
throw new componentdefinitionexception     e  e
object value   parseusingjaxb element  context  binder
if    value instanceof camelcontextfactorybean
throw new componentdefinitionexception     camelcontextfactorybean class
camelcontextfactorybean ccfb    camelcontextfactorybean  value
ccfb setimplicitid implicitid
// the properties component is always used / created by the camelcontextfactorybean
// so we need to ensure that the resolver is ready to use
componentmetadata propertiescomponentresolver   getcomponentresolverreference context
mutablepassthroughmetadata factory   context createmetadata mutablepassthroughmetadata class
factory setid     contextid
factory setobject new passthroughcallable<object> value
mutablebeanmetadata factory2   context createmetadata mutablebeanmetadata class
factory2 setid     contextid
factory2 setfactorycomponent factory
factory2 setfactorymethod
factory2 setinitmethod
factory2 setdestroymethod
factory2 addproperty    createref context
factory2 addproperty    createref context
factory2 adddependson propertiescomponentresolver getid
context getcomponentdefinitionregistry   registercomponentdefinition factory2
mutablebeanmetadata ctx   context createmetadata mutablebeanmetadata class
ctx setid contextid
ctx setruntimeclass blueprintcamelcontext class
ctx setfactorycomponent factory2
ctx setfactorymethod
ctx setinitmethod
ctx setdestroymethod
// register factory beans
registerbeans context  contextid  ccfb getthreadpools
registerbeans context  contextid  ccfb getendpoints
registerbeans context  contextid  ccfb getredeliverypolicies
registerbeans context  contextid  ccfb getbeans
// register processors
mutablepassthroughmetadata beanprocessorfactory   context createmetadata mutablepassthroughmetadata class
beanprocessorfactory setid     contextid
beanprocessorfactory setobject new passthroughcallable<object> new camelinjector contextid
mutablebeanmetadata beanprocessor   context createmetadata mutablebeanmetadata class
beanprocessor setid     contextid
beanprocessor setruntimeclass camelinjector class
beanprocessor setfactorycomponent beanprocessorfactory
beanprocessor setfactorymethod
beanprocessor setprocessor true
beanprocessor addproperty    createref context
context getcomponentdefinitionregistry   registercomponentdefinition beanprocessor
mutablepassthroughmetadata regprocessorfactory   context createmetadata mutablepassthroughmetadata class
regprocessorfactory setid     contextid
regprocessorfactory setobject new passthroughcallable<object> new cameldependenciesfinder contextid  context
mutablebeanmetadata regprocessor   context createmetadata mutablebeanmetadata class
regprocessor setid     contextid
regprocessor setruntimeclass cameldependenciesfinder class
regprocessor setfactorycomponent regprocessorfactory
regprocessor setfactorymethod
regprocessor setprocessor true
regprocessor adddependson     contextid
regprocessor addproperty    createref context
context getcomponentdefinitionregistry   registercomponentdefinition regprocessor
// lets inject the namespaces into any namespace aware pojos
injectnamespaces element  binder
log trace    ctx
return ctx
protected void injectnamespaces element element  binder<node> binder
nodelist list   element getchildnodes
namespaces namespaces   null
int size   list getlength
for  int i   0  i < size  i
node child   list item i
if  child instanceof element
element childelement    element  child
object object   binder getjaxbnode child
if  object instanceof namespaceaware
namespaceaware namespaceaware    namespaceaware  object
if  namespaces    null
namespaces   new namespaces element
namespaces configure namespaceaware
injectnamespaces childelement  binder
private metadata parseroutecontextnode element element  parsercontext context
log trace    element
// now parse the routes with jaxb
binder<node> binder
try
binder   getjaxbcontext   createbinder
catch  jaxbexception e
throw new componentdefinitionexception     e  e
object value   parseusingjaxb element  context  binder
if    value instanceof camelroutecontextfactorybean
throw new componentdefinitionexception     camelroutecontextfactorybean class
camelroutecontextfactorybean rcfb    camelroutecontextfactorybean  value
string id   rcfb getid
mutablepassthroughmetadata factory   context createmetadata mutablepassthroughmetadata class
factory setid     id
factory setobject new passthroughcallable<object> rcfb
mutablebeanmetadata factory2   context createmetadata mutablebeanmetadata class
factory2 setid     id
factory2 setfactorycomponent factory
factory2 setfactorymethod
mutablebeanmetadata ctx   context createmetadata mutablebeanmetadata class
ctx setid id
ctx setruntimeclass list class
ctx setfactorycomponent factory2
ctx setfactorymethod
// lets inject the namespaces into any namespace aware pojos
injectnamespaces element  binder
log trace    element  ctx
return ctx
private metadata parsekeystoreparametersnode element element  parsercontext context
log trace    element
// now parse the key store parameters with jaxb
binder<node> binder
try
binder   getjaxbcontext   createbinder
catch  jaxbexception e
throw new componentdefinitionexception     e  e
object value   parseusingjaxb element  context  binder
if    value instanceof keystoreparametersfactorybean
throw new componentdefinitionexception     keystoreparametersfactorybean class
keystoreparametersfactorybean kspfb    keystoreparametersfactorybean  value
string id   kspfb getid
mutablepassthroughmetadata factory   context createmetadata mutablepassthroughmetadata class
factory setid     id
factory setobject new passthroughcallable<object> kspfb
mutablebeanmetadata factory2   context createmetadata mutablebeanmetadata class
factory2 setid     id
factory2 setfactorycomponent factory
factory2 setfactorymethod
factory2 setinitmethod
factory2 setdestroymethod
factory2 addproperty    createref context
mutablebeanmetadata ctx   context createmetadata mutablebeanmetadata class
ctx setid id
ctx setruntimeclass list class
ctx setfactorycomponent factory2
ctx setfactorymethod
log trace    ctx
return ctx
private metadata parsesecurerandomparametersnode element element  parsercontext context
log trace    element
// now parse the key store parameters with jaxb
binder<node> binder
try
binder   getjaxbcontext   createbinder
catch  jaxbexception e
throw new componentdefinitionexception     e  e
object value   parseusingjaxb element  context  binder
if    value instanceof securerandomparametersfactorybean
throw new componentdefinitionexception     securerandomparametersfactorybean class
securerandomparametersfactorybean srfb    securerandomparametersfactorybean  value
string id   srfb getid
mutablepassthroughmetadata factory   context createmetadata mutablepassthroughmetadata class
factory setid     id
factory setobject new passthroughcallable<object> srfb
mutablebeanmetadata factory2   context createmetadata mutablebeanmetadata class
factory2 setid     id
factory2 setfactorycomponent factory
factory2 setfactorymethod
factory2 setinitmethod
factory2 setdestroymethod
factory2 addproperty    createref context
mutablebeanmetadata ctx   context createmetadata mutablebeanmetadata class
ctx setid id
ctx setruntimeclass list class
ctx setfactorycomponent factory2
ctx setfactorymethod
log trace    ctx
return ctx
private metadata parsesslcontextparametersnode element element  parsercontext context
log trace    element
// now parse the key store parameters with jaxb
binder<node> binder
try
binder   getjaxbcontext   createbinder
catch  jaxbexception e
throw new componentdefinitionexception     e  e
object value   parseusingjaxb element  context  binder
if    value instanceof sslcontextparametersfactorybean
throw new componentdefinitionexception     sslcontextparametersfactorybean class
sslcontextparametersfactorybean scpfb    sslcontextparametersfactorybean  value
string id   scpfb getid
mutablepassthroughmetadata factory   context createmetadata mutablepassthroughmetadata class
factory setid     id
factory setobject new passthroughcallable<object> scpfb
mutablebeanmetadata factory2   context createmetadata mutablebeanmetadata class
factory2 setid     id
factory2 setfactorycomponent factory
factory2 setfactorymethod
factory2 setinitmethod
factory2 setdestroymethod
factory2 addproperty    createref context
mutablebeanmetadata ctx   context createmetadata mutablebeanmetadata class
ctx setid id
ctx setruntimeclass list class
ctx setfactorycomponent factory2
ctx setfactorymethod
log trace    ctx
return ctx
private void registerbeans parsercontext context  string contextid  list<?> beans
if  beans    null
for  object bean   beans
if  bean instanceof abstractcamelfactorybean
registerbean context  contextid   abstractcamelfactorybean<?>  bean
protected void registerbean parsercontext context  string contextid  abstractcamelfactorybean<?> fact
string id   fact getid
fact setcamelcontextid contextid
mutablepassthroughmetadata eff   context createmetadata mutablepassthroughmetadata class
eff setid     id
eff setobject new passthroughcallable<object> fact
mutablebeanmetadata ef   context createmetadata mutablebeanmetadata class
ef setid     id
ef setfactorycomponent eff
ef setfactorymethod
ef addproperty    createref context
ef setinitmethod
ef setdestroymethod
mutablebeanmetadata e   context createmetadata mutablebeanmetadata class
e setid id
e setruntimeclass fact getobjecttype
e setfactorycomponent ef
e setfactorymethod
e adddependson     contextid
context getcomponentdefinitionregistry   registercomponentdefinition e
protected blueprintcontainer getblueprintcontainer parsercontext context
passthroughmetadata ptm    passthroughmetadata  context getcomponentdefinitionregistry   getcomponentdefinition
return  blueprintcontainer  ptm getobject
public componentmetadata decorate node node  componentmetadata component  parsercontext context
return null
protected object parseusingjaxb element element  parsercontext parsercontext  binder<node> binder
try
return binder unmarshal element
catch  jaxbexception e
throw new componentdefinitionexception     e  e
public jaxbcontext getjaxbcontext   throws jaxbexception
if  jaxbcontext    null
jaxbcontext   createjaxbcontext
return jaxbcontext
protected jaxbcontext createjaxbcontext   throws jaxbexception
stringbuilder packages   new stringbuilder
for  class<?> cl   getjaxbpackages
if  packages length   > 0
packages append
packages append cl getname   substring 0  cl getname   lastindexof
return jaxbcontext newinstance packages tostring    getclass   getclassloader
protected set<class<?>> getjaxbpackages
set<class<?>> classes   new hashset<class<?>>
classes add camelcontextfactorybean class
classes add abstractcamelcontextfactorybean class
classes add org apache camel exchangepattern class
classes add org apache camel model routedefinition class
classes add org apache camel model config streamresequencerconfig class
classes add org apache camel model dataformat dataformatsdefinition class
classes add org apache camel model language expressiondefinition class
classes add org apache camel model loadbalancer roundrobinloadbalancerdefinition class
classes add sslcontextparametersfactorybean class
return classes
private refmetadata createref parsercontext context  string value
mutablerefmetadata r   context createmetadata mutablerefmetadata class
r setcomponentid value
return r
private static componentmetadata getdataformatresolverreference parsercontext context  string dataformat
componentdefinitionregistry componentdefinitionregistry   context getcomponentdefinitionregistry
componentmetadata cm   componentdefinitionregistry getcomponentdefinition     dataformat
if  cm    null
mutablereferencemetadata svc   context createmetadata mutablereferencemetadata class
svc setid     dataformat
svc setfilter     dataformat
svc setavailability componentdefinitionregistry containscomponentdefinition dataformat  ? availability_optional   availability_mandatory
try
// try to set the runtime interface (only with aries blueprint > 0.1
svc getclass   getmethod    class class  invoke svc  dataformatresolver class
catch  throwable t
// check if the bundle can see the class
try
passthroughmetadata ptm    passthroughmetadata  componentdefinitionregistry getcomponentdefinition
bundle b    bundle  ptm getobject
if  b loadclass dataformatresolver class getname       dataformatresolver class
throw new unsupportedoperationexception
svc setinterface dataformatresolver class getname
catch  throwable t2
throw new unsupportedoperationexception
componentdefinitionregistry registercomponentdefinition svc
cm   svc
return cm
private static componentmetadata getlanguageresolverreference parsercontext context  string language
componentdefinitionregistry componentdefinitionregistry   context getcomponentdefinitionregistry
componentmetadata cm   componentdefinitionregistry getcomponentdefinition     language
if  cm    null
mutablereferencemetadata svc   context createmetadata mutablereferencemetadata class
svc setid     language
svc setfilter     language
svc setavailability componentdefinitionregistry containscomponentdefinition language  ? availability_optional   availability_mandatory
try
// try to set the runtime interface (only with aries blueprint > 0.1
svc getclass   getmethod    class class  invoke svc  languageresolver class
catch  throwable t
// check if the bundle can see the class
try
passthroughmetadata ptm    passthroughmetadata  componentdefinitionregistry getcomponentdefinition
bundle b    bundle  ptm getobject
if  b loadclass languageresolver class getname       languageresolver class
throw new unsupportedoperationexception
svc setinterface languageresolver class getname
catch  throwable t2
throw new unsupportedoperationexception
componentdefinitionregistry registercomponentdefinition svc
cm   svc
return cm
private static componentmetadata getcomponentresolverreference parsercontext context  string component
componentdefinitionregistry componentdefinitionregistry   context getcomponentdefinitionregistry
componentmetadata cm   componentdefinitionregistry getcomponentdefinition     component
if  cm    null
mutablereferencemetadata svc   context createmetadata mutablereferencemetadata class
svc setid     component
svc setfilter     component
svc setavailability componentdefinitionregistry containscomponentdefinition component  ? availability_optional   availability_mandatory
try
// try to set the runtime interface (only with aries blueprint > 0.1
svc getclass   getmethod    class class  invoke svc  componentresolver class
catch  throwable t
// check if the bundle can see the class
try
passthroughmetadata ptm    passthroughmetadata  componentdefinitionregistry getcomponentdefinition
bundle b    bundle  ptm getobject
if  b loadclass componentresolver class getname       componentresolver class
throw new unsupportedoperationexception
svc setinterface componentresolver class getname
catch  throwable t2
throw new unsupportedoperationexception
componentdefinitionregistry registercomponentdefinition svc
cm   svc
return cm
public static class passthroughcallable<t> implements callable<t>
private t value
public passthroughcallable t value
this value   value
public t call   throws exception
return value
public static class camelinjector extends camelpostprocessorhelper implements beanprocessor
private final string camelcontextname
private blueprintcontainer blueprintcontainer
public camelinjector string camelcontextname
this camelcontextname   camelcontextname
public void setblueprintcontainer blueprintcontainer blueprintcontainer
this blueprintcontainer   blueprintcontainer
@override
public camelcontext getcamelcontext
if  blueprintcontainer    null
camelcontext answer    camelcontext  blueprintcontainer getcomponentinstance camelcontextname
return answer
return null
public object beforeinit object bean  string beanname  beancreator beancreator  beanmetadata beanmetadata
log trace    beanname  bean
// prefer to inject later in afterinit
return bean
/**
* a strategy method to allow implementations to perform some custom jbi
* based injection of the pojo
*
* @param bean the bean to be injected
*/
protected void injectfields final object bean  final string beanname
class<?> clazz   bean getclass
do
field fields   clazz getdeclaredfields
for  field field   fields
endpointinject endpointinject   field getannotation endpointinject class
if  endpointinject    null    matchcontext endpointinject context
injectfield field  endpointinject uri    endpointinject ref    endpointinject property    bean  beanname
produce produce   field getannotation produce class
if  produce    null    matchcontext produce context
injectfield field  produce uri    produce ref    produce property    bean  beanname
clazz   clazz getsuperclass
while  clazz    null    clazz    object class
protected void injectfield field field  string endpointuri  string endpointref  string endpointproperty  object bean  string beanname
setfield field  bean  getinjectionvalue field gettype    endpointuri  endpointref  endpointproperty  field getname    bean  beanname
protected static void setfield field field  object instance  object value
try
boolean oldaccessible   field isaccessible
boolean shouldsetaccessible    modifier ispublic field getmodifiers        oldaccessible
if  shouldsetaccessible
field setaccessible true
field set instance  value
if  shouldsetaccessible
field setaccessible oldaccessible
catch  illegalargumentexception ex
throw new unsupportedoperationexception     value getclass         field
catch  illegalaccessexception ex
throw new illegalstateexception     ex getmessage
protected void injectmethods final object bean  final string beanname
class<?> clazz   bean getclass
do
method methods   clazz getdeclaredmethods
for  method method   methods
setterinjection method  bean  beanname
consumerinjection method  bean  beanname
clazz   clazz getsuperclass
while  clazz    null    clazz    object class
protected void setterinjection method method  object bean  string beanname
endpointinject endpointinject   method getannotation endpointinject class
if  endpointinject    null    matchcontext endpointinject context
setterinjection method  bean  beanname  endpointinject uri    endpointinject ref    endpointinject property
produce produce   method getannotation produce class
if  produce    null    matchcontext produce context
setterinjection method  bean  beanname  produce uri    produce ref    produce property
protected void setterinjection method method  object bean  string beanname  string endpointuri  string endpointref  string endpointproperty
class<?> parametertypes   method getparametertypes
if  parametertypes    null
if  parametertypes length    1
log warn     method
else
string propertyname   objecthelper getpropertyname method
object value   getinjectionvalue parametertypes  endpointuri  endpointref  endpointproperty  propertyname  bean  beanname
objecthelper invokemethod method  bean  value
public object afterinit object bean  string beanname  beancreator beancreator  beanmetadata beanmetadata
log trace    beanname  bean
// we cannot inject camelcontextaware beans as the camelcontext may not be ready
injectfields bean  beanname
injectmethods bean  beanname
return bean
public void beforedestroy object bean  string beanname
public void afterdestroy object bean  string beanname
@override
protected boolean issingleton object bean  string beanname
componentmetadata meta   blueprintcontainer getcomponentmetadata beanname
if  meta    null    meta instanceof beanmetadata
string scope     beanmetadata  meta  getscope
if  scope    null
return beanmetadata scope_singleton equals scope
// fallback to super, which will assume singleton
// for beans not implementing camel's issingleton interface
return super issingleton bean  beanname
public static class cameldependenciesfinder implements componentdefinitionregistryprocessor
private final string camelcontextname
private final parsercontext context
private blueprintcontainer blueprintcontainer
public cameldependenciesfinder string camelcontextname  parsercontext context
this camelcontextname   camelcontextname
this context   context
public void setblueprintcontainer blueprintcontainer blueprintcontainer
this blueprintcontainer   blueprintcontainer
@suppresswarnings
public void process componentdefinitionregistry componentdefinitionregistry
camelcontextfactorybean ccfb    camelcontextfactorybean  blueprintcontainer getcomponentinstance     camelcontextname
camelcontext camelcontext   ccfb getcontext
set<string> components   new hashset<string>
set<string> languages   new hashset<string>
set<string> dataformats   new hashset<string>
for  routedefinition rd   camelcontext getroutedefinitions
findinputcomponents rd getinputs    components  languages  dataformats
findoutputcomponents rd getoutputs    components  languages  dataformats
// we can only add service references to resolvers, but we can't make the factory depends on those
// because the factory has already been instantiated
try
for  string component   components
getcomponentresolverreference context  component
for  string language   languages
getlanguageresolverreference context  language
for  string dataformat   dataformats
getdataformatresolverreference context  dataformat
catch  unsupportedoperationexception e
log warn
components clear
languages clear
dataformats clear
private void findinputcomponents list<fromdefinition> defs  set<string> components  set<string> languages  set<string> dataformats
if  defs    null
for  fromdefinition def   defs
finduricomponent def geturi    components
@suppresswarnings
private void findoutputcomponents list<processordefinition<?>> defs  set<string> components  set<string> languages  set<string> dataformats
if  defs    null
for  processordefinition<?> def   defs
if  def instanceof senddefinition
finduricomponent   senddefinition  def  geturi    components
if  def instanceof marshaldefinition
finddataformat   marshaldefinition  def  getdataformattype    dataformats
if  def instanceof unmarshaldefinition
finddataformat   unmarshaldefinition  def  getdataformattype    dataformats
if  def instanceof expressionnode
findlanguage   expressionnode  def  getexpression    languages
if  def instanceof resequencedefinition
findlanguage   resequencedefinition  def  getexpression    languages
if  def instanceof aggregatedefinition
findlanguage   aggregatedefinition  def  getexpression    languages
findlanguage   aggregatedefinition  def  getcorrelationexpression    languages
findlanguage   aggregatedefinition  def  getcompletionpredicate    languages
findlanguage   aggregatedefinition  def  getcompletiontimeoutexpression    languages
findlanguage   aggregatedefinition  def  getcompletionsizeexpression    languages
if  def instanceof catchdefinition
findlanguage   catchdefinition  def  gethandled    languages
if  def instanceof onexceptiondefinition
findlanguage   onexceptiondefinition  def  getretrywhile    languages
findlanguage   onexceptiondefinition  def  gethandled    languages
findlanguage   onexceptiondefinition  def  getcontinued    languages
if  def instanceof sortdefinition
findlanguage   sortdefinition  def  getexpression    languages
if  def instanceof wiretapdefinition
findlanguage   wiretapdefinition<?>  def  getnewexchangeexpression    languages
findoutputcomponents def getoutputs    components  languages  dataformats
private void findlanguage expressiondefinition expression  set<string> languages
if  expression    null
string lang   expression getlanguage
if  lang    null    lang length   > 0
languages add lang
private void findlanguage expressionsubelementdefinition expression  set<string> languages
if  expression    null
findlanguage expression getexpressiontype    languages
private void finddataformat dataformatdefinition dfd  set<string> dataformats
if  dfd    null    dfd getdataformatname      null
dataformats add dfd getdataformatname
private void finduricomponent string uri  set<string> components
if  uri    null
string splituri   objecthelper splitoncharacter uri     2
if  splituri    null
string scheme   splituri
components add scheme