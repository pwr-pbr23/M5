/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
/**
* helper methods for working with strings.
*/
public final class stringhelper
/**
* constructor of utility class should be private.
*/
private stringhelper
/**
* ensures that <code>s</code> is friendly for a url or file system.
*
* @param s string to be sanitized.
* @return sanitized version of <code>s</code>.
* @throws nullpointerexception if <code>s</code> is <code>null</code>.
*/
public static string sanitize string s
return s
replace
replace
replace
replace
replace
/**
* counts the number of times the given char is in the string
*
* @param s  the string
* @param ch the char
* @return number of times char is located in the string
*/
public static int countchar string s  char ch
if  objecthelper isempty s
return 0
int matches   0
for  int i   0  i < s length    i
char c   s charat i
if  ch    c
matches
return matches
public static string removequotes string s
if  objecthelper isempty s
return s
s   s replaceall
s   s replaceall   "
return s
public static string removeleadingandendingquotes string s
if  objecthelper isempty s
return s
if  s startswith       s endswith
return s substring 1  s length     1
if  s startswith
return s substring 1  s length     1
return s
public static boolean isquoted string s
if  objecthelper isempty s
return false
if  s startswith       s endswith
return true
if  s startswith
return true
return false
/**
* encodes the text into safe xml by replacing < > and & with xml tokens
*
* @param text  the text
* @return the encoded text
*/
public static string xmlencode string text
if  text    null
return
// must replace amp first, so we dont replace &lt; to amp later
return text replaceall       replaceall    quot  <  lt  >  gt "
/**
* determines if the string has at least one letter in upper case
* @param text the text
* @return <tt>true</tt> if at least one letter is upper case, <tt>false</tt> otherwise
*/
public static boolean hasuppercase string text
if  text    null
return false
for  int i   0  i < text length    i
char ch   text charat i
if  character isuppercase ch
return true
return false
/**
* does the expression have the language start token?
*
* @param expression the expression
* @param language the name of the language, such as simple
* @return <tt>true</tt> if the expression contains the start token, <tt>false</tt> otherwise
*/
public static boolean hasstarttoken string expression  string language
if  expression    null
return false
if  expression indexof    >  0
return true
if  language    null    expression indexof     language      >  0
return true
return false
/**
* replaces all the from tokens in the given input string.
* <p/>
* this implementation is not recursive, not does it check for tokens in the replacement string.
*
* @param input  the input string
* @param from   the from string, must <b>not</b> be <tt>null</tt> or empty
* @param to     the replacement string, must <b>not</b> be empty
* @return the replaced string, or the input string if no replacement was needed
* @throws illegalargumentexception if the input arguments is invalid
*/
public static string replaceall string input  string from  string to
if  objecthelper isempty input
return input
if  objecthelper isempty from
throw new illegalargumentexception
if  to    null
// to can be empty, so only check for null
throw new illegalargumentexception
// fast check if there is any from at all
if   input contains from
return input
final int len   from length
final int max   input length
stringbuilder sb   new stringbuilder max
for  int i   0  i < max
if  i   len <  max
string token   input substring i  i   len
if  from equals token
sb append to
// fast forward
i   i   len
continue
// append single char
sb append input charat i
// forward to next
i
return sb tostring