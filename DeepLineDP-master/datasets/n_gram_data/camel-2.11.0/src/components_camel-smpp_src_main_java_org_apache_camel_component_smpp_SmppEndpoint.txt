/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component smpp
import org apache camel component
import org apache camel consumer
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel processor
import org apache camel producer
import org apache camel impl defaultendpoint
import org jsmpp bean alertnotification
import org jsmpp bean datasm
import org jsmpp bean deliversm
/**
* a smpp endpoint
*
* @version
*/
public class smppendpoint extends defaultendpoint
private smppbinding binding
private smppconfiguration configuration
public smppendpoint string endpointuri  component component  smppconfiguration configuration
super endpointuri  component
this configuration   configuration
public boolean issingleton
return true
@override
protected string createendpointuri
return getconnectionstring
@override
public boolean islenientproperties
return true
public consumer createconsumer processor processor  throws exception
return new smppconsumer this  configuration  processor
public producer createproducer   throws exception
return new smppproducer this  configuration
/**
* create a new exchange for communicating with this endpoint from a smsc
*
* @param alertnotification the received message from the smsc
* @return a new exchange
*/
public exchange createonacceptalertnotificationexchange alertnotification alertnotification
return createonacceptalertnotificationexchange getexchangepattern    alertnotification
/**
* create a new exchange for communicating with this endpoint from a smsc
* with the specified {@link exchangepattern} such as whether its going
* to be an {@link exchangepattern#inonly} or {@link exchangepattern#inout} exchange
*
* @param exchangepattern the message exchange pattern for the exchange
* @param alertnotification the received message from the smsc
* @return a new exchange
*/
public exchange createonacceptalertnotificationexchange exchangepattern exchangepattern
alertnotification alertnotification
exchange exchange   createexchange exchangepattern
exchange setproperty exchange binding  getbinding
exchange setin getbinding   createsmppmessage alertnotification
return exchange
/**
* create a new exchange for communicating with this endpoint from a smsc
*
* @param deliversm the received message from the smsc
* @return a new exchange
*/
public exchange createonacceptdeliversmexchange deliversm deliversm  throws exception
return createonacceptdeliversmexchange getexchangepattern    deliversm
/**
* create a new exchange for communicating with this endpoint from a smsc
* with the specified {@link exchangepattern} such as whether its going
* to be an {@link exchangepattern#inonly} or {@link exchangepattern#inout} exchange
*
* @param exchangepattern the message exchange pattern for the exchange
* @param deliversm the received message from the smsc
* @return a new exchange
*/
public exchange createonacceptdeliversmexchange exchangepattern exchangepattern
deliversm deliversm  throws exception
exchange exchange   createexchange exchangepattern
exchange setproperty exchange binding  getbinding
exchange setin getbinding   createsmppmessage deliversm
return exchange
/**
* create a new exchange for communicating with this endpoint from a smsc
*
* @param datasm the received message from the smsc
* @param smppmessageid the smpp message id which will be used in the response
* @return a new exchange
*/
public exchange createonacceptdatasm datasm datasm  string smppmessageid
return createonacceptdatasm getexchangepattern    datasm  smppmessageid
/**
* create a new exchange for communicating with this endpoint from a smsc
* with the specified {@link exchangepattern} such as whether its going
* to be an {@link exchangepattern#inonly} or {@link exchangepattern#inout} exchange
*
* @param exchangepattern the message exchange pattern for the exchange
* @param datasm the received message from the smsc
* @param smppmessageid the smpp message id which will be used in the response
* @return a new exchange
*/
public exchange createonacceptdatasm exchangepattern exchangepattern  datasm datasm  string smppmessageid
exchange exchange   createexchange exchangepattern
exchange setproperty exchange binding  getbinding
exchange setin getbinding   createsmppmessage datasm  smppmessageid
return exchange
/**
* returns the connection string for the current connection which has the form:
* smpp://<user>@<host>:<port>
*
* @return the connection string
*/
public string getconnectionstring
return  configuration getusingssl   ?
getconfiguration   getsystemid      null ? getconfiguration   getsystemid
getconfiguration   gethost
getconfiguration   getport
/**
* returns the smpp configuration
*
* @return the configuration
*/
public smppconfiguration getconfiguration
return configuration
public smppbinding getbinding
if  binding    null
binding   new smppbinding getconfiguration
return binding
public void setbinding smppbinding binding
this binding   binding