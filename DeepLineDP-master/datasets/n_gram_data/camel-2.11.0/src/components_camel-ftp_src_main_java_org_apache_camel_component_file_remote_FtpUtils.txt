/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file remote
import java io file
import java util iterator
import java util stack
import org apache camel util fileutil
/**
* various ftp utils.
*/
public final class ftputils
private ftputils
/**
* compacts a path by stacking it and reducing <tt>..</tt>,
* and uses os specific file separators (eg {@link java.io.file#separator}).
* <p/>
* <b>important: </b> this implementation works for the camel-ftp component
* for various ftp clients and ftp servers using different platforms and whatnot.
* this implementation has been working for many camel releases, and is included here
* to restore patch compatibility with the camel releases.
*/
public static string compactpath string path
if  path    null
return null
// only normalize if contains a path separator
if  path indexof file separator      1
return path
// preserve ending slash if given in input path
boolean endswithslash   path endswith       path endswith
// preserve starting slash if given in input path
boolean startswithslash   path startswith       path startswith
stack<string> stack   new stack<string>
string separatorregex   file separator
if  fileutil iswindows
separatorregex
string parts   path split separatorregex
for  string part   parts
if  part equals        stack isempty         equals stack peek
// only pop if there is a previous path, which is not a ".." path either
stack pop
else if  part equals       part isempty
// do nothing because we don't want a path like foo/./bar or foo//bar
else
stack push part
// build path based on stack
stringbuilder sb   new stringbuilder
if  startswithslash
sb append file separator
for  iterator<string> it   stack iterator    it hasnext
sb append it next
if  it hasnext
sb append file separator
if  endswithslash
sb append file separator
// there has been problems with double slashes,
// so avoid this by removing any 2nd slash
if  sb length   >  2
boolean firstslash   sb charat 0          sb charat 0
boolean secondslash   sb charat 1          sb charat 1
if  firstslash    secondslash
// remove 2nd clash
sb   sb replace 1  2
return sb tostring