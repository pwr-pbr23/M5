/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component sjms
import org apache camel component
import org apache camel consumer
import org apache camel exchangepattern
import org apache camel multipleconsumerssupport
import org apache camel processor
import org apache camel producer
import org apache camel component sjms jms connectionresource
import org apache camel component sjms jms keyformatstrategy
import org apache camel component sjms jms sessionacknowledgementtype
import org apache camel component sjms jms sessionpool
import org apache camel component sjms producer inonlyproducer
import org apache camel component sjms producer inoutproducer
import org apache camel impl defaultendpoint
import org apache camel spi headerfilterstrategy
import org slf4j logger
import org slf4j loggerfactory
/**
* a jms endpoint
*/
public class sjmsendpoint extends defaultendpoint implements multipleconsumerssupport
protected final transient logger logger   loggerfactory getlogger getclass
private sessionpool sessions
private boolean synchronous   true
private boolean transacted
private string namedreplyto
private sessionacknowledgementtype acknowledgementmode   sessionacknowledgementtype auto_acknowledge
private boolean topic
private int sessioncount   1
private int producercount   1
private int consumercount   1
private long ttl    1
private boolean persistent   true
private string durablesubscriptionid
private long responsetimeout   5000
private string messageselector
private int transactionbatchcount    1
private long transactionbatchtimeout   5000
private transactioncommitstrategy transactioncommitstrategy
public sjmsendpoint
public sjmsendpoint string uri  component component
super uri  component
if  getendpointuri   indexof    >  1
topic   false
else if  getendpointuri   indexof    >  1
topic   true
else
throw new illegalargumentexception     uri
@override
public sjmscomponent getcomponent
return  sjmscomponent  super getcomponent
@override
protected void dostart   throws exception
super dostart
//
// todo since we only need a session pool for one use case, find a
// better way
//
// we only create a session pool when we are not transacted.
// transacted listeners or producers need to be paired with the
// session that created them.
if   istransacted      getexchangepattern   equals exchangepattern inonly
sessions   new sessionpool getsessioncount    getconnectionresource
// todo fix the string hack
sessions setacknowledgemode sessionacknowledgementtype valueof getacknowledgementmode
getsessions   fillpool
@override
protected void dostop   throws exception
if  getsessions      null
getsessions   drainpool
super dostop
@override
public producer createproducer   throws exception
sjmsproducer producer   null
if  getexchangepattern   equals exchangepattern inonly
producer   new inonlyproducer this
else
producer   new inoutproducer this
return producer
@override
public consumer createconsumer processor processor  throws exception
return new sjmsconsumer this  processor
@override
public boolean ismultipleconsumerssupported
return true
@override
public boolean issingleton
return true
public string getdestinationname
string answer   getendpointuri   substring getendpointuri   lastindexof      1
if  answer indexof    >  1
answer   answer substring 0  answer lastindexof
return answer
public connectionresource getconnectionresource
return getcomponent   getconnectionresource
public headerfilterstrategy getsjmsheaderfilterstrategy
return getcomponent   getheaderfilterstrategy
public keyformatstrategy getjmskeyformatstrategy
return getcomponent   getkeyformatstrategy
/**
* returns a sessionpool if available.
*
* @return the sessions
*/
public sessionpool getsessions
return sessions
/**
* sessionpool used by endpoints that do not require a dedicated session per
* consumer or producer.
*
* @param sessions default null
*/
public void setsessions sessionpool sessions
this sessions   sessions
/**
* use to determine whether or not to process exchanges synchronously.
*
* @return true if endoint is synchronous, otherwise false
*/
public boolean issynchronous
return synchronous
/**
* flag can be set to enable/disable synchronous exchange processing.
*
* @param synchronous true to process synchronously, default is true
*/
public void setsynchronous boolean synchronous
this synchronous   synchronous
/**
* returns the configured acknowledgementmode.
*
* @return the acknowledgementmode
*/
public sessionacknowledgementtype getacknowledgementmode
return acknowledgementmode
/**
* sets the acknowledgementmode configured on this endpoint.
*
* @param acknowledgementmode default is
*            sessionacknowledgementtype.auto_acknowledge
*/
public void setacknowledgementmode sessionacknowledgementtype acknowledgementmode
this acknowledgementmode   acknowledgementmode
/**
* flag set by the endpoint used by consumers and producers to determine if
* the endpoint is a jms topic.
*
* @return the topic true if endpoint is a jms topic, default is false
*/
public boolean istopic
return topic
/**
* returns the number of session instances expected on this endpoint.
*
* @return the sessioncount
*/
public int getsessioncount
return sessioncount
/**
* sets the number of session instances used for this endpoint. value is
* ignored for endpoints that require a dedicated session such as a
* transacted or inout endpoint.
*
* @param sessioncount the number of session instances, default is 1
*/
public void setsessioncount int sessioncount
this sessioncount   sessioncount
/**
* returns the number of consumer listeners for this endpoint.
*
* @return the producercount
*/
public int getproducercount
return producercount
/**
* sets the number of producers used for this endpoint.
*
* @param producercount the number of producers for this endpoint, default
*            is 1
*/
public void setproducercount int producercount
this producercount   producercount
/**
* returns the number of consumer listeners for this endpoint.
*
* @return the consumercount
*/
public int getconsumercount
return consumercount
/**
* sets the number of consumer listeners used for this endpoint.
*
* @param consumercount the number of consumers for this endpoint, default
*            is 1
*/
public void setconsumercount int consumercount
this consumercount   consumercount
/**
* returns the time to live set on this endpoint.
*
* @return the ttl
*/
public long getttl
return ttl
/**
* flag used to adjust the time to live value of produced messages.
*
* @param ttl a new ttl, default is -1 (disabled)
*/
public void setttl long ttl
this ttl   ttl
/**
* use to determine if the enpoint has message persistence enabled or
* disabled.
*
* @return true if persistent, otherwise false
*/
public boolean ispersistent
return persistent
/**
* flag used to enable/disable message persistence.
*
* @param persistent true if persistent, default is true
*/
public void setpersistent boolean persistent
this persistent   persistent
/**
* gets the durable subscription id.
*
* @return the durablesubscriptionid
*/
public string getdurablesubscriptionid
return durablesubscriptionid
/**
* sets the durable subscription id required for durable topics.
*
* @param durablesubscriptionid durable subscription id or null
*/
public void setdurablesubscriptionid string durablesubscriptionid
this durablesubscriptionid   durablesubscriptionid
/**
* returns the inout response timeout.
*
* @return the responsetimeout
*/
public long getresponsetimeout
return responsetimeout
/**
* sets the amount of time we should wait before timing out a inout
* response.
*
* @param responsetimeout response timeout
*/
public void setresponsetimeout long responsetimeout
this responsetimeout   responsetimeout
/**
* returns the jms message selector syntax used to refine the messages being
* consumed.
*
* @return the messageselector
*/
public string getmessageselector
return messageselector
/**
* sets the jms message selector syntax.
*
* @param messageselector message selector syntax or null
*/
public void setmessageselector string messageselector
this messageselector   messageselector
/**
* if transacted, returns the nubmer of messages to be processed before
* committing the transaction.
*
* @return the transactionbatchcount
*/
public int gettransactionbatchcount
return transactionbatchcount
/**
* if transacted sets the number of messages to process before committing a
* transaction.
*
* @param transactionbatchcount number of messages to process before
*            committing, default is 1
*/
public void settransactionbatchcount int transactionbatchcount
this transactionbatchcount   transactionbatchcount
/**
* returns the timeout value for batch transactions.
*
* @return long
*/
public long gettransactionbatchtimeout
return transactionbatchtimeout
/**
* sets timeout value for batch transactions.
*
* @param transactionbatchtimeout
*/
public void settransactionbatchtimeout long transactionbatchtimeout
if  transactionbatchtimeout >  1000
this transactionbatchtimeout   transactionbatchtimeout
/**
* gets the commit strategy.
*
* @return the transactioncommitstrategy
*/
public transactioncommitstrategy gettransactioncommitstrategy
return transactioncommitstrategy
/**
* sets the commit strategy.
*
* @param transactioncommitstrategy commit strategy to use when processing
*            transacted messages
*/
public void settransactioncommitstrategy transactioncommitstrategy transactioncommitstrategy
this transactioncommitstrategy   transactioncommitstrategy
/**
* use to determine if transactions are enabled or disabled.
*
* @return true if transacted, otherwise false
*/
public boolean istransacted
return transacted
/**
* enable/disable flag for transactions
*
* @param transacted true if transacted, otherwise false
*/
public void settransacted boolean transacted
if  transacted
setacknowledgementmode sessionacknowledgementtype session_transacted
this transacted   transacted
/**
* returns the reply to destination name used for inout producer endpoints.
*
* @return the namedreplyto
*/
public string getnamedreplyto
return namedreplyto
/**
* sets the reply to destination name used for inout producer endpoints.
*
* @param the namedreplyto the jms reply to destination name
*/
public void setnamedreplyto string namedreplyto
this namedreplyto   namedreplyto
this setexchangepattern exchangepattern inout