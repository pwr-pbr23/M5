/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util arraylist
import java util hashmap
import java util iterator
import java util linkedhashset
import java util list
import java util map
import java util set
import java util concurrent executorservice
import java util concurrent scheduledexecutorservice
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import org apache camel camelcontext
import org apache camel namednode
import org apache camel threadpoolrejectedpolicy
import org apache camel model optionalidentifieddefinition
import org apache camel model processordefinition
import org apache camel model processordefinitionhelper
import org apache camel model routedefinition
import org apache camel spi executorservicemanager
import org apache camel spi lifecyclestrategy
import org apache camel spi threadpoolfactory
import org apache camel spi threadpoolprofile
import org apache camel support servicesupport
import org apache camel util objecthelper
import org apache camel util stopwatch
import org apache camel util timeutils
import org apache camel util urisupport
import org apache camel util concurrent camelthreadfactory
import org apache camel util concurrent sizedscheduledexecutorservice
import org apache camel util concurrent threadhelper
import org slf4j logger
import org slf4j loggerfactory
/**
* @version
*/
public class defaultexecutorservicemanager extends servicesupport implements executorservicemanager
private static final logger log   loggerfactory getlogger defaultexecutorservicemanager class
private final camelcontext camelcontext
private threadpoolfactory threadpoolfactory   new defaultthreadpoolfactory
private final list<executorservice> executorservices   new arraylist<executorservice>
private string threadnamepattern
private long shutdownawaittermination   10000
private string defaultthreadpoolprofileid
private final map<string  threadpoolprofile> threadpoolprofiles   new hashmap<string  threadpoolprofile>
private threadpoolprofile defaultprofile
public defaultexecutorservicemanager camelcontext camelcontext
this camelcontext   camelcontext
defaultprofile   new threadpoolprofile defaultthreadpoolprofileid
defaultprofile setdefaultprofile true
defaultprofile setpoolsize 10
defaultprofile setmaxpoolsize 20
defaultprofile setkeepalivetime 60l
defaultprofile settimeunit timeunit seconds
defaultprofile setmaxqueuesize 1000
defaultprofile setrejectedpolicy threadpoolrejectedpolicy callerruns
registerthreadpoolprofile defaultprofile
@override
public threadpoolfactory getthreadpoolfactory
return threadpoolfactory
@override
public void setthreadpoolfactory threadpoolfactory threadpoolfactory
this threadpoolfactory   threadpoolfactory
@override
public void registerthreadpoolprofile threadpoolprofile profile
objecthelper notnull profile
objecthelper notempty profile getid       profile
threadpoolprofiles put profile getid    profile
@override
public threadpoolprofile getthreadpoolprofile string id
return threadpoolprofiles get id
@override
public threadpoolprofile getdefaultthreadpoolprofile
return getthreadpoolprofile defaultthreadpoolprofileid
@override
public void setdefaultthreadpoolprofile threadpoolprofile defaultthreadpoolprofile
threadpoolprofiles remove defaultthreadpoolprofileid
defaultthreadpoolprofile adddefaults defaultprofile
log info     defaultthreadpoolprofile
this defaultthreadpoolprofileid   defaultthreadpoolprofile getid
defaultthreadpoolprofile setdefaultprofile true
registerthreadpoolprofile defaultthreadpoolprofile
@override
public string getthreadnamepattern
return threadnamepattern
@override
public void setthreadnamepattern string threadnamepattern
// must set camel id here in the pattern and let the other placeholders be resolved on demand
string name   threadnamepattern replacefirst    this camelcontext getname
this threadnamepattern   name
@override
public long getshutdownawaittermination
return shutdownawaittermination
@override
public void setshutdownawaittermination long shutdownawaittermination
this shutdownawaittermination   shutdownawaittermination
@override
public string resolvethreadname string name
return threadhelper resolvethreadname threadnamepattern  name
@override
public thread newthread string name  runnable runnable
threadfactory factory   createthreadfactory name  true
return factory newthread runnable
@override
public executorservice newdefaultthreadpool object source  string name
return newthreadpool source  name  getdefaultthreadpoolprofile
@override
public scheduledexecutorservice newdefaultscheduledthreadpool object source  string name
return newscheduledthreadpool source  name  getdefaultthreadpoolprofile
@override
public executorservice newthreadpool object source  string name  string profileid
threadpoolprofile profile   getthreadpoolprofile profileid
if  profile    null
return newthreadpool source  name  profile
else
// no profile with that id
return null
@override
public executorservice newthreadpool object source  string name  threadpoolprofile profile
string sanitizedname   urisupport sanitizeuri name
objecthelper notnull profile
threadpoolprofile defaultprofile   getdefaultthreadpoolprofile
profile adddefaults defaultprofile
threadfactory threadfactory   createthreadfactory sanitizedname  true
executorservice executorservice   threadpoolfactory newthreadpool profile  threadfactory
onthreadpoolcreated executorservice  source  profile getid
if  log isdebugenabled
log debug    new object source  sanitizedname  executorservice
return executorservice
@override
public executorservice newthreadpool object source  string name  int poolsize  int maxpoolsize
threadpoolprofile profile   new threadpoolprofile name
profile setpoolsize poolsize
profile setmaxpoolsize maxpoolsize
return  newthreadpool source  name  profile
@override
public executorservice newsinglethreadexecutor object source  string name
return newfixedthreadpool source  name  1
@override
public executorservice newcachedthreadpool object source  string name
string sanitizedname   urisupport sanitizeuri name
executorservice answer   threadpoolfactory newcachedthreadpool createthreadfactory sanitizedname  true
onthreadpoolcreated answer  source  null
if  log isdebugenabled
log debug    new object source  sanitizedname  answer
return answer
@override
public executorservice newfixedthreadpool object source  string name  int poolsize
threadpoolprofile profile   new threadpoolprofile name
profile setpoolsize poolsize
profile setmaxpoolsize poolsize
profile setkeepalivetime 0l
return newthreadpool source  name  profile
@override
public scheduledexecutorservice newsinglethreadscheduledexecutor object source  string name
return newscheduledthreadpool source  name  1
@override
public scheduledexecutorservice newscheduledthreadpool object source  string name  threadpoolprofile profile
string sanitizedname   urisupport sanitizeuri name
profile adddefaults getdefaultthreadpoolprofile
scheduledexecutorservice answer   threadpoolfactory newscheduledthreadpool profile  createthreadfactory sanitizedname  true
onthreadpoolcreated answer  source  null
if  log isdebugenabled
log debug    new object source  sanitizedname  answer
return answer
@override
public scheduledexecutorservice newscheduledthreadpool object source  string name  string profileid
threadpoolprofile profile   getthreadpoolprofile profileid
if  profile    null
return newscheduledthreadpool source  name  profile
else
// no profile with that id
return null
@override
public scheduledexecutorservice newscheduledthreadpool object source  string name  int poolsize
threadpoolprofile profile   new threadpoolprofile name
profile setpoolsize poolsize
return newscheduledthreadpool source  name  profile
@override
public void shutdown executorservice executorservice
doshutdown executorservice  0  false
@override
public void shutdowngraceful executorservice executorservice
doshutdown executorservice  getshutdownawaittermination    false
@override
public void shutdowngraceful executorservice executorservice  long shutdownawaittermination
doshutdown executorservice  shutdownawaittermination  false
private boolean doshutdown executorservice executorservice  long shutdownawaittermination  boolean failsafe
if  executorservice    null
return false
boolean warned   false
// shutting down a thread pool is a 2 step process. first we try graceful, and if that fails, then we go more aggressively
// and try shutting down again. in both cases we wait at most the given shutdown timeout value given
// (total wait could then be 2 x shutdownawaittermination, but when we shutdown the 2nd time we are aggressive and thus
// we ought to shutdown much faster)
if   executorservice isshutdown
stopwatch watch   new stopwatch
log trace    executorservice  shutdownawaittermination
executorservice shutdown
if  shutdownawaittermination > 0
try
if   awaittermination executorservice  shutdownawaittermination
warned   true
log warn    executorservice
executorservice shutdownnow
// we are now shutting down aggressively, so wait to see if we can completely shutdown or not
if   awaittermination executorservice  shutdownawaittermination
log warn    executorservice
catch  interruptedexception e
warned   true
log warn    executorservice
// we were interrupted during shutdown, so force shutdown
executorservice shutdownnow
// if we logged at warn level, then report at info level when we are complete so the end user can see this in the log
if  warned
log info
new object executorservice  executorservice isshutdown    executorservice isterminated    timeutils printduration watch taken
else if  log isdebugenabled
log debug
new object executorservice  executorservice isshutdown    executorservice isterminated    timeutils printduration watch taken
// let lifecycle strategy be notified as well which can let it be managed in jmx as well
threadpoolexecutor threadpool   null
if  executorservice instanceof threadpoolexecutor
threadpool    threadpoolexecutor  executorservice
else if  executorservice instanceof sizedscheduledexecutorservice
threadpool     sizedscheduledexecutorservice  executorservice  getscheduledthreadpoolexecutor
if  threadpool    null
for  lifecyclestrategy lifecycle   camelcontext getlifecyclestrategies
lifecycle onthreadpoolremove camelcontext  threadpool
// remove reference as its shutdown (do not remove if fail-safe)
if   failsafe
executorservices remove executorservice
return warned
@override
public list<runnable> shutdownnow executorservice executorservice
return doshutdownnow executorservice  false
private list<runnable> doshutdownnow executorservice executorservice  boolean failsafe
objecthelper notnull executorservice
list<runnable> answer   null
if   executorservice isshutdown
if  failsafe
// log as warn, as we shutdown as fail-safe, so end user should see more details in the log.
log warn    executorservice
else
log debug    executorservice
answer   executorservice shutdownnow
if  log istraceenabled
log trace
new object executorservice  executorservice isshutdown    executorservice isterminated
// let lifecycle strategy be notified as well which can let it be managed in jmx as well
threadpoolexecutor threadpool   null
if  executorservice instanceof threadpoolexecutor
threadpool    threadpoolexecutor  executorservice
else if  executorservice instanceof sizedscheduledexecutorservice
threadpool     sizedscheduledexecutorservice  executorservice  getscheduledthreadpoolexecutor
if  threadpool    null
for  lifecyclestrategy lifecycle   camelcontext getlifecyclestrategies
lifecycle onthreadpoolremove camelcontext  threadpool
// remove reference as its shutdown (do not remove if fail-safe)
if   failsafe
executorservices remove executorservice
return answer
@override
public boolean awaittermination executorservice executorservice  long shutdownawaittermination  throws interruptedexception
// log progress every 2nd second so end user is aware of we are shutting down
stopwatch watch   new stopwatch
long interval   math min 2000  shutdownawaittermination
boolean done   false
while   done    interval > 0
if  executorservice awaittermination interval  timeunit milliseconds
done   true
else
log info    timeutils printduration watch taken     executorservice
// recalculate interval
interval   math min 2000  shutdownawaittermination   watch taken
return done
/**
* strategy callback when a new {@link java.util.concurrent.executorservice} have been created.
*
* @param executorservice the created {@link java.util.concurrent.executorservice}
*/
protected void onnewexecutorservice executorservice executorservice
// noop
@override
protected void dostart   throws exception
if  threadnamepattern    null
// set default name pattern which includes the camel context name
threadnamepattern       camelcontext getname
@override
protected void dostop   throws exception
// noop
@override
protected void doshutdown   throws exception
// shutdown all remainder executor services by looping and doing this aggressively
// as by normal all threads pool should have been shutdown using proper lifecycle
// by their eips, components etc. this is acting as a fail-safe during shutdown
// of camelcontext itself.
set<executorservice> forced   new linkedhashset<executorservice>
if   executorservices isempty
// at first give a bit of time to shutdown nicely as the thread pool is most likely in the process of being shutdown also
log debug    executorservices size
for  executorservice executorservice   executorservices
try
boolean warned   doshutdown executorservice  getshutdownawaittermination    true
// remember the thread pools that was forced to shutdown (eg warned)
if  warned
forced add executorservice
catch  throwable e
// only log if something goes wrong as we want to shutdown them all
log warn
executorservice      e
// log the thread pools which was forced to shutdown so it may help the user to identify a problem of his
if   forced isempty
log warn    forced size
for  executorservice executorservice   forced
log warn    executorservice
forced clear
// clear list
executorservices clear
// do not clear the default profile as we could potential be restarted
iterator<threadpoolprofile> it   threadpoolprofiles values   iterator
while  it hasnext
threadpoolprofile profile   it next
if   profile isdefaultprofile
it remove
/**
* invoked when a new thread pool is created.
* this implementation will invoke the {@link lifecyclestrategy#onthreadpooladd(org.apache.camel.camelcontext,
* java.util.concurrent.threadpoolexecutor, string, string, string, string) lifecyclestrategy.onthreadpooladd} method,
* which for example will enlist the thread pool in jmx management.
*
* @param executorservice the thread pool
* @param source          the source to use the thread pool
* @param threadpoolprofileid profile id, if the thread pool was created from a thread pool profile
*/
private void onthreadpoolcreated executorservice executorservice  object source  string threadpoolprofileid
// add to internal list of thread pools
executorservices add executorservice
string id
string sourceid   null
string routeid   null
// extract id from source
if  source instanceof namednode
id     optionalidentifieddefinition<?>  source  idorcreate this camelcontext getnodeidfactory
// and let source be the short name of the pattern
sourceid     namednode  source  getshortname
else if  source instanceof string
id    string  source
else if  source    null
// fallback and use the simple class name with hashcode for the id so its unique for this given source
id   source getclass   getsimplename         objecthelper getidentityhashcode source
else
// no source, so fallback and use the simple class name from thread pool and its hashcode identity so its unique
id   executorservice getclass   getsimplename         objecthelper getidentityhashcode executorservice
// id is mandatory
objecthelper notempty id      executorservice
// extract route id if possible
if  source instanceof processordefinition
routedefinition route   processordefinitionhelper getroute  processordefinition<?>  source
if  route    null
routeid   route idorcreate this camelcontext getnodeidfactory
// let lifecycle strategy be notified as well which can let it be managed in jmx as well
threadpoolexecutor threadpool   null
if  executorservice instanceof threadpoolexecutor
threadpool    threadpoolexecutor  executorservice
else if  executorservice instanceof sizedscheduledexecutorservice
threadpool     sizedscheduledexecutorservice  executorservice  getscheduledthreadpoolexecutor
if  threadpool    null
for  lifecyclestrategy lifecycle   camelcontext getlifecyclestrategies
lifecycle onthreadpooladd camelcontext  threadpool  id  sourceid  routeid  threadpoolprofileid
// now call strategy to allow custom logic
onnewexecutorservice executorservice
private threadfactory createthreadfactory string name  boolean isdaemon
threadfactory threadfactory   new camelthreadfactory threadnamepattern  name  isdaemon
return threadfactory