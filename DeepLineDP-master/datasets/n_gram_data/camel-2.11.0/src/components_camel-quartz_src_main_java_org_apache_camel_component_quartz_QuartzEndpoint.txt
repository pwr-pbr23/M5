/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component quartz
import java util date
import org apache camel camelexchangeexception
import org apache camel exchange
import org apache camel processor
import org apache camel producer
import org apache camel shutdownableservice
import org apache camel impl defaultendpoint
import org apache camel processor loadbalancer loadbalancer
import org apache camel processor loadbalancer roundrobinloadbalancer
import org apache camel support servicesupport
import org apache camel util objecthelper
import org apache camel util servicehelper
import org quartz jobdetail
import org quartz jobexecutioncontext
import org quartz jobexecutionexception
import org quartz schedulerexception
import org quartz trigger
import org slf4j logger
import org slf4j loggerfactory
/**
* a <a href="http://activemq.apache.org/quartz.html">quartz endpoint</a>
*
* @version
*/
public class quartzendpoint extends defaultendpoint implements shutdownableservice
private static final transient logger log   loggerfactory getlogger quartzendpoint class
private loadbalancer loadbalancer
private trigger trigger
private jobdetail jobdetail   new jobdetail
private volatile boolean started
private volatile boolean stateful
public quartzendpoint final string endpointuri  final quartzcomponent component
super endpointuri  component
getjobdetail   setname     getid
public void addtrigger final trigger trigger  final jobdetail detail  throws schedulerexception
// lets default the trigger name to the job name
if  trigger getname      null
trigger setname detail getname
// lets default the trigger group to the job group
if  trigger getgroup      null
trigger setgroup detail getgroup
// default start time to now if not specified
if  trigger getstarttime      null
trigger setstarttime new date
detail getjobdatamap   put quartzconstants quartz_endpoint_uri  getendpointuri
// must use management name as it should be unique in the same jvm
detail getjobdatamap   put quartzconstants quartz_camel_context_name  getcamelcontext   getmanagementname
if  detail getjobclass      null
detail setjobclass isstateful   ? statefulcameljob class   cameljob class
if  detail getname      null
detail setname getjobname
getcomponent   addjob detail  trigger
public void pausetrigger final trigger trigger  throws schedulerexception
getcomponent   pausejob trigger
public void deletetrigger final trigger trigger  throws schedulerexception
getcomponent   deletejob trigger getname    trigger getgroup
/**
* this method is invoked when a quartz job is fired.
*
* @param jobexecutioncontext the quartz job context
*/
public void onjobexecute final jobexecutioncontext jobexecutioncontext  throws jobexecutionexception
boolean run   true
loadbalancer balancer   getloadbalancer
if  balancer instanceof servicesupport
run     servicesupport  balancer  isrunallowed
if   run
// quartz scheduler could potential trigger during a route has been shutdown
log warn     jobexecutioncontext       balancer
return
log debug    jobexecutioncontext
exchange exchange   createexchange jobexecutioncontext
try
balancer process exchange
if  exchange getexception      null
// propagate the exception back to quartz
throw new jobexecutionexception exchange getexception
catch  exception e
// log the error
log error camelexchangeexception createexceptionmessage    exchange  e
// and rethrow to let quartz handle it
if  e instanceof jobexecutionexception
throw  jobexecutionexception  e
throw new jobexecutionexception e
public exchange createexchange final jobexecutioncontext jobexecutioncontext
exchange exchange   createexchange
exchange setin new quartzmessage exchange  jobexecutioncontext
return exchange
public producer createproducer   throws exception
throw new unsupportedoperationexception
public quartzconsumer createconsumer processor processor  throws exception
return new quartzconsumer this  processor
@override
protected string createendpointuri
return     gettrigger   getgroup         gettrigger   getname
protected string getjobname
return getjobdetail   getname
// properties
// -------------------------------------------------------------------------
@override
public quartzcomponent getcomponent
return  quartzcomponent  super getcomponent
public boolean issingleton
return true
public loadbalancer getloadbalancer
if  loadbalancer    null
loadbalancer   createloadbalancer
return loadbalancer
public void setloadbalancer final loadbalancer loadbalancer
this loadbalancer   loadbalancer
public jobdetail getjobdetail
return jobdetail
public void setjobdetail final jobdetail jobdetail
this jobdetail   jobdetail
public trigger gettrigger
return trigger
public void settrigger final trigger trigger
this trigger   trigger
public boolean isstateful
return this stateful
public void setstateful final boolean stateful
this stateful   stateful
// implementation methods
// -------------------------------------------------------------------------
public synchronized void consumerstarted final quartzconsumer consumer  throws schedulerexception
objecthelper notnull trigger
log debug    consumer getprocessor
getloadbalancer   addprocessor consumer getprocessor
// if we have not yet added our default trigger, then lets do it
if   started
addtrigger gettrigger    getjobdetail
started   true
public synchronized void consumerstopped final quartzconsumer consumer  throws schedulerexception
objecthelper notnull trigger
if  started
pausetrigger gettrigger
started   false
log debug    consumer getprocessor
getloadbalancer   removeprocessor consumer getprocessor
protected loadbalancer createloadbalancer
return new roundrobinloadbalancer
@override
protected void dostart   throws exception
objecthelper notnull getcomponent       this
servicehelper startservice loadbalancer
@override
protected void dostop   throws exception
servicehelper stopservice loadbalancer
@override
protected void doshutdown   throws exception
objecthelper notnull trigger
deletetrigger gettrigger