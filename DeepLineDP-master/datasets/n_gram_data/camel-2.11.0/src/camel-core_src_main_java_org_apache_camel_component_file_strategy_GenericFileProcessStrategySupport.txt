/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file strategy
import java io file
import java io ioexception
import org apache camel exchange
import org apache camel component file genericfile
import org apache camel component file genericfileendpoint
import org apache camel component file genericfileexclusivereadlockstrategy
import org apache camel component file genericfileoperationfailedexception
import org apache camel component file genericfileoperations
import org apache camel component file genericfileprocessstrategy
import org apache camel util fileutil
import org slf4j logger
import org slf4j loggerfactory
/**
* base class for implementations of {@link genericfileprocessstrategy}.
*/
public abstract class genericfileprocessstrategysupport<t> implements genericfileprocessstrategy<t>
protected final transient logger log   loggerfactory getlogger getclass
protected genericfileexclusivereadlockstrategy<t> exclusivereadlockstrategy
public void prepareonstartup genericfileoperations<t> operations  genericfileendpoint<t> endpoint  throws exception
if  exclusivereadlockstrategy    null
exclusivereadlockstrategy prepareonstartup operations  endpoint
public boolean begin genericfileoperations<t> operations  genericfileendpoint<t> endpoint  exchange exchange  genericfile<t> file  throws exception
// if we use exclusive read then acquire the exclusive read (waiting until we got it)
if  exclusivereadlockstrategy    null
boolean lock   exclusivereadlockstrategy acquireexclusivereadlock operations  file  exchange
if   lock
// do not begin since we could not get the exclusive read lock
return false
return true
public void abort genericfileoperations<t> operations  genericfileendpoint<t> endpoint  exchange exchange  genericfile<t> file  throws exception
if  exclusivereadlockstrategy    null
exclusivereadlockstrategy releaseexclusivereadlock operations  file  exchange
deletelocalworkfile exchange
operations releaseretreivedfileresources exchange
public void commit genericfileoperations<t> operations  genericfileendpoint<t> endpoint  exchange exchange  genericfile<t> file  throws exception
if  exclusivereadlockstrategy    null
exclusivereadlockstrategy releaseexclusivereadlock operations  file  exchange
deletelocalworkfile exchange
operations releaseretreivedfileresources exchange
public void rollback genericfileoperations<t> operations  genericfileendpoint<t> endpoint  exchange exchange  genericfile<t> file  throws exception
if  exclusivereadlockstrategy    null
exclusivereadlockstrategy releaseexclusivereadlock operations  file  exchange
deletelocalworkfile exchange
operations releaseretreivedfileresources exchange
public genericfileexclusivereadlockstrategy<t> getexclusivereadlockstrategy
return exclusivereadlockstrategy
public void setexclusivereadlockstrategy genericfileexclusivereadlockstrategy<t> exclusivereadlockstrategy
this exclusivereadlockstrategy   exclusivereadlockstrategy
protected genericfile<t> renamefile genericfileoperations<t> operations  genericfile<t> from  genericfile<t> to  throws ioexception
// deleting any existing files before renaming
try
operations deletefile to getabsolutefilepath
catch  genericfileoperationfailedexception e
// ignore the file does not exists
// make parent folder if missing
boolean mkdir   operations builddirectory to getparent    to isabsolute
if   mkdir
throw new genericfileoperationfailedexception     to getparent
log debug    from  to
boolean renamed   operations renamefile from getabsolutefilepath    to getabsolutefilepath
if   renamed
throw new genericfileoperationfailedexception     from       to
return to
private void deletelocalworkfile exchange exchange
// delete local work file, if it was used (eg by ftp component)
file local   exchange getin   getheader exchange file_local_work_path  file class
if  local    null    local exists
boolean deleted   fileutil deletefile local
log trace    local  deleted