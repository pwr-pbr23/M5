/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util hashmap
import java util map
import org apache camel camelcontext
import org apache camel camelcontextaware
import org apache camel component
import org apache camel consumer
import org apache camel endpoint
import org apache camel endpointconfiguration
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel pollingconsumer
import org apache camel resolveendpointfailedexception
import org apache camel spi hasid
import org apache camel support servicesupport
import org apache camel util endpointhelper
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util urisupport
/**
* a default endpoint useful for implementation inheritance.
* <p/>
* components which leverages <a
* href="http://camel.apache.org/asynchronous-routing-engine.html">asynchronous
* processing model</a> should check the {@link #issynchronous()} to determine
* if asynchronous processing is allowed. the <tt>synchronous</tt> option on the
* endpoint allows camel end users to dictate whether they want the asynchronous
* model or not. the option is default <tt>false</tt> which means asynchronous
* processing is allowed.
*
* @version
*/
public abstract class defaultendpoint extends servicesupport implements endpoint  hasid  camelcontextaware
private string endpointuri
private endpointconfiguration endpointconfiguration
private camelcontext camelcontext
private component component
private exchangepattern exchangepattern   exchangepattern inonly
// option to allow end user to dictate whether async processing should be
// used or not (if possible)
private boolean synchronous
private final string id   endpointhelper createendpointid
private map<string  object> consumerproperties
/**
* constructs a fully-initialized defaultendpoint instance. this is the
* preferred method of constructing an object from java code (as opposed to
* spring beans, etc.).
*
* @param endpointuri the full uri used to create this endpoint
* @param component the component that created this endpoint
*/
protected defaultendpoint string endpointuri  component component
this camelcontext   component    null ? null   component getcamelcontext
this component   component
this setendpointuri endpointuri
/**
* constructs a defaultendpoint instance which has <b>not</b> been created
* using a {@link component}.
* <p/>
* <b>note:</b> it is preferred to create endpoints using the associated
* component.
*
* @param endpointuri the full uri used to create this endpoint
* @param camelcontext the camel context in which this endpoint is operating
*/
@deprecated
protected defaultendpoint string endpointuri  camelcontext camelcontext
this endpointuri
this camelcontext   camelcontext
/**
* constructs a partially-initialized defaultendpoint instance.
* <p/>
* <b>note:</b> it is preferred to create endpoints using the associated
* component.
*
* @param endpointuri the full uri used to create this endpoint
*/
@deprecated
protected defaultendpoint string endpointuri
this setendpointuri endpointuri
/**
* constructs a partially-initialized defaultendpoint instance. useful when
* creating endpoints manually (e.g., as beans in spring).
* <p/>
* please note that the endpoint uri must be set through properties (or
* overriding {@link #createendpointuri()} if one uses this constructor.
* <p/>
* <b>note:</b> it is preferred to create endpoints using the associated
* component.
*/
protected defaultendpoint
public int hashcode
return getendpointuri   hashcode     37   1
@override
public boolean equals object object
if  object instanceof defaultendpoint
defaultendpoint that    defaultendpoint object
return objecthelper equal this getendpointuri    that getendpointuri
return false
@override
public string tostring
return string format    urisupport sanitizeuri getendpointuri
/**
* returns a unique string id which can be used for aliasing without having
* to use the whole uri which is not unique
*/
public string getid
return id
public string getendpointuri
if  endpointuri    null
endpointuri   createendpointuri
if  endpointuri    null
throw new illegalargumentexception     getclass   getname
return endpointuri
public endpointconfiguration getendpointconfiguration
if  endpointconfiguration    null
endpointconfiguration   createendpointconfiguration getendpointuri
return endpointconfiguration
/**
* sets a custom {@link endpointconfiguration}
*
* @param endpointconfiguration a custom endpoint configuration to be used.
*/
public void setendpointconfiguration endpointconfiguration endpointconfiguration
this endpointconfiguration   endpointconfiguration
public string getendpointkey
if  islenientproperties
// only use the endpoint uri without parameters as the properties is
// lenient
string uri   getendpointuri
if  uri indexof        1
return objecthelper before uri
else
return uri
else
// use the full endpoint uri
return getendpointuri
public camelcontext getcamelcontext
return camelcontext
/**
* returns the component that created this endpoint.
*
* @return the component that created this endpoint, or <tt>null</tt> if
*         none set
*/
public component getcomponent
return component
public void setcamelcontext camelcontext camelcontext
this camelcontext   camelcontext
public pollingconsumer createpollingconsumer   throws exception
return new eventdrivenpollingconsumer this
public exchange createexchange exchange exchange
return exchange copy
public exchange createexchange
return createexchange getexchangepattern
public exchange createexchange exchangepattern pattern
return new defaultexchange this  pattern
/**
* returns the default exchange pattern to use for createexchange().
*
* @see #setexchangepattern(exchangepattern exchangepattern)
*/
public exchangepattern getexchangepattern
return exchangepattern
/**
* sets the default exchange pattern to use for {@link #createexchange()}.
* the default value is {@link exchangepattern#inonly}
*/
public void setexchangepattern exchangepattern exchangepattern
this exchangepattern   exchangepattern
/**
* returns whether synchronous processing should be strictly used.
*
* @see #setsynchronous(boolean synchronous)
*/
public boolean issynchronous
return synchronous
/**
* sets whether synchronous processing should be strictly used, or camel is
* allowed to use asynchronous processing (if supported).
*
* @param synchronous <tt>true</tt> to enforce synchronous processing
*/
public void setsynchronous boolean synchronous
this synchronous   synchronous
public void configureproperties map<string  object> options
map<string  object> consumerproperties   introspectionsupport extractproperties options
if  consumerproperties    null
setconsumerproperties consumerproperties
/**
* a factory method to lazily create the endpointuri if none is specified
*/
protected string createendpointuri
return null
/**
* a factory method to lazily create the endpoint configuration if none is specified
*/
protected endpointconfiguration createendpointconfiguration string uri
// using this factory method to be backwards compatible with the old code
if  getcomponent      null
// prefer to use component endpoint configuration
try
return getcomponent   createconfiguration uri
catch  exception e
throw objecthelper wrapruntimecamelexception e
else if  getcamelcontext      null
// fallback and use a mapped endpoint configuration
return new mappedendpointconfiguration getcamelcontext    uri
// not configuration possible
return null
/**
* sets the endpointuri if it has not been specified yet via some kind of
* dependency injection mechanism. this allows dependency injection
* frameworks such as spring or guice to set the default endpoint uri in
* cases where it has not been explicitly configured using the name/context
* in which an endpoint is created.
*/
public void setendpointuriifnotspecified string value
if  endpointuri    null
setendpointuri value
/**
* sets the uri that created this endpoint.
*/
protected void setendpointuri string endpointuri
this endpointuri   endpointuri
public boolean islenientproperties
// default should be false for most components
return false
public map<string  object> getconsumerproperties
return consumerproperties
public void setconsumerproperties map<string  object> consumerproperties
this consumerproperties   consumerproperties
protected void configureconsumer consumer consumer  throws exception
if  consumerproperties    null
// use a defensive copy of the consumer properties as the methods below will remove the used properties
// and in case we restart routes, we need access to the original consumer properties again
map<string  object> copy   new hashmap<string  object> consumerproperties
// set reference properties first as they use # syntax that fools the regular properties setter
endpointhelper setreferenceproperties getcamelcontext    consumer  copy
endpointhelper setproperties getcamelcontext    consumer  copy
// special consumer.bridgeerrorhandler option
object bridge   copy remove
if  bridge    null      equals bridge
if  consumer instanceof defaultconsumer
defaultconsumer defaultconsumer    defaultconsumer  consumer
defaultconsumer setexceptionhandler new bridgeexceptionhandlertoerrorhandler defaultconsumer
else
throw new illegalargumentexception
consumer getclass   getname
if   this islenientproperties      copy size   > 0
throw new resolveendpointfailedexception this getendpointuri        copy size
copy
@override
protected void dostart   throws exception
// noop
@override
protected void dostop   throws exception
// noop