/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component dataset
import java util concurrent atomic atomicinteger
import org apache camel component
import org apache camel consumer
import org apache camel exchange
import org apache camel message
import org apache camel processor
import org apache camel service
import org apache camel component mock mockendpoint
import org apache camel processor throughputlogger
import org apache camel util camellogger
import org apache camel util exchangehelper
import org apache camel util objecthelper
import org apache camel util urisupport
import org slf4j logger
import org slf4j loggerfactory
/**
* endpoint for dataset.
*
* @version
*/
public class datasetendpoint extends mockendpoint implements service
private final transient logger log
private dataset dataset
private atomicinteger receivedcounter   new atomicinteger
private int minrate
private long producedelay   3
private long consumedelay
private long preloadsize
private long initialdelay   1000
@deprecated
public datasetendpoint
this log   loggerfactory getlogger datasetendpoint class
// optimize as we dont need to copy the exchange
copyonexchange   false
public datasetendpoint string endpointuri  component component  dataset dataset
super endpointuri  component
this dataset   dataset
this log   loggerfactory getlogger endpointuri
// optimize as we dont need to copy the exchange
copyonexchange   false
public static void assertequals string description  object expected  object actual  exchange exchange
if   objecthelper equal expected  actual
throw new assertionerror description       expected       actual       exchange       exchange getin   getheaders
@override
public consumer createconsumer processor processor  throws exception
return new datasetconsumer this  processor
@override
public void reset
super reset
receivedcounter set 0
@override
public int getreceivedcounter
return receivedcounter get
/**
* creates a message exchange for the given index in the {@link dataset}
*/
public exchange createexchange long messageindex  throws exception
exchange exchange   createexchange
getdataset   populatemessage exchange  messageindex
message in   exchange getin
in setheader exchange dataset_index  messageindex
return exchange
public int getminrate
return minrate
public void setminrate int minrate
this minrate   minrate
@override
protected void waitforcompletelatch long timeout  throws interruptedexception
super waitforcompletelatch timeout
if  minrate > 0
int count   getreceivedcounter
do
// wait as long as we get a decent message rate
super waitforcompletelatch 1000l
count   getreceivedcounter     count
while  count >  minrate
// properties
//-------------------------------------------------------------------------
public dataset getdataset
return dataset
public void setdataset dataset dataset
this dataset   dataset
public long getpreloadsize
return preloadsize
/**
* sets how many messages should be preloaded (sent) before the route completes its initialization
*/
public void setpreloadsize long preloadsize
this preloadsize   preloadsize
public long getconsumedelay
return consumedelay
/**
* allows a delay to be specified which causes consumers to pause - to simulate slow consumers
*/
public void setconsumedelay long consumedelay
this consumedelay   consumedelay
public long getproducedelay
return producedelay
/**
* allows a delay to be specified which causes producers to pause - to simulate slow producers
*/
public void setproducedelay long producedelay
this producedelay   producedelay
public long getinitialdelay
return initialdelay
public void setinitialdelay long initialdelay
this initialdelay   initialdelay
// implementation methods
//-------------------------------------------------------------------------
@override
protected void performassertions exchange actual  exchange copy  throws exception
int receivedcount   receivedcounter incrementandget
long index   receivedcount   1
exchange expected   createexchange index
// now let's assert that they are the same
if  log isdebugenabled
log debug
new object index  copy getin   getheader exchange dataset_index  integer class   copy
assertmessageexpected index  expected  copy
if  consumedelay > 0
thread sleep consumedelay
protected void assertmessageexpected long index  exchange expected  exchange actual  throws exception
long actualcounter   exchangehelper getmandatoryheader actual  exchange dataset_index  long class
assertequals     exchange dataset_index  index  actualcounter  actual
getdataset   assertmessageexpected this  expected  actual  index
protected throughputlogger createreporter
// must sanitize uri to avoid logging sensitive information
string uri   urisupport sanitizeuri getendpointuri
camellogger logger   new camellogger uri
throughputlogger answer   new throughputlogger logger   int  this getdataset   getreportcount
answer setaction
return answer
@override
protected void dostart   throws exception
super dostart
long size   getdataset   getsize
expectedmessagecount  int  size
if  reporter    null
reporter   createreporter
log info this       size