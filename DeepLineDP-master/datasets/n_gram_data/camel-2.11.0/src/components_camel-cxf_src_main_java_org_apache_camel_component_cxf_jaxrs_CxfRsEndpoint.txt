/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf jaxrs
import java util arraylist
import java util arrays
import java util hashmap
import java util list
import java util map
import java util concurrent atomic atomicboolean
import org apache camel camelcontext
import org apache camel component
import org apache camel consumer
import org apache camel processor
import org apache camel producer
import org apache camel service
import org apache camel component cxf cxfendpointutils
import org apache camel component cxf nullfaultlistener
import org apache camel impl defaultendpoint
import org apache camel spi headerfilterstrategy
import org apache camel spi headerfilterstrategyaware
import org apache camel util objecthelper
import org apache cxf bus
import org apache cxf busfactory
import org apache cxf feature loggingfeature
import org apache cxf jaxrs jaxrsserverfactorybean
import org apache cxf jaxrs client jaxrsclientfactorybean
import org apache cxf logging faultlistener
import org slf4j logger
import org slf4j loggerfactory
public class cxfrsendpoint extends defaultendpoint implements headerfilterstrategyaware  service
public enum bindingstyle
/**
* <i>only available for consumers.</i>
* this binding style processes request parameters, multiparts, etc. and maps them to in headers, in attachments and to the message body.
* it aims to eliminate low-level processing of {@link org.apache.cxf.message.messagecontentslist}.
* it also also adds more flexibility and simplicity to the response mapping.
*/
simpleconsumer
/**
* this is the traditional binding style, which simply dumps the {@link org.apache.cxf.message.messagecontentslist} coming in from the cxf stack
* onto the in message body. the user is then responsible for processing it according to the contract defined by the jax-rs method signature.
*/
default
private static final logger log   loggerfactory getlogger cxfrsendpoint class
protected bus bus
private map<string  string> parameters
private list<class<?>> resourceclasses
private headerfilterstrategy headerfilterstrategy
private cxfrsbinding binding
private boolean httpclientapi   true
private string address
private boolean throwexceptiononfailure   true
private int maxclientcachesize   10
private boolean loggingfeatureenabled
private int loggingsizelimit
private boolean skipfaultlogging
private bindingstyle bindingstyle   bindingstyle default
private atomicboolean getbushasbeencalled   new atomicboolean false
private boolean issetdefaultbus
@deprecated
public cxfrsendpoint string endpointuri  camelcontext camelcontext
super endpointuri  camelcontext
setaddress endpointuri
public cxfrsendpoint string endpointuri  component component
super endpointuri  component
setaddress endpointuri
// this method is for cxfrscomponent setting the endpointuri
protected void updateendpointuri string endpointuri
super setendpointuri endpointuri
public void setparameters map<string  string> param
parameters   param
public map<string  string> getparameters
return parameters
public void sethttpclientapi boolean clientapi
httpclientapi   clientapi
public boolean ishttpclientapi
return httpclientapi
@override
public boolean islenientproperties
return true
public headerfilterstrategy getheaderfilterstrategy
return headerfilterstrategy
public void setheaderfilterstrategy headerfilterstrategy strategy
headerfilterstrategy   strategy
public consumer createconsumer processor processor  throws exception
return new cxfrsconsumer this  processor
public producer createproducer   throws exception
if  bindingstyle    bindingstyle simpleconsumer
throw new illegalargumentexception
return new cxfrsproducer this
public boolean issingleton
return false
public void setbinding cxfrsbinding binding
this binding   binding
public cxfrsbinding getbinding
return binding
public boolean isskipfaultlogging
return skipfaultlogging
public void setskipfaultlogging boolean skipfaultlogging
this skipfaultlogging   skipfaultlogging
protected void checkbeantype object object  class<?> clazz
if   clazz isassignablefrom object getclass
throw new illegalargumentexception     clazz getname
protected void setupjaxrsserverfactorybean jaxrsserverfactorybean sfb
// address
if  getaddress      null
sfb setaddress getaddress
if  getresourceclasses      null
list<class<?>> res   getresourceclasses
// setup the resource providers
for  class<?> clazz   res
sfb setresourceprovider clazz  new camelresourceprovider clazz
sfb setresourceclasses res
sfb setstart false
protected void setupjaxrsclientfactorybean jaxrsclientfactorybean cfb  string address
// address
if  address    null
cfb setaddress address
if  getresourceclasses      null     getresourceclasses   isempty
cfb setresourceclass getresourceclasses   get 0
cfb getservicefactory   setresourceclasses getresourceclasses
if  isloggingfeatureenabled
if  getloggingsizelimit   > 0
cfb getfeatures   add new loggingfeature getloggingsizelimit
else
cfb getfeatures   add new loggingfeature
if  this isskipfaultlogging
if  cfb getproperties      null
cfb setproperties new hashmap<string  object>
cfb getproperties   put faultlistener class getname    new nullfaultlistener
cfb setthreadsafe true
protected jaxrsserverfactorybean newjaxrsserverfactorybean
return new jaxrsserverfactorybean
protected jaxrsclientfactorybean newjaxrsclientfactorybean
return new jaxrsclientfactorybean
protected string resolvepropertyplaceholders string str
try
if  getcamelcontext      null
return getcamelcontext   resolvepropertyplaceholders str
else
return str
catch  exception ex
throw objecthelper wrapruntimecamelexception ex
public jaxrsserverfactorybean createjaxrsserverfactorybean
jaxrsserverfactorybean answer   newjaxrsserverfactorybean
setupjaxrsserverfactorybean answer
if  isloggingfeatureenabled
if  getloggingsizelimit   > 0
answer getfeatures   add new loggingfeature getloggingsizelimit
else
answer getfeatures   add new loggingfeature
if  this isskipfaultlogging
if  answer getproperties      null
answer setproperties new hashmap<string  object>
answer getproperties   put faultlistener class getname    new nullfaultlistener
return answer
public jaxrsclientfactorybean createjaxrsclientfactorybean
return createjaxrsclientfactorybean getaddress
public jaxrsclientfactorybean createjaxrsclientfactorybean string address
jaxrsclientfactorybean answer   newjaxrsclientfactorybean
setupjaxrsclientfactorybean answer  address
if  isloggingfeatureenabled
if  getloggingsizelimit   > 0
answer getfeatures   add new loggingfeature getloggingsizelimit
else
answer getfeatures   add new loggingfeature
if  this isskipfaultlogging
if  answer getproperties      null
answer setproperties new hashmap<string  object>
answer getproperties   put faultlistener class getname    new nullfaultlistener
return answer
public list<class<?>> getresourceclasses
return resourceclasses
public void addresourceclass class<?> resourceclass
if  resourceclasses    null
resourceclasses   new arraylist<class<?>>
resourceclasses add resourceclass
public void setresourceclasses list<class<?>> resourceclasses
this resourceclasses   resourceclasses
public void setresourceclasses class<?>    classes
setresourceclasses arrays aslist classes
public void setaddress string address
this address   address
public string getaddress
return resolvepropertyplaceholders address
public boolean isloggingfeatureenabled
return loggingfeatureenabled
public void setloggingfeatureenabled boolean loggingfeatureenabled
this loggingfeatureenabled   loggingfeatureenabled
public int getloggingsizelimit
return loggingsizelimit
public void setloggingsizelimit int loggingsizelimit
this loggingsizelimit   loggingsizelimit
public boolean isthrowexceptiononfailure
return throwexceptiononfailure
public void setthrowexceptiononfailure boolean throwexceptiononfailure
this throwexceptiononfailure   throwexceptiononfailure
/**
* @param maxclientcachesize the maxclientcachesize to set
*/
public void setmaxclientcachesize int maxclientcachesize
this maxclientcachesize   maxclientcachesize
/**
* @return the maxclientcachesize
*/
public int getmaxclientcachesize
return maxclientcachesize
public void setbus bus bus
this bus   bus
public bus getbus
if  bus    null
bus   cxfendpointutils createbus getcamelcontext
log debug    bus
if   getbushasbeencalled getandset true     issetdefaultbus
busfactory setdefaultbus bus
log debug    bus
return bus
public void setsetdefaultbus boolean issetdefaultbus
this issetdefaultbus   issetdefaultbus
public boolean issetdefaultbus
return issetdefaultbus
public bindingstyle getbindingstyle
return bindingstyle
/**
* see documentation of {@link bindingstyle}.
*/
public void setbindingstyle bindingstyle bindingstyle
this bindingstyle   bindingstyle
@override
protected void dostart   throws exception
if  headerfilterstrategy    null
headerfilterstrategy   new cxfrsheaderfilterstrategy
binding   bindingstyle    null    bindingstyle    bindingstyle default ? new defaultcxfrsbinding     new simplecxfrsbinding
if  binding instanceof headerfilterstrategyaware
headerfilterstrategyaware  binding  setheaderfilterstrategy getheaderfilterstrategy
@override
protected void dostop   throws exception
// noop