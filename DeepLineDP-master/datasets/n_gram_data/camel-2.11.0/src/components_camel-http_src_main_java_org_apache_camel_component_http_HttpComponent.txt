/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component http
import java net uri
import java util hashmap
import java util linkedhashset
import java util map
import java util set
import org apache camel endpoint
import org apache camel resolveendpointfailedexception
import org apache camel impl headerfilterstrategycomponent
import org apache camel spi headerfilterstrategy
import org apache camel util collectionhelper
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util urisupport
import org apache commons httpclient httpconnectionmanager
import org apache commons httpclient multithreadedhttpconnectionmanager
import org apache commons httpclient params httpclientparams
/**
* defines the <a href="http://camel.apache.org/http.html">http
* component</a>
*
* @version
*/
public class httpcomponent extends headerfilterstrategycomponent
protected httpclientconfigurer httpclientconfigurer
protected httpconnectionmanager httpconnectionmanager   new multithreadedhttpconnectionmanager
protected httpbinding httpbinding
protected httpconfiguration httpconfiguration
/**
* connects the url specified on the endpoint to the specified processor.
*
* @param consumer the consumer
* @throws exception can be thrown
*/
public void connect httpconsumer consumer  throws exception
/**
* disconnects the url specified on the endpoint from the specified processor.
*
* @param consumer the consumer
* @throws exception can be thrown
*/
public void disconnect httpconsumer consumer  throws exception
/**
* creates the httpclientconfigurer based on the given parameters
*
* @param parameters the map of parameters
* @return the configurer
*/
protected httpclientconfigurer createhttpclientconfigurer map<string  object> parameters  set<authmethod> authmethods
// prefer to use endpoint configured over component configured
httpclientconfigurer configurer   resolveandremovereferenceparameter parameters     httpclientconfigurer class
if  configurer    null
// try without ref
configurer   resolveandremovereferenceparameter parameters     httpclientconfigurer class
if  configurer    null
// fallback to component configured
configurer   gethttpclientconfigurer
// authentication can be endpoint configured
string authusername   getandremoveparameter parameters     string class
authmethod authmethod   getandremoveparameter parameters     authmethod class
// validate that if auth username is given then the auth method is also provided
if  authusername    null    authmethod    null
throw new illegalargumentexception
if  authmethod    null
string authpassword   getandremoveparameter parameters     string class
string authdomain   getandremoveparameter parameters     string class
string authhost   getandremoveparameter parameters     string class
configurer   configureauth configurer  authmethod  authusername  authpassword  authdomain  authhost  authmethods
else if  httpconfiguration    null
// or fallback to use component configuration
configurer   configureauth configurer  httpconfiguration getauthmethod    httpconfiguration getauthusername
httpconfiguration getauthpassword    httpconfiguration getauthdomain    httpconfiguration getauthhost    authmethods
// proxy authentication can be endpoint configured
string proxyauthusername   getandremoveparameter parameters     string class
authmethod proxyauthmethod   getandremoveparameter parameters     authmethod class
// validate that if proxy auth username is given then the proxy auth method is also provided
if  proxyauthusername    null    proxyauthmethod    null
throw new illegalargumentexception
if  proxyauthmethod    null
string proxyauthpassword   getandremoveparameter parameters     string class
string proxyauthdomain   getandremoveparameter parameters     string class
string proxyauthhost   getandremoveparameter parameters     string class
configurer   configureproxyauth configurer  proxyauthmethod  proxyauthusername  proxyauthpassword  proxyauthdomain  proxyauthhost  authmethods
else if  httpconfiguration    null
// or fallback to use component configuration
configurer   configureproxyauth configurer  httpconfiguration getproxyauthmethod    httpconfiguration getproxyauthusername
httpconfiguration getproxyauthpassword    httpconfiguration getproxyauthdomain    httpconfiguration getproxyauthhost    authmethods
return configurer
/**
* configures the authentication method to be used
*
* @return configurer to used
*/
protected httpclientconfigurer configureauth httpclientconfigurer configurer  authmethod authmethod  string username
string password  string domain  string host  set<authmethod> authmethods
// no auth is in use
if  username    null    authmethod    null
return configurer
// validate mandatory options given
if  username    null    authmethod    null
throw new illegalargumentexception
objecthelper notnull authmethod
objecthelper notnull username
objecthelper notnull password
// add it as a auth method used
authmethods add authmethod
if  authmethod    authmethod basic    authmethod    authmethod digest
return compositehttpconfigurer combineconfigurers configurer
new basicauthenticationhttpclientconfigurer false  username  password
else if  authmethod    authmethod ntlm
// domain is mandatory for ntlm
objecthelper notnull domain
return compositehttpconfigurer combineconfigurers configurer
new ntlmauthenticationhttpclientconfigurer false  username  password  domain  host
throw new illegalargumentexception     authmethod
/**
* configures the proxy authentication method to be used
*
* @return configurer to used
*/
protected httpclientconfigurer configureproxyauth httpclientconfigurer configurer  authmethod authmethod  string username
string password  string domain  string host  set<authmethod> authmethods
// no proxy auth is in use
if  username    null    authmethod    null
return configurer
// validate mandatory options given
if  username    null    authmethod    null
throw new illegalargumentexception
objecthelper notnull authmethod
objecthelper notnull username
objecthelper notnull password
// add it as a auth method used
authmethods add authmethod
if  authmethod    authmethod basic    authmethod    authmethod digest
return compositehttpconfigurer combineconfigurers configurer
new basicauthenticationhttpclientconfigurer true  username  password
else if  authmethod    authmethod ntlm
// domain is mandatory for ntml
objecthelper notnull domain
return compositehttpconfigurer combineconfigurers configurer
new ntlmauthenticationhttpclientconfigurer true  username  password  domain  host
throw new illegalargumentexception     authmethod
@override
protected endpoint createendpoint string uri  string remaining  map<string  object> parameters  throws exception
string addressuri   uri
if   uri startswith        uri startswith
addressuri   remaining
map<string  object> httpclientparameters   new hashmap<string  object> parameters
// must extract well known parameters before we create the endpoint
httpbinding binding   resolveandremovereferenceparameter parameters     httpbinding class
if  binding    null
// try without ref
binding   resolveandremovereferenceparameter parameters     httpbinding class
string proxyhost   getandremoveparameter parameters     string class
integer proxyport   getandremoveparameter parameters     integer class
string authmethodpriority   getandremoveparameter parameters     string class
headerfilterstrategy headerfilterstrategy   resolveandremovereferenceparameter parameters     headerfilterstrategy class
urlrewrite urlrewrite   resolveandremovereferenceparameter parameters     urlrewrite class
// http client can be configured from uri options
httpclientparams clientparams   new httpclientparams
introspectionsupport setproperties clientparams  parameters
// validate that we could resolve all httpclient. parameters as this component is lenient
validateparameters uri  parameters
// create the configurer to use for this endpoint (authmethods contains the used methods created by the configurer)
final set<authmethod> authmethods   new linkedhashset<authmethod>
httpclientconfigurer configurer   createhttpclientconfigurer parameters  authmethods
uri endpointuri   urisupport createremaininguri new uri addressuri   httpclientparameters
// create the endpoint
httpendpoint endpoint   new httpendpoint endpointuri tostring    this  clientparams  httpconnectionmanager  configurer
if  headerfilterstrategy    null
endpoint setheaderfilterstrategy headerfilterstrategy
else
setendpointheaderfilterstrategy endpoint
if  urlrewrite    null
// let camelcontext deal with the lifecycle of the url rewrite
// this ensures its being shutdown when camel shutdown etc.
getcamelcontext   addservice urlrewrite
endpoint seturlrewrite urlrewrite
// prefer to use endpoint configured over component configured
if  binding    null
// fallback to component configured
binding   gethttpbinding
if  binding    null
endpoint setbinding binding
if  proxyhost    null
endpoint setproxyhost proxyhost
endpoint setproxyport proxyport
else if  httpconfiguration    null
endpoint setproxyhost httpconfiguration getproxyhost
endpoint setproxyport httpconfiguration getproxyport
if  authmethodpriority    null
endpoint setauthmethodpriority authmethodpriority
else if  httpconfiguration    null    httpconfiguration getauthmethodpriority      null
endpoint setauthmethodpriority httpconfiguration getauthmethodpriority
else
// no explicit auth method priority configured, so use convention over configuration
// and set priority based on auth method
if   authmethods isempty
authmethodpriority   collectionhelper collectionascommadelimitedstring authmethods
endpoint setauthmethodpriority authmethodpriority
setproperties endpoint  parameters
// restructure uri to be based on the parameters left as we dont want to include the camel internal options
uri httpuri   urisupport createremaininguri new uri addressuri   parameters
// validate http uri that end-user did not duplicate the http part that can be a common error
string part   httpuri getschemespecificpart
if  part    null
part   part tolowercase
if  part startswith       part startswith       part startswith       part startswith
throw new resolveendpointfailedexception uri
endpoint sethttpuri httpuri
return endpoint
@override
protected boolean useintrospectiononendpoint
return false
public httpclientconfigurer gethttpclientconfigurer
return httpclientconfigurer
public void sethttpclientconfigurer httpclientconfigurer httpclientconfigurer
this httpclientconfigurer   httpclientconfigurer
public httpconnectionmanager gethttpconnectionmanager
return httpconnectionmanager
public void sethttpconnectionmanager httpconnectionmanager httpconnectionmanager
this httpconnectionmanager   httpconnectionmanager
public httpbinding gethttpbinding
return httpbinding
public void sethttpbinding httpbinding httpbinding
this httpbinding   httpbinding
public httpconfiguration gethttpconfiguration
return httpconfiguration
public void sethttpconfiguration httpconfiguration httpconfiguration
this httpconfiguration   httpconfiguration