/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util arraylist
import java util list
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel navigate
import org apache camel predicate
import org apache camel processor
import org apache camel traceable
import org apache camel support servicesupport
import org apache camel util asyncprocessorconverterhelper
import org apache camel util asyncprocessorhelper
import org apache camel util servicehelper
import org slf4j logger
import org slf4j loggerfactory
/**
* implements a choice structure where one or more predicates are used which if
* they are true their processors are used, with a default otherwise clause used
* if none match.
*
* @version
*/
public class choiceprocessor extends servicesupport implements asyncprocessor  navigate<processor>  traceable
private static final transient logger log   loggerfactory getlogger choiceprocessor class
private final list<filterprocessor> filters
private final asyncprocessor otherwise
public choiceprocessor list<filterprocessor> filters  processor otherwise
this filters   filters
this otherwise   otherwise    null ? asyncprocessorconverterhelper convert otherwise    null
public void process exchange exchange  throws exception
asyncprocessorhelper process this  exchange
public boolean process exchange exchange  asynccallback callback
for  int i   0  i < filters size    i
filterprocessor filter   filters get i
predicate predicate   filter getpredicate
boolean matches   false
try
// ensure we handle exceptions thrown when matching predicate
if  predicate    null
matches   predicate matches exchange
catch  throwable e
exchange setexception e
callback done true
return true
if  log isdebugenabled
log debug    new object i  predicate  matches  exchange
if  matches
// process next will also take care (has not null test) if next was a stop().
// stop() has no processor to execute, and thus we will end in a npe
return filter processnext exchange  callback
if  otherwise    null
return asyncprocessorhelper process otherwise  exchange  callback
else
callback done true
return true
@override
public string tostring
stringbuilder builder   new stringbuilder
boolean first   true
for  filterprocessor processor   filters
if  first
first   false
else
builder append
builder append
builder append processor getpredicate   tostring
builder append
builder append processor getprocessor
if  otherwise    null
builder append
builder append otherwise
builder append
return builder tostring
public string gettracelabel
return
public list<filterprocessor> getfilters
return filters
public processor getotherwise
return otherwise
public list<processor> next
if   hasnext
return null
list<processor> answer   new arraylist<processor>
if  filters    null
answer addall filters
if  otherwise    null
answer add otherwise
return answer
public boolean hasnext
return otherwise    null     filters    null     filters isempty
protected void dostart   throws exception
servicehelper startservices filters  otherwise
protected void dostop   throws exception
servicehelper stopservices otherwise  filters