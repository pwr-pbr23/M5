/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel language bean
import org apache camel expression
import org apache camel issingleton
import org apache camel predicate
import org apache camel spi language
import org apache camel util expressiontopredicateadapter
import org apache camel util objecthelper
/**
* a <a href="http://camel.apache.org/bean-language.html">bean language</a>
* which uses a simple text notation to invoke methods on beans to evaluate predicates or expressions
* <p/>
* the notation is essentially <code>beanname.methodname</code> which is then invoked using the
* beanname to lookup in the <a href="http://camel.apache.org/registry.html>registry</a>
* then the method is invoked to evaluate the expression using the
* <a href="http://camel.apache.org/bean-integration.html">bean integration</a> to bind the
* {@link org.apache.camel.exchange} to the method arguments.
* <p/>
* as of camel 1.5 the bean language also supports invoking a provided bean by
* its classname or the bean itself.
*
* @version
*/
public class beanlanguage implements language  issingleton
/**
* creates the expression based on the string syntax.
*
* @param expression the string syntax <tt>beanref.methodname</tt> where methodname can be omitted
* @return the expression
*/
public static expression bean string expression
beanlanguage language   new beanlanguage
return language createexpression expression
/**
* creates the expression for invoking the bean type.
*
* @param beantype  the bean type to invoke
* @param method optional name of method to invoke for instance to avoid ambiguity
* @return the expression
*/
public static expression bean class<?> beantype  string method
object bean   objecthelper newinstance beantype
return bean bean  method
/**
* creates the expression for invoking the bean type.
*
* @param bean  the bean to invoke
* @param method optional name of method to invoke for instance to avoid ambiguity
* @return the expression
*/
public static expression bean object bean  string method
beanlanguage language   new beanlanguage
return language createexpression bean  method
public predicate createpredicate string expression
return expressiontopredicateadapter topredicate createexpression expression
public expression createexpression string expression
objecthelper notnull expression
string beanname   expression
string method   null
// we support both the .method name and the ?method= syntax
// as the ?method= syntax is very common for the bean component
int idx   expression lastindexof
if  idx > 0
beanname   expression substring 0  idx
method   expression substring idx   1
else if  expression contains
beanname   objecthelper before expression
method   objecthelper after expression
return new beanexpression beanname  method
public expression createexpression object bean  string method
objecthelper notnull bean
return new beanexpression bean  method
public boolean issingleton
return true