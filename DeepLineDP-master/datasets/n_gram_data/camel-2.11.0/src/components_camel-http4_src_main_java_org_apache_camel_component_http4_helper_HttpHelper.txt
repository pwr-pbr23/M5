/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component http4 helper
import java io ioexception
import java io inputstream
import java io objectinputstream
import java io objectoutputstream
import java io outputstream
import java net uri
import java net urisyntaxexception
import java util arraylist
import java util list
import java util map
import javax servlet servletresponse
import javax servlet http httpservletrequest
import org apache camel exchange
import org apache camel producer
import org apache camel runtimeexchangeexception
import org apache camel component http4 httpconstants
import org apache camel component http4 httpconverter
import org apache camel component http4 httpendpoint
import org apache camel component http4 httpmessage
import org apache camel component http4 httpmethods
import org apache camel component http4 httpservleturlrewrite
import org apache camel converter stream cachedoutputstream
import org apache camel util iohelper
import org apache camel util objecthelper
import org apache camel util urisupport
import org apache camel util unsafeuricharactersencoder
import org apache http httpversion
import org apache http protocolexception
import org slf4j logger
import org slf4j loggerfactory
public final class httphelper
private static final transient logger log   loggerfactory getlogger httphelper class
private httphelper
// helper class
public static void setcharsetfromcontenttype string contenttype  exchange exchange
if  contenttype    null
// find the charset and set it to the exchange
int index   contenttype indexof
if  index > 0
string charset   contenttype substring index   8
exchange setproperty exchange charset_name  iohelper normalizecharset charset
/**
* writes the given object as response body to the servlet response
* <p/>
* the content type will be set to {@link httpconstants#content_type_java_serialized_object}
*
* @param response servlet response
* @param target   object to write
* @throws ioexception is thrown if error writing
*/
public static void writeobjecttoservletresponse servletresponse response  object target  throws ioexception
response setcontenttype httpconstants content_type_java_serialized_object
writeobjecttostream response getoutputstream    target
/**
* writes the given object as response body to the output stream
*
* @param stream output stream
* @param target object to write
* @throws ioexception is thrown if error writing
*/
public static void writeobjecttostream outputstream stream  object target  throws ioexception
objectoutputstream oos   new objectoutputstream stream
oos writeobject target
oos flush
iohelper close oos
/**
* deserializes the input stream to a java object
*
* @param is input stream for the java object
* @return the java object, or <tt>null</tt> if input stream was <tt>null</tt>
* @throws classnotfoundexception is thrown if class not found
* @throws ioexception can be thrown
*/
public static object deserializejavaobjectfromstream inputstream is  throws classnotfoundexception  ioexception
if  is    null
return null
object answer   null
objectinputstream ois   new objectinputstream is
try
answer   ois readobject
finally
iohelper close ois
return answer
/**
* reads the response body from the given http servlet request.
*
* @param request  http servlet request
* @param exchange the exchange
* @return the response body, can be <tt>null</tt> if no body
* @throws ioexception is thrown if error reading response body
*/
public static object readresponsebodyfromservletrequest httpservletrequest request  exchange exchange  throws ioexception
inputstream is   httpconverter toinputstream request  exchange
return readresponsebodyfrominputstream is  exchange
/**
* reads the response body from the given input stream.
*
* @param is       the input stream
* @param exchange the exchange
* @return the response body, can be <tt>null</tt> if no body
* @throws ioexception is thrown if error reading response body
*/
public static object readresponsebodyfrominputstream inputstream is  exchange exchange  throws ioexception
if  is    null
return null
// convert the input stream to streamcache if the stream cache is not disabled
if  exchange getproperty exchange disable_http_stream_cache  boolean false  boolean class
return is
else
cachedoutputstream cos   new cachedoutputstream exchange
iohelper copyandcloseinput is  cos
return cos getstreamcache
/**
* creates the url to invoke.
*
* @param exchange the exchange
* @param endpoint the endpoint
* @return the url to invoke
*/
public static string createurl exchange exchange  httpendpoint endpoint
string uri   null
if    endpoint isbridgeendpoint
uri   exchange getin   getheader exchange http_uri  string class
if  uri    null
uri   endpoint gethttpuri   toasciistring
// resolve placeholders in uri
try
uri   exchange getcontext   resolvepropertyplaceholders uri
catch  exception e
throw new runtimeexchangeexception     uri  exchange  e
// append http_path to http_uri if it is provided in the header
string path   exchange getin   getheader exchange http_path  string class
// now the http_path is just related path, we don't need to trim it
if  path    null
if  path startswith
path   path substring 1
if  path length   > 0
// make sure that there is exactly one "/" between http_uri and
// http_path
if   uri endswith
uri   uri
uri   uri concat path
// ensure uri is encoded to be valid
uri   unsafeuricharactersencoder encode uri
return uri
/**
* creates the uri to invoke.
*
* @param exchange the exchange
* @param url      the url to invoke
* @param endpoint the endpoint
* @return the uri to invoke
*/
public static uri createuri exchange exchange  string url  httpendpoint endpoint  throws urisyntaxexception
uri uri   new uri url
// is a query string provided in the endpoint uri or in a header (header overrules endpoint)
string querystring   exchange getin   getheader exchange http_query  string class
if  querystring    null
querystring   endpoint gethttpuri   getrawquery
// we should user the query string from the http_uri header
if  querystring    null
querystring   uri getquery
if  querystring    null
// need to encode query string
querystring   unsafeuricharactersencoder encode querystring
uri   urisupport createuriwithquery uri  querystring
return uri
/**
* creates the httpmethod to use to call the remote server, often either its get or post.
*
* @param exchange the exchange
* @return the created method
* @throws urisyntaxexception
*/
public static httpmethods createmethod exchange exchange  httpendpoint endpoint  boolean haspayload  throws urisyntaxexception
// is a query string provided in the endpoint uri or in a header (header
// overrules endpoint)
string querystring   exchange getin   getheader exchange http_query  string class
// we need also check the http_uri header query part
string uristring   exchange getin   getheader exchange http_uri  string class
// resolve placeholders in uristring
try
uristring   exchange getcontext   resolvepropertyplaceholders uristring
catch  exception e
throw new runtimeexchangeexception     uristring  exchange  e
if  uristring    null
uri uri   new uri uristring
querystring   uri getquery
if  querystring    null
querystring   endpoint gethttpuri   getrawquery
// compute what method to use either get or post
httpmethods answer
httpmethods m   exchange getin   getheader exchange http_method  httpmethods class
if  m    null
// always use what end-user provides in a header
answer   m
else if  querystring    null
// if a query string is provided then use get
answer   httpmethods get
else
// fallback to post if we have payload, otherwise get
answer   haspayload ? httpmethods post   httpmethods get
return answer
public static httpversion parserhttpversion string s  throws protocolexception
int major
int minor
if  s    null
throw new illegalargumentexception
if   s startswith
throw new protocolexception     s
int i1     length
int i2   s indexof    i1
if  i2     1
throw new protocolexception     s
try
major   integer parseint s substring i1  i2
catch  numberformatexception e
throw new protocolexception     s
i1   i2   1
i2   s length
try
minor   integer parseint s substring i1  i2
catch  numberformatexception e
throw new protocolexception     s
return new httpversion major  minor
public static boolean issecureconnection string uri
return uri startswith
/**
* appends the key/value to the headers.
* <p/>
* this implementation supports keys with multiple values. in such situations the value
* will be a {@link java.util.list} that contains the multiple values.
*
* @param headers  headers
* @param key      the key
* @param value    the value
*/
@suppresswarnings
public static void appendheader map<string  object> headers  string key  object value
if  headers containskey key
object existing   headers get key
list<object> list
if  existing instanceof list
list    list  existing
else
list   new arraylist<object>
list add existing
list add value
value   list
headers put key  value
/**
* extracts the parameter value.
* <p/>
* this implementation supports http multi value parameters which
* is based on the syntax of <tt>[value1, value2, value3]</tt> by returning
* a {@link list} containing the values.
* <p/>
* if the value is not a http mulit value the value is returned as is.
*
* @param value the parameter value
* @return the extracted parameter value, see more details in javadoc.
*/
public static object extracthttpparametervalue string value
if  value    null    objecthelper isempty value
return value
// trim value before checking for multiple parameters
string trimmed   value trim
if  trimmed startswith       trimmed endswith
// remove the [ ] markers
trimmed   trimmed substring 1  trimmed length     1
list<string> list   new arraylist<string>
string values   trimmed split
for  string s   values
list add s trim
return list
return value
/**
* processes any custom {@link org.apache.camel.component.http4.urlrewrite}.
*
* @param exchange    the exchange
* @param url         the url
* @param endpoint    the http endpoint
* @param producer    the producer
* @return            the rewritten url, or <tt>null</tt> to use original url
* @throws exception is thrown if any error during rewriting url
*/
public static string urlrewrite exchange exchange  string url  httpendpoint endpoint  producer producer  throws exception
string answer   null
string relativeurl
if  endpoint geturlrewrite      null
// we should use the relative path if possible
string baseurl
relativeurl   endpoint gethttpuri   toasciistring
if  url startswith relativeurl
baseurl   url substring 0  relativeurl length
relativeurl   url substring relativeurl length
else
baseurl   null
relativeurl   url
// mark it as null if its empty
if  objecthelper isempty relativeurl
relativeurl   null
string newurl
if  endpoint geturlrewrite   instanceof httpservleturlrewrite
// its servlet based, so we need the servlet request
httpservletrequest request   exchange getin   getbody httpservletrequest class
if  request    null
httpmessage msg   exchange getin httpmessage class
if  msg    null
request   msg getrequest
if  request    null
throw new illegalargumentexception     endpoint geturlrewrite
objecthelper classname exchange getin   getbody
// we need to adapt the context-path to be the path from the endpoint, if it came from a http based endpoint
// as eg camel-jetty have hardcoded context-path as / for all its servlets/endpoints
// we have the actual context-path stored as a header with the key camelservletcontextpath
string contextpath   exchange getin   getheader    string class
request   new urlrewritehttpservletrequestadapter request  contextpath
newurl     httpservleturlrewrite  endpoint geturlrewrite    rewrite url  relativeurl  producer  request
else
newurl   endpoint geturlrewrite   rewrite url  relativeurl  producer
if  objecthelper isnotempty newurl     newurl    url
// we got a new url back, that can either be a new absolute url
// or a new relative url
if  newurl startswith       newurl startswith
answer   newurl
else if  baseurl    null
// avoid double // when adding the urls
if  baseurl endswith       newurl startswith
answer   baseurl   newurl substring 1
else
answer   baseurl   newurl
else
// use the new url as is
answer   newurl
if  log isdebugenabled
log debug
new object relativeurl    null ? relativeurl   url  newurl  answer
return answer