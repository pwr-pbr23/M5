/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java io bytearrayoutputstream
import java io closeable
import java io ioexception
import java io inputstream
import java util iterator
import java util scanner
import org apache camel camelcontext
import org apache camel notypeconversionavailableexception
/**
* group based {@link iterator} which groups the given {@link iterator} a number of times
* and then return a combined response as a string.
* <p/>
* this implementation uses as internal byte array buffer, to combine the response.
* the token is inserted between the individual parts.
* <p/>
* for example if you group by new line, then a new line token is inserted between the lines.
*/
public final class groupiterator implements iterator<object>  closeable
private final camelcontext camelcontext
private final iterator<?> it
private final string token
private final int group
private boolean closed
private final bytearrayoutputstream bos   new bytearrayoutputstream
/**
* creates a new group iterator
*
* @param camelcontext  the camel context
* @param it            the iterator to group
* @param token         then token used to separate between the parts, use <tt>null</tt> to not add the token
* @param group         number of parts to group together
* @throws illegalargumentexception is thrown if group is not a positive number
*/
public groupiterator camelcontext camelcontext  iterator<?> it  string token  int group
this camelcontext   camelcontext
this it   it
this token   token
this group   group
if  group <  0
throw new illegalargumentexception     group
@override
public void close   throws ioexception
if  it instanceof closeable
iohelper close  closeable  it
else if  it instanceof scanner
// special for scanner as it does not implement closeable
scanner  it  close
// close the buffer as well
bos close
// we are now closed
closed   true
@override
public boolean hasnext
if  closed
return false
boolean answer   it hasnext
if   answer
// auto close
try
close
catch  ioexception e
// ignore
return answer
@override
public object next
try
return donext
catch  exception e
throw objecthelper wrapruntimecamelexception e
private object donext   throws ioexception  notypeconversionavailableexception
int count   0
object data
while  count < group    it hasnext
data   it next
// include token in between
if  data    null    count > 0    token    null
bos write token getbytes
if  data instanceof inputstream
inputstream is    inputstream  data
iohelper copy is  bos
else if  data instanceof byte
byte bytes    byte  data
bos write bytes
else if  data    null
// convert to input stream
inputstream is   camelcontext gettypeconverter   mandatoryconvertto inputstream class  data
iohelper copy is  bos
count
// prepare and return answer as string
string answer   bos tostring
bos reset
return answer
@override
public void remove
it remove