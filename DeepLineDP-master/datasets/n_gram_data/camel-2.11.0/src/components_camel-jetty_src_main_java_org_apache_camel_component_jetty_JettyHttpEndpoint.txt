/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jetty
import java net uri
import java net urisyntaxexception
import java util hashmap
import java util list
import java util map
import javax servlet filter
import org apache camel consumer
import org apache camel processor
import org apache camel producer
import org apache camel resolveendpointfailedexception
import org apache camel component http httpconsumer
import org apache camel component http httpendpoint
import org apache camel impl synchronousdelegateproducer
import org apache camel util introspectionsupport
import org apache camel util jsse sslcontextparameters
import org eclipse jetty client httpclient
import org eclipse jetty server handler
/**
* @version
*/
public class jettyhttpendpoint extends httpendpoint
private boolean sessionsupport
private list<handler> handlers
private httpclient client
private integer httpclientminthreads
private integer httpclientmaxthreads
private jettyhttpbinding jettybinding
private boolean enablejmx
private boolean enablemultipartfilter
private filter multipartfilter
private list<filter> filters
private long continuationtimeout
private boolean usecontinuation
private sslcontextparameters sslcontextparameters
private map<string  object> httpclientparameters
public jettyhttpendpoint jettyhttpcomponent component  string uri  uri httpurl  throws urisyntaxexception
super uri  component  httpurl
@override
public jettyhttpcomponent getcomponent
return  jettyhttpcomponent  super getcomponent
@override
public producer createproducer   throws exception
jettyhttpproducer answer   new jettyhttpproducer this
if  client    null
// use shared client, and ensure its started so we can use it
client start
answer setsharedclient client
else
// create a new client
// thread pool min/max from endpoint take precedence over from component
integer min   httpclientminthreads    null ? httpclientminthreads   getcomponent   gethttpclientminthreads
integer max   httpclientmaxthreads    null ? httpclientmaxthreads   getcomponent   gethttpclientmaxthreads
httpclient httpclient   jettyhttpcomponent createhttpclient this  min  max  sslcontextparameters
// set optional http client parameters
if  httpclientparameters    null
// copy parameters as we need to re-use them again if creating a new producer later
map<string  object> params   new hashmap<string  object> httpclientparameters
introspectionsupport setproperties httpclient  params
// validate we could set all parameters
if  params size   > 0
throw new resolveendpointfailedexception getendpointuri        params size
params
answer setclient httpclient
answer setbinding getjettybinding
if  issynchronous
return new synchronousdelegateproducer answer
else
return answer
@override
public consumer createconsumer processor processor  throws exception
return new httpconsumer this  processor
public void setsessionsupport boolean support
sessionsupport   support
public boolean issessionsupport
return sessionsupport
public list<handler> gethandlers
return handlers
public void sethandlers list<handler> handlers
this handlers   handlers
public httpclient getclient   throws exception
return client
/**
* sets a shared {@link httpclient} to use for all producers
* created by this endpoint. by default each producer will
* use a new http client, and not share.
* <p/>
* <b>important: </b> make sure to handle the lifecycle of the shared
* client, such as stopping the client, when it is no longer in use.
* camel will call the <tt>start</tt> method on the client to ensure
* its started when this endpoint creates a producer.
* <p/>
* this options should only be used in special circumstances.
*/
public void setclient httpclient client
this client   client
public synchronized jettyhttpbinding getjettybinding
if  jettybinding    null
jettybinding   new defaultjettyhttpbinding
jettybinding setheaderfilterstrategy getheaderfilterstrategy
jettybinding setthrowexceptiononfailure isthrowexceptiononfailure
jettybinding settransferexception istransferexception
return jettybinding
public void setjettybinding jettyhttpbinding jettybinding
this jettybinding   jettybinding
public boolean isenablejmx
return this enablejmx
public void setenablejmx boolean enablejmx
this enablejmx   enablejmx
public boolean isenablemultipartfilter
return enablemultipartfilter
public void setenablemultipartfilter boolean enablemultipartfilter
this enablemultipartfilter   enablemultipartfilter
public void setmultipartfilter filter filter
this multipartfilter   filter
public filter getmultipartfilter
return multipartfilter
public void setfilters list<filter> filterlist
this filters   filterlist
public list<filter> getfilters
return filters
public long getcontinuationtimeout
return continuationtimeout
public void setcontinuationtimeout long continuationtimeout
this continuationtimeout   continuationtimeout
public boolean getusecontinuation
return usecontinuation
public void setusecontinuation boolean usecontinuation
this usecontinuation   usecontinuation
public sslcontextparameters getsslcontextparameters
return sslcontextparameters
public void setsslcontextparameters sslcontextparameters sslcontextparameters
this sslcontextparameters   sslcontextparameters
public integer gethttpclientminthreads
return httpclientminthreads
public void sethttpclientminthreads integer httpclientminthreads
this httpclientminthreads   httpclientminthreads
public integer gethttpclientmaxthreads
return httpclientmaxthreads
public void sethttpclientmaxthreads integer httpclientmaxthreads
this httpclientmaxthreads   httpclientmaxthreads
public map<string  object> gethttpclientparameters
return httpclientparameters
public void sethttpclientparameters map<string  object> httpclientparameters
this httpclientparameters   httpclientparameters