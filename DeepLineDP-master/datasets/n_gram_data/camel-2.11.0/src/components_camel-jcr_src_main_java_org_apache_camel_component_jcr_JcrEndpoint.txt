/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jcr
import java net uri
import java net urisyntaxexception
import javax jcr credentials
import javax jcr repository
import javax jcr simplecredentials
import org apache camel consumer
import org apache camel processor
import org apache camel producer
import org apache camel runtimecamelexception
import org apache camel impl defaultendpoint
import org apache camel util objecthelper
/**
* a jcr endpoint
*/
public class jcrendpoint extends defaultendpoint
private credentials credentials
private repository repository
private string base
private int eventtypes
private boolean deep
private string uuids
private string nodetypenames
private boolean nolocal
private long sessionlivecheckintervalonstart   3000l
private long sessionlivecheckinterval   60000l
protected jcrendpoint string endpointuri  jcrcomponent component
super endpointuri  component
try
uri uri   new uri endpointuri
if  uri getuserinfo      null
string creds   uri getuserinfo   split
if  creds    null
string username   creds
string password   creds length > 1 ? creds   null
this credentials   new simplecredentials username  password tochararray
this repository   component getcamelcontext   getregistry   lookupbynameandtype uri gethost    repository class
if  repository    null
throw new runtimecamelexception     uri gethost
this base   uri getpath   replaceall
catch  urisyntaxexception e
throw new illegalargumentexception     endpointuri  e
/**
* currently unsupported
* @throws runtimecamelexception
*/
public consumer createconsumer processor processor  throws exception
return new jcrconsumer this  processor
public producer createproducer   throws exception
return new jcrproducer this
public boolean issingleton
return false
/**
* get the {@link repository}
*
* @return the repository
*/
protected repository getrepository
return repository
/**
* get the {@link credentials} for establishing the jcr repository connection
*
* @return the credentials
*/
protected credentials getcredentials
return credentials
/**
* get the base node when accessing the reposititory
*
* @return the base node
*/
protected string getbase
return base
/**
* <code>eventtypes</code> (a combination of one or more event types encoded
* as a bit mask value such as javax.jcr.observation.event.node_added, javax.jcr.observation.event.node_removed, etc.).
*
* @return eventtypes
* @see {@link javax.jcr.observation.event}
* @see {@link javax.jcr.observation.observationmanager#addeventlistener(javax.jcr.observation.eventlistener, int, string, boolean, string[], string[], boolean)}
*/
public int geteventtypes
return eventtypes
public void seteventtypes int eventtypes
this eventtypes   eventtypes
/**
* when <code>isdeep</code> is true, events whose associated parent node is at
* <code>abspath</code> or within its subgraph are received.
* @return deep
*/
public boolean isdeep
return deep
public void setdeep boolean deep
this deep   deep
/**
* when a comma separated uuid list string is set, only events whose associated parent node has one of
* the identifiers in the comma separated uuid list will be received.
* @return comma separated uuid list string
*/
public string getuuids
return uuids
public void setuuids string uuids
this uuids   uuids
/**
* when a comma separated <code>nodetypename</code> list string is set, only events whose associated parent node has
* one of the node types (or a subtype of one of the node types) in this
* list will be received.
* @return
*/
public string getnodetypenames
return nodetypenames
public void setnodetypenames string nodetypenames
this nodetypenames   nodetypenames
/**
* if <code>nolocal</code> is <code>true</code>, then events
* generated by the session through which the listener was registered are
* ignored. otherwise, they are not ignored.
* @return nolocal
*/
public boolean isnolocal
return nolocal
public void setnolocal boolean nolocal
this nolocal   nolocal
/**
* interval in milliseconds to wait before the first session live checking.
* the default value is 3000 ms.
*
* @return sessionlivecheckintervalonstart
*/
public long getsessionlivecheckintervalonstart
return sessionlivecheckintervalonstart
public void setsessionlivecheckintervalonstart long sessionlivecheckintervalonstart
if  sessionlivecheckintervalonstart <  0
throw new illegalargumentexception
this sessionlivecheckintervalonstart   sessionlivecheckintervalonstart
/**
* interval in milliseconds to wait before each session live checking
* the default value is 60000 ms.
*
* @return
*/
public long getsessionlivecheckinterval
return sessionlivecheckinterval
public void setsessionlivecheckinterval long sessionlivecheckinterval
if  sessionlivecheckinterval <  0
throw new illegalargumentexception
this sessionlivecheckinterval   sessionlivecheckinterval
/**
* gets the destination name which was configured from the endpoint uri.
*
* @return the destination name resolved from the endpoint uri
*/
public string getendpointconfigureddestinationname
string remainder   objecthelper after getendpointkey
if  remainder    null    remainder contains
remainder   remainder substring remainder indexof
if  remainder    null    remainder contains
// remove parameters
remainder   objecthelper before remainder
if  objecthelper isempty remainder
return remainder
return remainder