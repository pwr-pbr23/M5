/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component feed
import java util date
import org apache camel consumer
import org apache camel exchange
import org apache camel processor
import org apache camel producer
import org apache camel impl defaultpollingendpoint
import org apache camel util objecthelper
/**
* a base class for feed (atom, rss) endpoints.
*/
public abstract class feedendpoint extends defaultpollingendpoint
protected string feeduri
protected boolean splitentries   true
protected date lastupdate
protected boolean filter   true
private boolean feedheader   true
private boolean sortentries
private boolean throttleentries   true
public feedendpoint
public feedendpoint string endpointuri  feedcomponent component  string feeduri
super endpointuri  component
this feeduri   feeduri
public boolean issingleton
return true
public producer createproducer   throws exception
throw new unsupportedoperationexception
public consumer createconsumer processor processor  throws exception
objecthelper notnull feeduri
feedpollingconsumer answer
if  issplitentries
answer   createentrypollingconsumer this  processor  filter  lastupdate  throttleentries
else
answer   createpollingconsumer this  processor
// scheduledpollconsumer default delay is 500 millis and that is too often for polling a feed,
// so we override with a new default value. end user can override this value by providing a consumer.delay parameter
answer setdelay feedpollingconsumer default_consumer_delay
configureconsumer answer
return answer
protected abstract feedpollingconsumer createpollingconsumer feedendpoint feedendpoint  processor processor
protected abstract feedpollingconsumer createentrypollingconsumer feedendpoint feedendpoint  processor processor  boolean filter  date lastupdate  boolean throttleentries
protected exchange createexchangewithfeedheader object feed  string header
exchange exchange   createexchange
if  isfeedheader
exchange getin   setheader header  feed
return exchange
/**
* creates an exchange with the entries as the in body.
*
* @param feed   the atom feed
* @return the created exchange
*/
public abstract exchange createexchange object feed
/**
* creates an exchange with the given entry as the in body.
*
* @param feed   the feed
* @param entry  the entry as the in body
* @return the created exchange
*/
public abstract exchange createexchange object feed  object entry
@override
protected string createendpointuri
return     feeduri
@override
public string getendpointkey
// use the full endpoint uri because the lenient properties matters as they should be unique based on the feed uri
return getendpointuri
// properties
//-------------------------------------------------------------------------
public string getfeeduri
return feeduri
public void setfeeduri string feeduri
this feeduri   feeduri
public boolean issplitentries
return splitentries
/**
* sets whether or not entries should be sent individually or whether the entire
* feed should be sent as a single message
*/
public void setsplitentries boolean splitentries
this splitentries   splitentries
public date getlastupdate
return lastupdate
/**
* sets the timestamp to be used for filtering entries from the atom feeds.
* this options is only in conjunction with the splitentries.
*/
public void setlastupdate date lastupdate
this lastupdate   lastupdate
public boolean isfilter
return filter
/**
* sets whether to use filtering or not of the entries.
*/
public void setfilter boolean filter
this filter   filter
/**
* sets whether to add the feed object as a header
*/
public void setfeedheader boolean feedheader
this feedheader   feedheader
public boolean isfeedheader
return feedheader
/**
* sets whether to sort entries by published date. only works when splitentries = true.
*/
public void setsortentries boolean sortentries
this sortentries   sortentries
public boolean issortentries
return sortentries
public boolean islenientproperties
// true to allow dynamic uri options to be configured and passed to external system for eg. the httpproducer
return true
/**
* sets whether all entries identified in a single feed poll should be delivered immediately. if true, only one
* entry is processed per consumer.delay. only applicable when splitentries = true.
*/
public void setthrottleentries boolean throttleentries
this throttleentries   throttleentries
public boolean isthrottleentries
return this throttleentries
// implementation methods
//-------------------------------------------------------------------------