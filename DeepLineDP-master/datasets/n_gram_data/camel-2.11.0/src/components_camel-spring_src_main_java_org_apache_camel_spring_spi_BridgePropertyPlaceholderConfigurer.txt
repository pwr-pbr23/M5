/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring spi
import java util properties
import org apache camel camelcontext
import org apache camel component properties augmentedpropertynameawarepropertiesparser
import org apache camel component properties propertiesparser
import org apache camel component properties propertiesresolver
import org springframework beans beansexception
import org springframework beans factory config configurablelistablebeanfactory
import org springframework beans factory config propertyplaceholderconfigurer
import org springframework util propertyplaceholderhelper
/**
* a {@link propertyplaceholderconfigurer} that bridges camel's <a href="http://camel.apache.org/using-propertyplaceholder.html">
* property placeholder</a> with the spring property placeholder mechanism.
*/
public class bridgepropertyplaceholderconfigurer extends propertyplaceholderconfigurer implements propertiesresolver  augmentedpropertynameawarepropertiesparser
// note: this class must be in the spi package as if its in the root package, then spring fails to parse the xml
// files due some weird spring issue. but that is okay as having this class in the spi package is fine anyway.
private final properties properties   new properties
private propertiesresolver resolver
private propertiesparser parser
private string id
private propertyplaceholderhelper helper
// to support both spring 3.0 / 3.1+ we need to keep track of these as they have private modified in spring 3.0
private string configuredplaceholderprefix
private string configuredplaceholdersuffix
private string configuredvalueseparator
private boolean configuredignoreunresolvableplaceholders
@override
protected void processproperties configurablelistablebeanfactory beanfactorytoprocess  properties props  throws beansexception
super processproperties beanfactorytoprocess  props
// store all the spring properties so we can refer to them later
properties putall props
// create helper
helper   new propertyplaceholderhelper
configuredplaceholderprefix    null ? configuredplaceholderprefix   default_placeholder_prefix
configuredplaceholdersuffix    null ? configuredplaceholdersuffix   default_placeholder_suffix
configuredvalueseparator    null ? configuredvalueseparator   default_value_separator
configuredignoreunresolvableplaceholders    null ? configuredignoreunresolvableplaceholders   false
@override
public void setbeanname string beanname
this id   beanname
super setbeanname beanname
@override
public void setplaceholderprefix string placeholderprefix
super setplaceholderprefix placeholderprefix
this configuredplaceholderprefix   placeholderprefix
@override
public void setplaceholdersuffix string placeholdersuffix
super setplaceholdersuffix placeholdersuffix
this configuredplaceholdersuffix   placeholdersuffix
@override
public void setvalueseparator string valueseparator
super setvalueseparator valueseparator
this configuredvalueseparator   valueseparator
@override
public void setignoreunresolvableplaceholders boolean ignoreunresolvableplaceholders
super setignoreunresolvableplaceholders ignoreunresolvableplaceholders
this configuredignoreunresolvableplaceholders   ignoreunresolvableplaceholders
@override
public properties resolveproperties camelcontext context  boolean ignoremissinglocation  string    uri  throws exception
// return the spring properties, if it
properties answer   new properties
for  string u   uri
string ref       id
if  ref equals u
answer putall properties
else if  resolver    null
properties p   resolver resolveproperties context  ignoremissinglocation  u
if  p    null
answer putall p
// must not return null
return answer
@override
public string parseuri string text  properties properties  string prefixtoken  string suffixtoken
string propertyprefix  string propertysuffix  boolean fallbacktounaugmentedproperty  throws illegalargumentexception
// first let camel parse the text as it may contain camel placeholders
string answer
if  parser instanceof augmentedpropertynameawarepropertiesparser
answer     augmentedpropertynameawarepropertiesparser  parser  parseuri text  properties  prefixtoken  suffixtoken
propertyprefix  propertysuffix  fallbacktounaugmentedproperty
else
answer   parser parseuri text  properties  prefixtoken  suffixtoken
// then let spring parse it to resolve any spring placeholders
if  answer    null
answer   springresolveplaceholders answer  properties
else
answer   springresolveplaceholders text  properties
return answer
@override
public string parseuri string text  properties properties  string prefixtoken  string suffixtoken  throws illegalargumentexception
string answer   parser parseuri text  properties  prefixtoken  suffixtoken
if  answer    null
answer   springresolveplaceholders answer  properties
else
answer   springresolveplaceholders text  properties
return answer
@override
public string parseproperty string key  string value  properties properties
string answer   parser parseproperty key  value  properties
if  answer    null
answer   springresolveplaceholders answer  properties
else
answer   springresolveplaceholders value  properties
return answer
/**
* resolves the placeholders using spring's property placeholder functionality.
*
* @param text   the text which may contain spring placeholders
* @param properties the properties
* @return the parsed text with replaced placeholders, or the original text as is
*/
protected string springresolveplaceholders string text  properties properties
return helper replaceplaceholders text  properties
public void setresolver propertiesresolver resolver
this resolver   resolver
public void setparser propertiesparser parser
this parser   parser