/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jmx
import java util hashtable
import javax management malformedobjectnameexception
import javax management notificationfilter
import javax management objectname
import org apache camel consumer
import org apache camel processor
import org apache camel producer
import org apache camel impl defaultendpoint
import org apache camel util objecthelper
/**
* endpoint that describes a connection to an mbean.
* <p/>
* the component can connect to the local platform mbean server with the following uri:
* <p/>
* <code>jmx://platform?options</code>
* <p/>
* a remote mbean server url can be provided following the initial jmx scheme like so:
* <p/>
* <code>jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?options</code>
* <p/>
* you can append query options to the uri in the following format, ?options=value&option2=value&...
*/
public class jmxendpoint extends defaultendpoint
// error messages as constants so they can be asserted on from unit tests
protected static final string err_platform_server
protected static final string err_threshold_low
protected static final string err_threshold_high
protected static final string err_gauge_notify
protected static final string err_string_notify
protected static final string err_string_to_compare
protected static final string err_observed_attribute
/**
* uri property: [monitor types only] the attribute to observe for the monitor bean.
*/
private string mobservedattribute
/**
* uri property: [monitor types only] the frequency to poll the bean to check the monitor.
*/
private long mgranularityperiod
/**
* uri property: [monitor types only] the type of monitor to create. one of string, gauge, counter.
*/
private string mmonitortype
/**
* uri property: [counter monitor only] initial threshold for the monitor. the value must exceed this before notifications are fired.
*/
private int minitthreshold
/**
* uri property: [counter monitor only] the amount to increment the threshold after it's been exceeded.
*/
private int moffset
/**
* uri property: [counter monitor only] the value at which the counter is reset to zero
*/
private int mmodulus
/**
* uri property: [counter + gauge monitor only] if true, then the value reported in the notification is the difference from the threshold as opposed to the value itself.
*/
private boolean mdifferencemode
/**
* uri property: [gauge monitor only] if true, the gauge will fire a notification when the high threshold is exceeded
*/
private boolean mnotifyhigh
/**
* uri property: [gauge monitor only] if true, the gauge will fire a notification when the low threshold is exceeded
*/
private boolean mnotifylow
/**
* uri property: [gauge monitor only] value for the gauge's high threshold
*/
private double mthresholdhigh
/**
* uri property: [gauge monitor only] value for the gauge's low threshold
*/
private double mthresholdlow
/**
* uri property: [string monitor only] if true, the string monitor will fire a notification when the string attribute differs from the string to compare.
*/
private boolean mnotifydiffer
/**
* uri property: [string monitor only] if true, the string monitor will fire a notification when the string attribute matches the string to compare.
*/
private boolean mnotifymatch
/**
* uri property: [string monitor only] value for the string monitor's string to compare.
*/
private string mstringtocompare
/**
* uri property: format for the message body. either "xml" or "raw". if xml, the notification is serialized to xml. if raw, then the raw java object is set as the body.
*/
private string mformat
/**
* uri property: credentials for making a remote connection
*/
private string muser
/**
* uri property: credentials for making a remote connection
*/
private string mpassword
/**
* uri property: the domain for the mbean you're connecting to
*/
private string mobjectdomain
/**
* uri property: the name key for the mbean you're connecting to. this value is mutually exclusive with the object properties that get passed.
*/
private string mobjectname
/**
* uri property: reference to a bean that implements the notificationfilter.
*/
private notificationfilter mnotificationfilter
/**
* uri property: value to handback to the listener when a notification is received. this value will be put in the message header with the key "jmx.handback"
*/
private object mhandback
/**
* uri property:  if true the consumer will throw an exception if unable to establish the jmx connection upon startup.  if false, the consumer will attempt
*                to establish the jmx connection every 'x' seconds until the connection is made -- where 'x' is the configured  reconnectiondelay
*/
private boolean mtestconnectiononstartup   true
/**
* uri property:  if true the consumer will attempt to reconnect to the jmx server when any connection failure occurs.  the consumer will attempt
*                to re-establish the jmx connection every 'x' seconds until the connection is made-- where 'x' is the configured  reconnectiondelay
*/
private boolean mreconnectonconnectionfailure
/**
* uri property:  the number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection
*/
private int mreconnectdelay   10
/**
* uri property: properties for the object name. these values will be used if the objectname param is not set
*/
private hashtable<string  string> mobjectproperties
/**
* cached object name that was built from the objectname param or the hashtable
*/
private objectname mjmxobjectname
/**
* server url comes from the remaining endpoint
*/
private string mserverurl
public jmxendpoint string aendpointuri  jmxcomponent acomponent
super aendpointuri  acomponent
public consumer createconsumer processor aprocessor  throws exception
// validate that all of the endpoint is configured properly
if  getmonitortype      null
if   isplatformserver
throw new illegalargumentexception err_platform_server
if  objecthelper isempty getobservedattribute
throw new illegalargumentexception err_observed_attribute
if  getmonitortype   equals
if  objecthelper isempty getstringtocompare
throw new illegalargumentexception err_string_to_compare
if   isnotifydiffer       isnotifymatch
throw new illegalargumentexception err_string_notify
else if  getmonitortype   equals
if   isnotifyhigh       isnotifylow
throw new illegalargumentexception err_gauge_notify
if  getthresholdhigh      null
throw new illegalargumentexception err_threshold_high
if  getthresholdlow      null
throw new illegalargumentexception err_threshold_low
return new jmxmonitorconsumer this  aprocessor
else
// shouldn't need any other validation.
return new jmxconsumer this  aprocessor
public producer createproducer   throws exception
throw new unsupportedoperationexception
public boolean issingleton
return false
public string getformat
return mformat
public void setformat string aformat
mformat   aformat
public boolean isxml
return   equals getformat
public boolean isplatformserver
return   equals getserverurl
public string getuser
return muser
public void setuser string auser
muser   auser
public string getpassword
return mpassword
public void setpassword string apassword
mpassword   apassword
public string getobjectdomain
return mobjectdomain
public void setobjectdomain string aobjectdomain
mobjectdomain   aobjectdomain
public string getobjectname
return mobjectname
public void setobjectname string aobjectname
if  getobjectproperties      null
throw new illegalargumentexception
mobjectname   aobjectname
protected string getserverurl
return mserverurl
protected void setserverurl string aserverurl
mserverurl   aserverurl
public notificationfilter getnotificationfilter
return mnotificationfilter
public void setnotificationfilter notificationfilter afilterref
mnotificationfilter   afilterref
public object gethandback
return mhandback
public void sethandback object ahandback
mhandback   ahandback
public hashtable<string  string> getobjectproperties
return mobjectproperties
/**
* setter for the objectproperties is either called by reflection when
* processing the uri or manually by the component.
* <p/>
* if the uri contained a value with a reference like "objectproperties=#myhashtable"
* then the hashtable will be set in place.
* <p/>
* if there are extra properties that begin with "key." then the component will
* create a hashtable with these values after removing the "key." prefix.
*/
public void setobjectproperties hashtable<string  string> aobjectproperties
if  getobjectname      null
throw new illegalargumentexception
mobjectproperties   aobjectproperties
protected objectname getjmxobjectname   throws malformedobjectnameexception
if  mjmxobjectname    null
objectname on   buildobjectname
setjmxobjectname on
return mjmxobjectname
protected void setjmxobjectname objectname acachedobjectname
mjmxobjectname   acachedobjectname
public string getobservedattribute
return mobservedattribute
public void setobservedattribute string aobservedattribute
mobservedattribute   aobservedattribute
public long getgranularityperiod
return mgranularityperiod
public void setgranularityperiod long agranularityperiod
mgranularityperiod   agranularityperiod
public string getmonitortype
return mmonitortype
public void setmonitortype string amonitortype
mmonitortype   amonitortype
public int getinitthreshold
return minitthreshold
public void setinitthreshold int ainitthreshold
minitthreshold   ainitthreshold
public int getoffset
return moffset
public void setoffset int aoffset
moffset   aoffset
public int getmodulus
return mmodulus
public void setmodulus int amodulus
mmodulus   amodulus
public boolean isdifferencemode
return mdifferencemode
public void setdifferencemode boolean adifferencemode
mdifferencemode   adifferencemode
public boolean isnotifyhigh
return mnotifyhigh
public void setnotifyhigh boolean anotifyhigh
mnotifyhigh   anotifyhigh
public boolean isnotifylow
return mnotifylow
public void setnotifylow boolean anotifylow
mnotifylow   anotifylow
public double getthresholdhigh
return mthresholdhigh
public void setthresholdhigh double athresholdhigh
mthresholdhigh   athresholdhigh
public double getthresholdlow
return mthresholdlow
public void setthresholdlow double athresholdlow
mthresholdlow   athresholdlow
public boolean isnotifydiffer
return mnotifydiffer
public void setnotifydiffer boolean anotifydiffer
mnotifydiffer   anotifydiffer
public boolean isnotifymatch
return mnotifymatch
public void setnotifymatch boolean anotifymatch
mnotifymatch   anotifymatch
public string getstringtocompare
return mstringtocompare
public void setstringtocompare string astringtocompare
mstringtocompare   astringtocompare
public boolean gettestconnectiononstartup
return this mtestconnectiononstartup
public void settestconnectiononstartup boolean testconnectiononstartup
this mtestconnectiononstartup   testconnectiononstartup
public boolean getreconnectonconnectionfailure
return this mreconnectonconnectionfailure
public void setreconnectonconnectionfailure boolean reconnectonconnectionfailure
this mreconnectonconnectionfailure   reconnectonconnectionfailure
public int getreconnectdelay
return this mreconnectdelay
public void setreconnectdelay int reconnectdelay
this mreconnectdelay   reconnectdelay
private objectname buildobjectname   throws malformedobjectnameexception
objectname objectname
if  getobjectproperties      null
stringbuilder sb   new stringbuilder getobjectdomain    append    append    append getobjectname
objectname   new objectname sb tostring
else
objectname   new objectname getobjectdomain    getobjectproperties
return objectname