/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component sql
import java sql preparedstatement
import java sql sqlexception
import java util iterator
import java util map
import java util regex matcher
import java util regex pattern
import org apache camel exchange
import org apache camel runtimeexchangeexception
import org slf4j logger
import org slf4j loggerfactory
/**
* default {@link sqlpreparestatementstrategy} that supports named query parameters as well index based.
*/
public class defaultsqlpreparestatementstrategy implements sqlpreparestatementstrategy
private static final logger log   loggerfactory getlogger defaultsqlpreparestatementstrategy class
@override
public string preparequery string query  boolean allownamedparameters  throws sqlexception
string answer
if  allownamedparameters    hasnamedparameters query
// replace all :?word with just ?
answer   query replaceall
else
answer   query
log trace    answer
return answer
@override
public iterator<?> createpopulateiterator final string query  final string preparedquery  final int expectedparams
final exchange exchange  final object value  throws sqlexception
if  hasnamedparameters query
// create an iterator that returns the value in the named order
try
// the body may be a map which we look at first
final map<?  ?> bodymap   exchange getcontext   gettypeconverter   tryconvertto map class  value
final map<?  ?> headermap   exchange getin   hasheaders   ? exchange getin   getheaders     null
return new iterator<object>
private namedqueryparser parser   new namedqueryparser query
private object next
private boolean done
@override
public boolean hasnext
if  done
return false
if  next    null
next   next
return next    null
@override
public object next
if  next    null
string key   parser next
if  key    null
done   true
return null
// the key is expected to exist, if not report so end user can see this
boolean contains   bodymap    null ? bodymap containskey key    false
contains    headermap    null ? headermap containskey key    false
if   contains
throw new runtimeexchangeexception     key       query      exchange
// get from body before header
next   bodymap    null ? bodymap get key    null
if  next    null
next   headermap    null ? headermap get key    null
object answer   next
next   null
return answer
@override
public void remove
// noop
catch  exception e
throw new sqlexception     query  e
else
// just use a regular iterator
return exchange getcontext   gettypeconverter   convertto iterator class  value
@override
public void populatestatement preparedstatement ps  iterator<?> iterator  int expectedparams  throws sqlexception
int argnumber   1
if  expectedparams > 0
while  iterator    null    iterator hasnext
object value   iterator next
log trace    argnumber  value
ps setobject argnumber  value
argnumber
if  argnumber   1    expectedparams
throw new sqlexception     expectedparams        argnumber   1
protected boolean hasnamedparameters string query
namedqueryparser parser   new namedqueryparser query
return parser next      null
private static final class namedqueryparser
private static final pattern pattern   pattern compile
private final matcher matcher
private namedqueryparser string query
this matcher   pattern matcher query
public string next
if   matcher find
return null
return matcher group 1
public string replaceall string replacement
return matcher replaceall replacement