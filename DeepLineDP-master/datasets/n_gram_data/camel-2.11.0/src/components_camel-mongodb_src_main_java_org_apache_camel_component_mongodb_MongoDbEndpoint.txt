/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component mongodb
import com mongodb db
import com mongodb dbcollection
import com mongodb dbobject
import com mongodb mongo
import com mongodb readpreference
import com mongodb writeconcern
import com mongodb writeresult
import org apache camel consumer
import org apache camel exchange
import org apache camel message
import org apache camel processor
import org apache camel producer
import org apache camel impl defaultendpoint
import org apache camel impl defaultexchange
import org apache camel impl defaultmessage
import org apache camel util objecthelper
import org slf4j logger
import org slf4j loggerfactory
/**
* represents a mongodb endpoint.
* it is responsible for creating {@link mongodbproducer} and {@link mongodbtailablecursorconsumer} instances.
* it accepts a number of options to customise the behaviour of consumers and producers.
*/
public class mongodbendpoint extends defaultendpoint
private static final logger log   loggerfactory getlogger mongodbendpoint class
private mongo mongoconnection
private string database
private string collection
private mongodboperation operation
private boolean createcollection   true
private boolean invokegetlasterror       false
private writeconcern writeconcern
private writeconcern writeconcernref
private readpreference readpreference
private boolean dynamicity       false
private boolean writeresultasheader       false
// tailable cursor consumer by default
private mongodbconsumertype consumertype
private long cursorregenerationdelay   1000l
private string tailtrackincreasingfield
// persitent tail tracking
private boolean persistenttailtracking       false
private string persistentid
private string tailtrackdb
private string tailtrackcollection
private string tailtrackfield
private mongodbtailtrackingconfig tailtrackingconfig
private dbcollection dbcollection
private db db
// ======= constructors ===============================================
public mongodbendpoint
public mongodbendpoint string uri  mongodbcomponent component
super uri  component
@suppresswarnings
public mongodbendpoint string endpointuri
super endpointuri
// ======= implementation methods =====================================
public producer createproducer   throws exception
validateoptions
initializeconnection
return new mongodbproducer this
public consumer createconsumer processor processor  throws exception
validateoptions
// we never create the collection
createcollection   false
initializeconnection
// select right consumer type
if  consumertype    null
consumertype   mongodbconsumertype tailable
consumer consumer   null
if  consumertype    mongodbconsumertype tailable
consumer   new mongodbtailablecursorconsumer this  processor
else
throw new camelmongodbexception     consumertype
return consumer
private void validateoptions char role  throws illegalargumentexception
// make our best effort to validate, options with defaults are checked against their defaults, which is not always a guarantee that
// they haven't been explicitly set, but it is enough
if  role
if   objecthelper isempty consumertype     persistenttailtracking     objecthelper isempty tailtrackdb
objecthelper isempty tailtrackcollection      objecthelper isempty tailtrackfield     cursorregenerationdelay    1000l
throw new illegalargumentexception
else if  role
if   objecthelper isempty operation      objecthelper isempty writeconcern     writeconcernref    null
readpreference    null    dynamicity    invokegetlasterror
throw new illegalargumentexception
if  consumertype    mongodbconsumertype tailable
if  tailtrackincreasingfield    null
throw new illegalargumentexception
if  persistenttailtracking     objecthelper isempty persistentid
throw new illegalargumentexception
else
throw new illegalargumentexception
public boolean issingleton
return true
/**
* initialises the mongodb connection using the mongo object provided to the endpoint
* @throws camelmongodbexception
*/
public void initializeconnection   throws camelmongodbexception
log info    this tostring
if  database    null    collection    null
throw new camelmongodbexception
db   mongoconnection getdb database
if  db    null
throw new camelmongodbexception     database
if   createcollection     db collectionexists collection
throw new camelmongodbexception     collection
dbcollection   db getcollection collection
log info
new object  mongoconnection getalladdress   tostring    db getname    dbcollection getname
/**
* applies validation logic specific to this endpoint type. if everything succeeds, continues initialization
*/
@override
protected void dostart   throws exception
if  writeconcern    null    writeconcernref    null
log error
new object  writeconcern  writeconcernref
throw new illegalargumentexception
setwritereadoptionsonconnection
super dostart
public exchange createmongodbexchange dbobject dbobj
exchange exchange   new defaultexchange this getcamelcontext    getexchangepattern
message message   new defaultmessage
message setheader mongodbconstants database  database
message setheader mongodbconstants collection  collection
message setheader mongodbconstants from_tailable  true
message setbody dbobj
exchange setin message
return exchange
private void setwritereadoptionsonconnection
// set the writeconcern
if  writeconcern    null
mongoconnection setwriteconcern writeconcern
else if  writeconcernref    null
mongoconnection setwriteconcern writeconcernref
// set the readpreference
if  readpreference    null
mongoconnection setreadpreference readpreference
// ======= getters and setters ===============================================
/**
* sets the name of the mongodb collection to bind to this endpoint
* @param collection collection name
*/
public void setcollection string collection
this collection   collection
public string getcollection
return collection
/**
* sets the operation this endpoint will execute against mongodb. for possible values, see {@link mongodboperation}.
* @param operation name of the operation as per catalogued values
* @throws camelmongodbexception
*/
public void setoperation string operation  throws camelmongodbexception
try
this operation   mongodboperation valueof operation
catch  illegalargumentexception e
throw new camelmongodbexception    e
public mongodboperation getoperation
return operation
/**
* sets the name of the mongodb database to target
* @param database name of the mongodb database
*/
public void setdatabase string database
this database   database
public string getdatabase
return database
/**
* create collection during initialisation if it doesn't exist. default is true.
* @param createcollection true or false
*/
public void setcreatecollection boolean createcollection
this createcollection   createcollection
public boolean iscreatecollection
return createcollection
public db getdb
return db
public dbcollection getdbcollection
return dbcollection
/**
* sets the mongo instance that represents the backing connection
* @param mongoconnection the connection to the database
*/
public void setmongoconnection mongo mongoconnection
this mongoconnection   mongoconnection
public mongo getmongoconnection
return mongoconnection
/**
* set the {@link writeconcern} for write operations on mongodb using the standard ones.
* resolved from the fields of the writeconcern class by calling the {@link writeconcern#valueof(string)} method.
* @param writeconcern the standard name of the writeconcern
* @see <a href="http://api.mongodb.org/java/current/com/mongodb/writeconcern.html#valueof(java.lang.string)">possible options</a>
*/
public void setwriteconcern string writeconcern
this writeconcern   writeconcern valueof writeconcern
public writeconcern getwriteconcern
return writeconcern
/**
* instructs this endpoint to invoke {@link writeresult#getlasterror()} with every operation. by default, mongodb does not wait
* for the write operation to occur before returning. if set to true, each exchange will only return after the write operation
* has actually occurred in mongodb.
* @param invokegetlasterror true or false
*/
public void setinvokegetlasterror boolean invokegetlasterror
this invokegetlasterror   invokegetlasterror
public boolean isinvokegetlasterror
return invokegetlasterror
/**
* set the {@link writeconcern} for write operations on mongodb, passing in the bean ref to a custom writeconcern which exists in the registry.
* you can also use standard writeconcerns by passing in their key. see the {@link #setwriteconcern(string) setwriteconcern} method.
* @param writeconcernref the name of the bean in the registry that represents the writeconcern to use
*/
public void setwriteconcernref string writeconcernref
writeconcern wc   this getcamelcontext   getregistry   lookupbynameandtype writeconcernref  writeconcern class
if  wc    null
log error
writeconcernref
throw new illegalargumentexception
this writeconcernref   wc
public writeconcern getwriteconcernref
return writeconcernref
/**
* sets a mongodb {@link readpreference} on the mongo connection. read preferences set directly on the connection will be
* overridden by this setting.
* @param readpreference the bean name of the read preference to set
*/
public void setreadpreference string readpreference
class<?> innerclasses   readpreference class getdeclaredclasses
for  class<?> inclass   innerclasses
if  inclass getsuperclass      readpreference class    inclass getname   equals readpreference
try
this readpreference    readpreference  inclass getconstructor  class<?>  null  newinstance  object  null
catch  exception e
continue
break
log error
readpreference
throw new illegalargumentexception
public readpreference getreadpreference
return readpreference
/**
* sets whether this endpoint will attempt to dynamically resolve the target database and collection from the incoming exchange properties.
* can be used to override at runtime the database and collection specified on the otherwise static endpoint uri.
* it is disabled by default to boost performance. enabling it will take a minimal performance hit.
* @see mongodbconstants#database
* @see mongodbconstants#collection
* @param dynamicity true or false indicated whether target database and collection should be calculated dynamically based on exchange properties.
*/
public void setdynamicity boolean dynamicity
this dynamicity   dynamicity
public boolean isdynamicity
return dynamicity
/**
* reserved for future use, when more consumer types are supported.
* @param consumertype key of the consumer type
* @throws camelmongodbexception
*/
public void setconsumertype string consumertype  throws camelmongodbexception
try
this consumertype   mongodbconsumertype valueof consumertype
catch  illegalargumentexception e
throw new camelmongodbexception    e
public mongodbconsumertype getconsumertype
return consumertype
public string gettailtrackdb
return tailtrackdb
/**
* indicates what database the tail tracking mechanism will persist to. if not specified, the current database will
* be picked by default. dynamicity will not be taken into account even if enabled, i.e. the tail tracking database
* will not vary past endpoint initialisation.
* @param tailtrackdb database name
*/
public void settailtrackdb string tailtrackdb
this tailtrackdb   tailtrackdb
public string gettailtrackcollection
return tailtrackcollection
/**
* collection where tail tracking information will be persisted. if not specified, {@link mongodbtailtrackingconfig#default_collection}
* will be used by default.
* @param tailtrackcollection collection name
*/
public void settailtrackcollection string tailtrackcollection
this tailtrackcollection   tailtrackcollection
public string gettailtrackfield
return tailtrackfield
/**
* field where the last tracked value will be placed. if not specified,  {@link mongodbtailtrackingconfig#default_field}
* will be used by default.
* @param tailtrackfield field name
*/
public void settailtrackfield string tailtrackfield
this tailtrackfield   tailtrackfield
/**
* enable persistent tail tracking, which is a mechanism to keep track of the last consumed message across system restarts.
* the next time the system is up, the endpoint will recover the cursor from the point where it last stopped slurping records.
* @param persistenttailtracking true or false
*/
public void setpersistenttailtracking boolean persistenttailtracking
this persistenttailtracking   persistenttailtracking
public boolean ispersistenttailtracking
return persistenttailtracking
/**
* correlation field in the incoming record which is of increasing nature and will be used to position the tailing cursor every
* time it is generated.
* the cursor will be (re)created with a query of type: tailtrackincreasingfield > lastvalue (possibly recovered from persistent
* tail tracking).
* can be of type integer, date, string, etc.
* note: no support for dot notation at the current time, so the field should be at the top level of the document.
* @param tailtrackincreasingfield
*/
public void settailtrackincreasingfield string tailtrackincreasingfield
this tailtrackincreasingfield   tailtrackincreasingfield
public string gettailtrackincreasingfield
return tailtrackincreasingfield
public mongodbtailtrackingconfig gettailtrackingconfig
if  tailtrackingconfig    null
tailtrackingconfig   new mongodbtailtrackingconfig persistenttailtracking  tailtrackincreasingfield
tailtrackdb    null ? database   tailtrackdb  tailtrackcollection  tailtrackfield  getpersistentid
return tailtrackingconfig
/**
* mongodb tailable cursors will block until new data arrives. if no new data is inserted, after some time the cursor will be automatically
* freed and closed by the mongodb server. the client is expected to regenerate the cursor if needed. this value specifies the time to wait
* before attempting to fetch a new cursor, and if the attempt fails, how long before the next attempt is made. default value is 1000ms.
* @param cursorregenerationdelay delay specified in milliseconds
*/
public void setcursorregenerationdelay long cursorregenerationdelay
this cursorregenerationdelay   cursorregenerationdelay
public long getcursorregenerationdelay
return cursorregenerationdelay
/**
* one tail tracking collection can host many trackers for several tailable consumers.
* to keep them separate, each tracker should have its own unique persistentid.
* @param persistentid the value of the persistent id to use for this tailable consumer
*/
public void setpersistentid string persistentid
this persistentid   persistentid
public string getpersistentid
return persistentid
public boolean iswriteresultasheader
return writeresultasheader
/**
* in write operations, it determines whether instead of returning {@link writeresult} as the body of the out
* message, we transfer the in message to the out and attach the writeresult as a header.
* @param writeresultasheader flag to indicate if this option is enabled
*/
public void setwriteresultasheader boolean writeresultasheader
this writeresultasheader   writeresultasheader