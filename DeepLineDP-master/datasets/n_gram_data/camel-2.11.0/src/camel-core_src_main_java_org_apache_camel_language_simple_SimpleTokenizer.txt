/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel language simple
import java util list
import java util concurrent copyonwritearraylist
import org apache camel language simple types simpletoken
import org apache camel language simple types simpletokentype
import org apache camel language simple types tokentype
/**
* tokenizer to create {@link simpletoken} from the input.
*/
public final class simpletokenizer
// use copyonwritearraylist so we can modify it in the for loop when changing function start/end tokens
private static final list<simpletokentype> known_tokens   new copyonwritearraylist<simpletokentype>
static
// add known tokens
known_tokens add new simpletokentype tokentype whitespace
known_tokens add new simpletokentype tokentype whitespace
known_tokens add new simpletokentype tokentype whitespace
known_tokens add new simpletokentype tokentype whitespace
known_tokens add new simpletokentype tokentype singlequote
known_tokens add new simpletokentype tokentype doublequote   "
known_tokens add new simpletokentype tokentype functionstart
known_tokens add new simpletokentype tokentype functionstart
known_tokens add new simpletokentype tokentype functionend
known_tokens add new simpletokentype tokentype booleanvalue
known_tokens add new simpletokentype tokentype booleanvalue
known_tokens add new simpletokentype tokentype nullvalue
known_tokens add new simpletokentype tokentype escape
// binary operators
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
known_tokens add new simpletokentype tokentype binaryoperator
// unary operators
known_tokens add new simpletokentype tokentype unaryoperator
known_tokens add new simpletokentype tokentype unaryoperator
// logical operators
known_tokens add new simpletokentype tokentype logicaloperator
known_tokens add new simpletokentype tokentype logicaloperator
// todo: @deprecated logical operators, to be removed in camel 3.0
known_tokens add new simpletokentype tokentype logicaloperator
known_tokens add new simpletokentype tokentype logicaloperator
private simpletokenizer
// static methods
/**
* @see simplelanguage#changefunctionstarttoken(string...)
*/
public static void changefunctionstarttoken string    starttoken
for  simpletokentype type   known_tokens
if  type gettype      tokentype functionstart
known_tokens remove type
// add in start of list as its a more common token to be used
for  string token   starttoken
known_tokens add 0  new simpletokentype tokentype functionstart  token
/**
* @see simplelanguage#changefunctionendtoken(string...)
*/
public static void changefunctionendtoken string    endtoken
for  simpletokentype type   known_tokens
if  type gettype      tokentype functionend
known_tokens remove type
// add in start of list as its a more common token to be used
for  string token   endtoken
known_tokens add 0  new simpletokentype tokentype functionend  token
/**
* create the next token
*
* @param expression  the input expression
* @param index       the current index
* @param allowescape whether to allow escapes
* @param filter      defines the accepted token types to be returned (character is always used as fallback)
* @return the created token, will always return a token
*/
public static simpletoken nexttoken string expression  int index  boolean allowescape  tokentype    filter
return donexttoken expression  index  allowescape  filter
/**
* create the next token
*
* @param expression  the input expression
* @param index       the current index
* @param allowescape whether to allow escapes
* @return the created token, will always return a token
*/
public static simpletoken nexttoken string expression  int index  boolean allowescape
return donexttoken expression  index  allowescape
private static simpletoken donexttoken string expression  int index  boolean allowescape  tokentype    filters
boolean numericallowed   accepttype tokentype numericvalue  filters
if  numericallowed
// is it a numeric value
stringbuilder sb   new stringbuilder
boolean digit   true
while  digit    index < expression length
digit   character isdigit expression charat index
if  digit
char ch   expression charat index
sb append ch
index
continue
// is it a dot or comma as part of a floating point number
boolean decimalseparator        expression charat index          expression charat index
if  decimalseparator    sb length   > 0
char ch   expression charat index
sb append ch
index
// assume its still a digit
digit   true
continue
if  sb length   > 0
return new simpletoken new simpletokentype tokentype numericvalue  sb tostring     index
boolean escapeallowed   allowescape    accepttype tokentype escape  filters
if  escapeallowed
stringbuilder sb   new stringbuilder
char ch   expression charat index
boolean escaped        ch
if  escaped    index < expression length     1
// grab next character to escape
char next   expression charat   index
// special for new line, tabs and carriage return
boolean special   false
if       next
sb append
special   true
else if       next
sb append
special   true
else if       next
sb append
special   true
else
// not special just a regular character
sb append ch
// force 2 as length if special
return new simpletoken new simpletokentype tokentype character  sb tostring     index  special ? 2   1
// it could be any of the known tokens
string text   expression substring index
for  simpletokentype token   known_tokens
if  accepttype token gettype    filters
if  text startswith token getvalue
return new simpletoken token  index
// fallback and create a character token
char ch   expression charat index
simpletoken token   new simpletoken new simpletokentype tokentype character      ch   index
return token
private static boolean accepttype tokentype type  tokentype    filters
if  filters    null    filters length    0
return true
for  tokentype filter   filters
if  type    filter
return true
return false