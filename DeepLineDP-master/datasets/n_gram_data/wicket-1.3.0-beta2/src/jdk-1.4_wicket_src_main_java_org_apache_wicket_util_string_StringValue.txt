/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util string
import java text decimalformat
import java text decimalformatsymbols
import java text numberformat
import java text parseexception
import java util locale
import org apache wicket iclusterable
import org apache wicket util time duration
import org apache wicket util time time
/**
* holds an immutable string value and optionally a locale, with methods to
* convert to various types. also provides some handy parsing methods and a
* variety of static factory methods.
* <p>
* objects can be constructed directly from strings or by using the valueof()
* static factory methods. the repeat() static factory methods provide a way of
* generating a string value that repeats a given char or string a number of
* times.
* <p>
* conversions to a wide variety of types can be found in the to*() methods. a
* generic conversion can be achieved with to(class).
* <p>
* the beforefirst(), afterfirst(), beforelast() and afterlast() methods are
* handy for parsing things like paths and filenames.
*
* @author jonathan locke
*/
public class stringvalue implements iclusterable
private static final long serialversionuid   1l
/** locale to be used for formatting and parsing. */
private final locale locale
/** the underlying string. */
private final string text
/**
* @param times
*            number of times to repeat character
* @param c
*            character to repeat
* @return repeated character string
*/
public static stringvalue repeat final int times  final char c
final appendingstringbuffer buffer   new appendingstringbuffer times
for  int i   0  i < times  i
buffer append c
return valueof buffer
/**
* @param times
*            number of times to repeat string
* @param s
*            string to repeat
* @return repeated character string
*/
public static stringvalue repeat final int times  final string s
final appendingstringbuffer buffer   new appendingstringbuffer times
for  int i   0  i < times  i
buffer append s
return valueof buffer
/**
* converts the given input to an instance of stringvalue.
*
* @param value
*            double precision value
* @return string value formatted with one place after decimal
*/
public static stringvalue valueof final double value
return valueof value  locale getdefault
/**
* converts the given input to an instance of stringvalue.
*
* @param value
*            double precision value
* @param places
*            number of places after decimal
* @param locale
*            locale to be used for formatting
* @return string value formatted with the given number of places after
*         decimal
*/
public static stringvalue valueof final double value  final int places  final locale locale
if  double isnan value     double isinfinite value
return valueof
else
final decimalformat format   new decimalformat     repeat places
new decimalformatsymbols locale
return valueof format format value
/**
* converts the given input to an instance of stringvalue.
*
* @param value
*            double precision value
* @param locale
*            locale to be used for formatting
* @return string value formatted with one place after decimal
*/
public static stringvalue valueof final double value  final locale locale
return valueof value  1  locale
/**
* converts the given input to an instance of stringvalue.
*
* @param object
*            an object
* @return string value for object
*/
public static stringvalue valueof final object object
return valueof strings tostring object
/**
* converts the given input to an instance of stringvalue.
*
* @param object
*            an object
* @param locale
*            locale to be used for formatting
* @return string value for object
*/
public static stringvalue valueof final object object  final locale locale
return valueof strings tostring object   locale
/**
* converts the given input to an instance of stringvalue.
*
* @param string
*            a string
* @return string value for string
*/
public static stringvalue valueof final string string
return new stringvalue string
/**
* converts the given input to an instance of stringvalue.
*
* @param string
*            a string
* @param locale
*            locale to be used for formatting
* @return string value for string
*/
public static stringvalue valueof final string string  final locale locale
return new stringvalue string  locale
/**
* converts the given input to an instance of stringvalue.
*
* @param buffer
*            a string buffer
* @return string value
*/
public static stringvalue valueof final appendingstringbuffer buffer
return valueof buffer tostring
/**
* private constructor to force use of static factory methods.
*
* @param text
*            the text for this string value
*/
protected stringvalue final string text
this text   text
this locale   locale getdefault
/**
* private constructor to force use of static factory methods.
*
* @param text
*            the text for this string value
* @param locale
*            the locale for formatting and parsing
*/
protected stringvalue final string text  final locale locale
this text   text
this locale   locale
/**
* gets the substring after the first occurence given char.
*
* @param c
*            char to scan for
* @return the substring
*/
public final string afterfirst final char c
return strings afterfirst text  c
/**
* gets the substring after the last occurence given char.
*
* @param c
*            char to scan for
* @return the substring
*/
public final string afterlast final char c
return strings afterlast text  c
/**
* gets the substring before the first occurence given char.
*
* @param c
*            char to scan for
* @return the substring
*/
public final string beforefirst final char c
return strings beforefirst text  c
/**
* gets the substring before the last occurence given char.
*
* @param c
*            char to scan for
* @return the substring
*/
public final string beforelast final char c
return strings afterlast text  c
/**
* replaces on this text.
*
* @param searchfor
*            what to search for
* @param replacewith
*            what to replace with
* @return this string value with searchfor replaces with replacewith
*/
public final charsequence replaceall final charsequence searchfor  final charsequence replacewith
return strings replaceall text  searchfor  replacewith
/**
* converts this stringvalue to a given type.
*
* @param type
*            the type to convert to
* @return the converted value
* @throws stringvalueconversionexception
*/
public final object to final class type  throws stringvalueconversionexception
if  type    string class
return tostring
if  type    integer type    type    integer class
return tointeger
if  type    long type    type    long class
return tolongobject
if  type    boolean type    type    boolean class
return tobooleanobject
if  type    double type    type    double class
return todoubleobject
if  type    character type    type    character class
return tocharacter
if  type    time class
return totime
if  type    duration class
return toduration
throw new stringvalueconversionexception     tostring
type
/**
* convert this text to a boolean.
*
* @return this string value as a boolean
* @throws stringvalueconversionexception
*/
public final boolean toboolean   throws stringvalueconversionexception
return strings istrue text
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final boolean toboolean final boolean defaultvalue
throws stringvalueconversionexception
return  text    null  ? defaultvalue   toboolean
/**
* convert this text to a boolean and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final boolean tobooleanobject   throws stringvalueconversionexception
return strings toboolean text
/**
* convert this text to a char.
*
* @return this string value as a character
* @throws stringvalueconversionexception
*/
public final char tochar   throws stringvalueconversionexception
return strings tochar text
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final char tochar final char defaultvalue  throws stringvalueconversionexception
return  text    null  ? defaultvalue   tochar
/**
* convert this text to a character and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final character tocharacter   throws stringvalueconversionexception
return new character tochar
/**
* convert this text to a double and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final double todouble   throws stringvalueconversionexception
try
return numberformat getnumberinstance this locale  parse text  doublevalue
catch  parseexception e
throw new stringvalueconversionexception     text
e
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final double todouble final double defaultvalue  throws stringvalueconversionexception
return  text    null  ? defaultvalue   todouble
/**
* convert this text to a double and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final double todoubleobject   throws stringvalueconversionexception
return new double todouble
/**
* convert this text to a duration instance and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final duration toduration   throws stringvalueconversionexception
return duration valueof text  this locale
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final duration toduration final duration defaultvalue
throws stringvalueconversionexception
return  text    null  ? defaultvalue   toduration
/**
* convert this text to an int and convert unchecked numberformatexceptions
* to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final int toint   throws stringvalueconversionexception
try
return integer parseint text
catch  numberformatexception e
throw new stringvalueconversionexception     text
e
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final int toint final int defaultvalue  throws stringvalueconversionexception
return  text    null  ? defaultvalue   toint
/**
* convert this text to an integer and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final integer tointeger   throws stringvalueconversionexception
try
return new integer text
catch  numberformatexception e
throw new stringvalueconversionexception     text
e
/**
* convert this text to a long and convert unchecked numberformatexceptions
* to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final long tolong   throws stringvalueconversionexception
try
return long parselong text
catch  numberformatexception e
throw new stringvalueconversionexception     text
e
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final long tolong final long defaultvalue  throws stringvalueconversionexception
return  text    null  ? defaultvalue   tolong
/**
* convert this text to a long and convert unchecked numberformatexceptions
* to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final long tolongobject   throws stringvalueconversionexception
try
return new long text
catch  numberformatexception e
throw new stringvalueconversionexception     text
e
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final boolean tooptionalboolean   throws stringvalueconversionexception
return  text    null  ? null   tobooleanobject
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final character tooptionalcharacter   throws stringvalueconversionexception
return  text    null  ? null   tocharacter
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final double tooptionaldouble   throws stringvalueconversionexception
return  text    null  ? null   todoubleobject
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final duration tooptionalduration   throws stringvalueconversionexception
return  text    null  ? null   toduration
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final integer tooptionalinteger   throws stringvalueconversionexception
return  text    null  ? null   tointeger
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final long tooptionallong   throws stringvalueconversionexception
return  text    null  ? null   tolongobject
/**
* convert to object types, returning null if text is null.
*
* @return converted
*/
public final string tooptionalstring
return text
/**
* convert to object types, returning null if text is null.
*
* @return converted
* @throws stringvalueconversionexception
*/
public final time tooptionaltime   throws stringvalueconversionexception
return  text    null  ? null   totime
/**
* @return the string value
*/
public final string tostring
return text
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
*/
public final string tostring final string defaultvalue
return  text    null  ? defaultvalue   text
/**
* convert this text to a time instance and convert unchecked
* numberformatexceptions to checked.
*
* @return converted text
* @throws stringvalueconversionexception
*/
public final time totime   throws stringvalueconversionexception
try
return time valueof text
catch  parseexception e
throw new stringvalueconversionexception     text
e
/**
* convert to primitive types, returning default value if text is null.
*
* @param defaultvalue
*            the default value to return of text is null
* @return the converted text as a primitive or the default if text is null
* @throws stringvalueconversionexception
*/
public final time totime final time defaultvalue  throws stringvalueconversionexception
return  text    null  ? defaultvalue   totime