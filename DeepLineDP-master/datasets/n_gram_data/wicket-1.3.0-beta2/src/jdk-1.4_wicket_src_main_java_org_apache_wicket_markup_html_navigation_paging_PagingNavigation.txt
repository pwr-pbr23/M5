/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html navigation paging
import org apache wicket markup html basic label
import org apache wicket markup html list loop
import org apache wicket version undo change
/**
* a navigation for a pageablelistview that holds links to other pages of the
* pageablelistview.
* <p>
* for each row (one page of the list of pages) a {@link pagingnavigationlink}will
* be added that contains a {@link label}with the page number of that link
* (1..n).
*
* <pre>
*
* 	&lt;td wicket:id=&quot;navigation&quot;&gt;
* 		&lt;a wicket:id=&quot;pagelink&quot; href=&quot;searchcdpage.html&quot;&gt;
* 			&lt;span wicket:id=&quot;pagenumber&quot;&gt;1&lt;/&gt;
* 		&lt;/a&gt;
* 	&lt;/td&gt;
*
* </pre>
*
* thus renders like:
*
* <pre>
*
* 	1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
*
* </pre>
*
* </p>
* <p>
* override method populateitem to customize the rendering of the navigation.
* for instance:
*
* <pre>
* protected void populateitem(listitem listitem)
* {
* 	final int page = ((integer)listitem.getmodelobject()).intvalue();
* 	final pagingnavigationlink link = new pagingnavigationlink(&quot;pagelink&quot;, pageablelistview, page);
* 	if (page &gt; 0)
* 	{
* 		listitem.add(new label(&quot;separator&quot;, &quot;|&quot;));
* 	}
* 	else
* 	{
* 		listitem.add(new label(&quot;separator&quot;, &quot;&quot;));
* 	}
* 	link.add(new label(&quot;pagenumber&quot;, string.valueof(page + 1)));
* 	link.add(new label(&quot;pagelabel&quot;, &quot;page&quot;));
* 	listitem.add(link);
* }
* </pre>
*
* with:
*
* <pre>
* 	&lt;td wicket:id=&quot;navigation&quot;&gt;
* 	  &lt;span wicket:id=&quot;separator&quot;/&gt;
* 	  &lt;a wicket:id=&quot;pagelink&quot; href=&quot;#&quot;&gt;
* 	    &lt;span wicket:id=&quot;pagelabel&quot;/&gt;&lt;span wicket:id=&quot;pagenumber&quot;/&gt;
* 	  &lt;/a&gt;
* 	&lt;/td&gt;
* </pre>
*
* renders like:
*
* <pre>
* page1 | page2 | page3 | page4 | page5 | page6 | page7 | page8 | page9
* </pre>
*
* </p>
* assuming a pageablelistview with 1000 entries and not more than 10 lines
* shall be printed per page, the navigation bar would have 100 entries. because
* this is not feasible pagingnavigation's navigation bar is pageable as well.
* <p>
* the page links displayed are automatically adjusted based on the number of
* page links to be displayed and a margin. the margin makes sure that the page
* link pointing to the current page is not at the left or right end of the page
* links currently printed and thus providing a better user experience.
* <p>
* use setmargin() and setviewsize() to adjust the navigation's bar view size
* and margin.
* <p>
* please
*
* @see pagingnavigator for a ready made component which already includes links
*      to the first, previous, next and last page.
*
* @author jonathan locke
* @author eelco hillenius
* @author juergen donnerstag
*/
public class pagingnavigation extends loop
private static final long serialversionuid   1l
/**
* undo change for navigation start index. makes certain that back button
* works with paging in the navigator.
*/
private final class startindexchange extends change
private static final long serialversionuid   1l
private int startindex
/**
* constructor, remembers the startindex.
*
* @param startindex
*            the startindex to remember.
*/
private startindexchange int startindex
this startindex   startindex
/**
* @see org.apache.wicket.version.undo.change#undo()
*/
public final void undo
pagingnavigation this startindex   startindex
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     getpath         startindex
/** the pageablelistview this navigation is navigating. */
protected ipageable pageable
/** the label provider for the text that the links should be displaying. */
protected ipaginglabelprovider labelprovider
/** offset for the loop */
private int startindex
/**
* number of links on the left and/or right to keep the current page link
* somewhere near the middle.
*/
private int margin    1
/** default separator between page numbers. null: no separator. */
private string separator   null
/**
* the maximum number of page links to show.
*/
private int viewsize   10
/**
* constructor.
*
* @param id
*            see component
* @param pageable
*            the underlying pageable component to navigate
*/
public pagingnavigation final string id  final ipageable pageable
this id  pageable  null
/**
* constructor.
*
* @param id
*            see component
* @param pageable
*            the underlying pageable component to navigate
* @param labelprovider
*            the label provider for the text that the links should be
*            displaying.
*/
public pagingnavigation final string id  final ipageable pageable
final ipaginglabelprovider labelprovider
super id  pageable getpagecount
this pageable   pageable
this labelprovider   labelprovider
startindex   0
/**
* gets the margin, default value is half the view size, unless explicitly
* set.
*
* @return the margin
*/
public int getmargin
if  margin     1    viewsize    0
return viewsize   2
return margin
/**
* gets the seperator.
*
* @return the seperator
*/
public string getseparator
return separator
/**
* gets the view size (is fixed by user).
*
* @return view size
*/
public int getviewsize
return viewsize
/**
* view size of the navigation bar.
*
* @param size
*/
public void setviewsize final int size
this viewsize   size
/**
* sets the margin.
*
* @param margin
*            the margin
*/
public void setmargin final int margin
this margin   margin
/**
* sets the seperator. null meaning, no separator at all.
*
* @param separator
*            the seperator
*/
public void setseparator final string separator
this separator   separator
/**
* @see org.apache.wicket.component#onbeforerender()
*/
protected void onbeforerender
// pagingnavigation itself (as well as the pageablelistview)
// may have pages.
// the index of the first page link depends on the pageablelistview's
// page currently printed.
this setstartindex
super onbeforerender
/**
* allow subclasses replacing populateitem to calculate the current page
* number
*
* @return start index
*/
protected final int getstartindex
return this startindex
/**
* populate the current cell with a page link (pagingnavigationlink)
* enclosing the page number the link is pointing to. subclasses may provide
* there own implementation adding more sophisticated page links.
*
* @see org.apache.wicket.markup.html.list.loop#populateitem(loop.loopitem)
*/
protected void populateitem final loop loopitem loopitem
// get the index of page this link shall point to
final int pageindex   getstartindex     loopitem getiteration
// add a page link pointing to the page
final pagingnavigationlink link   newpagingnavigationlink    pageable  pageindex
loopitem add link
// add a page number label to the list which is enclosed by the link
string label
if  labelprovider    null
label   labelprovider getpagelabel pageindex
else
label   string valueof pageindex   1
link add new label    label
/**
* factory method for creating page number links.
*
* @param id
*            the component id.
* @param pageable
*            the pageable for the link
* @param pageindex
*            the page index the link points to
* @return the page navigation link.
*/
protected pagingnavigationlink newpagingnavigationlink string id  ipageable pageable
int pageindex
return new pagingnavigationlink id  pageable  pageindex
/**
* renders the page link. add the separator if not the last page link
*
* @see loop#renderitem(loop.loopitem)
*/
protected void renderitem final loop loopitem loopitem
// call default implementation
super renderitem loopitem
// add separator if not last page
if  separator    null     loopitem getiteration      getiterations     1
getresponse   write separator
/**
* get the first page link to render. adjust the first page link based on
* the current pageablelistview page displayed.
*/
private void setstartindex
// which startindex are we currently using
int firstlistitem   this startindex
// how many page links shall be displayed
int viewsize   math min getviewsize    pageable getpagecount
int margin   getmargin
// what is the pageablelistview's page index to be displayed
int currentpage   pageable getcurrentpage
// make sure the current page link index is within the current
// window taking the left and right margin into account
if  currentpage <  firstlistitem   margin
firstlistitem   currentpage   margin
else if   currentpage >   firstlistitem   viewsize   margin
firstlistitem    currentpage   margin   1    viewsize
// make sure the first index is >= 0 and the last index is <=
// than the last page link index.
if   firstlistitem   viewsize  >  pageable getpagecount
firstlistitem   pageable getpagecount     viewsize
if  firstlistitem < 0
firstlistitem   0
if   viewsize    getiterations        this startindex    firstlistitem
this modelchanging
// tell the listview what the new start index shall be
addstatechange new startindexchange this startindex
this startindex   firstlistitem
this setiterations math min viewsize  pageable getpagecount
this modelchanged
// force all children to be re-rendered
removeall
/**
* set the number of iterations.
*
* @param i
*            the number of iterations
*/
private void setiterations int i
setmodelobject new integer i