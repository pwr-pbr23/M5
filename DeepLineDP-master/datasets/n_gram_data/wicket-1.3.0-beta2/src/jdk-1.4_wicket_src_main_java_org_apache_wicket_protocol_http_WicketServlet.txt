/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io ioexception
import java util enumeration
import javax servlet filterconfig
import javax servlet servletcontext
import javax servlet servletexception
import javax servlet http httpservlet
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
import org slf4j logger
import org slf4j loggerfactory
/**
*
* please use {@link wicketfilter} if you require advanced chaining of resources.
*
* servlet class for all wicket applications. the specific application class to
* instantiate should be specified to the application server via an init-params
* argument named "applicationclassname" in the servlet declaration, which is
* typically in a <i>web.xml </i> file. the servlet declaration may vary from
* one application server to another, but should look something like this:
*
* <pre>
* &lt;servlet&gt;
*   &lt;servlet-name&gt;myapplication&lt;/servlet-name&gt;
*   &lt;servlet-class&gt;org.apache.wicket.protocol.http.wicketservlet&lt;/servlet-class&gt;
*   &lt;init-param&gt;
*     &lt;param-name&gt;applicationclassname&lt;/param-name&gt;
*     &lt;param-value&gt;com.whoever.myapplication&lt;/param-value&gt;
*   &lt;/init-param&gt;
*   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
* &lt;/servlet&gt;
* </pre>
*
* note that the applicationclassname parameter you specify must be the fully
* qualified name of a class that extends webapplication. if your class cannot
* be found, does not extend webapplication or cannot be instantiated, a runtime
* exception of type wicketruntimeexception will be thrown.
* </p>
* as an alternative, you can configure an application factory instead. this
* looks like:
*
* <pre>
* &lt;init-param&gt;
*   &lt;param-name&gt;applicationfactoryclassname&lt;/param-name&gt;
*   &lt;param-value&gt;teachscape.platform.web.wicket.springapplicationfactory&lt;/param-value&gt;
* &lt;/init-param&gt;
* </pre>
*
* and it has to satisfy interface
* {@link org.apache.wicket.protocol.http.iwebapplicationfactory}.
*
* <p>
* when get/post requests are made via http, a webrequestcycle object is
* created from the request, response and session objects (after wrapping them
* in the appropriate wicket wrappers). the requestcycle's render() method is
* then called to produce a response to the http request.
* <p>
* if you want to use servlet specific configuration, e.g. using init parameters
* from the {@link javax.servlet.servletconfig}object, you should override the
* init() method of {@link javax.servlet.genericservlet}. for example:
*
* <pre>
* public void init() throws servletexception
* {
*     servletconfig config = getservletconfig();
*     string webxmlparameter = config.getinitparameter(&quot;mywebxmlparameter&quot;);
*     ...
* </pre>
*
* </p>
* in order to support frameworks like spring, the class is non-final and the
* variable webapplication is protected instead of private. thus subclasses may
* provide their own means of providing the application object.
*
* @see org.apache.wicket.requestcycle
* @author jonathan locke
* @author timur mehrvarz
* @author juergen donnerstag
* @author igor vaynberg (ivaynberg)
* @author al maw
*/
public class wicketservlet extends httpservlet
private static final long serialversionuid   1l
/** log. */
private static final logger log   loggerfactory getlogger wicketservlet class
/** the wicketfilter where all the handling is done */
protected wicketfilter wicketfilter
/**
* handles servlet page requests.
*
* @param servletrequest
*            servlet request object
* @param servletresponse
*            servlet response object
* @throws servletexception
*             thrown if something goes wrong during request handling
* @throws ioexception
*/
public final void doget final httpservletrequest servletrequest
final httpservletresponse servletresponse  throws servletexception  ioexception
wicketfilter doget servletrequest  servletresponse
/**
* calls doget with arguments.
*
* @param servletrequest
*            servlet request object
* @param servletresponse
*            servlet response object
* @see wicketservlet#doget(httpservletrequest, httpservletresponse)
* @throws servletexception
*             thrown if something goes wrong during request handling
* @throws ioexception
*/
public final void dopost final httpservletrequest servletrequest
final httpservletresponse servletresponse  throws servletexception  ioexception
wicketfilter doget servletrequest  servletresponse
/**
* servlet initialization
*/
public void init   throws servletexception
wicketfilter   newwicketfilter
wicketfilter init new filterconfig
/**
* @see javax.servlet.filterconfig#getservletcontext()
*/
public servletcontext getservletcontext
return wicketservlet this getservletcontext
/**
* @see javax.servlet.filterconfig#getinitparameternames()
*/
public enumeration getinitparameternames
return wicketservlet this getinitparameternames
/**
* @see javax.servlet.filterconfig#getinitparameter(java.lang.string)
*/
public string getinitparameter string name
if  wicketfilter filter_mapping_param equals name
return wicketfilter servlet_path_holder
return wicketservlet this getinitparameter name
/**
* @see javax.servlet.filterconfig#getfiltername()
*/
public string getfiltername
return wicketservlet this getservletname
/**
* @return the wicket filter
*/
protected wicketfilter newwicketfilter
return new wicketfilter
/**
* servlet cleanup.
*/
public void destroy
wicketfilter destroy
wicketfilter   null
/**
* @see javax.servlet.http.httpservlet#getlastmodified(javax.servlet.http.httpservletrequest)
*/
protected long getlastmodified final httpservletrequest servletrequest
return wicketfilter getlastmodified servletrequest