/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request
import javax servlet http httpservletresponse
import org apache wicket application
import org apache wicket component
import org apache wicket iredirectlistener
import org apache wicket irequesttarget
import org apache wicket page
import org apache wicket pageparameters
import org apache wicket requestcycle
import org apache wicket requestlistenerinterface
import org apache wicket restartresponseatinterceptpageexception
import org apache wicket restartresponseexception
import org apache wicket session
import org apache wicket wicketruntimeexception
import org apache wicket authorization authorizationexception
import org apache wicket authorization unauthorizedactionexception
import org apache wicket markup markupexception
import org apache wicket markup html inewbrowserwindowlistener
import org apache wicket markup html pages exceptionerrorpage
import org apache wicket protocol http pageexpiredexception
import org apache wicket protocol http request weberrorcoderesponsetarget
import org apache wicket protocol http request webexternalresourcerequesttarget
import org apache wicket request target ieventprocessor
import org apache wicket request target component bookmarkablelistenerinterfacerequesttarget
import org apache wicket request target component bookmarkablepagerequesttarget
import org apache wicket request target component pagerequesttarget
import org apache wicket request target component listener redirectpagerequesttarget
import org apache wicket request target resource sharedresourcerequesttarget
import org apache wicket settings iexceptionsettings
import org apache wicket util string strings
/**
* default abstract implementation of {@link irequestcycleprocessor}.
*
* @author eelcohillenius
*/
public abstract class abstractrequestcycleprocessor implements irequestcycleprocessor
/** request coding strategy to use. */
private irequestcodingstrategy requestcodingstrategy
/**
* construct.
*/
public abstractrequestcycleprocessor
/**
* @see org.apache.wicket.request.irequestcycleprocessor#getrequestcodingstrategy()
*/
public irequestcodingstrategy getrequestcodingstrategy
if  requestcodingstrategy    null
requestcodingstrategy   newrequestcodingstrategy
return requestcodingstrategy
/**
* @see org.apache.wicket.request.irequestcycleprocessor#processevents(org.apache.wicket.requestcycle)
*/
public void processevents requestcycle requestcycle
irequesttarget target   requestcycle getrequesttarget
if  target instanceof ieventprocessor
application get   logeventtarget target
ieventprocessor target  processevents requestcycle
/**
* @see org.apache.wicket.request.irequestcycleprocessor#respond(org.apache.wicket.requestcycle)
*/
public void respond requestcycle requestcycle
irequesttarget requesttarget   requestcycle getrequesttarget
if  requesttarget    null
application get   logresponsetarget requesttarget
requesttarget respond requestcycle
/**
* @see org.apache.wicket.request.irequestcycleprocessor#respond(java.lang.runtimeexception,
*      org.apache.wicket.requestcycle)
*/
public void respond runtimeexception e  requestcycle requestcycle
// if application doesn't want debug info showing up for users
final application application   application get
final iexceptionsettings settings   application getexceptionsettings
final page responsepage   requestcycle getresponsepage
page override   onruntimeexception responsepage  e
if  override    null
throw new restartresponseexception override
else if  e instanceof authorizationexception
// are authorization exceptions always thrown before the real
// render?
// else we need to make a page (see below) or set it hard to a
// redirect.
class accessdeniedpageclass   application getapplicationsettings
getaccessdeniedpage
throw new restartresponseatinterceptpageexception accessdeniedpageclass
else if  e instanceof pageexpiredexception
class pageexpirederrorpageclass   application getapplicationsettings
getpageexpirederrorpage
throw new restartresponseexception pageexpirederrorpageclass
else if  settings getunexpectedexceptiondisplay      iexceptionsettings show_no_exception_page
// we do not want to redirect - we want to inline the error output
// and preserve the url so when the refresh button is pressed we
// rerun the code that caused the error
requestcycle setredirect false
// figure out which error page to show
class internalerrorpageclass   application getapplicationsettings
getinternalerrorpage
class responseclass   responsepage    null ? responsepage getclass     null
if  responseclass    internalerrorpageclass
settings getunexpectedexceptiondisplay      iexceptionsettings show_internal_error_page
throw new restartresponseexception internalerrorpageclass
else if  responseclass    exceptionerrorpage class
// show full details
throw new restartresponseexception new exceptionerrorpage e  responsepage
else
// give up while we're ahead!
throw new wicketruntimeexception
internalerrorpageclass  e
/**
* creates a new request coding strategy instance. this is (typically)
* called once at the first time {@link #getrequestcodingstrategy()} is
* called.
*
* @return a new request coding strategy
*/
protected abstract irequestcodingstrategy newrequestcodingstrategy
/**
* this method is called when a runtime exception is thrown, just before the
* actual handling of the runtime exception. this implemention passes the
* call through to
* {@link requestcycle#onruntimeexception(page, runtimeexception)}. note
* that if you override this method or provide a whole new implementation of
* {@link iexceptionresponsestrategy} alltogether,
* {@link requestcycle#onruntimeexception(page, runtimeexception)} will not
* be supported.
*
* @param page
*            any page context where the exception was thrown
* @param e
*            the exception
* @return any error page to redirect to
*/
protected page onruntimeexception final page page  final runtimeexception e
return requestcycle get   onruntimeexception page  e
/**
* resolves to a bookmarkable page target.
*
* @param requestcycle
*            the current request cycle
* @param requestparameters
*            the request parameters object
* @return the bookmarkable page as a request target
*/
protected irequesttarget resolvebookmarkablepage final requestcycle requestcycle
final requestparameters requestparameters
string bookmarkablepageclass   requestparameters getbookmarkablepageclass
session session   requestcycle getsession
class pageclass
try
pageclass   session getclassresolver   resolveclass bookmarkablepageclass
catch  runtimeexception e
return new weberrorcoderesponsetarget httpservletresponse sc_not_found
try
pageparameters params   new pageparameters requestparameters getparameters
if  requestparameters getcomponentpath      null
requestparameters getinterfacename      null
final string componentpath   requestparameters getcomponentpath
final page page   session getpage requestparameters getpagemapname
componentpath  requestparameters getversionnumber
if  page    null    page getclass      pageclass
return resolvelistenerinterfacetarget requestcycle  page  componentpath
requestparameters getinterfacename    requestparameters
else
return new bookmarkablelistenerinterfacerequesttarget requestparameters
getpagemapname    pageclass  params  requestparameters
getcomponentpath    requestparameters getinterfacename
else
return new bookmarkablepagerequesttarget requestparameters getpagemapname
pageclass  params
catch  runtimeexception e
throw new wicketruntimeexception
bookmarkablepageclass      e
/**
* resolves to an external resource.
*
* @param requestcycle
*            the current request cycle
* @return the external resource request target
*/
protected irequesttarget resolveexternalresource requestcycle requestcycle
// get the relative url we need for loading the resource from
// the servlet context
// note: we need to put the '/' in front as otherwise some versions
// of application servers (e.g. jetty 5.1.x) will fail for requests
// like '/mysubdir/myfile.css'
final string url       requestcycle getrequest   geturl
return new webexternalresourcerequesttarget url
/**
* resolves to a home page target.
*
* @param requestcycle
*            the current request cycle.
* @param requestparameters
*            the request parameters object
* @return the home page as a request target
*/
protected irequesttarget resolvehomepagetarget final requestcycle requestcycle
final requestparameters requestparameters
session session   requestcycle getsession
application application   session getapplication
try
// get the home page class
class homepageclass   application gethomepage
pageparameters parameters   new pageparameters requestparameters getparameters
// and create a dummy target for looking up whether the home page is
// mounted
bookmarkablepagerequesttarget homepagetarget   new bookmarkablepagerequesttarget
homepageclass  parameters
irequestcodingstrategy requestcodingstrategy   requestcycle getprocessor
getrequestcodingstrategy
charsequence path   requestcodingstrategy pathfortarget homepagetarget
if  path    null
// the home page was mounted at the given path.
// issue a redirect to that path
requestcycle setredirect true
// else the home page was not mounted; render it now so
// that we will keep a clean path
return homepagetarget
catch  markupexception e
// markup exception should pass without modification. they show
// a nice error page
throw e
catch  wicketruntimeexception e
throw new wicketruntimeexception    e
/**
* resolves the requesttarget for the given interface. this method can be
* overriden if some special interface needs to resolve to its own target.
*
* @param requestcycle
*            the current requestcycle object
* @param page
*            the page object which holds the component for which this
*            interface is called on.
* @param componentpath
*            the component path for looking up the component in the page.
* @param interfacename
*            the interface to resolve.
* @param requestparameters
* @return the requesttarget that was resolved
*/
protected irequesttarget resolvelistenerinterfacetarget final requestcycle requestcycle
final page page  final string componentpath  final string interfacename
final requestparameters requestparameters
if  page    null
throw new illegalargumentexception
if  interfacename    null
throw new illegalargumentexception
if  interfacename equals iredirectlistener interface getname
return new redirectpagerequesttarget page
else if  interfacename equals inewbrowserwindowlistener interface getname
return inewbrowserwindowlistener interface newrequesttarget page  page
inewbrowserwindowlistener interface  requestparameters
else
// get the listener interface we need to call
final requestlistenerinterface listener   requestlistenerinterface
forname interfacename
if  listener    null
throw new wicketruntimeexception
interfacename
// get component
component component   null
final string pagerelativecomponentpath   strings afterfirstpathcomponent componentpath
component path_separator
if  strings isempty pagerelativecomponentpath
component   page
else
component   page get pagerelativecomponentpath
if  component    null
throw new wicketruntimeexception     pagerelativecomponentpath
page getclass   getname
page getnumericid         listener
if   component isenableallowed
throw new unauthorizedactionexception component  component enable
// ask the request listener interface object to create a request
// target
return listener newrequesttarget page  component  listener  requestparameters
/**
* resolves to a page target that was previously rendered. optionally
* resolves to a component call target, which is a specialization of a page
* target. if no corresponding page could be found, a expired page target
* will be returned.
*
* @param requestcycle
*            the current request cycle
* @param requestparameters
*            the request parameters object
* @return the previously rendered page as a request target
*/
protected irequesttarget resolverenderedpage final requestcycle requestcycle
final requestparameters requestparameters
final string componentpath   requestparameters getcomponentpath
final session session   requestcycle getsession
final page page   session getpage requestparameters getpagemapname    componentpath
requestparameters getversionnumber
// does page exist?
if  page    null
// set page on request
requestcycle getrequest   setpage page
// see whether this resolves to a component call or just the page
final string interfacename   requestparameters getinterfacename
if  interfacename    null
return resolvelistenerinterfacetarget requestcycle  page  componentpath
interfacename  requestparameters
else
return new pagerequesttarget page
else
// page could not be located in the session
throw new pageexpiredexception
requestparameters getpagemapname         componentpath
requestparameters getversionnumber
/**
* resolves to a shared resource target.
*
* @param requestcycle
*            the current request cycle
* @param requestparameters
*            the request parameters object
* @return the shared resource as a request target
*/
protected irequesttarget resolvesharedresource final requestcycle requestcycle
final requestparameters requestparameters
string resourcekey   requestparameters getresourcekey
return new sharedresourcerequesttarget requestparameters