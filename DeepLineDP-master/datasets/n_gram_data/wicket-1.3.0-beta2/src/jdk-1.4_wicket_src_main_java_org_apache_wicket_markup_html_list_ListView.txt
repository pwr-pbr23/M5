/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html list
import java io serializable
import java util collections
import java util iterator
import java util list
import org apache wicket component
import org apache wicket markup html link link
import org apache wicket markup repeater abstractrepeater
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket util collections readonlyiterator
import org apache wicket version undo change
/**
* a listview is a repeater that makes it easy to display/work with {@link list}s.
* however, there are situations where it is necessary to work with other
* collection types, for repeaters that might work better with non-list or
* database-driven collections see the org.apache.wicket.markup.repeater
* package.
*
* also notice that in a list the item's uniqueness/primary key/id is identified
* as its index in the list. if this is not the case you should either override
* {@link #getlistitemmodel(imodel, int)} to return a model that will work with
* the item's true primary key, or use a different repeater that does not rely
* on the list index.
*
*
* a listview holds listitem children. items can be re-ordered and deleted,
* either one at a time or many at a time.
* <p>
* example:
*
* <pre>
*                      &lt;tbody&gt;
*                        &lt;tr wicket:id=&quot;rows&quot; class=&quot;even&quot;&gt;
*                            &lt;td&gt;&lt;span wicket:id=&quot;id&quot;&gt;test id&lt;/span&gt;&lt;/td&gt;
*                        ...
* </pre>
*
* <p>
* though this example is about a html table, listview is not at all limited to
* html tables. any kind of list can be rendered using listview.
* <p>
* the related java code:
*
* <pre>
* add(new listview(&quot;rows&quot;, listdata)
* {
* 	public void populateitem(final listitem item)
* 	{
* 		final userdetails user = (userdetails)item.getmodelobject();
* 		item.add(new label(&quot;id&quot;, user.getid()));
* 	}
* });
* </pre>
*
* <p>
* <strong>note:</strong>
*
* when you want to change the default generated markup it is important to
* realise that the listview instance itself does not correspond to any markup,
* however, the generated listitems do.<br/>
*
* this means that methods like {@link #setrenderbodyonly(boolean)} and
* {@link #add(org.apache.wicket.behavior.ibehavior)} should be invoked on the
* {@link listitem} that is given in {@link #populateitem(listitem)} method.
* </p>
*
* <p>
* <strong>warning:</strong> though you can nest listviews within forms, you
* have to set the setreuseitems property to true in order to have validation
* work properly. by default, setreuseitems is false, which has the effect that
* listview replaces all child components by new instances. the idea behind this
* is that you always render the fresh data, and as people usually use listviews
* for displaying read-only lists (at least, that's what we think), this is good
* default behavior. <br />
* however, as the components are replaced before the rendering starts, the
* search for specific messages for these components fails as they are replaced
* with other instances. another problem is that 'wrong' user input is kept as
* (temporary) instance data of the components. as these components are replaced
* by new ones, your user will never see the wrong data when setreuseitems is
* false.
* </p>
*
* @author jonathan locke
* @author juergen donnerstag
* @author johan compagner
* @author eelco hillenius
*/
public abstract class listview extends abstractrepeater
/** index of the first item to show */
private int firstindex   0
/**
* if true, re-rendering the list view is more efficient if the window
* doesn't get changed at all or if it gets scrolled (compared to paging).
* but if you modify the listview model object, than you must manually call
* listview.removeall() in order to rebuild the listitems. if you nest a
* listview in a form, always set this property to true, as otherwise
* validation will not work properly.
*/
private boolean reuseitems   false
/** max number (not index) of items to show */
private int viewsize   integer max_value
/**
* @see org.apache.wicket.component#component(string)
*/
public listview final string id
super id
/**
* @see org.apache.wicket.component#component(string, imodel)
*/
public listview final string id  final imodel model
super id  model
if  model    null
throw new illegalargumentexception
// a reasonable default for viewsize can not be determined right now,
// because list items might be added or removed until listview
// gets rendered.
/**
* @param id
*            see component
* @param list
*            list to cast to serializable
* @see org.apache.wicket.component#component(string, imodel)
*/
public listview final string id  final list list
this id  new model  serializable list
/**
* gets the list of items in the listview. this method is final because it
* is not designed to be overridden. if it were allowed to be overridden,
* the values returned by getmodelobject() and getlist() might not coincide.
*
* @return the list of items in this list view.
*/
public final list getlist
final list list    list getmodelobject
if  list    null
return collections empty_list
return list
/**
* if true re-rendering the list view is more efficient if the windows
* doesn't get changed at all or if it gets scrolled (compared to paging).
* but if you modify the listview model object, than you must manually call
* listview.removeall() in order to rebuild the listitems. if you nest a
* listview in a form, allways set this property to true, as otherwise
* validation will not work properly.
*
* @return whether to reuse items
*/
public boolean getreuseitems
return reuseitems
/**
* get index of first cell in page. default is: 0.
*
* @return index of first cell in page. default is: 0
*/
public final int getstartindex
return this firstindex
/**
* based on the model object's list size, firstindex and view size,
* determine what the view size really will be. e.g. default for viewsize is
* integer.max_value, if not set via setviewsize(). if the underlying list
* has 10 elements, the value returned by getviewsize() will be 10 if
* startindex = 0.
*
* @return the number of items to be populated and rendered.
*/
public int getviewsize
int size   this viewsize
final object modelobject   getmodelobject
if  modelobject    null
return size    integer max_value ? 0   size
// adjust view size to model object's list size
final int modelsize   getlist   size
if  firstindex > modelsize
return 0
if   size    integer max_value       firstindex   size  > modelsize
size   modelsize   firstindex
// firstindex + size must be smaller than integer.max_value
if   integer max_value   size  < firstindex
throw new illegalstateexception
return size
/**
* returns a link that will move the given item "down" (towards the end) in
* the listview.
*
* @param id
*            name of move-down link component to create
* @param item
* @return the link component
*/
public final link movedownlink final string id  final listitem item
return new link id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.markup.html.link.link#onclick()
*/
public void onclick
final int index   getlist   indexof item getmodelobject
if  index     1
addstatechange new change
private static final long serialversionuid   1l
final int oldindex   index
public void undo
collections swap getlist    oldindex   1  oldindex
// swap list items and invalidate listview
collections swap getlist    index  index   1
listview this removeall
/**
* @see org.apache.wicket.component#onbeforerender()
*/
protected void onbeforerender
super onbeforerender
setautoenable false
if  getlist   indexof item getmodelobject        getlist   size     1
setenabled false
/**
* returns a link that will move the given item "up" (towards the beginning)
* in the listview.
*
* @param id
*            name of move-up link component to create
* @param item
* @return the link component
*/
public final link moveuplink final string id  final listitem item
return new link id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.markup.html.link.link#onclick()
*/
public void onclick
final int index   getlist   indexof item getmodelobject
if  index     1
addstatechange new change
private static final long serialversionuid   1l
final int oldindex   index
public void undo
collections swap getlist    oldindex   1  oldindex
// swap items and invalidate listview
collections swap getlist    index  index   1
listview this removeall
/**
* @see org.apache.wicket.component#onbeforerender()
*/
protected void onbeforerender
super onbeforerender
setautoenable false
if  getlist   indexof item getmodelobject       0
setenabled false
/**
* returns a link that will remove this listitem from the listview that
* holds it.
*
* @param id
*            name of remove link component to create
* @param item
* @return the link component
*/
public final link removelink final string id  final listitem item
return new link id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.markup.html.link.link#onclick()
*/
public void onclick
addstatechange new change
private static final long serialversionuid   1l
final int oldindex   getlist   indexof item getmodelobject
final object removedobject   item getmodelobject
public void undo
getlist   add oldindex  removedobject
item modelchanging
// remove item and invalidate listview
getlist   remove item getmodelobject
listview this modelchanged
listview this removeall
/**
* sets the model as the provided list and removes all children, so that the
* next render will be using the contents of the model.
*
* @param list
*            the list for the new model. the list must implement
*            {@link serializable}.
* @return this for chaining
*/
public component setlist list list
return setmodel new model  serializable list
/**
* sets the model and removes all current children, so that the next render
* will be using the contents of the model.
*
* @param model
*            the new model
* @return this for chaining
*
* @see org.apache.wicket.markupcontainer#setmodel(org.apache.wicket.model.imodel)
*/
public component setmodel imodel model
return super setmodel model
/**
* if true re-rendering the list view is more efficient if the windows
* doesn't get changed at all or if it gets scrolled (compared to paging).
* but if you modify the listview model object, than you must manually call
* listview.removeall() in order to rebuild the listitems. if you nest a
* listview in a form, allways set this property to true, as otherwise
* validation will not work properly.
*
* @param reuseitems
*            whether to reuse the child items.
* @return this
*/
public listview setreuseitems boolean reuseitems
this reuseitems   reuseitems
return this
/**
* set the index of the first item to render
*
* @param startindex
*            first index of model object's list to display
* @return this
*/
public listview setstartindex final int startindex
this firstindex   startindex
if  firstindex < 0
firstindex   0
else if  firstindex > getlist   size
firstindex   0
return this
/**
* define the maximum number of items to render. default: render all.
*
* @param size
*            number of items to display
* @return this
*/
public listview setviewsize final int size
this viewsize   size
if  viewsize < 0
viewsize   integer max_value
return this
/**
* subclasses may provide their own listitemmodel with extended
* functionality. the default listitemmodel works fine with mostly static
* lists where index remains valid. in cases where the underlying list
* changes a lot (many users using the application), it may not longer be
* appropriate. in that case your own listitemmodel implementation should
* use an id (e.g. the database' record id) to identify and load the list
* item model object.
*
* @param listviewmodel
*            the listview's model
* @param index
*            the list item index
* @return the listitemmodel created
*/
protected imodel getlistitemmodel final imodel listviewmodel  final int index
return new listitemmodel this  index
/**
* create a new listitem for list item at index.
*
* @param index
* @return listitem
*/
protected listitem newitem final int index
return new listitem index  getlistitemmodel getmodel    index
/**
* @see org.apache.wicket.markupcontainer#onbeforerender()
*/
protected void onbeforerender
super onbeforerender
if  isvisibleinhierarchy
// get number of items to be displayed
final int size   getviewsize
if  size > 0
if  getreuseitems
// remove all listitems no longer required
final int maxindex   firstindex   size
for  final iterator iterator   iterator    iterator hasnext
// get next child component
final listitem child    listitem iterator next
if  child    null
final int index   child getindex
if  index < firstindex    index >  maxindex
iterator remove
else
// automatically rebuild all listitems before rendering the
// list view
removeall
// loop through the markup in this container for each item
for  int i   0  i < size  i
// get index
final int index   firstindex   i
// if this component does not already exist, populate it
listitem item    listitem get integer tostring index
if  item    null
// create item for index
item   newitem index
// add list item
add item
// populate the list item
onbeginpopulateitem item
populateitem item
else
removeall
/**
* comes handy for ready made listview based components which must implement
* populateitem() but you don't want to lose compile time error checking
* reminding the user to implement abstract populateitem().
*
* @param item
*/
protected void onbeginpopulateitem final listitem item
/**
* populate a given item.
* <p>
* <b>be carefull</b> to add any components to the list item. so, don't do:
*
* <pre>
* add(new label(&quot;foo&quot;, &quot;bar&quot;));
* </pre>
*
* but:
*
* <pre>
* item.add(new label(&quot;foo&quot;, &quot;bar&quot;));
* </pre>
*
* </p>
*
* @param item
*            the item to populate
*/
protected abstract void populateitem final listitem item
/**
* @see org.apache.wicket.markup.repeater.abstractrepeater#renderchild(org.apache.wicket.component)
*/
protected final void renderchild component child
renderitem  listitem child
/**
* render a single item.
*
* @param item
*            the item to be rendered
*/
protected void renderitem final listitem item
item render getmarkupstream
/**
* @see org.apache.wicket.markup.repeater.abstractrepeater#renderiterator()
*/
protected iterator renderiterator
final int size   getviewsize
return new readonlyiterator
private int index   0
public boolean hasnext
return index < size
public object next
final string id   integer tostring firstindex   index
index
return get id