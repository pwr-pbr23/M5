/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io bufferedreader
import java io bytearrayinputstream
import java io chararrayreader
import java io fileinputstream
import java io ioexception
import java io stringwriter
import java io unsupportedencodingexception
import java net urlencoder
import java security principal
import java text dateformat
import java text parseexception
import java util arraylist
import java util collections
import java util enumeration
import java util hashmap
import java util iterator
import java util list
import java util locale
import java util map
import javax servlet requestdispatcher
import javax servlet servletcontext
import javax servlet servletinputstream
import javax servlet http cookie
import javax servlet http httpservletrequest
import javax servlet http httpsession
import org apache wicket application
import org apache wicket component
import org apache wicket ipagemap
import org apache wicket iredirectlistener
import org apache wicket iresourcelistener
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket markup html form form
import org apache wicket markup html form formcomponent
import org apache wicket markup html form iformsubmitlistener
import org apache wicket markup html form ionchangelistener
import org apache wicket markup html link bookmarkablepagelink
import org apache wicket markup html link ilinklistener
import org apache wicket protocol http request webrequestcodingstrategy
import org apache wicket util file file
import org apache wicket util lang classes
import org apache wicket util upload servletfileupload
import org apache wicket util value valuemap
import org slf4j logger
import org slf4j loggerfactory
/**
* mock servlet request. implements all of the methods from the standard
* httpservletrequest class plus helper methods to aid setting up a request.
*
* @author chris turner
*/
public class mockhttpservletrequest implements httpservletrequest
/**
* a holder class for an uploaded file.
*
* @author frank bille (billen)
*/
private class uploadedfile
private string fieldname
private file file
private string contenttype
/**
* construct.
*
* @param fieldname
* @param file
* @param contenttype
*/
public uploadedfile string fieldname  file file  string contenttype
this fieldname   fieldname
this file   file
this contenttype   contenttype
}
/**
* @return the content type of the file. mime type.
*/
public string getcontenttype
return contenttype
}
/**
* @param contenttype
*            the content type.
*/
public void setcontenttype string contenttype
this contenttype   contenttype
}
/**
* @return the field name.
*/
public string getfieldname
return fieldname
}
/**
* @param fieldname
*/
public void setfieldname string fieldname
this fieldname   fieldname
}
/**
* @return the uploaded file.
*/
public file getfile
return file
}
/**
* @param file
*/
public void setfile file file
this file   file
}
}
/** logging object */
private static final logger log   loggerfactory getlogger mockhttpservletrequest class
/** the application */
private final application application
private final valuemap attributes   new valuemap
private string authtype
private string characterencoding
private final servletcontext context
private final list cookies   new arraylist
private final valuemap headers   new valuemap
private string method
private final valuemap parameters   new valuemap
private string path
private final httpsession session
private string url
private map   <string  uploadedfile>   uploadedfiles
/**
* create the request using the supplied session object.
*
* @param application
*            the application that this request is for
* @param session
*            the session object
* @param context
*            the current servlet context
*/
public mockhttpservletrequest final application application  final httpsession session
final servletcontext context
this application   application
this session   session
this context   context
initialize
}
/**
* add a new cookie.
*
* @param cookie
*            the cookie
*/
public void addcookie final cookie cookie
cookies add cookie
}
/**
* add an uploaded file to the request. use this to simulate a file that has
* been uploaded to a field.
*
* @param fieldname
*            the fieldname of the upload field.
* @param file
*            the file to upload.
* @param contenttype
*            the content type of the file. must be a correct mimetype.
*/
public void addfile string fieldname  file file  string contenttype
if  file    null
throw new illegalargumentexception
}
if  file exists      false
throw new illegalargumentexception
file getabsolutepath
}
if  file isfile      false
throw new illegalargumentexception
}
if  uploadedfiles    null
uploadedfiles   new hashmap   <string  uploadedfile>
}
uploadedfile uf   new uploadedfile fieldname  file  contenttype
uploadedfiles put fieldname  uf
}
/**
* add a header to the request.
*
* @param name
*            the name of the header to add
* @param value
*            the value
*/
public void addheader string name  string value
list list    list headers get name
if  list    null
list   new arraylist 1
headers put name  list
}
list add value
}
/**
* get an attribute.
*
* @param name
*            the attribute name
* @return the value, or null
*/
public object getattribute final string name
return attributes get name
}
/**
* get the names of all of the values.
*
* @return the names
*/
public enumeration getattributenames
return collections enumeration attributes keyset
}
// httpservletrequest methods
/**
* get the auth type.
*
* @return the auth type
*/
public string getauthtype
return authtype
}
/**
* get the current character encoding.
*
* @return the character encoding
*/
public string getcharacterencoding
return characterencoding
}
/**
* return the length of the content. this is always -1 except if there has
* been added uploaded files. then the length will be the length of the
* generated request.
*
* @return -1 if no uploaded files has been added. else the length of the
*         generated request.
*/
public int getcontentlength
if  uploadedfiles    null    uploadedfiles size   > 0
string request   buildrequest
return request length
}
return  1
}
/**
* if there has been added uploaded files return the correct content-type.
*
* @return the correct multipart content-type if there has been added
*         uploaded files. else null.
*/
public string getcontenttype
if  uploadedfiles    null    uploadedfiles size   > 0
return servletfileupload multipart_form_data
}
return null
}
/**
* get the context path. for this mock implementation the name of the
* application is always returned.
*
* @return the context path
*/
public string getcontextpath
return     application getname
}
/**
* get all of the cookies for this request.
*
* @return the cookies
*/
public cookie getcookies
if  cookies size      0
return null
}
cookie result   new cookie
return  cookie cookies toarray result
}
/**
* get the given header as a date.
*
* @param name
*            the header name
* @return the date, or -1 if header not found
* @throws illegalargumentexception
*             if the header cannot be converted
*/
public long getdateheader final string name  throws illegalargumentexception
string value   getheader name
if  value    null
return  1
}
dateformat df   dateformat getdateinstance dateformat full
try
return df parse value  gettime
}
catch  parseexception e
throw new illegalargumentexception     name
value
}
}
/**
* get the given header value.
*
* @param name
*            the header name
* @return the header value or null
*/
public string getheader final string name
final list l    list headers get name
if  l    null    l size   < 1
return null
}
else
return  string l get 0
}
}
/**
* get the names of all of the headers.
*
* @return the header names
*/
public enumeration getheadernames
return collections enumeration headers keyset
}
/**
* get enumeration of all header values with the given name.
*
* @param name
*            the name
* @return the header values
*/
public enumeration getheaders final string name
list list    list headers get name
if  list    null
list   new arraylist
}
return collections enumeration list
}
/**
* returns an input stream if there has been added some uploaded files. use
* {@link #addfile(string, file, string)} to add some uploaded files.
*
* @return the input stream
* @throws ioexception
*             if an i/o related problem occurs
*/
public servletinputstream getinputstream   throws ioexception
if  uploadedfiles    null    uploadedfiles size   > 0
string request   buildrequest
// ok lets make an input stream to return
final bytearrayinputstream bais   new bytearrayinputstream request
getbytes
return new servletinputstream
public int read
return bais read
}
}
else
return new servletinputstream
public int read
return  1
}
}
}
/**
* get the given header as an int.
*
* @param name
*            the header name
* @return the header value or -1 if header not found
* @throws numberformatexception
*             if the header is not formatted correctly
*/
public int getintheader final string name
string value   getheader name
if  value    null
return  1
}
return integer valueof value  intvalue
}
/**
* get the locale of the request. attempts to decode the accept-language
* header and if not found returns the default locale of the jvm.
*
* @return the locale
*/
public locale getlocale
final string header   getheader
if  header    null
return locale getdefault
}
final string firstlocale   header split
if  firstlocale length < 1
return locale getdefault
}
final string bits   firstlocale split
if  bits length < 1
return locale getdefault
}
final string language   bits tolowercase
if  bits length > 1
final string country   bits touppercase
return new locale language  country
}
else
return new locale language
}
}
/**
* return all the accepted locales. this implementation always returns just
* one.
*
* @return the locales
*/
public enumeration getlocales
list list   new arraylist 1
list add getlocale
return collections enumeration list
}
/**
* get the method.
*
* @return the method
*/
public string getmethod
return method
}
/**
* get the request parameter with the given name.
*
* @param name
*            the parameter name
* @return the parameter value, or null
*/
public string getparameter final string name
return parameters getstring name
}
/**
* get the map of all of the parameters.
*
* @return the parameters
*/
public map getparametermap
return parameters
}
/**
* get the names of all of the parameters.
*
* @return the parameter names
*/
public enumeration getparameternames
return collections enumeration parameters keyset
}
/**
* get the values for the given parameter.
*
* @param name
*            the name of the parameter
* @return the return values
*/
public string getparametervalues final string name
object value   parameters get name
if  value    null
return new string
}
if  value instanceof string
return  string value
}
else
string result   new string
result   value tostring
return result
}
}
/**
* get the path info.
*
* @return the path info
*/
public string getpathinfo
return path
}
/**
* always returns null.
*
* @return null
*/
public string getpathtranslated
return null
}
/**
* get the protocol.
*
* @return always http/1.1
*/
public string getprotocol
return
}
/**
* get the query string part of the request.
*
* @return the query string
*/
public string getquerystring
if  parameters size      0
return null
}
else
final stringbuffer buf   new stringbuffer
try
for  iterator iterator   parameters keyset   iterator    iterator hasnext
final string name    string iterator next
final string value   parameters getstring name
buf append urlencoder encode name
buf append
buf append urlencoder encode value
if  iterator hasnext
buf append
}
}
}
catch  unsupportedencodingexception e
// should never happen!
}
return buf tostring
}
}
/**
* this feature is not implemented at this time as we are not supporting
* binary servlet input. this functionality may be added in the future.
*
* @return the reader
* @throws ioexception
*             if an i/o related problem occurs
*/
public bufferedreader getreader   throws ioexception
return new bufferedreader new chararrayreader new char
}
/**
* deprecated method - should not be used.
*
* @param name
*            the name
* @return the path
* @deprecated use servletcontext.getrealpath(string) instead.
*/
public string getrealpath string name
return context getrealpath name
}
/**
* get the remote address of the client.
*
* @return always 127.0.0.1
*/
public string getremoteaddr
return
}
/**
* get the remote host.
*
* @return always localhost
*/
public string getremotehost
return
}
/**
* get the name of the remote user from the remote_user header.
*
* @return the name of the remote user
*/
public string getremoteuser
return getheader
}
/**
* return a dummy dispatcher that just records that dispatch has occured
* without actually doing anything.
*
* @param name
*            the name to dispatch to
* @return the dispatcher
*/
public requestdispatcher getrequestdispatcher string name
return context getrequestdispatcher name
}
/**
* get the requested session id. always returns the id of the current
* session.
*
* @return the session id
*/
public string getrequestedsessionid
return session getid
}
/**
* returns context path and servlet path concatenated, typically /applicationclassname/applicationclassname
*
* @return the path value
* @see javax.servlet.http.httpservletrequest#getrequesturi()
*/
public string getrequesturi
if  url    null
return getcontextpath     getservletpath
}
return url
}
/**
* try to build a rough url.
*
* @return the url
*/
public stringbuffer getrequesturl
final stringbuffer buf   new stringbuffer
buf append
buf append getcontextpath
if  getpathinfo      null
buf append getpathinfo
}
final string query   getquerystring
if  query    null
buf append
buf append query
}
return buf
}
/**
* get the scheme.
*
* @return always http
*/
public string getscheme
return
}
/**
* get the server name.
*
* @return always localhost
*/
public string getservername
return
}
/**
* get the server port.
*
* @return always 80
*/
public int getserverport
return 80
}
/**
* the servlet path may either be the application name or /. for test
* purposes we always return the servlet name.
*
* @return the servlet path
*/
public string getservletpath
return getcontextpath
}
/**
* get the sessions.
*
* @return the session
*/
public httpsession getsession
return session
}
/**
* get the session.
*
* @param b
*            ignored, there is always a session
* @return the session
*/
public httpsession getsession boolean b
return session
}
/**
* get the user principal.
*
* @return a user principal
*/
public principal getuserprincipal
final string user   getremoteuser
if  user    null
return null
}
else
return new principal
public string getname
return user
}
}
}
/**
* @return true if there has been added files to this request using
*         {@link #addfile(string, file, string)}
*/
public boolean hasuploadedfiles
return uploadedfiles    null
}
/**
* reset the request back to a default state.
*/
public void initialize
authtype   null
method
cookies clear
setdefaultheaders
path   null
url   null
characterencoding
parameters clear
attributes clear
}
/**
* check whether session id is from a cookie. always returns true.
*
* @return always true
*/
public boolean isrequestedsessionidfromcookie
return true
}
/**
* check whether session id is from a url rewrite. always returns false.
*
* @return always false
*/
public boolean isrequestedsessionidfromurl
return false
}
/**
* check whether session id is from a url rewrite. always returns false.
*
* @return always false
*/
public boolean isrequestedsessionidfromurl
return false
}
/**
* check whether the session id is valid.
*
* @return always true
*/
public boolean isrequestedsessionidvalid
return true
}
/**
* always returns false.
*
* @return always false
*/
public boolean issecure
return false
}
/**
* not implemented.
*
* @param name
*            the role name
* @return always false
*/
public boolean isuserinrole string name
return false
}
/**
* remove the given attribute.
*
* @param name
*            the name of the attribute
*/
public void removeattribute final string name
attributes remove name
}
/**
* set the given attribute.
*
* @param name
*            the attribute name
* @param o
*            the value to set
*/
public void setattribute final string name  final object o
attributes put name  o
}
/**
* set the auth type.
*
* @param authtype
*            the auth type
*/
public void setauthtype final string authtype
this authtype   authtype
}
/**
* set the character encoding.
*
* @param encoding
*            the character encoding
* @throws unsupportedencodingexception
*             if encoding not supported
*/
public void setcharacterencoding final string encoding  throws unsupportedencodingexception
this characterencoding   encoding
}
/**
* set the cookies.
*
* @param thecookies
*            the cookies
*/
public void setcookies final cookie thecookies
cookies clear
for  int i   0  i < thecookies length  i
cookies add thecookies
}
}
/**
* set the method.
*
* @param method
*            the method
*/
public void setmethod final string method
this method   method
}
/**
* set a parameter.
*
* @param name
*            the name
* @param value
*            the value
*/
public void setparameter final string name  final string value
parameters put name  value
}
/**
* sets a map of parameters.
*
* @param parameters
*            the parameters to set
*/
public void setparameters final map parameters
this parameters putall parameters
}
/**
* set the path that this request is supposed to be serving. the path is
* relative to the web application root and should start with a / charater
*
* @param path
*/
public void setpath final string path
this path   path
}
/**
* set the complete url for this request. the url will be analyzed.
*
* @param url
*/
public void seturl string url
if  url startswith
int index   url indexof    7
url   url substring index
}
this url   url
if  url startswith getcontextpath
url   url substring getcontextpath   length
}
if  url startswith getservletpath
url   url substring getservletpath   length
}
int index   url indexof
if  index     1
path   url
}
else
path   url substring 0  index
string querystring   url substring index   1
requestutils decodeparameters querystring  parameters
}
}
/**
* initialise the request parameters to point to the given bookmarkable
* page.
*
* @param page
*            the page to point to
* @param params
*            additional parameters
*/
public void setrequesttobookmarkablepage final page page  final map params
parameters putall params
parameters put webrequestcodingstrategy bookmarkable_page_parameter_name  page getclass
getname
}
/**
* initialise the request parameters to point to the given component.
*
* @param component
*            the component
*/
public void setrequesttocomponent final component component
final ipagemap pagemap   component getpage   getpagemap
final string pagemapname   pagemap isdefault   ?     pagemap getname
if  component instanceof bookmarkablepagelink
final class clazz     bookmarkablepagelink component  getpageclass
parameters put webrequestcodingstrategy bookmarkable_page_parameter_name  pagemapname
clazz getname
}
else
int version   component getpage   getcurrentversionnumber
class clazz   null
if  component instanceof iredirectlistener
clazz   iredirectlistener class
}
else if  component instanceof iresourcelistener
clazz   iresourcelistener class
}
else if  component instanceof iformsubmitlistener
clazz   iformsubmitlistener class
}
else if  component instanceof ilinklistener
clazz   ilinklistener class
}
else if  component instanceof ionchangelistener
clazz   ionchangelistener class
}
else
throw new illegalargumentexception
component getclass
}
parameters put webrequestcodingstrategy interface_parameter_name  pagemapname
component getpath          version    0 ?         version
classes simplename clazz
if  component isstateless      component getpage   isbookmarkable
parameters put webrequestcodingstrategy bookmarkable_page_parameter_name  pagemapname
component getpage   getclass   getname
}
}
}
/**
* initialise the request parameters to point to the given form component.
* the additional map should contain mappings between individual components
* that appear in the form and the string value that should be submitted for
* each of these components.
*
* @param form
*            the for to send the request to
* @param values
*            the values for each of the form components
*/
public void setrequesttoformcomponent final form form  final map values
setrequesttocomponent form
final map valuesapplied   new hashmap
form visitchildren new component ivisitor
public object component final component component
if  component instanceof formcomponent
string value    string values get component
if  value    null
parameters put   formcomponent component  getinputname    values
get component
valuesapplied put component getid    component
}
}
return continue_traversal
}
if  values size      valuesapplied size
map diff   new hashmap
diff putall values
iterator iter   valuesapplied keyset   iterator
while  iter hasnext
diff remove iter next
}
log
error
diff keyset
}
}
/**
* initialise the request parameters from the given redirect string that
* redirects back to a particular component for display.
*
* @param redirect
*            the redirect string to display from
*/
public void setrequesttoredirectstring final string redirect
parameters clear
final string querystring   redirect substring redirect indexof      1
requestutils decodeparameters querystring  parameters
}
/**
* helper method to create some default headers for the request
*/
private void setdefaultheaders
headers clear
addheader
addheader("accept-charset", "iso-8859-1,utf-8;q=0.7,*;q=0.7");
locale l = locale.getdefault();
addheader("accept-language", l.getlanguage().tolowercase() + "-"
+ l.getcountry().tolowercase() + "," + l.getlanguage().tolowercase() + ";q=0.5");
addheader("user-agent",
"mozilla/5.0 (windows; u; windows nt 5.0; en-us; rv:1.7) gecko/20040707 firefox/0.9.2");
}
/**
* build the request based on the uploaded files and the parameters.
*
* @return the request as a string.
*/
private string buildrequest
// build up the input stream based on the files and parameters
stringbuffer issb   new stringbuffer
string crlf
string boundary
// add parameters
for  iterator iterator   parameters keyset   iterator    iterator hasnext
final string name    string iterator next
issb append boundary  append crlf
issb append
append crlf  append crlf
issb append parameters get name   append crlf
}
try
// add files
if  uploadedfiles    null
for  iterator iterator   uploadedfiles keyset   iterator    iterator hasnext
string fieldname    string iterator next
uploadedfile uf    uploadedfile uploadedfiles get fieldname
issb append boundary  append crlf
issb append  "  append fieldname
append    filename     append uf getfile   getname    append  "
append crlf
issb append    append uf getcontenttype    append crlf  append
crlf
// load the file and put it into the the inputstream
fileinputstream fis   new fileinputstream uf getfile
stringwriter sw   new stringwriter
byte data   new byte
int read   0
while   read   fis read data   > 0
sw write new string data  0  read
}
fis close
issb append sw getbuffer    append crlf
sw close
}
}
}
catch  ioexception e
// note: illegalstateexception(throwable) only exists since java 1.5
throw new wicketruntimeexception e
}
issb append boundary  append    append crlf
return issb tostring
}
}