/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser
import java util iterator
import java util map
import org apache wicket markup markupelement
import org apache wicket util lang enumeratedtype
import org apache wicket util lang objects
import org apache wicket util string appendingstringbuffer
import org apache wicket util string stringvalue
import org apache wicket util string strings
import org apache wicket util value ivaluemap
import org apache wicket util value valuemap
/**
* a subclass of markupelement which represents a tag including namespace and
* its optional attributes. xmltags are returned by the xml parser.
*
* @author jonathan locke
*/
public class xmltag extends markupelement
/** a close tag, like &lt;/tag&gt;. */
public static final type close   new type
/** an open tag, like &lt;tag componentid = "xyz"&gt;. */
public static final type open   new type
/** an open/close tag, like &lt;tag componentid = "xyz"/&gt;. */
public static final type open_close   new type
/** attribute map. */
private ivaluemap attributes
/** column number. */
int columnnumber
/** length of this tag in characters. */
int length
/** line number. */
int linenumber
/** name of tag, such as "img" or "input". */
string name
/** namespace of the tag, if available, such as &lt;wicket:link ...&gt; */
string namespace
/** position of this tag in the input that was parsed. */
int pos
/** full text of tag. */
charsequence text
/** the tag type (open, close or open_close). */
type type
/** any component tag that this tag closes. */
private xmltag closes
/** if mutable, the immutable tag that this tag is a mutable copy of. */
private xmltag copyof   this
/** true if this tag is mutable, false otherwise. */
private boolean ismutable   true
/** true if the name of this tag was changed. */
private boolean namechanged   false
/**
* enumerated type for different kinds of component tags.
*/
public static final class type extends enumeratedtype
private static final long serialversionuid   1l
/**
* construct.
*
* @param name
*            name of type
*/
type final string name
super name
/**
* construct.
*/
public xmltag
super
/**
* gets whether this tag closes the provided open tag.
*
* @param open
*            the open tag
* @return true if this tag closes the given open tag
*/
public final boolean closes final xmltag open
return  closes    open      closes    open copyof
/**
* @see org.apache.wicket.markup.markupelement#equalto(org.apache.wicket.markup.markupelement)
*/
public final boolean equalto final markupelement element
if  element instanceof xmltag
final xmltag that    xmltag element
if   objects equal getnamespace    that getnamespace
return false
if   getname   equals that getname
return false
if   getattributes   equals that getattributes
return false
return true
return false
/**
* gets a hashmap of this tag's attributes.
*
* @return the tag's attributes
*/
public ivaluemap getattributes
if  attributes    null
if   copyof    this      copyof    null      copyof attributes    null
attributes   new valuemap
else
attributes   new valuemap copyof attributes
return attributes
/**
* @return true if there 1 or more attributes.
*/
public boolean hasattributes
return attributes    null    attributes size   > 0
/**
* get the column number.
*
* @return returns the columnnumber.
*/
public int getcolumnnumber
return columnnumber
/**
* gets the length of the tag in characters.
*
* @return the tag's length
*/
public int getlength
return length
/**
* get the line number.
*
* @return returns the linenumber.
*/
public int getlinenumber
return linenumber
/**
* gets the name of the tag, for example the tag <code>&lt;b&gt;</code>'s
* name would be 'b'.
*
* @return the tag's name
*/
public string getname
return name
/**
* get whether the name of this component tag was changed.
*
* @return returns true if the name of this component tag was changed
*/
public boolean getnamechanged
return namechanged
/**
* namespace of the tag, if available. for example, &lt;wicket:link&gt;.
*
* @return the tag's namespace
*/
public string getnamespace
return namespace
/**
* assuming this is a close tag, return the corresponding open tag
*
* @return the open tag. null, if no open tag available
*/
public final xmltag getopentag
return closes
/**
* gets the location of the tag in the input string.
*
* @return tag location (index in input string)
*/
public int getpos
return pos
/**
* get a string attribute.
*
* @param key
*            the key
* @return the string value
*/
public charsequence getstring final string key
return getattributes   getcharsequence key
/**
* get the tag type.
*
* @return the tag type (open, close or open_close).
*/
public type gettype
return type
/**
* gets whether this is a close tag.
*
* @return true if this tag is a close tag
*/
public boolean isclose
return type    close
/**
*
* @return true, if tag is mutable
*/
public final boolean ismutable
return ismutable
/**
* gets whether this is an open tag.
*
* @return true if this tag is an open tag
*/
public boolean isopen
return type    open
/**
* gets whether this tag is an open/ close tag.
*
* @return true if this tag is an open and a close tag
*/
public boolean isopenclose
return type    open_close
/**
* compare tag name including namespace
*
* @param tag
* @return true if name and namespace are equal
*/
public boolean hasequaltagname final xmltag tag
if   getname   equalsignorecase tag getname
return false
if   getnamespace      null      tag getnamespace      null
return true
if   getnamespace      null      tag getnamespace      null
return getnamespace   equalsignorecase tag getnamespace
return false
/**
* makes this tag object immutable by making the attribute map unmodifiable.
* immutable tags cannot be made mutable again. they can only be copied into
* new mutable tag objects.
*/
public void makeimmutable
if  ismutable
ismutable   false
if  attributes    null
attributes makeimmutable
text   null
/**
* gets this tag if it is already mutable, or a mutable copy of this tag if
* it is immutable.
*
* @return this tag if it is already mutable, or a mutable copy of this tag
*         if it is immutable.
*/
public xmltag mutable
if  ismutable
return this
else
final xmltag tag   new xmltag
copypropertiesto tag
return tag
/**
* copies all internal properties from this tag to <code>dest</code>.
* this is basically cloning without instance creation.
*
* @param dest
*            tag whose properties will be set
*/
void copypropertiesto xmltag dest
dest namespace   namespace
dest name   name
dest pos   pos
dest length   length
dest text   text
dest type   type
dest ismutable   true
dest closes   closes
dest copyof   copyof
if  attributes    null
dest attributes   new valuemap attributes
/**
* puts a boolean attribute.
*
* @param key
*            the key
* @param value
*            the value
* @return previous value associated with specified key, or null if there
*         was no mapping for key. a null return can also indicate that the
*         map previously associated null with the specified key, if the
*         implementation supports null values.
*/
public object put final string key  final boolean value
return put key  boolean tostring value
/**
* puts an int attribute.
*
* @param key
*            the key
* @param value
*            the value
* @return previous value associated with specified key, or null if there
*         was no mapping for key. a null return can also indicate that the
*         map previously associated null with the specified key, if the
*         implementation supports null values.
*/
public object put final string key  final int value
return put key  integer tostring value
/**
* puts a string attribute.
*
* @param key
*            the key
* @param value
*            the value
* @return previous value associated with specified key, or null if there
*         was no mapping for key. a null return can also indicate that the
*         map previously associated null with the specified key, if the
*         implementation supports null values.
*/
public object put final string key  final charsequence value
return getattributes   put key  value
/**
* puts a {@link stringvalue}attribute.
*
* @param key
*            the key
* @param value
*            the value
* @return previous value associated with specified key, or null if there
*         was no mapping for key. a null return can also indicate that the
*         map previously associated null with the specified key, if the
*         implementation supports null values.
*/
public object put final string key  final stringvalue value
return getattributes   put key   value    null  ? value tostring     null
/**
* puts all attributes in map
*
* @param map
*            a key/value map
*/
public void putall final map map
for  final iterator iterator   map keyset   iterator    iterator hasnext
final string key    string iterator next
object value   map get key
put key   value    null  ? value tostring     null
/**
* removes an attribute.
*
* @param key
*            the key to remove
*/
public void remove final string key
getattributes   remove key
/**
* sets the tag name.
*
* @param name
*            new tag name
*/
public void setname final string name
if  ismutable
this name   name
this namechanged   true
else
throw new unsupportedoperationexception
/**
* sets the tag namespace.
*
* @param namespace
*            new tag name
*/
public void setnamespace final string namespace
if  ismutable
this namespace   namespace
this namechanged   true
else
throw new unsupportedoperationexception
/**
* assuming this is a close tag, assign it's corresponding open tag.
*
* @param tag
*            the open-tag
* @throws runtimeexception
*             if 'this' is not a close tag
*/
public void setopentag final xmltag tag
this closes   tag
/**
* sets type of this tag if it is not immutable.
*
* @param type
*            the new type
*/
public void settype final type type
if  ismutable
this type   type
else
throw new unsupportedoperationexception
/**
* converts this object to a string representation.
*
* @return string version of this object
*/
public string todebugstring
return     name       pos       linenumber
length       getattributes         type
/**
* converts this object to a string representation.
*
* @return string version of this object
*/
public string tostring
return tocharsequence   tostring
/**
* @see org.apache.wicket.markup.markupelement#tocharsequence()
*/
public charsequence tocharsequence
if   ismutable     text    null
return text
return toxmlstring null
/**
* converts this object to a string representation.
*
* @return string version of this object
*/
public string touserdebugstring
return     tostring         linenumber       columnnumber
/**
* assuming some attributes have been changed, toxmlstring() rebuilds the
* string on based on the tags informations.
*
* @param attributetobeignored
* @return a xml string matching the tag
*/
public charsequence toxmlstring final string attributetobeignored
final appendingstringbuffer buffer   new appendingstringbuffer
buffer append
if  type    close
buffer append
if  namespace    null
buffer append namespace
buffer append
buffer append name
final ivaluemap attributes   getattributes
if  attributes size   > 0
final iterator iterator   attributes keyset   iterator
for    iterator hasnext
final string key    string iterator next
if   key    null
attributetobeignored    null      key
equalsignorecase attributetobeignored
buffer append
buffer append key
charsequence value   getstring key
// attributes without values are possible, e.g. 'disabled'
if  value    null
buffer append  "
value   strings replaceall value
buffer append value
buffer append  "
if  type    open_close
buffer append
buffer append
return buffer