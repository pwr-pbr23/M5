/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http servlet
import java util hashmap
import java util locale
import java util map
import javax servlet http httpservletrequest
import org apache wicket application
import org apache wicket iredirectlistener
import org apache wicket requestlistenerinterface
import org apache wicket wicketruntimeexception
import org apache wicket protocol http webapplication
import org apache wicket protocol http webrequest
import org apache wicket util lang bytes
import org apache wicket util string prependingstringbuffer
import org apache wicket util string stringvalueconversionexception
import org apache wicket util string strings
import org apache wicket util upload fileuploadexception
import org slf4j logger
import org slf4j loggerfactory
/**
* a servlet specific webrequest implementation wrapping a httpservletrequest
*
* @author ate douma
*/
public class servletwebrequest extends webrequest
/** log */
private static final logger log   loggerfactory getlogger servletwebrequest class
/** servlet request information. */
private final httpservletrequest httpservletrequest
private int depthrelativetowickethandler    1
private string relativepathprefixtowickethandler
private string relativepathprefixtocontextroot
private map parametermap
private string wicketredirecturl
/**
* protected constructor.
*
* @param httpservletrequest
*            the servlet request information
*/
public servletwebrequest final httpservletrequest httpservletrequest
this httpservletrequest   httpservletrequest
/**
* gets the wrapped http servlet request object.
*
* @return the wrapped http serlvet request object.
*/
public final httpservletrequest gethttpservletrequest
return httpservletrequest
/**
* returns the preferred <code>locale</code> that the client will accept
* content in, based on the accept-language header. if the client request
* doesn't provide an accept-language header, this method returns the
* default locale for the server.
*
* @return the preferred <code>locale</code> for the client
*/
public locale getlocale
return httpservletrequest getlocale
/**
* gets the request parameter with the given key.
*
* @param key
*            parameter name
* @return parameter value
*/
public string getparameter final string key
return httpservletrequest getparameter key
/**
* gets the request parameters.
*
* @return map of parameters
*/
public map getparametermap
// lazy-init parameter map. only make one copy. it's more efficient, and
// we can add stuff to it (which the bookmarkablepage stuff does).
if  parametermap    null
parametermap   new hashmap httpservletrequest getparametermap
// return a mutable copy
return parametermap
/**
* gets the request parameters with the given key.
*
* @param key
*            parameter name
* @return parameter values
*/
public string getparameters final string key
return httpservletrequest getparametervalues key
/**
* gets the path info if any.
*
* @return any servlet path info
*/
public string getpath
return   webapplication application get    getwicketfilter   getrelativepath
httpservletrequest
public string getrelativepathprefixtocontextroot
if  relativepathprefixtocontextroot    null
return relativepathprefixtocontextroot
// prepend to get back to the wicket handler.
string tmp   getrelativepathprefixtowickethandler
prependingstringbuffer prepender   new prependingstringbuffer tmp
string path   strings replaceall getpath          tostring
if  path    null    path length      0
path
// now prepend to get back from the wicket handler to the root context.
// find the absolute path for the wicket filter/servlet
string wicketpath
// we're running as a filter.
string servletpath   strings replaceall getservletpath          tostring
// we need to substibute the %3a (or the other way around) to be able to
// get a good match, as parts of the path may have been escaped while
// others arent
if  servletpath endswith path
int len   servletpath length     path length     1
if  len < 0
len   0
wicketpath   servletpath substring 0  len
// we're running as a servlet
else
wicketpath   servletpath
for  int i   0  i < wicketpath length    i
if  wicketpath charat i
prepender prepend
return relativepathprefixtocontextroot   prepender tostring
/**
* gets the depth of this request relative to the wicket handler.
*
* @return
*/
public int getdepthrelativetowickethandler
if  depthrelativetowickethandler     1
// initialize it.
getrelativepathprefixtowickethandler
return depthrelativetowickethandler
public string getrelativepathprefixtowickethandler
if  relativepathprefixtowickethandler    null
return relativepathprefixtowickethandler
prependingstringbuffer prepender   new prependingstringbuffer
// for ajax requests, we need to make the urls relative to the
// original page.
if  isajax
for  int i   0  i < getrequestparameters   geturldepth    i
prepender prepend
return relativepathprefixtowickethandler   prepender tostring
string relativeurl   getpath
/*
* we might be serving an error page.
*
* in this case, the request will appear to be for something like
* "/errorpage", whereas the url in the user's browser will actually be
* something like "/foo/page/where/the/error/actually/happened".
*
* we need to generate links and resource urls relative to the url in
* the browser window, not the internal request for the error page.
*
* this original url is available from request attributes, so we look in
* there and use that for the relative path if it's available.
*/
httpservletrequest httprequest   gethttpservletrequest
// this is in the servlet 2.3 spec giving us the uri of the resource
// that caused the error. unfortunately, this includes the context path.
string errorurl    string httprequest getattribute
// this gives us a context-relative path for requestdispatcher.forward
// stuff, with a leading slash.
string forwardurl    string httprequest getattribute
if  forwardurl    null
// if this is an error page, this will be /mount or /?wicket:foo
relativeurl   forwardurl substring 1
else if  errorurl    null
// strip off context path from front of uri.
errorurl   errorurl substring httprequest getcontextpath   length
string servletpath   httprequest getservletpath
if   errorurl startswith servletpath
prepender prepend servletpath substring 1
for  int i   servletpath length     1  i < errorurl length    i
if  errorurl charat i
break
if  errorurl charat i
prepender prepend
return relativepathprefixtowickethandler   prepender tostring
else if  wicketredirecturl    null
relativeurl   wicketredirecturl
if  depthrelativetowickethandler     1
int depth   0
for  int i   0  i < relativeurl length    i
if  relativeurl charat i
break
if  relativeurl charat i
depth
depthrelativetowickethandler   depth
for  int i   0  i < depthrelativetowickethandler  i
prepender prepend
return relativepathprefixtowickethandler   prepender tostring
/**
* @see org.apache.wicket.request#geturl()
*/
public string geturl
/*
* servlet 2.3 specification :
*
* servlet path: the path section that directly corresponds to the
* mapping which activated this request. this path starts with a "/"
* character except in the case where the request is matched with the
* "/*" pattern, in which case it is the empty string.
*
* pathinfo: the part of the request path that is not part of the
* context path or the servlet path. it is either null if there is no
* extra path, or is a string with a leading "/".
*/
string url   getservletpath
final string pathinfo   httpservletrequest getpathinfo
if  pathinfo    null
url    pathinfo
final string querystring   httpservletrequest getquerystring
if  querystring    null
url         querystring
// if url is non-empty it will start with '/', which we should lose
if  url length   > 0    url charat 0
// remove leading '/'
url   url substring 1
return url
/**
* gets the servlet path.
*
* @return servlet path
*/
public string getservletpath
return httpservletrequest getservletpath
/**
* this will return true if the header "wicket-ajax" is set.
*
* @see org.apache.wicket.protocol.http.webrequest#isajax()
*/
// todo matej? should we have a simple way of supporting other ajax things?
// or should they just set that same header??
public boolean isajax
boolean ajax   false
string ajaxheader   httpservletrequest getheader
if  strings isempty ajaxheader     false
try
ajax   strings istrue ajaxheader
catch  stringvalueconversionexception e
// we are not interested in this exception but we log it anyway
log debug     ajaxheader
return ajax
/**
* this method by default calls isajax(), wicket ajax request do have an
* header set. and for all the ajax request the versioning should be merged
* with the previous one. and when it sees that the current request is a
* redirect to page request the version will also be merged with the
* previous one because refresh in the browser or redirects to a page
* shouldn't generate a new version.
*
* @see org.apache.wicket.request#mergeversion()
*/
public boolean mergeversion
requestlistenerinterface intface   getrequestparameters   getinterface
return isajax      intface    iredirectlistener interface
/**
* @see org.apache.wicket.protocol.http.webrequest#newmultipartwebrequest(org.apache.wicket.util.lang.bytes)
*/
public webrequest newmultipartwebrequest bytes maxsize
try
return new multipartservletwebrequest httpservletrequest  maxsize
catch  fileuploadexception e
throw new wicketruntimeexception e
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     httpservletrequest getmethod
httpservletrequest getprotocol
httpservletrequest getrequesturl
httpservletrequest getcontenttype
httpservletrequest getcontentlength
httpservletrequest getcontextpath
httpservletrequest getpathinfo
httpservletrequest getrequesturi
httpservletrequest getservletpath
httpservletrequest getpathtranslated
/**
* set the redirect url where wicket will redirect to for the next page
*
* @param wicketredirecturl
*/
public void setwicketredirecturl string wicketredirecturl
this wicketredirecturl   wicketredirecturl
depthrelativetowickethandler    1
relativepathprefixtocontextroot   null
relativepathprefixtowickethandler   null
getrequestparameters   seturldepth getdepthrelativetowickethandler