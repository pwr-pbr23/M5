/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io externalizable
import java io ioexception
import java io notserializableexception
import java io objectoutput
import java io objectoutputstream
import java io objectstreamclass
import java io objectstreamfield
import java io outputstream
import java io serializable
import java lang reflect field
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect proxy
import java util date
import java util hashmap
import java util identityhashmap
import java util iterator
import java util linkedlist
import java util map
import org apache wicket component
import org apache wicket wicketruntimeexception
import org slf4j logger
import org slf4j loggerfactory
/**
* utility class that analyzes objects for non-serializable nodes. construct
* with the object you want to check, and then call {@link #check()}. when a
* non-serializable object is found, a {@link wicketnotserializableexception} is
* thrown with a message that shows the trace up to the not-serializable object.
* the exception is thrown for the first non-serializable instance it
* encounters, so multiple problems will not be shown.
* <p>
* as this class depends heavily on jdk's serialization internals using
* introspection, analyzing may not be possible, for instance when the runtime
* environment does not have sufficient rights to set fields accesible that
* would otherwise be hidden. you should call
* {@link serializablechecker#isavailable()} to see whether this class can
* operate properly. if it doesn't, you should fall back to e.g. re-throwing/
* printing the {@link notserializableexception} you probably got before using
* this class.
* </p>
*
* @author eelcohillenius
* @author al maw
*/
public final class serializablechecker extends objectoutputstream
/**
* exception that is thrown when a non-serializable object was found.
*/
public static final class wicketnotserializableexception extends wicketruntimeexception
private static final long serialversionuid   1l
wicketnotserializableexception string message  throwable cause
super message  cause
/**
* does absolutely nothing.
*/
private static class noopoutputstream extends outputstream
public void close
public void flush
public void write byte b
public void write byte b  int i  int l
public void write int b
private static abstract class objectoutputadaptor implements objectoutput
public void close   throws ioexception
public void flush   throws ioexception
public void write byte b  throws ioexception
public void write byte b  int off  int len  throws ioexception
public void write int b  throws ioexception
public void writeboolean boolean v  throws ioexception
public void writebyte int v  throws ioexception
public void writebytes string s  throws ioexception
public void writechar int v  throws ioexception
public void writechars string s  throws ioexception
public void writedouble double v  throws ioexception
public void writefloat float v  throws ioexception
public void writeint int v  throws ioexception
public void writelong long v  throws ioexception
public void writeshort int v  throws ioexception
public void writeutf string str  throws ioexception
/** holds information about the field and the resulting object being traced. */
private static final class traceslot
private final string fielddescription
private final object object
traceslot object object  string fielddescription
super
this object   object
this fielddescription   fielddescription
public string tostring
return object getclass         fielddescription
private static final noopoutputstream dummy_output_stream   new noopoutputstream
/** log. */
private static final logger log   loggerfactory getlogger serializablechecker class
/** whether we can execute the tests. if false, check will just return. */
private static boolean available   true
// this hack - accessing the serialization api through introspection - is
// the only way to use java serialization for our purposes without writing
// the whole thing from scratch (and even then, it would be limited). this
// way of working is of course fragile for internal api changes, but as we
// do an extra check on availability and we report when we can't use this
// introspection fu, we'll find out soon enough and clients on this class
// can fall back on java's default exception for serialization errors (which
// sucks and is the main reason for this attempt).
private static final method lookup_method
private static final method get_class_data_layout_method
private static final method get_num_obj_fields_method
private static final method get_obj_field_values_method
private static final method get_field_method
private static final method has_write_replace_method_method
private static final method invoke_write_replace_method
static
try
lookup_method   objectstreamclass class getdeclaredmethod    new class
class class  boolean type
lookup_method setaccessible true
get_class_data_layout_method   objectstreamclass class getdeclaredmethod

get_class_data_layout_method setaccessible true
get_num_obj_fields_method   objectstreamclass class getdeclaredmethod

get_num_obj_fields_method setaccessible true
get_obj_field_values_method   objectstreamclass class getdeclaredmethod
new class   object class  object class
get_obj_field_values_method setaccessible true
get_field_method   objectstreamfield class getdeclaredmethod    null
get_field_method setaccessible true
has_write_replace_method_method   objectstreamclass class getdeclaredmethod

has_write_replace_method_method setaccessible true
invoke_write_replace_method   objectstreamclass class getdeclaredmethod
new class   object class
invoke_write_replace_method setaccessible true
catch  securityexception e
available   false
throw new runtimeexception e
catch  nosuchmethodexception e
available   false
throw new runtimeexception e
/**
* gets whether we can execute the tests. if false, calling {@link #check()}
* will just return and you are advised to rely on the
* {@link notserializableexception}. clients are advised to call this
* method prior to calling the check method.
*
* @return whether security settings and underlying api etc allow for
*         accessing the serialization api using introspection
*/
public static boolean isavailable
return available
/** object stack that with the trace path. */
private final linkedlist tracestack   new linkedlist
/** set for checking circular references. */
private final map checked   new identityhashmap
/** string stack with current names pushed. */
private linkedlist namestack   new linkedlist
/** root object being analyzed. */
private object root
/** cache for classes - writeobject methods. */
private map writeobjectmethodcache   new hashmap
/** current simple field name. */
private string simplename
/** current full field description. */
private string fielddescription
/** exception that should be set as the cause when throwing a new exception. */
private notserializableexception exception
/**
* construct.
*
* @param exception
*            exception that should be set as the cause when throwing a new
*            exception
*
* @throws ioexception
*/
public serializablechecker notserializableexception exception  throws ioexception
this exception   exception
/**
* @see java.io.objectoutputstream#reset()
*/
public void reset   throws ioexception
root   null
checked clear
fielddescription   null
simplename   null
tracestack clear
namestack clear
writeobjectmethodcache clear
private void check object obj
if  obj    null
return
class cls   obj getclass
namestack add simplename
tracestack add new traceslot obj  fielddescription
if    obj instanceof serializable       proxy isproxyclass cls
throw new wicketnotserializableexception toprettyprintedstack obj getclass   getname
tostring    exception
objectstreamclass desc
for
try
desc    objectstreamclass lookup_method invoke null  new object   cls
boolean true
class repcl
if     boolean has_write_replace_method_method invoke desc  null   booleanvalue
obj   invoke_write_replace_method invoke desc  new object   obj        null
repcl   obj getclass       cls
break
cls   repcl
catch  illegalaccessexception e
throw new runtimeexception e
catch  invocationtargetexception e
throw new runtimeexception e
if  cls isprimitive
// skip
else if  cls isarray
checked put obj  null
class ccl   cls getcomponenttype
if    ccl isprimitive
object objs    object obj
for  int i   0  i < objs length  i
string arraypos       i
simplename   arraypos
fielddescription    arraypos
check objs
else if  obj instanceof externalizable      proxy isproxyclass cls
externalizable extobj    externalizable obj
try
extobj writeexternal new objectoutputadaptor
private int count   0
public void writeobject object streamobj  throws ioexception
// check for circular reference.
if  checked containskey streamobj
return
checked put streamobj  null
string arraypos       count
simplename   arraypos
fielddescription    arraypos
check streamobj
catch  exception e
if  e instanceof wicketnotserializableexception
throw  wicketnotserializableexception e
log warn     e getmessage
currentpath
else
method writeobjectmethod   null
object o   writeobjectmethodcache get cls
if  o    null
if  o instanceof method
writeobjectmethod    method o
else
try
writeobjectmethod   cls getdeclaredmethod
new class   java io objectoutputstream class
catch  securityexception e
// we can't access/ set accessible to true
writeobjectmethodcache put cls  boolean false
catch  nosuchmethodexception e
// cls doesn't have that method
writeobjectmethodcache put cls  boolean false
final object original   obj
if  writeobjectmethod    null
class interceptingobjectoutputstream extends objectoutputstream
private int counter
interceptingobjectoutputstream   throws ioexception
super dummy_output_stream
enablereplaceobject true
protected object replaceobject object streamobj  throws ioexception
if  streamobj    original
return streamobj
counter
// check for circular reference.
if  checked containskey streamobj
return null
checked put original  null
string arraypos       counter
simplename   arraypos
fielddescription    arraypos
check streamobj
return streamobj
try
interceptingobjectoutputstream ioos   new interceptingobjectoutputstream
ioos writeobject obj
catch  exception e
if  e instanceof wicketnotserializableexception
throw  wicketnotserializableexception e
log warn     e getmessage
currentpath
else
object slots
try
slots    object get_class_data_layout_method invoke desc  null
catch  exception e
throw new runtimeexception e
for  int i   0  i < slots length  i
objectstreamclass slotdesc
try
field descfield   slots getclass   getdeclaredfield
descfield setaccessible true
slotdesc    objectstreamclass descfield get slots
catch  exception e
throw new runtimeexception e
checked put obj  null
checkfields obj  slotdesc
tracestack removelast
namestack removelast
private void checkfields object obj  objectstreamclass desc
int numfields
try
numfields     integer get_num_obj_fields_method invoke desc  null   intvalue
catch  illegalaccessexception e
throw new runtimeexception e
catch  invocationtargetexception e
throw new runtimeexception e
if  numfields > 0
int numprimfields
objectstreamfield fields   desc getfields
object objvals   new object
numprimfields   fields length   objvals length
try
get_obj_field_values_method invoke desc  new object   obj  objvals
catch  illegalaccessexception e
throw new runtimeexception e
catch  invocationtargetexception e
throw new runtimeexception e
for  int i   0  i < objvals length  i
if  objvals instanceof string    objvals instanceof number
objvals instanceof date    objvals instanceof boolean
objvals instanceof class
// fitler out common cases
continue
// check for circular reference.
if  checked containskey objvals
continue
objectstreamfield fielddesc   fields
field field
try
field    field get_field_method invoke fielddesc  null
catch  illegalaccessexception e
throw new runtimeexception e
catch  invocationtargetexception e
throw new runtimeexception e
string fieldname   field getname
simplename   field getname
fielddescription   field tostring
check objvals
/**
* @return name from root to current node concatted with slashes
*/
private stringbuffer currentpath
stringbuffer b   new stringbuffer
for  iterator it   namestack iterator    it hasnext
b append it next
if  it hasnext
b append
return b
/**
* dump with identation.
*
* @param type
*            the type that couldn't be serialized
* @return a very pretty dump
*/
private final string toprettyprintedstack string type
stringbuffer result   new stringbuffer
stringbuffer spaces   new stringbuffer
result append
result append type
result append
for  iterator i   tracestack listiterator    i hasnext
spaces append
traceslot slot    traceslot i next
result append    append spaces  append slot fielddescription
result append    append slot object getclass   getname
if  slot object instanceof component
component component    component slot object
result append    append component getpath
result append
result append
return result tostring
/**
* @see java.io.objectoutputstream#writeobjectoverride(java.lang.object)
*/
protected final void writeobjectoverride object obj  throws ioexception
if   available
return
root   obj
if  fielddescription    null
fielddescription    root instanceof component  ?   component root  getpath
check root