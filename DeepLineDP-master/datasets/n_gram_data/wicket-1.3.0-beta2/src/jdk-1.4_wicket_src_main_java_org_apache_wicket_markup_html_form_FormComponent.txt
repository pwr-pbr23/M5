/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java text format
import java text simpledateformat
import java util arraylist
import java util collections
import java util hashmap
import java util iterator
import java util list
import java util locale
import java util map
import org apache wicket component
import org apache wicket localizer
import org apache wicket markupcontainer
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket model imodel
import org apache wicket util convert conversionexception
import org apache wicket util convert iconverter
import org apache wicket util lang classes
import org apache wicket util string prependingstringbuffer
import org apache wicket util string stringlist
import org apache wicket util string strings
import org apache wicket util string interpolator mapvariableinterpolator
import org apache wicket validation ierrormessagesource
import org apache wicket validation inullacceptingvalidator
import org apache wicket validation ivalidatable
import org apache wicket validation ivalidationerror
import org apache wicket validation ivalidator
import org apache wicket validation ivalidatoraddlistener
import org apache wicket validation validationerror
import org apache wicket version undo change
/**
* an html form component knows how to validate itself. validators that
* implement ivalidator can be added to the component. they will be evaluated in
* the order they were added and the first validator that returns an error
* message determines the error message returned by the component.
* <p>
* formcomponents are not versioned by default. if you need versioning for your
* formcomponents, you will need to call form.setversioned(true), which will set
* versioning on for the form and all form component children.
* <p>
* if this component is required and that fails, the error key that is used is
* the "required"; if the type conversion fails, it will use the key
* "iconverter". the keys that can be used in both are:
* <ul>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component</li>
* </ul>
*
* @author jonathan locke
* @author eelco hillenius
* @author johan compagner
* @author igor vaynberg (ivaynberg)
*/
public abstract class formcomponent extends labeledwebmarkupcontainer implements iformvisitorparticipant
/**
* visitor for traversing form components
*/
public static abstract class abstractvisitor implements ivisitor
/**
* @see org.apache.wicket.markup.html.form.formcomponent.ivisitor#formcomponent(org.apache.wicket.markup.html.form.formcomponent)
*/
public object formcomponent iformvisitorparticipant component
if  component instanceof formcomponent
onformcomponent  formcomponent component
return component ivisitor continue_traversal
protected abstract void onformcomponent formcomponent formcomponent
/**
* typesafe interface to code that is called when visiting a form component.
*/
public static interface ivisitor
/**
* called when visiting a form component
*
* @param formcomponent
*            the form component
* @return component
*/
public object formcomponent iformvisitorparticipant formcomponent
/**
* {@link ierrormessagesource} used for error messags against this form
* components.
*
* @author ivaynberg
*/
private class messagesource implements ierrormessagesource
/**
* @see org.apache.wicket.validation.ierrormessagesource#getmessage(java.lang.string)
*/
public string getmessage string key
final formcomponent formcomponent   formcomponent this
// retrieve prefix that will be used to construct message keys
string prefix   formcomponent getvalidatorkeyprefix
if  strings isempty prefix
prefix
final localizer localizer   formcomponent getlocalizer
string resource   prefix   getid         key
// first use the parent for resolving so that
// form1.textfield1.required can be used.
// note: it is important that the default value of "" is provided
// to getstring() not to throw a missingresourceexception or to
// return a default string like "[warning: string ..."
string message   localizer getstring resource  formcomponent getparent
// if not found, than ...
if  strings isempty message
// try a variation of the resource key
resource   prefix   key
message   localizer getstring resource  formcomponent getparent
if  strings isempty message
// if still empty then use default
resource   prefix   getid         key
// note: it is important that the default value of "" is
// provided
// to getstring() not to throw a missingresourceexception or to
// return a default string like "[warning: string ..."
message   localizer getstring resource  formcomponent
// if not found, than ...
if  strings isempty message
// try a variation of the resource key
resource   prefix   key
message   localizer getstring resource  formcomponent
// convert empty string to null in case our default value of "" was
// returned from localizer
if  strings isempty message
message   null
return message
/**
* @see org.apache.wicket.validation.ierrormessagesource#substitute(java.lang.string,
*      java.util.map)
*/
public string substitute string string  map vars  throws illegalstateexception
return new mapvariableinterpolator string  adddefaultvars vars   true  tostring
/**
* creates a new params map that additionaly contains the default input,
* name, label parameters
*
* @param params
*            original params map
* @return new params map
*/
private map adddefaultvars map params
// create and fill the new params map
final hashmap fullparams
if  params    null
fullparams   new hashmap 6
else
fullparams   new hashmap params size     6
fullparams putall params
// add the input param if not already present
if   fullparams containskey
fullparams put    formcomponent this getinput
// add the name param if not already present
if   fullparams containskey
fullparams put    formcomponent this getid
// add the label param if not already present
if   fullparams containskey
fullparams put    getlabel
return fullparams
/**
* @return value of label param for this form component
*/
private object getlabel
final formcomponent fc   formcomponent this
object label   null
// first try the label model ...
if  fc getlabel      null
label   fc getlabel   getobject
// ... then try a resource of format [form-component-id] with
// default of '[form-component-id]'
if  label    null
label   fc getlocalizer   getstring fc getid    fc getparent    fc getid
return label
/**
* change object to capture the required flag change
*
* @author igor vaynberg (ivaynberg)
*/
private final class requiredstatechange extends change
private static final long serialversionuid   1l
private final boolean required   isrequired
/**
* @see org.apache.wicket.version.undo.change#undo()
*/
public void undo
setrequired required
/**
* adapter that makes this component appear as {@link ivalidatable}
*
* @author ivaynberg
*/
private class validatableadapter implements ivalidatable
/**
* @see org.apache.wicket.validation.ivalidatable#error(org.apache.wicket.validation.ivalidationerror)
*/
public void error ivalidationerror error
formcomponent this error error
/**
* @see org.apache.wicket.validation.ivalidatable#getvalue()
*/
public object getvalue
return formcomponent this getconvertedinput
public boolean isvalid
return formcomponent this isvalid
/**
* the value separator
*/
public static string value_separator
private static final string empty_string_array   new string
/**
* whether this form component should save and restore state between
* sessions. this is false by default.
*/
private static final short flag_persistent   flag_reserved2
/** whether or not this component's value is required (non-empty) */
private static final short flag_required   flag_reserved3
private static final string no_raw_input
private static final long serialversionuid   1l
/**
* make empty strings null values boolean. used by abstracttextcomponent
* subclass.
*/
protected static final short flag_convert_empty_input_string_to_null   flag_reserved1
/**
* visits any form components inside component if it is a container, or
* component itself if it is itself a form component
*
* @param component
*            starting point of the traversal
*
* @param visitor
*            the visitor to call
*/
public static final void visitformcomponentspostorder component component
final formcomponent ivisitor visitor
if  visitor    null
throw new illegalargumentexception
visitformcomponentspostorderhelper component  visitor
private static final object visitformcomponentspostorderhelper component component
final formcomponent ivisitor visitor
if  component instanceof markupcontainer
final markupcontainer container    markupcontainer component
if  container size   > 0
boolean visitchildren   true
if  container instanceof iformvisitorparticipant
visitchildren     iformvisitorparticipant container  processchildren
if  visitchildren
final iterator children   container iterator
while  children hasnext
final component child    component children next
object value   visitformcomponentspostorderhelper child  visitor
if  value    component ivisitor stop_traversal
return value
if  component instanceof formcomponent
final formcomponent fc    formcomponent component
return visitor formcomponent fc
return null
private transient object convertedinput
/**
* raw input entered by the user or no_raw_input if nothing is filled in.
*/
private string rawinput   no_raw_input
/**
* type that the raw input string will be converted to
*/
private string typename
/**
* the list of validators for this form component as either an ivalidator
* instance or an array of ivalidator instances.
*/
private object validators   null
/**
* @see org.apache.wicket.component#component(string)
*/
public formcomponent final string id
super id
// the form decides whether form components are versioned or not
// see form.setversioned
setversioned false
/**
* @see org.apache.wicket.component#component(string, imodel)
*/
public formcomponent final string id  imodel model
super id  model
// the form decides whether form components are versioned or not
// see form.setversioned
setversioned false
/**
* adds a validator to this form component.
*
* @param validator
*            the validator
* @return this
* @throws illegalargumentexception
*             if validator is null
* @see ivalidator
* @see ivalidatoraddlistener
*/
public final formcomponent add final ivalidator validator
if  validator    null
throw new illegalargumentexception
// add the validator
validators_add validator
// see whether the validator listens for add events
if  validator instanceof ivalidatoraddlistener
ivalidatoraddlistener validator  onadded this
// return this for chaining
return this
/**
* checks if the form component's 'required' requirement is met
*
* @return true if the 'required' requirement is met, false otherwise
*/
public final boolean checkrequired
if  isrequired
final string input   getinput
// when null, check whether this is natural for that component, or
// whether - as is the case with text fields - this can only happen
// when the component was disabled
if  input    null     isinputnullable
// this value must have come from a disabled field
// do not perform validation
return true
// peform validation by looking whether the value is null or empty
if  strings isempty input
return false
return true
/**
* clears the user input.
*/
public final void clearinput
rawinput   no_raw_input
/**
* reports a validation error against this form component.
*
* the actual error is reported by creating a
* {@link validationerrorfeedback} object that holds both the validation
* error and the generated error message - so a custom feedback panel can
* have access to both.
*
* @param error
*            validation error
*/
public void error ivalidationerror error
if  error    null
throw new illegalargumentexception
string message   error geterrormessage new messagesource
if  message    null
// xxx maybe make message source remember tried resource keys so a
// more detailederror message can be created - like show which keys
// were tried
message       error tostring
error new validationerrorfeedback error  message
/**
* gets the converter input. you typically should not override this method,
* unless you are writing a
* {@link formcomponentpanel special form component} that embeds other form
* components that receive the real user input.
*
* @return value of input converted into appropriate type if any was set
*/
public object getconvertedinput
return convertedinput
/**
* @return the parent form for this form component
*/
public form getform
// look for parent form
final form form    form findparent form class
if  form    null
throw new wicketruntimeexception     this
return form
/**
* gets the request parameter for this component as a string.
*
* @return the value in the request for this component
*/
public string getinput
string input   getinputasarray
if  input    null    input length    0
return null
else
return input
/**
* gets the request parameters for this component as strings.
*
* @return the values in the request for this component
*/
public string getinputasarray
string values   getrequest   getparameters getinputname
if   isinputnullable
if  values    null    values length    1    values    null
// we the key got passed in (otherwise values would be null),
// but the value was set to null.
// as the servlet spec isn't clear on what to do with 'empty'
// request values - most return an empty string, but some null -
// we have to workaround here and deliberately set to an empty
// string if the the component is not nullable (text components)
return empty_string_array
return values
/**
* gets the string to be used for the <tt>name</tt> attribute of the form
* element. generated using the path from the form to the component,
* excluding the form itself. override it if you want even a smaller name.
* e.g. if you know for sure that the id is unique within a form.
*
* @return the string to use as the form element's name attribute
*/
public string getinputname
string id   getid
final prependingstringbuffer inputname   new prependingstringbuffer id length
component c   this
while  true
inputname prepend id
c   c getparent
if  c    null     c instanceof form      form c  isrootform       c instanceof page
break
inputname prepend component path_separator
id   c getid
// having input name "submit" causes problems with javascript, so we
// create a unique string to replace it by prepending a path separator
if  inputname equals
inputname prepend component path_separator
return inputname tostring
/**
* use hasrawinput() to check if this component has raw input because null
* can mean 2 things: it doesn't have rawinput or the rawinput is really
* null.
*
* @return the raw form input that is stored for this formcomponent
*/
public final string getrawinput
return rawinput    no_raw_input ? null   rawinput
/**
* @return the type to use when updating the model for this form component
*/
public final class gettype
return typename    null ? null   classes resolveclass typename
/**
* @see form#getvalidatorkeyprefix()
* @return prefix used when constructing validator key messages
*/
public string getvalidatorkeyprefix
form form    form findparent form class
if  form    null
return getform   getvalidatorkeyprefix
return null
/**
* gets an unmodifiable list of validators for this formcomponent.
*
* @return list of validators
*/
public final list getvalidators
final int size   validators_size
if  size    0
return collections empty_list
else
final list list   new arraylist size
for  int i   0  i < size  i
list add validators_get i
return collections unmodifiablelist list
/**
* gets current value for a form component.
*
* @return the value
*/
public final string getvalue
if  no_raw_input equals rawinput
return getmodelvalue
else
if  getescapemodelstrings      rawinput    null
return strings escapemarkup rawinput  tostring
return rawinput
/**
* this method can be called to know if this component really has raw input.
*
* @return boolean if this form component has rawinput.
*/
public final boolean hasrawinput
return rawinput    no_raw_input
/**
* used by form to tell the formcomponent that a new user input is available
*/
public final void inputchanged
if  isvisibleinhierarchy      isenabled
// get input as string array
final string input   getinputasarray
// if there is any input
if  input    null    input length > 0    input    null
// join the values together with ";", for example, "id1;id2;id3"
rawinput   stringlist valueof input  join value_separator
else if  isinputnullable
// no input
rawinput   null
else
rawinput   no_raw_input
/**
* called to indicate that
*/
public final void invalid
oninvalid
/**
* gets whether this component's input can be null. by default, components
* that do not get input will have null values passed in for input. however,
* component textfield is an example (possibly the only one) that never gets
* a null passed in, even if the field is left empty unless it had attribute
* <code>disabled="disabled"</code> set.
*
* @return true if this component's input can be null. returns true by
*         default.
*/
public boolean isinputnullable
return true
/**
* @return true if this component encodes data in a multipart form submit
*/
public boolean ismultipart
return false
/**
* @return true if this component supports persistence and it has been asked
*         to persist itself with setpersistent().
*/
public final boolean ispersistent
return supportspersistence      getflag flag_persistent
/**
* @return whether or not this component's value is required
*/
public boolean isrequired
return getflag flag_required
/**
* gets whether this component is 'valid'. valid in this context means that
* no validation errors were reported the last time the form component was
* processed. this variable not only is convenient for 'business' use, but
* is also nescesarry as we don't want the form component models updated
* with invalid input.
*
* @return valid whether this component is 'valid'
*/
public final boolean isvalid
class isvalidvisitor implements ivisitor
boolean valid   true
public object formcomponent iformvisitorparticipant formcomponent
final formcomponent fc    formcomponent formcomponent
if  fc haserrormessage
valid   false
return component ivisitor stop_traversal
return component ivisitor continue_traversal
isvalidvisitor tmp   new isvalidvisitor
visitformcomponentspostorder this  tmp
return tmp valid
/**
* @see org.apache.wicket.markup.html.form.iformvisitorparticipant#processchildren(boolean)
*/
public boolean processchildren
return true
/**
* this method will retrieve the request parameter, validate it, and if
* valid update the model. these are the same steps as would be performed by
* the form.
*
* this is useful when a formcomponent is used outside a form.
*
*/
public final void processinput
inputchanged
validate
if  haserrormessage
invalid
else
valid
updatemodel
/**
* the value will be made available to the validator property by means of
* ${label}. it does not have any specific meaning to formcomponent itself.
*
* @param labelmodel
* @return this for chaining
*/
public formcomponent setlabel imodel labelmodel
setlabelinternal labelmodel
return this
/**
* sets the value for a form component this value will be split the string
* with {@link formcomponent#value_separator} and calls
* setmodelvalue(string[]) with that.
*
* @param value
*            the value
*
* @deprecated call or override setmodelvalue(string[])
*/
public void setmodelvalue final string value
setmodelvalue value split value_separator
/**
* sets the value for a form component.
*
* @param value
*            the value
*/
public void setmodelvalue final string value
convertedinput   convertvalue value
updatemodel
/**
* sets whether this component is to be persisted.
*
* @param persistent
*            true if this component is to be persisted.
* @return this for chaining
*/
public final formcomponent setpersistent final boolean persistent
if  supportspersistence
setflag flag_persistent  persistent
else
throw new unsupportedoperationexception     getclass
return this
/**
* sets the required flag
*
* @param required
* @return this for chaining
*/
public final formcomponent setrequired final boolean required
if   required    gettype      null    gettype   isprimitive
throw new wicketruntimeexception
this
if  required    isrequired
addstatechange new requiredstatechange
setflag flag_required  required
return this
/**
* sets the type that will be used when updating the model for this
* component. if no type is specified string type is assumed.
*
* @param type
* @return this for chaining
*/
public final formcomponent settype class type
this typename   type    null ? null   type getname
if  type    null    type isprimitive
setrequired true
return this
/**
* updates this components' model from the request, it expect that the
* object is already converted through the convert() call. by default it
* just does this:
*
* <pre>
* setmodelobject(getconvertedinput());
* </pre>
*
* do not call this method directly unless you are sure what you are doing.
* usually updating your model is handled by the form, not directly by you.
*/
public void updatemodel
setmodelobject getconvertedinput
/**
* called to indicate that the user input is valid.
*/
public final void valid
clearinput
onvalid
/**
* performs full validation of the form component, which consists of calling
* validaterequired(), validatetypeconversion(), and validatevalidators().
* this method should only be used if the form component needs to be fully
* validated outside the form process.
*/
public final void validate
validaterequired
if  isvalid
convert
if  isvalid
validatevalidators
/**
* @param validator
*            the validator to add to the validators object (which may be an
*            array of ivalidators or a single instance, for efficiency)
*/
private void validators_add final ivalidator validator
if  this validators    null
this validators   validator
else
// get current list size
final int size   validators_size
// create array that holds size + 1 elements
final ivalidator validators   new ivalidator
// loop through existing validators copying them
for  int i   0  i < size  i
validators   validators_get i
// add new validator to the end
validators   validator
// save new validator list
this validators   validators
/**
* gets validator from validators object (which may be an array of
* ivalidators or a single instance, for efficiency) at the given index
*
* @param index
*            the index of the validator to get
* @return the validator
*/
private ivalidator validators_get int index
if  this validators    null
throw new indexoutofboundsexception
if  this validators instanceof ivalidator
return   ivalidator validators
return  ivalidator validators
/**
* @return the number of validators in the validators object (which may be
*         an array of ivalidators or a single instance, for efficiency)
*/
private int validators_size
if  this validators    null
return 0
if  this validators instanceof ivalidator
return   ivalidator validators  length
return 1
/**
* converts and validates the conversion of the raw input string into the
* object specified by {@link formcomponent#gettype()} and records any
* errors. converted value is available through
* {@link formcomponent#getconvertedinput()}
*/
protected final void convert
if  typename    null
try
convertedinput   convertvalue getinputasarray
catch  conversionexception e
validationerror error   new validationerror
if  e getresourcekey      null
error addmessagekey e getresourcekey
if  e gettargettype      null
error addmessagekey     classes simplename e gettargettype
error addmessagekey
final locale locale   e getlocale
if  locale    null
error setvariable    locale
error setvariable    e
format format   e getformat
if  format instanceof simpledateformat
error setvariable      simpledateformat format  tolocalizedpattern
error  ivalidationerror error
else
final iconverter converter   getconverter gettype
try
convertedinput   converter converttoobject getinput    getlocale
catch  conversionexception e
validationerror error   new validationerror
if  e getresourcekey      null
error addmessagekey e getresourcekey
string simplename   classes simplename gettype
error addmessagekey     simplename
error addmessagekey
error setvariable    simplename
final locale locale   e getlocale
if  locale    null
error setvariable    locale
error setvariable    e
format format   e getformat
if  format instanceof simpledateformat
error setvariable      simpledateformat format  tolocalizedpattern
error  ivalidationerror error
/**
* subclasses should overwrite this if the conversion is not done through
* the type field and the iconverter. <strong>warning: this method may be
* removed in future versions.</strong>
*
* if conversion fails then a conversionexception should be thrown
*
* @param value
*            the value can be the getinput() or through a cookie
*
* @return the converted value. default returns just the given value
* @throws conversionexception
*             if input can't be converted
*/
protected object convertvalue string value  throws conversionexception
return value    null    value length > 0    value    null ? value trim     null
/**
* @see org.apache.wicket.component#getbehaviors(java.lang.class)
*/
protected list getbehaviors class type
// list
return super getbehaviors type
/**
* @return value to return when model value is needed
*/
protected string getmodelvalue
return getmodelobjectasstring
/**
* gets the request parameter for this component as an int.
*
* @return the value in the request for this component
*/
protected final int inputasint
final string string   getinput
try
return integer parseint string
catch  numberformatexception e
throw new illegalargumentexception exceptionmessage
string
/**
* gets the request parameter for this component as an int, using the given
* default in case no corresponding request parameter was found.
*
* @param defaultvalue
*            default value to return if request does not have an integer
*            for this component
* @return the value in the request for this component
*/
protected final int inputasint final int defaultvalue
final string string   getinput
if  string    null
try
return integer parseint string
catch  numberformatexception e
throw new illegalargumentexception exceptionmessage     string
else
return defaultvalue
/**
* gets the request parameters for this component as ints.
*
* @return the values in the request for this component
*/
protected final int inputasintarray
final string strings   getinputasarray
if  strings    null
final int ints   new int
for  int i   0  i < strings length  i
ints   integer parseint strings
return ints
return null
/**
* @see org.apache.wicket.component#internalonmodelchanged()
*/
protected void internalonmodelchanged
// if the model for this form component changed, we should make it
// valid again because there can't be any invalid input for it anymore.
valid
/**
* processes the component tag.
*
* @param tag
*            tag to modify
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected void oncomponenttag final componenttag tag
tag put    getinputname
if   isenabled       isenableallowed
ondisabled tag
super oncomponenttag tag
protected void ondetach
super ondetach
convertedinput   null
/**
* called by {@link #oncomponenttag(componenttag)} when the component is
* disabled. by default, this method will add a disabled="disabled"
* attribute to the tag. components may override this method to tweak the
* tag as they think is fit.
*
* @param tag
*            the tag that is being rendered
*/
protected void ondisabled final componenttag tag
tag put
/**
* handle invalidation
*/
protected void oninvalid
/**
* handle validation
*/
protected void onvalid
/**
* @return true if this type of formcomponent can be persisted.
*/
protected boolean supportspersistence
return false
/**
* checks if the raw input value is not null if this component is required
*/
protected final void validaterequired
if   checkrequired
error  ivalidationerror new validationerror   addmessagekey
/**
* validates this component using the component's validators.
*/
protected final void validatevalidators
final int size   validators_size
final ivalidatable validatable   new validatableadapter
int i   0
ivalidator validator   null
boolean isnull   getconvertedinput      null
try
for  i   0  i < size  i
validator   validators_get i
if  isnull    false    validator instanceof inullacceptingvalidator
validator validate validatable
if   isvalid
break
catch  exception e
throw new wicketruntimeexception     e
validator getclass   getname         this getpath    e