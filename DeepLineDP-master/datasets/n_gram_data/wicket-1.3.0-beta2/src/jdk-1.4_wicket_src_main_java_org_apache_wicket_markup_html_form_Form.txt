/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util hashmap
import java util iterator
import java util locale
import java util map
import org apache wicket component
import org apache wicket irequesttarget
import org apache wicket markupcontainer
import org apache wicket page
import org apache wicket request
import org apache wicket requestcycle
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html border border
import org apache wicket markup html form persistence cookievaluepersister
import org apache wicket markup html form persistence ivaluepersister
import org apache wicket markup html form upload fileuploadfield
import org apache wicket markup html form validation iformvalidator
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket protocol http requestutils
import org apache wicket protocol http webrequest
import org apache wicket protocol http webrequestcycle
import org apache wicket request irequestcycleprocessor
import org apache wicket request requestparameters
import org apache wicket request target component listener listenerinterfacerequesttarget
import org apache wicket util lang bytes
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util string interpolator mapvariableinterpolator
import org apache wicket util upload fileuploadexception
import org apache wicket util upload fileuploadbase sizelimitexceededexception
import org apache wicket util value valuemap
import org apache wicket validation ivalidatoraddlistener
import org slf4j logger
import org slf4j loggerfactory
/**
* base class for forms. to implement a form, subclass this class, add
* formcomponents (such as checkboxes, listchoices or textfields) to the form.
* you can nest multiple buttons if you want to vary submit behavior. however,
* it is not necessary to use wicket's button class, just putting e.g. &lt;input
* type="submit" value="go"&gt; suffices.
* <p>
* by default, the processing of a form works like this:
* <li> the submitting button is looked up. a submitting button is a button that
* is nested in this form (is a child component) and that was clicked by the
* user. if a submitting button was found, and it has the defaultformprocessing
* field set to false (default is true), it's onsubmit method will be called
* right away, thus no validition is done, and things like updating form
* component models that would normally be done are skipped. in that respect,
* nesting a button with the defaultformprocessing field set to false has the
* same effect as nesting a normal link. if you want you can call validate() to
* execute form validation, haserror() to find out whether validate() resulted
* in validation errors, and updateformcomponentmodels() to update the models of
* nested form components. </li>
* <li> when no submitting button with defaultformprocessing set to false was
* found, this form is processed (method process()). now, two possible paths
* exist:
* <ul>
* <li> form validation failed. all nested form components will be marked
* invalid, and onerror() is called to allow clients to provide custom error
* handling code. </li>
* <li> form validation succeeded. the nested components will be asked to update
* their models and persist their data is applicable. after that, method
* delegatesubmit with optionally the submitting button is called. the default
* when there is a submitting button is to first call onsubmit on that button,
* and after that call onsubmit on this form. clients may override
* delegatesubmit if they want different behavior. </li>
* </ul>
* </li>
* </li>
* </p>
*
* form for handling (file) uploads with multipart requests is supported by
* callign setmultipart(true) ( although wicket will try to automatically detect
* this for you ). use this with
* {@link org.apache.wicket.markup.html.form.upload.fileuploadfield} components.
* you can attach mutliple fileuploadfield components for muliple file uploads.
* <p>
* in case of an upload error two resource keys are available to specify error
* messages: uploadtoolarge and uploadfailed
*
* ie in [page].properties
*
* [form-id].uploadtoolarge=you have uploaded a file that is over the allowed
* limit of 2mb
*
* <p>
* if you want to have multiple buttons which submit the same form, simply put
* two or more button components somewhere in the hierarchy of components that
* are children of the form.
* </p>
* <p>
* to get form components to persist their values for users via cookies, simply
* call setpersistent(true) on each component.
* </p>
* <p>
* forms can be nested. you can put a form in another form. since html doesn't
* allow nested &lt;form&gt; tags, the inner forms will be rendered using the
* &lt;div&gt; tag. you have to submit the inner forms using explicit components
* (like button or submitlink), you can't rely on implicit submit behavior (by
* using just &lt;input type="submit"&gt; that is not attached to a component).
* </p>
* <p>
* when a nested form is submitted, the user entered values in outer (parent)
* forms are preserved and only the fields in the submitted form are validated.
* </b>
*
* @author jonathan locke
* @author juergen donnerstag
* @author eelco hillenius
* @author cameron braid
* @author johan compagner
* @author igor vaynberg (ivaynberg)
*/
public class form extends webmarkupcontainer implements iformsubmitlistener
/**
* visitor used for validation
*
* @author igor vaynberg (ivaynberg)
*/
public static abstract class validationvisitor implements formcomponent ivisitor
/**
* @see org.apache.wicket.markup.html.form.formcomponent.ivisitor#formcomponent(org.apache.wicket.markup.html.form.iformvisitorparticipant)
*/
public object formcomponent iformvisitorparticipant component
if  component instanceof formcomponent
formcomponent formcomponent    formcomponent component
if  formcomponent isvisibleinhierarchy      formcomponent isvalid
formcomponent isenabled      formcomponent isenableallowed
validate formcomponent
if  component processchildren
return component ivisitor continue_traversal
else
return component ivisitor continue_traversal_but_dont_go_deeper
/**
* callback that should be used to validate form component
*
* @param formcomponent
*/
public abstract void validate formcomponent formcomponent
/**
*
*/
class formdispatchrequest extends request
private final valuemap params   new valuemap
private final request realrequest
private final string url
/**
* construct.
*
* @param realrequest
* @param url
*/
public formdispatchrequest final request realrequest  final string url
this realrequest   realrequest
this url   realrequest decodeurl url
string querystring   this url substring this url indexof      1
requestutils decodeparameters querystring  params
/**
* @see org.apache.wicket.request#getlocale()
*/
public locale getlocale
return realrequest getlocale
/**
* @see org.apache.wicket.request#getparameter(java.lang.string)
*/
public string getparameter string key
return  string params get key
/**
* @see org.apache.wicket.request#getparametermap()
*/
public map getparametermap
return params
/**
* @see org.apache.wicket.request#getparameters(java.lang.string)
*/
public string getparameters string key
string param    string params get key
if  param    null
return new string   param
return new string
/**
* @see org.apache.wicket.request#getpath()
*/
public string getpath
return realrequest getpath
public string getrelativepathprefixtocontextroot
return realrequest getrelativepathprefixtocontextroot
public string getrelativepathprefixtowickethandler
return realrequest getrelativepathprefixtowickethandler
/**
* @see org.apache.wicket.request#geturl()
*/
public string geturl
return url
/**
* constant for specifying how a form is submitted, in this case using get.
*/
public static final string method_get
/**
* constant for specifying how a form is submitted, in this case using post.
*/
public static final string method_post
/** flag that indicates this form has been submitted during this request */
private static final short flag_submitted   flag_reserved1
/** log. */
private static final logger log   loggerfactory getlogger form class
private static final long serialversionuid   1l
private static final string upload_failed_resource_key
private static final string upload_too_large_resource_key
/**
* any default button. if set, a hidden submit button will be rendered right
* after the form tag, so that when users press enter in a textfield, this
* button's action will be selected. if no default button is set, nothing
* additional is rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a
* 'default' button in a form is ill defined in the standards, and of course
* ie has it's own way of doing things.
* </p>
*/
private button defaultbutton
/** multi-validators assigned to this form */
private object formvalidators   null
private string javascriptid
/** maximum size of an upload in bytes */
private bytes maxsize   bytes max
/** true if the form has enctype of multipart/form-data */
private boolean multipart   false
/**
* constructs a form with no validation.
*
* @param id
*            see component
*/
public form final string id
super id
/**
* @param id
*            see component
* @param model
*            see component
* @see org.apache.wicket.component#component(string, imodel)
*/
public form final string id  imodel model
super id  model
/**
* adds a form validator to the form.
*
* @param validator
*            validator
* @throws illegalargumentexception
*             if validator is null
* @see iformvalidator
* @see ivalidatoraddlistener
*/
public void add iformvalidator validator
if  validator    null
throw new illegalargumentexception
// add the validator
formvalidators_add validator
// see whether the validator listens for add events
if  validator instanceof ivalidatoraddlistener
ivalidatoraddlistener validator  onadded this
/**
* clears the input from the form's nested children of type
* {@link formcomponent}. this method is typically called when a form needs
* to be reset.
*/
public final void clearinput
// visit all the (visible) form components and clear the input on each.
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
// clear input from form component
formcomponent clearinput
/**
* /** registers an error feedback message for this component
*
* @param error
*            error message
* @param args
*            argument replacement map for ${key} variables
*/
public final void error string error  map args
error new mapvariableinterpolator error  args  tostring
/**
* gets the button which submitted this form.
*
* @return the button which submitted this form or null if the processing
*         was not trigger by a registered button component
*/
public final iformsubmittingcomponent findsubmittingbutton
iformsubmittingcomponent submittingbutton    iformsubmittingcomponent getpage
visitchildren iformsubmittingcomponent class  new ivisitor
public object component final component component
// get button
final iformsubmittingcomponent submit    iformsubmittingcomponent component
// check for button-name or button-name.x request string
if  submit getform      null
submit getform   getrootform      form this
getrequest   getparameter submit getinputname       null    getrequest
getparameter submit getinputname           null
if   component isvisible
throw new wicketruntimeexception
submit getinputname
component getpagerelativepath
return submit
return continue_traversal
return submittingbutton
/**
* gets the default button. if set (not null), a hidden submit button will
* be rendered right after the form tag, so that when users press enter in a
* textfield, this button's action will be selected. if no default button is
* set (it is null), nothing additional is rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a
* 'default' button in a form is ill defined in the standards, and of course
* ie has it's own way of doing things.
* </p>
* there can be only one default button per form hierarchy. so if you want
* to get the default button on a nested form, it will actually delegate the
* call to root form. </b>
*
* @return the button to set as the default button, or null when you want to
*         'unset' any previously set default button
*/
public final button getdefaultbutton
if  isrootform
return defaultbutton
else
return getrootform   getdefaultbutton
/**
* this generates a piece of javascript code that sets the url in the
* special hidden field and submits the form.
*
* warning: this code should only be called in the rendering phase for form
* components inside the form because it uses the css/javascript id of the
* form which can be stored in the markup.
*
* @param url
*            the interface url that has to be stored in the hidden field
*            and submitted
* @return the javascript code that submits the form.
*/
public final charsequence getjsforinterfaceurl charsequence url
return new appendingstringbuffer    append gethiddenfieldid
append    append url  append    append
getjavascriptid    append
/**
* @return the maxsize of uploaded files
*/
public bytes getmaxsize
return this maxsize
/**
* returns the root form or this, if this is the root form.
*
* @return root form or this form
*/
public form getrootform
form form
form parent   this
do
form   parent
parent    form form findparent form class
while  parent    null
return form
/**
* returns the prefix used when building validator keys. this allows a form
* to use a separate "set" of keys. for example if prefix "short" is
* returned, validator key short.required will be tried instead of required
* key.
* <p>
* this can be useful when different designs are used for a form. in a form
* where error messages are displayed next to their respective form
* components as opposed to at the top of the form, the ${label} attribute
* is of little use and only causes redundant information to appear in the
* message. forms like these can return the "short" (or any other string)
* validator prefix and declare key: short.required=required to override the
* longer message which is usually declared like this: required=${label} is
* a required field
* <p>
* returned prefix will be used for all form components. the prefix can also
* be overridden on form component level by overriding
* {@link formcomponent#getvalidatorkeyprefix()}
*
* @return prefix prepended to validator keys
*/
public string getvalidatorkeyprefix
return null
/**
* gets whether the current form has any error registered.
*
* @return true if this form has at least one error.
*/
public final boolean haserror
// if this form itself has an error message
if  haserrormessage
return true
// the form doesn't have any errors, now check any nested form
// components
return anyformcomponenterror
/**
* returns whether the form is a root form, which means that there's no
* other form in it's parent hierarchy.
*
* @return true if form is a root form, false otherwise
*/
public boolean isrootform
return findparent form class     null
/**
* checks if this form has been submitted during the current request
*
* @return true if the form has been submitted during this request, false
*         otherwise
*/
public final boolean issubmitted
return getflag flag_submitted
/**
* method made final because we want to ensure users call setversioned.
*
* @see org.apache.wicket.component#isversioned()
*/
public boolean isversioned
return super isversioned
/**
* this method is not part of the wicket public api. do not call it.
* <p>
* retrieves formcomponent values related to the page using the persister
* and assign the values to the formcomponent. thus initializing them.
*/
public final void loadpersistentformcomponentvalues
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
// component must implement persister interface and
// persistence for that component must be enabled.
// else ignore the persisted value. it'll be deleted
// once the user submits the form containing that formcomponent.
// note: if that is true, values may remain persisted longer
// than really necessary
if  formcomponent isvisibleinhierarchy      formcomponent ispersistent
// the persister
final ivaluepersister persister   getvaluepersister
// retrieve persisted value
persister load formcomponent
/**
* this method is not part of the wicket api. do not attempt to override or
* call it.
*
* handles form submissions.
*
* @see form#validate()
*/
public final void onformsubmitted
setflag flag_submitted  true
if  handlemultipart
// tells formcomponents that a new user input has come
inputchanged
string url   getrequest   getparameter gethiddenfieldid
if   strings isempty url
dispatchevent getpage    url
else
// first, see if the processing was triggered by a wicket button
final iformsubmittingcomponent submittingbutton   findsubmittingbutton
// when processing was triggered by a wicket button and that
// button indicates it wants to be called immediately
// (without processing), call button.onsubmit() right away.
if  submittingbutton    null     submittingbutton getdefaultformprocessing
submittingbutton onsubmit
else
// this is the root form
form formtoprocess   this
// find out whether it was a nested form that was submitted
if  submittingbutton    null
formtoprocess   submittingbutton getform
// process the form for this request
if  formtoprocess process
// let clients handle further processing
delegatesubmit submittingbutton
// if multi part did fail check if an error is registered and call
// onerror
else if  haserror
onerror
/**
* process the form. though you can override this method to provide your
* whole own algorithm, it is not recommended to do so.
* <p>
* see the class documentation for further details on the form processing
* </p>
*
* @return false if the form had an error
*/
public boolean process
// run validation
validate
// if a validation error occurred
if  haserror
// mark all children as invalid
markformcomponentsinvalid
// let subclass handle error
onerror
// form has an error
return false
else
// mark all childeren as valid
markformcomponentsvalid
// before updating, call the interception method for clients
beforeupdateformcomponentmodels
// update model using form data
updateformcomponentmodels
// persist formcomponents if requested
persistformcomponentdata
// form has no error
return true
/**
* removes already persisted data for all formcomponent childs and disable
* persistence for the same components.
*
* @see page#removepersistedformdata(class, boolean)
*
* @param disablepersistence
*            if true, disable persistence for all formcomponents on that
*            page. if false, it will remain unchanged.
*/
public void removepersistentformcomponentvalues final boolean disablepersistence
// the persistence manager responsible to persist and retrieve
// formcomponent data
final ivaluepersister persister   getvaluepersister
// search for formcomponents like textfield etc.
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
// remove the formcomponent's persisted data
persister clear formcomponent
// disable persistence if requested. leave unchanged
// otherwise.
if  formcomponent ispersistent      disablepersistence
formcomponent setpersistent false
/**
* sets the default button. if set (not null), a hidden submit button will
* be rendered right after the form tag, so that when users press enter in a
* textfield, this button's action will be selected. if no default button is
* set (so unset by calling this method with null), nothing additional is
* rendered.
* <p>
* warning: note that this is a best effort only. unfortunately having a
* 'default' button in a form is ill defined in the standards, and of course
* ie has it's own way of doing things.
* </p>
* there can be only one default button per form hierarchy. so if you set
* default button on a nested form, it will actually delegate the call to
* root form. </b>
*
* @param button
*            the button to set as the default button, or null when you want
*            to 'unset' any previously set default button
*/
public final void setdefaultbutton button button
if  isrootform
this defaultbutton   button
else
getrootform   setdefaultbutton button
/**
* @param maxsize
*            the maxsize for uploaded files
*/
public void setmaxsize final bytes maxsize
this maxsize   maxsize
/**
* set to true to use enctype='multipart/form-data', and to process file
* uplloads by default multipart = false
*
* @param multipart
*            whether this form should behave as a multipart form
*/
public void setmultipart boolean multipart
this multipart   multipart
/**
* @see org.apache.wicket.component#setversioned(boolean)
*/
public final component setversioned final boolean isversioned
super setversioned isversioned
// search for formcomponents like textfield etc.
visitformcomponents new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
formcomponent setversioned isversioned
return this
/**
* convenient and typesafe way to visit all the form components on a form
*
* @param visitor
*            the visitor interface to call
*/
public final void visitformcomponents final formcomponent ivisitor visitor
visitchildren formcomponent class  new ivisitor
public object component final component component
visitor formcomponent  formcomponent component
return continue_traversal
/**
* todo post 1.2 general: maybe we should re-think how borders are
* implemented, because there are just too many exceptions in the code
* base because of borders. this time it is to solve the problem tested
* in boxbordertestpage_3 where the form is defined in the box border
* and the formcomponents are in the "body". thus, the formcomponents
* are not childs of the form. they are rather childs of the border, as
* the form itself.
*/
if  getparent   instanceof border
markupcontainer border   getparent
iterator iter   border iterator
while  iter hasnext
component child    component iter next
if  child instanceof formcomponent
visitor formcomponent  formcomponent child
/**
* convenient and typesafe way to visit all the form components on a form
* postorder (deepest first)
*
* @param visitor
*            the visitor interface to call
*/
public final void visitformcomponentspostorder final formcomponent ivisitor visitor
formcomponent visitformcomponentspostorder this  visitor
/**
* todo post 1.2 general: maybe we should re-think how borders are
* implemented, because there are just too many exceptions in the code
* base because of borders. this time it is to solve the problem tested
* in boxbordertestpage_3 where the form is defined in the box border
* and the formcomponents are in the "body". thus, the formcomponents
* are not childs of the form. they are rather childs of the border, as
* the form itself.
*/
if  getparent   instanceof border
markupcontainer border   getparent
iterator iter   border iterator
while  iter hasnext
component child    component iter next
if  child instanceof formcomponent
visitor formcomponent  formcomponent child
/**
* find out whether there is any registered error for a form component.
*
* @return whether there is any registered error for a form component
*/
private boolean anyformcomponenterror
final object value   visitchildren new ivisitor
public object component final component component
if  component haserrormessage
return stop_traversal
// traverse all children
return continue_traversal
return value    ivisitor stop_traversal ? true   false
/**
* method for dispatching/calling a interface on a page from the given url.
* used by {@link org.apache.wicket.markup.html.form.form#onformsubmitted()}
* for dispatching events
*
* @param page
*            the page where the event should be called on.
* @param url
*            the url which describes the component path and the interface
*            to be called.
*/
private void dispatchevent final page page  final string url
requestcycle rc   requestcycle get
irequestcycleprocessor processor   rc getprocessor
final requestparameters requestparameters   processor getrequestcodingstrategy   decode
new formdispatchrequest rc getrequest    url
irequesttarget rt   processor resolve rc  requestparameters
if  rt instanceof listenerinterfacerequesttarget
listenerinterfacerequesttarget interfacetarget     listenerinterfacerequesttarget rt
interfacetarget getrequestlistenerinterface   invoke page  interfacetarget gettarget
else
throw new wicketruntimeexception
requestparameters getinterfacename
/**
* @param validator
*            the form validator to add to the formvalidators object (which
*            may be an array of iformvalidators or a single instance, for
*            efficiency)
*/
private void formvalidators_add final iformvalidator validator
if  this formvalidators    null
this formvalidators   validator
else
// get current list size
final int size   formvalidators_size
// create array that holds size + 1 elements
final iformvalidator validators   new iformvalidator
// loop through existing validators copying them
for  int i   0  i < size  i
validators   formvalidators_get i
// add new validator to the end
validators   validator
// save new validator list
this formvalidators   validators
/**
* gets form validator from formvalidators object (which may be an array of
* iformvalidators or a single instance, for efficiency) at the given index
*
* @param index
*            the index of the validator to get
* @return the form validator
*/
private iformvalidator formvalidators_get int index
if  this formvalidators    null
throw new indexoutofboundsexception
if  this formvalidators instanceof iformvalidator
return   iformvalidator formvalidators
return  iformvalidator formvalidators
/**
* @return the number of form validators in the formvalidators object (which
*         may be an array of iformvalidators or a single instance, for
*         efficiency)
*/
private int formvalidators_size
if  this formvalidators    null
return 0
if  this formvalidators instanceof iformvalidator
return   iformvalidator formvalidators  length
return 1
/**
* visits the form's children formcomponents and inform them that a new user
* input is available in the request
*/
private void inputchanged
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
formcomponent inputchanged
/**
* persist (e.g. cookie) formcomponent data to be reloaded and re-assigned
* to the formcomponent automatically when the page is visited by the user
* next time.
*
* @see org.apache.wicket.markup.html.form.formcomponent#updatemodel()
*/
private void persistformcomponentdata
// cannot add cookies to request cycle unless it accepts them
// we could conceivably be html over some other protocol!
if  getrequestcycle   instanceof webrequestcycle
// the persistence manager responsible to persist and retrieve
// formcomponent data
final ivaluepersister persister   getvaluepersister
// search for formcomponent children. ignore all other
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
// if peristence is switched on for that formcomponent
// ...
if  formcomponent ispersistent
// save component's data (e.g. in a cookie)
persister save formcomponent
else
// remove component's data (e.g. cookie)
persister clear formcomponent
/**
* if a default button was set on this form, this method will be called to
* render an extra field with an invisible style so that pressing enter in
* one of the textfields will do a form submit using this button. this
* method is overridable as what we do is best effort only, and may not what
* you want in specific situations. so if you have specific usability
* concerns, or want to follow another strategy, you may override this
* method.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open tag for the body
*/
protected void appenddefaultbuttonfield final markupstream markupstream
final componenttag opentag
string nameandid   gethiddenfieldid
appendingstringbuffer buffer   new appendingstringbuffer
// get the value, first seeing whether the value attribute is set
// by a model
string value   defaultbutton getmodelobjectasstring
if  value    null      equals value
// nope it isn't; try to read from the attributes
// note that we're only trying lower case here
value   defaultbutton getmarkupattributes   getstring
// append the button
buffer append  submit     "  append
defaultbutton getinputname    append  "
buffer append  width  0px  height  0px  position  absolute  left  100px
buffer append
getresponse   write buffer
/**
* template method to allow clients to do any processing (like recording the
* current model so that, in case onsubmit does further validation, the
* model can be rolled back) before the actual updating of form component
* models is done.
*/
protected void beforeupdateformcomponentmodels
/**
* called (by the default implementation of 'process') when all fields
* validated, the form was updated and it's data was allowed to be
* persisted. it is meant for delegating further processing to clients.
* <p>
* this implementation first finds out whether the form processing was
* triggered by a nested button of this form. if that is the case, that
* button's onsubmit is called first.
* </p>
* <p>
* regardless of whether a submitting button was found, the form's onsubmit
* method is called next.
* </p>
*
* @param submittingbutton
*            the button that triggered this form processing, or null if the
*            processing was triggered by something else (like a non-wicket
*            submit button or a javascript execution)
*/
protected void delegatesubmit iformsubmittingcomponent submittingbutton
// when the given button is not null, it means that it was the
// submitting button
if  submittingbutton    null
submittingbutton onsubmit
// model was successfully updated with valid data
onsubmit
/**
* returns the hiddenfieldid which will be used as the name and id property
* of the hiddenfield that is generated for event dispatches.
*
* @return the name and id of the hidden field.
*/
protected final string gethiddenfieldid
return getjavascriptid
/**
* returns the javascript/css id of this form that will be used to generated
* the id="xxx" attribute. it will be generated if not set already in the
* oncomponenttag. where it will be tried to load from the markup first
* before it is generated.
*
* @return the javascript/css id of this form.
*/
protected final string getjavascriptid
if  strings isempty javascriptid
javascriptid   getmarkupid
return javascriptid
/**
* gets the method used to submit the form. defaults to 'post'. override
* this if you have a requirement to alter this behavior.
*
* @return the method used to submit the form.
*/
protected string getmethod
return method_post
protected boolean getstatelesshint
return false
/**
* gets the form component persistence manager; it is lazy loaded.
*
* @return the form component value persister
*/
protected ivaluepersister getvaluepersister
return new cookievaluepersister
/**
* handles multi-part processing of the submitted data.
*
* warning
*
* if this method is overridden it can break {@link fileuploadfield}s on
* this form
*
* @return false if form is multipart and upload failed
*/
protected boolean handlemultipart
if  multipart
// change the request to a multipart web request so parameters are
// parsed out correctly
try
final webrequest multipartwebrequest     webrequest getrequest
newmultipartwebrequest this maxsize
getrequestcycle   setrequest multipartwebrequest
catch  wicketruntimeexception wre
if  wre getcause      null      wre getcause   instanceof fileuploadexception
throw wre
fileuploadexception e    fileuploadexception wre getcause
// create model with exception and maximum size values
final map model   new hashmap
model put    e
model put    maxsize
if  e instanceof sizelimitexceededexception
// resource key should be <form-id>.uploadtoolarge to
// override default message
final string defaultvalue       maxsize
string msg   getstring getid         upload_too_large_resource_key  model
valueof model   defaultvalue
error msg
if  log isdebugenabled
log error msg  e
else
log error msg
else
// resource key should be <form-id>.uploadfailed to override
// default message
final string defaultvalue       e getlocalizedmessage
string msg   getstring getid         upload_failed_resource_key  model
valueof model   defaultvalue
error msg
log error msg  e
// don't process the form if there is a fileuploadexception
return false
return true
/**
* @see org.apache.wicket.component#internalonmodelchanged()
*/
protected void internalonmodelchanged
// visit all the form components and validate each
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
// if form component is using form model
if  formcomponent sameinnermostmodel form this
formcomponent modelchanged
/**
* mark each form component on this form invalid.
*/
protected final void markformcomponentsinvalid
// call invalidate methods of all nested form components
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
formcomponent invalid
/**
* mark each form component on this form valid.
*/
protected final void markformcomponentsvalid
// call invalidate methods of all nested form components
visitformcomponentspostorder new formcomponent abstractvisitor
public void onformcomponent final formcomponent formcomponent
if  formcomponent isvisibleinhierarchy
formcomponent valid
/**
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected void oncomponenttag final componenttag tag
super oncomponenttag tag
checkcomponenttag tag
// if the javascriptid is already generated then use that on even it
// was before the first render. because there could be a component
// which already uses it to submit the forum. this should be fixed
// when we pre parse the markup so that we know the id is at front.
if   strings isempty javascriptid
tag put    javascriptid
else
javascriptid    string tag getattributes   get
if  strings isempty javascriptid
javascriptid   getjavascriptid
tag put    javascriptid
if  isrootform
tag put    getmethod
tag put    strings replaceall urlfor iformsubmitlistener interface
if  multipart
tag put
else
// sanity check
string enctype    string tag getattributes   get
if    equalsignorecase enctype
// though not set explicitly in java, this is a multipart
// form
setmultipart true
else
tag setname
tag remove
tag remove
tag remove
/**
* append an additional hidden input tag to support anchor tags that can
* submit a form.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open tag for the body
*/
protected void oncomponenttagbody final markupstream markupstream  final componenttag opentag
if  isrootform
// get the hidden field id
string nameandid   gethiddenfieldid
// render the hidden field
appendingstringbuffer buffer   new appendingstringbuffer
display none  hidden  "  append nameandid
append   id     append nameandid  append    >< div>"
getresponse   write buffer
// if a default button was set, handle the rendering of that
if  defaultbutton    null    defaultbutton isvisibleinhierarchy
defaultbutton isenabled
appenddefaultbuttonfield markupstream  opentag
// do the rest of the processing
super oncomponenttagbody markupstream  opentag
/**
* @see org.apache.wicket.component#ondetach()
*/
protected void ondetach
super internalondetach
setflag flag_submitted  false
super ondetach
/**
* method to override if you want to do something special when an error
* occurs (other than simply displaying validation errors).
*/
protected void onerror
/**
* @see org.apache.wicket.component#onrender(markupstream)
*/
protected void onrender final markupstream markupstream
// force multi-part on if any child form component is multi-part
visitformcomponents new formcomponent abstractvisitor
public void onformcomponent formcomponent formcomponent
if  formcomponent isvisible      formcomponent ismultipart
setmultipart true
super onrender markupstream
/**
* implemented by subclasses to deal with form submits.
*/
protected void onsubmit
/**
* update the model of all form components using the fields that were sent
* with the current request.
*
* @see org.apache.wicket.markup.html.form.formcomponent#updatemodel()
*/
protected final void updateformcomponentmodels
visitformcomponentspostorder new validationvisitor
public void validate formcomponent formcomponent
// potentially update the model
formcomponent updatemodel
/**
* validates the form by checking required fields, converting raw input and
* running validators for every form component, and last running global form
* validators. this method is typically called before updating any models.
* <p>
* note: in most cases, custom validations on the form can be achieved using
* an iformvalidator that can be added using addvalidator().
* </p>
*/
protected void validate
validatecomponents
validateformvalidators
/**
* triggers type conversion on form components
*/
protected final void validatecomponents
visitformcomponentspostorder new validationvisitor
public void validate final formcomponent formcomponent
formcomponent validate
/**
* validates form with the given form validator
*
* @param validator
*/
protected final void validateformvalidator final iformvalidator validator
if  validator    null
throw new illegalargumentexception
final formcomponent dependents   validator getdependentformcomponents
boolean validate   true
if  dependents    null
for  int j   0  j < dependents length  j
final formcomponent dependent   dependents
if   dependent isvalid
validate   false
break
if  validate
validator validate this
/**
* triggers any added {@link iformvalidator}s.
*/
protected final void validateformvalidators
final int count   formvalidators_size
for  int i   0  i < count  i
validateformvalidator formvalidators_get i