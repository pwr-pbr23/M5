/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html border
import org apache wicket markupcontainer
import org apache wicket response
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup html webmarkupcontainerwithassociatedmarkup
import org apache wicket markup html internal htmlheadercontainer
import org apache wicket markup parser xmltag
import org apache wicket markup parser filter wickettagidentifier
import org apache wicket markup resolver icomponentresolver
import org apache wicket model imodel
import org apache wicket response nullresponse
/**
* a border component has associated markup which is drawn and determines
* placement of any markup and/or components nested within the border component.
* <p>
* the portion of the border's associated markup file which is to be used in
* rendering the border is denoted by a &lt;wicket:border&gt; tag. the children
* of the border component instance are then inserted into this markup,
* replacing the first &lt;wicket:body&gt; tag in the border's associated
* markup.
* <p>
* for example, if a border's associated markup looked like this:
*
* <pre>
*              &lt;html&gt;
*              &lt;body&gt;
*                &lt;wicket:border&gt;
*                    first &lt;wicket:body/&gt; last
*                &lt;/wicket:border&gt;
*              &lt;/body&gt;
*              &lt;/html&gt;
* </pre>
*
* and the border was used on a page like this:
*
* <pre>
*              &lt;html&gt;
*              &lt;body&gt;
*                &lt;span wicket:id = &quot;myborder&quot;&gt;
*                    middle
*                &lt;/span&gt;
*              &lt;/body&gt;
*              &lt;/html&gt;
* </pre>
*
* then the resulting html would look like this:
*
* <pre>
*              &lt;html&gt;
*              &lt;body&gt;
*                    first middle last
*              &lt;/body&gt;
*              &lt;/html&gt;
* </pre>
*
* in other words, the body of the myborder component is substituted into the
* border's associated markup at the position indicated by the
* &lt;wicket:body&gt; tag.
* <p>
* regarding &lt;wicket:body/&gt; you have two options. either use
* &lt;wicket:body/&gt; (open-close tag) which will automatically be expanded to
* &lt;wicket:body&gt;body content&lt;/wicket:body&gt; or use
* &lt;wicket:body&gt;preview region&lt;/wicket:body&gt; in your border's
* markup. the preview region (everything in between the open and close tag)
* will automatically be removed.
*
* @author jonathan locke
*/
public abstract class border extends webmarkupcontainerwithassociatedmarkup
implements
icomponentresolver
static final string body
static final string border
static
// register "wicket:body" and "wicket:border"
wickettagidentifier registerwellknowntagname border
wickettagidentifier registerwellknowntagname body
/** will be true, once the first <wicket:body> has been seen */
private transient boolean haveseenbodytag   false
/** the open tag for this border component. */
private transient componenttag opentag
/** should be true for bordered pages */
private boolean transparentresolver   false
/** if false, the content of <wicket:body> will not be printed */
private boolean bodyvisible   true
/**
* @see org.apache.wicket.component#component(string)
*/
public border final string id
super id
/**
* @see org.apache.wicket.component#component(string, imodel)
*/
public border final string id  final imodel model
super id  model
/**
* when this method is called with a false value the components and raw
* markup that this border wraps will not be rendered.
*
* @param bodyvisible
* @return this for chaining
*/
public border setborderbodyvisible boolean bodyvisible
this bodyvisible   bodyvisible
return this
/**
*
* @see org.apache.wicket.markupcontainer#istransparentresolver()
*/
public boolean istransparentresolver
return transparentresolver
/**
* borders used for bordered pages should set it to "true". default is
* "false".
*
* @param transparentresolver
* @return this for chaining
*/
public final border settransparentresolver final boolean transparentresolver
this transparentresolver   transparentresolver
return this
/**
* border makes use of a &lt;wicket:body&gt; tag to identify the position to
* insert within the border's body. as &lt;wicket:body&gt; is a special tag
* and markupcontainer is not able to handle it, we do that here.
* <p>
* you have two options. either use &lt;wicket:body/&gt; (open-close tag)
* which will automatically be expanded to &lt;wicket:body&gt;body
* content&lt;/wicket:body&gt; or use &lt;wicket:body&gt;preview
* region&lt;/wicket:body&gt; in your border's markup. the preview region
* (everything in between the open and close tag) will automatically be
* removed.
*
* @see icomponentresolver#resolve(markupcontainer, markupstream,
*      componenttag)
*
* @param container
*            the container parsing its markup
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @return true if componentid was handled by the resolver, false otherwise.
*/
public final boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// determine if tag is a <wicket:body> tag
if    tag instanceof wickettag
return false
final wickettag wtag    wickettag tag
if   wtag isbodytag
return false
final response originalresponse
if  this bodyvisible    true
originalresponse   null
else
originalresponse   getrequestcycle   setresponse nullresponse getinstance
try
renderbodycomponent markupstream  wtag
finally
if  originalresponse    null
getrequestcycle   setresponse originalresponse
return true
/**
* render the tag body
*
* @see org.apache.wicket.component#oncomponenttagbody(org.apache.wicket.markup.markupstream,
*      org.apache.wicket.markup.componenttag)
*/
protected final void oncomponenttagbody final markupstream markupstream
final componenttag opentag
// save open tag for callback later to render body
this opentag   opentag
// initialize
this haveseenbodytag   false
// render the associated markup
renderassociatedmarkup
// there shall exactly only one body tag per border
if  haveseenbodytag    false
markupstream throwmarkupexception
/**
*
* @see org.apache.wicket.component#renderhead(org.apache.wicket.markup.html.internal.htmlheadercontainer)
*/
public void renderhead htmlheadercontainer container
this renderheadfromassociatedmarkupfile container
super renderhead container
/**
* render the wicket:body and all what is in it.
*
* @param markupstream
*            the associated markup stream
* @param wtag
*            the wicket:body tag
*/
public void renderbodycomponent final markupstream markupstream  final wickettag wtag
// ok, it is a wicket:body tag. now render its body
final componenttag bodytag   renderbodycomponenttag markupstream  wtag
// if markup stream is null, that indicates we already recursed into
// this block of log and set it to null (below). if we did that,
// then we want to go up another level of border nesting.
border border   this
if  border getmarkupstream      null
// find border at or above parent of this border
final markupcontainer borderparent   border getparent
border    border   borderparent instanceof border  ? borderparent   borderparent
findparent border class
// get the border's markup
final markupstream bordermarkup   border findmarkupstream
// set markup of border to null. this allows us to find the border's
// parent's markup. it also indicates that we've been here in the
// log just above.
border setmarkupstream null
// draw the children of the border component using its original
// in-line markup stream (not the border's associated markup stream)
border rendercomponenttagbody border findmarkupstream    border opentag
// restore border markup so it can continue rendering
border setmarkupstream bordermarkup
// render body close tag: </wicket:body>
if  wtag isopenclose
markupstream next
bodytag settype xmltag close
rendercomponenttag bodytag
else
this rendercomponenttag bordermarkup gettag
markupstream next
// there shall exactly only one body tag per border
if  border haveseenbodytag    true
markupstream
throwmarkupexception
border haveseenbodytag   true
/**
* render the wicket:body tag
*
* @param markupstream
*            the associated markup stream
* @param tag
*            the wicket:body tag
*/
public void renderbodycomponenttagbody final markupstream markupstream  final componenttag tag
rendercomponenttagbody markupstream  tag
/**
* render the wicket:body tag
*
* @param tag
*            the wicket:body tag
* @param markupstream
*            the associated markup stream
* @return the body tag. may be its type has been changed
*/
protected componenttag renderbodycomponenttag final markupstream markupstream
final componenttag tag
componenttag bodytag   tag
// ok, it is a wicket:body tag. now render its body
if  tag isopen
// it is open-preview-close already.
// only rawmarkup is allowed within the preview region, which
// gets stripped from output
markupstream next
markupstream skiprawmarkup
else if  tag isopenclose
// automatically expand <wicket:body/> to
// <wicket:body>...</wicket:body>
// in order for the html to look right: insert the body in between
// the wicket tags instead of behind the open-close tag.
bodytag   tag mutable
bodytag settype xmltag open
else
markupstream
throwmarkupexception
rendercomponenttag bodytag
return bodytag