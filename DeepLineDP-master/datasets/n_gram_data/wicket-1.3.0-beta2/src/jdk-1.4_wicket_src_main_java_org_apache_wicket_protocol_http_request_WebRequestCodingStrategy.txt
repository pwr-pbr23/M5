/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http request
import java util collection
import java util comparator
import java util iterator
import java util map
import java util treemap
import java util treeset
import java util map entry
import javax servlet http httpservletresponse
import org apache wicket application
import org apache wicket component
import org apache wicket ipagemap
import org apache wicket iredirectlistener
import org apache wicket irequesttarget
import org apache wicket page
import org apache wicket pagemap
import org apache wicket pageparameters
import org apache wicket request
import org apache wicket requestcycle
import org apache wicket requestlistenerinterface
import org apache wicket session
import org apache wicket wicketruntimeexception
import org apache wicket protocol http unittestsettings
import org apache wicket request irequestcodingstrategy
import org apache wicket request irequesttargetmountsinfo
import org apache wicket request requestparameters
import org apache wicket request target coding irequesttargeturlcodingstrategy
import org apache wicket request target coding webrequestencoder
import org apache wicket request target component bookmarkablelistenerinterfacerequesttarget
import org apache wicket request target component ibookmarkablepagerequesttarget
import org apache wicket request target component ipagerequesttarget
import org apache wicket request target component listener ilistenerinterfacerequesttarget
import org apache wicket request target resource isharedresourcerequesttarget
import org apache wicket util string appendingstringbuffer
import org apache wicket util string prependingstringbuffer
import org apache wicket util string strings
import org slf4j logger
import org slf4j loggerfactory
/**
* request parameters factory implementation that uses http request parameters
* and path info to construct the request parameters object.
*
* @author eelco hillenius
* @author jonathan locke
*/
public class webrequestcodingstrategy implements irequestcodingstrategy  irequesttargetmountsinfo
/** name of interface target query parameter */
public static final string name_space
/** name of interface target query parameter */
public static final string interface_parameter_name   name_space
/** ajax query parameter name */
public static final string behavior_id_parameter_name   name_space
/** parameter name used all over the place */
public static final string bookmarkable_page_parameter_name   name_space
/** pagemap parameter constant */
public static final string pagemap   name_space
/** the url path prefix expected for (so called) resources (not html pages). */
public static final string resources_path_prefix
/**
* parameter name that tells decode to ignore this request if the
* page+version encoded in the url is not on top of the stack. the value of
* this parameter is not important, it simply has to be present to enable
* the behavior
*/
public static final string ignore_if_not_active_parameter_name   name_space
/**
* various settings used to configure this strategy
*
* @author ivaynberg
*/
public static class settings
/** whether or not mount paths are case sensitive */
private boolean mountscasesensitive   true
/**
* construct.
*/
public settings
/**
* sets mountscasesensitive.
*
* @param mountscasesensitive
*            mountscasesensitive
*/
public void setmountscasesensitive boolean mountscasesensitive
this mountscasesensitive   mountscasesensitive
/**
* gets casesensitive.
*
* @return casesensitive
*/
public boolean aremountscasesensitive
return mountscasesensitive
/** log. */
private static final logger log   loggerfactory getlogger webrequestcodingstrategy class
/**
* map of path mounts for mount encoders on paths.
* <p>
* mountsonpath is sorted by longest paths first to improve resolution of
* possible path conflicts. <br />
* for example: <br/> we mount page1 on /page and page2 on /page/test <br />
* page1 uses a parameters encoder that only encodes parameter values <br />
* now suppose we want to access page1 with a single paramter param="test".
* we have a url collision since both pages can be access with /page/test
* <br />
* the sorting by longest path first guarantees that the iterator will
* return the mount /page/test before it returns mount /page therefore
* giving deterministic behavior to path resolution by always trying to
* match the longest possible path first.
* </p>
*/
private final mountsmap mountsonpath
/**
* construct.
*/
public webrequestcodingstrategy
this new settings
/**
* construct.
*
* @param settings
*/
public webrequestcodingstrategy settings settings
if  settings    null
throw new illegalargumentexception
mountsonpath   new mountsmap settings aremountscasesensitive
/**
* @see org.apache.wicket.request.irequestcodingstrategy#decode(org.apache.wicket.request)
*/
public final requestparameters decode final request request
final requestparameters parameters   new requestparameters
final string pathinfo   getrequestpath request
parameters setpath pathinfo
parameters setpagemapname request getparameter pagemap
addinterfaceparameters request  parameters
addbookmarkablepageparameters request  parameters
addresourceparameters request  parameters
if  request getparameter ignore_if_not_active_parameter_name     null
parameters setonlyprocessifpathactive true
map map   request getparametermap
iterator iterator   map keyset   iterator
while  iterator hasnext
string key    string iterator next
if  key startswith name_space
iterator remove
parameters setparameters map
return parameters
/**
* encode the given request target. if a mount is found, that mounted url
* will be returned. otherwise, one of the delegation methods will be
* called. in case you are using custom targets that are not part of the
* default target hierarchy, you need to override
* {@link #doencode(requestcycle, irequesttarget)}, which will be called
* after the defaults have been tried. when that doesn't provide a url
* either, and exception will be thrown saying that encoding could not be
* done.
*
* @see org.apache.wicket.request.irequestcodingstrategy#encode(org.apache.wicket.requestcycle,
*      org.apache.wicket.irequesttarget)
*/
public final charsequence encode final requestcycle requestcycle
final irequesttarget requesttarget
// first check to see whether the target is mounted
charsequence url   pathfortarget requesttarget
if  url    null
// do nothing - we've found the url and it's mounted.
else if  requesttarget instanceof ibookmarkablepagerequesttarget
url   encode requestcycle   ibookmarkablepagerequesttarget requesttarget
else if  requesttarget instanceof isharedresourcerequesttarget
url   encode requestcycle   isharedresourcerequesttarget requesttarget
else if  requesttarget instanceof ilistenerinterfacerequesttarget
url   encode requestcycle   ilistenerinterfacerequesttarget requesttarget
else if  requesttarget instanceof ipagerequesttarget
// this calls page.urlfor(iredirectlistener.interface), which calls
// the function we're in again. we therefore need to jump out here
// and return the url immediately, otherwise we end up prefixing it
// with relative path or absolute prefixes twice.
return encode requestcycle   ipagerequesttarget requesttarget
// fallthough for non-default request targets
else
url   doencode requestcycle  requesttarget
if  url    null
// add the actual url. this will be relative to the wicket
// servlet/filter, with no leading '/'.
prependingstringbuffer prepender   new prependingstringbuffer url tostring
// prepend prefix to the url to make it relative to the current
// request.
prepender prepend requestcycle getrequest   getrelativepathprefixtowickethandler
string result   prepender tostring
// we need to special-case links to the home page if we're at the
// same level.
if  result length      0
result
return requestcycle getoriginalresponse   encodeurl result
// just return null intead of throwing an exception. so that it can be
// handled better
return null
/**
* @see org.apache.wicket.request.irequesttargetmountsinfo#listmounts()
*/
public irequesttargeturlcodingstrategy listmounts
return  irequesttargeturlcodingstrategy mountsonpath strategies   toarray
new irequesttargeturlcodingstrategy
/**
* @see org.apache.wicket.request.irequesttargetmounter#urlcodingstrategyforpath(java.lang.string)
*/
public final irequesttargeturlcodingstrategy urlcodingstrategyforpath string path
if  path    null
return  irequesttargeturlcodingstrategy mountsonpath strategyformount null
else
irequesttargeturlcodingstrategy strategy   mountsonpath strategyforpath path
if  strategy    null
return strategy
return null
/**
* @see org.apache.wicket.request.irequesttargetmounter#mount(java.lang.string,
*      org.apache.wicket.request.target.coding.irequesttargeturlcodingstrategy)
*/
public final void mount irequesttargeturlcodingstrategy encoder
if  encoder    null
throw new illegalargumentexception
string path   encoder getmountpath
if  strings isempty path
throw new illegalargumentexception
if  path equals
throw new illegalargumentexception
// sanity check
if  path startswith
path   path substring 1
if  mountsonpath strategyformount path     null
throw new wicketruntimeexception path
mountsonpath strategyformount path
mountsonpath mount path  encoder
/**
* @see org.apache.wicket.request.irequestcodingstrategy#pathfortarget(org.apache.wicket.irequesttarget)
*/
public final charsequence pathfortarget irequesttarget requesttarget
// first check whether the target was mounted
irequesttargeturlcodingstrategy encoder   getmountencoder requesttarget
if  encoder    null
return encoder encode requesttarget
return null
/**
* @see org.apache.wicket.request.irequestcodingstrategy#targetforrequest(org.apache.wicket.request.requestparameters)
*/
public final irequesttarget targetforrequest requestparameters requestparameters
irequesttargeturlcodingstrategy encoder   urlcodingstrategyforpath requestparameters
getpath
if  encoder    null
return null
return encoder decode requestparameters
/**
* @see org.apache.wicket.request.irequestcodingstrategy#unmount(java.lang.string)
*/
public final void unmount string path
if  path    null
throw new illegalargumentexception
// sanity check
if   path startswith
path       path
mountsonpath unmount path
/**
* adds bookmarkable page related parameters (page alias and optionally page
* parameters). any bookmarkable page alias mount will override this method;
* hence if a mount is found, this method will not be called.
*
* if you override this method to behave different then also
* {@link #encode(requestcycle, ibookmarkablepagerequesttarget)} should be
* overridden to by in sync with that behaviour.
*
* @param request
*            the incoming request
* @param parameters
*            the parameters object to set the found values on
*/
protected void addbookmarkablepageparameters final request request
final requestparameters parameters
final string requeststring   request
getparameter webrequestcodingstrategy bookmarkable_page_parameter_name
if  requeststring    null
final string components   strings split requeststring  component path_separator
if  components length    2
throw new wicketruntimeexception
requeststring
// extract any pagemap name
final string pagemapname   components
parameters setpagemapname pagemapname length      0
? pagemap default_name
pagemapname
// extract bookmarkable page class name
final string pageclassname   components
parameters setbookmarkablepageclass pageclassname
/**
* adds page related parameters (path and pagemap and optionally version and
* interface).
*
* if you override this method to behave different then also
* {@link #encode(requestcycle, ilistenerinterfacerequesttarget)} should be
* overridden to by in sync with that behaviour.
*
* @param request
*            the incoming request
* @param parameters
*            the parameters object to set the found values on
*/
protected void addinterfaceparameters final request request  final requestparameters parameters
addinterfaceparameters request getparameter interface_parameter_name   parameters
/**
* analyses the passed in interfaceparameter for the relevant parts and puts
* the parts as parameters in the provided request parameters object.
*
* @param interfaceparameter
*            the format of the interfaceparameter is: <code>
* page-map-name:path:version:interface:behaviourid:urldepth
* </code>
* @param parameters
*            parameters object to set the found parts in
*/
public static void addinterfaceparameters final string interfaceparameter
final requestparameters parameters
if  interfaceparameter    null
return
// split into array of strings
string pathcomponents   strings split interfaceparameter  component path_separator
// there must be 6 components
// pagemap:(pageid:componenta:componentb:...):version:interface:behavior:depth
if  pathcomponents length < 6
throw new wicketruntimeexception     interface_parameter_name
interfaceparameter
// extract version
string versionnumberstring   null
try
versionnumberstring   pathcomponents
final int versionnumber   strings isempty versionnumberstring  ? 0   integer
parseint versionnumberstring
parameters setversionnumber versionnumber
catch  numberformatexception e
throw new wicketruntimeexception     interface_parameter_name
interfaceparameter
versionnumberstring      e
// set pagemap name
final string pagemapname   pathcomponents
parameters setpagemapname pagemapname length      0 ? pagemap default_name   pagemapname
// extract url depth after last colon
final string urldepthstring   pathcomponents
final int urldepth   strings isempty urldepthstring  ?  1   integer
parseint urldepthstring
parameters seturldepth urldepth
// extract behaviour id after last colon
final string behaviourid   pathcomponents
parameters setbehaviorid behaviourid length      0 ? behaviourid   null
// extract interface name after second-to-last colon
final string interfacename   pathcomponents
parameters setinterfacename interfacename length      0
? interfacename
iredirectlistener interface getname
// component path is everything after pagemapname and before version
final int start   pagemapname length     1
final int end   interfaceparameter length     behaviourid length     interfacename length
versionnumberstring length     urldepthstring length     4
final string componentpath   interfaceparameter substring start  end
parameters setcomponentpath componentpath
/**
* adds (shared) resource related parameters (resource key). any shared
* resource key mount will override this method; hence if a mount is found,
* this method will not be called.
*
* if you override this method to behave different then also
* {@link #encode(requestcycle, isharedresourcerequesttarget)} should be
* overridden to by in sync with that behaviour.
*
* @param request
*            the incomming request
* @param parameters
*            the parameters object to set the found values on
*/
protected void addresourceparameters request request  requestparameters parameters
string pathinfo   request getpath
if  pathinfo    null    pathinfo startswith resources_path_prefix
int ix   resources_path_prefix length
if  pathinfo length   > ix
stringbuffer path   new stringbuffer pathinfo substring ix
int ixsemicolon   path indexof
// strip off any jsession id
if  ixsemicolon     1
int ixend   path indexof
if  ixend     1
ixend   path length
path delete ixsemicolon  ixend
parameters setresourcekey path tostring
/**
* in case you are using custom targets that are not part of the default
* target hierarchy, you need to override this method, which will be called
* after the defaults have been tried. when this doesn't provide a url
* either (returns null), an exception will be thrown by the encode method
* saying that encoding could not be done.
*
* @param requestcycle
*            the current request cycle (for efficient access)
*
* @param requesttarget
*            the request target
* @return the url to the provided target, as a relative path from the
*         filter root.
*/
protected string doencode requestcycle requestcycle  irequesttarget requesttarget
return null
/**
* encode a page class target.
*
* if you override this method to behave different then also
* {@link #addbookmarkablepageparameters(request, requestparameters)} should
* be overridden to by in sync with that behaviour.
*
* @param requestcycle
*            the current request cycle
* @param requesttarget
*            the target to encode
* @return the encoded url
*/
protected charsequence encode requestcycle requestcycle
ibookmarkablepagerequesttarget requesttarget
// begin encoding url
final appendingstringbuffer url   new appendingstringbuffer 64
// get page class
final class pageclass   requesttarget getpageclass
final application application   application get
// find pagemap name
string pagemapname   requesttarget getpagemapname
if  pagemapname    null
irequesttarget currenttarget   requestcycle getrequesttarget
if  currenttarget instanceof ipagerequesttarget
page currentpage     ipagerequesttarget currenttarget  getpage
final ipagemap pagemap   currentpage getpagemap
if  pagemap isdefault
pagemapname
else
pagemapname   pagemap getname
else
pagemapname
webrequestencoder encoder   new webrequestencoder url
if   application gethomepage   equals pageclass
equals pagemapname
application gethomepage   equals pageclass     requesttarget instanceof bookmarkablelistenerinterfacerequesttarget
/*
* add <page-map-name>:<bookmarkable-page-class>
*
* encode the url so it is correct even for class names containing
* non ascii characters, like ãâ¤, ãâ¦, ãâ¸, ãâ¥ etc.
*
* the reason for this is that when redirecting to these
* bookmarkable pages, we need to have the url encoded correctly
* because we can't rely on the browser to interpret the unencoded
* url correctly.
*/
encoder addvalue webrequestcodingstrategy bookmarkable_page_parameter_name  pagemapname
component path_separator   pageclass getname
// get page parameters
final pageparameters parameters   requesttarget getpageparameters
if  parameters    null
final iterator iterator
if  unittestsettings getsorturlparameters
iterator   new treeset parameters keyset    iterator
else
iterator   parameters keyset   iterator
while  iterator hasnext
final string key    string iterator next
final string values   parameters getstringarray key
if  values    null
for  int i   0  i < values length  i
encoder addvalue key  values
return url
/**
* encode a shared resource target.
*
* if you override this method to behave different then also
* {@link #addresourceparameters(request, requestparameters)} should be
* overridden to by in sync with that behaviour.
*
* @param requestcycle
*            the current request cycle
* @param requesttarget
*            the target to encode
* @return the encoded url
*/
protected charsequence encode requestcycle requestcycle
isharedresourcerequesttarget requesttarget
final string sharedresourcekey   requesttarget getresourcekey
if   sharedresourcekey    null      sharedresourcekey trim   length      0
return
else
final appendingstringbuffer buffer   new appendingstringbuffer sharedresourcekey
length
buffer append
buffer append sharedresourcekey
map map   requesttarget getrequestparameters   getparameters
if  map    null    map size   > 0
buffer append
iterator it   map entryset   iterator
while  it hasnext
map entry entry    entry it next
buffer append entry getkey
buffer append
buffer append entry getvalue
if  it hasnext
buffer append
return buffer
/**
* encode a listener interface target.
*
* if you override this method to behave different then also
* {@link #addinterfaceparameters(request, requestparameters)} should be
* overridden to by in sync with that behaviour.
*
* @param requestcycle
*            the current request cycle
* @param requesttarget
*            the target to encode
* @return the encoded url
*/
protected charsequence encode requestcycle requestcycle
ilistenerinterfacerequesttarget requesttarget
final requestlistenerinterface rli   requesttarget getrequestlistenerinterface
// start string buffer for url
final appendingstringbuffer url   new appendingstringbuffer 64
url append
url append interface_parameter_name
url append
// get component and page for request target
final component component   requesttarget gettarget
final page page   component getpage
// add pagemap
final ipagemap pagemap   page getpagemap
if   pagemap isdefault
url append pagemap getname
url append component path_separator
// add path to component
url append component getpath
url append component path_separator
// add version
final int versionnumber   component getpage   getcurrentversionnumber
if   rli getrecordspageversion
url append page latest_version
else if  versionnumber > 0
url append versionnumber
url append component path_separator
// add listener interface
final string listenername   rli getname
if   iredirectlistener interface getname   equals listenername
url append listenername
url append component path_separator
// add behaviourid
requestparameters params   requesttarget getrequestparameters
if  params    null    params getbehaviorid      null
url append params getbehaviorid
url append component path_separator
// add url depth
if  params    null    params geturldepth      0
url append params geturldepth
return url
/**
* encode a page target.
*
* @param requestcycle
*            the current request cycle
* @param requesttarget
*            the target to encode
* @return the encoded url
*/
protected charsequence encode requestcycle requestcycle  ipagerequesttarget requesttarget
// get the page we want a url from:
page page   requesttarget getpage
// a url to a page is the iredirectlistener interface:
charsequence urlredirect   page urlfor iredirectlistener interface
// touch the page once because it could be that it did go from stateless
// to statefull or it was a internally made page where just a url must
// be made for (frames)
session get   touch page
return urlredirect
/**
* gets the mount encoder for the given request target if any.
*
* @param requesttarget
*            the request target to match
* @return the mount encoder if any
*/
protected irequesttargeturlcodingstrategy getmountencoder irequesttarget requesttarget
// todo post 1.2: performance: optimize algorithm if possible and/ or
// cache lookup results
for  iterator i   mountsonpath strategies   iterator    i hasnext
irequesttargeturlcodingstrategy encoder    irequesttargeturlcodingstrategy i next
if  encoder matches requesttarget
return encoder
return null
/**
* gets the request info path. this is an overridable method in order to
* provide users with a means to implement e.g. a path encryption scheme.
* this method by default returns {@link request#getpath()}.
*
* @param request
*            the request
* @return the path info object, possibly processed
*/
protected string getrequestpath request request
return request getpath
/**
* map used to store mount paths and their corresponding url coding
* strategies.
*
* @author ivaynberg
*/
private static class mountsmap
private static final long serialversionuid   1l
/** case sensitive flag */
private final boolean casesensitivemounts
/** backing map */
private final treemap map
/**
* constructor
*
* @param casesensitivemounts
*            whether or not keys of this map are case-sensitive
*/
public mountsmap boolean casesensitivemounts
map   new treemap length_comparator
this casesensitivemounts   casesensitivemounts
/**
* checks if the specified path matches any mount, and if so returns the
* coding strategy for that mount. returns null if the path doesnt match
* any mounts.
*
* note: path here is not the mount - it is the full url path
*
* @param path
*            non-null url path
* @return coding strategy or null
*/
public irequesttargeturlcodingstrategy strategyforpath string path
if  path    null
throw new illegalargumentexception
if  casesensitivemounts    false
path   path tolowercase
for  final iterator it   map entryset   iterator    it hasnext
final map entry entry    entry it next
final string key    string entry getkey
if  path startswith key
/*
* we need to match /mount/point or
* /mount/point/with/extra/path, but not /mount/pointxxx
*/
string remainder   path substring key length
if  remainder length      0    remainder startswith
return  irequesttargeturlcodingstrategy entry getvalue
return null
/**
* @return number of mounts in the map
*/
public int size
return map size
/**
* @return collection of coding strategies associated with every mount
*/
public collection strategies
return map values
/**
* removes mount from the map
*
* @param mount
*/
public void unmount string mount
if  casesensitivemounts    false    mount    null
mount   mount tolowercase
map remove mount
/**
* gets the coding strategy for the specified mount path
*
* @param mount
*            mount paht
* @return associated coding strategy or null if none
*/
public irequesttargeturlcodingstrategy strategyformount string mount
if  casesensitivemounts    false    mount    null
mount   mount tolowercase
return  irequesttargeturlcodingstrategy map get mount
/**
* associates a mount with a coding strategy
*
* @param mount
* @param encoder
* @return previous coding strategy associated with the mount, or null
*         if none
*/
public irequesttargeturlcodingstrategy mount string mount
irequesttargeturlcodingstrategy encoder
if  casesensitivemounts    false    mount    null
mount   mount tolowercase
return  irequesttargeturlcodingstrategy map put mount  encoder
/** comparator implementation that sorts longest strings first */
private static final comparator length_comparator   new comparator
public int compare object o1  object o2
// longer first
if  o1    o2
return 0
else if  o1    null
return 1
else if  o2    null
return  1
else
final string lhs    string o1
final string rhs    string o2
return rhs compareto lhs