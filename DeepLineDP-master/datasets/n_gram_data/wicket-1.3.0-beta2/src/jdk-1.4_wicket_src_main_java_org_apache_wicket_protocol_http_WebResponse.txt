/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io ioexception
import java io outputstream
import java util locale
import javax servlet http cookie
import javax servlet http httpservletresponse
import org apache wicket response
import org apache wicket wicketruntimeexception
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util time time
import org slf4j logger
import org slf4j loggerfactory
/**
* implements responses over the http protocol by holding an underlying
* httpservletresponse object and providing convenience methods for using that
* object. convenience methods include methods which: add a cookie, close the
* stream, encode a url, redirect a request to another resource, determine if a
* redirect has been issued, set the content type, set the locale and, most
* importantly, write a string to the response output.
*
* @author jonathan locke
*/
public class webresponse extends response
/** log. */
private static final logger log   loggerfactory getlogger webresponse class
/** true if response is a redirect. */
protected boolean redirect
/** the underlying response object. */
private final httpservletresponse httpservletresponse
/** is the request an ajax request? */
private boolean ajax
/**
* constructor for testing harness.
*/
public webresponse
this httpservletresponse   null
/**
* package private constructor.
*
* @param httpservletresponse
*            the servlet response object
*/
public webresponse final httpservletresponse httpservletresponse
this httpservletresponse   httpservletresponse
/**
* add a cookie to the web response
*
* @param cookie
*/
public void addcookie final cookie cookie
if  httpservletresponse    null
httpservletresponse addcookie cookie
/**
* convenience method for clearing a cookie.
*
* @param cookie
*            the cookie to set
* @see webresponse#addcookie(cookie)
*/
public void clearcookie final cookie cookie
if  httpservletresponse    null
cookie setmaxage 0
cookie setvalue null
addcookie cookie
/**
* closes response output.
*/
public void close
// note: servlet container will close the response output stream
// automatically, so we do nothing here.
/**
* returns the given url encoded.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public charsequence encodeurl charsequence url
if  httpservletresponse    null    url    null
return httpservletresponse encodeurl url tostring
return url
/**
* gets the wrapped http servlet response object.
*
* @return the wrapped http servlet response object
*/
public final httpservletresponse gethttpservletresponse
return httpservletresponse
/**
* @see org.apache.wicket.response#getoutputstream()
*/
public outputstream getoutputstream
try
return httpservletresponse getoutputstream
catch  ioexception e
throw new wicketruntimeexception    e
/**
* whether this response is going to redirect the user agent.
*
* @return true if this response is going to redirect the user agent
*/
public final boolean isredirect
return redirect
/**
* clients should never call this method for day to day use!
* <p>
* redirects to the given url. implementations should encode the url to make
* sure cookie-less operation is supported in case clients forgot.
* </p>
*
* @param url
*            the url to redirect to
*/
public void redirect string url
if   redirect
if  httpservletresponse    null
// encode to make sure no caller forgot this
url   httpservletresponse encoderedirecturl url  tostring
try
if  httpservletresponse iscommitted
log error     url
if  log isdebugenabled
log debug     url
if  isajax
/*
* by reaching this point, make sure the http response
* status code is set to 200, otherwise wicket-ajax.js
* will not process the ajax-location header
*/
httpservletresponse addheader    url
// safari chokes on empty response. but perhaps this is
// not the best place?
httpservletresponse getwriter   write
else
httpservletresponse sendredirect url
redirect   true
catch  ioexception e
log warn     url       e getmessage
else
log info     url
/**
* set the content type on the response.
*
* @param mimetype
*            the mime type
*/
public final void setcontenttype final string mimetype
if  httpservletresponse    null
httpservletresponse setcontenttype mimetype
/**
* @see org.apache.wicket.response#setcontentlength(long)
*/
public void setcontentlength long length
if  httpservletresponse    null
httpservletresponse setcontentlength  int length
/**
* @see org.apache.wicket.response#setlastmodifiedtime(org.apache.wicket.util.time.time)
*/
public void setlastmodifiedtime time time
if  httpservletresponse    null
if  time    null    time getmilliseconds       1
httpservletresponse setdateheader    time getmilliseconds
/**
* output stream encoding. if the deployment descriptor contains a
* locale-encoding-mapping-list element, and that element provides a mapping
* for the given locale, that mapping is used. otherwise, the mapping from
* locale to character encoding is container dependent. default is
* iso-8859-1.
*
* @see javax.servlet.servletresponse#setlocale(java.util.locale)
*
* @param locale
*            the locale use for mapping the character encoding
*/
public final void setlocale final locale locale
if  httpservletresponse    null
httpservletresponse setlocale locale
/**
* writes string to response output.
*
* @param string
*            the string to write
*/
public void write final charsequence string
if  string instanceof appendingstringbuffer
write  appendingstringbuffer string
else if  string instanceof stringbuffer
try
stringbuffer sb    stringbuffer string
char array   new char
sb getchars 0  sb length    array  0
httpservletresponse getwriter   write array  0  array length
catch  ioexception e
throw new wicketruntimeexception    e
else
try
httpservletresponse getwriter   write string tostring
catch  ioexception e
throw new wicketruntimeexception    e
/**
* writes appendingstringbuffer to response output.
*
* @param asb
*            the appendingstringbuffer to write to the stream
*/
public void write appendingstringbuffer asb
try
httpservletresponse getwriter   write asb getvalue    0  asb length
catch  ioexception e
throw new wicketruntimeexception    e
/**
* set a header to the date value in the servlet response stream.
*
* @param header
* @param date
*/
public void setdateheader string header  long date
if  httpservletresponse    null
httpservletresponse setdateheader header  date
/**
* set a header to the string value in the servlet response stream.
*
* @param header
* @param value
*/
public void setheader string header  string value
if  httpservletresponse    null
httpservletresponse setheader header  value
/**
* convenience method for setting the content-disposition:attachment header.
* this header is used if the response should prompt the user to download it
* as a file instead of opening in a browser.
*
* @param filename
*            file name of the attachment
*/
public void setattachmentheader string filename
setheader
strings isempty filename   ?
/**
* is the request, which matches this response an ajax request.
*
* @return true if the request is an ajax request.
*/
public boolean isajax
return ajax
/**
* set that the request which matches this response is an ajax request.
*
* @param ajax
*            true if the request is an ajax request.
*/
public void setajax boolean ajax
this ajax   ajax