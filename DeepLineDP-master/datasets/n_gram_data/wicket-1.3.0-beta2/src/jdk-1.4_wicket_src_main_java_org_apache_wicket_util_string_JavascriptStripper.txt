/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util string
/**
* strips comments and whitespace from javascript
*
* @author matej knopp
*/
public class javascriptstripper
/*
* determines the state of script proessing.
*/
/** inside regular text */
private final static int regular_text   1
/** string started with single quote (') */
private final static int string_single_quote   2
/** string started with double quotes (") */
private final static int string_double_quotes   3
/** inside two or more whitespace characters */
private final static int white_space   4
/** inside a line comment (//   ) */
private final static int line_comment   5
/** inside a multi line comment */
private final static int multiline_comment   6
/** inside a regular expression */
private final static int reg_exp   7
/**
* removes javascript comments and whitespaces from specified string.
*
* @param original
*            source string
* @return string with removed comments and whitespaces
*/
public static string stripcommentsandwhitespace string original
// let's be optimistic
stringbuffer result   new stringbuffer original length     2
int state   regular_text
for  int i   0  i < original length      i
char c   original charat i
char next    i < original length     1  ? original charat i   1    0
char prev    i > 0  ? original charat i   1    0
if  state    white_space
if  character iswhitespace next     false
state   regular_text
continue
if  state    regular_text
if  c         next         prev
state   line_comment
continue
else if  c         next
state   multiline_comment
i
continue
else if  c
// this might be a divide operator, or it might be a regular expression.
// work out if it's a regular expression by finding the previous non-whitespace char, which
// will be either '=' or '('. if it's not, it's just a divide operator.
int idx   i   1
while  idx > 0
char tmp   original charat idx
if  character iswhitespace tmp
idx
continue
if  tmp         tmp
state   reg_exp
break
break
else if  character iswhitespace c     character iswhitespace next
// ignore all whitespace characters after this one
state   white_space
c
else if  c
state   string_single_quote
else if  c
state   string_double_quotes
result append c
continue
if  state    line_comment
if  c         c
state   regular_text
continue
if  state    multiline_comment
if  c         next
state   regular_text
i
continue
if  state    string_single_quote
if  c         prev
state   regular_text
result append c
continue
if  state    string_double_quotes
if  c         prev
state   regular_text
result append c
continue
if  state    reg_exp
if  c         prev
state   regular_text
result append c
continue
return result tostring