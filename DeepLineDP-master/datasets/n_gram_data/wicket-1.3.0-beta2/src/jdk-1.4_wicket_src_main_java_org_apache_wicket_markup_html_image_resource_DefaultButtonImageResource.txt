/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html image resource
import java awt color
import java awt font
import java awt fontmetrics
import java awt graphics2d
import java awt renderinghints
import java util map
/**
* automatically generates a basic button image. the model for the component
* determines the label displayed on the button.
*
* @author jonathan locke
*/
public class defaultbuttonimageresource extends rendereddynamicimageresource
private static final long serialversionuid   1l
/** the default height for button images */
private static int defaultheight   26
/** the default width for button images */
private static int defaultwidth   74
/** default color: orange. */
private static final int default_color   new color 0xe9  0x60  0x1a  getrgb
/** default background color: white. */
private static final int default_background_color   color white getrgb
/** default text color: white. */
private static final int default_text_color   color white getrgb
/** default font: helvetica bold 16. */
private static final map default_font   new font    font bold  16  getattributes
/**
* @param defaultheight
*            the defaultheight to set.
*/
public static void setdefaultheight int defaultheight
defaultbuttonimageresource defaultheight   defaultheight
/**
* @param defaultwidth
*            the defaultwidth to set.
*/
public static void setdefaultwidth int defaultwidth
defaultbuttonimageresource defaultwidth   defaultwidth
/** the height of the arc in the corner */
private int archeight   10
/** the width of the arc in the corner */
private int arcwidth   10
/** the background color behind the button */
private int backgroundcolorrgb   default_background_color
/** the color of the button itself */
private int colorrgb   default_color
/** the font to use */
private map fontattributes   default_font
/** the color of the text */
private int textcolorrgb   default_text_color
/** the button label */
private final string label
/**
* @param label
*            the label for this button image
* @param width
*            width of image in pixels
* @param height
*            height of image in pixels
*/
public defaultbuttonimageresource int width  int height  final string label
super width  height
this label   label
setwidth width     1 ? defaultwidth   width
setheight height     1 ? defaultheight   height
/**
* @param label
*            the label for this button image
*/
public defaultbuttonimageresource final string label
this defaultwidth  defaultheight  label
/**
* @return returns the archeight.
*/
public synchronized int getarcheight
return archeight
/**
* @return returns the arcwidth.
*/
public synchronized int getarcwidth
return arcwidth
/**
* @return returns the backgroundcolor.
*/
public synchronized color getbackgroundcolor
return new color backgroundcolorrgb
/**
* @return returns the color.
*/
public synchronized color getcolor
return new color colorrgb
/**
* @return returns the font.
*/
public synchronized font getfont
return new font fontattributes
/**
* @return returns the textcolor.
*/
public synchronized color gettextcolor
return new color textcolorrgb
/**
* @param archeight
*            the archeight to set.
*/
public synchronized void setarcheight int archeight
this archeight   archeight
invalidate
/**
* @param arcwidth
*            the arcwidth to set.
*/
public synchronized void setarcwidth int arcwidth
this arcwidth   arcwidth
invalidate
/**
* @param backgroundcolor
*            the backgroundcolor to set.
*/
public synchronized void setbackgroundcolor color backgroundcolor
this backgroundcolorrgb   backgroundcolor getrgb
invalidate
/**
* @param color
*            the color to set.
*/
public synchronized void setcolor color color
this colorrgb   color getrgb
invalidate
/**
* @param font
*            the font to set.
*/
public synchronized void setfont font font
this fontattributes   font getattributes
invalidate
/**
* @param textcolor
*            the textcolor to set.
*/
public synchronized void settextcolor color textcolor
this textcolorrgb   textcolor getrgb
invalidate
/**
* renders button image.
*
* @see rendereddynamicimageresource#render(graphics2d)
*/
protected boolean render final graphics2d graphics
// get width and height
final int width   getwidth
final int height   getheight
// get size of text
graphics setfont getfont
final fontmetrics fontmetrics   graphics getfontmetrics
final int dxtext   fontmetrics stringwidth label
final int dxmargin   10
// does text fit with a nice margin?
if  dxtext > width   dxmargin
// re-render as a larger button
setwidth dxtext   dxmargin
return false
else
// turn on anti-aliasing
graphics setrenderinghint renderinghints key_antialiasing
renderinghints value_antialias_on
// draw background
color bgcolor   getbackgroundcolor
graphics setcolor bgcolor
graphics fillrect 0  0  width  height
// draw round rectangle
graphics setcolor getcolor
graphics setbackground bgcolor
graphics fillroundrect 0  0  width  height  arcwidth  archeight
// draw text
graphics setcolor gettextcolor
final int x    width   dxtext    2
final int y    getheight     fontmetrics getheight      2
graphics drawstring label  x  y   fontmetrics getascent
return true