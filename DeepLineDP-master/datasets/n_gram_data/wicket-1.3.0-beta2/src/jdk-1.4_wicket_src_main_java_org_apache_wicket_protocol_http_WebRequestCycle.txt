/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import org apache wicket abortexception
import org apache wicket iredirectlistener
import org apache wicket metadatakey
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket response
import org apache wicket restartresponseatinterceptpageexception
import org apache wicket session
import org apache wicket markup html pages browserinfopage
import org apache wicket protocol http request webclientinfo
import org apache wicket protocol http servlet servletwebrequest
import org apache wicket request clientinfo
import org apache wicket request irequestcycleprocessor
import org apache wicket settings irequestcyclesettings
import org slf4j logger
import org slf4j loggerfactory
/**
* requestcycle implementation for http protocol. holds the application,
* session, request and response objects for a given http request. contains
* methods (urlfor*) which yield a url for bookmarkable pages as well as
* non-bookmarkable component interfaces. the protected handlerender method is
* the internal entrypoint which takes care of the details of rendering a
* response to an http request.
*
* @see requestcycle
* @author jonathan locke
* @author johan compagner
* @author gili tzabari
* @author eelco hillenius
*/
public class webrequestcycle extends requestcycle
/** logging object */
private static final logger log   loggerfactory getlogger webrequestcycle class
private static final metadatakey browser_was_polled_key   new metadatakey boolean class
private static final long serialversionuid   1l
/**
* constructor which simply passes arguments to superclass for storage
* there. this instance will be set as the current one for this thread.
*
* @param application
*            the applicaiton
* @param request
*            the request
* @param response
*            the response
*/
public webrequestcycle final webapplication application  final webrequest request
final response response
super application  request  response
/**
* by default returns the webapplication's default request cycle processor.
* typically, you don't override this method but instead override
* {@link webapplication#getrequestcycleprocessor()}.
* <p>
* <strong>if you decide to override this method to provide a custom
* processor per request cycle, any mounts done via webapplication will not
* work and and {@link #onruntimeexception(page, runtimeexception)} is not
* called unless you deliberately put effort in it to make it work.</strong>
* </p>
*
* @see org.apache.wicket.requestcycle#getprocessor()
*/
public irequestcycleprocessor getprocessor
return   webapplication getapplication    getrequestcycleprocessor
/**
* @return request as a webrequest
*/
public webrequest getwebrequest
return  webrequest request
/**
* @return response as a webresponse
*/
public webresponse getwebresponse
return  webresponse response
/**
* @return session as a websession
*/
public websession getwebsession
return  websession getsession
/**
* redirects browser to the given page. note: usually, you should never call
* this method directly, but work with setresponsepage instead. this method
* is part of wicket's internal behavior and should only be used when you
* want to circumvent the normal framework behavior and issue the redirect
* directly.
*
* @param page
*            the page to redirect to
*/
public final void redirectto final page page
string redirecturl   null
// check if use serverside response for client side redirects
irequestcyclesettings settings   application getrequestcyclesettings
if   settings getrenderstrategy      irequestcyclesettings redirect_to_buffer
application instanceof webapplication
// remember the current response
final webresponse currentresponse   getwebresponse
try
redirecturl   page urlfor iredirectlistener interface  tostring
if  getwebrequest   instanceof servletwebrequest
// get the redirect url and set it in the servletwebrequest
// so that it can be used for relative url calculation.
servletwebrequest getwebrequest    setwicketredirecturl redirecturl replaceall
// create the redirect response.
final bufferedhttpservletresponse servletresponse   new bufferedhttpservletresponse
currentresponse gethttpservletresponse
final webresponse redirectresponse   new webresponse servletresponse
public charsequence encodeurl charsequence url
return currentresponse encodeurl url
redirectresponse setcharacterencoding currentresponse getcharacterencoding
// redirect the response to the buffer
setresponse redirectresponse
// render the page into the buffer
page renderpage
// re-assign the original response
setresponse currentresponse
final string responseredirect   servletresponse getredirecturl
if  responseredirect    null
// if the redirectresponse has another redirect url set
// then the rendering of this page caused a redirect to
// something else.
// set this redirect then.
redirecturl   responseredirect
else if  servletresponse getcontentlength   > 0
// call filter() so that any filters can process the
// response
servletresponse filter currentresponse
// set the final character encoding before calling close
servletresponse setcharacterencoding currentresponse getcharacterencoding
// close it so that the reponse is fixed and encoded from
// here on.
servletresponse close
int index   redirecturl indexof
string sessionid   getwebrequest   gethttpservletrequest   getsession true
getid
webapplication application  addbufferedresponse sessionid  redirecturl
substring index   1   servletresponse
catch  runtimeexception ex
// re-assign the original response
setresponse currentresponse
if  ex instanceof abortexception
throw ex
if    ex instanceof pageexpiredexception
logruntimeexception ex
irequestcycleprocessor processor   getprocessor
processor respond ex  this
return
else
redirecturl   page urlfor iredirectlistener interface  tostring
// redirect page can touch its models already (via for example the
// constructors)
// this can be removed i guess because this page will be detached in
// the page target
// page.internaldetach();
if  redirecturl    null
redirecturl   page urlfor iredirectlistener interface  tostring
// always touch the page again so that a redirect listener makes a page
// stateful and adds it to the pagemap
getsession   touch page
// redirect to the url for the page
response redirect redirecturl
/**
* @see org.apache.wicket.requestcycle#newclientinfo()
*/
protected clientinfo newclientinfo
if  getapplication   getrequestcyclesettings   getgatherextendedbrowserinfo
session session   getsession
if  session getmetadata browser_was_polled_key     null
// we haven't done the redirect yet; record that we will be
// doing that now and redirect
session setmetadata browser_was_polled_key  boolean true
throw new restartresponseatinterceptpageexception new browserinfopage getrequest   getrelativepathprefixtocontextroot     getrequest   geturl
// if we get here, the redirect already has been done; clear
// the meta data entry; we don't need it any longer is the client
// info object will be cached too
session setmetadata browser_was_polled_key   boolean null
return new webclientinfo this
/**
* if it's an ajax request we always redirect.
*
* @see org.apache.wicket.requestcycle#isredirect()
*/
public final boolean isredirect
if  getwebrequest   isajax
return true
else
return super isredirect