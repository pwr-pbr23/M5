/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util lang
import java lang reflect array
import java lang reflect field
import java lang reflect invocationtargetexception
import java lang reflect method
import java util list
import java util map
import org apache wicket application
import org apache wicket session
import org apache wicket wicketruntimeexception
import org apache wicket util concurrent concurrenthashmap
import org apache wicket util convert conversionexception
import org apache wicket util string strings
import org slf4j logger
import org slf4j loggerfactory
/**
* this class parses expressions to lookup or set a value on the object that is
* given. <br/> the supported expressions are:
* <p>
* "property": this can can then be a bean property with get and set method. or
* if a map is given as an object it will be lookup with the property as a key
* when there is not get method for that property. <p/>
* <p>
* "property1.property2": both properties are lookup as written above. if
* property1 evaluates to null then if there is a setmethod (or if it is a map)
* and the class of the property has a default constructor then the object will
* be constructed and set on the object. <p/>
* <p>
* "property.index": if the property is a list or array then the second property
* can be a index on that list like: 'mylist.0' this expression will also map on
* a getproperty(index) or setproperty(index,value) methods. if the object is a
* list then the list will grow automaticaly if the index is greater then the
* size <p/>
* <p>
* index or map properties can also be written as: "property[index]" or
* "property[key]" <p/>
*
* @author jcompagner
*/
public final class propertyresolver
private final static map applicationtoclassestogetandsetters   new concurrenthashmap 2
/** log. */
private static final logger log   loggerfactory getlogger propertyresolver class
/**
* looksup the value from the object with the given expression. if the
* expresion, the object itself or one property evalutes to null then a null
* will be returned.
*
* @param expression
*            the expression string with the property to be lookup.
* @param object
*            the object which is evaluated.
* @return the value that is evaluted. null something in the expression
*         evaluted to null.
*/
public final static object getvalue final string expression  final object object
if  expression    null    expression equals       object    null
return object
objectandgetsetter getter   getobjectandgetsetter expression  object  false
if  getter    null
return null
return getter getvalue
/**
* set the value on the object with the given expression. if the expression
* can't be evaluated then a wicketruntimeexception will be thrown. if a
* null object is encounted then it will try to generate it by calling the
* default constructor and set it on the object.
*
* the value will be tried to convert to the right type with the given
* converter.
*
* @param expression
*            the expression string with the property to be set.
* @param object
*            the object which is evaluated to set the value on.
* @param value
*            the value to set.
* @param converter
*            the convertor to convert the value if needed to the right
*            type.
*/
public final static void setvalue final string expression  final object object  object value
propertyresolverconverter converter
if  expression    null    expression equals
throw new wicketruntimeexception     value
object
if  object    null
throw new wicketruntimeexception     value
expression
objectandgetsetter setter   getobjectandgetsetter expression  object  true
if  setter    null
throw new wicketruntimeexception     expression
value       object
setter setvalue value  converter    null ? new propertyresolverconverter application get
getconverterlocator    session get   getlocale      converter
/**
* @param expression
* @param object
* @return class of the target property object
*/
public final static class getpropertyclass string expression  object object
objectandgetsetter setter   getobjectandgetsetter expression  object  true
if  setter    null
throw new wicketruntimeexception     expression
object
return setter gettargetclass
/**
* @param expression
* @param object
* @return field for the property expression or null if such field doesn't
*         exist (only getters and setters)
*/
public final static field getpropertyfield string expression  object object
objectandgetsetter setter   getobjectandgetsetter expression  object  true
if  setter    null
throw new wicketruntimeexception     expression
object
return setter getfield
/**
* @param expression
* @param object
* @return getter method for the property expression or null if such getter
*         doesn't exist (only field)
*/
public final static method getpropertygetter string expression  object object
objectandgetsetter setter   getobjectandgetsetter expression  object  true
if  setter    null
throw new wicketruntimeexception     expression
object
return setter getgetter
/**
* @param expression
* @param object
* @return setter method for the property expression or null if such setter
*         doesn't exist (only field)
*/
public final static method getpropertysetter string expression  object object
objectandgetsetter setter   getobjectandgetsetter expression  object  true
if  setter    null
throw new wicketruntimeexception     expression
object
return setter getsetter
private static objectandgetsetter getobjectandgetsetter final string expression
final object object  boolean trytocreatenull
final string expressionbracketsseperated   strings replaceall expression
tostring
int index   expressionbracketsseperated indexof
int lastindex   0
object value   object
class clz   value getclass
string exp   expressionbracketsseperated
while  index     1
exp   expressionbracketsseperated substring lastindex  index
igetandset getandsetter   null
try
getandsetter   getgetandsetter exp  clz
catch  wicketruntimeexception ex
// expression by it self can't be found. try to find a
// setpropertybyindex(int,value) method
index   expressionbracketsseperated indexof    index   1
if  index     1
string indexexpression   expressionbracketsseperated
substring lastindex  index
getandsetter   getgetandsetter indexexpression  clz
else
exp   expressionbracketsseperated substring lastindex
break
object newvalue   getandsetter getvalue value
if  newvalue    null
if  trytocreatenull
newvalue   getandsetter newvalue value
if  newvalue    null
return null
else
return null
value   newvalue
lastindex   index   1
index   expressionbracketsseperated indexof    lastindex
clz   value getclass
if  index     1
exp   expressionbracketsseperated substring lastindex
break
igetandset getandsetter   getgetandsetter exp  clz
return new objectandgetsetter getandsetter  value
private final static igetandset getgetandsetter string exp  class clz
map classestogetandsetters   getclassestogetandsetters
map getandsetters    map classestogetandsetters get clz
if  getandsetters    null
getandsetters   new concurrenthashmap 8
classestogetandsetters put clz  getandsetters
igetandset getandsetter    igetandset getandsetters get exp
if  getandsetter    null
method method   null
field field   null
if  exp startswith
// if expression begins with [ skip method finding and use it as
// a key/index lookup on a map.
exp   exp substring 1  exp length     1
else if  exp endswith
// if expression ends with (), don't test for setters just skip
// directly to method finding.
method   findmethod clz  exp
else
method   findgetter clz  exp
if  method    null
if  list class isassignablefrom clz
try
int index   integer parseint exp
getandsetter   new listgetset index
catch  numberformatexception ex
// can't parse the exp als a index maybe the exp was a
// method.
method   findmethod clz  exp
if  method    null
getandsetter   new methodgetandset method  null
else
throw new wicketruntimeexception     exp
clz
else if  map class isassignablefrom clz
getandsetter   new mapgetset exp
else if  clz isarray
try
int index   integer parseint exp
getandsetter   new arraygetset index
catch  numberformatexception ex
if  exp equals       exp equals
getandsetter   new arraylengthgetset
else
throw new wicketruntimeexception     exp
else
field   findfield clz  exp
if  field    null
method   findmethod clz  exp
if  method    null
int index   exp indexof
if  index     1
string propertyname   exp substring 0  index
string propertyindex   exp substring index   1
try
int parsedindex   integer parseint propertyindex
// if so then it could be a
// getpropertyindex(int)
// and setpropertyindex(int, object)
string name   character touppercase propertyname charat 0
propertyname substring 1
method   clz getmethod     name  new class   int class
getandsetter   new arraypropertygetset method  parsedindex
catch  exception e
throw new wicketruntimeexception
clz
propertyname
else
// we do not look for a public field because
// that is
// not good
// programming with beans patterns
throw new wicketruntimeexception
clz
exp
else
getandsetter   new methodgetandset method  field
else
getandsetter   new fieldgetandsetter field
else
field   findfield clz  exp
getandsetter   new methodgetandset method  field
getandsetters put exp  getandsetter
return getandsetter
/**
* @param clz
* @param expression
* @return introspected field
*/
private static field findfield class clz  string expression
field field   null
try
field   clz getfield expression
catch  exception e
class tmp   clz
while  tmp    null    tmp    object class
field fields   tmp getdeclaredfields
for  int i   0  i < fields length  i
if  fields getname   equals expression
fields setaccessible true
return fields
tmp   tmp getsuperclass
log debug     clz       expression  e
return field
/**
* @param clz
* @param expression
* @return the method for the expression null if not found
*/
private final static method findgetter class clz  string expression
string name   character touppercase expression charat 0     expression substring 1
method method   null
try
method   clz getmethod     name  null
catch  exception e
if  method    null
try
method   clz getmethod     name  null
catch  exception e
log debug     clz       expression  e
return method
private final static method findmethod class clz  string expression
if  expression endswith
expression   expression substring 0  expression length     2
method method   null
try
method   clz getmethod expression  null
catch  exception e
log debug     clz       expression  e
return method
/**
* utility class: instantiation not allowed.
*/
private propertyresolver
/**
* @author jcompagner
*
*/
private final static class objectandgetsetter
private final igetandset getandsetter
private final object value
/**
* @param getandsetter
* @param value
*/
public objectandgetsetter igetandset getandsetter  object value
this getandsetter   getandsetter
this value   value
/**
* @param value
* @param converter
*/
public void setvalue object value  propertyresolverconverter converter
getandsetter setvalue this value  value  converter
/**
* @return the value
*/
public object getvalue
return getandsetter getvalue value
/**
* @return class of property value
*/
public class gettargetclass
return getandsetter gettargetclass this value
/**
* @return field or null if no field exists for expression
*/
public field getfield
return getandsetter getfield
/**
* @return getter method or null if no getter exists for expression
*/
public method getgetter
return getandsetter getgetter
/**
* @return setter method or null if no setter exists for expression
*/
public method getsetter
return getandsetter getsetter
private static interface igetandset
/**
* @param object
*            the object where the value must be taken from.
*
* @return the value of this property
*/
public object getvalue final object object
/**
* @return
*/
public class gettargetclass final object object
/**
* @param object
*            the object where the new value must be set on.
*
* @return the new value for the property that is set back on that
*         object.
*/
public object newvalue object object
/**
* @param object
* @param value
* @param converter
*/
public void setvalue final object object  final object value
propertyresolverconverter converter
/**
* @return field or null if there is no field
*/
public field getfield
/**
* @return getter method or null if there is no getter
*/
public method getgetter
/**
* @return setter of null if there is no setter
*/
public method getsetter
private static abstract class abstractgetandset implements igetandset
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getfield()
*/
public field getfield
return null
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getgetter()
*/
public method getgetter
return null
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getsetter()
*/
public method getsetter
return null
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(java.lang.object)
*/
public class gettargetclass object object
return null
private static final class mapgetset extends abstractgetandset
final private string key
mapgetset string key
this key   key
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
return   map object  get key
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
map object  put key  value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(object)
*/
public object newvalue object object
// map can't make a newvalue or should it look what is more in the
// map and try to make one of the class if finds?
return null
private static final class listgetset extends abstractgetandset
final private int index
listgetset int index
this index   index
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
return   list object  get index
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
list lst    list object
if  lst size   > index
lst set index  value
else if  lst size      index
lst add value
else
while  lst size   < index
lst add null
lst add value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(object)
*/
public object newvalue object object
// list can't make a newvalue or should it look what is more in the
// list and try to make one of the class if finds?
return null
private static final class arraygetset extends abstractgetandset
final private int index
arraygetset int index
this index   index
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
return array get object  index
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
value   converter convert value  object getclass   getcomponenttype
array set object  index  value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(java.lang.object)
*/
public object newvalue object object
class clz   object getclass   getcomponenttype
object value   null
try
value   clz newinstance
array set object  index  value
catch  exception e
log warn     value       index
clz  e
return value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(object)
*/
public class gettargetclass object object
return object getclass   getcomponenttype
private static final class arraylengthgetset extends abstractgetandset
arraylengthgetset
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
return new integer array getlength object
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
throw new wicketruntimeexception
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(java.lang.object)
*/
public object newvalue object object
throw new wicketruntimeexception
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(java.lang.object)
*/
public class gettargetclass object object
return null
private static final class arraypropertygetset extends abstractgetandset
final private integer index
final private method getmethod
private method setmethod
arraypropertygetset method method  int index
this index   new integer index
this getmethod   method
private final static method findsetter method getmethod  class clz
string name   getmethod getname
name       name substring 3
try
return clz getmethod name  new class   int class  getmethod getreturntype
catch  exception e
log debug     getmethod  e
return null
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
object ret   null
try
ret   getmethod invoke object  new object   index
catch  invocationtargetexception ex
throw new wicketruntimeexception
getmethod       object  ex getcause
catch  exception ex
throw new wicketruntimeexception
getmethod       object  ex
return ret
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
if  setmethod    null
setmethod   findsetter getmethod  object getclass
if  setmethod    null
object converted   converter convert value  getmethod getreturntype
if  converted    null    value    null
throw new conversionexception     value
getmethod getreturntype         object
try
setmethod invoke object  new object   index  converted
catch  invocationtargetexception ex
throw new wicketruntimeexception
setmethod       object  ex getcause
catch  exception ex
throw new wicketruntimeexception
setmethod       object  ex
else
throw new wicketruntimeexception     value
object
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(java.lang.object)
*/
public class gettargetclass object object
return getmethod getreturntype
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(java.lang.object)
*/
public object newvalue object object
if  setmethod    null
setmethod   findsetter getmethod  object getclass
if  setmethod    null
log warn
return null
class clz   getmethod getreturntype
object value   null
try
value   clz newinstance
setmethod invoke object  new object   index  value
catch  exception e
log warn     value       index  e
return value
private static final class methodgetandset extends abstractgetandset
private method getmethod
private method setmethod
private field field
methodgetandset method getmethod  field field
this getmethod   getmethod
this getmethod setaccessible true
this field   field
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public final object getvalue final object object
object ret   null
try
ret   getmethod invoke object  null
catch  invocationtargetexception ex
throw new wicketruntimeexception     getmethod
object  ex getcause
catch  exception ex
throw new wicketruntimeexception     getmethod
object  ex
return ret
/**
* @param object
* @param value
* @param converter
*/
public final void setvalue final object object  final object value
propertyresolverconverter converter
if  setmethod    null
setmethod   findsetter getmethod  object getclass
if  setmethod    null
object converted   converter convert value  getmethod getreturntype
if  converted    null
if  value    null
throw new conversionexception     value
getmethod getreturntype
object
else if  getmethod getreturntype   isprimitive
throw new conversionexception
getmethod getreturntype
object
try
setmethod invoke object  new object   converted
catch  invocationtargetexception ex
throw new wicketruntimeexception     setmethod
object  ex getcause
catch  exception ex
throw new wicketruntimeexception     setmethod
object  ex
else
throw new wicketruntimeexception     value
object
private final static method findsetter method getmethod  class clz
string name   getmethod getname
if  name startswith
name       name substring 3
else
name       name substring 2
try
method method   clz getmethod name  new class   getmethod getreturntype
if  method    null
method setaccessible true
return method
catch  exception e
log debug     getmethod  e
return null
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(java.lang.object)
*/
public object newvalue object object
if  setmethod    null
setmethod   findsetter getmethod  object getclass
if  setmethod    null
log warn
return null
class clz   getmethod getreturntype
object value   null
try
value   clz newinstance
setmethod invoke object  new object   value
catch  exception e
log warn     value  e
return value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(java.lang.object)
*/
public class gettargetclass object object
return getmethod getreturntype
/**
* @see org.apache.wicket.util.lang.propertyresolver.abstractgetandset#getgetter()
*/
public method getgetter
return getmethod
/**
* @see org.apache.wicket.util.lang.propertyresolver.abstractgetandset#getsetter()
*/
public method getsetter
return setmethod
/**
* @see org.apache.wicket.util.lang.propertyresolver.abstractgetandset#getfield()
*/
public field getfield
return field
/**
* @author jcompagner
*/
private static class fieldgetandsetter extends abstractgetandset
private field field
/**
* construct.
*
* @param field
*/
public fieldgetandsetter field field
super
this field   field
this field setaccessible true
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#getvalue(java.lang.object)
*/
public object getvalue object object
try
return field get object
catch  exception ex
throw new wicketruntimeexception     field
object  ex
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#newvalue(java.lang.object)
*/
public object newvalue object object
class clz   field gettype
object value   null
try
value   clz newinstance
field set object  value
catch  exception e
log warn     field       value  e
return value
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#setvalue(java.lang.object,
*      java.lang.object, org.apache.wicket.util.convert.iconverter)
*/
public void setvalue object object  object value  propertyresolverconverter converter
value   converter convert value  field gettype
try
field set object  value
catch  exception ex
throw new wicketruntimeexception     field
object       value  ex
/**
* @see org.apache.wicket.util.lang.propertyresolver.igetandset#gettargetclass(java.lang.object)
*/
public class gettargetclass object object
return field gettype
public field getfield
return field
private static map getclassestogetandsetters
application app   application get
map result    map applicationtoclassestogetandsetters get application get
if  result    null
// don't synchronize this - doesn't matter if we create two of them,
// as it's only a cache and the first will go out of scope and get
// gc'ed.
applicationtoclassestogetandsetters put app  result   new concurrenthashmap 64
return result
/**
* clean up cache for this app.
*
* @param application
*/
public static void destroy application application
applicationtoclassestogetandsetters remove application