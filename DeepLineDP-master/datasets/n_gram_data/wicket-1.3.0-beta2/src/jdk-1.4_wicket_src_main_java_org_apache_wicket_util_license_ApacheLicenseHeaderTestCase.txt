/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util license
import java io file
import java io filefilter
import java util arraylist
import java util hashmap
import java util iterator
import java util list
import java util map
import junit framework testcase
import org apache wicket util string strings
/**
* testcase used in the different wicket projects for testing for the correct
* asl license headers. doesn't really make sense outside org.apache.wicket.
*
* @author frank bille jensen (frankbille)
*/
public abstract class apachelicenseheadertestcase extends testcase
private static final string line_ending   system getproperty
static interface filevisitor
/**
* @param file
*/
void visitfile file file
private class suffixandignorefilefilter implements filefilter
private string suffixes
private string ignorefiles
private suffixandignorefilefilter string suffixes
this suffixes  null
private suffixandignorefilefilter string suffixes  string ignorefiles
this suffixes   suffixes
this ignorefiles   ignorefiles
public boolean accept file pathname
boolean accept   false
if  pathname isfile
if  ignorefile pathname     false
for  int i   0  i < suffixes length  i
string suffix   suffixes
if  pathname getname   endswith     suffix
accept   true
break
return accept
private boolean ignorefile file pathname
boolean ignore   false
if  ignorefiles    null
string relativepathname   pathname getabsolutepath
relativepathname   strings replaceall relativepathname
basedirectory getabsolutepath     system getproperty
tostring
for  int i   0  i < ignorefiles length  i
string ignorepath   ignorefiles
// will convert '/'s to '\\'s on windows
ignorepath   strings replaceall ignorepath
system getproperty     tostring
file ignorefile   new file basedirectory  ignorepath
// directory ignore
if  ignorefile isdirectory
if  pathname getabsolutepath   startswith ignorefile getabsolutepath
ignore   true
break
// absolute file
if  ignorefile isfile
if  relativepathname equals ignorepath
ignore   true
break
return ignore
private class directoryfilefilter implements filefilter
private string ignoredirectory   new string
public boolean accept file pathname
boolean accept   false
if  pathname isdirectory
string relativepathname   pathname getabsolutepath
relativepathname   strings replaceall relativepathname
basedirectory getabsolutepath     system getproperty
tostring
if  relativepathname equals       false
boolean found   false
for  int i   0  i < ignoredirectory length  i
string ignore   ignoredirectory
if  pathname getname   equals ignore
found   true
break
if  found    false
accept   true
return accept
private ilicenseheaderhandler licenseheaderhandlers
private file basedirectory   new file    getabsolutefile
protected string javaignore
protected string htmlignore
protected string propertiesignore
protected string xmlignore
protected string cssignore
protected string velocityignore
protected string javascriptignore
protected boolean addheaders   false
/**
* construct.
*/
public apachelicenseheadertestcase
super
/**
*
* @see junit.framework.testcase#setup()
*/
public final void setup
// setup the base directory for when running inside maven (building a release
// comes to mind).
string property   system getproperty
if  strings isempty property
basedirectory   new file property  getabsolutefile
/**
* test all the files in the project which has an associated
* {@link ilicenseheaderhandler}.
*/
public void testlicenseheaders
licenseheaderhandlers   new ilicenseheaderhandler
new javalicenseheaderhandler javaignore
new javascriptlicenseheaderhandler javascriptignore
new xmllicenseheaderhandler xmlignore
new propertieslicenseheaderhandler propertiesignore
new csslicenseheaderhandler cssignore   new htmllicenseheaderhandler htmlignore
new velocitylicenseheaderhandler velocityignore
final map   <ilicenseheaderhandler  list<file>>   badfiles   new hashmap
* <ilicenseheaderhandler,
* list<file>>
for  int i   0  i < licenseheaderhandlers length  i
final ilicenseheaderhandler licenseheaderhandler   licenseheaderhandlers
visitfiles licenseheaderhandler getsuffixes    licenseheaderhandler getignorefiles
new filevisitor
public void visitfile file file
if  licenseheaderhandler checklicenseheader file     false
if  addheaders    false
licenseheaderhandler addlicenseheader file     false
list   <file>   files    list badfiles
get licenseheaderhandler
if  files    null
files   new arraylist   <file>
badfiles put licenseheaderhandler  files
files add file
failincorrectlicenceheaders badfiles
private void failincorrectlicenceheaders map   <ilicenseheaderhandler  list<file>>   files
if  files size   > 0
stringbuffer failstring   new stringbuffer
for  iterator iter   files keyset   iterator    iter hasnext
ilicenseheaderhandler licenseheaderhandler    ilicenseheaderhandler iter next
failstring append
failstring append licenseheaderhandler getclass   getname
failstring append
failstring append   list files get licenseheaderhandler   size
failstring append
list   <file>   filelist    list files get licenseheaderhandler
for  iterator iterator   filelist iterator    iterator hasnext
file file    file iterator next
string filename   file getabsolutepath
// find the license type
string licensetype   licenseheaderhandler getlicensetype file
if  licensetype    null
failstring append
else
failstring append licensetype
failstring append    append filename  append line_ending
system out println failstring
fail failstring tostring
private void visitfiles string suffixes  string ignorefiles  filevisitor filevisitor
visitdirectory suffixes  ignorefiles  basedirectory  filevisitor
private void visitdirectory string suffixes  string ignorefiles  file directory
filevisitor filevisitor
file files   directory listfiles new suffixandignorefilefilter suffixes  ignorefiles
if  files    null
for  int i   0  i < files length  i
file file   files
filevisitor visitfile file
// find the directories in this directory on traverse deeper
files   directory listfiles new directoryfilefilter
if  files    null
for  int i   0  i < files length  i
file childdirectory   files
visitdirectory suffixes  ignorefiles  childdirectory  filevisitor