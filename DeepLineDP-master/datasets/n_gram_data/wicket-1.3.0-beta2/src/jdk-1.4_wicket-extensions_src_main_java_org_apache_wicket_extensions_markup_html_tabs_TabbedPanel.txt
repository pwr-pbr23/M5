/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html tabs
import java util list
import org apache wicket component
import org apache wicket wicketruntimeexception
import org apache wicket behavior attributeappender
import org apache wicket behavior simpleattributemodifier
import org apache wicket markup componenttag
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html basic label
import org apache wicket markup html link link
import org apache wicket markup html list loop
import org apache wicket markup html panel panel
import org apache wicket model abstractreadonlymodel
import org apache wicket model imodel
import org apache wicket model model
/**
* tabbedpanel component represets a panel with tabs that are used to switch
* between different content panels inside the tabbedpanel panel.
* <p>
* example:
*
* <pre>
*
*                                 list tabs=new arraylist();
*
*                                 tabs.add(new abstracttab(new model(&quot;first tab&quot;)) {
*
*                                 public panel getpanel(string panelid)
*                                 {
*                                 return new tabpanel1(panelid);
*                                 }
*
*                                 });
*
*                                 tabs.add(new abstracttab(new model(&quot;second tab&quot;)) {
*
*                                 public panel getpanel(string panelid)
*                                 {
*                                 return new tabpanel2(panelid);
*                                 }
*
*                                 });
*
*                                 add(new tabbedpanel(&quot;tabs&quot;, tabs));
*
*
*                                 &lt;span wicket:id=&quot;tabs&quot; class=&quot;tabpanel&quot;&gt;[tabbed panel will be here]&lt;/span&gt;
*
* </pre>
*
* </p>
*
* <p>
* for a complete example see the component references in wicket-examples
* project
* </p>
*
* @see org.apache.wicket.extensions.markup.html.tabs.itab
*
* @author igor vaynberg (ivaynberg)
*
*/
public class tabbedpanel extends panel
private static final long serialversionuid   1l
/**
* id used for child panels
*/
public static final string tab_panel_id
private list tabs
/**
* constructor
*
* @param id
*            component id
* @param tabs
*            list of itab objects used to represent tabs
*/
public tabbedpanel string id  list tabs
super id  new model new integer  1
if  tabs    null
throw new illegalargumentexception
if  tabs size   < 1
throw new illegalargumentexception
this tabs   tabs
final imodel tabcount   new abstractreadonlymodel
private static final long serialversionuid   1l
public object getobject
return new integer tabbedpanel this tabs size
webmarkupcontainer tabscontainer   new webmarkupcontainer
private static final long serialversionuid   1l
protected void oncomponenttag componenttag tag
super oncomponenttag tag
tag put    gettabcontainercssclass
add tabscontainer
// add the loop used to generate tab names
tabscontainer add new loop    tabcount
private static final long serialversionuid   1l
protected void populateitem loopitem item
final int index   item getiteration
final itab tab     itab tabbedpanel this tabs get index
final int selected   getselectedtab
final webmarkupcontainer titlelink   newlink    index
titlelink add newtitle    tab gettitle    index
item add titlelink
item add new simpleattributemodifier
private static final long serialversionuid   1l
public boolean isenabled component component
return index    selected
if  item getiteration      getiterations     1
item add new attributeappender    true  new model
// select the first tab by default
setselectedtab 0
/**
* @return the value of css class attribute that will be added to a div
*         containing the tabs. the default value is <code>tab-row</code>
*/
protected string gettabcontainercssclass
return
/**
* @return list of tabs that can be used by the user to add/remove/reorder
*         tabs in the panel
*/
public final list gettabs
return tabs
/**
* factory method for tab titles. returned component can be anything that
* can attach to span tags such as a fragment, panel, or a label
*
* @param titleid
*            id of title component
* @param titlemodel
*            model containing tab title
* @param index
*            index of tab
* @return title component
*/
protected component newtitle string titleid  imodel titlemodel  int index
return new label titleid  titlemodel
/**
* factory method for links used to switch between tabs.
*
* the created component is attached to the following markup. label
* component with id: title will be added for you by the tabbed panel.
*
* <pre>
*            &lt;a href=&quot;#&quot; wicket:id=&quot;link&quot;&gt;&lt;span wicket:id=&quot;title&quot;&gt;[[tab title]]&lt;/span&gt;&lt;/a&gt;
* </pre>
*
* example implementation:
*
* <pre>
* protected webmarkupcontainer newlink(string linkid, final int index)
* {
* 	return new link(linkid)
* 	{
* 		private static final long serialversionuid = 1l;
*
* 		public void onclick()
* 		{
* 			setselectedtab(index);
* 		}
* 	};
* }
* </pre>
*
* @param linkid
*            component id with which the link should be created
* @param index
*            index of the tab that should be activated when this link is
*            clicked. see {@link #setselectedtab(int)}.
* @return created link component
*/
protected webmarkupcontainer newlink string linkid  final int index
return new link linkid
private static final long serialversionuid   1l
public void onclick
setselectedtab index
/**
* sets the selected tab
*
* @param index
*            index of the tab to select
*
*/
public final void setselectedtab int index
if  index < 0    index >  tabs size
throw new indexoutofboundsexception
setmodelobject new integer index
itab tab    itab tabs get index
panel panel   tab getpanel tab_panel_id
if  panel    null
throw new wicketruntimeexception
getpath         index
if   panel getid   equals tab_panel_id
throw new wicketruntimeexception
panel getid
getpath         index
if  get tab_panel_id     null
add panel
else
replace panel
/**
* @return index of the selected tab
*/
public final int getselectedtab
return   integer getmodelobject    intvalue