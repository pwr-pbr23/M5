/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket spring common
import java util arraylist
import java util collections
import java util comparator
import java util hashmap
import java util iterator
import java util list
import java util map
/**
* a dao implementation with an auto-generated embedded database. in a true
* application this dao would interface with a real database, but because we
* want to keep dependencies to a minimum we generate our own database here.
*
* @author igor vaynberg (ivaynberg)
*
*/
public class contactdaoimpl implements contactdao
private map map   collections synchronizedmap new hashmap
private list fnameidx   collections synchronizedlist new arraylist
private list lnameidx   collections synchronizedlist new arraylist
private list fnamedescidx   collections synchronizedlist new arraylist
private list lnamedescidx   collections synchronizedlist new arraylist
/**
* constructor
*
* @param count
*            number of contacts to generate at startup
*/
public contactdaoimpl
for  int i   0  i < 35  i
add contactgenerator getinstance   generate
updateindecies
/**
* find contact by id
*
* @param id
* @return contact
*/
public contact get long id
contact c    contact  map get new long id
if  c    null
throw new runtimeexception     id
return c
protected void add final contact contact
map put new long contact getid     contact
fnameidx add contact
lnameidx add contact
fnamedescidx add contact
lnamedescidx add contact
/**
* select contacts and apply sort
*
* @param first
* @param count
* @param sortproperty
* @param sortasc
* @return list of contacts
*/
public iterator find queryparam qp
list sublist   getindex qp getsort    qp issortasc    sublist
qp getfirst    qp getfirst     qp getcount
return sublist iterator
protected list getindex string prop  boolean asc
if  prop    null
return fnameidx
if  prop equals
return  asc  ? fnameidx   fnamedescidx
else if  prop equals
return  asc  ? lnameidx   lnamedescidx
throw new runtimeexception     prop
/**
* @return number of contacts in the database
*/
public int count
return fnameidx size
/**
* add contact to the database
*
* @param contact
*/
public void save final contact contact
if  contact getid      0
contact setid contactgenerator getinstance   generateid
add contact
updateindecies
else
throw new illegalargumentexception
contact getfirstname
/**
* delete contact from the database
*
* @param contact
*/
public void delete final contact contact
map remove new long contact getid
fnameidx remove contact
lnameidx remove contact
fnamedescidx remove contact
lnamedescidx remove contact
contact setid 0
private void updateindecies
collections sort fnameidx  new comparator
public int compare object arg0  object arg1
return   contact  arg0  getfirstname   compareto
contact  arg1  getfirstname
collections sort lnameidx  new comparator
public int compare object arg0  object arg1
return   contact  arg0  getlastname   compareto
contact  arg1  getlastname
collections sort fnamedescidx  new comparator
public int compare object arg0  object arg1
return   contact  arg1  getfirstname   compareto
contact  arg0  getfirstname
collections sort lnamedescidx  new comparator
public int compare object arg0  object arg1
return   contact  arg1  getlastname   compareto
contact  arg0  getlastname