/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html panel
import org apache wicket markupcontainer
import org apache wicket markup componenttag
import org apache wicket markup markupexception
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup parser xmltag
import org apache wicket model imodel
import org apache wicket util lang objects
import org apache wicket version undo change
/**
* usually you either have a markup file or a xml tag with
* wicket:id="mycomponent" to associate markup with a component. however in some
* rare cases, especially when working with small panels it is a bit awkward to
* maintain tiny pieces of markup in plenty of panel markup files. use cases are
* for example list views where list items are different depending on a state.
* <p>
* fragments provide a means to maintain the panels tiny piece of markup in the
* parents markup file.
* <p>
*
* <pre>
*             &lt;span wicket:id=&quot;mypanel&quot;&gt;example input (will be removed)&lt;/span&gt;
*
*             &lt;wicket:fragment wicket:id=&quot;frag1&quot;&gt;panel 1&lt;/wicket:fragment&gt;
*             &lt;wicket:fragment wicket:id=&quot;frag2&quot;&gt;panel 2&lt;/wicket:fragment&gt;
* </pre>
* <pre>
*             add(new fragment(&quot;mypanel1&quot;, &quot;frag1&quot;);
* </pre>
*
* @author juergen donnerstag
*/
public class fragment extends webmarkupcontainer
private static final long serialversionuid   1l
/** the wicket:id of the associated markup fragment */
private string markupid
/** the container providing the inline markup */
private markupcontainer markupprovider
/**
* constructor.
*
* @see org.apache.wicket.component#component(string)
*
* @param id
*            the component id
* @param markupid
*            the associated id of the associated markup fragment
*/
public fragment final string id  final string markupid
this id  markupid  null  null
/**
* constructor.
*
* @see org.apache.wicket.component#component(string)
*
* @param id
*            the component id
* @param markupid
*            the associated id of the associated markup fragment
* @param model
*            the model for this fragment
*/
public fragment final string id  final string markupid  final imodel model
this id  markupid  null  model
/**
* constructor.
*
* @see org.apache.wicket.component#component(string)
*
* @param id
*            the component id
* @param markupid
*            the associated id of the associated markup fragment
* @param markupprovider
*            the component whose markup contains the fragment's markup
*/
public fragment final string id  final string markupid  final markupcontainer markupprovider
this id  markupid  markupprovider  null
/**
* constructor.
*
* @see org.apache.wicket.component#component(string)
*
* @param id
*            the component id
* @param markupid
*            the associated id of the associated markup fragment
* @param markupprovider
*            the component whose markup contains the fragment's markup
* @param model
*            the model for this fragment
*/
public fragment final string id  final string markupid  final markupcontainer markupprovider
final imodel model
super id  model
if  markupid    null
throw new illegalargumentexception
this markupid   markupid
this markupprovider   markupprovider
/**
* the associated markup fragment can be modified
*
* @param markupid
*/
public final void setmarkuptagreferenceid final string markupid
if  markupid    null
throw new illegalargumentexception
if   objects equal this markupid  markupid
addstatechange new change
private static final long serialversionuid   1l
private final string oldmarkupid   fragment this markupid
public void undo
fragment this markupid   oldmarkupid
this markupid   markupid
/**
* make sure we open up open-close tags to open-body-close
*
* @see org.apache.wicket.component#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttag final componenttag tag
if  tag isopenclose
tag settype xmltag open
super oncomponenttag tag
/**
*
* @see org.apache.wicket.component#oncomponenttagbody(org.apache.wicket.markup.markupstream,
*      org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttagbody final markupstream markupstream  final componenttag opentag
// skip the components body. it will be replaced by the fragment
markupstream skiprawmarkup
final markupstream providermarkupstream   choosemarkupstream markupstream
if  providermarkupstream    null
throw new illegalstateexception
markupprovider
renderfragment providermarkupstream  opentag
/**
* get the markup stream which shall be used to search for the fragment
*
* @param markupstream
*            the markup stream is associated with the component (not the
*            fragment)
* @return the markup stream to be used to find the fragment markup
*/
protected markupstream choosemarkupstream final markupstream markupstream
markupstream stream   null
if  this markupprovider    null
stream   markupstream
else
stream   this markupprovider getassociatedmarkupstream false
if  stream    null
// the following statement assumes that the markup provider is a
// parent along the line up to the page
stream   markupprovider getmarkupstream
return stream
/**
* render the markup starting at the current position of the markup strean
*
* @see #oncomponenttagbody(markupstream, componenttag)
*
* @param providermarkupstream
* @param opentag
*/
private void renderfragment final markupstream providermarkupstream  final componenttag opentag
// remember the current position in the markup. will have to come back
// to it.
int currentindex   providermarkupstream getcurrentindex
// find the markup fragment
int index   providermarkupstream findcomponentindex null  markupid
if  index     1
throw new markupexception
providermarkupstream getcontainerclass   getname
markupid
tostring
// set the markup stream position to where the fragment begins
providermarkupstream setcurrentindex index
try
// get the fragments open tag
componenttag fragmentopentag   providermarkupstream gettag
// we'll completely ignore the fragments open tag. it'll not be
// rendered
providermarkupstream next
// render the body of the fragment
super oncomponenttagbody providermarkupstream  fragmentopentag
finally
// make sure the markup stream is positioned where we started back
// at the original component
providermarkupstream setcurrentindex currentindex