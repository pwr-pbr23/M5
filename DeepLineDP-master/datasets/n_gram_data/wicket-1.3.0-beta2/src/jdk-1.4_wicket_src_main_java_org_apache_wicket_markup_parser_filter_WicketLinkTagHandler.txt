/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import org apache wicket application
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup wickettag
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket util collections arrayliststack
import org apache wicket util string stringvalueconversionexception
import org apache wicket util string strings
import org apache wicket util value ivaluemap
/**
* this is a markup inline filter. it identifies xml tags which include a href
* attribute and which are not wicket specific components and flags these tags
* (componenttag) as autolink enabled. a component resolver will later resolve
* the href and assign a bookmarkablepagelink to it (automatically).
* <p>
* an application setting is used as default value, which might be modified for
* specific regions. these regions are identified by &lt;wicket:link&gt; tags
* with an optional 'autolink' attribute. the default value for the attribute is
* true, thus enabling autolinking. an open-close &lt;wicket:link/&gt tag will
* change the autolink status until the end of the markup document or the next
* &lt;wicket:link&gt; tag respectively. &lt;wicket:link&gt; regions may be
* nested.
*
* @author juergen donnerstag
*/
public class wicketlinktaghandler extends abstractmarkupfilter
/** the id of autolink components */
public static final string autolink_id
static
// register "wicket:link"
wickettagidentifier registerwellknowntagname
/** allow to have link regions within link regions */
private arrayliststack autolinkstatus
/** current status */
private boolean autolinking   true
/**
* construct.
*/
public wicketlinktaghandler
setautomaticlinking application get   getmarkupsettings   getautomaticlinking
/**
* set the default value for autolinking
*
* @param enable
*            if true, autolinks are enabled
*/
public void setautomaticlinking final boolean enable
this autolinking   enable
/**
* get the next markupelement from the parent markupfilter and handles it if
* the specific filter criteria are met. depending on the filter, it may
* return the markupelement unchanged, modified or it remove by asking the
* parent handler for the next tag.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return return the next eligible markupelement
*/
public final markupelement nexttag   throws parseexception
// get next tag. null, if no more tag available
final componenttag tag    componenttag getparent   nexttag
if  tag    null
return tag
// only xml tags not already identified as wicket components will be
// considered for autolinking. this is because it is assumed that wicket
// components like images or all other kind of wicket links will handle
// it themselves.
// subclass analyzeautolinkcondition() to implement you own implementation
// and register the new tag handler with the markup parser through
// application.newmarkupparser().
if   autolinking    true      analyzeautolinkcondition tag     true
// mark it as autolink enabled
tag enableautolink true
// just a dummy name. the componenttag will not be forwarded.
tag setid autolink_id
return tag
// for all <wicket:link ..> tags which probably change the
// current autolink status.
if  tag instanceof wickettag
final wickettag wtag    wickettag tag
if  wtag islinktag
// beginning of the region
if  tag isopen      tag isopenclose
if  tag isopen
if  autolinkstatus    null
autolinkstatus   new arrayliststack
// remember the current setting to be reset after the
// region
autolinkstatus push new boolean autolinking
// html allows to represent true in different ways
final string autolink   tag getattributes   getstring
try
autolinking   strings isempty autolink     strings istrue autolink
catch  stringvalueconversionexception e
throw new wicketruntimeexception
else if  tag isclose
// restore the autolink setting from before the region
autolinking     boolean autolinkstatus pop    booleanvalue
return wtag
return tag
/**
* analyze the tag. if return value == true, a autolink component will be
* created.
* <p>
* subclass analyzeautolinkcondition() to implement you own implementation
* and register the new tag handler with the markup parser through
* application.newmarkupparser().
*
* @param tag
*            the current tag being parsed
* @return if true, tag will become auto-component
*/
protected boolean analyzeautolinkcondition final componenttag tag
if  tag getid      null
ivaluemap attributes   tag getattributes
string ref   attributes getstring
if  checkref ref
return true
ref   attributes getstring
if  checkref ref
return true
return false
private final boolean checkref string ref
return  ref    null      ref indexof        1