/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http documentvalidation
import java util arraylist
import java util iterator
import java util list
import java util map
import org apache wicket util collections arrayliststack
import org slf4j logger
import org slf4j loggerfactory
/**
* simple class that provides a convenient programmatic way to define what an
* expected html document should look like and then to validate a supplied
* document against this template. note that this validator expects very clean
* html (which should not be a problem during testing). in particular it expects
* tags to be matched and that the following tags with optional close tags are
* actually closed: p, td, th, li and option.
*
* @author chris turner
*/
public class htmldocumentvalidator
private static final logger log   loggerfactory getlogger htmldocumentvalidator class
private final list elements   new arraylist
private boolean skipcomments   true
private tag workingtag
/**
* create the validator.
*/
public htmldocumentvalidator
/**
* add a root element to the validator. this will generally be the html
* element to which all children are added. however, it may also be other
* elements to represent comments or similar.
*
* @param e
*            the element to add
*/
public void addrootelement final documentelement e
elements add e
/**
* check whether the supplied document is valid against the spec that has
* been built up within the validator.
*
* @param document
*            the document to validate
* @return whether the document is valid or not
*/
public boolean isdocumentvalid final string document
htmldocumentparser parser   new htmldocumentparser document
iterator expectedelements   elements iterator
arrayliststack iteratorstack   new arrayliststack
arrayliststack tagnamestack   new arrayliststack
boolean end   false
boolean valid   true
while   end
int token   parser getnexttoken
switch  token
case htmldocumentparser unknown
// error is already recorded by the parser
return false
case htmldocumentparser end
end   true
break
case htmldocumentparser comment
valid   validatecomment expectedelements  parser
if   valid
end   true
break
case htmldocumentparser open_tag
valid   validatetag expectedelements  parser
if   valid
end   true
else
expectedelements   saveopentagstate iteratorstack  expectedelements
tagnamestack
break
case htmldocumentparser openclose_tag
valid   validatetag expectedelements  parser
if  valid
valid   checkopenclosetag
if   valid
end   true
break
case htmldocumentparser close_tag
expectedelements   validateclosetag tagnamestack  parser  expectedelements
iteratorstack
if  expectedelements    null
valid   false
end   true
break
case htmldocumentparser text
valid   validatetext expectedelements  parser
if   valid
end   true
break
// return the valid result
return valid
/**
* set whether to skip comments of not when validating. the default is true.
* if this is set to false then comment elements must be added to represent
* each comment to be validated.
*
* @param skipcomments
*            whether to skip comments or not
*/
public void setskipcomments final boolean skipcomments
this skipcomments   skipcomments
/**
* check whether the open close tag eas actually expected to have children.
*
* @return whether valid or not
*/
private boolean checkopenclosetag
boolean valid   true
if   workingtag getexpectedchildren   isempty
log error     workingtag gettag
workingtag getexpectedchildren   size
valid   false
return valid
/**
* check if the supplied tag is one that expects to be closed or not.
*
* @param tag
*            the tag
* @return whether the tag requires closing or not
*/
private boolean isnonclosedtag string tag
tag   workingtag gettag   tolowercase
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
if  tag equals
return true
return false
/**
* save the new open tag state and find the iterator to continue to use for
* processing.
*
* @param iteratorstack
*            the current stack of iterators
* @param expectedelements
*            the current iterator of elements
* @param tagnamestack
*            the stack of open tags
* @return the iterator to continue to use
*/
private iterator saveopentagstate arrayliststack iteratorstack  iterator expectedelements
arrayliststack tagnamestack
if   isnonclosedtag workingtag gettag
iteratorstack push expectedelements
expectedelements   workingtag getexpectedchildren   iterator
tagnamestack push workingtag gettag
return expectedelements
/**
* validate the close tag that was found.
*
* @param tagnamestack
*            the stack of tag names
* @param parser
*            the parser
* @param expectedelements
*            the current iterator of expected elements
* @param iteratorstack
*            the stack of previous iterators
* @return the next iterator to use, or null
*/
private iterator validateclosetag arrayliststack tagnamestack  htmldocumentparser parser
iterator expectedelements  arrayliststack iteratorstack
if  tagnamestack isempty
log error     parser gettag
expectedelements   null
else
string expectedtag    string tagnamestack pop
if   expectedtag equals parser gettag
log error     parser gettag
expectedtag
expectedelements   null
else
if  expectedelements hasnext
documentelement e    documentelement expectedelements next
log error     parser gettag
e tostring
expectedelements   null
else
if  iteratorstack isempty
log error
expectedelements   null
else
expectedelements    iterator iteratorstack pop
return expectedelements
/**
* validate the comment token that was found.
*
* @param expectedelements
*            the iterator of expected elements
* @param parser
*            the parser
* @return whether the comment is valid or not
*/
private boolean validatecomment iterator expectedelements  htmldocumentparser parser
boolean valid   true
if   skipcomments
if  expectedelements hasnext
documentelement e    documentelement expectedelements next
if  e instanceof comment
if     comment e  gettext   equals parser getcomment
log error     parser getcomment
comment e  gettext
valid   false
else
log error     parser getcomment
e tostring
valid   false
else
log error     parser getcomment
valid   false
return valid
/**
* validate the tag token that was found.
*
* @param expectedelements
*            the iterator of expected elements
* @param parser
*            the parser
* @return whether the tag is valid or not
*/
private boolean validatetag iterator expectedelements  htmldocumentparser parser
boolean valid   true
if  expectedelements hasnext
documentelement e    documentelement expectedelements next
if  e instanceof tag
workingtag    tag e
if   workingtag gettag   equals parser gettag
log error     parser gettag
workingtag gettag
valid   false
else
map actualattributes   parser getattributes
map expectedattributes   workingtag getexpectedattributes
for  iterator it   expectedattributes keyset   iterator    it hasnext
string name    string it next
string pattern    string expectedattributes get name
if   actualattributes containskey name
log error     workingtag gettag
name
valid   false
string value    string actualattributes get name
if  value    null
log error     name
valid   false
else
if   value matches pattern
log error     value       name
workingtag gettag
pattern
valid   false
for  iterator it   workingtag getillegalattributes   iterator    it hasnext
string name    string it next
if  actualattributes containskey name
log error     workingtag gettag
name
valid   false
else
log error     parser gettag
e tostring
valid   false
else
log error     parser gettag
valid   false
return valid
/**
* validate the text token that was found.
*
* @param expectedelements
*            the iterator of expected elements
* @param parser
*            the parser
* @return whether the text is valid or not
*/
private boolean validatetext iterator expectedelements  htmldocumentparser parser
boolean valid   true
if  expectedelements hasnext
documentelement e    documentelement expectedelements next
if  e instanceof textcontent
if   parser gettext   matches   textcontent e  getvalue
log error     parser gettext
textcontent e  getvalue
valid   false
else
log error     parser gettext
e tostring
valid   false
else
log error     parser gettext
valid   false
return valid