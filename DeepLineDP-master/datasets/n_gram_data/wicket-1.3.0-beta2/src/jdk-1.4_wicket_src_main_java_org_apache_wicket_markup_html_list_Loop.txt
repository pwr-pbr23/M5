/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html list
import java util iterator
import org apache wicket component
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup repeater abstractrepeater
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket util collections readonlyiterator
/**
* a very simple loop component whose model is an integer defining the number of
* iterations the loop should render. during rendering, loop iterates from 0 to
* getiterations() - 1, creating a new markupcontainer for each iteration. the
* markupcontainer is populated by the loop subclass by implementing the
* abstract method populate(loopitem). the populate() method is called just
* before the loopitem container is rendered.
*
* @author juergen donnerstag
* @author eelco hillenius
* @author jonathan locke
*/
public abstract class loop extends abstractrepeater
/**
* item container for a loop iteration.
*
* @author jonathan locke
*/
public static class loopitem extends webmarkupcontainer
private static final long serialversionuid   1l
/** the iteration number */
private final int iteration
/**
* constructor
*
* @param iteration
*            the iteration of the loop
*/
public loopitem final int iteration
super integer tostring iteration
this iteration   iteration
/**
* @return returns the iteration.
*/
public final int getiteration
return iteration
/**
* construct.
*
* @param id
*            see component
* @param iterations
*            max index of the loop
* @see org.apache.wicket.component#component(string, imodel)
*/
public loop final string id  final int iterations
super id  new model new integer iterations
/**
* construct.
*
* @param id
*            see component
* @param model
*            must contain a integer model object
* @see org.apache.wicket.component#component(string, imodel)
*/
public loop final string id  final imodel model
super id  model
/**
* @return the number of loop iterations
*/
public final int getiterations
return   integer getmodelobject    intvalue
/**
* @see org.apache.wicket.component#onbeforerender()
*/
protected void onbeforerender
super onbeforerender
// remove any previous loop contents
removeall
// get number of iterations
final int iterations   getiterations
if  iterations > 0
// create loopitems for each iteration
for  int iteration   0  iteration < iterations  iteration
// create item for loop iteration
loopitem item   newitem iteration
// add and populate item
add item
populateitem item
/**
* create a new loopitem for loop at iteration.
*
* @param iteration
*            iteration in the loop
* @return loopitem
*/
protected loopitem newitem int iteration
return new loopitem iteration
/**
* @see org.apache.wicket.markup.repeater.abstractrepeater#renderiterator()
*/
protected iterator renderiterator
final int iterations   getiterations
return new readonlyiterator
private int index   0
public boolean hasnext
return index < iterations
public object next
return get integer tostring index
/**
* populates this loop item.
*
* @param item
*            the iteration of the loop
*/
protected abstract void populateitem loopitem item
/**
* @param child
*/
protected final void renderchild component child
renderitem  loopitem child
/**
* renders this loop iteration.
*
* @param item
*            the loop iteration
*/
protected void renderitem final loopitem item
item render getmarkupstream