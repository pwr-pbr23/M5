/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java io serializable
import java util arraylist
import java util list
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket version undo change
/**
* abstract base class for all choice (html select) options.
*
* @author jonathan locke
* @author eelco hillenius
* @author johan compagner
*/
abstract class abstractchoice extends formcomponent
/** the list of objects. */
private imodel choices
/** the renderer used to generate display/id values for the objects. */
private ichoicerenderer renderer
/**
* constructor.
*
* @param id
*            see component
* @see org.apache.wicket.component#component(string)
*/
public abstractchoice final string id
this id  new model new arraylist     new choicerenderer
/**
* constructor.
*
* @param id
*            see component
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string)
*/
public abstractchoice final string id  final list choices
this id  new model  serializable choices   new choicerenderer
/**
* constructor.
*
* @param id
*            see component
* @param renderer
*            the rendering engine
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string)
*/
public abstractchoice final string id  final list choices  final ichoicerenderer renderer
this id  new model  serializable choices   renderer
/**
* constructor.
*
* @param id
*            see component
* @param model
*            see component
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string, imodel)
*/
public abstractchoice final string id  imodel model  final list choices
this id  model  new model  serializable choices   new choicerenderer
/**
* constructor.
*
* @param id
*            see component
* @param model
*            see component
* @param choices
*            the drop down choices
* @param renderer
*            the rendering engine
* @see org.apache.wicket.component#component(string, imodel)
*/
public abstractchoice final string id  imodel model  final list choices
final ichoicerenderer renderer
this id  model  new model  serializable choices   renderer
/**
* constructor.
*
* @param id
*            see component
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string)
*/
public abstractchoice final string id  final imodel choices
this id  choices  new choicerenderer
/**
* constructor.
*
* @param id
*            see component
* @param renderer
*            the rendering engine
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string)
*/
public abstractchoice final string id  final imodel choices  final ichoicerenderer renderer
super id
this choices   choices
setchoicerenderer renderer
/**
* constructor.
*
* @param id
*            see component
* @param model
*            see component
* @param choices
*            the collection of choices in the dropdown
* @see org.apache.wicket.component#component(string, imodel)
*/
public abstractchoice final string id  imodel model  final imodel choices
this id  model  choices  new choicerenderer
/**
* constructor.
*
* @param id
*            see component
* @param model
*            see component
* @param renderer
*            the rendering engine
* @param choices
*            the drop down choices
* @see org.apache.wicket.component#component(string, imodel)
*/
public abstractchoice final string id  imodel model  final imodel choices
final ichoicerenderer renderer
super id  model
this choices   choices
setchoicerenderer renderer
/**
* @return the collection of object that this choice has
*/
public list getchoices
list choices    this choices    null  ?  list this choices getobject     null
if  choices    null
throw new nullpointerexception
return choices
/**
* sets the list of choices
*
* @param choices
*            model representing the list of choices
* @return this for chaining
*/
public final abstractchoice setchoices imodel choices
if  this choices    null    this choices    choices
if  isversioned
addstatechange new choiceslistchange
this choices   choices
return this
/**
* sets the list of choices.
*
* @param choices
*            the list of choices
* @return this for chaining
*/
public final abstractchoice setchoices list choices
if   this choices    null
if  isversioned
addstatechange new choiceslistchange
this choices   new model  serializable choices
return this
/**
* @return the ichoicerenderer used for rendering the data objects
*/
public final ichoicerenderer getchoicerenderer
return renderer
/**
* set the choice renderer to be used.
*
* @param renderer
* @return this for chaining
*/
public final abstractchoice setchoicerenderer ichoicerenderer renderer
if  renderer    null
renderer   new choicerenderer
this renderer   renderer
return this
/**
* @see org.apache.wicket.component#detachmodel()
*/
protected void detachmodel
super detachmodel
if  choices    null
choices detach
/**
*
* @param selected
*            the object that's currently selected
* @return any default choice, such as "choose one", depending on the
*         subclass
*/
protected charsequence getdefaultchoice final object selected
return
/**
* gets whether the given value represents the current selection.
*
* @param object
*            the object to check
* @param index
*            the index in the choices collection this object is in.
* @param selected
*            the currently selected string value
* @return whether the given value represents the current selection
*/
protected abstract boolean isselected final object object  int index  string selected
/**
* gets whether the given value is disabled.  this default implementation always returns false.
*
* @param object
*            the object to check
* @param index
*            the index in the choices collection this object is in.
* @param selected
*            the currently selected string value
* @return whether the given value represents the current selection
*/
protected boolean isdisabled final object object  int index  string selected
return false
/**
* handle the container's body.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open tag for the body
* @see org.apache.wicket.component#oncomponenttagbody(markupstream, componenttag)
*/
protected void oncomponenttagbody final markupstream markupstream  final componenttag opentag
list choices   getchoices
final appendingstringbuffer buffer   new appendingstringbuffer  choices size     50    16
final string selected   getvalue
// append default option
buffer append getdefaultchoice selected
for  int index   0  index < choices size    index
final object choice   choices get index
appendoptionhtml buffer  choice  index  selected
buffer append
replacecomponenttagbody markupstream  opentag  buffer
/**
* generats and appends html for a single choice into the provided buffer
*
* @param buffer
*            appending string buffer that will have the generated html
*            appended
* @param choice
*            choice object
* @param index
*            the index of this option
* @param selected
*            the currently selected string value
*/
protected void appendoptionhtml appendingstringbuffer buffer  object choice  int index
string selected
object objectvalue   renderer getdisplayvalue choice
class objectclass   objectvalue    null ? null   objectvalue getclass
final string displayvalue   getconverter objectclass  converttostring objectvalue
getlocale
buffer append
if  isselected choice  index  selected
buffer append  selected
if  isdisabled choice  index  selected
buffer append  disabled
buffer append  "
buffer append renderer getidvalue choice  index
buffer append  >"
string display   displayvalue
if  localizedisplayvalues
display   getlocalizer   getstring displayvalue  this  displayvalue
charsequence escaped   strings escapemarkup display  false  true
buffer append escaped
buffer append
/**
* @see org.apache.wicket.markup.html.form.formcomponent#supportspersistence()
*/
protected boolean supportspersistence
return true
/**
* override this method if you want to localize the display values of the
* generated options. by default false is returned so that the display
* values of options are not tested if they have a i18n key.
*
* @return true if you want to localize the display values, default == false
*/
protected boolean localizedisplayvalues
return false
/**
* change object to represent the change of the choices property
*
* @author ivaynberg
*/
private class choiceslistchange extends change
private static final long serialversionuid   1l
private final imodel oldchoices
/**
* construct.
*/
public choiceslistchange
oldchoices   choices
/**
* @see org.apache.wicket.version.undo.change#undo()
*/
public void undo
choices   oldchoices
/**
* make debugging easier
*
* @see java.lang.object#tostring()
*/
public string tostring
return     getpath         oldchoices