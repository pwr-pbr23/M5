/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup
import java io ioexception
import java text parseexception
import java util regex matcher
import java util regex pattern
import org apache wicket application
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket markup parser imarkupfilter
import org apache wicket markup parser ixmlpullparser
import org apache wicket markup parser xmlpullparser
import org apache wicket markup parser filter bodytaghandler
import org apache wicket markup parser filter enclosurehandler
import org apache wicket markup parser filter headforcetagidhandler
import org apache wicket markup parser filter htmlhandler
import org apache wicket markup parser filter htmlheadersectionhandler
import org apache wicket markup parser filter relativepathprefixhandler
import org apache wicket markup parser filter tagtypehandler
import org apache wicket markup parser filter wicketlinktaghandler
import org apache wicket markup parser filter wicketmessagetaghandler
import org apache wicket markup parser filter wicketnamespacehandler
import org apache wicket markup parser filter wicketremovetaghandler
import org apache wicket markup parser filter wickettagidentifier
import org apache wicket settings imarkupsettings
import org apache wicket util resource resourcestreamnotfoundexception
import org apache wicket util resource stringresourcestream
import org apache wicket util string appendingstringbuffer
/**
* this is a wicket markupparser specifically for (x)html. it makes use of a
* streaming xml parser to read the markup and imarkupfilters to remove
* comments, identify wicket relevant tags, apply html specific treatments etc..
* <p>
* the result will be an markup object, which is basically a list, containing
* wicket relevant tags and rawmarkup.
*
* @see imarkupfilter
* @see imarkupparserfactory
* @see imarkupsettings
* @see markupresourcedata
*
* @author jonathan locke
* @author juergen donnerstag
*/
public class markupparser
/** conditional comment section, which is not treated as a comment section */
private static final pattern conditional_comment   pattern
compile
/** the xml parser to use */
private final ixmlpullparser xmlparser
/** the markup handler chain: each filter has a specific task */
private imarkupfilter markupfilterchain
/** the markup created by reading the markup file */
private final markup markup
/** temporary variable: application.get().getmarkupsettings() */
private final imarkupsettings markupsettings
/**
* constructor.
*
* @param resource
*            the markup resource (file)
*/
public markupparser final markupresourcestream resource
this new xmlpullparser    resource
/**
* constructor. usually for testing purposes only
*
* @param markup
*            the markup resource.
*/
public markupparser final string markup
this new xmlpullparser    new markupresourcestream new stringresourcestream markup
/**
* constructor.
*
* @param xmlparser
*            the streaming xml parser to read and parse the markup
* @param resource
*            the markup resource (file)
*/
public markupparser final ixmlpullparser xmlparser  final markupresourcestream resource
this xmlparser   xmlparser
this markupsettings   application get   getmarkupsettings
markupresourcedata markup   new markupresourcedata
markup setresource resource
this markup   new markup markup
// initialize the markup filter chain
initializemarkupfilters
/**
* in case you want to analyze markup which by default does not use "wicket"
* to find relevant tags.
*
* @param namespace
*/
public final void setwicketnamespace final string namespace
this markup getmarkupresourcedata   setwicketnamespace namespace
/**
* applications which subclass initfilterchain() might also wish to access
* the markup resource stream.
*
* @return the markup resource stream
*/
protected markupresourcestream getmarkupresourcestream
return this markup getmarkupresourcedata   getresource
/**
* create a new markup filter chain and initialize with all default filters
* required.
*/
private final void initializemarkupfilters
// chain together all the different markup filters and configure them
this markupfilterchain   xmlparser
markupresourcedata markupresourcedata   this markup getmarkupresourcedata
appendmarkupfilter new wickettagidentifier markupresourcedata
appendmarkupfilter new tagtypehandler
appendmarkupfilter new htmlhandler
appendmarkupfilter new wicketremovetaghandler
appendmarkupfilter new wicketlinktaghandler
appendmarkupfilter new wicketnamespacehandler markupresourcedata
// provided the wicket component requesting the markup is known ...
final markupresourcestream resource   markupresourcedata getresource
if  resource    null
final containerinfo containerinfo   resource getcontainerinfo
if  containerinfo    null
appendmarkupfilter new wicketmessagetaghandler
appendmarkupfilter new bodytaghandler
// pages require additional handlers
if  page class isassignablefrom containerinfo getcontainerclass
appendmarkupfilter new htmlheadersectionhandler markup
appendmarkupfilter new headforcetagidhandler containerinfo getcontainerclass
appendmarkupfilter new relativepathprefixhandler
appendmarkupfilter new enclosurehandler
/**
* by default don't do anything. subclasses may append additional markup
* filters if required.
*
* @see #appendmarkupfilter(imarkupfilter)
* @deprecated since 1.3
*/
protected void initfilterchain
throw new wicketruntimeexception
/**
* append a new filter to the list of already pre-configured markup filters.
*
* @param filter
*            the filter to be appended
*/
public final void appendmarkupfilter final imarkupfilter filter
// prependcontextpathhandler should always be close to the end.
// it doesn't have to be last though.
appendmarkupfilter filter  relativepathprefixhandler class
/**
* append a new filter to the list of already pre-configured markup filters.
* add the new filter before the "beforefilter" which is identified by its
* class.
*
* @param filter
*            the filter to be appended
* @param beforefilter
*            the filter will be added before the beforefilter. if
*            beforefilter == null or beforefilter not found than append to
*            the end
*/
public final void appendmarkupfilter final imarkupfilter filter  final class beforefilter
if   beforefilter    null      this markupfilterchain    null
filter setparent this markupfilterchain
this markupfilterchain   filter
else
imarkupfilter current   this markupfilterchain
while  current    null
if  current getclass      beforefilter
filter setparent current getparent
current setparent filter
break
current   current getparent
if  current    null
filter setparent this markupfilterchain
this markupfilterchain   filter
/**
* reads and parses markup from a file.
*
* @return the markup
* @throws ioexception
* @throws resourcestreamnotfoundexception
*/
public final markup parse   throws ioexception  resourcestreamnotfoundexception
markupresourcedata markupresourcedata   this markup getmarkupresourcedata
// initialize the xml parser
this xmlparser parse markupresourcedata getresource   getinputstream    this markupsettings
getdefaultmarkupencoding
// parse the xml markup and tokenize it into wicket relevant markup
// elements
parsemarkup
markupresourcedata setencoding xmlparser getencoding
markupresourcedata setxmldeclaration xmlparser getxmldeclaration
return this markup
/**
* get the next tag from the markup file
*
* @return the next tag
* @throws parseexception
*/
public componenttag getnexttag   throws parseexception
return  componenttag this markupfilterchain nexttag
/**
* scans the given markup and extracts balancing tags.
*
*/
private void parsemarkup
// get relevant settings from the application
final boolean stripcomments   this markupsettings getstripcomments
final boolean compresswhitespace   this markupsettings getcompresswhitespace
try
// always remember the latest index (size)
int size   this markup size
// loop through tags
componenttag tag
while  null     tag   getnexttag
boolean add    tag getid      null
if   add    tag getxmltag   isclose
add     tag getopentag      null      tag getopentag   getid      null
// add tag to list?
if  add    tag ismodified
// add text from last position to the current tag position
final charsequence text   xmlparser getinputfrompositionmarker tag getpos
if  text length   > 0
string rawmarkup   text tostring
if  stripcomments
rawmarkup   removecomment rawmarkup
if  compresswhitespace
rawmarkup   compresswhitespace rawmarkup
// make sure you add it at the correct location.
// imarkupfilters might have added elements as well.
this markup addmarkupelement size  new rawmarkup rawmarkup
if  add
// add to the markup unless the tag has been flagged as
// to be removed from the markup. (e.g. <wicket:remove>
if  tag isignore      false
this markup addmarkupelement tag
else if  tag ismodified
this markup addmarkupelement new rawmarkup tag tocharsequence
xmlparser setpositionmarker
// always remember the latest index (size)
size   this markup size
catch  final parseexception ex
// add remaining input string
final charsequence text   xmlparser getinputfrompositionmarker  1
if  text length   > 0
this markup addmarkupelement new rawmarkup text
this markup getmarkupresourcedata   setencoding xmlparser getencoding
this markup getmarkupresourcedata   setxmldeclaration xmlparser getxmldeclaration
final markupstream markupstream   new markupstream this markup
markupstream setcurrentindex this markup size     1
throw new markupexception markupstream  ex getmessage    ex
// add tail?
final charsequence text   xmlparser getinputfrompositionmarker  1
if  text length   > 0
string rawmarkup   text tostring
if  stripcomments
rawmarkup   removecomment rawmarkup
if  compresswhitespace
rawmarkup   compresswhitespace rawmarkup
// make sure you add it at the correct location.
// imarkupfilters might have added elements as well.
this markup addmarkupelement new rawmarkup rawmarkup
// make all tags immutable and the list of elements unmodifable
this markup makeimmutable
/**
* remove whitespaces from the raw markup
*
* @param rawmarkup
* @return rawmarkup
*/
protected string compresswhitespace string rawmarkup
// we don't want to compress whitespace inside <pre> tags, so we look
// for matches and:
// - do whitespace compression on everything before the first match.
// - append the <pre>.*?</pre> match with no compression.
// - loop to find the next match.
// - append with compression everything between the two matches.
// - repeat until no match, then special-case the fragment after the
// last <pre>.
pattern preblock   pattern compile    pattern dotall   pattern multiline
matcher m   preblock matcher rawmarkup
int lastend   0
stringbuffer sb   null
while  true
boolean matched   m find
string nonpre   matched ? rawmarkup substring lastend  m start      rawmarkup
substring lastend
nonpre   nonpre replaceall
nonpre   nonpre replaceall
// don't create a stringbuffer if we don't actually need one.
// this optimises the trivial common case where there is no <pre>
// tag at all down to just doing the replacealls above.
if  lastend    0
if  matched
sb   new stringbuffer rawmarkup length
else
return nonpre
sb append nonpre
if  matched
sb append m group
lastend   m end
else
break
return sb tostring
/**
* remove all comment sections (&lt;!-- .. --&gt;) from the raw markup. for
* reasons i don't understand, the following regex
* <code>"<!--(.|\n|\r)*?-->"<code>
* causes a stack overflow in some circumstances (jdk 1.5)
*
* @param rawmarkup
* @return raw markup
*/
private string removecomment string rawmarkup
int pos1   rawmarkup indexof
while  pos1 >  0
final int pos2   rawmarkup indexof    pos1   4
final appendingstringbuffer buf   new appendingstringbuffer rawmarkup length
if   pos2 >  0      pos1 > 0
final string comment   rawmarkup substring pos1   4  pos2
if  conditional_comment matcher comment  matches      false
buf append rawmarkup substring 0  pos1   1
if  rawmarkup length   >  pos2   4
buf append rawmarkup substring pos2   4
rawmarkup   buf tostring
pos1   rawmarkup length   <  pos1   2 ?  1   rawmarkup indexof    pos1   4
return rawmarkup