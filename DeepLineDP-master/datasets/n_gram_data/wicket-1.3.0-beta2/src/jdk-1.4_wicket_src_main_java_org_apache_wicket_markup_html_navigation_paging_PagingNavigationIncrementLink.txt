/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html navigation paging
import org apache wicket page
import org apache wicket markup html link link
/**
* an incremental link to a page of a pageablelistview. assuming your list view
* navigation looks like
*
* <pre>
*
*   	 [first / &lt;&lt; / &lt;] 1 | 2 | 3 [&gt; / &gt;&gt; /last]
*
* </pre>
*
* <p>
* and "&lt;" meaning the previous and "&lt;&lt;" goto the "current page - 5",
* than it is this kind of incremental page links which can easily be created.
*
* @author juergen donnerstag
* @author martijn dashorst
*/
public class pagingnavigationincrementlink extends link
private static final long serialversionuid   1l
/** the increment. */
private final int increment
/** the pageablelistview the page links are referring to. */
protected final ipageable pageable
/**
* constructor.
*
* @param id
*            see component
* @param pageable
*            the pageable component the page links are referring to
* @param increment
*            increment by
*/
public pagingnavigationincrementlink final string id  final ipageable pageable
final int increment
super id
setautoenable true
this increment   increment
this pageable   pageable
/**
* @see org.apache.wicket.markup.html.link.link#onclick()
*/
public void onclick
// tell the pageablelistview which page to print next
pageable setcurrentpage getpagenumber
// we do need to redirect, else refresh refresh will go to next, next
setredirect true
// return the current page.
setresponsepage getpage
/**
* determines the next page number for the pageable component.
*
* @return the new page number
*/
public final int getpagenumber
// determine the page number based on the current
// pageablelistview page and the increment
int idx   pageable getcurrentpage     increment
// make sure the index lies between 0 and the last page
return math max 0  math min pageable getpagecount     1  idx
/**
* @return true if it is referring to the first page of the underlying
*         pageablelistview.
*/
public boolean isfirst
return pageable getcurrentpage   <  0
/**
* @return true if it is referring to the last page of the underlying
*         pageablelistview.
*/
public boolean islast
return pageable getcurrentpage   >   pageable getpagecount     1
/**
* returns true if the page link links to the given page.
*
* @param page
*            ignored
* @return true if this link links to the given page
* @see org.apache.wicket.markup.html.link.pagelink#linksto(org.apache.wicket.page)
*/
public boolean linksto final page page
int currentpage   pageable getcurrentpage
if    increment < 0     isfirst         increment > 0     islast
return true
return false