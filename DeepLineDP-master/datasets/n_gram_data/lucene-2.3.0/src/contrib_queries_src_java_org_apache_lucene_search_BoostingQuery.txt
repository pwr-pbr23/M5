package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index indexreader
import org apache lucene search booleanquery
import org apache lucene search defaultsimilarity
import org apache lucene search query
import org apache lucene search searcher
import org apache lucene search similarity
/**
* the boostingquery class can be used to effectively demote results that match a given query.
* unlike the "not" clause, this still selects documents that contain undesirable terms,
* but reduces their overall score:
*
*     query balancedquery = new boostingquery(positivequery, negativequery, 0.01f);
* in this scenario the positivequery contains the mandatory, desirable criteria which is used to
* select all matching documents, and the negativequery contains the undesirable elements which
* are simply used to lessen the scores. documents that match the negativequery have their score
* multiplied by the supplied "boost" parameter, so this should be less than 1 to achieve a
* demoting effect
*
* this code was originally made available here: [www] http://marc.theaimsgroup.com/?l=lucene-user&m=108058407130459&w=2
* and is documented here: http://wiki.apache.org/lucene-java/communitycontributions
*/
public class boostingquery extends query
private float boost                                the amount to boost by
private query match                                query to match
private query context                              boost when matches too
public boostingquery query match  query context  float boost
this match   match
this context    query context clone              clone before boost
this boost   boost
this context setboost 0 0f                           ignore context only matches
public query rewrite indexreader reader  throws ioexception
booleanquery result   new booleanquery
public similarity getsimilarity searcher searcher
return new defaultsimilarity
public float coord int overlap  int max
switch  overlap
case 1                                   matched only one clause
return 1 0f                            use the score as is
case 2                                   matched both clauses
return boost                           multiply by boost
default
return 0 0f
result add match  booleanclause occur must
result add context  booleanclause occur should
return result
public string tostring string field
return match tostring field        context tostring field