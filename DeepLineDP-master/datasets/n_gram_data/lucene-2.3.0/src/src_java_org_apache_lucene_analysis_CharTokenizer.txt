package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java io reader
/** an abstract base class for simple, character-oriented tokenizers.*/
public abstract class chartokenizer extends tokenizer
public chartokenizer reader input
super input
private int offset   0  bufferindex   0  datalen   0
private static final int max_word_len   255
private static final int io_buffer_size   4096
private final char iobuffer   new char
/** returns true iff a character should be included in a token.  this
* tokenizer generates as tokens adjacent sequences of characters which
* satisfy this predicate.  characters for which this is false are used to
* define token boundaries and are not included in tokens. */
protected abstract boolean istokenchar char c
/** called on each token character to normalize it before it is added to the
* token.  the default implementation does nothing.  subclasses may use this
* to, e.g., lowercase tokens. */
protected char normalize char c
return c
public final token next token token  throws ioexception
token clear
int length   0
int start   bufferindex
char buffer   token termbuffer
while  true
if  bufferindex >  datalen
offset    datalen
datalen   input read iobuffer
if  datalen     1
if  length > 0
break
else
return null
bufferindex   0
final char c   iobuffer
if  istokenchar c                      if it's a token char
if  length    0 			              start of token
start   offset   bufferindex   1
else if  length    buffer length
buffer   token resizetermbuffer 1 length
buffer   normalize c      buffer it  normalized
if  length    max_word_len 		      buffer overflow
break
else if  length > 0                 at non letter w  chars
break                               return 'em
token termlength   length
token startoffset   start
token endoffset   start length
return token
public void reset reader input  throws ioexception
super reset input
bufferindex   0
offset   0
datalen   0