package org apache lucene analysis fr
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* a stemmer for french words. the algorithm is based on the work of
* dr martin porter on his snowball project<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html<br>
* (french stemming algorithm) for details
*
* @author    patrick talbot
*/
public class frenchstemmer
/**
* buffer for the terms while stemming them.
*/
private stringbuffer sb   new stringbuffer
/**
* a temporary buffer, used to reconstruct r2
*/
private stringbuffer tb   new stringbuffer
/**
* region r0 is equal to the whole buffer
*/
private string r0
/**
* region rv
* "if the word begins with two vowels, rv is the region after the third letter,
* otherwise the region after the first vowel not at the beginning of the word,
* or the end of the word if these positions cannot be found."
*/
private string rv
/**
* region r1
* "r1 is the region after the first non-vowel following a vowel
* or is the null region at the end of the word if there is no such non-vowel"
*/
private string r1
/**
* region r2
* "r2 is the region after the first non-vowel in r1 following a vowel
* or is the null region at the end of the word if there is no such non-vowel"
*/
private string r2
/**
* set to true if we need to perform step 2
*/
private boolean suite
/**
* set to true if the buffer was modified
*/
private boolean modified
/**
* stemms the given term to a unique <tt>discriminator</tt>.
*
* @param term  java.langstring the term that should be stemmed
* @return java.lang.string  discriminator for <tt>term</tt>
*/
protected string stem  string term
if    isstemmable  term
return term
// use lowercase for medium stemming.
term   term tolowercase
// reset the stringbuffer.
sb delete  0  sb length
sb insert  0  term
// reset the booleans
modified   false
suite   false
sb   treatvowels  sb
setstrings
step1
if   modified    suite
if  rv    null
suite   step2a
if   suite
step2b
if  modified    suite
step3
else
step4
step5
step6
return sb tostring
/**
* sets the search region strings<br>
* it needs to be done each time the buffer was modified
*/
private void setstrings
// set the strings
r0   sb tostring
rv   retrieverv  sb
r1   retriever  sb
if   r1    null
tb delete  0  tb length
tb insert  0  r1
r2   retriever  tb
else
r2   null
/**
* first step of the porter algorithmn<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step1
string suffix
deletefrom  r2  suffix
replacefrom  r2  new string
replacefrom  r2  new string
replacefrom  r2  new string
string search
deletebutsuffixfromelsereplace  r2  search      true  r0
deletebutsuffixfromelsereplace  r2  new string              false  r0
deletebutsuffixfrom  r2  new string              false
deletebutsuffixfrom  r2  new string              false
deletebutsuffixfrom  r2  new string              false
deletebutsuffixfrom  r2  new string              false
deletefromiftestvowelbeforein  r1  new string           false  r0
deletefrom  rv  new string
deletebutsuffixfromelsereplace  r2  new string              false  r0
deletebutsuffixfromelsereplace  r2  new string              false  r0
deletebutsuffixfrom  r2  new string              true
string autre
deletebutsuffixfromelsereplace  r2  autre     false  r0
deletebutsuffixfromelsereplace  r2  autre     true  r2
replacefrom  r0  new string
replacefrom  r1  new string
deletebutsuffixfromelsereplace  r2  new string              true  r1
deletefrom  r2  new string
// if one of the next steps is performed, we will need to perform step2a
boolean temp   false
temp   replacefrom  rv  new string
if  temp    true
suite   true
temp   replacefrom  rv  new string
if  temp    true
suite   true
temp   deletefromiftestvowelbeforein  rv  new string           true  rv
if  temp    true
suite   true
/**
* second step (a) of the porter algorithmn<br>
* will be performed if nothing changed from the first step
* or changed were done in the amment, emment, ments or ment suffixes<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*
* @return boolean - true if something changed in the stringbuffer
*/
private boolean step2a
string search
return deletefromiftestvowelbeforein  rv  search  false  rv
/**
* second step (b) of the porter algorithmn<br>
* will be performed if step 2 a was performed unsuccessfully<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step2b
string suffix
deletefrom  rv  suffix
string search
deletebutsuffixfrom  rv  search     true
deletefrom  r2  new string
/**
* third step of the porter algorithmn<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step3
if  sb length  >0
char ch   sb charat  sb length   1
if  ch
sb setcharat  sb length   1
setstrings
else if  ch
sb setcharat  sb length   1
setstrings
/**
* fourth step of the porter algorithmn<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step4
if  sb length   > 1
char ch   sb charat  sb length   1
if  ch
char b   sb charat  sb length   2
if  b         b         b         b         b         b
sb delete  sb length     1  sb length
setstrings
boolean found   deletefromifprecededin  r2  new string        rv
if   found
found   deletefromifprecededin  r2  new string        rv
replacefrom  rv  new string
deletefrom  rv  new string
deletefromifprecededin  rv  new string        r0
/**
* fifth step of the porter algorithmn<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step5
if  r0    null
if  r0 endswith       r0 endswith       r0 endswith       r0 endswith       r0 endswith
sb delete  sb length     1  sb length
setstrings
/**
* sixth (and last!) step of the porter algorithmn<br>
* refer to http://snowball.sourceforge.net/french/stemmer.html for an explanation
*/
private void step6
if  r0  null    r0 length  >0
boolean seenvowel   false
boolean seenconson   false
int pos    1
for  int i   r0 length   1  i >  1  i
char ch   r0 charat i
if  isvowel ch
if   seenvowel
if  ch         ch
pos   i
break
seenvowel   true
else
if  seenvowel
break
else
seenconson   true
if  pos >  1    seenconson     seenvowel
sb setcharat pos
/**
* delete a suffix searched in zone "source" if zone "from" contains prefix + search string
*
* @param source java.lang.string - the primary source zone for search
* @param search java.lang.string[] - the strings to search for suppression
* @param from java.lang.string - the secondary source zone for search
* @param prefix java.lang.string - the prefix to add to the search string to test
* @return boolean - true if modified
*/
private boolean deletefromifprecededin  string source  string search  string from  string prefix
boolean found   false
if  source  null
for  int i   0  i < search length  i
if   source endswith  search
if  from  null    from endswith  prefix   search
sb delete  sb length     search length    sb length
found   true
setstrings
break
return found
/**
* delete a suffix searched in zone "source" if the preceding letter is (or isn't) a vowel
*
* @param source java.lang.string - the primary source zone for search
* @param search java.lang.string[] - the strings to search for suppression
* @param vowel boolean - true if we need a vowel before the search string
* @param from java.lang.string - the secondary source zone for search (where vowel could be)
* @return boolean - true if modified
*/
private boolean deletefromiftestvowelbeforein  string source  string search  boolean vowel  string from
boolean found   false
if  source  null    from  null
for  int i   0  i < search length  i
if   source endswith  search
if   search length     1  <  from length
boolean test   isvowel sb charat sb length    search length   1
if  test    vowel
sb delete  sb length     search length    sb length
modified   true
found   true
setstrings
break
return found
/**
* delete a suffix searched in zone "source" if preceded by the prefix
*
* @param source java.lang.string - the primary source zone for search
* @param search java.lang.string[] - the strings to search for suppression
* @param prefix java.lang.string - the prefix to add to the search string to test
* @param without boolean - true if it will be deleted even without prefix found
*/
private void deletebutsuffixfrom  string source  string search  string prefix  boolean without
if  source  null
for  int i   0  i < search length  i
if   source endswith  prefix   search
sb delete  sb length      prefix length     search length     sb length
modified   true
setstrings
break
else if   without    source endswith  search
sb delete  sb length     search length    sb length
modified   true
setstrings
break
/**
* delete a suffix searched in zone "source" if preceded by prefix<br>
* or replace it with the replace string if preceded by the prefix in the zone "from"<br>
* or delete the suffix if specified
*
* @param source java.lang.string - the primary source zone for search
* @param search java.lang.string[] - the strings to search for suppression
* @param prefix java.lang.string - the prefix to add to the search string to test
* @param without boolean - true if it will be deleted even without prefix found
*/
private void deletebutsuffixfromelsereplace  string source  string search  string prefix  boolean without  string from  string replace
if  source  null
for  int i   0  i < search length  i
if   source endswith  prefix   search
sb delete  sb length      prefix length     search length     sb length
modified   true
setstrings
break
else if   from  null    from endswith  prefix   search
sb replace  sb length      prefix length     search length     sb length    replace
modified   true
setstrings
break
else if   without    source endswith  search
sb delete  sb length     search length    sb length
modified   true
setstrings
break
/**
* replace a search string with another within the source zone
*
* @param source java.lang.string - the source zone for search
* @param search java.lang.string[] - the strings to search for replacement
* @param replace java.lang.string - the replacement string
*/
private boolean replacefrom  string source  string search  string replace
boolean found   false
if  source  null
for  int i   0  i < search length  i
if   source endswith  search
sb replace  sb length     search length    sb length    replace
modified   true
found   true
setstrings
break
return found
/**
* delete a search string within the source zone
*
* @param source the source zone for search
* @param suffix the strings to search for suppression
*/
private void deletefrom string source  string suffix
if  source  null
for  int i   0  i < suffix length  i
if  source endswith  suffix
sb delete  sb length     suffix length    sb length
modified   true
setstrings
break
/**
* test if a char is a french vowel, including accentuated ones
*
* @param ch the char to test
* @return boolean - true if the char is a vowel
*/
private boolean isvowel char ch
switch  ch
case
case
case
case
case
case
case
case
case
case
case
case
case
case
case
case
case
case
return true
default
return false
/**
* retrieve the "r zone" (1 or 2 depending on the buffer) and return the corresponding string<br>
* "r is the region after the first non-vowel following a vowel
* or is the null region at the end of the word if there is no such non-vowel"<br>
* @param buffer java.lang.stringbuffer - the in buffer
* @return java.lang.string - the resulting string
*/
private string retriever  stringbuffer buffer
int len   buffer length
int pos    1
for  int c   0  c < len  c
if  isvowel  buffer charat  c
pos   c
break
if  pos >  1
int consonne    1
for  int c   pos  c < len  c
if   isvowel buffer charat  c
consonne   c
break
if  consonne >  1     consonne 1  < len
return buffer substring  consonne 1  len
else
return null
else
return null
/**
* retrieve the "rv zone" from a buffer an return the corresponding string<br>
* "if the word begins with two vowels, rv is the region after the third letter,
* otherwise the region after the first vowel not at the beginning of the word,
* or the end of the word if these positions cannot be found."<br>
* @param buffer java.lang.stringbuffer - the in buffer
* @return java.lang.string - the resulting string
*/
private string retrieverv  stringbuffer buffer
int len   buffer length
if   buffer length   > 3
if   isvowel buffer charat  0       isvowel buffer charat  1
return buffer substring 3 len
else
int pos   0
for  int c   1  c < len  c
if  isvowel  buffer charat  c
pos   c
break
if   pos 1 < len
return buffer substring  pos 1  len
else
return null
else
return null
/**
* turns u and i preceded and followed by a vowel to uppercase<br>
* turns y preceded or followed by a vowel to uppercase<br>
* turns u preceded by q to uppercase<br>
*
* @param buffer java.util.stringbuffer - the buffer to treat
* @return java.util.stringbuffer - the treated buffer
*/
private stringbuffer treatvowels  stringbuffer buffer
for   int c   0  c < buffer length    c
char ch   buffer charat  c
if  c    0     first char
if  buffer length  >1
if  ch         isvowel buffer charat  c   1
buffer setcharat  c
else if  c    buffer length   1     last char
if  ch         buffer charat  c   1
buffer setcharat  c
if  ch         isvowel buffer charat  c   1
buffer setcharat  c
else    other cases
if  ch
if  buffer charat  c   1
buffer setcharat  c
else if  isvowel buffer charat  c   1       isvowel buffer charat  c   1
buffer setcharat  c
if  ch
if  isvowel buffer charat  c   1       isvowel buffer charat  c   1
buffer setcharat  c
if  ch
if  isvowel buffer charat  c   1       isvowel buffer charat  c   1
buffer setcharat  c
return buffer
/**
* checks a term if it can be processed correctly.
*
* @return boolean - true if, and only if, the given term consists in letters.
*/
private boolean isstemmable  string term
boolean upper   false
int first    1
for   int c   0  c < term length    c
// discard terms that contain non-letter characters.
if    character isletter  term charat  c
return false
// discard terms that contain multiple uppercase letters.
if   character isuppercase  term charat  c
if   upper
return false
// first encountered uppercase letter, set flag and save
// position.
else
first   c
upper   true
// discard the term if it contains a single uppercase letter that
// is not starting the term.
if   first > 0
return false
return true