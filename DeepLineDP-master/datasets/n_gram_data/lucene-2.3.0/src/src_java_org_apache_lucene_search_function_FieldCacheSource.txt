package org apache lucene search function
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index indexreader
import org apache lucene search fieldcache
/**
* expert: a base class for valuesource implementations that retrieve values for
* a single field from the {@link org.apache.lucene.search.fieldcache fieldcache}.
* <p>
* fields used herein nust be indexed (doesn't matter if these fields are stored or not).
* <p>
* it is assumed that each such indexed field is untokenized, or at least has a single token in a document.
* for documents with multiple tokens of the same field, behavior is undefined (it is likely that current
* code would use the value of one of these tokens, but this is not guaranteed).
* <p>
* document with no tokens in this field are assigned the <code>zero</code> value.
*
* <p><font color="#ff0000">
* warning: the status of the <b>search.function</b> package is experimental.
* the apis introduced here might change in the future and will not be
* supported anymore in such a case.</font>
*
* @author yonik
*/
public abstract class fieldcachesource extends valuesource
private string field
/**
* create a cached field source for the input field.
*/
public fieldcachesource string field
this field field
/* (non-javadoc) @see org.apache.lucene.search.function.valuesource#getvalues(org.apache.lucene.index.indexreader) */
public final docvalues getvalues indexreader reader  throws ioexception
return getcachedfieldvalues fieldcache default  field  reader
/* (non-javadoc) @see org.apache.lucene.search.function.valuesource#description() */
public string description
return field
/**
* return cached docvalues for input field and reader.
* @param cache fieldcache so that values of a field are loaded once per reader (ram allowing)
* @param field field for which values are required.
* @see valuesource
*/
public abstract docvalues getcachedfieldvalues fieldcache cache  string field  indexreader reader  throws ioexception
/*(non-javadoc) @see java.lang.object#equals(java.lang.object) */
public final boolean equals object o
if    o instanceof fieldcachesource
return false
fieldcachesource other    fieldcachesource  o
return
this field equals other field
cachedfieldsourceequals other
/*(non-javadoc) @see java.lang.object#hashcode() */
public final int hashcode
return
field hashcode
cachedfieldsourcehashcode
/**
* check if equals to another {@link fieldcachesource}, already knowing that cache and field are equal.
* @see object#equals(java.lang.object)
*/
public abstract boolean cachedfieldsourceequals fieldcachesource other
/**
* return a hash code of a {@link fieldcachesource}, without the hash-codes of the field
* and the cache (those are taken care of elsewhere).
* @see object#hashcode()
*/
public abstract int cachedfieldsourcehashcode