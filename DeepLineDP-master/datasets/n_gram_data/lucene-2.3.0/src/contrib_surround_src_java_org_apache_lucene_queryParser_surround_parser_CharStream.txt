/* generated by:javacc: do not edit this line. charstream.java version 3.0 */
package org apache lucene queryparser surround parser
/**
* this interface describes a character stream that maintains line and
* column number positions of the characters.  it also has the capability
* to backup the stream to some extent.  an implementation of this
* interface is used in the tokenmanager implementation generated by
* javaccparser.
*
* all the methods except backup can be implemented in any fashion. backup
* needs to be implemented correctly for the correct operation of the lexer.
* rest of the methods are all used to get information like line number,
* column number and the string that constitutes a token and are not used
* by the lexer. hence their implementation won't affect the generated lexer's
* operation.
*/
public interface charstream
/**
* returns the next character from the selected input.  the method
* of selecting the input is the responsibility of the class
* implementing this interface.  can throw any java.io.ioexception.
*/
char readchar   throws java io ioexception
/**
* returns the column number of the last character for current token (being
* matched after the last call to begintoken).
*/
int getendcolumn
/**
* returns the line number of the last character for current token (being
* matched after the last call to begintoken).
*/
int getendline
/**
* returns the column number of the first character for current token (being
* matched after the last call to begintoken).
*/
int getbegincolumn
/**
* returns the line number of the first character for current token (being
* matched after the last call to begintoken).
*/
int getbeginline
/**
* backs up the input stream by amount steps. lexer calls this method if it
* had already read some characters, but could not use them to match a
* (longer) token. so, they will be used again as the prefix of the next
* token and it is the implemetation's responsibility to do this right.
*/
void backup int amount
/**
* returns the next character that marks the beginning of the next token.
* all characters must remain in the buffer between two successive calls
* to this method to implement backup correctly.
*/
char begintoken   throws java io ioexception
/**
* returns a string made up of characters from the marked token beginning
* to the current buffer position. implementations have the choice of returning
* anything that they want to. for example, for efficiency, one might decide
* to just return null, which is a valid implementation.
*/
string getimage
/**
* returns an array of characters that make up the suffix of length 'len' for
* the currently matched token. this is used to build up the matched string
* for use in actions in the case of more. a simple and inefficient
* implementation of this is as follows :
*
*   {
*      string t = getimage();
*      return t.substring(t.length() - len, t.length()).tochararray();
*   }
*/
char getsuffix int len
/**
* the lexer calls this function to indicate that it is done with the stream
* and hence implementations can free any resources held by this class.
* again, the body of this function can be just empty and it will not
* affect the lexer's operation.
*/
void done