/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene benchmark quality
import java io printwriter
import java text numberformat
import java util arraylist
/**
* results of quality benchmark run for a single query or for a set of queries.
*/
public class qualitystats
/** number of points for which precision is computed. */
public static final int max_points   20
private double maxgoodpoints
private double recall
private double pat
private double preleventsum   0
private double numpoints   0
private double numgoodpoints   0
private double mrr   0
private long searchtime
private long docnamesextracttime
/**
* a certain rank in which a relevant doc was found.
*/
public static class recallpoint
private int rank
private double recall
private recallpoint int rank  double recall
this rank   rank
this recall   recall
/** returns the rank: where on the list of returned docs this relevant doc appeared. */
public int getrank
return rank
/** returns the recall: how many relevant docs were returned up to this point, inclusive. */
public double getrecall
return recall
private arraylist recallpoints
/**
* construct a qualitystats object with anticipated maximal number of relevant hits.
* @param maxgoodpoints maximal possible relevant hits.
*/
public qualitystats double maxgoodpoints  long searchtime
this maxgoodpoints   maxgoodpoints
this searchtime   searchtime
this recallpoints   new arraylist
pat   new double     pat unused
/**
* add a (possibly relevant) doc.
* @param n rank of the added doc (its ordinal position within the query results).
* @param isrelevant true if the added doc is relevant, false otherwise.
*/
public void addresult int n  boolean isrelevant  long docnameextracttime
if  math abs numpoints 1   n  > 1e 6
throw new illegalargumentexception   n   numpoints
if  isrelevant
numgoodpoints  1
recallpoints add new recallpoint n numgoodpoints
if  recallpoints size    1    n< 5       first point  but only within 5 top scores
mrr    1 0   n
numpoints   n
double p   numgoodpoints   numpoints
if  isrelevant
preleventsum    p
if  n<pat length
pat   p
recall   maxgoodpoints< 0 ? p   numgoodpoints maxgoodpoints
docnamesextracttime    docnameextracttime
/**
* return the precision at rank n:
* |{relevant hits within first <code>n</code> hits}| / <code>n</code>.
* @param n requested precision point, must be at least 1 and at most {@link #max_points}.
*/
public double getprecisionat int n
if  n<1    n>max_points
throw new illegalargumentexception   n   max_points
if  n>numpoints
return  numpoints   pat  n
return pat
/**
* return the average precision at recall points.
*/
public double getavp
return maxgoodpoints  0 ? 0   preleventsum maxgoodpoints
/**
* return the recall: |{relevant hits}| / |{hits}|.
*/
public double getrecall
return recall
/**
* log information on this qualitystats object.
* @param logger logger.
* @param prefix prefix before each log line.
*/
public void log string title  int paddlines  printwriter logger  string prefix
for  int i 0  i<paddlines  i
logger println
if  title  null    title trim   length  >0
logger println title
prefix   prefix  null ?     prefix
numberformat nf   numberformat getinstance
nf setmaximumfractiondigits 3
nf setminimumfractiondigits 3
nf setgroupingused true
int m   19
logger println prefix format   m
fracformat nf format  double searchtime 1000
logger println prefix format   m
fracformat nf format  double docnamesextracttime 1000
logger println prefix format   m
fracformat nf format numpoints
logger println prefix format   m
fracformat nf format numgoodpoints
logger println prefix format   m
fracformat nf format maxgoodpoints
logger println prefix format   m
fracformat nf format getavp
logger println prefix format   m
fracformat nf format getmrr
logger println prefix format   m
fracformat nf format getrecall
for  int i 1  i< int numpoints    i<pat length  i
logger println prefix format   i   m
fracformat nf format getprecisionat i
for  int i 0  i<paddlines  i
logger println
private static string padd
private string format string s  int minlen
s    s  null ?     s
int n   math max minlen s length
return  s padd  substring 0 n
private string fracformat string frac
int k   frac indexof
string s1   padd frac substring 0 k
int n   math max k 6
s1   s1 substring s1 length   n
return s1   frac substring k
/**
* create a qualitystats object that is the average of the input qualitystats objects.
* @param stats array of input stats to be averaged.
* @return an average over the input stats.
*/
public static qualitystats average qualitystats stats
qualitystats avg   new qualitystats 0 0
if  stats length  0
// weired, no stats to average!
return avg
int m   0     queries with positive judgements
// aggregate
for  int i 0  i<stats length  i
avg searchtime    stats searchtime
avg docnamesextracttime    stats docnamesextracttime
if  stats maxgoodpoints>0
m
avg numgoodpoints    stats numgoodpoints
avg numpoints    stats numpoints
avg preleventsum    stats getavp
avg recall    stats recall
avg mrr    stats getmrr
avg maxgoodpoints    stats maxgoodpoints
for  int j 1  j<avg pat length  j
avg pat    stats getprecisionat j
assert m>0    good
// take average: times go by all queries, other meassures go by "good" queries noly.
avg searchtime    stats length
avg docnamesextracttime    stats length
avg numgoodpoints    m
avg numpoints    m
avg recall    m
avg mrr    m
avg maxgoodpoints    m
for  int j 1  j<avg pat length  j
avg pat    m
avg preleventsum    m                     this is actually avgp now
avg preleventsum    avg maxgoodpoints     so that getavgp   would be correct
return avg
/**
* returns the time it took to extract doc names for judging the measured query, in milliseconds.
*/
public long getdocnamesextracttime
return docnamesextracttime
/**
* returns the maximal number of good points.
* this is the number of relevant docs known by the judge for the measured query.
*/
public double getmaxgoodpoints
return maxgoodpoints
/**
* returns the number of good points (only relevant points).
*/
public double getnumgoodpoints
return numgoodpoints
/**
* returns the number of points (both relevant and irrelevant points).
*/
public double getnumpoints
return numpoints
/**
* returns the recallpoints.
*/
public recallpoint  getrecallpoints
return  recallpoint  recallpoints toarray new recallpoint
/**
* returns the mean reciprocal rank over the queries or rr for a single query.
* <p>
* reciprocal rank is defined as <code>1/r</code> where <code>r</code> is the
* rank of the first correct result, or <code>0</code> if there are no correct
* results within the top 5 results.
* <p>
* this follows the definition in
* <a href="http://www.cnlp.org/publications/02cnlptrec10.pdf">
* question answering - cnlp at the trec-10 question answering track</a>.
*/
public double getmrr
return mrr
/**
* returns the search time in milliseconds for the measured query.
*/
public long getsearchtime
return searchtime