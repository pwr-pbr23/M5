package org apache lucene document
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java text parseexception
import java text simpledateformat
import java util calendar
import java util date
import java util timezone
/**
* provides support for converting dates to strings and vice-versa.
* the strings are structured so that lexicographic sorting orders
* them by date, which makes them suitable for use as field values
* and search terms.
*
* <p>this class also helps you to limit the resolution of your dates. do not
* save dates with a finer resolution than you really need, as then
* rangequery and prefixquery will require more memory and become slower.
*
* <p>compared to {@link datefield} the strings generated by the methods
* in this class take slightly more space, unless your selected resolution
* is set to <code>resolution.day</code> or lower.
*/
public class datetools
private final static timezone gmt   timezone gettimezone
private static final simpledateformat year_format   new simpledateformat
private static final simpledateformat month_format   new simpledateformat
private static final simpledateformat day_format   new simpledateformat
private static final simpledateformat hour_format   new simpledateformat
private static final simpledateformat minute_format   new simpledateformat
private static final simpledateformat second_format   new simpledateformat
private static final simpledateformat millisecond_format   new simpledateformat
static
// times need to be normalized so the value doesn't depend on the
// location the index is created/used:
year_format settimezone gmt
month_format settimezone gmt
day_format settimezone gmt
hour_format settimezone gmt
minute_format settimezone gmt
second_format settimezone gmt
millisecond_format settimezone gmt
// cannot create, the class has static methods only
private datetools
/**
* converts a date to a string suitable for indexing.
*
* @param date the date to be converted
* @param resolution the desired resolution, see
*  {@link #round(date, datetools.resolution)}
* @return a string in format <code>yyyymmddhhmmsssss</code> or shorter,
*  depeding on <code>resolution</code>; using utc as timezone
*/
public static string datetostring date date  resolution resolution
return timetostring date gettime    resolution
/**
* converts a millisecond time to a string suitable for indexing.
*
* @param time the date expressed as milliseconds since january 1, 1970, 00:00:00 gmt
* @param resolution the desired resolution, see
*  {@link #round(long, datetools.resolution)}
* @return a string in format <code>yyyymmddhhmmsssss</code> or shorter,
*  depeding on <code>resolution</code>; using utc as timezone
*/
public static string timetostring long time  resolution resolution
calendar cal   calendar getinstance gmt
//protected in jdk's prior to 1.4
//cal.settimeinmillis(round(time, resolution));
cal settime new date round time  resolution
string result
if  resolution    resolution year
synchronized  year_format
result   year_format format cal gettime
else if  resolution    resolution month
synchronized  month_format
result   month_format format cal gettime
else if  resolution    resolution day
synchronized  day_format
result   day_format format cal gettime
else if  resolution    resolution hour
synchronized  hour_format
result   hour_format format cal gettime
else if  resolution    resolution minute
synchronized  minute_format
result   minute_format format cal gettime
else if  resolution    resolution second
synchronized  second_format
result   second_format format cal gettime
else if  resolution    resolution millisecond
synchronized  millisecond_format
result   millisecond_format format cal gettime
else
throw new illegalargumentexception     resolution
return result
/**
* converts a string produced by <code>timetostring</code> or
* <code>datetostring</code> back to a time, represented as the
* number of milliseconds since january 1, 1970, 00:00:00 gmt.
*
* @param datestring the date string to be converted
* @return the number of milliseconds since january 1, 1970, 00:00:00 gmt
* @throws parseexception if <code>datestring</code> is not in the
*  expected format
*/
public static long stringtotime string datestring  throws parseexception
return stringtodate datestring  gettime
/**
* converts a string produced by <code>timetostring</code> or
* <code>datetostring</code> back to a time, represented as a
* date object.
*
* @param datestring the date string to be converted
* @return the parsed time as a date object
* @throws parseexception if <code>datestring</code> is not in the
*  expected format
*/
public static date stringtodate string datestring  throws parseexception
date date
if  datestring length      4
synchronized  year_format
date   year_format parse datestring
else if  datestring length      6
synchronized  month_format
date   month_format parse datestring
else if  datestring length      8
synchronized  day_format
date   day_format parse datestring
else if  datestring length      10
synchronized  hour_format
date   hour_format parse datestring
else if  datestring length      12
synchronized  minute_format
date   minute_format parse datestring
else if  datestring length      14
synchronized  second_format
date   second_format parse datestring
else if  datestring length      17
synchronized  millisecond_format
date   millisecond_format parse datestring
else
throw new parseexception     datestring  0
return date
/**
* limit a date's resolution. for example, the date <code>2004-09-21 13:50:11</code>
* will be changed to <code>2004-09-01 00:00:00</code> when using
* <code>resolution.month</code>.
*
* @param resolution the desired resolution of the date to be returned
* @return the date with all values more precise than <code>resolution</code>
*  set to 0 or 1
*/
public static date round date date  resolution resolution
return new date round date gettime    resolution
/**
* limit a date's resolution. for example, the date <code>1095767411000</code>
* (which represents 2004-09-21 13:50:11) will be changed to
* <code>1093989600000</code> (2004-09-01 00:00:00) when using
* <code>resolution.month</code>.
*
* @param resolution the desired resolution of the date to be returned
* @return the date with all values more precise than <code>resolution</code>
*  set to 0 or 1, expressed as milliseconds since january 1, 1970, 00:00:00 gmt
*/
public static long round long time  resolution resolution
calendar cal   calendar getinstance gmt
// protected in jdk's prior to 1.4
//cal.settimeinmillis(time);
cal settime new date time
if  resolution    resolution year
cal set calendar month  0
cal set calendar day_of_month  1
cal set calendar hour_of_day  0
cal set calendar minute  0
cal set calendar second  0
cal set calendar millisecond  0
else if  resolution    resolution month
cal set calendar day_of_month  1
cal set calendar hour_of_day  0
cal set calendar minute  0
cal set calendar second  0
cal set calendar millisecond  0
else if  resolution    resolution day
cal set calendar hour_of_day  0
cal set calendar minute  0
cal set calendar second  0
cal set calendar millisecond  0
else if  resolution    resolution hour
cal set calendar minute  0
cal set calendar second  0
cal set calendar millisecond  0
else if  resolution    resolution minute
cal set calendar second  0
cal set calendar millisecond  0
else if  resolution    resolution second
cal set calendar millisecond  0
else if  resolution    resolution millisecond
// don't cut off anything
else
throw new illegalargumentexception     resolution
return cal gettime   gettime
/** specifies the time granularity. */
public static class resolution
public static final resolution year   new resolution
public static final resolution month   new resolution
public static final resolution day   new resolution
public static final resolution hour   new resolution
public static final resolution minute   new resolution
public static final resolution second   new resolution
public static final resolution millisecond   new resolution
private string resolution
private resolution
private resolution string resolution
this resolution   resolution
public string tostring
return resolution