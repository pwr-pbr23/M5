package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** an interprocess mutex lock.
* <p>typical use might look like:<pre>
* new lock.with(directory.makelock("my.lock")) {
*     public object dobody() {
*       <i>... code to execute while locked ...</i>
*     }
*   }.run();
* </pre>
*
*
* @version $id$
* @see directory#makelock(string)
*/
public abstract class lock
/** how long {@link #obtain(long)} waits, in milliseconds,
*  in between attempts to acquire the lock. */
public static long lock_poll_interval   1000
/** pass this value to {@link #obtain(long)} to try
*  forever to obtain the lock. */
public static final long lock_obtain_wait_forever    1
/** attempts to obtain exclusive access and immediately return
*  upon success or failure.
* @return true iff exclusive access is obtained
*/
public abstract boolean obtain   throws ioexception
/**
* if a lock obtain called, this failurereason may be set
* with the "root cause" exception as to why the lock was
* not obtained.
*/
protected throwable failurereason
/** attempts to obtain an exclusive lock within amount of
*  time given. polls once per {@link #lock_poll_interval}
*  (currently 1000) milliseconds until lockwaittimeout is
*  passed.
* @param lockwaittimeout length of time to wait in
*        milliseconds or {@link
*        #lock_obtain_wait_forever} to retry forever
* @return true if lock was obtained
* @throws lockobtainfailedexception if lock wait times out
* @throws illegalargumentexception if lockwaittimeout is
*         out of bounds
* @throws ioexception if obtain() throws ioexception
*/
public boolean obtain long lockwaittimeout  throws lockobtainfailedexception  ioexception
failurereason   null
boolean locked   obtain
if  lockwaittimeout < 0    lockwaittimeout    lock_obtain_wait_forever
throw new illegalargumentexception     lockwaittimeout
long maxsleepcount   lockwaittimeout   lock_poll_interval
long sleepcount   0
while   locked
if  lockwaittimeout    lock_obtain_wait_forever    sleepcount   >  maxsleepcount
string reason       this tostring
if  failurereason    null
reason        failurereason
lockobtainfailedexception e   new lockobtainfailedexception reason
if  failurereason    null
e initcause failurereason
throw e
try
thread sleep lock_poll_interval
catch  interruptedexception e
throw new ioexception e tostring
locked   obtain
return locked
/** releases exclusive access. */
public abstract void release   throws ioexception
/** returns true if the resource is currently locked.  note that one must
* still call {@link #obtain()} before using the resource. */
public abstract boolean islocked
/** utility class for executing code with exclusive access. */
public abstract static class with
private lock lock
private long lockwaittimeout
/** constructs an executor that will grab the named lock. */
public with lock lock  long lockwaittimeout
this lock   lock
this lockwaittimeout   lockwaittimeout
/** code to execute with exclusive access. */
protected abstract object dobody   throws ioexception
/** calls {@link #dobody} while <i>lock</i> is obtained.  blocks if lock
* cannot be obtained immediately.  retries to obtain lock once per second
* until it is obtained, or until it has tried ten times. lock is released when
* {@link #dobody} exits.
* @throws lockobtainfailedexception if lock could not
* be obtained
* @throws ioexception if {@link lock#obtain} throws ioexception
*/
public object run   throws lockobtainfailedexception  ioexception
boolean locked   false
try
locked   lock obtain lockwaittimeout
return dobody
finally
if  locked
lock release