package org apache lucene util
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene store directory
import org apache lucene store indexinput
import org apache lucene store indexoutput
/** optimized implementation of a vector of bits.  this is more-or-less like
java.util.bitset, but also includes the following:
<ul>
<li>a count() method, which efficiently computes the number of one bits;</li>
<li>optimized read from and write to disk;</li>
<li>inlinable get() method;</li>
<li>store and load, as bit set or d-gaps, depending on sparseness;</li>
</ul>
@version $id$
*/
public final class bitvector
private byte bits
private int size
private int count    1
/** constructs a vector capable of holding <code>n</code> bits. */
public bitvector int n
size   n
bits   new byte
/** sets the value of <code>bit</code> to one. */
public final void set int bit
if  bit >  size
throw new arrayindexoutofboundsexception bit
bits    1 <<  bit   7
count    1
/** sets the value of <code>bit</code> to zero. */
public final void clear int bit
if  bit >  size
throw new arrayindexoutofboundsexception bit
bits    ~ 1 <<  bit   7
count    1
/** returns <code>true</code> if <code>bit</code> is one and
<code>false</code> if it is zero. */
public final boolean get int bit
if  bit >  size
throw new arrayindexoutofboundsexception bit
return  bits    1 <<  bit   7       0
/** returns the number of bits in this vector.  this is also one greater than
the number of the largest valid bit number. */
public final int size
return size
/** returns the total number of one bits in this vector.  this is efficiently
computed and cached, so that, if the vector is not changed, no
recomputation is done for repeated calls. */
public final int count
// if the vector has been modified
if  count     1
int c   0
int end   bits length
for  int i   0  i < end  i
c    byte_counts   0xff] 	     sum bits per byte
count   c
return count
private static final byte byte_counts    	     table of bits byte
0  1  1  2  1  2  2  3  1  2  2  3  2  3  3  4
1  2  2  3  2  3  3  4  2  3  3  4  3  4  4  5
1  2  2  3  2  3  3  4  2  3  3  4  3  4  4  5
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
1  2  2  3  2  3  3  4  2  3  3  4  3  4  4  5
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
3  4  4  5  4  5  5  6  4  5  5  6  5  6  6  7
1  2  2  3  2  3  3  4  2  3  3  4  3  4  4  5
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
3  4  4  5  4  5  5  6  4  5  5  6  5  6  6  7
2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
3  4  4  5  4  5  5  6  4  5  5  6  5  6  6  7
3  4  4  5  4  5  5  6  4  5  5  6  5  6  6  7
4  5  5  6  5  6  6  7  5  6  6  7  6  7  7  8
/** writes this vector to the file <code>name</code> in directory
<code>d</code>, in a format that can be read by the constructor {@link
#bitvector(directory, string)}.  */
public final void write directory d  string name  throws ioexception
indexoutput output   d createoutput name
try
if  issparse
writedgaps output      sparse bit set more efficiently saved as d gaps
else
writebits output
finally
output close
/** write as a bit set */
private void writebits indexoutput output  throws ioexception
output writeint size               write size
output writeint count              write count
output writebytes bits  bits length
/** write as a d-gaps list */
private void writedgaps indexoutput output  throws ioexception
output writeint  1                 mark using d gaps
output writeint size               write size
output writeint count              write count
int last 0
int n   count
int m   bits length
for  int i 0  i<m    n>0  i
if  bits  0
output writevint i last
output writebyte bits
last   i
n    byte_counts   0xff]
/** indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */
private boolean issparse
// note: order of comparisons below set to favor smaller values (no binary range search.)
// note: adding 4 because we start with ((int) -1) to indicate d-gaps format.
// note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore
//       multiplying count by (8+8) or (8+16) or (8+24) etc.:
//       - first 8 for writing bits[i] (1 byte vs. 1 bit), and
//       - second part for writing the byte-number d-gap as vint.
// note: factor is for read/write of byte-arrays being faster than vints.
int factor   10
if  bits length <  1<< 7   return factor    4    8  8  count    < size
if  bits length <  1<<14   return factor    4    8 16  count    < size
if  bits length <  1<<21   return factor    4    8 24  count    < size
if  bits length <  1<<28   return factor    4    8 32  count    < size
return                            factor    4    8 40  count    < size
/** constructs a bit vector from the file <code>name</code> in directory
<code>d</code>, as written by the {@link #write} method.
*/
public bitvector directory d  string name  throws ioexception
indexinput input   d openinput name
try
size   input readint             read size
if  size     1
readdgaps input
else
readbits input
finally
input close
/** read as a bit set */
private void readbits indexinput input  throws ioexception
count   input readint              read count
bits   new byte         allocate bits
input readbytes bits  0  bits length
/** read as a d-gaps list */
private void readdgaps indexinput input  throws ioexception
size   input readint              re read size
count   input readint              read count
bits   new byte         allocate bits
int last 0
int n   count
while  n>0
last    input readvint
bits   input readbyte
n    byte_counts   0xff]