package org apache lucene benchmark bytask utils
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io streamtokenizer
import java io stringreader
import java lang reflect constructor
import java util arraylist
import org apache lucene benchmark bytask perfrundata
import org apache lucene benchmark bytask tasks perftask
import org apache lucene benchmark bytask tasks repsumbypreftask
import org apache lucene benchmark bytask tasks tasksequence
/**
* test algorithm, as read from file
*/
public class algorithm
private tasksequence sequence
/**
* read algorithm from file
* @param rundata perf-run-data used at running the tasks.
* @throws exception if errors while parsing the algorithm
*/
public algorithm  perfrundata rundata  throws exception
string algtxt   rundata getconfig   getalgorithmtext
sequence   new tasksequence rundata null null false
tasksequence currsequence   sequence
perftask prevtask   null
streamtokenizer stok   new streamtokenizer new stringreader algtxt
stok commentchar
stok eolissignificant false
stok ordinarychar
stok ordinarychar
stok ordinarychar
stok ordinarychar
boolean colonok   false
currsequence setdepth 0
string taskpackage   perftask class getpackage   getname
class paramclass    perfrundata class
perfrundata paramobj    rundata
while  stok nexttoken      streamtokenizer tt_eof
switch stok ttype
case streamtokenizer tt_word
string s   stok sval
constructor cnstr   class forname taskpackage s    getconstructor paramclass
perftask task    perftask  cnstr newinstance paramobj
currsequence addtask task
if  task instanceof repsumbypreftask
stok nexttoken
string prefix   stok sval
if  prefix  null    prefix length    0
throw new exception   stok tostring
repsumbypreftask  task  setprefix prefix
// check for task param: '(' someparam ')'
stok nexttoken
if  stok ttype
stok pushback
else
// get params, for tasks that supports them, - anything until next ')'
stringbuffer params   new stringbuffer
stok nexttoken
while  stok ttype
switch  stok ttype
case streamtokenizer tt_number
params append stok nval
break
case streamtokenizer tt_word
params append stok sval
break
case streamtokenizer tt_eof
throw new exception   stok tostring
default
params append  char stok ttype
stok nexttoken
string prm   params tostring   trim
if  prm length  >0
task setparams prm
// ---------------------------------------
colonok   false  prevtask   task
break
default
char c    char stok ttype
switch c
case
if   colonok  throw new exception   stok tostring
colonok   false
// get repetitions number
stok nexttoken
if   char stok ttype
tasksequence prevtask  setrepetitions tasksequence repeat_exhaust
else
if  stok ttype  streamtokenizer tt_number  throw new exception   stok tostring
tasksequence prevtask  setrepetitions  int stok nval
// check for rate specification (ops/min)
stok nexttoken
if  stok ttype
stok pushback
else
// get rate number
stok nexttoken
if  stok ttype  streamtokenizer tt_number  throw new exception   stok tostring
// check for unit - min or sec, sec is default
stok nexttoken
if  stok ttype
stok pushback
tasksequence prevtask  setrate  int stok nval false      set rate per sec
else
stok nexttoken
if  stok ttype  streamtokenizer tt_word  throw new exception   stok tostring
string unit   stok sval tolowercase
if    equals unit
tasksequence prevtask  setrate  int stok nval true      set rate per min
else if    equals unit
tasksequence prevtask  setrate  int stok nval false      set rate per sec
else
throw new exception   stok tostring
colonok   false
break
case
case
// a sequence
// check for sequence name
string name   null
stok nexttoken
if  stok ttype
stok pushback
else
stok nexttoken
name   stok sval
stok nexttoken
if  stok ttype       name  null    name length    0
throw new exception   stok tostring
// start the sequence
tasksequence seq2   new tasksequence rundata  name  currsequence  c
currsequence addtask seq2
currsequence   seq2
colonok   false
break
case
currsequence setnochildreport
case
case
// end sequence
colonok   true  prevtask   currsequence
currsequence   currsequence getparent
break
switch c
break
switch stok ttype
if  sequence    currsequence
throw new exception
// remove redundant top level enclosing sequences
while  sequence getrepetitions    1    sequence getrate    0
arraylist t   sequence gettasks
if  t  null    t size    1
perftask p    perftask  t get 0
if  p instanceof tasksequence
sequence    tasksequence  p
continue
break
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
string newline   system getproperty
stringbuffer sb   new stringbuffer
sb append sequence tostring
sb append newline
return sb tostring
/**
* execute this algorithm
* @throws exception
*/
public void execute   throws exception
sequence dologic
/**
* expert: for test purposes, return all tasks participating in this algorithm.
* @return all tasks participating in this algorithm.
*/
public arraylist extracttasks
arraylist res   new arraylist
extracttasks res  sequence
return res
private void extracttasks  arraylist extrct  tasksequence seq
if  seq  null
return
extrct add seq
arraylist t   sequence gettasks
if  t  null
return
for  int i   0  i < t size    i
perftask p    perftask  t get 0
if  p instanceof tasksequence
extracttasks extrct   tasksequence p
else
extrct add p