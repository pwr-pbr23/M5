package org apache lucene analysis ngram
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis token
import org apache lucene analysis tokenizer
import java io ioexception
import java io reader
/**
* tokenizes the input into n-grams of the given size(s).
* @author otis gospodnetic
*/
public class ngramtokenizer extends tokenizer
public static final int default_min_ngram_size   1
public static final int default_max_ngram_size   2
private int mingram  maxgram
private int gramsize
private int pos   0
private int inlen
private string instr
private boolean started   false
/**
* creates ngramtokenizer with given min and max n-grams.
* @param input reader holding the input to be tokenized
* @param mingram the smallest n-gram to generate
* @param maxgram the largest n-gram to generate
*/
public ngramtokenizer reader input  int mingram  int maxgram
super input
if  mingram < 1
throw new illegalargumentexception
if  mingram > maxgram
throw new illegalargumentexception
this mingram   mingram
this maxgram   maxgram
/**
* creates ngramtokenizer with default min and max n-grams.
* @param input reader holding the input to be tokenized
*/
public ngramtokenizer reader input
this input  default_min_ngram_size  default_max_ngram_size
/** returns the next token in the stream, or null at eos. */
public final token next   throws ioexception
if   started
started   true
gramsize   mingram
char chars   new char
input read chars
instr   new string chars  trim        remove any trailing empty strings
inlen   instr length
if  pos gramsize > inlen                  if we hit the end of the string
pos   0                               reset to beginning of string
gramsize                              increase n gram size
if  gramsize > maxgram                we are done
return null
if  pos gramsize > inlen
return null
string gram   instr substring pos  pos gramsize
int oldpos   pos
pos
return new token gram  oldpos  oldpos gramsize