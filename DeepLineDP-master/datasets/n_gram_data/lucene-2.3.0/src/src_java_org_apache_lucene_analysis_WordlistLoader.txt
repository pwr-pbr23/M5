package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io bufferedreader
import java io file
import java io filereader
import java io ioexception
import java io reader
import java util hashmap
import java util hashset
/**
* loader for text files that represent a list of stopwords.
*
*
* @version $id$
*/
public class wordlistloader
/**
* loads a text file and adds every line as an entry to a hashset (omitting
* leading and trailing whitespace). every line of the file should contain only
* one word. the words need to be in lowercase if you make use of an
* analyzer which uses lowercasefilter (like standardanalyzer).
*
* @param wordfile file containing the wordlist
* @return a hashset with the file's words
*/
public static hashset getwordset file wordfile  throws ioexception
hashset result   new hashset
filereader reader   null
try
reader   new filereader wordfile
result   getwordset reader
finally
if  reader    null
reader close
return result
/**
* reads lines from a reader and adds every line as an entry to a hashset (omitting
* leading and trailing whitespace). every line of the reader should contain only
* one word. the words need to be in lowercase if you make use of an
* analyzer which uses lowercasefilter (like standardanalyzer).
*
* @param reader reader containing the wordlist
* @return a hashset with the reader's words
*/
public static hashset getwordset reader reader  throws ioexception
hashset result   new hashset
bufferedreader br   null
try
if  reader instanceof bufferedreader
br    bufferedreader  reader
else
br   new bufferedreader reader
string word   null
while   word   br readline       null
result add word trim
finally
if  br    null
br close
return result
/**
* reads a stem dictionary. each line contains:
* <pre>word<b>\t</b>stem</pre>
* (i.e. two tab seperated words)
*
* @return stem dictionary that overrules the stemming algorithm
* @throws ioexception
*/
public static hashmap getstemdict file wordstemfile  throws ioexception
if  wordstemfile    null
throw new nullpointerexception
hashmap result   new hashmap
bufferedreader br   null
filereader fr   null
try
fr   new filereader wordstemfile
br   new bufferedreader fr
string line
while   line   br readline       null
string wordstem   line split    2
result put wordstem  wordstem
finally
if  fr    null
fr close
if  br    null
br close
return result