package lucli
/* ====================================================================
* the apache software license, version 1.1
*
* copyright (c) 2001 the apache software foundation.  all rights
* reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution,
*    if any, must include the following acknowledgment:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgment may appear in the software itself,
*    if and wherever such third-party acknowledgments normally appear.
*
* 4. the names "apache" and "apache software foundation" and
*    "apache lucene" must not be used to endorse or promote products
*    derived from this software without prior written permission. for
*    written permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache",
*    "apache lucene", nor may "apache" appear in their name, without
*    prior written permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*/
import java io ioexception
import java io reader
import java io stringreader
import java util hashtable
import java util vector
import java util treemap
import java util map entry
import java util set
import java util arrays
import java util comparator
import java util iterator
import java util enumeration
import jline consolereader
import org apache lucene analysis analyzer
import org apache lucene analysis token
import org apache lucene analysis tokenstream
import org apache lucene analysis standard standardanalyzer
import org apache lucene document document
import org apache lucene document field
import org apache lucene index indexreader
import org apache lucene index indexwriter
import org apache lucene index term
import org apache lucene index termenum
import org apache lucene index indexreader fieldoption
import org apache lucene queryparser multifieldqueryparser
import org apache lucene queryparser parseexception
import org apache lucene search explanation
import org apache lucene search hits
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search searcher
/**
* various methods that interact with lucene and provide info about the
* index, search, etc. parts addapted from lucene demo.
*/
class lucenemethods
private int numdocs
private string indexname    directory of this index
private java util iterator fielditerator
private vector fields    fields as a vector
private vector indexedfields    fields as a vector
private string fieldsarray    fields as an array
private searcher searcher
private query query    current query string
public lucenemethods string index
indexname   index
message     indexname
public void info   throws java io ioexception
indexreader indexreader   indexreader open indexname
getfieldinfo
numdocs   indexreader numdocs
message     numdocs
message     fields tostring
message     indexedfields tostring
if  indexreader islocked indexname
message
//indexreader.getcurrentversion(indexname);
//system.out.println("version:" + version);
indexreader close
public void search string querystring  boolean explain  boolean showtokens  consolereader cr
throws java io ioexception  org apache lucene queryparser parseexception
hits hits   initsearch querystring
system out println hits length
if  explain
query   explainquery querystring
final int hits_per_page   10
message
for  int start   0  start < hits length    start    hits_per_page
int end   math min hits length    start   hits_per_page
for  int ii   start  ii < end  ii
document doc   hits doc ii
message      ii   1        hits score ii
printhit doc
if  showtokens
invertdocument doc
if  explain
explanation exp   searcher explain query  hits id ii
message     exp tostring
message
if  hits length   > end
// todo: don't let the input end up in the command line history
querystring   cr readline
if  querystring length      0    querystring charat 0
break
searcher close
/**
* @todo allow user to specify what field(s) to display
*/
private void printhit document doc
for  int ii   0  ii < fieldsarray length  ii
string currfield   fieldsarray
string result   doc getvalues currfield
if  result    null
for  int i   0  i < result length  i
message currfield       result
else
message currfield
//another option is to just do message(doc);
public void optimize   throws ioexception
//open the index writer. false: don't create a new one
indexwriter indexwriter   new indexwriter indexname  new standardanalyzer    false
message
long start   system currenttimemillis
indexwriter optimize
message      system currenttimemillis     start
indexwriter close
private query explainquery string querystring  throws ioexception  parseexception
searcher   new indexsearcher indexname
analyzer analyzer   new standardanalyzer
getfieldinfo
int arraysize   indexedfields size
string indexedarray   new string
for  int ii   0  ii < arraysize  ii
indexedarray    string  indexedfields get ii
multifieldqueryparser parser   new multifieldqueryparser indexedarray  analyzer
query   parser parse querystring
system out println     query tostring
return  query
/**
* @todo allow user to specify analyzer
*/
private hits initsearch string querystring  throws ioexception  parseexception
searcher   new indexsearcher indexname
analyzer analyzer   new standardanalyzer
getfieldinfo
int arraysize   fields size
fieldsarray   new string
for  int ii   0  ii < arraysize  ii
fieldsarray    string  fields get ii
multifieldqueryparser parser   new multifieldqueryparser fieldsarray  analyzer
query   parser parse querystring
system out println     query tostring
hits hits   searcher search query
return  hits
public void count string querystring  throws java io ioexception  parseexception
hits hits   initsearch querystring
system out println hits length
searcher close
static public void message string s
system out println s
private void getfieldinfo   throws ioexception
indexreader indexreader   indexreader open indexname
fields   new vector
indexedfields   new vector
//get the list of all field names
fielditerator   indexreader getfieldnames fieldoption all  iterator
while  fielditerator hasnext
object field   fielditerator next
if  field    null     field equals
fields add field tostring
//
//get the list of indexed field names
fielditerator   indexreader getfieldnames fieldoption indexed  iterator
while  fielditerator hasnext
object field   fielditerator next
if  field    null     field equals
indexedfields add field tostring
indexreader close
// copied from documentwriter
// tokenizes the fields of a document into postings.
private void invertdocument document doc
throws ioexception
hashtable tokenhash   new hashtable
final int maxfieldlength   10000
analyzer analyzer   new standardanalyzer
enumeration fields   doc fields
while  fields hasmoreelements
field field    field  fields nextelement
string fieldname   field name
if  field isindexed
if  field istokenized             un tokenized field
reader reader            find or make reader
if  field readervalue      null
reader   field readervalue
else if  field stringvalue      null
reader   new stringreader field stringvalue
else
throw new illegalargumentexception
int position   0
// tokenize field and add to postingtable
tokenstream stream   analyzer tokenstream fieldname  reader
try
for  token t   stream next    t    null  t   stream next
position     t getpositionincrement     1
position
string name   t termtext
integer count    integer  tokenhash get name
if  count    null       not in there yet
tokenhash put name  new integer 1      first one
else
int count   count intvalue
tokenhash put name  new integer count   1
if  position > maxfieldlength  break
finally
stream close
entry sortedhash   getsortedhashtableentries tokenhash
for  int ii   0  ii < sortedhash length    ii < 10  ii
entry currententry   sortedhash
message  ii   1        currententry getkey         currententry getvalue
/** provides a list of the top terms of the index.
*
* @param field  - the name of the command or null for all of them.
*/
public void terms string field  throws ioexception
treemap termmap   new treemap
indexreader indexreader   indexreader open indexname
termenum terms   indexreader terms
while  terms next
term term   terms term
//message(term.field() + ":" + term.text() + " freq:" + terms.docfreq());
//if we're either not looking by field or we're matching the specific field
if   field    null     field equals term field
termmap put term field         term text    new integer  terms docfreq
iterator termiterator   termmap keyset   iterator
for  int ii   0  termiterator hasnext      ii < 100  ii
string termdetails    string  termiterator next
integer termfreq    integer  termmap get termdetails
message termdetails       termfreq
indexreader close
/** sort hashtable values
* @param h the hashtable we're sorting
* from http://developer.java.sun.com/developer/qow/archive/170/index.jsp
*/
public static entry
getsortedhashtableentries hashtable h
set set   h entryset
entry entries
entry  set toarray
new entry
arrays sort entries  new comparator
public int compare object o1  object o2
object v1     entry  o1  getvalue
object v2     entry  o2  getvalue
return   comparable  v2  compareto v1     descending order
return entries