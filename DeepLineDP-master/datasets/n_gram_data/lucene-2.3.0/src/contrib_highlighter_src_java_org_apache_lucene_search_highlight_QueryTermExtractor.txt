package org apache lucene search highlight
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util hashset
import java util iterator
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene search booleanclause
import org apache lucene search booleanquery
import org apache lucene search filteredquery
import org apache lucene search query
/**
* utility class used to extract the terms used in a query, plus any weights.
* this class will not find terms for multitermquery, rangequery and prefixquery classes
* so the caller must pass a rewritten query (see query.rewrite) to obtain a list of
* expanded terms.
*
*/
public final class querytermextractor
/**
* extracts all terms texts of a given query into an array of weightedterms
*
* @param query      query to extract term texts from
* @return an array of the terms used in a query, plus their weights.
*/
public static final weightedterm getterms query query
return getterms query false
/**
* extracts all terms texts of a given query into an array of weightedterms
*
* @param query      query to extract term texts from
* @param reader used to compute idf which can be used to a) score selected fragments better
* b) use graded highlights eg chaning intensity of font color
* @param fieldname the field on which inverse document frequency (idf) calculations are based
* @return an array of the terms used in a query, plus their weights.
*/
public static final weightedterm getidfweightedterms query query  indexreader reader  string fieldname
weightedterm terms getterms query false  fieldname
int totalnumdocs reader numdocs
for  int i   0  i < terms length  i
try
int docfreq reader docfreq new term fieldname terms term
//idf algorithm taken from defaultsimilarity class
float idf  float  math log  float totalnumdocs  double  docfreq 1     1 0
terms weight  idf
catch  ioexception e
//ignore
return terms
/**
* extracts all terms texts of a given query into an array of weightedterms
*
* @param query      query to extract term texts from
* @param prohibited <code>true</code> to extract "prohibited" terms, too
* @param fieldname  the fieldname used to filter query terms
* @return an array of the terms used in a query, plus their weights.
*/
public static final weightedterm getterms query query  boolean prohibited  string fieldname
hashset terms new hashset
if fieldname  null
fieldname fieldname intern
getterms query terms prohibited fieldname
return  weightedterm  terms toarray new weightedterm
/**
* extracts all terms texts of a given query into an array of weightedterms
*
* @param query      query to extract term texts from
* @param prohibited <code>true</code> to extract "prohibited" terms, too
* @return an array of the terms used in a query, plus their weights.
*/
public static final weightedterm getterms query query  boolean prohibited
return getterms query prohibited null
//fieldname must be interned prior to this call
private static final void getterms query query  hashset terms boolean prohibited  string fieldname
try
if  query instanceof booleanquery
gettermsfrombooleanquery  booleanquery  query  terms  prohibited  fieldname
else
if query instanceof filteredquery
gettermsfromfilteredquery  filteredquery query  terms prohibited  fieldname
else
hashset nonweightedterms new hashset
query extractterms nonweightedterms
for  iterator iter   nonweightedterms iterator    iter hasnext
term term    term  iter next
if  fieldname  null    term field    fieldname
terms add new weightedterm query getboost   term text
catch unsupportedoperationexception ignore
//this is non-fatal for our purposes
/**
* extractterms is currently the only query-independent means of introspecting queries but it only reveals
* a list of terms for that query - not the boosts each individual term in that query may or may not have.
* "container" queries such as booleanquery should be unwrapped to get at the boost info held
* in each child element.
* some discussion around this topic here:
* http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208
* unfortunately there seemed to be limited interest in requiring all query objects to implement
* something common which would allow access to child queries so what follows here are query-specific
* implementations for accessing embedded query elements.
*/
private static final void gettermsfrombooleanquery booleanquery query  hashset terms  boolean prohibited  string fieldname
booleanclause queryclauses   query getclauses
for  int i   0  i < queryclauses length  i
if  prohibited    queryclauses getoccur    booleanclause occur must_not
getterms queryclauses getquery    terms  prohibited  fieldname
private static void gettermsfromfilteredquery filteredquery query  hashset terms  boolean prohibited  string fieldname
getterms query getquery   terms prohibited fieldname