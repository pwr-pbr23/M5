package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io serializable
/**
* encapsulates sort criteria for returned hits.
*
* <p>the fields used to determine sort order must be carefully chosen.
* documents must contain a single term in such a field,
* and the value of the term should indicate the document's relative position in
* a given sort order.  the field must be indexed, but should not be tokenized,
* and does not need to be stored (unless you happen to want it back with the
* rest of your document data).  in other words:
*
* <p><code>document.add (new field ("bynumber", integer.tostring(x), field.store.no, field.index.un_tokenized));</code></p>
*
*
* <p><h3>valid types of values</h3>
*
* <p>there are four possible kinds of term values which may be put into
* sorting fields: integers, longs, floats, or strings.  unless
* {@link sortfield sortfield} objects are specified, the type of value
* in the field is determined by parsing the first term in the field.
*
* <p>integer term values should contain only digits and an optional
* preceding negative sign.  values must be base 10 and in the range
* <code>integer.min_value</code> and <code>integer.max_value</code> inclusive.
* documents which should appear first in the sort
* should have low value integers, later documents high values
* (i.e. the documents should be numbered <code>1..n</code> where
* <code>1</code> is the first and <code>n</code> the last).
*
* <p>long term values should contain only digits and an optional
* preceding negative sign.  values must be base 10 and in the range
* <code>long.min_value</code> and <code>long.max_value</code> inclusive.
* documents which should appear first in the sort
* should have low value integers, later documents high values.
*
* <p>float term values should conform to values accepted by
* {@link float float.valueof(string)} (except that <code>nan</code>
* and <code>infinity</code> are not supported).
* documents which should appear first in the sort
* should have low values, later documents high values.
*
* <p>string term values can contain any valid string, but should
* not be tokenized.  the values are sorted according to their
* {@link comparable natural order}.  note that using this type
* of term value has higher memory requirements than the other
* two types.
*
* <p><h3>object reuse</h3>
*
* <p>one of these objects can be
* used multiple times and the sort order changed between usages.
*
* <p>this class is thread safe.
*
* <p><h3>memory usage</h3>
*
* <p>sorting uses of caches of term values maintained by the
* internal hitqueue(s).  the cache is static and contains an integer
* or float array of length <code>indexreader.maxdoc()</code> for each field
* name for which a sort is performed.  in other words, the size of the
* cache in bytes is:
*
* <p><code>4 * indexreader.maxdoc() * (# of different fields actually used to sort)</code>
*
* <p>for string fields, the cache is larger: in addition to the
* above array, the value of every term in the field is kept in memory.
* if there are many unique terms in the field, this could
* be quite large.
*
* <p>note that the size of the cache is not affected by how many
* fields are in the index and <i>might</i> be used to sort - only by
* the ones actually used to sort a result set.
*
* <p>created: feb 12, 2004 10:53:57 am
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
*/
public class sort
implements serializable
/**
* represents sorting by computed relevance. using this sort criteria returns
* the same results as calling
* {@link searcher#search(query) searcher#search()}without a sort criteria,
* only with slightly more overhead.
*/
public static final sort relevance   new sort
/** represents sorting by index order. */
public static final sort indexorder   new sort sortfield field_doc
// internal representation of the sort criteria
sortfield fields
/**
* sorts by computed relevance. this is the same sort criteria as calling
* {@link searcher#search(query) searcher#search()}without a sort criteria,
* only with slightly more overhead.
*/
public sort
this new sortfield   sortfield field_score  sortfield field_doc
/**
* sorts by the terms in <code>field</code> then by index order (document
* number). the type of value in <code>field</code> is determined
* automatically.
*
* @see sortfield#auto
*/
public sort string field
setsort field  false
/**
* sorts possibly in reverse by the terms in <code>field</code> then by
* index order (document number). the type of value in <code>field</code> is
* determined automatically.
*
* @see sortfield#auto
*/
public sort string field  boolean reverse
setsort field  reverse
/**
* sorts in succession by the terms in each field. the type of value in
* <code>field</code> is determined automatically.
*
* @see sortfield#auto
*/
public sort string fields
setsort fields
/** sorts by the criteria in the given sortfield. */
public sort sortfield field
setsort field
/** sorts in succession by the criteria in each sortfield. */
public sort sortfield fields
setsort fields
/**
* sets the sort to the terms in <code>field</code> then by index order
* (document number).
*/
public final void setsort string field
setsort field  false
/**
* sets the sort to the terms in <code>field</code> possibly in reverse,
* then by index order (document number).
*/
public void setsort string field  boolean reverse
sortfield nfields   new sortfield
new sortfield field  sortfield auto  reverse   sortfield field_doc
fields   nfields
/** sets the sort to the terms in each field in succession. */
public void setsort string fieldnames
final int n   fieldnames length
sortfield nfields   new sortfield
for  int i   0  i < n    i
nfields   new sortfield fieldnames  sortfield auto
fields   nfields
/** sets the sort to the given criteria. */
public void setsort sortfield field
this fields   new sortfield   field
/** sets the sort to the given criteria in succession. */
public void setsort sortfield fields
this fields   fields
/**
* representation of the sort criteria.
* @return array of sortfield objects used in this sort criteria
*/
public sortfield getsort
return fields
public string tostring
stringbuffer buffer   new stringbuffer
for  int i   0  i < fields length  i
buffer append fields tostring
if   i 1  < fields length
buffer append
return buffer tostring