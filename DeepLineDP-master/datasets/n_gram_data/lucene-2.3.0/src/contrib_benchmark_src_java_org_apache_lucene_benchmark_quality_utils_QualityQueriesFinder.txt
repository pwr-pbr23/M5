/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene benchmark quality utils
import java io file
import java io ioexception
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index termenum
import org apache lucene store directory
import org apache lucene store fsdirectory
import org apache lucene util priorityqueue
/**
* suggest quality queries based on an index contents.
* utility class, used for making quality test benchmarks.
*/
public class qualityqueriesfinder
private static final string newline   system getproperty
private directory dir
/**
* constrctor over a directory containing the index.
* @param dir directory containing the index we search for the quality test.
*/
private qualityqueriesfinder directory dir
this dir   dir
/**
* @param args {index-dir}
* @throws ioexception  if cannot access the index.
*/
public static void main string args  throws ioexception
if  args length<1
system err println
system exit 1
qualityqueriesfinder qqf   new qualityqueriesfinder fsdirectory getdirectory new file args
string q   qqf bestqueries   20
for  int i 0  i<q length  i
system out println newline formatqueryastrectopic i q null null
private string  bestqueries string field int numqueries  throws ioexception
string words   bestterms   4 numqueries
int n   words length
int m   n 4
string res   new string
for  int i 0  i<res length  i
res   words       words      words        words
//system.out.println("query["+i+"]:  "+res[i]);
return res
private static string formatqueryastrectopic  int qnum  string title  string description  string narrative
return
newline
qnum               newline   newline
title  null?  title    newline   newline
newline
description  null?  description     newline   newline
newline
narrative  null?  narrative         newline   newline
private string  bestterms string field int numterms  throws ioexception
priorityqueue pq   new termsdfqueue numterms
indexreader ir   indexreader open dir
try
int threshold   ir maxdoc     10     ignore words too common
termenum terms   ir terms new term field
while  terms next
if   field equals terms term   field
break
int df   terms docfreq
if  df<threshold
string ttxt   terms term   text
pq insert new termdf ttxt df
finally
ir close
string res   new string
int i   0
while  pq size  >0
termdf tdf    termdf  pq pop
res   tdf word
system out println i   tdf df   tdf word
return res
private static class termdf
string word
int df
termdf  string word  int freq
this word   word
this df   freq
private static class termsdfqueue extends priorityqueue
termsdfqueue  int maxsize
initialize maxsize
protected boolean lessthan object a  object b
termdf tf1    termdf  a
termdf tf2    termdf  b
return tf1 df < tf2 df