package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** a scorer for queries with a required subscorer and an excluding (prohibited) subscorer.
* <br>
* this <code>scorer</code> implements {@link scorer#skipto(int)},
* and it uses the skipto() on the given scorers.
*/
public class reqexclscorer extends scorer
private scorer reqscorer  exclscorer
/** construct a <code>reqexclscorer</code>.
* @param reqscorer the scorer that must match, except where
* @param exclscorer indicates exclusion.
*/
public reqexclscorer
scorer reqscorer
scorer exclscorer
super null      no similarity used
this reqscorer   reqscorer
this exclscorer   exclscorer
private boolean firsttime   true
public boolean next   throws ioexception
if  firsttime
if    exclscorer next
exclscorer   null     exhausted at start
firsttime   false
if  reqscorer    null
return false
if    reqscorer next
reqscorer   null     exhausted  nothing left
return false
if  exclscorer    null
return true     reqscorer next   already returned true
return tononexcluded
/** advance to non excluded doc.
* <br>on entry:
* <ul>
* <li>reqscorer != null,
* <li>exclscorer != null,
* <li>reqscorer was advanced once via next() or skipto()
*      and reqscorer.doc() may still be excluded.
* </ul>
* advances reqscorer a non excluded required doc, if any.
* @return true iff there is a non excluded required doc.
*/
private boolean tononexcluded   throws ioexception
int excldoc   exclscorer doc
do
int reqdoc   reqscorer doc       may be excluded
if  reqdoc < excldoc
return true     reqscorer advanced to before exclscorer  ie  not excluded
else if  reqdoc > excldoc
if    exclscorer skipto reqdoc
exclscorer   null     exhausted  no more exclusions
return true
excldoc   exclscorer doc
if  excldoc > reqdoc
return true     not excluded
while  reqscorer next
reqscorer   null     exhausted  nothing left
return false
public int doc
return reqscorer doc       reqscorer may be null when next   or skipto   already return false
/** returns the score of the current document matching the query.
* initially invalid, until {@link #next()} is called the first time.
* @return the score of the required scorer.
*/
public float score   throws ioexception
return reqscorer score       reqscorer may be null when next   or skipto   already return false
/** skips to the first match beyond the current whose document number is
* greater than or equal to a given target.
* <br>when this method is used the {@link #explain(int)} method should not be used.
* @param target the target document number.
* @return true iff there is such a match.
*/
public boolean skipto int target  throws ioexception
if  firsttime
firsttime   false
if    exclscorer skipto target
exclscorer   null     exhausted
if  reqscorer    null
return false
if  exclscorer    null
return reqscorer skipto target
if    reqscorer skipto target
reqscorer   null
return false
return tononexcluded
public explanation explain int doc  throws ioexception
explanation res   new explanation
if  exclscorer skipto doc      exclscorer doc      doc
res setdescription
else
res setdescription
res adddetail reqscorer explain doc
return res