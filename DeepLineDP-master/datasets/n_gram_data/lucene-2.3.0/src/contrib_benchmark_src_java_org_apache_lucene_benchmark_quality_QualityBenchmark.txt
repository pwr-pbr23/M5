/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene benchmark quality
import java io ioexception
import java io printwriter
import org apache lucene benchmark quality utils docnameextractor
import org apache lucene benchmark quality utils submissionreport
import org apache lucene search query
import org apache lucene search scoredoc
import org apache lucene search searcher
import org apache lucene search topdocs
/**
* main entry point for running a quality benchmark.
* <p>
* there are two main configurations for running a quality benchmark: <ul>
* <li>against existing judgements.</li>
* <li>for submission (e.g. for a contest).</li>
* </ul>
* the first configuration requires a non null
* {@link org.apache.lucene.benchmark.quality.judge judge}.
* the second configuration requires a non null
* {@link org.apache.lucene.benchmark.quality.utils.submissionreport submissionlogger}.
*/
public class qualitybenchmark
/** quality queries that this quality benchmark would execute. */
protected qualityquery qualityqueries
/** parser for turning qualityqueries into lucene queries. */
protected qualityqueryparser qqparser
/** index to be searched. */
protected searcher searcher
/** index field to extract doc name for each search result; used for judging the results. */
protected string docnamefield
/** maximal number of queries that this quality benchmark runs. default: maxint. useful for debugging. */
private int maxqueries   integer max_value
/** maximal number of results to collect for each query. default: 1000. */
private int maxresults   1000
/**
* create a qualitybenchmark.
* @param qqs quality queries to run.
* @param qqparser parser for turning qualityqueries into lucene queries.
* @param searcher index to be searched.
* @param docnamefield name of field containg the document name.
*        this allows to extract the doc name for search results,
*        and is important for judging the results.
*/
public qualitybenchmark qualityquery qqs  qualityqueryparser qqparser
searcher searcher  string docnamefield
this qualityqueries   qqs
this qqparser   qqparser
this searcher   searcher
this docnamefield   docnamefield
/**
* run the quality benchmark.
* @param judge the judge that can tell if a certain result doc is relevant for a certain quality query.
*        if null, no judgements would be made. usually null for a submission run.
* @param submitrep submission report is created if non null.
* @param qualitylog if not null, quality run data would be printed for each query.
* @return qualitystats of each quality query that was executed.
* @throws exception if quality benchmark failed to run.
*/
public  qualitystats  execute judge judge  submissionreport submitrep
printwriter qualitylog  throws exception
int nqueries   math min maxqueries  qualityqueries length
qualitystats stats   new qualitystats
for  int i 0  i<nqueries  i
qualityquery qq   qualityqueries
// generate query
query q   qqparser parse qq
// search with this query
long t1   system currenttimemillis
topdocs td   searcher search q null maxresults
long searchtime   system currenttimemillis   t1
//most likely we either submit or judge, but check both
if  judge  null
stats   analyzequeryresults qq  q  td  judge  qualitylog  searchtime
if  submitrep  null
submitrep report qq td docnamefield searcher
if  submitrep  null
submitrep flush
return stats
/* analyze/judge results for a single quality query; optionally log them. */
private qualitystats analyzequeryresults qualityquery qq  query q  topdocs td  judge judge  printwriter logger  long searchtime  throws ioexception
qualitystats stts   new qualitystats judge maxrecall qq  searchtime
scoredoc sd   td scoredocs
long t1   system currenttimemillis       extraction of first doc name we meassure also construction of doc name extractor  just in case
docnameextractor xt   new docnameextractor docnamefield
for  int i 0  i<sd length  i
string docname   xt docname searcher sd doc
long docnameextracttime   system currenttimemillis     t1
t1   system currenttimemillis
boolean isrelevant   judge isrelevant docname qq
stts addresult i 1 isrelevant  docnameextracttime
if  logger  null
logger println qq getqueryid     q
stts log qq getqueryid     1 logger
return stts
/**
* @return the maximum number of quality queries to run. useful at debugging.
*/
public int getmaxqueries
return maxqueries
/**
* set the maximum number of quality queries to run. useful at debugging.
*/
public void setmaxqueries int maxqueries
this maxqueries   maxqueries
/**
* @return the maximum number of results to collect for each quality query.
*/
public int getmaxresults
return maxresults
/**
* set the maximum number of results to collect for each quality query.
*/
public void setmaxresults int maxresults
this maxresults   maxresults