package org apache lucene analysis nl
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util map
/**
*
* a stemmer for dutch words. the algorithm is an implementation of
* the <a href="http://snowball.tartarus.org/algorithms/dutch/stemmer.html">dutch stemming</a>
* algorithm in martin porter's snowball project.
*
* @author edwin de jonge (ejne at cbs.nl)
*/
public class dutchstemmer
/**
* buffer for the terms while stemming them.
*/
private stringbuffer sb   new stringbuffer
private boolean _removede
private map _stemdict
private int _r1
private int _r2
//todo convert to internal
/*
* stemms the given term to an unique <tt>discriminator</tt>.
*
* @param term the term that should be stemmed.
* @return discriminator for <tt>term</tt>
*/
public string stem string term
term   term tolowercase
if   isstemmable term
return term
if  _stemdict    null    _stemdict containskey term
if  _stemdict get term  instanceof string
return  string  _stemdict get term
else
return null
// reset the stringbuffer.
sb delete 0  sb length
sb insert 0  term
// stemming starts here...
substitute sb
storeyandi sb
_r1   getrindex sb  0
_r1   math max 3  _r1
step1 sb
step2 sb
_r2   getrindex sb  _r1
step3a sb
step3b sb
step4 sb
restoreyandi sb
return sb tostring
private boolean enending stringbuffer sb
string enend   new string
for  int i   0  i < enend length  i
string end   enend
string s   sb tostring
int index   s length     end length
if  s endswith end
index >  _r1
isvalidenending sb  index   1
sb delete index  index   end length
undouble sb  index
return true
return false
private void step1 stringbuffer sb
if  _r1 >  sb length
return
string s   sb tostring
int lengthr1   sb length     _r1
int index
if  s endswith
sb replace _r1  lengthr1   _r1  sb substring _r1  lengthr1   _r1  replaceall
return
if  enending sb
return
if  s endswith
index   s length     2  >  _r1
isvalidsending sb  index   1
sb delete index  index   2
return
if  s endswith
index   s length     1  >  _r1
isvalidsending sb  index   1
sb delete index  index   1
/**
* delete suffix e if in r1 and
* preceded by a non-vowel, and then undouble the ending
*
* @param sb string being stemmed
*/
private void step2 stringbuffer sb
_removede   false
if  _r1 >  sb length
return
string s   sb tostring
int index   s length     1
if  index >  _r1
s endswith
isvowel sb charat index   1
sb delete index  index   1
undouble sb
_removede   true
/**
* delete "heid"
*
* @param sb string being stemmed
*/
private void step3a stringbuffer sb
if  _r2 >  sb length
return
string s   sb tostring
int index   s length     4
if  s endswith       index >  _r2    sb charat index   1
sb delete index  index   4     remove heid
enending sb
/**
* <p>a d-suffix, or derivational suffix, enables a new word,
* often with a different grammatical category, or with a different
* sense, to be built from another word. whether a d-suffix can be
* attached is discovered not from the rules of grammar, but by
* referring to a dictionary. so in english, ness can be added to
* certain adjectives to form corresponding nouns (littleness,
* kindness, foolishness ...) but not to all adjectives
* (not for example, to big, cruel, wise ...) d-suffixes can be
* used to change meaning, often in rather exotic ways.</p>
* remove "ing", "end", "ig", "lijk", "baar" and "bar"
*
* @param sb string being stemmed
*/
private void step3b stringbuffer sb
if  _r2 >  sb length
return
string s   sb tostring
int index   0
if   s endswith       s endswith
index   s length     3  >  _r2
sb delete index  index   3
if  sb charat index   2
sb charat index   1
if  sb charat index   3         index   2 >  _r2
index    2
sb delete index  index   2
else
undouble sb  index
return
if  s endswith
index   s length     2  >  _r2
if  sb charat index   1
sb delete index  index   2
return
if  s endswith
index   s length     4  >  _r2
sb delete index  index   4
step2 sb
return
if  s endswith
index   s length     4  >  _r2
sb delete index  index   4
return
if  s endswith
index   s length     3  >  _r2
if  _removede
sb delete index  index   3
return
/**
* undouble vowel
* if the words ends cvd, where c is a non-vowel, d is a non-vowel other than i, and v is double a, e, o or u, remove one of the vowels from v (for example, maan -> man, brood -> brod).
*
* @param sb string being stemmed
*/
private void step4 stringbuffer sb
if  sb length   < 4
return
string end   sb substring sb length     4  sb length
char c   end charat 0
char v1   end charat 1
char v2   end charat 2
char d   end charat 3
if  v1    v2
d
v1
isvowel v1
isvowel d
isvowel c
sb delete sb length     2  sb length     1
/**
* checks if a term could be stemmed.
*
* @return true if, and only if, the given term consists in letters.
*/
private boolean isstemmable string term
for  int c   0  c < term length    c
if   character isletter term charat c    return false
return true
/**
* substitute ãâ¤, ãâ«, ãâ¯, ãâ¶, ãâ¼, ãâ¡ , ãâ©, ãâ­, ãâ³, ãâº
*/
private void substitute stringbuffer buffer
for  int i   0  i < buffer length    i
switch  buffer charat i
case
case
buffer setcharat i
break
case
case
buffer setcharat i
break
case
case
buffer setcharat i
break
case
case
buffer setcharat i
break
case
case
buffer setcharat i
break
/*private boolean isvalidsending(stringbuffer sb) {
return isvalidsending(sb, sb.length() - 1);
}*/
private boolean isvalidsending stringbuffer sb  int index
char c   sb charat index
if  isvowel c     c
return false
return true
/*private boolean isvalidenending(stringbuffer sb) {
return isvalidenending(sb, sb.length() - 1);
}*/
private boolean isvalidenending stringbuffer sb  int index
char c   sb charat index
if  isvowel c
return false
if  c < 3
return false
// ends with "gem"?
if  c         sb charat index   2          sb charat index   1
return false
return true
private void undouble stringbuffer sb
undouble sb  sb length
private void undouble stringbuffer sb  int endindex
string s   sb substring 0  endindex
if  s endswith       s endswith       s endswith       s endswith       s endswith       s endswith
sb delete endindex   1  endindex
private int getrindex stringbuffer sb  int start
if  start    0
start   1
int i   start
for    i < sb length    i
//first non-vowel preceded by a vowel
if   isvowel sb charat i      isvowel sb charat i   1
return i   1
return i   1
private void storeyandi stringbuffer sb
if  sb charat 0
sb setcharat 0
int last   sb length     1
for  int i   1  i < last  i
switch  sb charat i
case
if  isvowel sb charat i   1
isvowel sb charat i   1
sb setcharat i
break
case
if  isvowel sb charat i   1
sb setcharat i
break
if  last > 0    sb charat last          isvowel sb charat last   1
sb setcharat last
private void restoreyandi stringbuffer sb
string tmp   sb tostring
sb delete 0  sb length
sb insert 0  tmp replaceall       replaceall
private boolean isvowel char c
switch  c
case
case
case
case
case
case
case
return true
return false
void setstemdictionary map dict
_stemdict   dict