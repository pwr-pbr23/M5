package org apache lucene analysis cn
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io reader
import org apache lucene analysis
/**
* title: chinesetokenizer
* description: extract tokens from the stream using character.gettype()
*              rule: a chinese character as a single token
* copyright:   copyright (c) 2001
* company:
*
* the difference between thr chinesetokenizer and the
* cjktokenizer (id=23545) is that they have different
* token parsing logic.
*
* let me use an example. if having a chinese text
* "c1c2c3c4" to be indexed, the tokens returned from the
* chinesetokenizer are c1, c2, c3, c4. and the tokens
* returned from the cjktokenizer are c1c2, c2c3, c3c4.
*
* therefore the index the cjktokenizer created is much
* larger.
*
* the problem is that when searching for c1, c1c2, c1c3,
* c4c2, c1c2c3 ... the chinesetokenizer works, but the
* cjktokenizer will not work.
*
* @author yiyi sun
* @version 1.0
*
*/
public final class chinesetokenizer extends tokenizer
public chinesetokenizer reader in
input   in
private int offset   0  bufferindex 0  datalen 0
private final static int max_word_len   255
private final static int io_buffer_size   1024
private final char buffer   new char
private final char iobuffer   new char
private int length
private int start
private final void push char c
if  length    0  start   offset 1                start of token
buffer   character tolowercase c       buffer it
private final token flush
if  length>0
//system.out.println(new string(buffer, 0, length));
return new token new string buffer  0  length   start  start length
else
return null
public final token next   throws java io ioexception
length   0
start   offset
while  true
final char c
offset
if  bufferindex >  datalen
datalen   input read iobuffer
bufferindex   0
if  datalen     1  return flush
else
c   iobuffer
switch character gettype c
case character decimal_digit_number
case character lowercase_letter
case character uppercase_letter
push c
if  length    max_word_len  return flush
break
case character other_letter
if  length>0
bufferindex
offset
return flush
push c
return flush
default
if  length>0  return flush
break