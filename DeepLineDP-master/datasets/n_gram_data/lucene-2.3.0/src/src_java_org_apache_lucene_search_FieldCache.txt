package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import java io ioexception
/**
* expert: maintains caches of term values.
*
* <p>created: may 19, 2004 11:13:14 am
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
*/
public interface fieldcache
/** indicator for stringindex values in the cache. */
// note: the value assigned to this constant must not be
// the same as any of those in sortfield!!
public static final int string_index    1
/** expert: stores term text values and document ordering data. */
public static class stringindex
/** all the term values, in natural order. */
public final string lookup
/** for each document, an index into the lookup array. */
public final int order
/** creates one of these objects */
public stringindex  int values  string lookup
this order   values
this lookup   lookup
/** interface to parse bytes from document fields.
* @see fieldcache#getbytes(indexreader, string, fieldcache.byteparser)
*/
public interface byteparser
/** return a single byte representation of this field's value. */
public byte parsebyte string string
/** interface to parse shorts from document fields.
* @see fieldcache#getshorts(indexreader, string, fieldcache.shortparser)
*/
public interface shortparser
/** return a short representation of this field's value. */
public short parseshort string string
/** interface to parse ints from document fields.
* @see fieldcache#getints(indexreader, string, fieldcache.intparser)
*/
public interface intparser
/** return an integer representation of this field's value. */
public int parseint string string
/** interface to parse floats from document fields.
* @see fieldcache#getfloats(indexreader, string, fieldcache.floatparser)
*/
public interface floatparser
/** return an float representation of this field's value. */
public float parsefloat string string
/** expert: the cache used internally by sorting and range query classes. */
public static fieldcache default   new fieldcacheimpl
/** checks the internal cache for an appropriate entry, and if none is
* found, reads the terms in <code>field</code> as a single byte and returns an array
* of size <code>reader.maxdoc()</code> of the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the single byte values.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public byte getbytes  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if none is found,
* reads the terms in <code>field</code> as bytes and returns an array of
* size <code>reader.maxdoc()</code> of the value each document has in the
* given field.
* @param reader  used to get field values.
* @param field   which field contains the bytes.
* @param parser  computes byte for string values.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public byte getbytes  indexreader reader  string field  byteparser parser
throws ioexception
/** checks the internal cache for an appropriate entry, and if none is
* found, reads the terms in <code>field</code> as shorts and returns an array
* of size <code>reader.maxdoc()</code> of the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the shorts.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public short getshorts  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if none is found,
* reads the terms in <code>field</code> as shorts and returns an array of
* size <code>reader.maxdoc()</code> of the value each document has in the
* given field.
* @param reader  used to get field values.
* @param field   which field contains the shorts.
* @param parser  computes short for string values.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public short getshorts  indexreader reader  string field  shortparser parser
throws ioexception
/** checks the internal cache for an appropriate entry, and if none is
* found, reads the terms in <code>field</code> as integers and returns an array
* of size <code>reader.maxdoc()</code> of the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the integers.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public int getints  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if none is found,
* reads the terms in <code>field</code> as integers and returns an array of
* size <code>reader.maxdoc()</code> of the value each document has in the
* given field.
* @param reader  used to get field values.
* @param field   which field contains the integers.
* @param parser  computes integer for string values.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public int getints  indexreader reader  string field  intparser parser
throws ioexception
/** checks the internal cache for an appropriate entry, and if
* none is found, reads the terms in <code>field</code> as floats and returns an array
* of size <code>reader.maxdoc()</code> of the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the floats.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public float getfloats  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if
* none is found, reads the terms in <code>field</code> as floats and returns an array
* of size <code>reader.maxdoc()</code> of the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the floats.
* @param parser  computes float for string values.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public float getfloats  indexreader reader  string field
floatparser parser  throws ioexception
/** checks the internal cache for an appropriate entry, and if none
* is found, reads the term values in <code>field</code> and returns an array
* of size <code>reader.maxdoc()</code> containing the value each document
* has in the given field.
* @param reader  used to get field values.
* @param field   which field contains the strings.
* @return the values in the given field for each document.
* @throws ioexception  if any error occurs.
*/
public string getstrings  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if none
* is found reads the term values in <code>field</code> and returns
* an array of them in natural order, along with an array telling
* which element in the term array each document uses.
* @param reader  used to get field values.
* @param field   which field contains the strings.
* @return array of terms and index into the array for each document.
* @throws ioexception  if any error occurs.
*/
public stringindex getstringindex  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if
* none is found reads <code>field</code> to see if it contains integers, floats
* or strings, and then calls one of the other methods in this class to get the
* values.  for string values, a stringindex is returned.  after
* calling this method, there is an entry in the cache for both
* type <code>auto</code> and the actual found type.
* @param reader  used to get field values.
* @param field   which field contains the values.
* @return int[], float[] or stringindex.
* @throws ioexception  if any error occurs.
*/
public object getauto  indexreader reader  string field
throws ioexception
/** checks the internal cache for an appropriate entry, and if none
* is found reads the terms out of <code>field</code> and calls the given sortcomparator
* to get the sort values.  a hit in the cache will happen if <code>reader</code>,
* <code>field</code>, and <code>comparator</code> are the same (using <code>equals()</code>)
* as a previous call to this method.
* @param reader  used to get field values.
* @param field   which field contains the values.
* @param comparator used to convert terms into something to sort by.
* @return array of sort objects, one for each document.
* @throws ioexception  if any error occurs.
*/
public comparable getcustom  indexreader reader  string field  sortcomparator comparator
throws ioexception