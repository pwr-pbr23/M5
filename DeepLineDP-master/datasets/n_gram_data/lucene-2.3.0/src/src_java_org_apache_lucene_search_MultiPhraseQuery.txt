package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util
import org apache lucene index indexreader
import org apache lucene index multipletermpositions
import org apache lucene index term
import org apache lucene index termpositions
import org apache lucene search query
import org apache lucene util tostringutils
/**
* multiphrasequery is a generalized version of phrasequery, with an added
* method {@link #add(term[])}.
* to use this class, to search for the phrase "microsoft app*" first use
* add(term) on the term "microsoft", then find all terms that have "app" as
* prefix using indexreader.terms(term), and use multiphrasequery.add(term[]
* terms) to add them to the query.
*
* @author anders nielsen
* @version 1.0
*/
public class multiphrasequery extends query
private string field
private arraylist termarrays   new arraylist
private vector positions   new vector
private int slop   0
/** sets the phrase slop for this query.
* @see phrasequery#setslop(int)
*/
public void setslop int s    slop   s
/** sets the phrase slop for this query.
* @see phrasequery#getslop()
*/
public int getslop     return slop
/** add a single term at the next position in the phrase.
* @see phrasequery#add(term)
*/
public void add term term    add new term term
/** add multiple terms at the next position in the phrase.  any of the terms
* may match.
*
* @see phrasequery#add(term)
*/
public void add term terms
int position   0
if  positions size   > 0
position     integer  positions lastelement    intvalue     1
add terms  position
/**
* allows to specify the relative position of terms within the phrase.
*
* @see phrasequery#add(term, int)
* @param terms
* @param position
*/
public void add term terms  int position
if  termarrays size      0
field   terms field
for  int i   0  i < terms length  i
if  terms field      field
throw new illegalargumentexception
field
terms
termarrays add terms
positions addelement new integer position
/**
* returns a list<term[]> of the terms in the multiphrase.
* do not modify the list or its contents.
*/
public list gettermarrays
return collections unmodifiablelist termarrays
/**
* returns the relative positions of terms in this phrase.
*/
public int getpositions
int result   new int
for  int i   0  i < positions size    i
result     integer  positions elementat i   intvalue
return result
// inherit javadoc
public void extractterms set terms
for  iterator iter   termarrays iterator    iter hasnext
term arr    term iter next
for  int i 0  i<arr length  i
terms add arr
private class multiphraseweight implements weight
private similarity similarity
private float value
private float idf
private float querynorm
private float queryweight
public multiphraseweight searcher searcher
throws ioexception
this similarity   getsimilarity searcher
// compute idf
iterator i   termarrays iterator
while  i hasnext
term terms    term i next
for  int j 0  j<terms length  j
idf    getsimilarity searcher  idf terms  searcher
public query getquery     return multiphrasequery this
public float getvalue     return value
public float sumofsquaredweights
queryweight   idf   getboost                   compute query weight
return queryweight   queryweight               square it
public void normalize float querynorm
this querynorm   querynorm
queryweight    querynorm                       normalize query weight
value   queryweight   idf                      idf for document
public scorer scorer indexreader reader  throws ioexception
if  termarrays size      0                      optimize zero term case
return null
termpositions tps   new termpositions
for  int i 0  i<tps length  i
term terms    term termarrays get i
termpositions p
if  terms length > 1
p   new multipletermpositions reader  terms
else
p   reader termpositions terms
if  p    null
return null
tps   p
if  slop    0
return new exactphrasescorer this  tps  getpositions    similarity
reader norms field
else
return new sloppyphrasescorer this  tps  getpositions    similarity
slop  reader norms field
public explanation explain indexreader reader  int doc
throws ioexception
complexexplanation result   new complexexplanation
result setdescription   getquery     doc
explanation idfexpl   new explanation idf    getquery
// explain query weight
explanation queryexpl   new explanation
queryexpl setdescription     getquery
explanation boostexpl   new explanation getboost
if  getboost      1 0f
queryexpl adddetail boostexpl
queryexpl adddetail idfexpl
explanation querynormexpl   new explanation querynorm
queryexpl adddetail querynormexpl
queryexpl setvalue boostexpl getvalue
idfexpl getvalue
querynormexpl getvalue
result adddetail queryexpl
// explain field weight
complexexplanation fieldexpl   new complexexplanation
fieldexpl setdescription   getquery     doc
explanation tfexpl   scorer reader  explain doc
fieldexpl adddetail tfexpl
fieldexpl adddetail idfexpl
explanation fieldnormexpl   new explanation
byte fieldnorms   reader norms field
float fieldnorm
fieldnorms  null ? similarity decodenorm fieldnorms    0 0f
fieldnormexpl setvalue fieldnorm
fieldnormexpl setdescription   field   doc
fieldexpl adddetail fieldnormexpl
fieldexpl setmatch boolean valueof tfexpl ismatch
fieldexpl setvalue tfexpl getvalue
idfexpl getvalue
fieldnormexpl getvalue
result adddetail fieldexpl
result setmatch fieldexpl getmatch
// combine them
result setvalue queryexpl getvalue     fieldexpl getvalue
if  queryexpl getvalue      1 0f
return fieldexpl
return result
public query rewrite indexreader reader
if  termarrays size      1                       optimize one term case
term terms    term termarrays get 0
booleanquery boq   new booleanquery true
for  int i 0  i<terms length  i
boq add new termquery terms   booleanclause occur should
boq setboost getboost
return boq
else
return this
protected weight createweight searcher searcher  throws ioexception
return new multiphraseweight searcher
/** prints a user-readable version of this query. */
public final string tostring string f
stringbuffer buffer   new stringbuffer
if   field equals f
buffer append field
buffer append
buffer append  "
iterator i   termarrays iterator
while  i hasnext
term terms    term i next
if  terms length > 1
buffer append
for  int j   0  j < terms length  j
buffer append terms text
if  j < terms length 1
buffer append
buffer append
else
buffer append terms text
if  i hasnext
buffer append
buffer append  "
if  slop    0
buffer append
buffer append slop
buffer append tostringutils boost getboost
return buffer tostring
/** returns true if <code>o</code> is equal to this. */
public boolean equals object o
if    o instanceof multiphrasequery   return false
multiphrasequery other    multiphrasequery o
return this getboost      other getboost
this slop    other slop
this termarrays equals other termarrays
this positions equals other positions
/** returns a hash code value for this object.*/
public int hashcode
return float floattointbits getboost
^ slop
^ termarrays hashcode
^ positions hashcode
^ 0x4ac65113