package org apache lucene benchmark bytask tasks
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene benchmark bytask perfrundata
import org apache lucene benchmark bytask feeds querymaker
import org apache lucene document document
import org apache lucene index indexreader
import org apache lucene search hits
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene store directory
import java io ioexception
/**
* read index (abstract) task.
* sub classes implement withsearch(), withwarm(), withtraverse() and withretrieve()
* methods to configure the actual action.
*
* <p>note: all readtasks reuse the reader if it is already open.
* otherwise a reader is opened at start and closed at the end.
*
* <p>other side effects: none.
*/
public abstract class readtask extends perftask
public readtask perfrundata rundata
super rundata
public int dologic   throws exception
int res   0
boolean closereader   false
// open reader or use existing one
indexreader ir   getrundata   getindexreader
if  ir    null
directory dir   getrundata   getdirectory
ir   indexreader open dir
closereader   true
//res++; //this is confusing, comment it out
// optionally warm and add num docs traversed to count
if  withwarm
document doc   null
for  int m   0  m < ir maxdoc    m
if   ir isdeleted m
doc   ir document m
res     doc  null ? 0   1
if  withsearch
res
indexsearcher searcher   new indexsearcher ir
querymaker querymaker   getquerymaker
query q   querymaker makequery
hits hits   searcher search q
//system.out.println("searched: "+q);
if  withtraverse      hits  null
int traversalsize   math min hits length    traversalsize
if  traversalsize > 0
boolean retrieve   withretrieve
for  int m   0  m < hits length    m
int id   hits id m
res
if  retrieve
res    retrievedoc ir  id
searcher close
if  closereader
ir close
return res
protected int retrievedoc indexreader ir  int id  throws ioexception
return  ir document id     null ? 0   1
/**
* return query maker used for this task.
*/
public abstract querymaker getquerymaker
/**
* return true if search should be performed.
*/
public abstract boolean withsearch
/**
* return true if warming should be performed.
*/
public abstract boolean withwarm
/**
* return true if, with search, results should be traversed.
*/
public abstract boolean withtraverse
/**
* specify the number of hits to traverse.  tasks should override this if they want to restrict the number
* of hits that are traversed when {@link #withtraverse()} is true. must be greater than 0.
*
* read task calculates the traversal as: math.min(hits.length(), traversalsize())
* @return integer.max_value
*/
public int traversalsize
return integer max_value
/**
* return true if, with search & results traversing, docs should be retrieved.
*/
public abstract boolean withretrieve