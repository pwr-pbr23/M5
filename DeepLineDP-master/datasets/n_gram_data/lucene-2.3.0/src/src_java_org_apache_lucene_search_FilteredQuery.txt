package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene util tostringutils
import java io ioexception
import java util bitset
import java util set
/**
* a query that applies a filter to the results of another query.
*
* <p>note: the bits are retrieved from the filter each time this
* query is used in a search - use a cachingwrapperfilter to avoid
* regenerating the bits every time.
*
* <p>created: apr 20, 2004 8:58:29 am
*
* @author  tim jones
* @since   1.4
* @version $id$
* @see     cachingwrapperfilter
*/
public class filteredquery
extends query
query query
filter filter
/**
* constructs a new query which applies a filter to the results of the original query.
* filter.bits() will be called every time this query is used in a search.
* @param query  query to be filtered, cannot be <code>null</code>.
* @param filter filter to apply to query results, cannot be <code>null</code>.
*/
public filteredquery  query query  filter filter
this query   query
this filter   filter
/**
* returns a weight that applies the filter to the enclosed query's weight.
* this is accomplished by overriding the scorer returned by the weight.
*/
protected weight createweight  final searcher searcher  throws ioexception
final weight weight   query createweight  searcher
final similarity similarity   query getsimilarity searcher
return new weight
private float value
// pass these methods through to enclosed query's weight
public float getvalue     return value
public float sumofsquaredweights   throws ioexception
return weight sumofsquaredweights     getboost     getboost
public void normalize  float v
weight normalize v
value   weight getvalue     getboost
public explanation explain  indexreader ir  int i  throws ioexception
explanation inner   weight explain  ir  i
if  getboost    1
explanation preboost   inner
inner   new explanation inner getvalue   getboost
inner adddetail new explanation getboost
inner adddetail preboost
filter f   filteredquery this filter
bitset matches   f bits ir
if  matches get i
return inner
explanation result   new explanation
0 0f      f tostring
result adddetail inner
return result
// return this query
public query getquery     return filteredquery this
// return a filtering scorer
public scorer scorer  indexreader indexreader  throws ioexception
final scorer scorer   weight scorer  indexreader
final bitset bitset   filter bits  indexreader
return new scorer  similarity
public boolean next   throws ioexception
do
if    scorer next
return false
while    bitset get scorer doc
/* when skipto() is allowed on scorer it should be used here
* in combination with bitset.nextsetbit(...)
* see the while loop in skipto() below.
*/
return true
public int doc     return scorer doc
public boolean skipto int i  throws ioexception
if    scorer skipto i
return false
while    bitset get scorer doc
int nextfiltered   bitset nextsetbit scorer doc     1
if  nextfiltered     1
return false
else if    scorer skipto nextfiltered
return false
return true
public float score   throws ioexception   return getboost     scorer score
// add an explanation about whether the document was filtered
public explanation explain  int i  throws ioexception
explanation exp   scorer explain  i
exp setvalue getboost     exp getvalue
if  bitset get i
exp setdescription    exp getdescription
else
exp setdescription    exp getdescription
return exp
/** rewrites the wrapped query. */
public query rewrite indexreader reader  throws ioexception
query rewritten   query rewrite reader
if  rewritten    query
filteredquery clone    filteredquery this clone
clone query   rewritten
return clone
else
return this
public query getquery
return query
public filter getfilter
return filter
// inherit javadoc
public void extractterms set terms
getquery   extractterms terms
/** prints a user-readable version of this query. */
public string tostring  string s
stringbuffer buffer   new stringbuffer
buffer append
buffer append query tostring s
buffer append
buffer append filter
buffer append tostringutils boost getboost
return buffer tostring
/** returns true iff <code>o</code> is equal to this. */
public boolean equals object o
if  o instanceof filteredquery
filteredquery fq    filteredquery  o
return  query equals fq query     filter equals fq filter     getboost    fq getboost
return false
/** returns a hash code value for this object. */
public int hashcode
return query hashcode   ^ filter hashcode     float floattorawintbits getboost