// fastcharstream.java
package org apache lucene queryparser
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io
/** an efficient implementation of javacc's charstream interface.  <p>note that
* this does not do line-number counting, but instead keeps track of the
* character position of the token in the input, as required by lucene's {@link
* org.apache.lucene.analysis.token} api. */
public final class fastcharstream implements charstream
char buffer   null
int bufferlength   0 				     end of valid chars
int bufferposition   0 			     next char to read
int tokenstart   0 				     offset in buffer
int bufferstart   0 				     position in file of buffer
reader input 					     source of chars
/** constructs from a reader. */
public fastcharstream reader r
input   r
public final char readchar   throws ioexception
if  bufferposition >  bufferlength
refill
return buffer
private final void refill   throws ioexception
int newposition   bufferlength   tokenstart
if  tokenstart    0   			     token won't fit in buffer
if  buffer    null   			     first time  alloc buffer
buffer   new char
else if  bufferlength    buffer length       grow buffer
char newbuffer   new char
system arraycopy buffer  0  newbuffer  0  bufferlength
buffer   newbuffer
else  					     shift token to front
system arraycopy buffer  tokenstart  buffer  0  newposition
bufferlength   newposition 			     update state
bufferposition   newposition
bufferstart    tokenstart
tokenstart   0
int charsread  				     fill space in buffer
input read buffer  newposition  buffer length newposition
if  charsread     1
throw new ioexception
else
bufferlength    charsread
public final char begintoken   throws ioexception
tokenstart   bufferposition
return readchar
public final void backup int amount
bufferposition    amount
public final string getimage
return new string buffer  tokenstart  bufferposition   tokenstart
public final char getsuffix int len
char value   new char
system arraycopy buffer  bufferposition   len  value  0  len
return value
public final void done
try
input close
catch  ioexception e
system err println     e
public final int getcolumn
return bufferstart   bufferposition
public final int getline
return 1
public final int getendcolumn
return bufferstart   bufferposition
public final int getendline
return 1
public final int getbegincolumn
return bufferstart   tokenstart
public final int getbeginline
return 1