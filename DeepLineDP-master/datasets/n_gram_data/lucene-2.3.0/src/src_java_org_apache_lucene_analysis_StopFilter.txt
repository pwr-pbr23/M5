package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arrays
import java util set
/**
* removes stop words from a token stream.
*/
public final class stopfilter extends tokenfilter
private static boolean enable_position_increments_default   false
private final chararrayset stopwords
private boolean enablepositionincrements   enable_position_increments_default
/**
* construct a token stream filtering the given input.
*/
public stopfilter tokenstream input  string  stopwords
this input  stopwords  false
/**
* constructs a filter which removes words from the input
* tokenstream that are named in the array of words.
*/
public stopfilter tokenstream in  string stopwords  boolean ignorecase
super in
this stopwords    chararrayset makestopset stopwords  ignorecase
/**
* construct a token stream filtering the given input.
* if <code>stopwords</code> is an instance of {@link chararrayset} (true if
* <code>makestopset()</code> was used to construct the set) it will be directly used
* and <code>ignorecase</code> will be ignored since <code>chararrayset</code>
* directly controls case sensitivity.
* <p/>
* if <code>stopwords</code> is not an instance of {@link chararrayset},
* a new chararrayset will be constructed and <code>ignorecase</code> will be
* used to specify the case sensitivity of that set.
*
* @param input
* @param stopwords the set of stop words.
* @param ignorecase -ignore case when stopping.
*/
public stopfilter tokenstream input  set stopwords  boolean ignorecase
super input
if  stopwords instanceof chararrayset
this stopwords    chararrayset stopwords
else
this stopwords   new chararrayset stopwords size    ignorecase
this stopwords addall stopwords
/**
* constructs a filter which removes words from the input
* tokenstream that are named in the set.
*
* @see #makestopset(java.lang.string[])
*/
public stopfilter tokenstream in  set stopwords
this in  stopwords  false
/**
* builds a set from an array of stop words,
* appropriate for passing into the stopfilter constructor.
* this permits this stopwords construction to be cached once when
* an analyzer is constructed.
*
* @see #makestopset(java.lang.string[], boolean) passing false to ignorecase
*/
public static final set makestopset string stopwords
return makestopset stopwords  false
/**
*
* @param stopwords
* @param ignorecase if true, all words are lower cased first.
* @return a set containing the words
*/
public static final set makestopset string stopwords  boolean ignorecase
chararrayset stopset   new chararrayset stopwords length  ignorecase
stopset addall arrays aslist stopwords
return stopset
/**
* returns the next input token whose termtext() is not a stop word.
*/
public final token next token result  throws ioexception
// return the first non-stop word found
int skippedpositions   0
while  result   input next result      null
if   stopwords contains result termbuffer    0  result termlength
if  enablepositionincrements
result setpositionincrement result getpositionincrement     skippedpositions
return result
skippedpositions    result getpositionincrement
// reached eos -- return null
return null
/**
* @see #setenablepositionincrementsdefault(boolean).
*/
public static boolean getenablepositionincrementsdefault
return enable_position_increments_default
/**
* set the default position increments behavior of every stopfilter created from now on.
* <p>
* note: behavior of a single stopfilter instance can be modified
* with {@link #setenablepositionincrements(boolean)}.
* this static method allows control over behavior of classes using stopfilters internally,
* for example {@link org.apache.lucene.analysis.standard.standardanalyzer standardanalyzer}.
* <p>
* default : false.
* @see #setenablepositionincrements(boolean).
*/
public static void setenablepositionincrementsdefault boolean defaultvalue
enable_position_increments_default   defaultvalue
/**
* @see #setenablepositionincrements(boolean).
*/
public boolean getenablepositionincrements
return enablepositionincrements
/**
* set to <code>true</code> to make <b>this</b> stopfilter enable position increments to result tokens.
* <p>
* when set, when a token is stopped (omitted), the position increment of
* the following token is incremented.
* <p>
* default: see {@link #setenablepositionincrementsdefault(boolean)}.
*/
public void setenablepositionincrements boolean enable
this enablepositionincrements   enable