package org apache lucene index
/**
* copyright 2007 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* the termvectormapper can be used to map term vectors into your own
* structure instead of the parallel array structure used by
* {@link org.apache.lucene.index.indexreader#gettermfreqvector(int,string)}.
* <p/>
* it is up to the implementation to make sure it is thread-safe.
*
*
**/
public abstract class termvectormapper
private boolean ignoringpositions
private boolean ignoringoffsets
protected termvectormapper
/**
*
* @param ignoringpositions true if this mapper should tell lucene to ignore positions even if they are stored
* @param ignoringoffsets similar to ignoringpositions
*/
protected termvectormapper boolean ignoringpositions  boolean ignoringoffsets
this ignoringpositions   ignoringpositions
this ignoringoffsets   ignoringoffsets
/**
* tell the mapper what to expect in regards to field, number of terms, offset and position storage.
* this method will be called once before retrieving the vector for a field.
*
* this method will be called before {@link #map(string,int,termvectoroffsetinfo[],int[])}.
* @param field the field the vector is for
* @param numterms the number of terms that need to be mapped
* @param storeoffsets true if the mapper should expect offset information
* @param storepositions true if the mapper should expect positions info
*/
public abstract void setexpectations string field  int numterms  boolean storeoffsets  boolean storepositions
/**
* map the term vector information into your own structure
* @param term the term to add to the vector
* @param frequency the frequency of the term in the document
* @param offsets null if the offset is not specified, otherwise the offset into the field of the term
* @param positions null if the position is not specified, otherwise the position in the field of the term
*/
public abstract void map string term  int frequency  termvectoroffsetinfo  offsets  int  positions
/**
* indicate to lucene that even if there are positions stored, this mapper is not interested in them and they
* can be skipped over.  derived classes should set this to true if they want to ignore positions.  the default
* is false, meaning positions will be loaded if they are stored.
* @return false
*/
public boolean isignoringpositions
return ignoringpositions
/**
*
* @see #isignoringpositions() same principal as {@link #isignoringpositions()}, but applied to offsets.  false by default.
* @return false
*/
public boolean isignoringoffsets
return ignoringoffsets
/**
* passes down the index of the document whose term vector is currently being mapped,
* once for each top level call to a term vector reader.
*<p/>
* default implementation ignores the document number.  override if your implementation needs the document number.
* <p/>
* note: document numbers are internal to lucene and subject to change depending on indexing operations.
*
* @param documentnumber index of document currently being mapped
*/
public void setdocumentnumber int documentnumber