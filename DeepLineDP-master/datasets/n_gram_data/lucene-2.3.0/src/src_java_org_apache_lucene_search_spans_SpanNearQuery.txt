package org apache lucene search spans
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util collection
import java util list
import java util arraylist
import java util iterator
import java util set
import org apache lucene index indexreader
import org apache lucene search query
import org apache lucene util tostringutils
/** matches spans which are near one another.  one can specify <i>slop</i>, the
* maximum number of intervening unmatched positions, as well as whether
* matches are required to be in-order. */
public class spannearquery extends spanquery
private list clauses
private int slop
private boolean inorder
private string field
/** construct a spannearquery.  matches spans matching a span from each
* clause, with up to <code>slop</code> total unmatched positions between
* them.  * when <code>inorder</code> is true, the spans from each clause
* must be * ordered as in <code>clauses</code>. */
public spannearquery spanquery clauses  int slop  boolean inorder
// copy clauses array into an arraylist
this clauses   new arraylist clauses length
for  int i   0  i < clauses length  i
spanquery clause   clauses
if  i    0                                     check field
field   clause getfield
else if   clause getfield   equals field
throw new illegalargumentexception
this clauses add clause
this slop   slop
this inorder   inorder
/** return the clauses whose spans are matched. */
public spanquery getclauses
return  spanquery clauses toarray new spanquery
/** return the maximum number of intervening unmatched positions permitted.*/
public int getslop     return slop
/** return true if matches are required to be in-order.*/
public boolean isinorder     return inorder
public string getfield     return field
/** returns a collection of all terms matched by this query.
* @deprecated use extractterms instead
* @see #extractterms(set)
*/
public collection getterms
collection terms   new arraylist
iterator i   clauses iterator
while  i hasnext
spanquery clause    spanquery i next
terms addall clause getterms
return terms
public void extractterms set terms
iterator i   clauses iterator
while  i hasnext
spanquery clause    spanquery i next
clause extractterms terms
public string tostring string field
stringbuffer buffer   new stringbuffer
buffer append
iterator i   clauses iterator
while  i hasnext
spanquery clause    spanquery i next
buffer append clause tostring field
if  i hasnext
buffer append
buffer append
buffer append slop
buffer append
buffer append inorder
buffer append
buffer append tostringutils boost getboost
return buffer tostring
public spans getspans final indexreader reader  throws ioexception
if  clauses size      0                          optimize 0 clause case
return new spanorquery getclauses    getspans reader
if  clauses size      1                          optimize 1 clause case
return   spanquery clauses get 0   getspans reader
return inorder
?  spans  new nearspansordered this  reader
spans  new nearspansunordered this  reader
public query rewrite indexreader reader  throws ioexception
spannearquery clone   null
for  int i   0   i < clauses size    i
spanquery c    spanquery clauses get i
spanquery query    spanquery  c rewrite reader
if  query    c                           clause rewrote  must clone
if  clone    null
clone    spannearquery  this clone
clone clauses set i query
if  clone    null
return clone                            some clauses rewrote
else
return this                             no clauses rewrote
/** returns true iff <code>o</code> is equal to this. */
public boolean equals object o
if  this    o  return true
if    o instanceof spannearquery   return false
final spannearquery spannearquery    spannearquery  o
if  inorder    spannearquery inorder  return false
if  slop    spannearquery slop  return false
if   clauses equals spannearquery clauses   return false
return getboost      spannearquery getboost
public int hashcode
int result
result   clauses hashcode
// mix bits before folding in things like boost, since it could cancel the
// last element of clauses.  this particular mix also serves to
// differentiate spannearquery hashcodes from others.
result ^   result << 14     result >>> 19       reversible
result    float floattorawintbits getboost
result    slop
result ^   inorder ? 0x99afd3bd   0
return result