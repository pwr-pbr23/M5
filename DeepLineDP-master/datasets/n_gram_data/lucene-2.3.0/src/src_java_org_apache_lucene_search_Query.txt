package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util hashset
import java util iterator
import java util set
import org apache lucene index indexreader
/** the abstract base class for queries.
<p>instantiable subclasses are:
<ul>
<li> {@link termquery}
<li> {@link multitermquery}
<li> {@link booleanquery}
<li> {@link wildcardquery}
<li> {@link phrasequery}
<li> {@link prefixquery}
<li> {@link multiphrasequery}
<li> {@link fuzzyquery}
<li> {@link rangequery}
<li> {@link org.apache.lucene.search.spans.spanquery}
</ul>
<p>a parser for queries is contained in:
<ul>
<li>{@link org.apache.lucene.queryparser.queryparser queryparser}
</ul>
*/
public abstract class query implements java io serializable  cloneable
private float boost   1 0f                         query boost factor
/** sets the boost for this query clause to <code>b</code>.  documents
* matching this clause will (in addition to the normal weightings) have
* their score multiplied by <code>b</code>.
*/
public void setboost float b    boost   b
/** gets the boost for this clause.  documents matching
* this clause will (in addition to the normal weightings) have their score
* multiplied by <code>b</code>.   the boost is 1.0 by default.
*/
public float getboost     return boost
/** prints a query to a string, with <code>field</code> assumed to be the
* default field and omitted.
* <p>the representation used is one that is supposed to be readable
* by {@link org.apache.lucene.queryparser.queryparser queryparser}. however,
* there are the following limitations:
* <ul>
*  <li>if the query was created by the parser, the printed
*  representation may not be exactly what was parsed. for example,
*  characters that need to be escaped will be represented without
*  the required backslash.</li>
* <li>some of the more complicated queries (e.g. span queries)
*  don't have a representation that can be parsed by queryparser.</li>
* </ul>
*/
public abstract string tostring string field
/** prints a query to a string. */
public string tostring
return tostring
/** expert: constructs an appropriate weight implementation for this query.
*
* <p>only implemented by primitive queries, which re-write to themselves.
*/
protected weight createweight searcher searcher  throws ioexception
throw new unsupportedoperationexception
/** expert: constructs and initializes a weight for a top-level query. */
public weight weight searcher searcher
throws ioexception
query query   searcher rewrite this
weight weight   query createweight searcher
float sum   weight sumofsquaredweights
float norm   getsimilarity searcher  querynorm sum
weight normalize norm
return weight
/** expert: called to re-write queries into primitive queries. for example,
* a prefixquery will be rewritten into a booleanquery that consists
* of termquerys.
*/
public query rewrite indexreader reader  throws ioexception
return this
/** expert: called when re-writing queries under multisearcher.
*
* create a single query suitable for use by all subsearchers (in 1-1
* correspondence with queries). this is an optimization of the or of
* all queries. we handle the common optimization cases of equal
* queries and overlapping clauses of boolean or queries (as generated
* by multitermquery.rewrite() and rangequery.rewrite()).
* be careful overriding this method as queries[0] determines which
* method will be called and is not necessarily of the same type as
* the other queries.
*/
public query combine query queries
hashset uniques   new hashset
for  int i   0  i < queries length  i
query query   queries
booleanclause clauses   null
// check if we can split the query into clauses
boolean splittable    query instanceof booleanquery
if splittable
booleanquery bq    booleanquery  query
splittable   bq iscoorddisabled
clauses   bq getclauses
for  int j   0  splittable    j < clauses length  j
splittable    clauses getoccur      booleanclause occur should
if splittable
for  int j   0  j < clauses length  j
uniques add clauses getquery
else
uniques add query
// optimization: if we have just one query, just return it
if uniques size      1
return  query uniques iterator   next
iterator it   uniques iterator
booleanquery result   new booleanquery true
while  it hasnext
result add  query  it next    booleanclause occur should
return result
/**
* expert: adds all terms occuring in this query to the terms set. only
* works if this query is in its {@link #rewrite rewritten} form.
*
* @throws unsupportedoperationexception if this query is not yet rewritten
*/
public void extractterms set terms
// needs to be implemented by query subclasses
throw new unsupportedoperationexception
/** expert: merges the clauses of a set of booleanquery's into a single
* booleanquery.
*
*<p>a utility for use by {@link #combine(query[])} implementations.
*/
public static query mergebooleanqueries query queries
hashset allclauses   new hashset
for  int i   0  i < queries length  i
booleanclause clauses     booleanquery queries  getclauses
for  int j   0  j < clauses length  j
allclauses add clauses
boolean coorddisabled
queries length  0? false     booleanquery queries  iscoorddisabled
booleanquery result   new booleanquery coorddisabled
iterator i   allclauses iterator
while  i hasnext
result add  booleanclause i next
return result
/** expert: returns the similarity implementation to be used for this query.
* subclasses may override this method to specify their own similarity
* implementation, perhaps one that delegates through that of the searcher.
* by default the searcher's similarity implementation is returned.*/
public similarity getsimilarity searcher searcher
return searcher getsimilarity
/** returns a clone of this query. */
public object clone
try
return  query super clone
catch  clonenotsupportedexception e
throw new runtimeexception     e getmessage