package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/**
* termpositions provides an interface for enumerating the &lt;document,
* frequency, &lt;position&gt;* &gt; tuples for a term.  <p> the document and
* frequency are the same as for a termdocs.  the positions portion lists the ordinal
* positions of each occurrence of a term in a document.
*
* @see indexreader#termpositions()
*/
public interface termpositions
extends termdocs
/** returns next position in the current document.  it is an error to call
this more than {@link #freq()} times
without calling {@link #next()}<p> this is
invalid until {@link #next()} is called for
the first time.
*/
int nextposition   throws ioexception
/**
* returns the length of the payload at the current term position.
* this is invalid until {@link #nextposition()} is called for
* the first time.<br>
* @return length of the current payload in number of bytes
*/
int getpayloadlength
/**
* returns the payload data at the current term position.
* this is invalid until {@link #nextposition()} is called for
* the first time.
* this method must not be called more than once after each call
* of {@link #nextposition()}. however, payloads are loaded lazily,
* so if the payload data for the current position is not needed,
* this method may not be called at all for performance reasons.<br>
*
* @param data the array into which the data of this payload is to be
*             stored, if it is big enough; otherwise, a new byte[] array
*             is allocated for this purpose.
* @param offset the offset in the array into which the data of this payload
*               is to be stored.
* @return a byte[] array containing the data of this payload
* @throws ioexception
*/
byte getpayload byte data  int offset  throws ioexception
/**
* checks if a payload can be loaded at this position.
* <p>
* payloads can only be loaded once per call to
* {@link #nextposition()}.
*
* @return true if there is a payload available at this position that can be loaded
*/
public boolean ispayloadavailable