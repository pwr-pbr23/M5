package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io reader
import java io ioexception
/** an analyzer builds tokenstreams, which analyze text.  it thus represents a
*  policy for extracting index terms from text.
*  <p>
*  typical implementations first build a tokenizer, which breaks the stream of
*  characters from the reader into raw tokens.  one or more tokenfilters may
*  then be applied to the output of the tokenizer.
*  <p>
*  warning: you must override one of the methods defined by this class in your
*  subclass or the analyzer will enter an infinite loop.
*/
public abstract class analyzer
/** creates a tokenstream which tokenizes all the text in the provided
reader.  default implementation forwards to tokenstream(reader) for
compatibility with older version.  override to allow analyzer to choose
strategy based on document and/or field.  must be able to handle null
field name for backward compatibility. */
public abstract tokenstream tokenstream string fieldname  reader reader
/** creates a tokenstream that is allowed to be re-used
*  from the previous time that the same thread called
*  this method.  callers that do not need to use more
*  than one tokenstream at the same time from this
*  analyzer should use this method for better
*  performance.
*/
public tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
return tokenstream fieldname  reader
private threadlocal tokenstreams   new threadlocal
/** used by analyzers that implement reusabletokenstream
*  to retrieve previously saved tokenstreams for re-use
*  by the same thread. */
protected object getprevioustokenstream
return tokenstreams get
/** used by analyzers that implement reusabletokenstream
*  to save a tokenstream for later re-use by the same
*  thread. */
protected void setprevioustokenstream object obj
tokenstreams set obj
/**
* invoked before indexing a fieldable instance if
* terms have already been added to that field.  this allows custom
* analyzers to place an automatic position increment gap between
* fieldable instances using the same field name.  the default value
* position increment gap is 0.  with a 0 position increment gap and
* the typical default token position increment of 1, all terms in a field,
* including across fieldable instances, are in successive positions, allowing
* exact phrasequery matches, for instance, across fieldable instance boundaries.
*
* @param fieldname fieldable name being indexed.
* @return position increment gap, added to the next token emitted from {@link #tokenstream(string,reader)}
*/
public int getpositionincrementgap string fieldname
return 0