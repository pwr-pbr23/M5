package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io reader
import java io ioexception
import java util map
import java util hashmap
/**
* this analyzer is used to facilitate scenarios where different
* fields require different analysis techniques.  use {@link #addanalyzer}
* to add a non-default analyzer on a field name basis.
*
* <p>example usage:
*
* <pre>
*   perfieldanalyzerwrapper awrapper =
*      new perfieldanalyzerwrapper(new standardanalyzer());
*   awrapper.addanalyzer("firstname", new keywordanalyzer());
*   awrapper.addanalyzer("lastname", new keywordanalyzer());
* </pre>
*
* <p>in this example, standardanalyzer will be used for all fields except "firstname"
* and "lastname", for which keywordanalyzer will be used.
*
* <p>a perfieldanalyzerwrapper can be used like any other analyzer, for both indexing
* and query parsing.
*/
public class perfieldanalyzerwrapper extends analyzer
private analyzer defaultanalyzer
private map analyzermap   new hashmap
/**
* constructs with default analyzer.
*
* @param defaultanalyzer any fields not specifically
* defined to use a different analyzer will use the one provided here.
*/
public perfieldanalyzerwrapper analyzer defaultanalyzer
this defaultanalyzer   defaultanalyzer
/**
* defines an analyzer to use for the specified field.
*
* @param fieldname field name requiring a non-default analyzer
* @param analyzer non-default analyzer to use for field
*/
public void addanalyzer string fieldname  analyzer analyzer
analyzermap put fieldname  analyzer
public tokenstream tokenstream string fieldname  reader reader
analyzer analyzer    analyzer  analyzermap get fieldname
if  analyzer    null
analyzer   defaultanalyzer
return analyzer tokenstream fieldname  reader
public tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
analyzer analyzer    analyzer  analyzermap get fieldname
if  analyzer    null
analyzer   defaultanalyzer
return analyzer reusabletokenstream fieldname  reader
/** return the positionincrementgap from the analyzer assigned to fieldname */
public int getpositionincrementgap string fieldname
analyzer analyzer    analyzer  analyzermap get fieldname
if  analyzer    null
analyzer   defaultanalyzer
return analyzer getpositionincrementgap fieldname
public string tostring
return     analyzermap       defaultanalyzer