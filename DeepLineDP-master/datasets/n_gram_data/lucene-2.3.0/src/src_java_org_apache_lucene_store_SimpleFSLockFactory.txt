package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io file
import java io ioexception
/**
* <p>implements {@link lockfactory} using {@link
* file#createnewfile()}.  this is the default lockfactory
* for {@link fsdirectory}.</p>
*
* <p><b>note:</b> the <a target="_top"
* href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/file.html#createnewfile()">javadocs
* for <code>file.createnewfile</code></a> contain a vague
* yet spooky warning about not using the api for file
* locking.  this warning was added due to <a target="_top"
* href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4676183">this
* bug</a>, and in fact the only known problem with using
* this api for locking is that the lucene write lock may
* not be released when the jvm exits abnormally.</p>
* <p>when this happens, a {@link lockobtainfailedexception}
* is hit when trying to create a writer, in which case you
* need to explicitly clear the lock file first.  you can
* either manually remove the file, or use the {@link
* org.apache.lucene.index.indexreader#unlock(directory)}
* api.  but, first be certain that no writer is in fact
* writing to the index otherwise you can easily corrupt
* your index.</p>
*
* <p>if you suspect that this or any other lockfactory is
* not working properly in your environment, you can easily
* test it by using {@link verifyinglockfactory}, {@link
* lockverifyserver} and {@link lockstresstest}.</p>
*
* @see lockfactory
*/
public class simplefslockfactory extends lockfactory
/**
* directory specified by <code>org.apache.lucene.lockdir</code>
* system property.  if that is not set, then <code>java.io.tmpdir</code>
* system property is used.
*/
private file lockdir
/**
* create a simplefslockfactory instance, with null (unset)
* lock directory.  this is package-private and is only
* used by fsdirectory when creating this lockfactory via
* the system property
* org.apache.lucene.store.fsdirectorylockfactoryclass.
*/
simplefslockfactory   throws ioexception
this  file  null
/**
* instantiate using the provided directory (as a file instance).
* @param lockdir where lock files should be created.
*/
public simplefslockfactory file lockdir  throws ioexception
setlockdir lockdir
/**
* instantiate using the provided directory name (string).
* @param lockdirname where lock files should be created.
*/
public simplefslockfactory string lockdirname  throws ioexception
lockdir   new file lockdirname
setlockdir lockdir
/**
* set the lock directory.  this is package-private and is
* only used externally by fsdirectory when creating this
* lockfactory via the system property
* org.apache.lucene.store.fsdirectorylockfactoryclass.
*/
void setlockdir file lockdir  throws ioexception
this lockdir   lockdir
public lock makelock string lockname
if  lockprefix    null
lockname   lockprefix       lockname
return new simplefslock lockdir  lockname
public void clearlock string lockname  throws ioexception
if  lockdir exists
if  lockprefix    null
lockname   lockprefix       lockname
file lockfile   new file lockdir  lockname
if  lockfile exists       lockfile delete
throw new ioexception     lockfile
class simplefslock extends lock
file lockfile
file lockdir
public simplefslock file lockdir  string lockfilename
this lockdir   lockdir
lockfile   new file lockdir  lockfilename
public boolean obtain   throws ioexception
// ensure that lockdir exists and is a directory:
if   lockdir exists
if   lockdir mkdirs
throw new ioexception
lockdir getabsolutepath
else if   lockdir isdirectory
throw new ioexception
lockdir getabsolutepath
return lockfile createnewfile
public void release   throws lockreleasefailedexception
if  lockfile exists       lockfile delete
throw new lockreleasefailedexception     lockfile
public boolean islocked
return lockfile exists
public string tostring
return     lockfile