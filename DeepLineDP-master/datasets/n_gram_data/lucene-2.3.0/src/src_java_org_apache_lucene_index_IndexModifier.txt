package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene document document
import org apache lucene store directory
import org apache lucene store fsdirectory
import org apache lucene store lockobtainfailedexception
import java io file
import java io ioexception
import java io printstream
/**
* <p>[note that as of <b>2.1</b>, all but one of the
* methods in this class are available via {@link
* indexwriter}.  the one method that is not available is
* {@link #deletedocument(int)}.]</p>
*
* a class to modify an index, i.e. to delete and add documents. this
* class hides {@link indexreader} and {@link indexwriter} so that you
* do not need to care about implementation details such as that adding
* documents is done via indexwriter and deletion is done via indexreader.
*
* <p>note that you cannot create more than one <code>indexmodifier</code> object
* on the same directory at the same time.
*
* <p>example usage:
*
<!-- ======================================================== -->
<!-- = java sourcecode to html automatically converted code = -->
<!-- =   java2html converter v4.1 2004 by markus gebhard  markus@jave.de   = -->
<!-- =     further information: http://www.java2html.de     = -->
<div align="left" class="java">
<table border="0" cellpadding="3" cellspacing="0" bgcolor="#ffffff">
<tr>
<!-- start source code -->
<td nowrap="nowrap" valign="top" align="left">
<code>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">analyzer&nbsp;analyzer&nbsp;=&nbsp;</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">standardanalyzer</font><font color="#000000">()</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#3f7f5f">//&nbsp;create&nbsp;an&nbsp;index&nbsp;in&nbsp;/tmp/index,&nbsp;overwriting&nbsp;an&nbsp;existing&nbsp;one:</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">indexmodifier&nbsp;indexmodifier&nbsp;=&nbsp;</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">indexmodifier</font><font color="#000000">(</font><font color="#2a00ff">&#34;/tmp/index&#34;</font><font color="#000000">,&nbsp;analyzer,&nbsp;</font><font color="#7f0055"><b>true</b></font><font color="#000000">)</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">document&nbsp;doc&nbsp;=&nbsp;</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">document</font><font color="#000000">()</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">doc.add</font><font color="#000000">(</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">field</font><font color="#000000">(</font><font color="#2a00ff">&#34;id&#34;</font><font color="#000000">,&nbsp;</font><font color="#2a00ff">&#34;1&#34;</font><font color="#000000">,&nbsp;field.store.yes,&nbsp;field.index.un_tokenized</font><font color="#000000">))</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">doc.add</font><font color="#000000">(</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">field</font><font color="#000000">(</font><font color="#2a00ff">&#34;body&#34;</font><font color="#000000">,&nbsp;</font><font color="#2a00ff">&#34;a&nbsp;simple&nbsp;test&#34;</font><font color="#000000">,&nbsp;field.store.yes,&nbsp;field.index.tokenized</font><font color="#000000">))</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">indexmodifier.adddocument</font><font color="#000000">(</font><font color="#000000">doc</font><font color="#000000">)</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#7f0055"><b>int&nbsp;</b></font><font color="#000000">deleted&nbsp;=&nbsp;indexmodifier.delete</font><font color="#000000">(</font><font color="#7f0055"><b>new&nbsp;</b></font><font color="#000000">term</font><font color="#000000">(</font><font color="#2a00ff">&#34;id&#34;</font><font color="#000000">,&nbsp;</font><font color="#2a00ff">&#34;1&#34;</font><font color="#000000">))</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">system.out.println</font><font color="#000000">(</font><font color="#2a00ff">&#34;deleted&nbsp;&#34;&nbsp;</font><font color="#000000">+&nbsp;deleted&nbsp;+&nbsp;</font><font color="#2a00ff">&#34;&nbsp;document&#34;</font><font color="#000000">)</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">indexmodifier.flush</font><font color="#000000">()</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">system.out.println</font><font color="#000000">(</font><font color="#000000">indexmodifier.doccount</font><font color="#000000">()&nbsp;</font><font color="#000000">+&nbsp;</font><font color="#2a00ff">&#34;&nbsp;docs&nbsp;in&nbsp;index&#34;</font><font color="#000000">)</font><font color="#000000">;</font><br/>
<font color="#ffffff">&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#000000">indexmodifier.close</font><font color="#000000">()</font><font color="#000000">;</font></code>
</td>
<!-- end source code -->
</tr>
</table>
</div>
<!-- =       end of automatically generated html code       = -->
<!-- ======================================================== -->
*
* <p>not all methods of indexreader and indexwriter are offered by this
* class. if you need access to additional methods, either use those classes
* directly or implement your own class that extends <code>indexmodifier</code>.
*
* <p>although an instance of this class can be used from more than one
* thread, you will not get the best performance. you might want to use
* indexreader and indexwriter directly for that (but you will need to
* care about synchronization yourself then).
*
* <p>while you can freely mix calls to add() and delete() using this class,
* you should batch you calls for best performance. for example, if you
* want to update 20 documents, you should first delete all those documents,
* then add all the new documents.
*
* @author daniel naber
* @deprecated please use {@link indexwriter} instead.
*/
public class indexmodifier
protected indexwriter indexwriter   null
protected indexreader indexreader   null
protected directory directory   null
protected analyzer analyzer   null
protected boolean open   false
// lucene defaults:
protected printstream infostream   null
protected boolean usecompoundfile   true
protected int maxbuffereddocs   indexwriter default_max_buffered_docs
protected int maxfieldlength   indexwriter default_max_field_length
protected int mergefactor   indexwriter default_merge_factor
/**
* open an index with write access.
*
* @param directory the index directory
* @param analyzer the analyzer to use for adding new documents
* @param create <code>true</code> to create the index or overwrite the existing one;
* 	<code>false</code> to append to the existing index
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public indexmodifier directory directory  analyzer analyzer  boolean create  throws corruptindexexception  lockobtainfailedexception  ioexception
init directory  analyzer  create
/**
* open an index with write access.
*
* @param dirname the index directory
* @param analyzer the analyzer to use for adding new documents
* @param create <code>true</code> to create the index or overwrite the existing one;
* 	<code>false</code> to append to the existing index
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public indexmodifier string dirname  analyzer analyzer  boolean create  throws corruptindexexception  lockobtainfailedexception  ioexception
directory dir   fsdirectory getdirectory dirname
init dir  analyzer  create
/**
* open an index with write access.
*
* @param file the index directory
* @param analyzer the analyzer to use for adding new documents
* @param create <code>true</code> to create the index or overwrite the existing one;
* 	<code>false</code> to append to the existing index
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public indexmodifier file file  analyzer analyzer  boolean create  throws corruptindexexception  lockobtainfailedexception  ioexception
directory dir   fsdirectory getdirectory file
init dir  analyzer  create
/**
* initialize an indexwriter.
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
protected void init directory directory  analyzer analyzer  boolean create  throws corruptindexexception  lockobtainfailedexception  ioexception
this directory   directory
synchronized this directory
this analyzer   analyzer
indexwriter   new indexwriter directory  analyzer  create
open   true
/**
* throw an illegalstateexception if the index is closed.
* @throws illegalstateexception
*/
protected void assureopen
if   open
throw new illegalstateexception
/**
* close the indexreader and open an indexwriter.
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
protected void createindexwriter   throws corruptindexexception  lockobtainfailedexception  ioexception
if  indexwriter    null
if  indexreader    null
indexreader close
indexreader   null
indexwriter   new indexwriter directory  analyzer  false
// indexmodifier cannot use concurrentmergescheduler
// because it synchronizes on the directory which can
// cause deadlock
indexwriter setmergescheduler new serialmergescheduler
indexwriter setinfostream infostream
indexwriter setusecompoundfile usecompoundfile
if  maxbuffereddocs    indexwriter disable_auto_flush
indexwriter setmaxbuffereddocs maxbuffereddocs
indexwriter setmaxfieldlength maxfieldlength
indexwriter setmergefactor mergefactor
/**
* close the indexwriter and open an indexreader.
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
protected void createindexreader   throws corruptindexexception  ioexception
if  indexreader    null
if  indexwriter    null
indexwriter close
indexwriter   null
indexreader   indexreader open directory
/**
* make sure all changes are written to disk.
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public void flush   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
if  indexwriter    null
indexwriter close
indexwriter   null
createindexwriter
else
indexreader close
indexreader   null
createindexreader
/**
* adds a document to this index, using the provided analyzer instead of the
* one specific in the constructor.  if the document contains more than
* {@link #setmaxfieldlength(int)} terms for a given field, the remainder are
* discarded.
* @see indexwriter#adddocument(document, analyzer)
* @throws illegalstateexception if the index is closed
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public void adddocument document doc  analyzer docanalyzer  throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
if  docanalyzer    null
indexwriter adddocument doc  docanalyzer
else
indexwriter adddocument doc
/**
* adds a document to this index.  if the document contains more than
* {@link #setmaxfieldlength(int)} terms for a given field, the remainder are
* discarded.
* @see indexwriter#adddocument(document)
* @throws illegalstateexception if the index is closed
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public void adddocument document doc  throws corruptindexexception  lockobtainfailedexception  ioexception
adddocument doc  null
/**
* deletes all documents containing <code>term</code>.
* this is useful if one uses a document field to hold a unique id string for
* the document.  then to delete such a document, one merely constructs a
* term with the appropriate field and the unique id string as its text and
* passes it to this method.  returns the number of documents deleted.
* @return the number of documents deleted
* @see indexreader#deletedocuments(term)
* @throws illegalstateexception if the index is closed
* @throws stalereaderexception if the index has changed
*  since this reader was opened
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public int deletedocuments term term  throws stalereaderexception  corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexreader
return indexreader deletedocuments term
/**
* deletes the document numbered <code>docnum</code>.
* @see indexreader#deletedocument(int)
* @throws stalereaderexception if the index has changed
*  since this reader was opened
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws illegalstateexception if the index is closed
*/
public void deletedocument int docnum  throws stalereaderexception  corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexreader
indexreader deletedocument docnum
/**
* returns the number of documents currently in this index.
* @see indexwriter#doccount()
* @see indexreader#numdocs()
* @throws illegalstateexception if the index is closed
*/
public int doccount
synchronized directory
assureopen
if  indexwriter    null
return indexwriter doccount
else
return indexreader numdocs
/**
* merges all segments together into a single segment, optimizing an index
* for search.
* @see indexwriter#optimize()
* @throws illegalstateexception if the index is closed
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public void optimize   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
indexwriter optimize
/**
* if non-null, information about merges and a message when
* {@link #getmaxfieldlength()} is reached will be printed to this.
* <p>example: <tt>index.setinfostream(system.err);</tt>
* @see indexwriter#setinfostream(printstream)
* @throws illegalstateexception if the index is closed
*/
public void setinfostream printstream infostream
synchronized directory
assureopen
if  indexwriter    null
indexwriter setinfostream infostream
this infostream   infostream
/**
* @see indexmodifier#setinfostream(printstream)
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public printstream getinfostream   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
return indexwriter getinfostream
/**
* setting to turn on usage of a compound file. when on, multiple files
* for each segment are merged into a single file once the segment creation
* is finished. this is done regardless of what directory is in use.
* @see indexwriter#setusecompoundfile(boolean)
* @throws illegalstateexception if the index is closed
*/
public void setusecompoundfile boolean usecompoundfile
synchronized directory
assureopen
if  indexwriter    null
indexwriter setusecompoundfile usecompoundfile
this usecompoundfile   usecompoundfile
/**
* @see indexmodifier#setusecompoundfile(boolean)
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public boolean getusecompoundfile   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
return indexwriter getusecompoundfile
/**
* the maximum number of terms that will be indexed for a single field in a
* document.  this limits the amount of memory required for indexing, so that
* collections with very large files will not crash the indexing process by
* running out of memory.<p/>
* note that this effectively truncates large documents, excluding from the
* index terms that occur further in the document.  if you know your source
* documents are large, be sure to set this value high enough to accomodate
* the expected size.  if you set it to integer.max_value, then the only limit
* is your memory, but you should anticipate an outofmemoryerror.<p/>
* by default, no more than 10,000 terms will be indexed for a field.
* @see indexwriter#setmaxfieldlength(int)
* @throws illegalstateexception if the index is closed
*/
public void setmaxfieldlength int maxfieldlength
synchronized directory
assureopen
if  indexwriter    null
indexwriter setmaxfieldlength maxfieldlength
this maxfieldlength   maxfieldlength
/**
* @see indexmodifier#setmaxfieldlength(int)
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public int getmaxfieldlength   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
return indexwriter getmaxfieldlength
/**
* determines the minimal number of documents required before the buffered
* in-memory documents are merging and a new segment is created.
* since documents are merged in a {@link org.apache.lucene.store.ramdirectory},
* large value gives faster indexing.  at the same time, mergefactor limits
* the number of files open in a fsdirectory.
*
* <p>the default value is 10.
*
* @see indexwriter#setmaxbuffereddocs(int)
* @throws illegalstateexception if the index is closed
* @throws illegalargumentexception if maxbuffereddocs is smaller than 2
*/
public void setmaxbuffereddocs int maxbuffereddocs
synchronized directory
assureopen
if  indexwriter    null
indexwriter setmaxbuffereddocs maxbuffereddocs
this maxbuffereddocs   maxbuffereddocs
/**
* @see indexmodifier#setmaxbuffereddocs(int)
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public int getmaxbuffereddocs   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
return indexwriter getmaxbuffereddocs
/**
* determines how often segment indices are merged by adddocument().  with
* smaller values, less ram is used while indexing, and searches on
* unoptimized indices are faster, but indexing speed is slower.  with larger
* values, more ram is used during indexing, and while searches on unoptimized
* indices are slower, indexing is faster.  thus larger values (&gt; 10) are best
* for batch index creation, and smaller values (&lt; 10) for indices that are
* interactively maintained.
* <p>this must never be less than 2.  the default value is 10.
*
* @see indexwriter#setmergefactor(int)
* @throws illegalstateexception if the index is closed
*/
public void setmergefactor int mergefactor
synchronized directory
assureopen
if  indexwriter    null
indexwriter setmergefactor mergefactor
this mergefactor   mergefactor
/**
* @see indexmodifier#setmergefactor(int)
* @throws corruptindexexception if the index is corrupt
* @throws lockobtainfailedexception if another writer
*  has this index open (<code>write.lock</code> could not
*  be obtained)
* @throws ioexception if there is a low-level io error
*/
public int getmergefactor   throws corruptindexexception  lockobtainfailedexception  ioexception
synchronized directory
assureopen
createindexwriter
return indexwriter getmergefactor
/**
* close this index, writing all pending changes to disk.
*
* @throws illegalstateexception if the index has been closed before already
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
public void close   throws corruptindexexception  ioexception
synchronized directory
if   open
throw new illegalstateexception
if  indexwriter    null
indexwriter close
indexwriter   null
else
indexreader close
indexreader   null
open   false
public string tostring
return     directory
/*
// used as an example in the javadoc:
public static void main(string[] args) throws ioexception {
analyzer analyzer = new standardanalyzer();
// create an index in /tmp/index, overwriting an existing one:
indexmodifier indexmodifier = new indexmodifier("/tmp/index", analyzer, true);
document doc = new document();
doc.add(new fieldable("id", "1", fieldable.store.yes, fieldable.index.un_tokenized));
doc.add(new fieldable("body", "a simple test", fieldable.store.yes, fieldable.index.tokenized));
indexmodifier.adddocument(doc);
int deleted = indexmodifier.delete(new term("id", "1"));
system.out.println("deleted " + deleted + " document");
indexmodifier.flush();
system.out.println(indexmodifier.doccount() + " docs in index");
indexmodifier.close();
}*/