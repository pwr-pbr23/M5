package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** base implementation class for buffered {@link indexoutput}. */
public abstract class bufferedindexoutput extends indexoutput
static final int buffer_size   16384
private final byte buffer   new byte
private long bufferstart   0               position in file of buffer
private int bufferposition   0             position in buffer
/** writes a single byte.
* @see indexinput#readbyte()
*/
public void writebyte byte b  throws ioexception
if  bufferposition >  buffer_size
flush
buffer   b
/** writes an array of bytes.
* @param b the bytes to write
* @param length the number of bytes to write
* @see indexinput#readbytes(byte[],int,int)
*/
public void writebytes byte b  int offset  int length  throws ioexception
int bytesleft   buffer_size   bufferposition
// is there enough space in the buffer?
if  bytesleft >  length
// we add the data to the end of the buffer
system arraycopy b  offset  buffer  bufferposition  length
bufferposition    length
// if the buffer is full, flush it
if  buffer_size   bufferposition    0
flush
else
// is data larger then buffer?
if  length > buffer_size
// we flush the buffer
if  bufferposition > 0
flush
// and write data at once
flushbuffer b  offset  length
bufferstart    length
else
// we fill/flush the buffer (until the input is written)
int pos   0     position in the input data
int piecelength
while  pos < length
piecelength    length   pos < bytesleft  ? length   pos   bytesleft
system arraycopy b  pos   offset  buffer  bufferposition  piecelength
pos    piecelength
bufferposition    piecelength
// if the buffer is full, flush it
bytesleft   buffer_size   bufferposition
if  bytesleft    0
flush
bytesleft   buffer_size
/** forces any buffered output to be written. */
public void flush   throws ioexception
flushbuffer buffer  bufferposition
bufferstart    bufferposition
bufferposition   0
/** expert: implements buffer write.  writes bytes at the current position in
* the output.
* @param b the bytes to write
* @param len the number of bytes to write
*/
private void flushbuffer byte b  int len  throws ioexception
flushbuffer b  0  len
/** expert: implements buffer write.  writes bytes at the current position in
* the output.
* @param b the bytes to write
* @param offset the offset in the byte array
* @param len the number of bytes to write
*/
protected abstract void flushbuffer byte b  int offset  int len  throws ioexception
/** closes this stream to further operations. */
public void close   throws ioexception
flush
/** returns the current position in this file, where the next write will
* occur.
* @see #seek(long)
*/
public long getfilepointer
return bufferstart   bufferposition
/** sets current position in this file, where the next write will occur.
* @see #getfilepointer()
*/
public void seek long pos  throws ioexception
flush
bufferstart   pos
/** the number of bytes in the file. */
public abstract long length   throws ioexception