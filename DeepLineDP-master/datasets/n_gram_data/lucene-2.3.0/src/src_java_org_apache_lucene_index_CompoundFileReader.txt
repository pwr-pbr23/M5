package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene store directory
import org apache lucene store indexinput
import org apache lucene store bufferedindexinput
import org apache lucene store indexoutput
import org apache lucene store lock
import java util hashmap
import java io ioexception
/**
* class for accessing a compound stream.
* this class implements a directory, but is limited to only read operations.
* directory methods that would normally modify data throw an exception.
*
*
* @version $id$
*/
class compoundfilereader extends directory
private int readbuffersize
private static final class fileentry
long offset
long length
// base info
private directory directory
private string filename
private indexinput stream
private hashmap entries   new hashmap
public compoundfilereader directory dir  string name  throws ioexception
this dir  name  bufferedindexinput buffer_size
public compoundfilereader directory dir  string name  int readbuffersize
throws ioexception
directory   dir
filename   name
this readbuffersize   readbuffersize
boolean success   false
try
stream   dir openinput name  readbuffersize
// read the directory and init files
int count   stream readvint
fileentry entry   null
for  int i 0  i<count  i
long offset   stream readlong
string id   stream readstring
if  entry    null
// set length of the previous entry
entry length   offset   entry offset
entry   new fileentry
entry offset   offset
entries put id  entry
// set the length of the final entry
if  entry    null
entry length   stream length     entry offset
success   true
finally
if    success     stream    null
try
stream close
catch  ioexception e
public directory getdirectory
return directory
public string getname
return filename
public synchronized void close   throws ioexception
if  stream    null
throw new ioexception
entries clear
stream close
stream   null
public synchronized indexinput openinput string id
throws ioexception
// default to readbuffersize passed in when we were opened
return openinput id  readbuffersize
public synchronized indexinput openinput string id  int readbuffersize
throws ioexception
if  stream    null
throw new ioexception
fileentry entry    fileentry  entries get id
if  entry    null
throw new ioexception     id
return new csindexinput stream  entry offset  entry length  readbuffersize
/** returns an array of strings, one for each file in the directory. */
public string list
string res   new string
return  string  entries keyset   toarray res
/** returns true iff a file with the given name exists. */
public boolean fileexists string name
return entries containskey name
/** returns the time the compound file was last modified. */
public long filemodified string name  throws ioexception
return directory filemodified filename
/** set the modified time of the compound file to now. */
public void touchfile string name  throws ioexception
directory touchfile filename
/** not implemented
* @throws unsupportedoperationexception */
public void deletefile string name
throw new unsupportedoperationexception
/** not implemented
* @throws unsupportedoperationexception */
public void renamefile string from  string to
throw new unsupportedoperationexception
/** returns the length of a file in the directory.
* @throws ioexception if the file does not exist */
public long filelength string name
throws ioexception
fileentry e    fileentry  entries get name
if  e    null
throw new ioexception     name
return e length
/** not implemented
* @throws unsupportedoperationexception */
public indexoutput createoutput string name
throw new unsupportedoperationexception
/** not implemented
* @throws unsupportedoperationexception */
public lock makelock string name
throw new unsupportedoperationexception
/** implementation of an indexinput that reads from a portion of the
*  compound file. the visibility is left as "package" *only* because
*  this helps with testing since junit test cases in a different class
*  can then access package fields of this class.
*/
static final class csindexinput extends bufferedindexinput
indexinput base
long fileoffset
long length
csindexinput final indexinput base  final long fileoffset  final long length
this base  fileoffset  length  bufferedindexinput buffer_size
csindexinput final indexinput base  final long fileoffset  final long length  int readbuffersize
super readbuffersize
this base   base
this fileoffset   fileoffset
this length   length
/** expert: implements buffer refill.  reads bytes from the current
*  position in the input.
* @param b the array to read bytes into
* @param offset the offset in the array to start storing bytes
* @param len the number of bytes to read
*/
protected void readinternal byte b  int offset  int len
throws ioexception
synchronized  base
long start   getfilepointer
if start   len > length
throw new ioexception
base seek fileoffset   start
base readbytes b  offset  len  false
/** expert: implements seek.  sets current position in this file, where
*  the next {@link #readinternal(byte[],int,int)} will occur.
* @see #readinternal(byte[],int,int)
*/
protected void seekinternal long pos
/** closes the stream to further operations. */
public void close
public long length
return length