package org apache lucene analysis de
// this file is encoded in utf-8
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* a stemmer for german words. the algorithm is based on the report
* "a fast and simple stemming algorithm for german words" by j&ouml;rg
* caumanns (joerg.caumanns at isst.fhg.de).
*
*
* @version   $id$
*/
public class germanstemmer
/**
* buffer for the terms while stemming them.
*/
private stringbuffer sb   new stringbuffer
/**
* amount of characters that are removed with <tt>substitute()</tt> while stemming.
*/
private int substcount   0
/**
* stemms the given term to an unique <tt>discriminator</tt>.
*
* @param term  the term that should be stemmed.
* @return      discriminator for <tt>term</tt>
*/
protected string stem  string term
// use lowercase for medium stemming.
term   term tolowercase
if    isstemmable  term
return term
// reset the stringbuffer.
sb delete  0  sb length
sb insert  0  term
// stemming starts here...
substitute  sb
strip  sb
optimize  sb
resubstitute  sb
removeparticledenotion  sb
return sb tostring
/**
* checks if a term could be stemmed.
*
* @return  true if, and only if, the given term consists in letters.
*/
private boolean isstemmable  string term
for   int c   0  c < term length    c
if    character isletter  term charat  c
return false
return true
/**
* suffix stripping (stemming) on the current term. the stripping is reduced
* to the seven "base" suffixes "e", "s", "n", "t", "em", "er" and * "nd",
* from which all regular suffixes are build of. the simplification causes
* some overstemming, and way more irregular stems, but still provides unique.
* discriminators in the most of those cases.
* the algorithm is context free, except of the length restrictions.
*/
private void strip  stringbuffer buffer
boolean domore   true
while   domore    buffer length   > 3
if     buffer length     substcount > 5
buffer substring  buffer length     2  buffer length     equals
buffer delete  buffer length     2  buffer length
else if     buffer length     substcount > 4
buffer substring  buffer length     2  buffer length     equals
buffer delete  buffer length     2  buffer length
else if     buffer length     substcount > 4
buffer substring  buffer length     2  buffer length     equals
buffer delete  buffer length     2  buffer length
else if   buffer charat  buffer length     1
buffer deletecharat  buffer length     1
else if   buffer charat  buffer length     1
buffer deletecharat  buffer length     1
else if   buffer charat  buffer length     1
buffer deletecharat  buffer length     1
// "t" occurs only as suffix of verbs.
else if   buffer charat  buffer length     1
buffer deletecharat  buffer length     1
else
domore   false
/**
* does some optimizations on the term. this optimisations are
* contextual.
*/
private void optimize  stringbuffer buffer
// additional step for female plurals of professions and inhabitants.
if   buffer length   > 5    buffer substring  buffer length     5  buffer length     equals
buffer deletecharat  buffer length    1
strip  buffer
// additional step for irregular plural nouns like "matrizen -> matrix".
if   buffer charat  buffer length     1
buffer setcharat  buffer length     1
/**
* removes a particle denotion ("ge") from a term.
*/
private void removeparticledenotion  stringbuffer buffer
if   buffer length   > 4
for   int c   0  c < buffer length     3  c
if   buffer substring  c  c   4   equals
buffer delete  c  c   2
return
/**
* do some substitutions for the term to reduce overstemming:
*
* - substitute umlauts with their corresponding vowel: ãâ¤ãâ¶ãâ¼ -> aou,
*   "ãâ" is substituted by "ss"
* - substitute a second char of a pair of equal characters with
*   an asterisk: ?? -> ?*
* - substitute some common character combinations with a token:
*   sch/ch/ei/ie/ig/st -> $/ãâ§/%/&/#/!
*/
private void substitute  stringbuffer buffer
substcount   0
for   int c   0  c < buffer length    c
// replace the second char of a pair of the equal characters with an asterisk
if   c > 0    buffer charat  c      buffer charat   c   1
buffer setcharat  c
// substitute umlauts.
else if   buffer charat  c
buffer setcharat  c
else if   buffer charat  c
buffer setcharat  c
else if   buffer charat  c
buffer setcharat  c
// fix bug so that 'ãâ' at the end of a word is replaced.
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1
substcount
// take care that at least one character is left left side from the current one
if   c < buffer length     1
// masking several common character combinations with an token
if     c < buffer length     2      buffer charat  c
buffer charat  c   1           buffer charat  c   2
buffer setcharat  c
buffer delete  c   1  c   3
substcount    2
else if   buffer charat  c           buffer charat  c   1
buffer setcharat  c
buffer deletecharat  c   1
substcount
else if   buffer charat  c           buffer charat  c   1
buffer setcharat  c
buffer deletecharat  c   1
substcount
else if   buffer charat  c           buffer charat  c   1
buffer setcharat  c
buffer deletecharat  c   1
substcount
else if   buffer charat  c           buffer charat  c   1
buffer setcharat  c
buffer deletecharat  c   1
substcount
else if   buffer charat  c           buffer charat  c   1
buffer setcharat  c
buffer deletecharat  c   1
substcount
/**
* undoes the changes made by substitute(). that are character pairs and
* character combinations. umlauts will remain as their corresponding vowel,
* as "ãâ" remains as "ss".
*/
private void resubstitute  stringbuffer buffer
for   int c   0  c < buffer length    c
if   buffer charat  c
char x   buffer charat  c   1
buffer setcharat  c  x
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1  new char        0  2
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1
else if   buffer charat  c
buffer setcharat  c
buffer insert  c   1