package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util collection
import java util arrays
import java util comparator
/** scorer for conjunctions, sets of queries, all of which are required. */
class conjunctionscorer extends scorer
private final scorer scorers
private boolean firsttime true
private boolean more
private final float coord
private int lastdoc  1
public conjunctionscorer similarity similarity  collection scorers  throws ioexception
this similarity   scorer scorers toarray new scorer
public conjunctionscorer similarity similarity  scorer scorers  throws ioexception
super similarity
this scorers   scorers
coord   getsimilarity   coord this scorers length  this scorers length
public int doc     return lastdoc
public boolean next   throws ioexception
if  firsttime
return init 0
else if  more
more   scorers next
return donext
private boolean donext   throws ioexception
int first 0
scorer lastscorer   scorers
scorer firstscorer
while  more     firstscorer scorers  doc   <  lastdoc lastscorer doc
more   firstscorer skipto lastdoc
lastscorer   firstscorer
first    first     scorers length 1   ? 0   first 1
return more
public boolean skipto int target  throws ioexception
if  firsttime
return init target
else if  more
more   scorers skipto target
return donext
// note... most of this could be done in the constructor
// thus skipping a check for firsttime per call to next() and skipto()
private boolean init int target  throws ioexception
firsttime false
more   scorers length>1
for  int i 0  i<scorers length  i
more   target  0 ? scorers next     scorers skipto target
if   more
return false
// sort the array the first time...
// we don't need to sort the array in any future calls because we know
// it will already start off sorted (all scorers on same doc).
// note that this comparator is not consistent with equals!
arrays sort scorers  new comparator                sort the array
public int compare object o1  object o2
return   scorer o1  doc       scorer o2  doc
donext
// if first-time skip distance is any predictor of
// scorer sparseness, then we should always try to skip first on
// those scorers.
// keep last scorer in it's last place (it will be the first
// to be skipped on), but reverse all of the others so that
// they will be skipped on in order of original high skip.
int end  scorers length 1  1
for  int i 0  i< end>>1   i
scorer tmp   scorers
scorers   scorers
scorers   tmp
return more
public float score   throws ioexception
float sum   0 0f
for  int i   0  i < scorers length  i
sum    scorers score
return sum   coord
public explanation explain int doc
throw new unsupportedoperationexception