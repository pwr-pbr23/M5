package org apache lucene document
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis tokenstream
import org apache lucene index indexwriter       for javadoc
import org apache lucene util parameter
import java io reader
import java io serializable
/**
a field is a section of a document.  each field has two parts, a name and a
value.  values may be free text, provided as a string or as a reader, or they
may be atomic keywords, which are not further processed.  such keywords may
be used to represent dates, urls, etc.  fields are optionally stored in the
index, so that they may be returned with hits on the document.
*/
public final class field extends abstractfield implements fieldable  serializable
/** specifies whether and how a field should be stored. */
public static final class store extends parameter implements serializable
private store string name
super name
/** store the original field value in the index in a compressed form. this is
* useful for long documents and for binary valued fields.
*/
public static final store compress   new store
/** store the original field value in the index. this is useful for short texts
* like a document's title which should be displayed with the results. the
* value is stored in its original form, i.e. no analyzer is used before it is
* stored.
*/
public static final store yes   new store
/** do not store the field value in the index. */
public static final store no   new store
/** specifies whether and how a field should be indexed. */
public static final class index extends parameter implements serializable
private index string name
super name
/** do not index the field value. this field can thus not be searched,
* but one can still access its contents provided it is
* {@link field.store stored}. */
public static final index no   new index
/** index the field's value so it can be searched. an analyzer will be used
* to tokenize and possibly further normalize the text before its
* terms will be stored in the index. this is useful for common text.
*/
public static final index tokenized   new index
/** index the field's value without using an analyzer, so it can be searched.
* as no analyzer is used the value will be stored as a single term. this is
* useful for unique ids like product numbers.
*/
public static final index un_tokenized   new index
/** index the field's value without an analyzer, and disable
* the storing of norms.  no norms means that index-time boosting
* and field length normalization will be disabled.  the benefit is
* less memory usage as norms take up one byte per indexed field
* for every document in the index.
* note that once you index a given field <i>with</i> norms enabled,
* disabling norms will have no effect.  in other words, for no_norms
* to have the above described effect on a field, all instances of that
* field must be indexed with no_norms from the beginning.
*/
public static final index no_norms   new index
/** specifies whether and how a field should have term vectors. */
public static final class termvector  extends parameter implements serializable
private termvector string name
super name
/** do not store term vectors.
*/
public static final termvector no   new termvector
/** store the term vectors of each document. a term vector is a list
* of the document's terms and their number of occurences in that document. */
public static final termvector yes   new termvector
/**
* store the term vector + token position information
*
* @see #yes
*/
public static final termvector with_positions   new termvector
/**
* store the term vector + token offset information
*
* @see #yes
*/
public static final termvector with_offsets   new termvector
/**
* store the term vector + token position and offset information
*
* @see #yes
* @see #with_positions
* @see #with_offsets
*/
public static final termvector with_positions_offsets   new termvector
/** the value of the field as a string, or null.  if null, the reader value,
* binary value, or tokenstream value is used.  exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public string stringvalue       return fieldsdata instanceof string ?  string fieldsdata   null
/** the value of the field as a reader, or null.  if null, the string value,
* binary value, or tokenstream value is used.  exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public reader readervalue       return fieldsdata instanceof reader ?  reader fieldsdata   null
/** the value of the field in binary, or null.  if null, the reader value,
* string value, or tokenstream value is used. exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public byte binaryvalue       return fieldsdata instanceof byte ?  byte fieldsdata   null
/** the value of the field as a tokesstream, or null.  if null, the reader value,
* string value, or binary value is used. exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public tokenstream tokenstreamvalue       return fieldsdata instanceof tokenstream ?  tokenstream fieldsdata   null
/** <p>expert: change the value of this field.  this can
*  be used during indexing to re-use a single field
*  instance to improve indexing speed by avoiding gc cost
*  of new'ing and reclaiming field instances.  typically
*  a single {@link document} instance is re-used as
*  well.  this helps most on small documents.</p>
*
*  <p>note that you should only use this method after the
*  field has been consumed (ie, the {@link document}
*  containing this field has been added to the index).
*  also, each field instance should only be used once
*  within a single {@link document} instance.  see <a
*  href="http://wiki.apache.org/lucene-java/improveindexingspeed">improveindexingspeed</a>
*  for details.</p> */
public void setvalue string value
fieldsdata   value
/** expert: change the value of this field.  see <a href="#setvalue(java.lang.string)">setvalue(string)</a>. */
public void setvalue reader value
fieldsdata   value
/** expert: change the value of this field.  see <a href="#setvalue(java.lang.string)">setvalue(string)</a>. */
public void setvalue byte value
fieldsdata   value
/** expert: change the value of this field.  see <a href="#setvalue(java.lang.string)">setvalue(string)</a>. */
public void setvalue tokenstream value
fieldsdata   value
/**
* create a field by specifying its name, value and how it will
* be saved in the index. term vectors will not be stored in the index.
*
* @param name the name of the field
* @param value the string to process
* @param store whether <code>value</code> should be stored in the index
* @param index whether the field should be indexed, and if so, if it should
*  be tokenized before indexing
* @throws nullpointerexception if name or value is <code>null</code>
* @throws illegalargumentexception if the field is neither stored nor indexed
*/
public field string name  string value  store store  index index
this name  value  store  index  termvector no
/**
* create a field by specifying its name, value and how it will
* be saved in the index.
*
* @param name the name of the field
* @param value the string to process
* @param store whether <code>value</code> should be stored in the index
* @param index whether the field should be indexed, and if so, if it should
*  be tokenized before indexing
* @param termvector whether term vector should be stored
* @throws nullpointerexception if name or value is <code>null</code>
* @throws illegalargumentexception in any of the following situations:
* <ul>
*  <li>the field is neither stored nor indexed</li>
*  <li>the field is not indexed but termvector is <code>termvector.yes</code></li>
* </ul>
*/
public field string name  string value  store store  index index  termvector termvector
if  name    null
throw new nullpointerexception
if  value    null
throw new nullpointerexception
if  name length      0    value length      0
throw new illegalargumentexception
if  index    index no    store    store no
throw new illegalargumentexception
if  index    index no    termvector    termvector no
throw new illegalargumentexception
this name   name intern              field names are interned
this fieldsdata   value
if  store    store yes
this isstored   true
this iscompressed   false
else if  store    store compress
this isstored   true
this iscompressed   true
else if  store    store no
this isstored   false
this iscompressed   false
else
throw new illegalargumentexception     store
if  index    index no
this isindexed   false
this istokenized   false
else if  index    index tokenized
this isindexed   true
this istokenized   true
else if  index    index un_tokenized
this isindexed   true
this istokenized   false
else if  index    index no_norms
this isindexed   true
this istokenized   false
this omitnorms   true
else
throw new illegalargumentexception     index
this isbinary   false
setstoretermvector termvector
/**
* create a tokenized and indexed field that is not stored. term vectors will
* not be stored.  the reader is read only when the document is added to the index,
* i.e. you may not close the reader until {@link indexwriter#adddocument(document)}
* has been called.
*
* @param name the name of the field
* @param reader the reader with the content
* @throws nullpointerexception if name or reader is <code>null</code>
*/
public field string name  reader reader
this name  reader  termvector no
/**
* create a tokenized and indexed field that is not stored, optionally with
* storing term vectors.  the reader is read only when the document is added to the index,
* i.e. you may not close the reader until {@link indexwriter#adddocument(document)}
* has been called.
*
* @param name the name of the field
* @param reader the reader with the content
* @param termvector whether term vector should be stored
* @throws nullpointerexception if name or reader is <code>null</code>
*/
public field string name  reader reader  termvector termvector
if  name    null
throw new nullpointerexception
if  reader    null
throw new nullpointerexception
this name   name intern              field names are interned
this fieldsdata   reader
this isstored   false
this iscompressed   false
this isindexed   true
this istokenized   true
this isbinary   false
setstoretermvector termvector
/**
* create a tokenized and indexed field that is not stored. term vectors will
* not be stored. this is useful for pre-analyzed fields.
* the tokenstream is read only when the document is added to the index,
* i.e. you may not close the tokenstream until {@link indexwriter#adddocument(document)}
* has been called.
*
* @param name the name of the field
* @param tokenstream the tokenstream with the content
* @throws nullpointerexception if name or tokenstream is <code>null</code>
*/
public field string name  tokenstream tokenstream
this name  tokenstream  termvector no
/**
* create a tokenized and indexed field that is not stored, optionally with
* storing term vectors.  this is useful for pre-analyzed fields.
* the tokenstream is read only when the document is added to the index,
* i.e. you may not close the tokenstream until {@link indexwriter#adddocument(document)}
* has been called.
*
* @param name the name of the field
* @param tokenstream the tokenstream with the content
* @param termvector whether term vector should be stored
* @throws nullpointerexception if name or tokenstream is <code>null</code>
*/
public field string name  tokenstream tokenstream  termvector termvector
if  name    null
throw new nullpointerexception
if  tokenstream    null
throw new nullpointerexception
this name   name intern              field names are interned
this fieldsdata   tokenstream
this isstored   false
this iscompressed   false
this isindexed   true
this istokenized   true
this isbinary   false
setstoretermvector termvector
/**
* create a stored field with binary value. optionally the value may be compressed.
*
* @param name the name of the field
* @param value the binary value
* @param store how <code>value</code> should be stored (compressed or not)
* @throws illegalargumentexception if store is <code>store.no</code>
*/
public field string name  byte value  store store
if  name    null
throw new illegalargumentexception
if  value    null
throw new illegalargumentexception
this name   name intern
this fieldsdata   value
if  store    store yes
this isstored   true
this iscompressed   false
else if  store    store compress
this isstored   true
this iscompressed   true
else if  store    store no
throw new illegalargumentexception
else
throw new illegalargumentexception     store
this isindexed     false
this istokenized   false
this isbinary      true
setstoretermvector termvector no