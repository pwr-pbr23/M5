package org apache lucene benchmark bytask
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io file
import java io filereader
import java io reader
import org apache lucene benchmark bytask utils algorithm
import org apache lucene benchmark bytask utils config
/**
* run the benchmark algorithm.
* <p>usage: java benchmark  algorithm-file
* <ol>
* <li>read algorithm.</li>
* <li> run the algorithm.</li>
* </ol>
* things to be added/fixed in "benchmarking by tasks":
* <ol>
* <li>todo - report into excel and/or graphed view.</li>
* <li>todo - perf comparison between lucene releases over the years.</li>
* <li>todo - perf report adequate to include in lucene nightly build site? (so we can easily track performance changes.)</li>
* <li>todo - add overall time control for repeated execution (vs. current by-count only).</li>
* <li>todo - query maker that is based on index statistics.</li>
* </ol>
*/
public class benchmark
private perfrundata rundata
private algorithm algorithm
private boolean executed
public benchmark  reader algreader  throws exception
// prepare run data
try
rundata   new perfrundata new config algreader
catch  exception e
e printstacktrace
throw new exception   e
// parse algorithm
try
algorithm   new algorithm rundata
catch  exception e
throw new exception   e
public synchronized void  execute   throws exception
if  executed
throw new illegalstateexception
executed   true
rundata setstarttimemillis
algorithm execute
/**
* run the benchmark algorithm.
* @param args benchmark config and algorithm files
*/
public static void main string args
// verify command line args
if  args length < 1
system err println
system exit 1
// verify input files
file algfile   new file args
if   algfile exists       algfile isfile       algfile canread
system err println   algfile getabsolutepath
system exit 1
system out println   algfile getabsolutepath
benchmark benchmark   null
try
benchmark   new benchmark new filereader algfile
catch  exception e
e printstacktrace
system exit 1
system out println
system out println benchmark getalgorithm   tostring
// execute
try
benchmark execute
catch  exception e
system err println   e getmessage
e printstacktrace
system out println
system out println
system out println
/**
* @return returns the algorithm.
*/
public algorithm getalgorithm
return algorithm
/**
* @return returns the rundata.
*/
public perfrundata getrundata
return rundata