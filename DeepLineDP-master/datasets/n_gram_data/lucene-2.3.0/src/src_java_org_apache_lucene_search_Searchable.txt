package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene document document
import org apache lucene document fieldselector
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index corruptindexexception
import java io ioexception           for javadoc
/** the interface for search implementations.
*
* <p>searchable is the abstract network protocol for searching.
* implementations provide search over a single index, over multiple
* indices, and over indices on remote servers.
*
* <p>queries, filters and sort criteria are designed to be compact so that
* they may be efficiently passed to a remote index, with only the top-scoring
* hits being returned, rather than every non-zero scoring hit.
*/
public interface searchable extends java rmi remote
/** lower-level search api.
*
* <p>{@link hitcollector#collect(int,float)} is called for every non-zero
* scoring document.
* <br>hitcollector-based access to remote indexes is discouraged.
*
* <p>applications should only use this if they need <i>all</i> of the
* matching documents.  the high-level search api ({@link
* searcher#search(query)}) is usually more efficient, as it skips
* non-high-scoring hits.
*
* @param weight to match documents
* @param filter if non-null, a bitset used to eliminate some documents
* @param results to receive hits
* @throws booleanquery.toomanyclauses
*/
void search weight weight  filter filter  hitcollector results
throws ioexception
/** frees resources associated with this searcher.
* be careful not to call this method while you are still using objects
* like {@link hits}.
*/
void close   throws ioexception
/** expert: returns the number of documents containing <code>term</code>.
* called by search code to compute term weights.
* @see indexreader#docfreq(term)
*/
int docfreq term term  throws ioexception
/** expert: for each term in the terms array, calculates the number of
* documents containing <code>term</code>. returns an array with these
* document frequencies. used to minimize number of remote calls.
*/
int docfreqs term terms  throws ioexception
/** expert: returns one greater than the largest possible document number.
* called by search code to compute term weights.
* @see indexreader#maxdoc()
*/
int maxdoc   throws ioexception
/** expert: low-level search implementation.  finds the top <code>n</code>
* hits for <code>query</code>, applying <code>filter</code> if non-null.
*
* <p>called by {@link hits}.
*
* <p>applications should usually call {@link searcher#search(query)} or
* {@link searcher#search(query,filter)} instead.
* @throws booleanquery.toomanyclauses
*/
topdocs search weight weight  filter filter  int n  throws ioexception
/** expert: returns the stored fields of document <code>i</code>.
* called by {@link hitcollector} implementations.
* @see indexreader#document(int)
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
document doc int i  throws corruptindexexception  ioexception
/**
* get the {@link org.apache.lucene.document.document} at the <code>n</code><sup>th</sup> position. the {@link org.apache.lucene.document.fieldselector}
* may be used to determine what {@link org.apache.lucene.document.field}s to load and how they should be loaded.
*
* <b>note:</b> if the underlying reader (more specifically, the underlying <code>fieldsreader</code>) is closed before the lazy {@link org.apache.lucene.document.field} is
* loaded an exception may be thrown.  if you want the value of a lazy {@link org.apache.lucene.document.field} to be available after closing you must
* explicitly load it or fetch the document again with a new loader.
*
*
* @param n get the document at the <code>n</code><sup>th</sup> position
* @param fieldselector the {@link org.apache.lucene.document.fieldselector} to use to determine what fields should be loaded on the document.  may be null, in which case all fields will be loaded.
* @return the stored fields of the {@link org.apache.lucene.document.document} at the nth position
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*
* @see indexreader#document(int, fieldselector)
* @see org.apache.lucene.document.fieldable
* @see org.apache.lucene.document.fieldselector
* @see org.apache.lucene.document.setbasedfieldselector
* @see org.apache.lucene.document.loadfirstfieldselector
*/
document doc int n  fieldselector fieldselector  throws corruptindexexception  ioexception
/** expert: called to re-write queries into primitive queries.
* @throws booleanquery.toomanyclauses
*/
query rewrite query query  throws ioexception
/** expert: low-level implementation method
* returns an explanation that describes how <code>doc</code> scored against
* <code>weight</code>.
*
* <p>this is intended to be used in developing similarity implementations,
* and, for good performance, should not be displayed with every hit.
* computing an explanation is as expensive as executing the query over the
* entire index.
* <p>applications should call {@link searcher#explain(query, int)}.
* @throws booleanquery.toomanyclauses
*/
explanation explain weight weight  int doc  throws ioexception
/** expert: low-level search implementation with arbitrary sorting.  finds
* the top <code>n</code> hits for <code>query</code>, applying
* <code>filter</code> if non-null, and sorting the hits by the criteria in
* <code>sort</code>.
*
* <p>applications should usually call {@link
* searcher#search(query,filter,sort)} instead.
* @throws booleanquery.toomanyclauses
*/
topfielddocs search weight weight  filter filter  int n  sort sort
throws ioexception