package org apache lucene analysis br
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* a stemmer for brazilian words.
*/
public class brazilianstemmer
/**
* changed term
*/
private   string term
private   string ct
private   string r1
private   string r2
private   string rv
public brazilianstemmer
/**
* stemms the given term to an unique <tt>discriminator</tt>.
*
* @param term  the term that should be stemmed.
* @return      discriminator for <tt>term</tt>
*/
protected string stem  string term
boolean altered   false      altered the term
// creates ct
createct term
if    isindexable  ct
return null
if    isstemmable  ct
return ct
r1   getr1 ct
r2   getr1 r1
rv   getrv ct
term   term      ct
altered   step1
if   altered
altered   step2
if  altered
step3
else
step4
step5
return ct
/**
* checks a term if it can be processed correctly.
*
* @return  true if, and only if, the given term consists in letters.
*/
private boolean isstemmable  string term
for   int c   0  c < term length    c
// discard terms that contain non-letter characters.
if    character isletter term charat c
return false
return true
/**
* checks a term if it can be processed indexed.
*
* @return  true if it can be indexed
*/
private boolean isindexable  string term
return  term length   < 30      term length   > 2
/**
* see if string is 'a','e','i','o','u'
*
* @return true if is vowel
*/
private boolean isvowel  char value
return  value
value
value
value
value
/**
* gets r1
*
* r1 - is the region after the first non-vowel follwing a vowel,
*      or is the null region at the end of the word if there is
*      no such non-vowel.
*
* @return null or a string representing r1
*/
private string getr1  string value
int     i
int     j
// be-safe !!!
if  value    null
return null
// find 1st vowel
i   value length   1
for  j 0   j < i   j
if  isvowel value charat j
break
if    j < i
return null
// find 1st non-vowel
for     j < i   j
if    isvowel value charat j
break
if    j < i
return null
return value substring j 1
/**
* gets rv
*
* rv - if the second letter is a consoant, rv is the region after
*      the next following vowel,
*
*      or if the first two letters are vowels, rv is the region
*      after the next consoant,
*
*      and otherwise (consoant-vowel case) rv is the region after
*      the third letter.
*
*      but rv is the end of the word if this positions cannot be
*      found.
*
* @return null or a string representing rv
*/
private string getrv  string value
int     i
int     j
// be-safe !!!
if  value    null
return null
i   value length   1
// rv - if the second letter is a consoant, rv is the region after
//      the next following vowel,
if   i > 0      isvowel value charat 1
// find 1st vowel
for  j 2   j < i   j
if  isvowel value charat j
break
if  j < i
return value substring j 1
// rv - or if the first two letters are vowels, rv is the region
//      after the next consoant,
if   i > 1
isvowel value charat 0
isvowel value charat 1
// find 1st consoant
for  j 2   j < i   j
if   isvowel value charat j
break
if  j < i
return value substring j 1
// rv - and otherwise (consoant-vowel case) rv is the region after
//      the third letter.
if  i > 2
return value substring 3
return null
/**
* 1) turn to lowercase
* 2) remove accents
* 3) ãâ£ -> a ; ãâµ -> o
* 4) ãâ§ -> c
*
* @return null or a string transformed
*/
private string changeterm  string value
int     j
string  r
// be-safe !!!
if  value    null
return null
value   value tolowercase
for  j 0   j < value length     j
if   value charat j
value charat j
value charat j
r  r       continue
if   value charat j
value charat j
r  r       continue
if  value charat j
r  r       continue
if   value charat j
value charat j
value charat j
r  r       continue
if   value charat j
value charat j
r  r       continue
if  value charat j
r  r       continue
if  value charat j
r  r       continue
r  r  value charat j
return r
/**
* check if a string ends with a suffix
*
* @return true if the string ends with the specified suffix
*/
private boolean suffix  string value  string suffix
// be-safe !!!
if   value    null      suffix    null
return false
if  suffix length   > value length
return false
return value substring value length   suffix length    equals suffix
/**
* replace a string suffix by another
*
* @return the replaced string
*/
private string replacesuffix  string value  string toreplace  string changeto
string vvalue
// be-safe !!!
if   value    null
toreplace    null
changeto    null
return value
vvalue   removesuffix value toreplace
if  value equals vvalue
return value
else
return vvalue   changeto
/**
* remove a string suffix
*
* @return the string without the suffix
*/
private string removesuffix  string value  string toremove
// be-safe !!!
if   value    null
toremove    null
suffix value toremove
return value
return value substring 0 value length   toremove length
/**
* see if a suffix is preceded by a string
*
* @return true if the suffix is preceded
*/
private boolean suffixpreceded  string value  string suffix  string preceded
// be-safe !!!
if   value    null
suffix    null
preceded    null
suffix value suffix
return false
return suffix removesuffix value suffix  preceded
/**
* creates ct (changed term) , substituting * 'ãâ£' and 'ãâµ' for 'a~' and 'o~'.
*/
private void createct  string term
ct   changeterm term
if  ct length   < 2  return
// if the first character is ... , remove it
if   ct charat 0
ct charat 0
ct charat 0
ct charat 0
ct charat 0
ct charat 0
ct charat 0
ct charat 0
ct   ct substring 1
if  ct length   < 2  return
// if the last character is ... , remove it
if   ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct charat ct length   1
ct   ct substring 0 ct length   1
/**
* standart suffix removal.
* search for the longest among the following suffixes, and perform
* the following actions:
*
* @return false if no ending was removed
*/
private boolean step1
if  ct    null  return false
// suffix lenght = 7
if  suffix ct       suffix r2
ct   replacesuffix ct        return true
// suffix lenght = 6
if  ct length   >  6
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
replacesuffix ct        return true
if  suffix ct       suffix r2
ct   replacesuffix ct        return true
if  suffix ct       suffix r1
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
// suffix lenght = 5
if  ct length   >  5
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   replacesuffix ct        return true
if  suffix ct       suffix r2
ct   replacesuffix ct        return true
if  suffix ct       suffix r2
ct   replacesuffix ct        return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
// suffix lenght = 4
if  ct length   >  4
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct
suffix rv
suffixpreceded ct
ct   replacesuffix ct        return true
// suffix lenght = 3
if  ct length   >  3
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct       suffix r2
ct   removesuffix ct      return true
if  suffix ct
suffix rv
suffixpreceded ct
ct   replacesuffix ct        return true
// no ending was removed by step1
return false
/**
* verb suffixes.
*
* search for the longest among the following suffixes in rv,
* and if found, delete.
*
* @return false if no ending was removed
*/
private boolean step2
if  rv    null  return false
// suffix lenght = 7
if  rv length   >  7
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// suffix lenght = 6
if  rv length   >  6
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// suffix lenght = 5
if  rv length   >  5
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// suffix lenght = 4
if  rv length   >  4
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// suffix lenght = 3
if  rv length   >  3
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// suffix lenght = 2
if  rv length   >  2
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
if  suffix rv
ct   removesuffix ct      return true
// no ending was removed by step2
return false
/**
* delete suffix 'i' if in rv and preceded by 'c'
*
*/
private void step3
if  rv    null  return
if  suffix rv       suffixpreceded rv
ct   removesuffix ct
/**
* residual suffix
*
* if the word ends with one of the suffixes (os a i o ãâ¡ ãâ­ ãâ³)
* in rv, delete it
*
*/
private void step4
if  rv    null  return
if  suffix rv
ct   removesuffix ct      return
if  suffix rv
ct   removesuffix ct      return
if  suffix rv
ct   removesuffix ct      return
if  suffix rv
ct   removesuffix ct      return
/**
* if the word ends with one of ( e ãâ© ãâª) in rv,delete it,
* and if preceded by 'gu' (or 'ci') with the 'u' (or 'i') in rv,
* delete the 'u' (or 'i')
*
* or if the word ends ãâ§ remove the cedilha
*
*/
private void step5
if  rv    null  return
if  suffix rv
if  suffixpreceded rv
ct   removesuffix ct
ct   removesuffix ct
return
if  suffixpreceded rv
ct   removesuffix ct
ct   removesuffix ct
return
ct   removesuffix ct      return
/**
* for log and debug purpose
*
* @return  term, ct, rv, r1 and r2
*/
public string log
return     term
ct
rv
r1
r2