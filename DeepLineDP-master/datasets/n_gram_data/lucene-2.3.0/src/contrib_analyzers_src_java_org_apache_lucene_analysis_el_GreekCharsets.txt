package org apache lucene analysis el
/**
* copyright 2005 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* greekcharsets class contains encodings schemes (charsets) and tolowercase() method implementation
* for greek characters in unicode, iso-8859-7 and microsoft windows cp1253.
* each encoding scheme contains lowercase (positions 0-35) and uppercase (position 36-68) characters,
* including accented ones. one should be able to add other encoding schemes (see rfc 1947) by adding
* the definition of a new charset as well as the required logic in the tolowercase() method.
*
* @author  panagiotis astithas, past@ebs.gr
*/
public class greekcharsets
// unicode greek charset
public static char unicodegreek
// lower case
// upper case
// iso-8859-7 charset (elot-928)
public static char iso
// lower case
0xc0
0xdc
0xdd
0xde
0xdf
0xe0
0xe1
0xe2
0xe3
0xe4
0xe5
0xe6
0xe7
0xe8
0xe9
0xea
0xeb
0xec
0xed
0xee
0xef
0xf0
0xf1
0xf2
0xf3
0xf4
0xf5
0xf6
0xf7
0xf8
0xf9
0xfa
0xfb
0xfc
0xfd
0xfe
// upper case
0xb6
0xb8
0xb9
0xba
0xbc
0xbe
0xbf
0xc1
0xc2
0xc3
0xc4
0xc5
0xc6
0xc7
0xc8
0xc9
0xca
0xcb
0xcc
0xcd
0xce
0xcf
0xd0
0xd1
0xd3
0xd4
0xd5
0xd6
0xd7
0xd8
0xd9
0xda
0xdb
// cp1253 charset
public static char cp1253
// lower case
0xc0
0xdc
0xdd
0xde
0xdf
0xe0
0xe1
0xe2
0xe3
0xe4
0xe5
0xe6
0xe7
0xe8
0xe9
0xea
0xeb
0xec
0xed
0xee
0xef
0xf0
0xf1
0xf2
0xf3
0xf4
0xf5
0xf6
0xf7
0xf8
0xf9
0xfa
0xfb
0xfc
0xfd
0xfe
// upper case
0xa2
0xb8
0xb9
0xba
0xbc
0xbe
0xbf
0xc1
0xc2
0xc3
0xc4
0xc5
0xc6
0xc7
0xc8
0xc9
0xca
0xcb
0xcc
0xcd
0xce
0xcf
0xd0
0xd1
0xd3
0xd4
0xd5
0xd6
0xd7
0xd8
0xd9
0xda
0xdb
public static char tolowercase char letter  char charset
if  charset    unicodegreek
// first deal with lower case, not accented letters
if  letter >       letter <
// special case 'small final sigma', where we return 'small sigma'
if  letter
return
else
return letter
// then deal with lower case, accented letters
// alpha with acute
if  letter
return
// epsilon with acute
if  letter
return
// eta with acute
if  letter
return
// iota with acute, iota with diaeresis, iota with acute and diaeresis
if  letter         letter         letter
return
// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if  letter         letter         letter
return
// omicron with acute
if  letter
return
// omega with acute
if  letter
return
// after that, deal with upper case, not accented letters
if  letter >       letter <
return  char   letter   32
// finally deal with upper case, accented letters
// alpha with acute
if  letter
return
// epsilon with acute
if  letter
return
// eta with acute
if  letter
return
// iota with acute, iota with diaeresis
if  letter         letter
return
// upsilon with acute, upsilon with diaeresis
if  letter         letter
return
// omicron with acute
if  letter
return
// omega with acute
if  letter
return
else if  charset    iso
// first deal with lower case, not accented letters
if  letter >  0xe1    letter <  0xf9
// special case 'small final sigma', where we return 'small sigma'
if  letter    0xf2
return 0xf3
else
return letter
// then deal with lower case, accented letters
// alpha with acute
if  letter    0xdc
return 0xe1
// epsilon with acute
if  letter    0xdd
return 0xe5
// eta with acute
if  letter    0xde
return 0xe7
// iota with acute, iota with diaeresis, iota with acute and diaeresis
if  letter    0xdf    letter    0xfa    letter    0xc0
return
// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if  letter    0xfd    letter    0xfb    letter    0xe0
return 0xf5
// omicron with acute
if  letter    0xfc
return 0xef
// omega with acute
if  letter    0xfe
return 0xf9
// after that, deal with upper case, not accented letters
if  letter >  0xc1    letter <  0xd9
return  char   letter   32
// finally deal with upper case, accented letters
// alpha with acute
if  letter    0xb6
return 0xe1
// epsilon with acute
if  letter    0xb8
return 0xe5
// eta with acute
if  letter    0xb9
return 0xe7
// iota with acute, iota with diaeresis
if  letter    0xba    letter    0xda
return 0xe9
// upsilon with acute, upsilon with diaeresis
if  letter    0xbe    letter    0xdb
return 0xf5
// omicron with acute
if  letter    0xbc
return 0xef
// omega with acute
if  letter    0xbf
return 0xf9
else if  charset    cp1253
// first deal with lower case, not accented letters
if  letter >  0xe1    letter <  0xf9
// special case 'small final sigma', where we return 'small sigma'
if  letter    0xf2
return 0xf3
else
return letter
// then deal with lower case, accented letters
// alpha with acute
if  letter    0xdc
return 0xe1
// epsilon with acute
if  letter    0xdd
return 0xe5
// eta with acute
if  letter    0xde
return 0xe7
// iota with acute, iota with diaeresis, iota with acute and diaeresis
if  letter    0xdf    letter    0xfa    letter    0xc0
return
// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if  letter    0xfd    letter    0xfb    letter    0xe0
return 0xf5
// omicron with acute
if  letter    0xfc
return 0xef
// omega with acute
if  letter    0xfe
return 0xf9
// after that, deal with upper case, not accented letters
if  letter >  0xc1    letter <  0xd9
return  char   letter   32
// finally deal with upper case, accented letters
// alpha with acute
if  letter    0xa2
return 0xe1
// epsilon with acute
if  letter    0xb8
return 0xe5
// eta with acute
if  letter    0xb9
return 0xe7
// iota with acute, iota with diaeresis
if  letter    0xba    letter    0xda
return 0xe9
// upsilon with acute, upsilon with diaeresis
if  letter    0xbe    letter    0xdb
return 0xf5
// omicron with acute
if  letter    0xbc
return 0xef
// omega with acute
if  letter    0xbf
return 0xf9
return character tolowercase letter