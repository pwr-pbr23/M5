package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index termdocs
/** expert: a <code>scorer</code> for documents matching a <code>term</code>.
*/
final class termscorer extends scorer
private weight weight
private termdocs termdocs
private byte norms
private float weightvalue
private int doc
private final int docs   new int             buffered doc numbers
private final int freqs   new int            buffered term freqs
private int pointer
private int pointermax
private static final int score_cache_size   32
private float scorecache   new float
/** construct a <code>termscorer</code>.
* @param weight the weight of the <code>term</code> in the query.
* @param td an iterator over the documents matching the <code>term</code>.
* @param similarity the </code>similarity</code> implementation to be used for score computations.
* @param norms the field norms of the document fields for the <code>term</code>.
*/
termscorer weight weight  termdocs td  similarity similarity
byte norms
super similarity
this weight   weight
this termdocs   td
this norms   norms
this weightvalue   weight getvalue
for  int i   0  i < score_cache_size  i
scorecache   getsimilarity   tf i    weightvalue
public void score hitcollector hc  throws ioexception
next
score hc  integer max_value
protected boolean score hitcollector c  int end  throws ioexception
similarity similarity   getsimilarity            cache sim in local
float normdecoder   similarity getnormdecoder
while  doc < end                                 for docs in window
int f   freqs
float score                                    compute tf f  weight
f < score_cache_size                         check cache
? scorecache                             cache hit
similarity tf f  weightvalue              cache miss
score    normdecoder   0xff]        normalize for field
c collect doc  score                           collect score
if    pointer >  pointermax
pointermax   termdocs read docs  freqs       refill buffers
if  pointermax    0
pointer   0
else
termdocs close                             close stream
doc   integer max_value                    set to sentinel value
return false
doc   docs
return true
/** returns the current document number matching the query.
* initially invalid, until {@link #next()} is called the first time.
*/
public int doc     return doc
/** advances to the next document matching the query.
* <br>the iterator over the matching documents is buffered using
* {@link termdocs#read(int[],int[])}.
* @return true iff there is another document matching the query.
*/
public boolean next   throws ioexception
pointer
if  pointer >  pointermax
pointermax   termdocs read docs  freqs         refill buffer
if  pointermax    0
pointer   0
else
termdocs close                               close stream
doc   integer max_value                      set to sentinel value
return false
doc   docs
return true
public float score
int f   freqs
float raw                                        compute tf f  weight
f < score_cache_size                           check cache
? scorecache                                cache hit
getsimilarity   tf f  weightvalue            cache miss
return raw   similarity decodenorm norms      normalize for field
/** skips to the first match beyond the current whose document number is
* greater than or equal to a given target.
* <br>the implementation uses {@link termdocs#skipto(int)}.
* @param target the target document number.
* @return true iff there is such a match.
*/
public boolean skipto int target  throws ioexception
// first scan in cache
for  pointer    pointer < pointermax  pointer
if  docs >  target
doc   docs
return true
// not found in cache, seek underlying stream
boolean result   termdocs skipto target
if  result
pointermax   1
pointer   0
docs   doc   termdocs doc
freqs   termdocs freq
else
doc   integer max_value
return result
/** returns an explanation of the score for a document.
* <br>when this method is used, the {@link #next()} method
* and the {@link #score(hitcollector)} method should not be used.
* @param doc the document number for the explanation.
*/
public explanation explain int doc  throws ioexception
termquery query    termquery weight getquery
explanation tfexplanation   new explanation
int tf   0
while  pointer < pointermax
if  docs    doc
tf   freqs
pointer
if  tf    0
if  termdocs skipto doc
if  termdocs doc      doc
tf   termdocs freq
termdocs close
tfexplanation setvalue getsimilarity   tf tf
tfexplanation setdescription   query getterm     tf
return tfexplanation
/** returns a string representation of this <code>termscorer</code>. */
public string tostring     return     weight