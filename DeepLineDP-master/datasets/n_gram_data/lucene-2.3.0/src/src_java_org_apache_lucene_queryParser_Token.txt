/* generated by:javacc: do not edit this line. token.java version 3.0 */
package org apache lucene queryparser
/**
* describes the input token stream.
*/
public class token
/**
* an integer that describes the kind of this token.  this numbering
* system is determined by javaccparser, and a table of these numbers is
* stored in the file ...constants.java.
*/
public int kind
/**
* beginline and begincolumn describe the position of the first character
* of this token; endline and endcolumn describe the position of the
* last character of this token.
*/
public int beginline  begincolumn  endline  endcolumn
/**
* the string image of the token.
*/
public string image
/**
* a reference to the next regular (non-special) token from the input
* stream.  if this is the last token from the input stream, or if the
* token manager has not read tokens beyond this one, this field is
* set to null.  this is true only if this token is also a regular
* token.  otherwise, see below for a description of the contents of
* this field.
*/
public token next
/**
* this field is used to access special tokens that occur prior to this
* token, but after the immediately preceding regular (non-special) token.
* if there are no such special tokens, this field is set to null.
* when there are more than one such special token, this field refers
* to the last of these special tokens, which in turn refers to the next
* previous special token through its specialtoken field, and so on
* until the first special token (whose specialtoken field is null).
* the next fields of special tokens refer to other special tokens that
* immediately follow it (without an intervening regular token).  if there
* is no such token, this field is null.
*/
public token specialtoken
/**
* returns the image.
*/
public string tostring
return image
/**
* returns a new token object, by default. however, if you want, you
* can create and return subclass objects based on the value of ofkind.
* simply add the cases to the switch for all those special cases.
* for example, if you have a subclass of token called idtoken that
* you want to create if ofkind is id, simlpy add something like :
*
*    case myparserconstants.id : return new idtoken();
*
* to the following switch statement. then you can cast matchedtoken
* variable to the appropriate type and use it in your lexical actions.
*/
public static final token newtoken int ofkind
switch ofkind
default   return new token