package org apache lucene index memory
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene analysis token
import org apache lucene analysis tokenfilter
import org apache lucene analysis tokenstream
/**
* injects additional tokens for synonyms of token terms fetched from the
* underlying child stream; the child stream must deliver lowercase tokens
* for synonyms to be found.
*
* @author whoschek.at.lbl.dot.gov
*/
public class synonymtokenfilter extends tokenfilter
/** the token.type used to indicate a synonym to higher level filters. */
public static final string synonym_token_type
private final synonymmap synonyms
private final int maxsynonyms
private string stack   null
private int index   0
private token current   null
private int todo   0
/**
* creates an instance for the given underlying stream and synonym table.
*
* @param input
*            the underlying child token stream
* @param synonyms
*            the map used to extract synonyms for terms
* @param maxsynonyms
*            the maximum number of synonym tokens to return per underlying
*            token word (a value of integer.max_value indicates unlimited)
*/
public synonymtokenfilter tokenstream input  synonymmap synonyms  int maxsynonyms
super input
if  input    null
throw new illegalargumentexception
if  synonyms    null
throw new illegalargumentexception
if  maxsynonyms < 0
throw new illegalargumentexception
this synonyms   synonyms
this maxsynonyms   maxsynonyms
/** returns the next token in the stream, or null at eos. */
public token next   throws ioexception
token token
while  todo > 0    index < stack length       pop from stack
token   createtoken stack  current
if  token    null
todo
return token
token   input next
if  token    null  return null     eos  iterator exhausted
stack   synonyms getsynonyms token termtext        push onto stack
if  stack length > maxsynonyms  randomize stack
index   0
current   token
todo   maxsynonyms
return token
/**
* creates and returns a token for the given synonym of the current input
* token; override for custom (stateless or stateful) behaviour, if desired.
*
* @param synonym
*            a synonym for the current token's term
* @param current
*            the current token from the underlying child stream
* @return a new token, or null to indicate that the given synonym should be
*         ignored
*/
protected token createtoken string synonym  token current
token token   new token
synonym  current startoffset    current endoffset    synonym_token_type
token setpositionincrement 0
return token
/**
* randomize synonyms to later sample a subset. uses constant random seed
* for reproducability. uses "drand", a simple, fast, uniform pseudo-random
* number generator with medium statistical quality (multiplicative
* congruential method), producing integers in the range [integer.min_value,
* integer.max_value].
*/
private static void randomize object arr
int seed   1234567     constant
int randomstate   4 seed   1
//    random random = new random(seed); // unnecessary overhead
int len   arr length
for  int i 0  i < len 1  i
randomstate    0x278dde6d     z i 1  a z i   mod 2  32
int r   randomstate %  len i
if  r < 0  r    r     e g   9 % 2     1
//      int r = random.nextint(len-i);
// swap arr[i, i+r]
object tmp   arr
arr   arr
arr   tmp