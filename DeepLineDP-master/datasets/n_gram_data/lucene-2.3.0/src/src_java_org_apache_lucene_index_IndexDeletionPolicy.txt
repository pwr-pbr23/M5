package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util list
import java io ioexception
/**
* <p>expert: policy for deletion of stale {@link indexcommitpoint index commits}.
*
* <p>implement this interface, and pass it to one
* of the {@link indexwriter} or {@link indexreader}
* constructors, to customize when older
* {@link indexcommitpoint point-in-time commits}
* are deleted from the index directory.  the default deletion policy
* is {@link keeponlylastcommitdeletionpolicy}, which always
* removes old commits as soon as a new commit is done (this
* matches the behavior before 2.2).</p>
*
* <p>one expected use case for this (and the reason why it
* was first created) is to work around problems with an
* index directory accessed via filesystems like nfs because
* nfs does not provide the "delete on last close" semantics
* that lucene's "point in time" search normally relies on.
* by implementing a custom deletion policy, such as "a
* commit is only removed once it has been stale for more
* than x minutes", you can give your readers time to
* refresh to the new commit before {@link indexwriter}
* removes the old commits.  note that doing so will
* increase the storage requirements of the index.  see <a
* target="top"
* href="http://issues.apache.org/jira/browse/lucene-710">lucene-710</a>
* for details.</p>
*/
public interface indexdeletionpolicy
/**
* <p>this is called once when a writer is first
* instantiated to give the policy a chance to remove old
* commit points.</p>
*
* <p>the writer locates all index commits present in the
* index directory and calls this method.  the policy may
* choose to delete some of the commit points, doing so by
* calling method {@link indexcommitpoint#delete delete()}
* of {@link indexcommitpoint}.</p>
*
* <p><u>note:</u> the last commitpoint is the most recent one,
* i.e. the "front index state". be careful not to delete it,
* unless you know for sure what you are doing, and unless
* you can afford to lose the index content while doing that.
*
* @param commits list of current
* {@link indexcommitpoint point-in-time commits},
*  sorted by age (the 0th one is the oldest commit).
*/
public void oninit list commits  throws ioexception
/**
* <p>this is called each time the writer completed a commit.
* this gives the policy a chance to remove old commit points
* with each commit.</p>
*
* <p>the policy may now choose to delete old commit points
* by calling method {@link indexcommitpoint#delete delete()}
* of {@link indexcommitpoint}.</p>
*
* <p>if writer has <code>autocommit = true</code> then
* this method will in general be called many times during
* one instance of {@link indexwriter}.  if
* <code>autocommit = false</code> then this method is
* only called once when {@link indexwriter#close} is
* called, or not at all if the {@link indexwriter#abort}
* is called.
*
* <p><u>note:</u> the last commitpoint is the most recent one,
* i.e. the "front index state". be careful not to delete it,
* unless you know for sure what you are doing, and unless
* you can afford to lose the index content while doing that.
*
* @param commits list of {@link indexcommitpoint},
*  sorted by age (the 0th one is the oldest commit).
*/
public void oncommit list commits  throws ioexception