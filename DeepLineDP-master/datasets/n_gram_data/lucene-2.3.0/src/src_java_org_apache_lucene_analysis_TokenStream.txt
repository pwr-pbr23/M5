package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index payload
import java io ioexception
/** a tokenstream enumerates the sequence of tokens, either from
fields of a document or from query text.
<p>
this is an abstract class.  concrete subclasses are:
<ul>
<li>{@link tokenizer}, a tokenstream
whose input is a reader; and
<li>{@link tokenfilter}, a tokenstream
whose input is another tokenstream.
</ul>
note: subclasses must override at least one of {@link
#next()} or {@link #next(token)}.
*/
public abstract class tokenstream
/** returns the next token in the stream, or null at eos.
*  the returned token is a "full private copy" (not
*  re-used across calls to next()) but will be slower
*  than calling {@link #next(token)} instead.. */
public token next   throws ioexception
token result   next new token
if  result    null
payload p   result getpayload
if  p    null
result setpayload  payload  p clone
return result
/** returns the next token in the stream, or null at eos.
*  when possible, the input token should be used as the
*  returned token (this gives fastest tokenization
*  performance), but this is not required and a new token
*  may be returned. callers may re-use a single token
*  instance for successive calls to this method.
*  <p>
*  this implicitly defines a "contract" between
*  consumers (callers of this method) and
*  producers (implementations of this method
*  that are the source for tokens):
*  <ul>
*   <li>a consumer must fully consume the previously
*       returned token before calling this method again.</li>
*   <li>a producer must call {@link token#clear()}
*       before setting the fields in it & returning it</li>
*  </ul>
*  note that a {@link tokenfilter} is considered a consumer.
*  @param result a token that may or may not be used to return
*  @return next token in the stream or null if end-of-stream was hit
*/
public token next token result  throws ioexception
return next
/** resets this stream to the beginning. this is an
*  optional operation, so subclasses may or may not
*  implement this method. reset() is not needed for
*  the standard indexing process. however, if the tokens
*  of a tokenstream are intended to be consumed more than
*  once, it is necessary to implement reset().
*/
public void reset   throws ioexception
/** releases resources associated with this stream. */
public void close   throws ioexception