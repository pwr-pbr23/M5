package org apache lucene analysis ru
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* russian stemming algorithm implementation (see http://snowball.sourceforge.net for detailed description).
*
*
* @version $id$
*/
class russianstemmer
private char charset
// positions of rv, r1 and r2 respectively
private int rv  r1  r2
// letters (currently unused letters are commented out)
private final static char a   0
//private final static char b = 1;
private final static char v   2
private final static char g   3
//private final static char d = 4;
private final static char e   5
//private final static char zh = 6;
//private final static char z = 7;
private final static char i   8
private final static char i_   9
//private final static char k = 10;
private final static char l   11
private final static char m   12
private final static char n   13
private final static char o   14
//private final static char p = 15;
//private final static char r = 16;
private final static char s   17
private final static char t   18
private final static char u   19
//private final static char f = 20;
private final static char x   21
//private final static char ts = 22;
//private final static char ch = 23;
private final static char sh   24
private final static char shch   25
//private final static char hard = 26;
private final static char y   27
private final static char soft   28
private final static char ae   29
private final static char iu   30
private final static char ia   31
// stem definitions
private static char vowels     a  e  i  o  u  y  ae  iu  ia
private static char perfectivegerundendings1
v
v  sh  i
v  sh  i  s  soft
private static char perfectivegerund1predessors
a
ia
private static char perfectivegerundendings2       i  v
y  v
i  v  sh  i
y  v  sh  i
i  v  sh  i  s  soft
y  v  sh  i  s  soft
private static char adjectiveendings
e  e
i  e
y  e
o  e
e  i_
i  i_
y  i_
o  i_
e  m
i  m
y  m
o  m
i  x
y  x
u  iu
iu  iu
a  ia
ia  ia
o  iu
e  iu
i  m  i
y  m  i
e  g  o
o  g  o
e  m  u
o  m  u
private static char participleendings1
shch
e  m
n  n
v  sh
iu  shch
private static char participleendings2
i  v  sh
y  v  sh
u  iu  shch
private static char participle1predessors
a
ia
private static char reflexiveendings
s  ia
s  soft
private static char verbendings1
i_
l
n
l  o
n  o
e  t
iu  t
l  a
n  a
l  i
e  m
n  y
e  t  e
i_  t  e
t  soft
e  sh  soft
n  n  o
private static char verbendings2
iu
u  iu
e  n
e  i_
ia  t
u  i_
i  l
y  l
i  m
y  m
i  t
y  t
i  l  a
y  l  a
e  n  a
i  t  e
i  l  i
y  l  i
i  l  o
y  l  o
e  n  o
u  e  t
u  iu  t
e  n  y
i  t  soft
y  t  soft
i  sh  soft
e  i_  t  e
u  i_  t  e
private static char verb1predessors
a
ia
private static char nounendings
a
u
i_
o
u
e
y
i
soft
ia
e  v
o  v
i  e
soft  e
ia  x
i  iu
e  i
i  i
e  i_
o  i_
e  m
a  m
o  m
a  x
soft  iu
i  ia
soft  ia
i  i_
ia  m
ia  m  i
a  m  i
i  e  i_
i  ia  m
i  e  m
i  ia  x
i  ia  m  i
private static char superlativeendings
e  i_  sh
e  i_  sh  e
private static char derivationalendings
o  s  t
o  s  t  soft
/**
* russianstemmer constructor comment.
*/
public russianstemmer
super
/**
* russianstemmer constructor comment.
*/
public russianstemmer char charset
super
this charset   charset
/**
* adjectival ending is an adjective ending,
* optionally preceded by participle ending.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean adjectival stringbuffer stemmingzone
// look for adjective ending in a stemming zone
if   findandremoveending stemmingzone  adjectiveendings
return false
// if adjective ending was found, try for participle ending.
// variable r is unused, we are just interested in the side effect of
// findandremoveending():
boolean r
findandremoveending stemmingzone  participleendings1  participle1predessors
findandremoveending stemmingzone  participleendings2
return true
/**
* derivational endings
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean derivational stringbuffer stemmingzone
int endinglength   findending stemmingzone  derivationalendings
if  endinglength    0
// no derivational ending found
return false
else
// ensure that the ending locates in r2
if  r2   rv <  stemmingzone length     endinglength
stemmingzone setlength stemmingzone length     endinglength
return true
else
return false
/**
* finds ending among given ending class and returns the length of ending found(0, if not found).
* creation date: (17/03/2002 8:18:34 pm)
*/
private int findending stringbuffer stemmingzone  int startindex  char theendingclass
boolean match   false
for  int i   theendingclass length   1  i >  0  i
char theending   theendingclass
// check if the ending is bigger than stemming zone
if  startindex < theending length   1
match   false
continue
match   true
int stemmingindex   startindex
for  int j   theending length   1  j >  0  j
if  stemmingzone charat stemmingindex       charset]
match   false
break
// check if ending was found
if  match
return theendingclass length     cut ending
return 0
private int findending stringbuffer stemmingzone  char theendingclass
return findending stemmingzone  stemmingzone length     1  theendingclass
/**
* finds the ending among the given class of endings and removes it from stemming zone.
* creation date: (17/03/2002 8:18:34 pm)
*/
private boolean findandremoveending stringbuffer stemmingzone  char theendingclass
int endinglength   findending stemmingzone  theendingclass
if  endinglength    0
// not found
return false
else
stemmingzone setlength stemmingzone length     endinglength
// cut the ending found
return true
/**
* finds the ending among the given class of endings, then checks if this ending was
* preceded by any of given predessors, and if so, removes it from stemming zone.
* creation date: (17/03/2002 8:18:34 pm)
*/
private boolean findandremoveending stringbuffer stemmingzone
char theendingclass  char thepredessors
int endinglength   findending stemmingzone  theendingclass
if  endinglength    0
// not found
return false
else
int predessorlength
findending stemmingzone
stemmingzone length     endinglength   1
thepredessors
if  predessorlength    0
return false
else
stemmingzone setlength stemmingzone length     endinglength
// cut the ending found
return true
/**
* marks positions of rv, r1 and r2 in a given word.
* creation date: (16/03/2002 3:40:11 pm)
*/
private void markpositions string word
rv   0
r1   0
r2   0
int i   0
// find rv
while  word length   > i     isvowel word charat i
i
if  word length     1 <   i
return     rv zone is empty
rv   i
// find r1
while  word length   > i    isvowel word charat i
i
if  word length     1 <   i
return     r1 zone is empty
r1   i
// find r2
while  word length   > i     isvowel word charat i
i
if  word length     1 <   i
return     r2 zone is empty
while  word length   > i    isvowel word charat i
i
if  word length     1 <   i
return     r2 zone is empty
r2   i
/**
* checks if character is a vowel..
* creation date: (16/03/2002 10:47:03 pm)
* @return boolean
* @param letter char
*/
private boolean isvowel char letter
for  int i   0  i < vowels length  i
if  letter    charset]
return true
return false
/**
* noun endings.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean noun stringbuffer stemmingzone
return findandremoveending stemmingzone  nounendings
/**
* perfective gerund endings.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean perfectivegerund stringbuffer stemmingzone
return findandremoveending
stemmingzone
perfectivegerundendings1
perfectivegerund1predessors
findandremoveending stemmingzone  perfectivegerundendings2
/**
* reflexive endings.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean reflexive stringbuffer stemmingzone
return findandremoveending stemmingzone  reflexiveendings
/**
* insert the method's description here.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean removei stringbuffer stemmingzone
if  stemmingzone length   > 0
stemmingzone charat stemmingzone length     1     charset
stemmingzone setlength stemmingzone length     1
return true
else
return false
/**
* insert the method's description here.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean removesoft stringbuffer stemmingzone
if  stemmingzone length   > 0
stemmingzone charat stemmingzone length     1     charset
stemmingzone setlength stemmingzone length     1
return true
else
return false
/**
* insert the method's description here.
* creation date: (16/03/2002 10:58:42 pm)
* @param newcharset char[]
*/
public void setcharset char newcharset
charset   newcharset
/**
* finds the stem for given russian word.
* creation date: (16/03/2002 3:36:48 pm)
* @return java.lang.string
* @param input java.lang.string
*/
public string stem string input
markpositions input
if  rv    0
return input    rv wasn't detected  nothing to stem
stringbuffer stemmingzone   new stringbuffer input substring rv
// stemming goes on in rv
// step 1
if   perfectivegerund stemmingzone
reflexive stemmingzone
// variable r is unused, we are just interested in the flow that gets
// created by logical expression: apply adjectival(); if that fails,
// apply verb() etc
boolean r
adjectival stemmingzone
verb stemmingzone
noun stemmingzone
// step 2
removei stemmingzone
// step 3
derivational stemmingzone
// step 4
superlative stemmingzone
undoublen stemmingzone
removesoft stemmingzone
// return result
return input substring 0  rv    stemmingzone tostring
/**
* superlative endings.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean superlative stringbuffer stemmingzone
return findandremoveending stemmingzone  superlativeendings
/**
* undoubles n.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean undoublen stringbuffer stemmingzone
char doublen
n  n
if  findending stemmingzone  doublen     0
stemmingzone setlength stemmingzone length     1
return true
else
return false
/**
* verb endings.
* creation date: (17/03/2002 12:14:58 am)
* @param stemmingzone java.lang.stringbuffer
*/
private boolean verb stringbuffer stemmingzone
return findandremoveending
stemmingzone
verbendings1
verb1predessors
findandremoveending stemmingzone  verbendings2
/**
* static method for stemming with different charsets
*/
public static string stem string theword  char charset
russianstemmer stemmer   new russianstemmer
stemmer setcharset charset
return stemmer stem theword