package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis token
import org apache lucene analysis tokenstream
import org apache lucene index termfreqvector
import java io ioexception
import java io stringreader
import java util
/**
*
*
**/
public class querytermvector implements termfreqvector
private string  terms   new string
private int  termfreqs   new int
public string getfield     return null
/**
*
* @param queryterms the original list of terms from the query, can contain duplicates
*/
public querytermvector string  queryterms
processterms queryterms
public querytermvector string querystring  analyzer analyzer
if  analyzer    null
tokenstream stream   analyzer tokenstream    new stringreader querystring
if  stream    null
token next   null
list terms   new arraylist
try
while   next   stream next       null
terms add next termtext
processterms  string terms toarray new string
catch  ioexception e
private void processterms string queryterms
if  queryterms    null
arrays sort queryterms
map tmpset   new hashmap queryterms length
//filter out duplicates
list tmplist   new arraylist queryterms length
list tmpfreqs   new arraylist queryterms length
int j   0
for  int i   0  i < queryterms length  i
string term   queryterms
integer position    integer tmpset get term
if  position    null
tmpset put term  new integer j
tmplist add term
tmpfreqs add new integer 1
else
integer integer    integer tmpfreqs get position intvalue
tmpfreqs set position intvalue    new integer integer intvalue     1
terms    string tmplist toarray terms
//termfreqs = (int[])tmpfreqs.toarray(termfreqs);
termfreqs   new int
int i   0
for  iterator iter   tmpfreqs iterator    iter hasnext
integer integer    integer  iter next
termfreqs   integer intvalue
public final string tostring
stringbuffer sb   new stringbuffer
sb append
for  int i 0  i<terms length  i
if  i>0  sb append
sb append terms  append    append termfreqs
sb append
return sb tostring
public int size
return terms length
public string getterms
return terms
public int gettermfrequencies
return termfreqs
public int indexof string term
int res   arrays binarysearch terms  term
return res >  0 ? res    1
public int indexesof string terms  int start  int len
int res   new int
for  int i 0  i < len  i
res   indexof terms
return res