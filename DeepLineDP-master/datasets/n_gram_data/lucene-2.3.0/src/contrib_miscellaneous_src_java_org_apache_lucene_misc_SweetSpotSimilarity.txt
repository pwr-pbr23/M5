/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene misc
import org apache lucene search similarity
import org apache lucene search defaultsimilarity
import java util map
import java util hashmap
/**
* a similarity with a lengthnorm that provides for a "platuea" of
* equally good lengths, and tf helper functions.
*
* <p>
* for lengthnorm, a global min/max can be specified to define the
* platuea of lengths that should all have a norm of 1.0.
* below the min, and above the max the lengthnorm drops off in a
* sqrt function.
* </p>
* <p>
* a per field min/max can be specified if different fields have
* different sweet spots.
* </p>
*
* <p>
* for tf, baselinetf and hyperbolictf functions are provided, which
* subclasses can choose between.
* </p>
*
*/
public class sweetspotsimilarity extends defaultsimilarity
private int ln_min   1
private int ln_max   1
private float ln_steep   0 5f
private map ln_mins   new hashmap 7
private map ln_maxs   new hashmap 7
private map ln_steeps   new hashmap 7
private float tf_base   0 0f
private float tf_min   0 0f
private float tf_hyper_min   0 0f
private float tf_hyper_max   2 0f
private double tf_hyper_base   1 3d
private float tf_hyper_xoffset   10 0f
public sweetspotsimilarity
super
/**
* sets the baseline and minimum function variables for baselinetf
*
* @see #baselinetf
*/
public void setbaselinetffactors float base  float min
tf_min   min
tf_base   base
/**
* sets the function variables for the hyperbolictf functions
*
* @param min the minimum tf value to ever be returned (default: 0.0)
* @param max the maximum tf value to ever be returned (default: 2.0)
* @param base the base value to be used in the exponential for the hyperbolic function (default: e)
* @param xoffset the midpoint of the hyperbolic function (default: 10.0)
* @see #hyperbolictf
*/
public void sethyperbolictffactors float min  float max
double base  float xoffset
tf_hyper_min   min
tf_hyper_max   max
tf_hyper_base   base
tf_hyper_xoffset   xoffset
/**
* sets the default function variables used by lengthnorm when no field
* specifc variables have been set.
*
* @see #lengthnorm
*/
public void setlengthnormfactors int min  int max  float steepness
this ln_min   min
this ln_max   max
this ln_steep   steepness
/**
* sets the function variables used by lengthnorm for a specific named field
*
* @see #lengthnorm
*/
public void setlengthnormfactors string field  int min  int max
float steepness
ln_mins put field  new integer min
ln_maxs put field  new integer max
ln_steeps put field  new float steepness
/**
* implemented as:
* <code>
* 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )
* </code>.
*
* <p>
* this degrades to <code>1/sqrt(x)</code> when min and max are both 1 and
* steepness is 0.5
* </p>
*
* <p>
* :todo: potential optimiation is to just flat out return 1.0f if numterms
* is between min and max.
* </p>
*
* @see #setlengthnormfactors
*/
public float lengthnorm string fieldname  int numterms
int l   ln_min
int h   ln_max
float s   ln_steep
if  ln_mins containskey fieldname
l     number ln_mins get fieldname   intvalue
if  ln_maxs containskey fieldname
h     number ln_maxs get fieldname   intvalue
if  ln_steeps containskey fieldname
s     number ln_steeps get fieldname   floatvalue
return  float
1 0f
math sqrt
s
float  math abs numterms   l    math abs numterms   h     h l
1 0f
/**
* delegates to baselinetf
*
* @see #baselinetf
*/
public float tf int freq
return baselinetf freq
/**
* implemented as:
* <code>
*  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)
* </code>
* ...but with a special case check for 0.
* <p>
* this degrates to <code>sqrt(x)</code> when min and base are both 0
* </p>
*
* @see #setbaselinetffactors
*/
public float baselinetf float freq
if  0 0f    freq  return 0 0f
return  freq <  tf_min
? tf_base
float math sqrt freq    tf_base   tf_base    tf_min
/**
* uses a hyperbolic tangent function that allows for a hard max...
*
* <code>
* tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)
* </code>
*
* <p>
* this code is provided as a convincience for subclasses that want
* to use a hyperbolic tf function.
* </p>
*
* @see #sethyperbolictffactors
*/
public float hyperbolictf float freq
if  0 0f    freq  return 0 0f
final float min   tf_hyper_min
final float max   tf_hyper_max
final double base   tf_hyper_base
final float xoffset   tf_hyper_xoffset
final double x    double  freq   xoffset
final float result   min
float
max min    2 0f
*
math pow base x    math pow base  x
math pow base x    math pow base  x
1 0d
return float isnan result  ? max   result