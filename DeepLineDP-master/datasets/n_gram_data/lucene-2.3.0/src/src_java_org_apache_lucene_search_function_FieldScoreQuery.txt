package org apache lucene search function
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* a query that scores each document as the value of the numeric input field.
* <p>
* the query matches all documents, and scores each document according to the numeric
* value of that field.
* <p>
* it is assumed, and expected, that:
* <ul>
*  <li>the field used here is indexed, and has exactly
*      one token in every scored document.</li>
*  <li>best if this field is un_tokenized.</li>
*  <li>that token is parsable to the selected type.</li>
* </ul>
* <p>
* combining this query in a functionquery allows much freedom in affecting document scores.
* note, that with this freedom comes responsibility: it is more than likely that the
* default lucene scoring is superior in quality to scoring modified as explained here.
* however, in some cases, and certainly for research experiments, this capability may turn useful.
* <p>
* when contructing this query, select the appropriate type. that type should match the data stored in the
* field. so in fact the "right" type should be selected before indexing. type selection
* has effect on the ram usage:
* <ul>
*   <li>{@link type#byte} consumes 1 * maxdocs bytes.</li>
*   <li>{@link type#short} consumes 2 * maxdocs bytes.</li>
*   <li>{@link type#int} consumes 4 * maxdocs bytes.</li>
*   <li>{@link type#float} consumes 8 * maxdocs bytes.</li>
* </ul>
* <p>
* <b>caching:</b>
* values for the numeric field are loaded once and cached in memory for further use with the same indexreader.
* to take advantage of this, it is extremely important to reuse index-readers or index-searchers,
* otherwise, for instance if for each query a new index reader is opened, large penalties would be
* payd for loading the field values into memory over and over again!
*
* <p><font color="#ff0000">
* warning: the status of the <b>search.function</b> package is experimental.
* the apis introduced here might change in the future and will not be
* supported anymore in such a case.</font>
*/
public class fieldscorequery extends valuesourcequery
/**
* type of score field, indicating how field values are interpreted/parsed.
* <p>
* the type selected at search search time should match the data stored in the field.
* different types have different ram requirements:
* <ul>
*   <li>{@link #byte} consumes 1 * maxdocs bytes.</li>
*   <li>{@link #short} consumes 2 * maxdocs bytes.</li>
*   <li>{@link #int} consumes 4 * maxdocs bytes.</li>
*   <li>{@link #float} consumes 8 * maxdocs bytes.</li>
* </ul>
*/
public static class type
/** field values are interpreted as numeric byte values. */
public static final type byte   new type
/** field values are interpreted as numeric short values. */
public static final type short   new type
/** field values are interpreted as numeric int values. */
public static final type int   new type
/** field values are interpreted as numeric float values. */
public static final type float   new type
private string typename
private type  string name
this typename   name
/*(non-javadoc) @see java.lang.object#tostring() */
public string tostring
return getclass   getname     typename
/**
* create a fieldscorequery - a query that scores each document as the value of the numeric input field.
* <p>
* the <code>type</code> param tells how to parse the field string values into a numeric score value.
* @param field the numeric field to be used.
* @param type the type of the field: either
* {@link type#byte}, {@link type#short}, {@link type#int}, or {@link type#float}.
*/
public fieldscorequery string field  type type
super getvaluesource field type
// create the appropriate (cached) field value source.
private static valuesource getvaluesource string field  type type
if  type    type byte
return new bytefieldsource field
if  type    type short
return new shortfieldsource field
if  type    type int
return new intfieldsource field
if  type    type float
return new floatfieldsource field
throw new illegalargumentexception type