package org apache lucene benchmark bytask stats
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene benchmark bytask tasks perftask
/**
* statistics for a task run.
* <br>the same task can run more than once, but, if that task records statistics,
* each run would create its own taskstats.
*/
public class taskstats implements cloneable
/** task for which data was collected */
private perftask task
/** round in which task run started */
private int round
/** task start time */
private long start
/** task elapsed time.  elapsed >= 0 indicates run completion! */
private long elapsed    1
/** max tot mem during task */
private long maxtotmem
/** max used mem during task */
private long maxusedmem
/** serial run number of this task run in the perf run */
private int taskrunnum
/** number of other tasks that started to run while this task was still running */
private int numparalleltasks
/** number of work items done by this task.
* for indexing that can be number of docs added.
* for warming that can be number of scanned items, etc.
* for repeating tasks, this is a sum over repetitions.
*/
private int count
/** number of similar tasks aggregated into this record.
* used when summing up on few runs/instances of similar tasks.
*/
private int numruns   1
/**
* create a run data for a task that is starting now.
* to be called from points.
*/
taskstats  perftask task  int taskrunnum  int round
this task   task
this taskrunnum   taskrunnum
this round   round
maxtotmem   runtime getruntime   totalmemory
maxusedmem   maxtotmem   runtime getruntime   freememory
start   system currenttimemillis
/**
* mark the end of a task
*/
void markend  int numparalleltasks  int count
elapsed   system currenttimemillis     start
long totmem   runtime getruntime   totalmemory
if  totmem > maxtotmem
maxtotmem   totmem
long usedmem   totmem   runtime getruntime   freememory
if  usedmem > maxusedmem
maxusedmem   usedmem
this numparalleltasks   numparalleltasks
this count   count
/**
* @return the taskrunnum.
*/
public int gettaskrunnum
return taskrunnum
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
stringbuffer res   new stringbuffer task getname
res append
res append count
res append
res append elapsed
return res tostring
/**
* @return returns the count.
*/
public int getcount
return count
/**
* @return elapsed time.
*/
public long getelapsed
return elapsed
/**
* @return returns the maxtotmem.
*/
public long getmaxtotmem
return maxtotmem
/**
* @return returns the maxusedmem.
*/
public long getmaxusedmem
return maxusedmem
/**
* @return returns the numparalleltasks.
*/
public int getnumparalleltasks
return numparalleltasks
/**
* @return returns the task.
*/
public perftask gettask
return task
/**
* @return returns the numruns.
*/
public int getnumruns
return numruns
/**
* add data from another stat, for aggregation
* @param stat2 the added stat data.
*/
public void add taskstats stat2
numruns    stat2 getnumruns
elapsed    stat2 getelapsed
maxtotmem    stat2 getmaxtotmem
maxusedmem    stat2 getmaxusedmem
count    stat2 getcount
if  round    stat2 round
round    1     no meaning if agregating tasks of different ruond
/* (non-javadoc)
* @see java.lang.object#clone()
*/
public object clone   throws clonenotsupportedexception
return super clone
/**
* @return the round number.
*/
public int getround
return round