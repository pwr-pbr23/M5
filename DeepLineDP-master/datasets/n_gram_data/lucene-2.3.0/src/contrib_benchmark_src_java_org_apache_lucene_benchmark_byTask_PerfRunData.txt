package org apache lucene benchmark bytask
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene benchmark bytask feeds docmaker
import org apache lucene benchmark bytask feeds htmlparser
import org apache lucene benchmark bytask feeds querymaker
import org apache lucene benchmark bytask stats points
import org apache lucene benchmark bytask tasks readtask
import org apache lucene benchmark bytask tasks searchtask
import org apache lucene benchmark bytask utils config
import org apache lucene benchmark bytask utils fileutils
import org apache lucene index indexreader
import org apache lucene index indexwriter
import org apache lucene store directory
import org apache lucene store fsdirectory
import org apache lucene store ramdirectory
import java io file
import java util hashmap
import java util iterator
/**
* data maintained by a performance test run.
* <p>
* data includes:
* <ul>
*  <li>configuration.
*  <li>directory, writer, reader.
*  <li>docmaker and a few instances of querymaker.
*  <li>analyzer.
*  <li>statistics data which updated during the run.
* </ul>
* config properties: work.dir=&lt;path to root of docs and index dirs| default: work&gt;
* </ul>
*/
public class perfrundata
private points points
// objects used during performance test run
// directory, analyzer, docmaker - created at startup.
// reader, writer, searcher - maintained by basic tasks.
private directory directory
private analyzer analyzer
private docmaker docmaker
private htmlparser htmlparser
// we use separate (identical) instances for each "read" task type, so each can iterate the quries separately.
private hashmap readtaskquerymaker
private class qmkrclass
private indexreader indexreader
private indexwriter indexwriter
private config config
private long starttimemillis
// constructor
public perfrundata  config config  throws exception
this config   config
// analyzer (default is standard analyzer)
analyzer    analyzer  class forname config get
newinstance
// doc maker
docmaker    docmaker  class forname config get
newinstance
docmaker setconfig config
// query makers
readtaskquerymaker   new hashmap
qmkrclass   class forname config get
// html parser, used for some doc makers
htmlparser    htmlparser  class forname config get       newinstance
docmaker sethtmlparser htmlparser
// index stuff
reinit false
// statistic points
points   new points config
if  boolean valueof config get       booleanvalue
system out println
system out println getquerymaker new searchtask this   printqueries
// clean old stuff, reopen
public void reinit boolean eraseindex  throws exception
// cleanup index
if  indexwriter  null
indexwriter close
indexwriter   null
if  indexreader  null
indexreader close
indexreader   null
if  directory  null
directory close
// directory (default is ram-dir).
if    equals config get
file workdir   new file config get
file indexdir   new file workdir
if  eraseindex    indexdir exists
fileutils fullydelete indexdir
indexdir mkdirs
directory   fsdirectory getdirectory indexdir
else
directory   new ramdirectory
// inputs
resetinputs
// release unused stuff
system runfinalization
system gc
public long setstarttimemillis
starttimemillis   system currenttimemillis
return starttimemillis
/**
* @return start time in milliseconds
*/
public long getstarttimemillis
return starttimemillis
/**
* @return returns the points.
*/
public points getpoints
return points
/**
* @return returns the directory.
*/
public directory getdirectory
return directory
/**
* @param directory the directory to set.
*/
public void setdirectory directory directory
this directory   directory
/**
* @return returns the indexreader.
*/
public indexreader getindexreader
return indexreader
/**
* @param indexreader the indexreader to set.
*/
public void setindexreader indexreader indexreader
this indexreader   indexreader
/**
* @return returns the indexwriter.
*/
public indexwriter getindexwriter
return indexwriter
/**
* @param indexwriter the indexwriter to set.
*/
public void setindexwriter indexwriter indexwriter
this indexwriter   indexwriter
/**
* @return returns the anlyzer.
*/
public analyzer getanalyzer
return analyzer
public void setanalyzer analyzer analyzer
this analyzer   analyzer
/**
* @return returns the docmaker.
*/
public docmaker getdocmaker
return docmaker
/**
* @return returns the config.
*/
public config getconfig
return config
public void resetinputs
docmaker resetinputs
iterator it   readtaskquerymaker values   iterator
while  it hasnext
querymaker  it next    resetinputs
/**
* @return returns the querymaker by read task type (class)
*/
public querymaker getquerymaker readtask readtask
// mapping the query maker by task class allows extending/adding new search/read tasks
// without needing to modify this class.
class readtaskclass   readtask getclass
querymaker qm    querymaker  readtaskquerymaker get readtaskclass
if  qm    null
try
qm    querymaker  qmkrclass newinstance
qm setconfig config
catch  exception e
throw new runtimeexception e
readtaskquerymaker put readtaskclass qm
return qm
/**
* @return returns the htmlparser.
*/
public htmlparser gethtmlparser
return htmlparser