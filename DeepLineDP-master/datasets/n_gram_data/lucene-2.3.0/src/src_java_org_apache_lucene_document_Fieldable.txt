package org apache lucene document
/**
* copyright 2004 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io reader
import java io serializable
import org apache lucene analysis tokenstream
/**
* synonymous with {@link field}.
*
**/
public interface fieldable extends serializable
/** sets the boost factor hits on this field.  this value will be
* multiplied into the score of all hits on this this field of this
* document.
*
* <p>the boost is multiplied by {@link org.apache.lucene.document.document#getboost()} of the document
* containing this field.  if a document has multiple fields with the same
* name, all such values are multiplied together.  this product is then
* multipled by the value {@link org.apache.lucene.search.similarity#lengthnorm(string,int)}, and
* rounded by {@link org.apache.lucene.search.similarity#encodenorm(float)} before it is stored in the
* index.  one should attempt to ensure that this product does not overflow
* the range of that encoding.
*
* @see org.apache.lucene.document.document#setboost(float)
* @see org.apache.lucene.search.similarity#lengthnorm(string, int)
* @see org.apache.lucene.search.similarity#encodenorm(float)
*/
void setboost float boost
/** returns the boost factor for hits for this field.
*
* <p>the default value is 1.0.
*
* <p>note: this value is not stored directly with the document in the index.
* documents returned from {@link org.apache.lucene.index.indexreader#document(int)} and
* {@link org.apache.lucene.search.hits#doc(int)} may thus not have the same value present as when
* this field was indexed.
*
* @see #setboost(float)
*/
float getboost
/** returns the name of the field as an interned string.
* for example "date", "title", "body", ...
*/
string name
/** the value of the field as a string, or null.  if null, the reader value,
* binary value, or tokenstream value is used.  exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public string stringvalue
/** the value of the field as a reader, or null.  if null, the string value,
* binary value, or tokenstream value is used.  exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public reader readervalue
/** the value of the field in binary, or null.  if null, the reader value,
* string value, or tokenstream value is used. exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public byte binaryvalue
/** the value of the field as a tokenstream, or null.  if null, the reader value,
* string value, or binary value is used. exactly one of stringvalue(),
* readervalue(), binaryvalue(), and tokenstreamvalue() must be set. */
public tokenstream tokenstreamvalue
/** true iff the value of the field is to be stored in the index for return
with search hits.  it is an error for this to be true if a field is
reader-valued. */
boolean  isstored
/** true iff the value of the field is to be indexed, so that it may be
searched on. */
boolean  isindexed
/** true iff the value of the field should be tokenized as text prior to
indexing.  un-tokenized fields are indexed as a single word and may not be
reader-valued. */
boolean  istokenized
/** true if the value of the field is stored and compressed within the index */
boolean  iscompressed
/** true iff the term or terms used to index this field are stored as a term
*  vector, available from {@link org.apache.lucene.index.indexreader#gettermfreqvector(int,string)}.
*  these methods do not provide access to the original content of the field,
*  only to terms used to index it. if the original content must be
*  preserved, use the <code>stored</code> attribute instead.
*
* @see org.apache.lucene.index.indexreader#gettermfreqvector(int, string)
*/
boolean istermvectorstored
/**
* true iff terms are stored as term vector together with their offsets
* (start and end positon in source text).
*/
boolean isstoreoffsetwithtermvector
/**
* true iff terms are stored as term vector together with their token positions.
*/
boolean isstorepositionwithtermvector
/** true iff the value of the filed is stored as binary */
boolean  isbinary
/** true if norms are omitted for this indexed field */
boolean getomitnorms
/** expert:
*
* if set, omit normalization factors associated with this indexed field.
* this effectively disables indexing boosts and length normalization for this field.
*/
void setomitnorms boolean omitnorms
/**
* indicates whether a field is lazy or not.  the semantics of lazy loading are such that if a field is lazily loaded, retrieving
* it's values via {@link #stringvalue()} or {@link #binaryvalue()} is only valid as long as the {@link org.apache.lucene.index.indexreader} that
* retrieved the {@link document} is still open.
*
* @return true if this field can be loaded lazily
*/
boolean islazy