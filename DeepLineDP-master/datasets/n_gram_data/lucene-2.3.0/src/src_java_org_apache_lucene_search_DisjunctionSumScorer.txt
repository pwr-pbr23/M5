package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util list
import java util iterator
import java io ioexception
import org apache lucene util scorerdocqueue
/** a scorer for or like queries, counterpart of <code>conjunctionscorer</code>.
* this scorer implements {@link scorer#skipto(int)} and uses skipto() on the given scorers.
* @todo implement score(hitcollector, int).
*/
class disjunctionsumscorer extends scorer
/** the number of subscorers. */
private final int nrscorers
/** the subscorers. */
protected final list subscorers
/** the minimum number of scorers that should match. */
private final int minimumnrmatchers
/** the scorerdocqueue contains all subscorers ordered by their current doc(),
* with the minimum at the top.
* <br>the scorerdocqueue is initialized the first time next() or skipto() is called.
* <br>an exhausted scorer is immediately removed from the scorerdocqueue.
* <br>if less than the minimumnrmatchers scorers
* remain in the scorerdocqueue next() and skipto() return false.
* <p>
* after each to call to next() or skipto()
* <code>currentsumscore</code> is the total score of the current matching doc,
* <code>nrmatchers</code> is the number of matching scorers,
* and all scorers are after the matching doc, or are exhausted.
*/
private scorerdocqueue scorerdocqueue   null
private int queuesize    1     used to avoid size   method calls on scorerdocqueue
/** the document number of the current match. */
private int currentdoc    1
/** the number of subscorers that provide the current match. */
protected int nrmatchers    1
private float currentscore   float nan
/** construct a <code>disjunctionscorer</code>.
* @param subscorers a collection of at least two subscorers.
* @param minimumnrmatchers the positive minimum number of subscorers that should
* match to match this query.
* <br>when <code>minimumnrmatchers</code> is bigger than
* the number of <code>subscorers</code>,
* no matches will be produced.
* <br>when minimumnrmatchers equals the number of subscorers,
* it more efficient to use <code>conjunctionscorer</code>.
*/
public disjunctionsumscorer  list subscorers  int minimumnrmatchers
super null
nrscorers   subscorers size
if  minimumnrmatchers <  0
throw new illegalargumentexception
if  nrscorers <  1
throw new illegalargumentexception
this minimumnrmatchers   minimumnrmatchers
this subscorers   subscorers
/** construct a <code>disjunctionscorer</code>, using one as the minimum number
* of matching subscorers.
*/
public disjunctionsumscorer list subscorers
this subscorers  1
/** called the first time next() or skipto() is called to
* initialize <code>scorerdocqueue</code>.
*/
private void initscorerdocqueue   throws ioexception
iterator si   subscorers iterator
scorerdocqueue   new scorerdocqueue nrscorers
queuesize   0
while  si hasnext
scorer se    scorer  si next
if  se next         doc   method will be used in scorerdocqueue
if  scorerdocqueue insert se
queuesize
/** scores and collects all matching documents.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* <br>when this method is used the {@link #explain(int)} method should not be used.
*/
public void score hitcollector hc  throws ioexception
while  next
hc collect currentdoc  currentscore
/** expert: collects matching documents in a range.  hook for optimization.
* note that {@link #next()} must be called once before this method is called
* for the first time.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* @param max do not score documents past this.
* @return true if more matching documents may remain.
*/
protected boolean score hitcollector hc  int max  throws ioexception
while  currentdoc < max
hc collect currentdoc  currentscore
if   next
return false
return true
public boolean next   throws ioexception
if  scorerdocqueue    null
initscorerdocqueue
return  scorerdocqueue size   >  minimumnrmatchers
advanceaftercurrent
/** advance all subscorers after the current document determined by the
* top of the <code>scorerdocqueue</code>.
* repeat until at least the minimum number of subscorers match on the same
* document and all subscorers are after that document or are exhausted.
* <br>on entry the <code>scorerdocqueue</code> has at least <code>minimumnrmatchers</code>
* available. at least the scorer with the minimum document number will be advanced.
* @return true iff there is a match.
* <br>in case there is a match, </code>currentdoc</code>, </code>currentsumscore</code>,
* and </code>nrmatchers</code> describe the match.
*
* @todo investigate whether it is possible to use skipto() when
* the minimum number of matchers is bigger than one, ie. try and use the
* character of conjunctionscorer for the minimum number of matchers.
* also delay calling score() on the sub scorers until the minimum number of
* matchers is reached.
* <br>for this, a scorer array with minimumnrmatchers elements might
* hold scorers at currentdoc that are temporarily popped from scorerqueue.
*/
protected boolean advanceaftercurrent   throws ioexception
do      repeat until minimum nr of matchers
currentdoc   scorerdocqueue topdoc
currentscore   scorerdocqueue topscore
nrmatchers   1
do      until all subscorers are after currentdoc
if    scorerdocqueue topnextandadjustelsepop
if    queuesize    0
break     nothing more to advance  check for last match
if  scorerdocqueue topdoc      currentdoc
break     all remaining subscorers are after currentdoc
currentscore    scorerdocqueue topscore
nrmatchers
while  true
if  nrmatchers >  minimumnrmatchers
return true
else if  queuesize < minimumnrmatchers
return false
while  true
/** returns the score of the current document matching the query.
* initially invalid, until {@link #next()} is called the first time.
*/
public float score   throws ioexception   return currentscore
public int doc     return currentdoc
/** returns the number of subscorers matching the current document.
* initially invalid, until {@link #next()} is called the first time.
*/
public int nrmatchers
return nrmatchers
/** skips to the first match beyond the current whose document number is
* greater than or equal to a given target.
* <br>when this method is used the {@link #explain(int)} method should not be used.
* <br>the implementation uses the skipto() method on the subscorers.
* @param target the target document number.
* @return true iff there is such a match.
*/
public boolean skipto int target  throws ioexception
if  scorerdocqueue    null
initscorerdocqueue
if  queuesize < minimumnrmatchers
return false
if  target <  currentdoc
return true
do
if  scorerdocqueue topdoc   >  target
return advanceaftercurrent
else if    scorerdocqueue topskiptoandadjustelsepop target
if    queuesize < minimumnrmatchers
return false
while  true
/** @return an explanation for the score of a given document. */
public explanation explain int doc  throws ioexception
explanation res   new explanation
iterator ssi   subscorers iterator
float sumscore   0 0f
int nrmatches   0
while  ssi hasnext
explanation es     scorer  ssi next    explain doc
if  es getvalue   > 0 0f       indicates match
sumscore    es getvalue
nrmatches
res adddetail es
if  nrmatchers >  minimumnrmatchers
res setvalue sumscore
res setdescription     minimumnrmatchers
subscorers size
else
res setvalue 0 0f
res setdescription nrmatches
minimumnrmatchers
subscorers size
return res