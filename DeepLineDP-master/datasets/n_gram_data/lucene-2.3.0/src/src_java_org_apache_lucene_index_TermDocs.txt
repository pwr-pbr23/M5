package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** termdocs provides an interface for enumerating &lt;document, frequency&gt;
pairs for a term.  <p> the document portion names each document containing
the term.  documents are indicated by number.  the frequency portion gives
the number of times the term occurred in each document.  <p> the pairs are
ordered by document number.
@see indexreader#termdocs()
*/
public interface termdocs
/** sets this to the data for a term.
* the enumeration is reset to the start of the data for this term.
*/
void seek term term  throws ioexception
/** sets this to the data for the current term in a {@link termenum}.
* this may be optimized in some implementations.
*/
void seek termenum termenum  throws ioexception
/** returns the current document number.  <p> this is invalid until {@link
#next()} is called for the first time.*/
int doc
/** returns the frequency of the term within the current document.  <p> this
is invalid until {@link #next()} is called for the first time.*/
int freq
/** moves to the next pair in the enumeration.  <p> returns true iff there is
such a next pair in the enumeration. */
boolean next   throws ioexception
/** attempts to read multiple entries from the enumeration, up to length of
* <i>docs</i>.  document numbers are stored in <i>docs</i>, and term
* frequencies are stored in <i>freqs</i>.  the <i>freqs</i> array must be as
* long as the <i>docs</i> array.
*
* <p>returns the number of entries read.  zero is only returned when the
* stream has been exhausted.  */
int read int docs  int freqs  throws ioexception
/** skips entries to the first beyond the current whose document number is
* greater than or equal to <i>target</i>. <p>returns true iff there is such
* an entry.  <p>behaves as if written: <pre>
*   boolean skipto(int target) {
*     do {
*       if (!next())
* 	     return false;
*     } while (target > doc());
*     return true;
*   }
* </pre>
* some implementations are considerably more efficient than that.
*/
boolean skipto int target  throws ioexception
/** frees associated resources. */
void close   throws ioexception