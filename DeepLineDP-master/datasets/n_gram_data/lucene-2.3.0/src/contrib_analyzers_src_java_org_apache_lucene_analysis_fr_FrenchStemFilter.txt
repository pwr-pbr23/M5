package org apache lucene analysis fr
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis token
import org apache lucene analysis tokenfilter
import org apache lucene analysis tokenstream
import java io ioexception
import java util hashtable
import java util hashset
import java util set
/**
* a filter that stemms french words. it supports a table of words that should
* not be stemmed at all. the used stemmer can be changed at runtime after the
* filter object is created (as long as it is a frenchstemmer).
*
* @author    patrick talbot (based on gerhard schwarz work for german)
*/
public final class frenchstemfilter extends tokenfilter
/**
* the actual token in the input stream.
*/
private token token   null
private frenchstemmer stemmer   null
private set exclusions   null
public frenchstemfilter  tokenstream in
super in
stemmer   new frenchstemmer
public frenchstemfilter  tokenstream in  set exclusiontable
this  in
exclusions   exclusiontable
/**
* @return  returns the next token in the stream, or null at eos
*/
public final token next
throws ioexception
if     token   input next        null
return null
// check the exclusiontable
else if   exclusions    null    exclusions contains  token termtext
return token
else
string s   stemmer stem  token termtext
// if not stemmed, dont waste the time creating a new token
if    s equals  token termtext
return new token  s  token startoffset    token endoffset    token type
return token
/**
* set a alternative/custom frenchstemmer for this filter.
*/
public void setstemmer  frenchstemmer stemmer
if   stemmer    null
this stemmer   stemmer
/**
* set an alternative exclusion list for this filter.
*/
public void setexclusiontable  hashtable exclusiontable
exclusions   new hashset exclusiontable keyset