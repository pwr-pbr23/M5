package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io serializable
import org apache lucene analysis token
import org apache lucene analysis tokenstream
/**
*  a payload is metadata that can be stored together with each occurrence
*  of a term. this metadata is stored inline in the posting list of the
*  specific term.
*  <p>
*  to store payloads in the index a {@link tokenstream} has to be used that
*  produces {@link token}s containing payload data.
*  <p>
*  use {@link termpositions#getpayloadlength()} and {@link termpositions#getpayload(byte[], int)}
*  to retrieve the payloads from the index.<br>
*
*/
public class payload implements serializable  cloneable
/** the byte array containing the payload data */
protected byte data
/** the offset within the byte array */
protected int offset
/** the length of the payload data */
protected int length
/** creates an empty payload and does not allocate a byte array. */
public payload
// nothing to do
/**
* creates a new payload with the the given array as data.
* a reference to the passed-in array is held, i. e. no
* copy is made.
*
* @param data the data of this payload
*/
public payload byte data
this data  0  data length
/**
* creates a new payload with the the given array as data.
* a reference to the passed-in array is held, i. e. no
* copy is made.
*
* @param data the data of this payload
* @param offset the offset in the data byte array
* @param length the length of the data
*/
public payload byte data  int offset  int length
if  offset < 0    offset   length > data length
throw new illegalargumentexception
this data   data
this offset   offset
this length   length
/**
* sets this payloads data.
* a reference to the passed-in array is held, i. e. no
* copy is made.
*/
public void setdata byte data
setdata data  0  data length
/**
* sets this payloads data.
* a reference to the passed-in array is held, i. e. no
* copy is made.
*/
public void setdata byte data  int offset  int length
this data   data
this offset   offset
this length   length
/**
* returns a reference to the underlying byte array
* that holds this payloads data.
*/
public byte getdata
return this data
/**
* returns the offset in the underlying byte array
*/
public int getoffset
return this offset
/**
* returns the length of the payload data.
*/
public int length
return this length
/**
* returns the byte at the given index.
*/
public byte byteat int index
if  0 <  index    index < this length
return this data
throw new arrayindexoutofboundsexception index
/**
* allocates a new byte array, copies the payload data into it and returns it.
*/
public byte tobytearray
byte retarray   new byte
system arraycopy this data  this offset  retarray  0  this length
return retarray
/**
* copies the payload data to a byte array.
*
* @param target the target byte array
* @param targetoffset the offset in the target byte array
*/
public void copyto byte target  int targetoffset
if  this length > target length   targetoffset
throw new arrayindexoutofboundsexception
system arraycopy this data  this offset  target  targetoffset  this length
/**
* clones this payload by creating a copy of the underlying
* byte array.
*/
public object clone
payload clone   new payload this tobytearray
return clone