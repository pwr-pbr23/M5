package org apache lucene util
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/* derived from org.apache.lucene.util.priorityqueue of march 2005 */
import java io ioexception
import org apache lucene search scorer
/** a scorerdocqueue maintains a partial ordering of its scorers such that the
least scorer can always be found in constant time.  put()'s and pop()'s
require log(size) time. the ordering is by scorer.doc().
*/
public class scorerdocqueue       later  spansqueue for spans with doc and term positions
private final heapedscorerdoc heap
private final int maxsize
private int size
private class heapedscorerdoc
scorer scorer
int doc
heapedscorerdoc scorer s    this s  s doc
heapedscorerdoc scorer scorer  int doc
this scorer   scorer
this doc   doc
void adjust     doc   scorer doc
private heapedscorerdoc tophsd     same as heap  only for speed
/** create a scorerdocqueue with a maximum size. */
public scorerdocqueue int maxsize
// assert maxsize >= 0;
size   0
int heapsize   maxsize   1
heap   new heapedscorerdoc
this maxsize   maxsize
tophsd   heap     initially null
/**
* adds a scorer to a scorerdocqueue in log(size) time.
* if one tries to add more scorers than maxsize
* a runtimeexception (arrayindexoutofbound) is thrown.
*/
public final void put scorer scorer
size
heap   new heapedscorerdoc scorer
upheap
/**
* adds a scorer to the scorerdocqueue in log(size) time if either
* the scorerdocqueue is not full, or not lessthan(scorer, top()).
* @param scorer
* @return true if scorer is added, false otherwise.
*/
public boolean insert scorer scorer
if  size < maxsize
put scorer
return true
else
int docnr   scorer doc
if   size > 0         docnr < tophsd doc         heap is top
heap   new heapedscorerdoc scorer  docnr
downheap
return true
else
return false
/** returns the least scorer of the scorerdocqueue in constant time.
* should not be used when the queue is empty.
*/
public final scorer top
// assert size > 0;
return tophsd scorer
/** returns document number of the least scorer of the scorerdocqueue
* in constant time.
* should not be used when the queue is empty.
*/
public final int topdoc
// assert size > 0;
return tophsd doc
public final float topscore   throws ioexception
// assert size > 0;
return tophsd scorer score
public final boolean topnextandadjustelsepop   throws ioexception
return checkadjustelsepop  tophsd scorer next
public final boolean topskiptoandadjustelsepop int target  throws ioexception
return checkadjustelsepop  tophsd scorer skipto target
private boolean checkadjustelsepop boolean cond
if  cond       see also adjusttop
tophsd doc   tophsd scorer doc
else      see also popnoresult
heap   heap     move last to first
heap   null
size
downheap
return cond
/** removes and returns the least scorer of the scorerdocqueue in log(size)
* time.
* should not be used when the queue is empty.
*/
public final scorer pop
// assert size > 0;
scorer result   tophsd scorer
popnoresult
return result
/** removes the least scorer of the scorerdocqueue in log(size) time.
* should not be used when the queue is empty.
*/
private final void popnoresult
heap   heap     move last to first
heap   null
size
downheap   	   adjust heap
/** should be called when the scorer at top changes doc() value.
* still log(n) worst case, but it's at least twice as fast to <pre>
*  { pq.top().change(); pq.adjusttop(); }
* </pre> instead of <pre>
*  { o = pq.pop(); o.change(); pq.push(o); }
* </pre>
*/
public final void adjusttop
// assert size > 0;
tophsd adjust
downheap
/** returns the number of scorers currently stored in the scorerdocqueue. */
public final int size
return size
/** removes all entries from the scorerdocqueue. */
public final void clear
for  int i   0  i <  size  i
heap   null
size   0
private final void upheap
int i   size
heapedscorerdoc node   heap 		     save bottom node
int j   i >>> 1
while   j > 0      node doc < heap doc
heap   heap 			     shift parents down
i   j
j   j >>> 1
heap   node 				     install saved node
tophsd   heap
private final void downheap
int i   1
heapedscorerdoc node   heap 	             save top node
int j   i << 1 				     find smaller child
int k   j   1
if   k <  size      heap doc < heap doc
j   k
while   j <  size      heap doc < node doc
heap   heap 			     shift up child
i   j
j   i << 1
k   j   1
if  k <  size     heap doc < heap doc
j   k
heap   node 				     install saved node
tophsd   heap