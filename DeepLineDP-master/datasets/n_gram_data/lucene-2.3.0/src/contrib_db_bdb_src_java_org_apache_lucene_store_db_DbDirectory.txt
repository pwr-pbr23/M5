package org apache lucene store db
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java io bytearrayinputstream
import java io datainputstream
import java util set
import java util hashset
import java util list
import java util arraylist
import java util iterator
import java util collections
import org apache lucene store directory
import org apache lucene store lock
import org apache lucene store indexoutput
import org apache lucene store indexinput
import com sleepycat db internal dbenv
import com sleepycat db internal db
import com sleepycat db internal dbconstants
import com sleepycat db databaseentry
import com sleepycat db internal dbc
import com sleepycat db internal dbtxn
import com sleepycat db databaseexception
import com sleepycat db database
import com sleepycat db transaction
import com sleepycat db dbhandleextractor
/**
* a dbdirectory is a berkeley db 4.3 based implementation of
* {@link org.apache.lucene.store.directory directory}. it uses two
* {@link com.sleepycat.db.internal.db db} database handles, one for storing file
* records and another for storing file data blocks.
*
* @author andi vajda
*/
public class dbdirectory extends directory
protected set openfiles   collections synchronizedset new hashset
protected db files  blocks
protected dbtxn txn
protected int flags
/**
* instantiate a dbdirectory. the same threading rules that apply to
* berkeley db handles apply to instances of dbdirectory.
*
* @param txn a transaction handle that is going to be used for all db
* operations done by this instance. this parameter may be
* <code>null</code>.
* @param files a db handle to store file records.
* @param blocks a db handle to store file data blocks.
* @param flags flags used for db read operations.
*/
public dbdirectory dbtxn txn  db files  db blocks  int flags
super
this txn   txn
this files   files
this blocks   blocks
this flags   flags
public dbdirectory transaction txn  database files  database blocks
int flags
super
this txn   txn    null ? dbhandleextractor getdbtxn txn    null
this files   dbhandleextractor getdb files
this blocks   dbhandleextractor getdb blocks
this flags   flags
public dbdirectory transaction txn  database files  database blocks
this txn  files  blocks  0
public void close
throws ioexception
flush
/**
* flush the currently open files. after they have been flushed it is
* safe to commit the transaction without closing this dbdirectory
* instance first.
* @see #settransaction
*/
public void flush
throws ioexception
iterator iterator   openfiles iterator
while  iterator hasnext
indexoutput  iterator next    flush
public indexoutput createoutput string name
throws ioexception
return new dbindexoutput this  name  true
public void deletefile string name
throws ioexception
new file name  delete this
public boolean fileexists string name
throws ioexception
return new file name  exists this
public long filelength string name
throws ioexception
file file   new file name
if  file exists this
return file getlength
throw new ioexception     name
public long filemodified string name
throws ioexception
file file   new file name
if  file exists this
return file gettimemodified
throw new ioexception     name
public string list
throws ioexception
dbc cursor   null
list list   new arraylist
try
try
databaseentry key   new databaseentry new byte
databaseentry data   new databaseentry  byte  null
data setpartial true
cursor   files cursor txn  flags
if  cursor get key  data
dbconstants db_set_range   flags     dbconstants db_notfound
bytearrayinputstream buffer
new bytearrayinputstream key getdata
datainputstream in   new datainputstream buffer
string name   in readutf
in close
list add name
while  cursor get key  data
dbconstants db_next   flags     dbconstants db_notfound
buffer   new bytearrayinputstream key getdata
in   new datainputstream buffer
name   in readutf
in close
list add name
finally
if  cursor    null
cursor close
catch  databaseexception e
throw new ioexception e getmessage
return  string  list toarray new string
public indexinput openinput string name
throws ioexception
return new dbindexinput this  name
public lock makelock string name
return new dblock
public void renamefile string from  string to
throws ioexception
new file from  rename this  to
public void touchfile string name
throws ioexception
file file   new file name
long length   0l
if  file exists this
length   file getlength
file modify this  length  system currenttimemillis
/**
* once a transaction handle was committed it is no longer valid. in
* order to continue using this dbdirectory instance after a commit, the
* transaction handle has to be replaced.
* @param txn the new transaction handle to use
*/
public void settransaction transaction txn
settransaction txn    null ? dbhandleextractor getdbtxn txn    null
/**
* once a transaction handle was committed it is no longer valid. in
* order to continue using this dbdirectory instance after a commit, the
* transaction handle has to be replaced.
* @param txn the new transaction handle to use
*/
public void settransaction dbtxn txn
this txn   txn