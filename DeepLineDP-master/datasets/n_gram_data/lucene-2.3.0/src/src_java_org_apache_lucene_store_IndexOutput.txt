package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** abstract base class for output to a file in a directory.  a random-access
* output stream.  used for all lucene index output operations.
* @see directory
* @see indexinput
*/
public abstract class indexoutput
/** writes a single byte.
* @see indexinput#readbyte()
*/
public abstract void writebyte byte b  throws ioexception
/** writes an array of bytes.
* @param b the bytes to write
* @param length the number of bytes to write
* @see indexinput#readbytes(byte[],int,int)
*/
public void writebytes byte b  int length  throws ioexception
writebytes b  0  length
/** writes an array of bytes.
* @param b the bytes to write
* @param offset the offset in the byte array
* @param length the number of bytes to write
* @see indexinput#readbytes(byte[],int,int)
*/
public abstract void writebytes byte b  int offset  int length  throws ioexception
/** writes an int as four bytes.
* @see indexinput#readint()
*/
public void writeint int i  throws ioexception
writebyte  byte  i >> 24
writebyte  byte  i >> 16
writebyte  byte  i >>  8
writebyte  byte  i
/** writes an int in a variable-length format.  writes between one and
* five bytes.  smaller values take fewer bytes.  negative numbers are not
* supported.
* @see indexinput#readvint()
*/
public void writevint int i  throws ioexception
while   i   ~0x7f     0
writebyte  byte   i   0x7f    0x80
i >>>  7
writebyte  byte i
/** writes a long as eight bytes.
* @see indexinput#readlong()
*/
public void writelong long i  throws ioexception
writeint  int   i >> 32
writeint  int  i
/** writes an long in a variable-length format.  writes between one and five
* bytes.  smaller values take fewer bytes.  negative numbers are not
* supported.
* @see indexinput#readvlong()
*/
public void writevlong long i  throws ioexception
while   i   ~0x7f     0
writebyte  byte   i   0x7f    0x80
i >>>  7
writebyte  byte i
/** writes a string.
* @see indexinput#readstring()
*/
public void writestring string s  throws ioexception
int length   s length
writevint length
writechars s  0  length
/** writes a sequence of utf-8 encoded characters from a string.
* @param s the source of the characters
* @param start the first character in the sequence
* @param length the number of characters in the sequence
* @see indexinput#readchars(char[],int,int)
*/
public void writechars string s  int start  int length
throws ioexception
final int end   start   length
for  int i   start  i < end  i
final int code    int s charat i
if  code >  0x01    code <  0x7f
writebyte  byte code
else if    code >  0x80      code <  0x7ff      code    0
writebyte  byte  0xc0    code >> 6
writebyte  byte  0x80    code   0x3f
else
writebyte  byte  0xe0    code >>> 12
writebyte  byte  0x80     code >> 6    0x3f
writebyte  byte  0x80    code   0x3f
/** writes a sequence of utf-8 encoded characters from a char[].
* @param s the source of the characters
* @param start the first character in the sequence
* @param length the number of characters in the sequence
* @see indexinput#readchars(char[],int,int)
*/
public void writechars char s  int start  int length
throws ioexception
final int end   start   length
for  int i   start  i < end  i
final int code    int s
if  code >  0x01    code <  0x7f
writebyte  byte code
else if    code >  0x80      code <  0x7ff      code    0
writebyte  byte  0xc0    code >> 6
writebyte  byte  0x80    code   0x3f
else
writebyte  byte  0xe0    code >>> 12
writebyte  byte  0x80     code >> 6    0x3f
writebyte  byte  0x80    code   0x3f
private static int copy_buffer_size   16384
private byte copybuffer
/** copy numbytes bytes from input to ourself. */
public void copybytes indexinput input  long numbytes  throws ioexception
long left   numbytes
if  copybuffer    null
copybuffer   new byte
while left > 0
final int tocopy
if  left > copy_buffer_size
tocopy   copy_buffer_size
else
tocopy    int  left
input readbytes copybuffer  0  tocopy
writebytes copybuffer  0  tocopy
left    tocopy
/** forces any buffered output to be written. */
public abstract void flush   throws ioexception
/** closes this stream to further operations. */
public abstract void close   throws ioexception
/** returns the current position in this file, where the next write will
* occur.
* @see #seek(long)
*/
public abstract long getfilepointer
/** sets current position in this file, where the next write will occur.
* @see #getfilepointer()
*/
public abstract void seek long pos  throws ioexception
/** the number of bytes in the file. */
public abstract long length   throws ioexception