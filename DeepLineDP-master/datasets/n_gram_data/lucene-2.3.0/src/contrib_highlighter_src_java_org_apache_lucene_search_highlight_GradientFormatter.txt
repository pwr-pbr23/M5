package org apache lucene search highlight
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* formats text with different color intensity depending on the score of the
* term.
*
* @author maharwood
*/
public class gradientformatter implements formatter
private float maxscore
int fgrmin  fggmin  fgbmin
int fgrmax  fggmax  fgbmax
protected boolean highlightforeground
int bgrmin  bggmin  bgbmin
int bgrmax  bggmax  bgbmax
protected boolean highlightbackground
/**
* sets the color range for the idf scores
*
* @param maxscore
*            the score (and above) displayed as maxcolor (see queryscorer.getmaxweight
* 			  which can be used to callibrate scoring scale)
* @param minforegroundcolor
*            the hex color used for representing idf scores of zero eg
*            #ffffff (white) or null if no foreground color required
* @param maxforegroundcolor
*            the largest hex color used for representing idf scores eg
*            #000000 (black) or null if no foreground color required
* @param minbackgroundcolor
*            the hex color used for representing idf scores of zero eg
*            #ffffff (white) or null if no background color required
* @param maxbackgroundcolor
*            the largest hex color used for representing idf scores eg
*            #000000 (black) or null if no background color required
*/
public gradientformatter float maxscore  string minforegroundcolor
string maxforegroundcolor  string minbackgroundcolor
string maxbackgroundcolor
highlightforeground    minforegroundcolor    null
maxforegroundcolor    null
if  highlightforeground
if  minforegroundcolor length      7
throw new illegalargumentexception
if  maxforegroundcolor length      7
throw new illegalargumentexception
fgrmin   hextoint minforegroundcolor substring 1  3
fggmin   hextoint minforegroundcolor substring 3  5
fgbmin   hextoint minforegroundcolor substring 5  7
fgrmax   hextoint maxforegroundcolor substring 1  3
fggmax   hextoint maxforegroundcolor substring 3  5
fgbmax   hextoint maxforegroundcolor substring 5  7
highlightbackground    minbackgroundcolor    null
maxbackgroundcolor    null
if  highlightbackground
if  minbackgroundcolor length      7
throw new illegalargumentexception
if  maxbackgroundcolor length      7
throw new illegalargumentexception
bgrmin   hextoint minbackgroundcolor substring 1  3
bggmin   hextoint minbackgroundcolor substring 3  5
bgbmin   hextoint minbackgroundcolor substring 5  7
bgrmax   hextoint maxbackgroundcolor substring 1  3
bggmax   hextoint maxbackgroundcolor substring 3  5
bgbmax   hextoint maxbackgroundcolor substring 5  7
//        this.corpusreader = corpusreader;
this maxscore   maxscore
//        totalnumdocs = corpusreader.numdocs();
public string highlightterm string originaltext  tokengroup tokengroup
if  tokengroup gettotalscore      0
return originaltext
float score   tokengroup gettotalscore
if  score    0
return originaltext
stringbuffer sb   new stringbuffer
sb append
if  highlightforeground
sb append  "
sb append getforegroundcolorstring score
sb append   "
if  highlightbackground
sb append  "
sb append getbackgroundcolorstring score
sb append   "
sb append
sb append originaltext
sb append
return sb tostring
protected string getforegroundcolorstring float score
int rval   getcolorval fgrmin  fgrmax  score
int gval   getcolorval fggmin  fggmax  score
int bval   getcolorval fgbmin  fgbmax  score
stringbuffer sb   new stringbuffer
sb append
sb append inttohex rval
sb append inttohex gval
sb append inttohex bval
return sb tostring
protected string getbackgroundcolorstring float score
int rval   getcolorval bgrmin  bgrmax  score
int gval   getcolorval bggmin  bggmax  score
int bval   getcolorval bgbmin  bgbmax  score
stringbuffer sb   new stringbuffer
sb append
sb append inttohex rval
sb append inttohex gval
sb append inttohex bval
return sb tostring
private int getcolorval int colormin  int colormax  float score
if  colormin    colormax
return colormin
float scale   math abs colormin   colormax
float relscorepercent   math min maxscore  score    maxscore
float colscore   scale   relscorepercent
return math min colormin  colormax     int  colscore
private static char hexdigits
private static string inttohex int i
return     hexdigits   hexdigits
/**
* converts a hex string into an int. integer.parseint(hex, 16) assumes the
* input is nonnegative unless there is a preceding minus sign. this method
* reads the input as twos complement instead, so if the input is 8 bytes
* long, it will correctly restore a negative int produced by
* integer.tohexstring() but not neccesarily one produced by
* integer.tostring(x,16) since that method will produce a string like '-ff'
* for negative integer values.
*
* @param hex
*            a string in capital or lower case hex, of no more then 16
*            characters.
* @throws numberformatexception
*             if the string is more than 16 characters long, or if any
*             character is not in the set [0-9a-fa-f]
*/
public static final int hextoint string hex
int len   hex length
if  len > 16
throw new numberformatexception
int l   0
for  int i   0  i < len  i
l <<  4
int c   character digit hex charat i   16
if  c < 0
throw new numberformatexception
l    c
return l