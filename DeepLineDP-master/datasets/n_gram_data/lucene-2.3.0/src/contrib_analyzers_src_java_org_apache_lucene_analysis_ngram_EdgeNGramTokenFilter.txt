package org apache lucene analysis ngram
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis token
import org apache lucene analysis tokenfilter
import org apache lucene analysis tokenstream
import java io ioexception
import java util linkedlist
/**
* tokenizes the given token into n-grams of given size(s).
* @author otis gospodnetic
*/
public class edgengramtokenfilter extends tokenfilter
public static final side default_side   side front
public static final int default_max_gram_size   1
public static final int default_min_gram_size   1
// replace this with an enum when the java 1.5 upgrade is made, the impl will be simplified
/** specifies which side of the input the n-gram should be generated from */
public static class side
private string label
/** get the n-gram from the front of the input */
public static side front   new side
/** get the n-gram from the end of the input */
public static side back   new side
// private ctor
private side string label    this label   label
public string getlabel     return label
// get the appropriate side from a string
public static side getside string sidename
if  front getlabel   equals sidename
return front
else if  back getlabel   equals sidename
return back
return null
private int mingram
private int maxgram
private side side
private linkedlist ngrams
protected edgengramtokenfilter tokenstream input
super input
this ngrams   new linkedlist
/**
* creates edgengramtokenfilter that can generate n-grams in the sizes of the given range
*
* @param input tokenstream holding the input to be tokenized
* @param side the {@link side} from which to chop off an n-gram
* @param mingram the smallest n-gram to generate
* @param maxgram the largest n-gram to generate
*/
public edgengramtokenfilter tokenstream input  side side  int mingram  int maxgram
super input
if  side    null
throw new illegalargumentexception
if  mingram < 1
throw new illegalargumentexception
if  mingram > maxgram
throw new illegalargumentexception
this mingram   mingram
this maxgram   maxgram
this side   side
this ngrams   new linkedlist
/**
* creates edgengramtokenfilter that can generate n-grams in the sizes of the given range
*
* @param input tokenstream holding the input to be tokenized
* @param sidelabel the name of the {@link side} from which to chop off an n-gram
* @param mingram the smallest n-gram to generate
* @param maxgram the largest n-gram to generate
*/
public edgengramtokenfilter tokenstream input  string sidelabel  int mingram  int maxgram
this input  side getside sidelabel   mingram  maxgram
/** returns the next token in the stream, or null at eos. */
public final token next   throws ioexception
if  ngrams size   > 0
return  token  ngrams removefirst
token token   input next
if  token    null
return null
ngram token
if  ngrams size   > 0
return  token  ngrams removefirst
else
return null
private void ngram token token
string instr   token termtext
int inlen   instr length
int gramsize   mingram
while  gramsize <  maxgram
// if the remaining input is too short, we can't generate any n-grams
if  gramsize > inlen
return
// if we have hit the end of our n-gram size range, quit
if  gramsize > maxgram
return
token tok
if  side    side front
tok   new token instr substring 0  gramsize   0  gramsize
else
tok   new token instr substring inlen gramsize   inlen gramsize  inlen
ngrams add tok
gramsize