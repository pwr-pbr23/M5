package org apache lucene misc
/* ====================================================================
* the apache software license, version 1.1
*
* copyright (c) 2001-2003 the apache software foundation.  all rights
* reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution,
*    if any, must include the following acknowledgment:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgment may appear in the software itself,
*    if and wherever such third-party acknowledgments normally appear.
*
* 4. the names "apache" and "apache software foundation" and
*    "apache lucene" must not be used to endorse or promote products
*    derived from this software without prior written permission. for
*    written permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache",
*    "apache lucene", nor may "apache" appear in their name, without
*    prior written permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*/
import org apache lucene index indexreader
import org apache lucene search filter
import java io ioexception
import java util bitset
/**
* <p>
* allows multiple {@link filter}s to be chained.
* logical operations such as <b>not</b> and <b>xor</b>
* are applied between filters. one operation can be used
* for all filters, or a specific operation can be declared
* for each filter.
* </p>
* <p>
* order in which filters are called depends on
* the position of the filter in the chain. it's probably
* more efficient to place the most restrictive filters
* /least computationally-intensive filters first.
* </p>
*
* @author <a href="mailto:kelvint@apache.org">kelvin tan</a>
*/
public class chainedfilter extends filter
/**
* {@link bitset#or}.
*/
public static final int or   0
/**
* {@link bitset#and}.
*/
public static final int and   1
/**
* {@link bitset#andnot}.
*/
public static final int andnot   2
/**
* {@link bitset#xor}.
*/
public static final int xor   3
/**
* logical operation when none is declared. defaults to
* {@link bitset#or}.
*/
public static int default   or
/** the filter chain */
private filter chain   null
private int logicarray
private int logic    1
/**
* ctor.
* @param chain the chain of filters
*/
public chainedfilter filter chain
this chain   chain
/**
* ctor.
* @param chain the chain of filters
* @param logicarray logical operations to apply between filters
*/
public chainedfilter filter chain  int logicarray
this chain   chain
this logicarray   logicarray
/**
* ctor.
* @param chain the chain of filters
* @param logic logicial operation to apply to all filters
*/
public chainedfilter filter chain  int logic
this chain   chain
this logic   logic
/**
* {@link filter#bits}.
*/
public bitset bits indexreader reader  throws ioexception
if  logic     1
return bits reader  logic
else if  logicarray    null
return bits reader  logicarray
else
return bits reader  default
/**
* delegates to each filter in the chain.
* @param reader indexreader
* @param logic logical operation
* @return bitset
*/
private bitset bits indexreader reader  int logic  throws ioexception
bitset result
int i   0
/**
* first and operation takes place against a completely false
* bitset and will always return zero results. thanks to
* daniel armbrust for pointing this out and suggesting workaround.
*/
if  logic    and
result    bitset  chain bits reader  clone
i
else if  logic    andnot
result    bitset  chain bits reader  clone
result flip 0 reader maxdoc
i
else
result   new bitset reader maxdoc
for    i < chain length  i
dochain result  reader  logic  chain
return result
/**
* delegates to each filter in the chain.
* @param reader indexreader
* @param logic logical operation
* @return bitset
*/
private bitset bits indexreader reader  int logic  throws ioexception
if  logic length    chain length
throw new illegalargumentexception
bitset result
int i   0
/**
* first and operation takes place against a completely false
* bitset and will always return zero results. thanks to
* daniel armbrust for pointing this out and suggesting workaround.
*/
if  logic    and
result    bitset  chain bits reader  clone
i
else if  logic    andnot
result    bitset  chain bits reader  clone
result flip 0 reader maxdoc
i
else
result   new bitset reader maxdoc
for    i < chain length  i
dochain result  reader  logic  chain
return result
public string tostring
stringbuffer sb   new stringbuffer
sb append
for  int i   0  i < chain length  i
sb append chain
sb append
sb append
return sb tostring
private void dochain bitset result  indexreader reader
int logic  filter filter  throws ioexception
switch  logic
case or
result or filter bits reader
break
case and
result and filter bits reader
break
case andnot
result andnot filter bits reader
break
case xor
result xor filter bits reader
break
default
dochain result  reader  default  filter
break