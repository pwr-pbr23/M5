package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util bitset
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index termdocs
import org apache lucene index termenum
public class duplicatefilter extends filter
string fieldname
/**
* keepmode determines which document id to consider as the master, all others being
* identified as duplicates. selecting the "first occurrence" can potentially save on io.
*/
int keepmode km_use_first_occurrence
public static final int km_use_first_occurrence 1
public static final int km_use_last_occurrence 2
/**
* "full" processing mode starts by setting all bits to false and only setting bits
* for documents that contain the given field and are identified as none-duplicates.
* "fast" processing sets all bits to true then unsets all duplicate docs found for the
* given field. this approach avoids the need to read termdocs for terms that are seen
* to have a document frequency of exactly "1" (i.e. no duplicates). while a potentially
* faster approach , the downside is that bitsets produced will include bits set for
* documents that do not actually contain the field given.
*
*/
int processingmode pm_full_validation
public static final int pm_full_validation 1
public static final int pm_fast_invalidation 2
public duplicatefilter string fieldname
this fieldname  km_use_last_occurrence pm_full_validation
public duplicatefilter string fieldname  int keepmode  int processingmode
this fieldname   fieldname
this keepmode   keepmode
this processingmode   processingmode
public bitset bits indexreader reader  throws ioexception
if processingmode  pm_fast_invalidation
return fastbits reader
else
return correctbits reader
private bitset correctbits indexreader reader  throws ioexception
bitset bits new bitset reader maxdoc       assume all are invalid
term startterm new term fieldname
termenum te   reader terms startterm
if te  null
term currterm te term
while  currterm  null    currterm field    startterm field       term fieldnames are interned
int lastdoc  1
//set non duplicates
termdocs td   reader termdocs currterm
if td next
if keepmode  km_use_first_occurrence
bits set td doc
else
do
lastdoc td doc
while td next
bits set lastdoc
if  te next
break
currterm te term
return bits
private bitset fastbits indexreader reader  throws ioexception
bitset bits new bitset reader maxdoc
bits set 0 reader maxdoc       assume all are valid
term startterm new term fieldname
termenum te   reader terms startterm
if te  null
term currterm te term
while  currterm  null    currterm field    startterm field       term fieldnames are interned
if te docfreq  >1
int lastdoc  1
//unset potential duplicates
termdocs td   reader termdocs currterm
td next
if keepmode  km_use_first_occurrence
td next
do
lastdoc td doc
bits set lastdoc false
while td next
if keepmode  km_use_last_occurrence
//restore the last bit
bits set lastdoc
if  te next
break
currterm te term
return bits
/**
* @param args
* @throws ioexception
* @throws exception
*/
public static void main string args  throws exception
indexreader r indexreader open
//		indexreader r=indexreader.open("/indexes/enron");
long start system currenttimemillis
//		duplicatefilter df = new duplicatefilter("threadid",km_use_first_occurrence, pm_fast_invalidation);
//		duplicatefilter df = new duplicatefilter("threadid",km_use_last_occurrence, pm_fast_invalidation);
duplicatefilter df   new duplicatefilter   km_use_last_occurrence  pm_fast_invalidation
//		duplicatefilter df = new duplicatefilter("title",use_last_occurrence);
//		df.setprocessingmode(pm_slow_validation);
bitset b   df bits r
long end system currenttimemillis   start
system out println b cardinality     end
public string getfieldname
return fieldname
public void setfieldname string fieldname
this fieldname   fieldname
public int getkeepmode
return keepmode
public void setkeepmode int keepmode
this keepmode   keepmode
public boolean equals object obj
if this    obj
return true
if  obj    null      obj getclass      this getclass
return false
duplicatefilter other    duplicatefilter obj
return keepmode    other keepmode
processingmode    other processingmode
fieldname    other fieldname     fieldname    null    fieldname equals other fieldname
public int hashcode
int hash   217
hash   31   hash   keepmode
hash   31   hash   processingmode
hash   31   hash   fieldname hashcode
return hash
public int getprocessingmode
return processingmode
public void setprocessingmode int processingmode
this processingmode   processingmode