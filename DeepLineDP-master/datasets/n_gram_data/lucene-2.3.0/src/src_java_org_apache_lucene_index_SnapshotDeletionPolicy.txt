package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util collection
import java util list
import java util arraylist
import java io ioexception
/** a {@link indexdeletionpolicy} that wraps around any other
*  {@link indexdeletionpolicy} and adds the ability to hold and
*  later release a single "snapshot" of an index.  while
*  the snapshot is held, the {@link indexwriter} will not
*  remove any files associated with it even if the index is
*  otherwise being actively, arbitrarily changed.  because
*  we wrap another arbitrary {@link indexdeletionpolicy}, this
*  gives you the freedom to continue using whatever {@link
*  indexdeletionpolicy} you would normally want to use with your
*  index. */
public class snapshotdeletionpolicy implements indexdeletionpolicy
private indexcommitpoint lastcommit
private indexdeletionpolicy primary
private indexcommitpoint snapshot
public snapshotdeletionpolicy indexdeletionpolicy primary
this primary   primary
public synchronized void oninit list commits  throws ioexception
primary oninit wrapcommits commits
lastcommit    indexcommitpoint  commits get commits size   1
public synchronized void oncommit list commits  throws ioexception
primary oncommit wrapcommits commits
lastcommit    indexcommitpoint  commits get commits size   1
/** take a snapshot of the most recent commit to the
*  index.  you must call release() to free this snapshot.
*  note that while the snapshot is held, the files it
*  references will not be deleted, which will consume
*  additional disk space in your index. if you take a
*  snapshot at a particularly bad time (say just before
*  you call optimize()) then in the worst case this could
*  consume an extra 1x of your total index size, until
*  you release the snapshot. */
public synchronized indexcommitpoint snapshot
if  snapshot    null
snapshot   lastcommit
else
throw new illegalstateexception
return snapshot
/** release the currently held snapshot. */
public synchronized void release
if  snapshot    null
snapshot   null
else
throw new illegalstateexception
private class mycommitpoint implements indexcommitpoint
indexcommitpoint cp
mycommitpoint indexcommitpoint cp
this cp   cp
public string getsegmentsfilename
return cp getsegmentsfilename
public collection getfilenames   throws ioexception
return cp getfilenames
public void delete
synchronized snapshotdeletionpolicy this
// suppress the delete request if this commit point is
// our current snapshot.
if  snapshot    cp
cp delete
private list wrapcommits list commits
final int count   commits size
list mycommits   new arraylist count
for int i 0 i<count i
mycommits add new mycommitpoint  indexcommitpoint  commits get i
return mycommits