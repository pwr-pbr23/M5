package org apache lucene index
/**
* copyright 2007 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util
/**
* store a sorted collection of {@link org.apache.lucene.index.termvectorentry}s.  collects all term information
* into a single, sortedset.
* <br/>
* note: this mapper ignores all field information for the document.  this means that if you are using offset/positions you will not
* know what fields they correlate with.
*  <br/>
* this is not thread-safe
*/
public class sortedtermvectormapper extends termvectormapper
private sortedset currentset
private map termtotve   new hashmap
private boolean storeoffsets
private boolean storepositions
/**
* stand-in name for the field in {@link termvectorentry}.
*/
public static final string all
/**
*
* @param comparator a comparator for sorting {@link termvectorentry}s
*/
public sortedtermvectormapper comparator comparator
this false  false  comparator
public sortedtermvectormapper boolean ignoringpositions  boolean ignoringoffsets  comparator comparator
super ignoringpositions  ignoringoffsets
currentset   new treeset comparator
/**
*
* @param term the term to map
* @param frequency the frequency of the term
* @param offsets offset information, may be null
* @param positions position information, may be null
*/
//we need to combine any previous mentions of the term
public void map string term  int frequency  termvectoroffsetinfo offsets  int positions
termvectorentry entry    termvectorentry  termtotve get term
if  entry    null
entry   new termvectorentry all  term  frequency
storeoffsets    true ? offsets   null
storepositions    true ? positions   null
termtotve put term  entry
currentset add entry
else
entry setfrequency entry getfrequency     frequency
if  storeoffsets
termvectoroffsetinfo  existingoffsets   entry getoffsets
//a few diff. cases here:  offsets is null, existing offsets is null, both are null, same for positions
if  existingoffsets    null    offsets    null    offsets length > 0
//copy over the existing offsets
termvectoroffsetinfo  newoffsets   new termvectoroffsetinfo
system arraycopy existingoffsets  0  newoffsets  0  existingoffsets length
system arraycopy offsets  0  newoffsets  existingoffsets length  offsets length
entry setoffsets newoffsets
else if  existingoffsets    null    offsets    null    offsets length > 0
entry setoffsets offsets
//else leave it alone
if  storepositions
int  existingpositions   entry getpositions
if  existingpositions    null    positions    null    positions length > 0
int  newpositions   new int
system arraycopy existingpositions  0  newpositions  0  existingpositions length
system arraycopy positions  0  newpositions  existingpositions length  positions length
entry setpositions newpositions
else if  existingpositions    null    positions    null    positions length > 0
entry setpositions positions
public void setexpectations string field  int numterms  boolean storeoffsets  boolean storepositions
this storeoffsets   storeoffsets
this storepositions   storepositions
/**
* the termvectorentryset.  a sortedset of {@link termvectorentry} objects.  sort is by the comparator passed into the constructor.
*<br/>
* this set will be empty until after the mapping process takes place.
*
* @return the sortedset of {@link termvectorentry}.
*/
public sortedset gettermvectorentryset
return currentset