package org apache lucene search spans
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util list
import java util arraylist
import org apache lucene index indexreader
import org apache lucene util priorityqueue
class nearspansunordered implements spans
private spannearquery query
private list ordered   new arraylist               spans in query order
private int slop                                   from query
private spanscell first                            linked list of spans
private spanscell last                             sorted by doc only
private int totallength                            sum of current lengths
private cellqueue queue                            sorted queue of spans
private spanscell max                              max element in queue
private boolean more   true                        true iff not done
private boolean firsttime   true                   true before first next
private class cellqueue extends priorityqueue
public cellqueue int size
initialize size
protected final boolean lessthan object o1  object o2
spanscell spans1    spanscell o1
spanscell spans2    spanscell o2
if  spans1 doc      spans2 doc
return nearspansordered docspansordered spans1  spans2
else
return spans1 doc   < spans2 doc
/** wraps a spans, and can be used to form a linked list. */
private class spanscell implements spans
private spans spans
private spanscell next
private int length    1
private int index
public spanscell spans spans  int index
this spans   spans
this index   index
public boolean next   throws ioexception
return adjust spans next
public boolean skipto int target  throws ioexception
return adjust spans skipto target
private boolean adjust boolean condition
if  length     1
totallength    length      subtract old length
if  condition
length   end     start
totallength    length     add new length
if  max    null    doc   > max doc
doc      max doc        end   > max end
max   this
more   condition
return condition
public int doc     return spans doc
public int start     return spans start
public int end     return spans end
public string tostring     return spans tostring         index
public nearspansunordered spannearquery query  indexreader reader
throws ioexception
this query   query
this slop   query getslop
spanquery clauses   query getclauses
queue   new cellqueue clauses length
for  int i   0  i < clauses length  i
spanscell cell
new spanscell clauses getspans reader   i
ordered add cell
public boolean next   throws ioexception
if  firsttime
initlist true
listtoqueue       initialize queue
firsttime   false
else if  more
if  min   next         trigger further scanning
queue adjusttop       maintain queue
else
more   false
while  more
boolean queuestale   false
if  min   doc      max doc                     maintain list
queuetolist
queuestale   true
// skip to doc w/ all clauses
while  more    first doc   < last doc
more   first skipto last doc                 skip first upto last
firsttolast                                  and move it to the end
queuestale   true
if   more  return false
// found doc w/ all clauses
if  queuestale                                 maintain the queue
listtoqueue
queuestale   false
if  atmatch
return true
more   min   next
if  more
queue adjusttop                            maintain queue
return false                                     no more matches
public boolean skipto int target  throws ioexception
if  firsttime                                    initialize
initlist false
for  spanscell cell   first  more    cell  null  cell cell next
more   cell skipto target                    skip all
if  more
listtoqueue
firsttime   false
else                                           normal case
while  more    min   doc   < target            skip as needed
if  min   skipto target
queue adjusttop
else
more   false
return more     atmatch       next
private spanscell min     return  spanscell queue top
public int doc     return min   doc
public int start     return min   start
public int end     return max end
public string tostring
return getclass   getname       query tostring
firsttime?   more? doc     start     end
private void initlist boolean next  throws ioexception
for  int i   0  more    i < ordered size    i
spanscell cell    spanscell ordered get i
if  next
more   cell next                             move to first entry
if  more
addtolist cell                               add to list
private void addtolist spanscell cell
if  last    null   			     add next to end of list
last next   cell
else
first   cell
last   cell
cell next   null
private void firsttolast
last next   first 			     move first to end of list
last   first
first   first next
last next   null
private void queuetolist
last   first   null
while  queue top      null
addtolist  spanscell queue pop
private void listtoqueue
queue clear       rebuild queue
for  spanscell cell   first  cell    null  cell   cell next
queue put cell                           add to queue from list
private boolean atmatch
return  min   doc      max doc
max end     min   start     totallength  <  slop