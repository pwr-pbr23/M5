package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index termdocs
import org apache lucene index termenum
import java io ioexception
import java util bitset
/**
* a filter that restricts search results to a range of values in a given
* field.
*
* <p>
* this code borrows heavily from {@link rangequery}, but is implemented as a filter
*
* </p>
*/
public class rangefilter extends filter
private string fieldname
private string lowerterm
private string upperterm
private boolean includelower
private boolean includeupper
/**
* @param fieldname the field this range applies to
* @param lowerterm the lower bound on this range
* @param upperterm the upper bound on this range
* @param includelower does this range include the lower bound?
* @param includeupper does this range include the upper bound?
* @throws illegalargumentexception if both terms are null or if
*  lowerterm is null and includelower is true (similar for upperterm
*  and includeupper)
*/
public rangefilter string fieldname  string lowerterm  string upperterm
boolean includelower  boolean includeupper
this fieldname   fieldname
this lowerterm   lowerterm
this upperterm   upperterm
this includelower   includelower
this includeupper   includeupper
if  null    lowerterm    null    upperterm
throw new illegalargumentexception
if  includelower    null    lowerterm
throw new illegalargumentexception
if  includeupper    null    upperterm
throw new illegalargumentexception
/**
* constructs a filter for field <code>fieldname</code> matching
* less than or equal to <code>upperterm</code>.
*/
public static rangefilter less string fieldname  string upperterm
return new rangefilter fieldname  null  upperterm  false  true
/**
* constructs a filter for field <code>fieldname</code> matching
* greater than or equal to <code>lowerterm</code>.
*/
public static rangefilter more string fieldname  string lowerterm
return new rangefilter fieldname  lowerterm  null  true  false
/**
* returns a bitset with true for documents which should be
* permitted in search results, and false for those that should
* not.
*/
public bitset bits indexreader reader  throws ioexception
bitset bits   new bitset reader maxdoc
termenum enumerator
null    lowerterm
? reader terms new term fieldname  lowerterm
reader terms new term fieldname
try
if  enumerator term      null
return bits
boolean checklower   false
if   includelower     make adjustments to set to exclusive
checklower   true
termdocs termdocs   reader termdocs
try
do
term term   enumerator term
if  term    null    term field   equals fieldname
if   checklower    null  lowerterm    term text   compareto lowerterm  > 0
checklower   false
if  upperterm    null
int compare   upperterm compareto term text
/* if beyond the upper term, or is exclusive and
* this is equal to the upper term, break out */
if   compare < 0
includeupper    compare  0
break
/* we have a good term, find the docs */
termdocs seek enumerator term
while  termdocs next
bits set termdocs doc
else
break
while  enumerator next
finally
termdocs close
finally
enumerator close
return bits
public string tostring
stringbuffer buffer   new stringbuffer
buffer append fieldname
buffer append
buffer append includelower ?
if  null    lowerterm
buffer append lowerterm
buffer append
if  null    upperterm
buffer append upperterm
buffer append includeupper ?
return buffer tostring
/** returns true if <code>o</code> is equal to this. */
public boolean equals object o
if  this    o  return true
if    o instanceof rangefilter   return false
rangefilter other    rangefilter  o
if   this fieldname equals other fieldname
this includelower    other includelower
this includeupper    other includeupper
return false
if  this lowerterm    null ?  this lowerterm equals other lowerterm    other lowerterm    null  return false
if  this upperterm    null ?  this upperterm equals other upperterm    other upperterm    null  return false
return true
/** returns a hash code value for this object.*/
public int hashcode
int h   fieldname hashcode
h ^  lowerterm    null ? lowerterm hashcode     0xb6ece882
h    h << 1     h >>> 31       rotate to distinguish lower from upper
h ^   upperterm    null ?  upperterm hashcode      0x91bec2c2
h ^   includelower ? 0xd484b933   0
^  includeupper ? 0x6ae423ac   0
return h