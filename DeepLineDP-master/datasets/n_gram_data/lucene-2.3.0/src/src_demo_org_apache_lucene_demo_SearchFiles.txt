package org apache lucene demo
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis standard standardanalyzer
import org apache lucene document document
import org apache lucene index filterindexreader
import org apache lucene index indexreader
import org apache lucene queryparser queryparser
import org apache lucene search hits
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search searcher
import java io bufferedreader
import java io filereader
import java io ioexception
import java io inputstreamreader
import java util date
/** simple command-line based search demo. */
public class searchfiles
/** use the norms from one field for all fields.  norms are read into memory,
* using a byte of memory per document per searched field.  this can cause
* search of large collections with a large number of fields to run out of
* memory.  if all of the fields contain only a single token, then the norms
* are all identical, then single norm vector may be shared. */
private static class onenormsreader extends filterindexreader
private string field
public onenormsreader indexreader in  string field
super in
this field   field
public byte norms string field  throws ioexception
return in norms this field
private searchfiles
/** simple command-line based search demo. */
public static void main string args  throws exception
string usage
if  args length > 0       equals args       equals args
system out println usage
system exit 0
string index
string field
string queries   null
int repeat   0
boolean raw   false
string normsfield   null
for  int i   0  i < args length  i
if    equals args
index   args
i
else if    equals args
field   args
i
else if    equals args
queries   args
i
else if    equals args
repeat   integer parseint args
i
else if    equals args
raw   true
else if    equals args
normsfield   args
i
indexreader reader   indexreader open index
if  normsfield    null
reader   new onenormsreader reader  normsfield
searcher searcher   new indexsearcher reader
analyzer analyzer   new standardanalyzer
bufferedreader in   null
if  queries    null
in   new bufferedreader new filereader queries
else
in   new bufferedreader new inputstreamreader system in
queryparser parser   new queryparser field  analyzer
while  true
if  queries    null                            prompt the user
system out println
string line   in readline
if  line    null    line length       1
break
line   line trim
if  line length      0
break
query query   parser parse line
system out println     query tostring field
hits hits   searcher search query
if  repeat > 0                                 repeat   time as benchmark
date start   new date
for  int i   0  i < repeat  i
hits   searcher search query
date end   new date
system out println    end gettime   start gettime
system out println hits length
final int hits_per_page   10
for  int start   0  start < hits length    start    hits_per_page
int end   math min hits length    start   hits_per_page
for  int i   start  i < end  i
if  raw                                    output raw format
system out println   hits id i    hits score i
continue
document doc   hits doc i
string path   doc get
if  path    null
system out println  i 1        path
string title   doc get
if  title    null
system out println     doc get
else
system out println  i 1
if  queries    null                          non interactive
break
if  hits length   > end
system out println
line   in readline
if  line length      0    line charat 0
break
reader close