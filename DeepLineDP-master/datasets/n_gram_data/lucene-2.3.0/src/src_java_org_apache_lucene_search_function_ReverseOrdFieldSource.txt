/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene search function
import org apache lucene index indexreader
import org apache lucene search fieldcache
import java io ioexception
/**
* expert: obtains the ordinal of the field value from the default lucene
* {@link org.apache.lucene.search.fieldcache fieldcache} using getstringindex()
* and reverses the order.
* <p>
* the native lucene index order is used to assign an ordinal value for each field value.
* <p>
* field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.
* <br>
* example of reverse ordinal (rord):
* <br>if there were only three field values: "apple","banana","pear"
* <br>then rord("apple")=3, rord("banana")=2, ord("pear")=1
* <p>
* warning:
* rord() depends on the position in an index and can thus change
* when other documents are inserted or deleted,
* or if a multisearcher is used.
*
* <p><font color="#ff0000">
* warning: the status of the <b>search.function</b> package is experimental.
* the apis introduced here might change in the future and will not be
* supported anymore in such a case.</font>
*
* @author yonik
*/
public class reverseordfieldsource extends valuesource
public string field
/**
* contructor for a certain field.
* @param field field whose values reverse order is used.
*/
public reverseordfieldsource string field
this field   field
/*(non-javadoc) @see org.apache.lucene.search.function.valuesource#description() */
public string description
return   field
/*(non-javadoc) @see org.apache.lucene.search.function.valuesource#getvalues(org.apache.lucene.index.indexreader) */
public docvalues getvalues indexreader reader  throws ioexception
final fieldcache stringindex sindex   fieldcache default getstringindex reader  field
final int arr   sindex order
final int end   sindex lookup length
return new docvalues
/*(non-javadoc) @see org.apache.lucene.search.function.docvalues#floatval(int) */
public float floatval int doc
return  float  end   arr
/* (non-javadoc) @see org.apache.lucene.search.function.docvalues#intval(int) */
public int intval int doc
return end   arr
/* (non-javadoc) @see org.apache.lucene.search.function.docvalues#strval(int) */
public string strval int doc
// the string value of the ordinal, not the string itself
return integer tostring intval doc
/*(non-javadoc) @see org.apache.lucene.search.function.docvalues#tostring(int) */
public string tostring int doc
return description         strval doc
/*(non-javadoc) @see org.apache.lucene.search.function.docvalues#getinnerarray() */
object getinnerarray
return arr
/*(non-javadoc) @see java.lang.object#equals(java.lang.object) */
public boolean equals object o
if  o getclass       reverseordfieldsource class  return false
reverseordfieldsource other    reverseordfieldsource o
return this field equals other field
private static final int hcode   reverseordfieldsource class hashcode
/*(non-javadoc) @see java.lang.object#hashcode() */
public int hashcode
return hcode   field hashcode