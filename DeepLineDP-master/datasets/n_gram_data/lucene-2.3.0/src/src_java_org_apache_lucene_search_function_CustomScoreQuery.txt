package org apache lucene search function
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util set
import org apache lucene index indexreader
import org apache lucene search complexexplanation
import org apache lucene search explanation
import org apache lucene search query
import org apache lucene search scorer
import org apache lucene search searcher
import org apache lucene search similarity
import org apache lucene search weight
import org apache lucene util tostringutils
/**
* query that sets document score as a programmatic function of several (sub) scores.
* <ol>
*    <li>the score of its subquery (any query)</li>
*    <li>(optional) the score of its valuesourtcequery (or queries),
*        for most simple/convineient use case this query would be a
*        {@link org.apache.lucene.search.function.fieldscorequery fieldscorequery}</li>
* </ol>
* subclasses can modify the computation by overriding {@link #customscore(int, float, float)}.
*
* <p><font color="#ff0000">
* warning: the status of the <b>search.function</b> package is experimental.
* the apis introduced here might change in the future and will not be
* supported anymore in such a case.</font>
*/
public class customscorequery extends query
private query subquery
private valuesourcequery valsrcqueries     never null  empty array if there are no valsrcqueries
private boolean strict   false     if true  valuesource part of query does not take part in weights normalization
/**
* create a customscorequery over input subquery.
* @param subquery the sub query whose scored is being customed. must not be null.
*/
public customscorequery query subquery
this subquery  new valuesourcequery
/**
* create a customscorequery over input subquery and a {@link valuesourcequery}.
* @param subquery the sub query whose score is being customed. must not be null.
* @param valsrcquery a value source query whose scores are used in the custom score
* computation. for most simple/convineient use case this would be a
* {@link org.apache.lucene.search.function.fieldscorequery fieldscorequery}.
* this parameter is optional - it can be null.
*/
public customscorequery query subquery  valuesourcequery valsrcquery
this subquery  valsrcquery  null ?    don't want an array that contains a single null
new valuesourcequery  valsrcquery    new valuesourcequery
/**
* create a customscorequery over input subquery and a {@link valuesourcequery}.
* @param subquery the sub query whose score is being customed. must not be null.
* @param valsrcqueries value source queries whose scores are used in the custom score
* computation. for most simple/convineient use case these would be
* {@link org.apache.lucene.search.function.fieldscorequery fieldscorequeries}.
* this parameter is optional - it can be null or even an empty array.
*/
public customscorequery query subquery  valuesourcequery valsrcqueries
super
this subquery   subquery
this valsrcqueries   valsrcqueries  null?
valsrcqueries   new valuesourcequery
if  subquery    null  throw new illegalargumentexception
/*(non-javadoc) @see org.apache.lucene.search.query#rewrite(org.apache.lucene.index.indexreader) */
public query rewrite indexreader reader  throws ioexception
subquery   subquery rewrite reader
for int i   0  i < valsrcqueries length  i
valsrcqueries    valuesourcequery  valsrcqueries rewrite reader
return this
/*(non-javadoc) @see org.apache.lucene.search.query#extractterms(java.util.set) */
public void extractterms set terms
subquery extractterms terms
for int i   0  i < valsrcqueries length  i
valsrcqueries extractterms terms
/*(non-javadoc) @see org.apache.lucene.search.query#clone() */
public object clone
customscorequery clone    customscorequery super clone
clone subquery    query  subquery clone
clone valsrcqueries   new valuesourcequery
for int i   0  i < valsrcqueries length  i
clone valsrcqueries    valuesourcequery  valsrcqueries clone
return clone
/* (non-javadoc) @see org.apache.lucene.search.query#tostring(java.lang.string) */
public string tostring string field
stringbuffer sb   new stringbuffer name    append
sb append subquery tostring field
for int i   0  i < valsrcqueries length  i
sb append    append valsrcqueries tostring field
sb append
sb append strict?
return sb tostring     tostringutils boost getboost
/** returns true if <code>o</code> is equal to this. */
public boolean equals object o
if  getclass      o getclass
return false
customscorequery other    customscorequery o
if  this getboost      other getboost
this subquery equals other subquery
this valsrcqueries length    other valsrcqueries length
return false
for  int i 0  i<valsrcqueries length  i        todo simplify with arrays deepequals   once moving to java 1 5
if   valsrcqueries equals other valsrcqueries
return false
return true
/** returns a hash code value for this object. */
public int hashcode
int valsrchash   0
for  int i 0  i<valsrcqueries length  i        todo simplify with arrays deephashcode   once moving to java 1 5
valsrchash    valsrcqueries hashcode
return  getclass   hashcode     subquery hashcode     valsrchash  ^ float floattointbits getboost
/**
* compute a custom score by the subquery score and a number of
* valuesourcequery scores.
* <p>
* subclasses can override this method to modify the custom score.
* <p>
* if your custom scoring is different than the default herein you
* should override at least one of the two customscore() methods.
* if the number of valuesourcequeries is always &lt; 2 it is
* sufficient to override the other
* {@link #customscore(int, float, float) costomscore()}
* method, which is simpler.
* <p>
* the default computation herein is:
* <pre>
*     modifiedscore = valsrcscore * subqueryscore[0] * subqueryscore[1] * ...
* </pre>
*
* @param doc id of scored doc.
* @param subqueryscore score of that doc by the subquery.
* @param valsrcscores score of that doc by the valuesourcequery.
* @return custom score.
*/
public float customscore int doc  float subqueryscore  float valsrcscores
if valsrcscores length    1
return customscore doc  subqueryscore  valsrcscores
if  valsrcscores length    0
return customscore doc  subqueryscore  1
float score   subqueryscore
for int i   0  i < valsrcscores length  i
score    valsrcscores
return score
/**
* compute a custom score by the subquery score and the valuesourcequery score.
* <p>
* subclasses can override this method to modify the custom score.
* <p>
* if your custom scoring is different than the default herein you
* should override at least one of the two customscore() methods.
* if the number of valuesourcequeries is always &lt; 2 it is
* sufficient to override this costomscore() method, which is simpler.
* <p>
* the default computation herein is:
* <pre>
*     modifiedscore = valsrcscore * subqueryscore
* </pre>
*
* @param doc id of scored doc.
* @param subqueryscore score of that doc by the subquery.
* @param valsrcscore score of that doc by the valuesourcequery.
* @return custom score.
*/
public float customscore int doc  float subqueryscore  float valsrcscore
return subqueryscore   valsrcscore
/**
* explain the custom score.
* whenever overriding {@link #customscore(int, float, float[])},
* this method should also be overridden to provide the correct explanation
* for the part of the custom scoring.
*
* @param doc doc being explained.
* @param subqueryexpl explanation for the sub-query part.
* @param valsrcexpls explanation for the value source part.
* @return an explanation for the custom score
*/
public explanation customexplain int doc  explanation subqueryexpl  explanation valsrcexpls
if valsrcexpls length    1
return customexplain doc  subqueryexpl  valsrcexpls
if  valsrcexpls length    0
return subqueryexpl
float valsrcscore   1
for int i   0  i < valsrcexpls length  i
valsrcscore    valsrcexpls getvalue
explanation exp   new explanation  valsrcscore   subqueryexpl getvalue
exp adddetail subqueryexpl
for int i   0  i < valsrcexpls length  i
exp adddetail valsrcexpls
return exp
/**
* explain the custom score.
* whenever overriding {@link #customscore(int, float, float)},
* this method should also be overridden to provide the correct explanation
* for the part of the custom scoring.
*
* @param doc doc being explained.
* @param subqueryexpl explanation for the sub-query part.
* @param valsrcexpl explanation for the value source part.
* @return an explanation for the custom score
*/
public explanation customexplain int doc  explanation subqueryexpl  explanation valsrcexpl
float valsrcscore   1
if  valsrcexpl    null
valsrcscore    valsrcexpl getvalue
explanation exp   new explanation  valsrcscore   subqueryexpl getvalue
exp adddetail subqueryexpl
exp adddetail valsrcexpl
return exp
//=========================== w e i g h t ============================
private class customweight implements weight
similarity similarity
weight subqueryweight
weight valsrcweights
boolean qstrict
public customweight searcher searcher  throws ioexception
this similarity   getsimilarity searcher
this subqueryweight   subquery weight searcher
this subqueryweight   subquery weight searcher
this valsrcweights   new weight
for int i   0  i < valsrcqueries length  i
this valsrcweights   valsrcqueries createweight searcher
this qstrict   strict
/*(non-javadoc) @see org.apache.lucene.search.weight#getquery() */
public query getquery
return customscorequery this
/*(non-javadoc) @see org.apache.lucene.search.weight#getvalue() */
public float getvalue
return getboost
/*(non-javadoc) @see org.apache.lucene.search.weight#sumofsquaredweights() */
public float sumofsquaredweights   throws ioexception
float sum   subqueryweight sumofsquaredweights
for int i   0  i < valsrcweights length  i
if  qstrict
valsrcweights sumofsquaredweights       do not include valuesource part in the query normalization
else
sum    valsrcweights sumofsquaredweights
sum    getboost     getboost       boost each sub weight
return sum
/*(non-javadoc) @see org.apache.lucene.search.weight#normalize(float) */
public void normalize float norm
norm    getboost       incorporate boost
subqueryweight normalize norm
for int i   0  i < valsrcweights length  i
if  qstrict
valsrcweights normalize 1      do not normalize the valuesource part
else
valsrcweights normalize norm
/*(non-javadoc) @see org.apache.lucene.search.weight#scorer(org.apache.lucene.index.indexreader) */
public scorer scorer indexreader reader  throws ioexception
scorer subqueryscorer   subqueryweight scorer reader
scorer valsrcscorers   new scorer
for int i   0  i < valsrcscorers length  i
valsrcscorers   valsrcweights scorer reader
return new customscorer similarity  reader  this  subqueryscorer  valsrcscorers
/*(non-javadoc) @see org.apache.lucene.search.weight#explain(org.apache.lucene.index.indexreader, int) */
public explanation explain indexreader reader  int doc  throws ioexception
return scorer reader  explain doc
//=========================== s c o r e r ============================
/**
* a scorer that applies a (callback) function on scores of the subquery.
*/
private class customscorer extends scorer
private final customweight weight
private final float qweight
private scorer subqueryscorer
private scorer valsrcscorers
private indexreader reader
private float vscores     reused in score   to avoid allocating this array for each doc
// constructor
private customscorer similarity similarity  indexreader reader  customweight w
scorer subqueryscorer  scorer valsrcscorers  throws ioexception
super similarity
this weight   w
this qweight   w getvalue
this subqueryscorer   subqueryscorer
this valsrcscorers   valsrcscorers
this reader   reader
this vscores   new float
/*(non-javadoc) @see org.apache.lucene.search.scorer#next() */
public boolean next   throws ioexception
boolean hasnext   subqueryscorer next
if hasnext
for int i   0  i < valsrcscorers length  i
valsrcscorers skipto subqueryscorer doc
return hasnext
/*(non-javadoc) @see org.apache.lucene.search.scorer#doc() */
public int doc
return subqueryscorer doc
/*(non-javadoc) @see org.apache.lucene.search.scorer#score() */
public float score   throws ioexception
for int i   0  i < valsrcscorers length  i
vscores   valsrcscorers score
return qweight   customscore subqueryscorer doc    subqueryscorer score    vscores
/*(non-javadoc) @see org.apache.lucene.search.scorer#skipto(int) */
public boolean skipto int target  throws ioexception
boolean hasnext   subqueryscorer skipto target
if hasnext
for int i   0  i < valsrcscorers length  i
valsrcscorers skipto subqueryscorer doc
return hasnext
/*(non-javadoc) @see org.apache.lucene.search.scorer#explain(int) */
public explanation explain int doc  throws ioexception
explanation subqueryexpl   weight subqueryweight explain reader doc
if   subqueryexpl ismatch
return subqueryexpl
// match
explanation valsrcexpls   new explanation
for int i   0  i < valsrcscorers length  i
valsrcexpls   valsrcscorers explain doc
explanation customexp   customexplain doc subqueryexpl valsrcexpls
float sc   qweight   customexp getvalue
explanation res   new complexexplanation
true  sc  customscorequery this tostring
res adddetail customexp
res adddetail new explanation qweight          actually using the q boost as q weight     weight value
return res
/*(non-javadoc) @see org.apache.lucene.search.query#createweight(org.apache.lucene.search.searcher) */
protected weight createweight searcher searcher  throws ioexception
return new customweight searcher
/**
* checks if this is strict custom scoring.
* in strict custom scoring, the valuesource part of does not participate in weight normalization.
* this may be useful when one wants full control over how scores are modified, and does
* not care about normalizing by the valuesource part.
* one particular case where this is useful if for testing this query.
* <p>
* note: only has effect when the valuesource part is not null.
*/
public boolean isstrict
return strict
/**
* set the strict mode of this query.
* @param strict the strict mode to set.
* @see #isstrict()
*/
public void setstrict boolean strict
this strict   strict
/**
* a short name of this query, used in {@link #tostring(string)}.
*/
public string name
return