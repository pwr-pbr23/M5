package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util set
import java util vector
import org apache lucene index term
import org apache lucene index termpositions
import org apache lucene index indexreader
import org apache lucene util tostringutils
/** a query that matches documents containing a particular sequence of terms.
* a phrasequery is built by queryparser for input like <code>"new york"</code>.
*
* <p>this query may be combined with other terms or queries with a {@link booleanquery}.
*/
public class phrasequery extends query
private string field
private vector terms   new vector
private vector positions   new vector
private int slop   0
/** constructs an empty phrase query. */
public phrasequery
/** sets the number of other words permitted between words in query phrase.
if zero, then this is an exact phrase search.  for larger values this works
like a <code>within</code> or <code>near</code> operator.
<p>the slop is in fact an edit-distance, where the units correspond to
moves of terms in the query phrase out of position.  for example, to switch
the order of two words requires two moves (the first move places the words
atop one another), so to permit re-orderings of phrases, the slop must be
at least two.
<p>more exact matches are scored higher than sloppier matches, thus search
results are sorted by exactness.
<p>the slop is zero by default, requiring exact matches.*/
public void setslop int s    slop   s
/** returns the slop.  see setslop(). */
public int getslop     return slop
/**
* adds a term to the end of the query phrase.
* the relative position of the term is the one immediately after the last term added.
*/
public void add term term
int position   0
if positions size   > 0
position     integer  positions lastelement    intvalue     1
add term  position
/**
* adds a term to the end of the query phrase.
* the relative position of the term within the phrase is specified explicitly.
* this allows e.g. phrases with more than one term at the same position
* or phrases with gaps (e.g. in connection with stopwords).
*
* @param term
* @param position
*/
public void add term term  int position
if  terms size      0
field   term field
else if  term field      field
throw new illegalargumentexception     term
terms addelement term
positions addelement new integer position
/** returns the set of terms in this phrase. */
public term getterms
return  term terms toarray new term
/**
* returns the relative positions of terms in this phrase.
*/
public int getpositions
int result   new int
for int i   0  i < positions size    i
result     integer  positions elementat i   intvalue
return result
private class phraseweight implements weight
private similarity similarity
private float value
private float idf
private float querynorm
private float queryweight
public phraseweight searcher searcher
throws ioexception
this similarity   getsimilarity searcher
idf   similarity idf terms  searcher
public string tostring     return     phrasequery this
public query getquery     return phrasequery this
public float getvalue     return value
public float sumofsquaredweights
queryweight   idf   getboost                   compute query weight
return queryweight   queryweight               square it
public void normalize float querynorm
this querynorm   querynorm
queryweight    querynorm                       normalize query weight
value   queryweight   idf                      idf for document
public scorer scorer indexreader reader  throws ioexception
if  terms size      0 			     optimize zero term case
return null
termpositions tps   new termpositions
for  int i   0  i < terms size    i
termpositions p   reader termpositions  term terms elementat i
if  p    null
return null
tps   p
if  slop    0 				     optimize exact case
return new exactphrasescorer this  tps  getpositions    similarity
reader norms field
else
return
new sloppyphrasescorer this  tps  getpositions    similarity  slop
reader norms field
public explanation explain indexreader reader  int doc
throws ioexception
explanation result   new explanation
result setdescription   getquery     doc
stringbuffer docfreqs   new stringbuffer
stringbuffer query   new stringbuffer
query append
for  int i   0  i < terms size    i
if  i    0
docfreqs append
query append
term term    term terms elementat i
docfreqs append term text
docfreqs append
docfreqs append reader docfreq term
query append term text
query append
explanation idfexpl
new explanation idf      field       docfreqs
// explain query weight
explanation queryexpl   new explanation
queryexpl setdescription     getquery
explanation boostexpl   new explanation getboost
if  getboost      1 0f
queryexpl adddetail boostexpl
queryexpl adddetail idfexpl
explanation querynormexpl   new explanation querynorm
queryexpl adddetail querynormexpl
queryexpl setvalue boostexpl getvalue
idfexpl getvalue
querynormexpl getvalue
result adddetail queryexpl
// explain field weight
explanation fieldexpl   new explanation
fieldexpl setdescription   field   query   doc
explanation tfexpl   scorer reader  explain doc
fieldexpl adddetail tfexpl
fieldexpl adddetail idfexpl
explanation fieldnormexpl   new explanation
byte fieldnorms   reader norms field
float fieldnorm
fieldnorms  null ? similarity decodenorm fieldnorms    0 0f
fieldnormexpl setvalue fieldnorm
fieldnormexpl setdescription   field   doc
fieldexpl adddetail fieldnormexpl
fieldexpl setvalue tfexpl getvalue
idfexpl getvalue
fieldnormexpl getvalue
result adddetail fieldexpl
// combine them
result setvalue queryexpl getvalue     fieldexpl getvalue
if  queryexpl getvalue      1 0f
return fieldexpl
return result
protected weight createweight searcher searcher  throws ioexception
if  terms size      1   			     optimize one term case
term term    term terms elementat 0
query termquery   new termquery term
termquery setboost getboost
return termquery createweight searcher
return new phraseweight searcher
/**
* @see org.apache.lucene.search.query#extractterms(java.util.set)
*/
public void extractterms set queryterms
queryterms addall terms
/** prints a user-readable version of this query. */
public string tostring string f
stringbuffer buffer   new stringbuffer
if   field equals f
buffer append field
buffer append
buffer append  "
for  int i   0  i < terms size    i
buffer append   term terms elementat i   text
if  i    terms size   1
buffer append
buffer append  "
if  slop    0
buffer append
buffer append slop
buffer append tostringutils boost getboost
return buffer tostring
/** returns true iff <code>o</code> is equal to this. */
public boolean equals object o
if    o instanceof phrasequery
return false
phrasequery other    phrasequery o
return  this getboost      other getboost
this slop    other slop
this terms equals other terms
this positions equals other positions
/** returns a hash code value for this object.*/
public int hashcode
return float floattointbits getboost
^ slop
^ terms hashcode
^ positions hashcode