package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene document document
import org apache lucene document fieldable
import org apache lucene store directory
import org apache lucene store indexinput
import org apache lucene store indexoutput
import java io ioexception
import java util
/** access to the fieldable info file that describes document fields and whether or
*  not they are indexed. each segment has a separate fieldable info file. objects
*  of this class are thread-safe for multiple readers, but only one thread can
*  be adding documents at a time, with no other reader or writer threads
*  accessing this object.
*/
final class fieldinfos
static final byte is_indexed   0x1
static final byte store_termvector   0x2
static final byte store_positions_with_termvector   0x4
static final byte store_offset_with_termvector   0x8
static final byte omit_norms   0x10
static final byte store_payloads   0x20
private arraylist bynumber   new arraylist
private hashmap byname   new hashmap
fieldinfos
/**
* construct a fieldinfos object using the directory and the name of the file
* indexinput
* @param d the directory to open the indexinput from
* @param name the name of the file to open the indexinput from in the directory
* @throws ioexception
*/
fieldinfos directory d  string name  throws ioexception
indexinput input   d openinput name
try
read input
finally
input close
/**
* returns a deep clone of this fieldinfos instance.
*/
public object clone
fieldinfos fis   new fieldinfos
final int numfield   bynumber size
for int i 0 i<numfield i
fieldinfo fi    fieldinfo    fieldinfo  bynumber get i   clone
fis bynumber add fi
fis byname put fi name  fi
return fis
/** adds field info for a document. */
public void add document doc
list fields   doc getfields
iterator fielditerator   fields iterator
while  fielditerator hasnext
fieldable field    fieldable  fielditerator next
add field name    field isindexed    field istermvectorstored    field isstorepositionwithtermvector
field isstoreoffsetwithtermvector    field getomitnorms
/**
* add fields that are indexed. whether they have termvectors has to be specified.
*
* @param names the names of the fields
* @param storetermvectors whether the fields store term vectors or not
* @param storepositionwithtermvector treu if positions should be stored.
* @param storeoffsetwithtermvector true if offsets should be stored
*/
public void addindexed collection names  boolean storetermvectors  boolean storepositionwithtermvector
boolean storeoffsetwithtermvector
iterator i   names iterator
while  i hasnext
add  string i next    true  storetermvectors  storepositionwithtermvector  storeoffsetwithtermvector
/**
* assumes the fields are not storing term vectors.
*
* @param names the names of the fields
* @param isindexed whether the fields are indexed or not
*
* @see #add(string, boolean)
*/
public void add collection names  boolean isindexed
iterator i   names iterator
while  i hasnext
add  string i next    isindexed
/**
* calls 5 parameter add with false for all termvector parameters.
*
* @param name the name of the fieldable
* @param isindexed true if the field is indexed
* @see #add(string, boolean, boolean, boolean, boolean)
*/
public void add string name  boolean isindexed
add name  isindexed  false  false  false  false
/**
* calls 5 parameter add with false for term vector positions and offsets.
*
* @param name the name of the field
* @param isindexed  true if the field is indexed
* @param storetermvector true if the term vector should be stored
*/
public void add string name  boolean isindexed  boolean storetermvector
add name  isindexed  storetermvector  false  false  false
/** if the field is not yet known, adds it. if it is known, checks to make
*  sure that the isindexed flag is the same as was given previously for this
*  field. if not - marks it as being indexed.  same goes for the termvector
* parameters.
*
* @param name the name of the field
* @param isindexed true if the field is indexed
* @param storetermvector true if the term vector should be stored
* @param storepositionwithtermvector true if the term vector with positions should be stored
* @param storeoffsetwithtermvector true if the term vector with offsets should be stored
*/
public void add string name  boolean isindexed  boolean storetermvector
boolean storepositionwithtermvector  boolean storeoffsetwithtermvector
add name  isindexed  storetermvector  storepositionwithtermvector  storeoffsetwithtermvector  false
/** if the field is not yet known, adds it. if it is known, checks to make
*  sure that the isindexed flag is the same as was given previously for this
*  field. if not - marks it as being indexed.  same goes for the termvector
* parameters.
*
* @param name the name of the field
* @param isindexed true if the field is indexed
* @param storetermvector true if the term vector should be stored
* @param storepositionwithtermvector true if the term vector with positions should be stored
* @param storeoffsetwithtermvector true if the term vector with offsets should be stored
* @param omitnorms true if the norms for the indexed field should be omitted
*/
public void add string name  boolean isindexed  boolean storetermvector
boolean storepositionwithtermvector  boolean storeoffsetwithtermvector  boolean omitnorms
add name  isindexed  storetermvector  storepositionwithtermvector
storeoffsetwithtermvector  omitnorms  false
/** if the field is not yet known, adds it. if it is known, checks to make
*  sure that the isindexed flag is the same as was given previously for this
*  field. if not - marks it as being indexed.  same goes for the termvector
* parameters.
*
* @param name the name of the field
* @param isindexed true if the field is indexed
* @param storetermvector true if the term vector should be stored
* @param storepositionwithtermvector true if the term vector with positions should be stored
* @param storeoffsetwithtermvector true if the term vector with offsets should be stored
* @param omitnorms true if the norms for the indexed field should be omitted
* @param storepayloads true if payloads should be stored for this field
*/
public fieldinfo add string name  boolean isindexed  boolean storetermvector
boolean storepositionwithtermvector  boolean storeoffsetwithtermvector
boolean omitnorms  boolean storepayloads
fieldinfo fi   fieldinfo name
if  fi    null
return addinternal name  isindexed  storetermvector  storepositionwithtermvector  storeoffsetwithtermvector  omitnorms  storepayloads
else
if  fi isindexed    isindexed
fi isindexed   true                          once indexed  always index
if  fi storetermvector    storetermvector
fi storetermvector   true                    once vector  always vector
if  fi storepositionwithtermvector    storepositionwithtermvector
fi storepositionwithtermvector   true                    once vector  always vector
if  fi storeoffsetwithtermvector    storeoffsetwithtermvector
fi storeoffsetwithtermvector   true                    once vector  always vector
if  fi omitnorms    omitnorms
fi omitnorms   false                    once norms are stored  always store
if  fi storepayloads    storepayloads
fi storepayloads   true
return fi
private fieldinfo addinternal string name  boolean isindexed
boolean storetermvector  boolean storepositionwithtermvector
boolean storeoffsetwithtermvector  boolean omitnorms  boolean storepayloads
fieldinfo fi
new fieldinfo name  isindexed  bynumber size    storetermvector  storepositionwithtermvector
storeoffsetwithtermvector  omitnorms  storepayloads
bynumber add fi
byname put name  fi
return fi
public int fieldnumber string fieldname
fieldinfo fi   fieldinfo fieldname
return  fi    null  ? fi number    1
public fieldinfo fieldinfo string fieldname
return  fieldinfo  byname get fieldname
/**
* return the fieldname identified by its number.
*
* @param fieldnumber
* @return the fieldname or an empty string when the field
* with the given number doesn't exist.
*/
public string fieldname int fieldnumber
fieldinfo fi   fieldinfo fieldnumber
return  fi    null  ? fi name
/**
* return the fieldinfo object referenced by the fieldnumber.
* @param fieldnumber
* @return the fieldinfo object or null when the given fieldnumber
* doesn't exist.
*/
public fieldinfo fieldinfo int fieldnumber
return  fieldnumber >  0  ?  fieldinfo  bynumber get fieldnumber    null
public int size
return bynumber size
public boolean hasvectors
boolean hasvectors   false
for  int i   0  i < size    i
if  fieldinfo i  storetermvector
hasvectors   true
break
return hasvectors
public void write directory d  string name  throws ioexception
indexoutput output   d createoutput name
try
write output
finally
output close
public void write indexoutput output  throws ioexception
output writevint size
for  int i   0  i < size    i
fieldinfo fi   fieldinfo i
byte bits   0x0
if  fi isindexed  bits    is_indexed
if  fi storetermvector  bits    store_termvector
if  fi storepositionwithtermvector  bits    store_positions_with_termvector
if  fi storeoffsetwithtermvector  bits    store_offset_with_termvector
if  fi omitnorms  bits    omit_norms
if  fi storepayloads  bits    store_payloads
output writestring fi name
output writebyte bits
private void read indexinput input  throws ioexception
int size   input readvint     read in the size
for  int i   0  i < size  i
string name   input readstring   intern
byte bits   input readbyte
boolean isindexed    bits   is_indexed     0
boolean storetermvector    bits   store_termvector     0
boolean storepositionswithtermvector    bits   store_positions_with_termvector     0
boolean storeoffsetwithtermvector    bits   store_offset_with_termvector     0
boolean omitnorms    bits   omit_norms     0
boolean storepayloads    bits   store_payloads     0
addinternal name  isindexed  storetermvector  storepositionswithtermvector  storeoffsetwithtermvector  omitnorms  storepayloads