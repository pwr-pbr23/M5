package org apache lucene search spell
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* edit distance  class
*/
final class trstringdistance
final char sa
final int n
final int cache new int
/**
* optimized to run a bit faster than the static getdistance().
* in one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster.
*/
public trstringdistance  string target
sa target tochararray
n sa length
}
//*****************************
// compute levenshtein distance
//*****************************
public final int getdistance (string other) {
int d[][]; // matrix
int cost; // cost
// step 1
final char[] ta=other.tochararray();
final int m=ta.length;
if (n==0) {
return m;
}
if (m==0) {
return n;
}
if (m>=cache.length) {
d=form(n, m);
}
else if (cache[m]!=null) {
d=cache[m];
}
else {
d=cache[m]=form(n, m);
// step 3
}
for (int i=1; i<=n; i++) {
final char s_i=sa[i-1];
// step 4
for (int j=1; j<=m; j++) {
final char t_j=ta[j-1];
// step 5
if (s_i==t_j) { // same
cost=0;
}
else { // not a match
cost=1;
// step 6
}
d[i][j]=min3(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+cost);
}
}
// step 7
return d[n][m];
}
/**
*
*/
private static int form  int n  int m
int d new int
// step 2
for  int i 0  i< n  i
d i
}
for  int j 0  j< m  j
d j
}
return d
}
//****************************
// get minimum of three values
//****************************
private static int min3  int a  int b  int c
int mi a
if  b<mi
mi b
}
if  c<mi
mi c
}
return mi
}
}