package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arraylist
import java util bitset
import org apache lucene index indexreader
import org apache lucene search booleanclause occur
/**
* a container filter that allows boolean composition of filters.
* filters are allocated into one of three logical constructs;
* should, must not, must
* the results filter bitset is constructed as follows:
* should filters are or'd together
* the resulting filter is not'd with the not filters
* the resulting filter is and'd with the must filters
* @author bpdthebault
*/
public class booleanfilter extends filter
//arraylist of should filters
arraylist shouldfilters   null
//arraylist of not filters
arraylist notfilters   null
//arraylist of must filters
arraylist mustfilters   null
/**
* returns the a bitset representing the boolean composition
* of the filters that have been added.
*/
public bitset bits indexreader reader  throws ioexception
//create a new bitset
bitset returnbits   null
//should filters
if  shouldfilters  null
returnbits     filter shouldfilters get 0   bits reader
//			avoid changing the original bitset - it may be cached
returnbits  bitset  returnbits clone
if  shouldfilters size   > 1
for  int i   1  i < shouldfilters size    i
returnbits or   filter shouldfilters get i   bits reader
//not filters
if  notfilters  null
for  int i   0  i < notfilters size    i
bitset notbits   filter notfilters get i   bits reader
if returnbits  null
returnbits  bitset  notbits clone
returnbits flip 0 reader maxdoc
else
returnbits andnot notbits
//must filters
if  mustfilters  null
for  int i   0  i < mustfilters size    i
bitset mustbits   filter mustfilters get i   bits reader
if returnbits  null
if mustfilters size    1
returnbits mustbits
else
//don't mangle the bitset
returnbits  bitset  mustbits clone
else
returnbits and mustbits
if returnbits  null
returnbits new bitset reader maxdoc
return returnbits
/**
* adds a new filterclause to the boolean filter container
* @param filterclause a filterclause object containing a filter and an occur parameter
*/
public void add filterclause filterclause
if  filterclause getoccur   equals occur must
if mustfilters  null
mustfilters new arraylist
mustfilters add filterclause getfilter
if  filterclause getoccur   equals occur should
if shouldfilters  null
shouldfilters new arraylist
shouldfilters add filterclause getfilter
if  filterclause getoccur   equals occur must_not
if notfilters  null
notfilters new arraylist
notfilters add filterclause getfilter
public boolean equals object obj
if this    obj
return true
if  obj    null      obj getclass      this getclass
return false
booleanfilter test    booleanfilter obj
return  notfilters    test notfilters
notfilters   null    notfilters equals test notfilters
mustfilters    test mustfilters
mustfilters   null    mustfilters equals test mustfilters
shouldfilters    test shouldfilters
shouldfilters   null    shouldfilters equals test shouldfilters
public int hashcode
int hash 7
hash   31   hash    null    mustfilters ? 0   mustfilters hashcode
hash   31   hash    null    notfilters ? 0   notfilters hashcode
hash   31   hash    null    shouldfilters ? 0   shouldfilters hashcode
return hash
/** prints a user-readable version of this query. */
public string tostring
stringbuffer buffer   new stringbuffer
buffer append
appendfilters shouldfilters  null  buffer
appendfilters mustfilters     buffer
appendfilters notfilters     buffer
buffer append
return buffer tostring
private void appendfilters arraylist filters  string occurstring
stringbuffer buffer
if  filters    null
return
for  int i   0  i < filters size    i
filter filter    filter  filters get i
if  occurstring    null
buffer append occurstring
buffer append filter
if  i < filters size     1
buffer append