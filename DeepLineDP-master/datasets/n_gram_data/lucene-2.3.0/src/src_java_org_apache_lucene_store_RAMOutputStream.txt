package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/**
* a memory-resident {@link indexoutput} implementation.
*
* @version $id$
*/
public class ramoutputstream extends indexoutput
static final int buffer_size   1024
private ramfile file
private byte currentbuffer
private int currentbufferindex
private int bufferposition
private long bufferstart
private int bufferlength
/** construct an empty output buffer. */
public ramoutputstream
this new ramfile
ramoutputstream ramfile f
file   f
// make sure that we switch to the
// first needed buffer lazily
currentbufferindex    1
currentbuffer   null
/** copy the current contents of this buffer to the named output. */
public void writeto indexoutput out  throws ioexception
flush
final long end   file length
long pos   0
int buffer   0
while  pos < end
int length   buffer_size
long nextpos   pos   length
if  nextpos > end                              at the last buffer
length    int  end   pos
out writebytes  byte file getbuffer buffer     length
pos   nextpos
/** resets this to an empty buffer. */
public void reset
try
seek 0
catch  ioexception e                           should never happen
throw new runtimeexception e tostring
file setlength 0
public void close   throws ioexception
flush
public void seek long pos  throws ioexception
// set the file length in case we seek back
// and flush() has not been called yet
setfilelength
if  pos < bufferstart    pos >  bufferstart   bufferlength
currentbufferindex    int   pos   buffer_size
switchcurrentbuffer
bufferposition    int   pos % buffer_size
public long length
return file length
public void writebyte byte b  throws ioexception
if  bufferposition    bufferlength
currentbufferindex
switchcurrentbuffer
currentbuffer   b
public void writebytes byte b  int offset  int len  throws ioexception
while  len > 0
if  bufferposition     bufferlength
currentbufferindex
switchcurrentbuffer
int remaininbuffer   currentbuffer length   bufferposition
int bytestocopy   len < remaininbuffer ? len   remaininbuffer
system arraycopy b  offset  currentbuffer  bufferposition  bytestocopy
offset    bytestocopy
len    bytestocopy
bufferposition    bytestocopy
private final void switchcurrentbuffer   throws ioexception
if  currentbufferindex    file numbuffers
currentbuffer   file addbuffer buffer_size
else
currentbuffer    byte  file getbuffer currentbufferindex
bufferposition   0
bufferstart    long  buffer_size    long  currentbufferindex
bufferlength   currentbuffer length
private void setfilelength
long pointer   bufferstart   bufferposition
if  pointer > file length
file setlength pointer
public void flush   throws ioexception
file setlastmodified system currenttimemillis
setfilelength
public long getfilepointer
return currentbufferindex < 0 ? 0   bufferstart   bufferposition