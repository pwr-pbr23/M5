package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index
/**
* position of a term in a document that takes into account the term offset within the phrase.
*/
final class phrasepositions
int doc 					     current doc
int position 					     position in doc
int count 					     remaining pos in this doc
int offset 					     position in phrase
termpositions tp 				     stream of positions
phrasepositions next 				     used to make lists
boolean repeats           there's other pp for same term  e g  query  ~1
phrasepositions termpositions t  int o
tp   t
offset   o
final boolean next   throws ioexception  	     increments to next doc
if   tp next
tp close   				     close stream
doc   integer max_value 			     sentinel value
return false
doc   tp doc
position   0
return true
final boolean skipto int target  throws ioexception
if   tp skipto target
tp close   				     close stream
doc   integer max_value 			     sentinel value
return false
doc   tp doc
position   0
return true
final void firstposition   throws ioexception
count   tp freq   				     read first pos
nextposition
/**
* go to next location of this term current document, and set
* <code>position</code> as <code>location - offset</code>, so that a
* matching exact phrase is easily identified when all phrasepositions
* have exactly the same <code>position</code>.
*/
final boolean nextposition   throws ioexception
if  count   > 0   				     read subsequent pos's
position   tp nextposition     offset
return true
else
return false