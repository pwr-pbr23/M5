package org apache lucene benchmark bytask tasks
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene benchmark bytask perfrundata
import org apache lucene benchmark bytask stats points
import org apache lucene benchmark bytask stats taskstats
import org apache lucene benchmark bytask utils format
/**
* a (abstract)  task to be tested for performance.
* <br>
* every performance task extends this class, and provides its own dologic() method,
* which performss the actual task.
* <br>
* tasks performing some work that should be measured for the task, can overide setup() and/or teardown() and
* placed that work there.
* <br>
* relevant properties: <code>task.max.depth.log</code>.
*/
public abstract class perftask implements cloneable
private perfrundata rundata
// propeties that all tasks have
private string name
private int depth   0
private int maxdepthlogstart   0
protected string params   null
protected static final string new_line   system getproperty
/**
* should not be used externally
*/
private perftask
name    format simplename getclass
if  name endswith
name   name substring 0 name length   4
public perftask perfrundata rundata
this
this rundata   rundata
this maxdepthlogstart   rundata getconfig   get   0
/* (non-javadoc)
* @see java.lang.object#clone()
*/
protected object clone   throws clonenotsupportedexception
// tasks having non primitive data structures should overide this.
// otherwise parallel running of a task sequence might not run crrectly.
return super clone
/**
* run the task, record statistics.
* @return number of work items done by this task.
*/
public final int runandmaybestats boolean reportstats  throws exception
if  reportstats    depth <  maxdepthlogstart     shouldneverlogatstart
system out println     getname
if   reportstats    shouldnotrecordstats
setup
int count   dologic
teardown
return count
setup
points pnts   rundata getpoints
taskstats ts   pnts marktaskstart this rundata getconfig   getroundnumber
int count   dologic
pnts marktaskend ts  count
teardown
return count
/**
* perform the task once (ignoring repetions specification)
* return number of work items done by this task.
* for indexing that can be number of docs added.
* for warming that can be number of scanned items, etc.
* @return number of work items done by this task.
*/
public abstract int dologic   throws exception
/**
* @return returns the name.
*/
public string getname
if  params  null
return name
return new stringbuffer name  append    append params  append    tostring
/**
* @param name the name to set.
*/
protected void setname string name
this name   name
/**
* @return returns the run data.
*/
public perfrundata getrundata
return rundata
/**
* @return returns the depth.
*/
public int getdepth
return depth
/**
* @param depth the depth to set.
*/
public void setdepth int depth
this depth   depth
// compute a blank string padding for printing this task indented by its depth
string getpadding
char c   new char
for  int i   0  i < c length  i    c
return new string c
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
string padd   getpadding
stringbuffer sb   new stringbuffer padd
sb append getname
return sb tostring
/**
* @return returns the maxdepthlogstart.
*/
int getmaxdepthlogstart
return maxdepthlogstart
/**
* tasks that should never log at start can overide this.
* @return true if this task should never log when it start.
*/
protected boolean shouldneverlogatstart
return false
/**
* tasks that should not record statistics can overide this.
* @return true if this task should never record its statistics.
*/
protected boolean shouldnotrecordstats
return false
/**
* task setup work that should not be measured for that specific task.
* by default it does nothing, but tasks can implement this, moving work from
* dologic() to this method. only the work done in dologicis measured for this task.
* notice that higher level (sequence) tasks containing this task would then
* measure larger time than the sum of their contained tasks.
* @throws exception
*/
public void setup    throws exception
/**
* task teardown work that should not be measured for that specific task.
* by default it does nothing, but tasks can implement this, moving work from
* dologic() to this method. only the work done in dologicis measured for this task.
* notice that higher level (sequence) tasks containing this task would then
* measure larger time than the sum of their contained tasks.
*/
public void teardown    throws exception
/**
* sub classes that supports parameters must overide this method to return true.
* @return true iff this task supports command line params.
*/
public boolean supportsparams
return false
/**
* set the params of this task.
* @exception unsupportedoperationexception for tasks supporting command line parameters.
*/
public void setparams string params
if   supportsparams
throw new unsupportedoperationexception getname
this params   params
/**
* @return returns the params.
*/
public string getparams
return params