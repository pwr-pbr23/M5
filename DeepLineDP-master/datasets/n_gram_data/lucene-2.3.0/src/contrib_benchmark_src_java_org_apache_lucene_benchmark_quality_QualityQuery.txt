/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene benchmark quality
import java util map
/**
* a qualityquery has an id and some name-value pairs.
* <p>
* the id allows to map the quality query with its judgements.
* <p>
* the name-value pairs are used by a
* {@link org.apache.lucene.benchmark.quality.qualityqueryparser}
* to create a lucene {@link org.apache.lucene.search.query}.
* <p>
* it is very likely that name-value-pairs would be mapped into fields in a lucene query,
* but it is up to the qualityqueryparser how to map - e.g. all values in a single field,
* or each pair as its own field, etc., - and this of course must match the way the
* searched index was constructed.
*/
public class qualityquery implements comparable
private string queryid
private map namevalpairs
/**
* create a qualityquery with given id and name-value pairs.
* @param queryid id of this quality query.
* @param namevalpairs the contents of this quality query.
*/
public qualityquery string queryid  map namevalpairs
this queryid   queryid
this namevalpairs   namevalpairs
/**
* return all the names of name-value-pairs in this qualityquery.
*/
public string getnames
return  string  namevalpairs keyset   toarray new string
/**
* return the value of a certain name-value pair.
* @param name the name whose value should be returned.
*/
public string getvalue string name
return  string  namevalpairs get name
/**
* return the id of this query.
* the id allows to map the quality query with its judgements.
*/
public string getqueryid
return queryid
/* for a nicer sort of input queries before running them.
* try first as ints, fall back to string if not int. */
public int compareto object o
qualityquery other    qualityquery  o
try
// compare as ints when ids ints
int n   integer parseint queryid
int nother   integer parseint other queryid
return n   nother
catch  numberformatexception e
// fall back to string comparison
return queryid compareto other queryid