package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene util priorityqueue
import java io ioexception
import java text collator
import java util locale
/**
* expert: a hit queue for sorting by hits by terms in more than one field.
* uses <code>fieldcache.default</code> for maintaining internal term lookup tables.
*
* <p>created: dec 8, 2003 12:56:03 pm
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
* @see searcher#search(query,filter,int,sort)
* @see fieldcache
*/
public class fieldsortedhitqueue
extends priorityqueue
/**
* creates a hit queue sorted by the given list of fields.
* @param reader  index to use.
* @param fields fieldable names, in priority order (highest priority first).  cannot be <code>null</code> or empty.
* @param size  the number of hits to retain.  must be greater than zero.
* @throws ioexception
*/
public fieldsortedhitqueue  indexreader reader  sortfield fields  int size
throws ioexception
final int n   fields length
comparators   new scoredoccomparator
this fields   new sortfield
for  int i 0  i<n    i
string fieldname   fields getfield
comparators   getcachedcomparator  reader  fieldname  fields gettype    fields getlocale    fields getfactory
if  comparators sorttype      sortfield string
this fields   new sortfield  fieldname  fields getlocale    fields getreverse
else
this fields   new sortfield  fieldname  comparators sorttype    fields getreverse
initialize  size
/** stores a comparator corresponding to each field being sorted by */
protected scoredoccomparator comparators
/** stores the sort criteria being used. */
protected sortfield fields
/** stores the maximum score value encountered, needed for normalizing. */
protected float maxscore   float negative_infinity
/** returns the maximum score encountered by elements inserted via insert()
*/
public float getmaxscore
return maxscore
// update maxscore.
private final void updatemaxscore fielddoc fdoc
maxscore   math max maxscore  fdoc score
// the signature of this method takes a fielddoc in order to avoid
// the unneeded cast to retrieve the score.
// inherit javadoc
public boolean insert fielddoc fdoc
updatemaxscore fdoc
return super insert fdoc
// this overrides priorityqueue.insert() so that insert(fielddoc) that
// keeps track of the score isn't accidentally bypassed.
// inherit javadoc
public boolean insert object fdoc
return insert  fielddoc fdoc
// this overrides priorityqueue.insertwithoverflow() so that
// updatemaxscore(fielddoc) that keeps track of the score isn't accidentally
// bypassed.
public object insertwithoverflow object element
updatemaxscore  fielddoc  element
return super insertwithoverflow element
/**
* returns whether <code>a</code> is less relevant than <code>b</code>.
* @param a scoredoc
* @param b scoredoc
* @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.
*/
protected boolean lessthan  final object a  final object b
final scoredoc doca    scoredoc  a
final scoredoc docb    scoredoc  b
// run comparators
final int n   comparators length
int c   0
for  int i 0  i<n    c  0    i
c    fields reverse  ? comparators compare  docb  doca
comparators compare  doca  docb
// avoid random sort order that could lead to duplicates (bug #31241):
if  c    0
return doca doc > docb doc
return c > 0
/**
* given a fielddoc object, stores the values used
* to sort the given document.  these values are not the raw
* values out of the index, but the internal representation
* of them.  this is so the given search hit can be collated
* by a multisearcher with other search hits.
* @param  doc  the fielddoc to store sort values into.
* @return  the same fielddoc passed in.
* @see searchable#search(weight,filter,int,sort)
*/
fielddoc fillfields  final fielddoc doc
final int n   comparators length
final comparable fields   new comparable
for  int i 0  i<n    i
fields   comparators sortvalue doc
doc fields   fields
//if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores
return doc
/** returns the sortfields being used by this hit queue. */
sortfield getfields
return fields
static scoredoccomparator getcachedcomparator  indexreader reader  string field  int type  locale locale  sortcomparatorsource factory
throws ioexception
if  type    sortfield doc  return scoredoccomparator indexorder
if  type    sortfield score  return scoredoccomparator relevance
fieldcacheimpl entry entry    factory    null
? new fieldcacheimpl entry  field  factory
new fieldcacheimpl entry  field  type  locale
return  scoredoccomparator comparators get reader  entry
/** internal cache of comparators. similar to fieldcache, only
*  caches comparators instead of term values. */
static final fieldcacheimpl cache comparators   new fieldcacheimpl cache
protected object createvalue indexreader reader  object entrykey
throws ioexception
fieldcacheimpl entry entry    fieldcacheimpl entry  entrykey
string fieldname   entry field
int type   entry type
locale locale   entry locale
sortcomparatorsource factory    sortcomparatorsource  entry custom
scoredoccomparator comparator
switch  type
case sortfield auto
comparator   comparatorauto  reader  fieldname
break
case sortfield int
comparator   comparatorint  reader  fieldname
break
case sortfield float
comparator   comparatorfloat  reader  fieldname
break
case sortfield long
comparator   comparatorlong reader  fieldname
break
case sortfield double
comparator   comparatordouble reader  fieldname
break
case sortfield string
if  locale    null  comparator   comparatorstringlocale  reader  fieldname  locale
else comparator   comparatorstring  reader  fieldname
break
case sortfield custom
comparator   factory newcomparator  reader  fieldname
break
default
throw new runtimeexception    type
return comparator
/**
* returns a comparator for sorting hits according to a field containing integers.
* @param reader  index to use.
* @param fieldname  fieldable containg integer values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorint  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final int fieldorder   fieldcache default getints  reader  field
return new scoredoccomparator
public final int compare  final scoredoc i  final scoredoc j
final int fi   fieldorder
final int fj   fieldorder
if  fi < fj  return  1
if  fi > fj  return 1
return 0
public comparable sortvalue  final scoredoc i
return new integer  fieldorder
public int sorttype
return sortfield int
/**
* returns a comparator for sorting hits according to a field containing integers.
* @param reader  index to use.
* @param fieldname  fieldable containg integer values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorlong  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final long fieldorder   extendedfieldcache ext_default getlongs  reader  field
return new scoredoccomparator
public final int compare  final scoredoc i  final scoredoc j
final long li   fieldorder
final long lj   fieldorder
if  li < lj  return  1
if  li > lj  return 1
return 0
public comparable sortvalue  final scoredoc i
return new long fieldorder
public int sorttype
return sortfield long
/**
* returns a comparator for sorting hits according to a field containing floats.
* @param reader  index to use.
* @param fieldname  fieldable containg float values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorfloat  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final float fieldorder   fieldcache default getfloats  reader  field
return new scoredoccomparator
public final int compare  final scoredoc i  final scoredoc j
final float fi   fieldorder
final float fj   fieldorder
if  fi < fj  return  1
if  fi > fj  return 1
return 0
public comparable sortvalue  final scoredoc i
return new float  fieldorder
public int sorttype
return sortfield float
/**
* returns a comparator for sorting hits according to a field containing doubles.
* @param reader  index to use.
* @param fieldname  fieldable containg float values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatordouble final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final double fieldorder   extendedfieldcache ext_default getdoubles  reader  field
return new scoredoccomparator
public final int compare  final scoredoc i  final scoredoc j
final double di   fieldorder
final double dj   fieldorder
if  di < dj  return  1
if  di > dj  return 1
return 0
public comparable sortvalue  final scoredoc i
return new double  fieldorder
public int sorttype
return sortfield double
/**
* returns a comparator for sorting hits according to a field containing strings.
* @param reader  index to use.
* @param fieldname  fieldable containg string values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorstring  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final fieldcache stringindex index   fieldcache default getstringindex  reader  field
return new scoredoccomparator
public final int compare  final scoredoc i  final scoredoc j
final int fi   index order
final int fj   index order
if  fi < fj  return  1
if  fi > fj  return 1
return 0
public comparable sortvalue  final scoredoc i
return index lookup]
public int sorttype
return sortfield string
/**
* returns a comparator for sorting hits according to a field containing strings.
* @param reader  index to use.
* @param fieldname  fieldable containg string values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorstringlocale  final indexreader reader  final string fieldname  final locale locale
throws ioexception
final collator collator   collator getinstance  locale
final string field   fieldname intern
final string index   fieldcache default getstrings  reader  field
return new scoredoccomparator
public final int compare final scoredoc i  final scoredoc j
string is   index
string js   index
if  is    js
return 0
else if  is    null
return  1
else if  js    null
return 1
else
return collator compare is  js
public comparable sortvalue  final scoredoc i
return index
public int sorttype
return sortfield string
/**
* returns a comparator for sorting hits according to values in the given field.
* the terms in the field are looked at to determine whether they contain integers,
* floats or strings.  once the type is determined, one of the other static methods
* in this class is called to get the comparator.
* @param reader  index to use.
* @param fieldname  fieldable containg values.
* @return  comparator for sorting hits.
* @throws ioexception if an error occurs reading the index.
*/
static scoredoccomparator comparatorauto  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
object lookuparray   extendedfieldcache ext_default getauto  reader  field
if  lookuparray instanceof fieldcache stringindex
return comparatorstring  reader  field
else if  lookuparray instanceof int
return comparatorint  reader  field
else if  lookuparray instanceof long
return comparatorlong  reader  field
else if  lookuparray instanceof float
return comparatorfloat  reader  field
else if  lookuparray instanceof string
return comparatorstring  reader  field
else
throw new runtimeexception    field