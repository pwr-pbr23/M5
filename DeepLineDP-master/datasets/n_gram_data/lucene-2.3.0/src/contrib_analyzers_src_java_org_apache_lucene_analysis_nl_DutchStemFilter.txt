package org apache lucene analysis nl
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis token
import org apache lucene analysis tokenfilter
import org apache lucene analysis tokenstream
import java io ioexception
import java util hashmap
import java util hashset
import java util set
import java util map
/**
* a filter that stems dutch words. it supports a table of words that should
* not be stemmed at all. the stemmer used can be changed at runtime after the
* filter object is created (as long as it is a dutchstemmer).
*
* @author edwin de jonge
*/
public final class dutchstemfilter extends tokenfilter
/**
* the actual token in the input stream.
*/
private token token   null
private dutchstemmer stemmer   null
private set exclusions   null
public dutchstemfilter tokenstream _in
super _in
stemmer   new dutchstemmer
/**
* builds a dutchstemfilter that uses an exclusiontable.
*/
public dutchstemfilter tokenstream _in  set exclusiontable
this _in
exclusions   exclusiontable
/**
* @param stemdictionary dictionary of word stem pairs, that overrule the algorithm
*/
public dutchstemfilter tokenstream _in  set exclusiontable  map stemdictionary
this _in  exclusiontable
stemmer setstemdictionary stemdictionary
/**
* @return returns the next token in the stream, or null at eos
*/
public token next   throws ioexception
if   token   input next       null
return null
// check the exclusiontable
else if  exclusions    null    exclusions contains token termtext
return token
else
string s   stemmer stem token termtext
// if not stemmed, dont waste the time creating a new token
if   s equals token termtext
return new token s  token startoffset
token endoffset    token type
return token
/**
* set a alternative/custom dutchstemmer for this filter.
*/
public void setstemmer dutchstemmer stemmer
if  stemmer    null
this stemmer   stemmer
/**
* set an alternative exclusion list for this filter.
*/
public void setexclusiontable hashset exclusiontable
exclusions   exclusiontable
/**
* set dictionary for stemming, this dictionary overrules the algorithm,
* so you can correct for a particular unwanted word-stem pair.
*/
public void setstemdictionary hashmap dict
if  stemmer    null
stemmer setstemdictionary dict