package org apache lucene analysis ru
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io reader
import java util hashset
import java util hashtable
import java util set
import org apache lucene analysis analyzer
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
/**
* analyzer for russian language. supports an external list of stopwords (words that
* will not be indexed at all).
* a default set of stopwords is used unless an alternative list is specified.
*
*
* @version $id$
*/
public final class russiananalyzer extends analyzer
// letters (currently unused letters are commented out)
private final static char a   0
private final static char b   1
private final static char v   2
private final static char g   3
private final static char d   4
private final static char e   5
private final static char zh   6
private final static char z   7
private final static char i   8
private final static char i_   9
private final static char k   10
private final static char l   11
private final static char m   12
private final static char n   13
private final static char o   14
private final static char p   15
private final static char r   16
private final static char s   17
private final static char t   18
private final static char u   19
//private final static char f = 20;
private final static char x   21
//private final static char ts = 22;
private final static char ch   23
private final static char sh   24
private final static char shch   25
//private final static char hard = 26;
private final static char y   27
private final static char soft   28
private final static char ae   29
private final static char iu   30
private final static char ia   31
/**
* list of typical russian stopwords.
*/
private static char russian_stop_words
a
b  e  z
b  o  l  e  e
b  y
b  y  l
b  y  l  a
b  y  l  i
b  y  l  o
b  y  t  soft
v
v  a  m
v  a  s
v  e  s  soft
v  o
v  o  t
v  s  e
v  s  e  g  o
v  s  e  x
v  y
g  d  e
d  a
d  a  zh  e
d  l  ia
d  o
e  g  o
e  e
e  i_
e  iu
e  s  l  i
e  s  t  soft
e  shch  e
zh  e
z  a
z  d  e  s  soft
i
i  z
i  l  i
i  m
i  x
k
k  a  k
k  o
k  o  g  d  a
k  t  o
l  i
l  i  b  o
m  n  e
m  o  zh  e  t
m  y
n  a
n  a  d  o
n  a  sh
n  e
n  e  g  o
n  e  e
n  e  t
n  i
n  i  x
n  o
n  u
o
o  b
o  d  n  a  k  o
o  n
o  n  a
o  n  i
o  n  o
o  t
o  ch  e  n  soft
p  o
p  o  d
p  r  i
s
s  o
t  a  k
t  a  k  zh  e
t  a  k  o  i_
t  a  m
t  e
t  e  m
t  o
t  o  g  o
t  o  zh  e
t  o  i_
t  o  l  soft  k  o
t  o  m
t  y
u
u  zh  e
x  o  t  ia
ch  e  g  o
ch  e  i_
ch  e  m
ch  t  o
ch  t  o  b  y
ch  soft  e
ch  soft  ia
ae  t  a
ae  t  i
ae  t  o
ia
/**
* contains the stopwords used with the stopfilter.
*/
private set stopset   new hashset
/**
* charset for russian letters.
* represents encoding for 32 lowercase russian letters.
* predefined charsets can be taken from russiancharsets class
*/
private char charset
public russiananalyzer
charset   russiancharsets unicoderussian
stopset   stopfilter makestopset
makestopwords russiancharsets unicoderussian
/**
* builds an analyzer.
*/
public russiananalyzer char charset
this charset   charset
stopset   stopfilter makestopset makestopwords charset
/**
* builds an analyzer with the given stop words.
*/
public russiananalyzer char charset  string stopwords
this charset   charset
stopset   stopfilter makestopset stopwords
// takes russian stop words and translates them to a string array, using
// the given charset
private static string makestopwords char charset
string res   new string
for  int i   0  i < res length  i
char thestopword   russian_stop_words
// translate the word, using the charset
stringbuffer theword   new stringbuffer
for  int j   0  j < thestopword length  j
theword append charset]
res   theword tostring
return res
/**
* builds an analyzer with the given stop words.
* @todo create a set version of this ctor
*/
public russiananalyzer char charset  hashtable stopwords
this charset   charset
stopset   new hashset stopwords keyset
/**
* creates a tokenstream which tokenizes all the text in the provided reader.
*
* @return  a tokenstream build from a russianlettertokenizer filtered with
*                  russianlowercasefilter, stopfilter, and russianstemfilter
*/
public tokenstream tokenstream string fieldname  reader reader
tokenstream result   new russianlettertokenizer reader  charset
result   new russianlowercasefilter result  charset
result   new stopfilter result  stopset
result   new russianstemfilter result  charset
return result