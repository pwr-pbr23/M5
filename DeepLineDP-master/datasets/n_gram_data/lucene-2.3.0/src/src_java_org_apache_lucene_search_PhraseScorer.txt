package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index
/** expert: scoring functionality for phrase queries.
* <br>a document is considered matching if it contains the phrase-query terms
* at "valid" positons. what "valid positions" are
* depends on the type of the phrase query: for an exact phrase query terms are required
* to appear in adjacent locations, while for a sloppy phrase query some distance between
* the terms is allowed. the abstract method {@link #phrasefreq()} of extending classes
* is invoked for each document containing all the phrase query terms, in order to
* compute the frequency of the phrase query in that document. a non zero frequency
* means a match.
*/
abstract class phrasescorer extends scorer
private weight weight
protected byte norms
protected float value
private boolean firsttime   true
private boolean more   true
protected phrasequeue pq
protected phrasepositions first  last
private float freq    prhase frequency in current doc as computed by phrasefreq
phrasescorer weight weight  termpositions tps  int offsets  similarity similarity
byte norms
super similarity
this norms   norms
this weight   weight
this value   weight getvalue
// convert tps to a list of phrase positions.
// note: phrase-position differs from term-position in that its position
// reflects the phrase offset: pp.pos = tp.pos - offset.
// this allows to easily identify a matching (exact) phrase
// when all phrasepositions have exactly the same position.
for  int i   0  i < tps length  i
phrasepositions pp   new phrasepositions tps  offsets
if  last    null   			     add next to end of list
last next   pp
else
first   pp
last   pp
pq   new phrasequeue tps length                  construct empty pq
public int doc     return first doc
public boolean next   throws ioexception
if  firsttime
init
firsttime   false
else if  more
more   last next                               trigger further scanning
return donext
// next without initial increment
private boolean donext   throws ioexception
while  more
while  more    first doc < last doc            find doc w  all the terms
more   first skipto last doc                 skip first upto last
firsttolast                                  and move it to the end
if  more
// found a doc with all of the terms
freq   phrasefreq                            check for phrase
if  freq    0 0f                             no match
more   last next                           trigger further scanning
else
return true                                found a match
return false                                     no more matches
public float score   throws ioexception
//system.out.println("scoring " + first.doc);
float raw   getsimilarity   tf freq    value     raw score
return raw   similarity decodenorm norms      normalize
public boolean skipto int target  throws ioexception
firsttime   false
for  phrasepositions pp   first  more    pp    null  pp   pp next
more   pp skipto target
if  more
sort                                           re sort
return donext
/**
* for a document containing all the phrase query terms, compute the
* frequency of the phrase in that document.
* a non zero frequency means a match.
* <br>note, that containing all phrase terms does not guarantee a match - they have to be found in matching locations.
* @return frequency of the phrase in current doc, 0 if not found.
*/
protected abstract float phrasefreq   throws ioexception
private void init   throws ioexception
for  phrasepositions pp   first  more    pp    null  pp   pp next
more   pp next
if more
sort
private void sort
pq clear
for  phrasepositions pp   first  pp    null  pp   pp next
pq put pp
pqtolist
protected final void pqtolist
last   first   null
while  pq top      null
phrasepositions pp    phrasepositions  pq pop
if  last    null   			     add next to end of list
last next   pp
else
first   pp
last   pp
pp next   null
protected final void firsttolast
last next   first 			     move first to end of list
last   first
first   first next
last next   null
public explanation explain final int doc  throws ioexception
explanation tfexplanation   new explanation
while  next      doc   < doc
float phrasefreq    doc      doc  ? freq   0 0f
tfexplanation setvalue getsimilarity   tf phrasefreq
tfexplanation setdescription     phrasefreq
return tfexplanation
public string tostring     return     weight