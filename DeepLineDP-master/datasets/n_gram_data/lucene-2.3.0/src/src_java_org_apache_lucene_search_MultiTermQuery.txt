package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene util tostringutils
/**
* a {@link query} that matches documents containing a subset of terms provided
* by a {@link filteredtermenum} enumeration.
* <p>
* <code>multitermquery</code> is not designed to be used by itself.
* <br>
* the reason being that it is not intialized with a {@link filteredtermenum}
* enumeration. a {@link filteredtermenum} enumeration needs to be provided.
* <p>
* for example, {@link wildcardquery} and {@link fuzzyquery} extend
* <code>multitermquery</code> to provide {@link wildcardtermenum} and
* {@link fuzzytermenum}, respectively.
*/
public abstract class multitermquery extends query
private term term
/** constructs a query for terms matching <code>term</code>. */
public multitermquery term term
this term   term
/** returns the pattern term. */
public term getterm     return term
/** construct the enumeration to be used, expanding the pattern term. */
protected abstract filteredtermenum getenum indexreader reader
throws ioexception
public query rewrite indexreader reader  throws ioexception
filteredtermenum enumerator   getenum reader
booleanquery query   new booleanquery true
try
do
term t   enumerator term
if  t    null
termquery tq   new termquery t           found a match
tq setboost getboost     enumerator difference        set the boost
query add tq  booleanclause occur should               add to query
while  enumerator next
finally
enumerator close
return query
/** prints a user-readable version of this query. */
public string tostring string field
stringbuffer buffer   new stringbuffer
if   term field   equals field
buffer append term field
buffer append
buffer append term text
buffer append tostringutils boost getboost
return buffer tostring
public boolean equals object o
if  this    o  return true
if    o instanceof multitermquery   return false
final multitermquery multitermquery    multitermquery  o
if   term equals multitermquery term   return false
return getboost      multitermquery getboost
public int hashcode
return term hashcode     float floattorawintbits getboost