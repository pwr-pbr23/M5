package lucli
/* ====================================================================
* the apache software license, version 1.1
*
* copyright (c) 2001 the apache software foundation.  all rights
* reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution,
*    if any, must include the following acknowledgment:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgment may appear in the software itself,
*    if and wherever such third-party acknowledgments normally appear.
*
* 4. the names "apache" and "apache software foundation" and
*    "apache lucene" must not be used to endorse or promote products
*    derived from this software without prior written permission. for
*    written permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache",
*    "apache lucene", nor may "apache" appear in their name, without
*    prior written permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*/
import java io file
import java io ioexception
import java io unsupportedencodingexception
import java util iterator
import java util set
import java util stringtokenizer
import java util treemap
import jline argumentcompletor
import jline completor
import jline consolereader
import jline filenamecompletor
import jline history
import jline simplecompletor
import org apache lucene queryparser parseexception
/**
* main class for lucli: the lucene command line interface.
* this class handles mostly the actual cli part, command names, help, etc.
*/
public class lucli
final static string default_index        directory   under the current directory
final static string historyfile        history file in user's home directory
public final static int max_terms   100    maximum number of terms we're going to show
// list of commands
// to add another command, add it in here, in the list of addcomand(), and in the switch statement
final static int nocommand    2
final static int unkown    1
final static int info   0
final static int search   1
final static int optimize   2
final static int quit   3
final static int help   4
final static int count   5
final static int terms   6
final static int index   7
final static int tokens   8
final static int explain   9
string historyfile
treemap commandmap   new treemap
lucenemethods lucenemethods    current cli class we're using
boolean enablereadline    false  use plain java  true  shared library readline
/**
main entry point. the first argument can be a filename with an
application initialization file.
*/
public lucli string args  throws ioexception
string line
historyfile   system getproperty      file separator	  historyfile
/*
* initialize the list of commands
*/
addcommand    info
addcommand    search     1
addcommand    count     1
addcommand    optimize
addcommand    quit
addcommand    help
addcommand    terms      max_terms
addcommand    index     1
addcommand    tokens     1
addcommand    explain     1
//parse command line arguments
parseargs args
consolereader cr   new consolereader
//readline.readhistoryfile(fullpath);
cr sethistory new history new file historyfile
// set completer with list of words
completor comp   new completor
new simplecompletor getcommandsasarray
new filenamecompletor
cr addcompletor  new argumentcompletor comp
// main input loop
lucenemethods   new lucenemethods default_index
while  true
try
line   cr readline
if  line    null
handlecommand line  cr
catch  java io eofexception eof
system out println      new line
exit
catch  unsupportedencodingexception enc
enc printstacktrace system err
catch  parseexception pe
pe printstacktrace system err
catch  ioexception ioe
ioe printstacktrace system err
private string getcommandsasarray
set commandset   commandmap keyset
string commands   new string
int i   0
for  iterator iter   commandset iterator    iter hasnext
string	cmd    string  iter next
commands   cmd
return commands
public static void main string args  throws ioexception
new lucli args
private void handlecommand string line  consolereader cr  throws ioexception  parseexception
string  words   tokenizecommand line
if  words length    0
return    white space
string query
if  line trim   startswith    		   #   comment
return
//command name and number of arguments
switch  getcommandid words  words length   1
case info
lucenemethods info
break
case search
for  int ii   1  ii < words length  ii
query    words
lucenemethods search query  false  false  cr
break
case count
for  int ii   1  ii < words length  ii
query    words
lucenemethods count query
break
case quit
exit
break
case terms
if words length > 1
lucenemethods terms words
else
lucenemethods terms null
break
case index
lucenemethods newlm   new lucenemethods words
try
newlm info      will fail if can't open the index
lucenemethods   newlm    ok  so we'll use the new one
catch  ioexception ioe
//problem we'll keep using the old one
error ioe tostring
break
case optimize
lucenemethods optimize
break
case tokens
for  int ii   1  ii < words length  ii
query    words
lucenemethods search query  false  true  cr
break
case explain
for  int ii   1  ii < words length  ii
query    words
lucenemethods search query  true  false  cr
break
case help
help
break
case nocommand    do nothing
break
case unkown
system out println     words
break
private string  tokenizecommand string line
stringtokenizer tokenizer   new stringtokenizer line
int size   tokenizer counttokens
string  tokens   new string
for  int ii   0  tokenizer hasmoretokens    ii
tokens    tokenizer nexttoken
return tokens
private void exit
system exit 0
/**
* add a command to the list of commands for the interpreter for a
* command that doesn't take any parameters.
* @param name  - the name of the command
* @param id  - the unique id of the command
* @param help  - the help message for this command
*/
private void addcommand string name  int id  string help
addcommand name  id  help  0
/**
* add a command to the list of commands for the interpreter.
* @param name  - the name of the command
* @param id  - the unique id of the command
* @param help  - the help message for this command
* @param params  - the minimum number of required params if any
*/
private void addcommand string name  int id  string help  int params
command command   new command name  id  help  params
commandmap put name  command
private int getcommandid string name  int params
name   name tolowercase      treat uppercase and lower case commands the same
command command    command  commandmap get name
if  command    null
return unkown
else
if command params > params
error command name       command params
return  nocommand
return  command id
private void help
iterator commands   commandmap keyset   iterator
while  commands hasnext
command command    command  commandmap get commands next
system out println     command name       command help
private void error string message
system err println     message
private void message string text
system out println text
/*
* parse command line arguments (currently none)
*/
private void parseargs string args
if  args length > 0
usage
system exit 1
private void usage
message
message
private class command
string name
int id
int numberargs
string help
int params
command string name  int id  string help  int params
this name   name
this id   id
this help   help
this params   params
/**
* prints out a usage message for this command.
*/
public string commandusage
return  name       help       params