package org apache lucene analysis standard
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis
import java io file
import java io ioexception
import java io reader
import java util set
/**
* filters {@link standardtokenizer} with {@link standardfilter}, {@link
* lowercasefilter} and {@link stopfilter}, using a list of english stop words.
*
* @version $id$
*/
public class standardanalyzer extends analyzer
private set stopset
/**
* specifies whether deprecated acronyms should be replaced with host type.
* this is false by default to support backward compatibility.
*
* @deprecated this should be removed in the next release (3.0).
*
* see https://issues.apache.org/jira/browse/lucene-1068
*/
private boolean replaceinvalidacronym   false
/** an array containing some common english words that are usually not
useful for searching. */
public static final string stop_words   stopanalyzer english_stop_words
/** builds an analyzer with the default stop words ({@link #stop_words}). */
public standardanalyzer
this stop_words
/** builds an analyzer with the given stop words. */
public standardanalyzer set stopwords
stopset   stopwords
/** builds an analyzer with the given stop words. */
public standardanalyzer string stopwords
stopset   stopfilter makestopset stopwords
/** builds an analyzer with the stop words from the given file.
* @see wordlistloader#getwordset(file)
*/
public standardanalyzer file stopwords  throws ioexception
stopset   wordlistloader getwordset stopwords
/** builds an analyzer with the stop words from the given reader.
* @see wordlistloader#getwordset(reader)
*/
public standardanalyzer reader stopwords  throws ioexception
stopset   wordlistloader getwordset stopwords
/**
*
* @param replaceinvalidacronym set to true if this analyzer should replace mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*
* @deprecated remove in 3.x and make true the only valid value
*/
public standardanalyzer boolean replaceinvalidacronym
this stop_words
this replaceinvalidacronym   replaceinvalidacronym
/**
*  @param stopwords the stopwords to use
* @param replaceinvalidacronym set to true if this analyzer should replace mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*
* @deprecated remove in 3.x and make true the only valid value
*/
public standardanalyzer reader stopwords  boolean replaceinvalidacronym  throws ioexception
this stopwords
this replaceinvalidacronym   replaceinvalidacronym
/**
* @param stopwords the stopwords to use
* @param replaceinvalidacronym set to true if this analyzer should replace mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*
* @deprecated remove in 3.x and make true the only valid value
*/
public standardanalyzer file stopwords  boolean replaceinvalidacronym  throws ioexception
this stopwords
this replaceinvalidacronym   replaceinvalidacronym
/**
*
* @param stopwords the stopwords to use
* @param replaceinvalidacronym set to true if this analyzer should replace mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*
* @deprecated remove in 3.x and make true the only valid value
*/
public standardanalyzer string  stopwords  boolean replaceinvalidacronym  throws ioexception
this stopwords
this replaceinvalidacronym   replaceinvalidacronym
/**
* @param stopwords the stopwords to use
* @param replaceinvalidacronym set to true if this analyzer should replace mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*
* @deprecated remove in 3.x and make true the only valid value
*/
public standardanalyzer set stopwords  boolean replaceinvalidacronym  throws ioexception
this stopwords
this replaceinvalidacronym   replaceinvalidacronym
/** constructs a {@link standardtokenizer} filtered by a {@link
standardfilter}, a {@link lowercasefilter} and a {@link stopfilter}. */
public tokenstream tokenstream string fieldname  reader reader
standardtokenizer tokenstream   new standardtokenizer reader  replaceinvalidacronym
tokenstream setmaxtokenlength maxtokenlength
tokenstream result   new standardfilter tokenstream
result   new lowercasefilter result
result   new stopfilter result  stopset
return result
private static final class savedstreams
standardtokenizer tokenstream
tokenstream filteredtokenstream
/** default maximum allowed token length */
public static final int default_max_token_length   255
private int maxtokenlength   default_max_token_length
/**
* set maximum allowed token length.  if a token is seen
* that exceeds this length then it is discarded.  this
* setting only takes effect the next time tokenstream or
* reusabletokenstream is called.
*/
public void setmaxtokenlength int length
maxtokenlength   length
/**
* @see #setmaxtokenlength
*/
public int getmaxtokenlength
return maxtokenlength
public tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
setprevioustokenstream streams
streams tokenstream   new standardtokenizer reader
streams filteredtokenstream   new standardfilter streams tokenstream
streams filteredtokenstream   new lowercasefilter streams filteredtokenstream
streams filteredtokenstream   new stopfilter streams filteredtokenstream  stopset
else
streams tokenstream reset reader
streams tokenstream setmaxtokenlength maxtokenlength
streams tokenstream setreplaceinvalidacronym replaceinvalidacronym
return streams filteredtokenstream
/**
*
* @return true if this analyzer is replacing mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*/
public boolean isreplaceinvalidacronym
return replaceinvalidacronym
/**
*
* @param replaceinvalidacronym set to true if this analyzer is replacing mischaracterized acronyms in the standardtokenizer
*
* see https://issues.apache.org/jira/browse/lucene-1068
*/
public void setreplaceinvalidacronym boolean replaceinvalidacronym
this replaceinvalidacronym   replaceinvalidacronym