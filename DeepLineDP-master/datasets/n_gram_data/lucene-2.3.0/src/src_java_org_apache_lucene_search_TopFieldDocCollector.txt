package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index indexreader
/** a {@link hitcollector} implementation that collects the top-sorting
* documents, returning them as a {@link topfielddocs}.  this is used by {@link
* indexsearcher} to implement {@link topfielddocs}-based search.
*
* <p>this may be extended, overriding the collect method to, e.g.,
* conditionally invoke <code>super()</code> in order to filter which
* documents are collected.
**/
public class topfielddoccollector extends topdoccollector
private fielddoc reusablefd
/** construct to collect a given number of hits.
* @param reader the index to be searched
* @param sort the sort criteria
* @param numhits the maximum number of hits to collect
*/
public topfielddoccollector indexreader reader  sort sort  int numhits
throws ioexception
super numhits  new fieldsortedhitqueue reader  sort fields  numhits
// javadoc inherited
public void collect int doc  float score
if  score > 0 0f
totalhits
if  reusablefd    null
reusablefd   new fielddoc doc  score
else
// whereas topdoccollector can skip this if the
// score is not competitive, we cannot because the
// comparators in the fieldsortedhitqueue.lessthan
// aren't in general congruent with "higher score
// wins"
reusablefd score   score
reusablefd doc   doc
reusablefd    fielddoc  hq insertwithoverflow reusablefd
// javadoc inherited
public topdocs topdocs
fieldsortedhitqueue fshq    fieldsortedhitqueue hq
scoredoc scoredocs   new scoredoc
for  int i   fshq size   1  i >  0  i            put docs in array
scoredocs   fshq fillfields   fielddoc  fshq pop
return new topfielddocs totalhits  scoredocs
fshq getfields    fshq getmaxscore