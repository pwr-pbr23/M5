/**
* copyright 2004 the apache software foundation.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene search similar
import java io ioexception
import java io stringreader
import java util hashset
import java util set
import org apache lucene analysis analyzer
import org apache lucene analysis tokenstream
import org apache lucene index term
import org apache lucene search booleanclause
import org apache lucene search booleanquery
import org apache lucene search indexsearcher
import org apache lucene search query
import org apache lucene search termquery
/**
* simple similarity measures.
*
* @see morelikethis
*/
public final class similarityqueries
/**
*
*/
private similarityqueries
/**
* simple similarity query generators.
* takes every unique word and forms a boolean query where all words are optional.
* after you get this you'll use to to query your {@link indexsearcher} for similar docs.
* the only caveat is the first hit returned <b>should be</b> your source document - you'll
* need to then ignore that.
*
* <p>
* so, if you have a code fragment like this:
* <br>
* <code>
* query q = formsimilaryquery( "i use lucene to search fast. fast searchers are good", new standardanalyzer(), "contents", null);
* </code>
*
* <p>
* the query returned, in string form, will be <code>'(i use lucene to search fast searchers are good')</code>.
*
* <p>
* the philosophy behind this method is "two documents are similar if they share lots of words".
* note that behind the scenes, lucenes scoring algorithm will tend to give two documents a higher similarity score if the share more uncommon words.
*
* <p>
* this method is fail-safe in that if a long 'body' is passed in and
* {@link booleanquery#add booleanquery.add()} (used internally)
* throws
* {@link org.apache.lucene.search.booleanquery.toomanyclauses booleanquery.toomanyclauses}, the
* query as it is will be returned.
*
* @param body the body of the document you want to find similar documents to
* @param a the analyzer to use to parse the body
* @param field the field you want to search on, probably something like "contents" or "body"
* @param stop optional set of stop words to ignore
* @return a query with all unique words in 'body'
* @throws ioexception this can't happen...
*/
public static query formsimilarquery  string body
analyzer a
string field
set stop
throws ioexception
tokenstream ts   a tokenstream  field  new stringreader  body
org apache lucene analysis token t
booleanquery tmp   new booleanquery
set already   new hashset       ignore dups
while    t   ts next       null
string word   t termtext
// ignore opt stop words
if   stop    null
stop contains  word   continue
// ignore dups
if     already add  word   continue
// add to query
termquery tq   new termquery  new term  field  word
try
tmp add  tq  booleanclause occur should
catch  booleanquery toomanyclauses too
// fail-safe, just return what we have, not the end of the world
break
return tmp