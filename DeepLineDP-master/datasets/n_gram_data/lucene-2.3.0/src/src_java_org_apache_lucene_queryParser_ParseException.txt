/* generated by:javacc: do not edit this line. parseexception.java version 3.0 */
package org apache lucene queryparser
/**
* this exception is thrown when parse errors are encountered.
* you can explicitly create objects of this exception type by
* calling the method generateparseexception in the generated
* parser.
*
* you can modify this class to customize your error reporting
* mechanisms so long as you retain the public fields.
*/
public class parseexception extends exception
/**
* this constructor is used by the method "generateparseexception"
* in the generated parser.  calling this constructor generates
* a new object of this type with the fields "currenttoken",
* "expectedtokensequences", and "tokenimage" set.  the boolean
* flag "specialconstructor" is also set to true to indicate that
* this constructor was used to create this object.
* this constructor calls its super class with the empty string
* to force the "tostring" method of parent class "throwable" to
* print the error message in the form:
*     parseexception: <result of getmessage>
*/
public parseexception token currenttokenval
int expectedtokensequencesval
string tokenimageval
super
specialconstructor   true
currenttoken   currenttokenval
expectedtokensequences   expectedtokensequencesval
tokenimage   tokenimageval
/**
* the following constructors are for use by you for whatever
* purpose you can think of.  constructing the exception in this
* manner makes the exception behave in the normal way - i.e., as
* documented in the class "throwable".  the fields "errortoken",
* "expectedtokensequences", and "tokenimage" do not contain
* relevant information.  the javacc generated code does not use
* these constructors.
*/
public parseexception
super
specialconstructor   false
public parseexception string message
super message
specialconstructor   false
/**
* this variable determines which constructor was used to create
* this object and thereby affects the semantics of the
* "getmessage" method (see below).
*/
protected boolean specialconstructor
/**
* this is the last token that has been consumed successfully.  if
* this object has been created due to a parse error, the token
* followng this token will (therefore) be the first error token.
*/
public token currenttoken
/**
* each entry in this array is an array of integers.  each array
* of integers represents a sequence of tokens (by their ordinal
* values) that is expected at this point of the parse.
*/
public int expectedtokensequences
/**
* this is a reference to the "tokenimage" array of the generated
* parser within which the parse error occurred.  this array is
* defined in the generated ...constants interface.
*/
public string tokenimage
/**
* this method has the standard behavior when this object has been
* created using the standard constructors.  otherwise, it uses
* "currenttoken" and "expectedtokensequences" to generate a parse
* error message and returns it.  if this object has been created
* due to a parse error, and you do not catch it (it gets thrown
* from the parser), then this method is called during the printing
* of the final stack trace, and hence the correct error message
* gets displayed.
*/
public string getmessage
if   specialconstructor
return super getmessage
string expected
int maxsize   0
for  int i   0  i < expectedtokensequences length  i
if  maxsize < expectedtokensequences length
maxsize   expectedtokensequences length
for  int j   0  j < expectedtokensequences length  j
expected    tokenimage]
if  expectedtokensequences length   1]    0
expected
expected    eol
string retval    "
token tok   currenttoken next
for  int i   0  i < maxsize  i
if  i    0  retval
if  tok kind    0
retval    tokenimage
break
retval    add_escapes tok image
tok   tok next
retval      at line    column "   currenttoken next begincolumn
retval        eol
if  expectedtokensequences length    1
retval        eol
else
retval        eol
retval    expected
return retval
/**
* the end of line string for this machine.
*/
protected string eol   system getproperty
/**
* used to convert raw characters to their escaped version
* when these raw version cannot be used as part of an ascii
* string literal.
*/
protected string add_escapes string str
stringbuffer retval   new stringbuffer
char ch
for  int i   0  i < str length    i
switch  str charat i
case 0
continue
case
retval append
continue
case
retval append
continue
case
retval append
continue
case
retval append
continue
case
retval append
continue
case
retval append  "
continue
case
retval append
continue
case
retval append
continue
default
if   ch   str charat i   < 0x20    ch > 0x7e
string s       integer tostring ch  16
retval append    append s substring s length     4  s length
else
retval append ch
continue
return retval tostring