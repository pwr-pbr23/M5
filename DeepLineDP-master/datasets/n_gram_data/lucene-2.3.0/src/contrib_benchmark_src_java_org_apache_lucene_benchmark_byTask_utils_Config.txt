package org apache lucene benchmark bytask utils
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io bufferedreader
import java io bytearrayinputstream
import java io ioexception
import java io reader
import java util arraylist
import java util list
import java util collections
import java util hashmap
import java util iterator
import java util properties
import java util stringtokenizer
/**
* perf run configuration properties.
* <p>
* numeric peroperty containing ":", e.g. "10:100:5" is interpreted
* as array of numeric values. it is extracted once, on first use, and
* maintain a round number to return the appropriate value.
* <p>
* the config property "work.dir" tells where is the root of
* docs data dirs and indexes dirs. it is set to either of: <ul>
* <li>value supplied for it in the alg file;</li>
* <li>otherwise, value of system property "benchmark.work.dir";</li>
* <li>otherwise, "work".</li>
* </ul>
*/
public class config
private static final string new_line   system getproperty
private int roundnumber   0
private properties props
private hashmap valbyround   new hashmap
private hashmap colforvalbyround   new hashmap
private string algorithmtext
/**
* read both algorithm and config properties.
* @param algreader from where to read algorithm and config properties.
* @throws ioexception
*/
public config  reader algreader  throws ioexception
// read alg file to array of lines
arraylist lines   new arraylist
bufferedreader r   new bufferedreader algreader
int lastconfigline 0
for  string line   r readline    line  null  line r readline
lines add line
if  line indexof   >0
lastconfigline   lines size
r close
// copy props lines to string
stringbuffer sb   new stringbuffer
for  int i 0  i<lastconfigline  i
sb append lines get i
sb append new_line
// read props from string
this props   new properties
props load new bytearrayinputstream sb tostring   getbytes
// make sure work dir is set properly
if  props get     null
props setproperty   system getproperty
if  boolean valueof props getproperty       booleanvalue
printprops
// copy algorithm lines
sb   new stringbuffer
for  int i lastconfigline  i<lines size    i
sb append lines get i
sb append new_line
algorithmtext   sb tostring
/**
* create config without algorithm - usefull for a programmatic perf test.
* @param props - configuration properties.
* @throws ioexception
*/
public config  properties props
this props   props
if  boolean valueof props getproperty       booleanvalue
printprops
private void printprops
system out println
list propkeys   new arraylist props keyset
collections sort propkeys
for  iterator it   propkeys iterator    it hasnext
string propname    string  it next
system out println propname       props getproperty propname
system out println
/**
* return a string property.
* @param name name of property.
* @param dflt default value.
* @return a string property.
*/
public string get  string name  string dflt
return props getproperty name dflt
/**
* set a property.
* note: once a multiple values property is set, it can no longer be modified.
* @param name name of property.
* @param value either single or multiple propery value (multple values are separated by ":")
* @throws exception
*/
public void set  string name  string value  throws exception
if  valbyround get name     null
throw new exception
props setproperty name value
/**
* return an int property.
* if the property contain ":", e.g. "10:100:5", it is interpreted
* as array of ints. it is extracted once, on first call
* to get() it, and a by-round-value is returned.
* @param name name of property
* @param dflt default value
* @return a int property.
*/
public int get  string name  int dflt
// use value by round if already parsed
int vals    int  valbyround get name
if  vals    null
return vals
// done if not by round
string sval   props getproperty name   dflt
if  sval indexof   <0
return integer parseint sval
// first time this prop is extracted by round
int k   sval indexof
string colname   sval substring 0 k
sval   sval substring k 1
colforvalbyround put name colname
vals   proptointarray sval
valbyround put name vals
return vals
/**
* return a double property.
* if the property contain ":", e.g. "10:100:5", it is interpreted
* as array of doubles. it is extracted once, on first call
* to get() it, and a by-round-value is returned.
* @param name name of property
* @param dflt default value
* @return a double property.
*/
public double get  string name  double dflt
// use value by round if already parsed
double vals    double  valbyround get name
if  vals    null
return vals
// done if not by round
string sval   props getproperty name   dflt
if  sval indexof   <0
return double parsedouble sval
// first time this prop is extracted by round
int k   sval indexof
string colname   sval substring 0 k
sval   sval substring k 1
colforvalbyround put name colname
vals   proptodoublearray sval
valbyround put name vals
return vals
/**
* return a boolean property.
* if the property contain ":", e.g. "true.true.false", it is interpreted
* as array of boleans. it is extracted once, on first call
* to get() it, and a by-round-value is returned.
* @param name name of property
* @param dflt default value
* @return a int property.
*/
public boolean get  string name  boolean dflt
// use value by round if already parsed
boolean vals    boolean  valbyround get name
if  vals    null
return vals
// done if not by round
string sval   props getproperty name   dflt
if  sval indexof   <0
return boolean valueof sval  booleanvalue
// first time this prop is extracted by round
int k   sval indexof
string colname   sval substring 0 k
sval   sval substring k 1
colforvalbyround put name colname
vals   proptobooleanarray sval
valbyround put name vals
return vals
/**
* increment the round number, for config values that are extracted by round number.
* @return the new round number.
*/
public int newround
roundnumber
stringbuffer sb   new stringbuffer    append roundnumber 1  append    append roundnumber
// log changes in values
if  valbyround size  >0
sb append
for  iterator iter   valbyround keyset   iterator    iter hasnext
string name    string  iter next
object a   valbyround get name
if  a instanceof int
int ai    int  a
int n1    roundnumber 1 %ai length
int n2   roundnumber%ai length
sb append    append name  append    append ai  append    append ai
else if  a instanceof double
double ad    double  a
int n1    roundnumber 1 %ad length
int n2   roundnumber%ad length
sb append    append name  append    append ad  append    append ad
else
boolean ab    boolean  a
int n1    roundnumber 1 %ab length
int n2   roundnumber%ab length
sb append    append name  append    append ab  append    append ab
system out println
system out println sb tostring
system out println
return roundnumber
// extract properties to array, e.g. for "10:100:5" return int[]{10,100,5}.
private int proptointarray  string s
if  s indexof   <0
return new int    integer parseint s
arraylist a   new arraylist
stringtokenizer st   new stringtokenizer s
while  st hasmoretokens
string t   st nexttoken
a add new integer t
int res   new int
for  int i 0  i<a size    i
res     integer  a get i   intvalue
return res
// extract properties to array, e.g. for "10.7:100.4:-2.3" return int[]{10.7,100.4,-2.3}.
private double proptodoublearray  string s
if  s indexof   <0
return new double    double parsedouble s
arraylist a   new arraylist
stringtokenizer st   new stringtokenizer s
while  st hasmoretokens
string t   st nexttoken
a add new double t
double res   new double
for  int i 0  i<a size    i
res     double  a get i   doublevalue
return res
// extract properties to array, e.g. for "true:true:false" return boolean[]{true,false,false}.
private boolean proptobooleanarray  string s
if  s indexof   <0
return new boolean    boolean valueof s  booleanvalue
arraylist a   new arraylist
stringtokenizer st   new stringtokenizer s
while  st hasmoretokens
string t   st nexttoken
a add new boolean t
boolean res   new boolean
for  int i 0  i<a size    i
res     boolean  a get i   booleanvalue
return res
/**
* @return names of params set by round, for reports title
*/
public string getcolsnamesforvalsbyround
if  colforvalbyround size    0
return
stringbuffer sb   new stringbuffer
for  iterator it   colforvalbyround keyset   iterator    it hasnext
string name    string  it next
string colname    string  colforvalbyround get name
sb append    append colname
return sb tostring
/**
* @return values of params set by round, for reports lines.
*/
public string getcolsvaluesforvalsbyround int roundnum
if  colforvalbyround size    0
return
stringbuffer sb   new stringbuffer
for  iterator it   colforvalbyround keyset   iterator    it hasnext
string name    string  it next
string colname    string  colforvalbyround get name
string template     colname
if  roundnum<0
// just append blanks
sb append format formatpaddleft   template
else
// append actual values, for that round
object a   valbyround get name
if  a instanceof int
int ai    int  a
int n   roundnum % ai length
sb append format format ai template
else if  a instanceof double
double ad    double  a
int n   roundnum % ad length
sb append format format 2  ad template
else
boolean ab    boolean  a
int n   roundnum % ab length
sb append format formatpaddleft   ab template
return sb tostring
/**
* @return the round number.
*/
public int getroundnumber
return roundnumber
/**
* @return returns the algorithmtext.
*/
public string getalgorithmtext
return algorithmtext