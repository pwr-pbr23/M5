package org apache lucene analysis fr
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util set
import java util hashset
import java util arrays
import java util iterator
import org apache lucene analysis token
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenfilter
/**
* removes elisions from a token stream. for example, "l'avion" (the plane) will be
* tokenized as "avion" (plane).
* <p>
* note that standardtokenizer sees " ' " as a space, and cuts it out.
*
* @see <a href="http://fr.wikipedia.org/wiki/%c3%89lision">elision in wikipedia</a>
* @author <a href="mailto:mlecarme@openwide.fr">mathieu lecarme</a>
*/
public class elisionfilter extends tokenfilter
private set articles   null
private static string apostrophes
public void setarticles set articles
this articles   new hashset
iterator iter   articles iterator
while  iter hasnext
this articles add   string  iter next    tolowercase
/**
* constructs an elision filter with standard stop words
*/
protected elisionfilter tokenstream input
super input
this articles   new hashset arrays aslist new string
/**
* constructs an elision filter with a set of stop words
*/
public elisionfilter tokenstream input  set articles
super input
setarticles articles
/**
* constructs an elision filter with an array of stop words
*/
public elisionfilter tokenstream input  string articles
super input
setarticles new hashset arrays aslist articles
/**
* returns the next input token whith termtext() without elisioned start
*/
public token next   throws ioexception
token t   input next
if  t    null
return null
string text   t termtext
system out println text
int minpoz    1
int poz
for  int i   0  i < apostrophes length    i
poz   text indexof apostrophes charat i
if  poz     1
minpoz    minpoz     1  ? poz   math min poz  minpoz
if  minpoz     1
articles contains text substring 0  minpoz  tolowercase
text   text substring minpoz   1
return new token text  t startoffset    t endoffset    t type