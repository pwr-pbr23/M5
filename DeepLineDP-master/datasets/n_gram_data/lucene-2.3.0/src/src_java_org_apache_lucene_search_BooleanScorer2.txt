package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arraylist
import java util list
import java util iterator
/** an alternative to booleanscorer that also allows a minimum number
* of optional scorers that should match.
* <br>implements skipto(), and has no limitations on the numbers of added scorers.
* <br>uses conjunctionscorer, disjunctionscorer, reqoptscorer and reqexclscorer.
*/
class booleanscorer2 extends scorer
private arraylist requiredscorers   new arraylist
private arraylist optionalscorers   new arraylist
private arraylist prohibitedscorers   new arraylist
private class coordinator
int maxcoord   0     to be increased for each non prohibited scorer
private float coordfactors   null
void init        use after all scorers have been added
coordfactors   new float
similarity sim   getsimilarity
for  int i   0  i <  maxcoord  i
coordfactors   sim coord i  maxcoord
int nrmatchers     to be increased by score   of match counting scorers
void initdoc
nrmatchers   0
float coordfactor
return coordfactors
private final coordinator coordinator
/** the scorer to which all scoring will be delegated,
* except for computing and using the coordination factor.
*/
private scorer countingsumscorer   null
/** the number of optionalscorers that need to match (if there are any) */
private final int minnrshouldmatch
/** whether it is allowed to return documents out of order.
*  this can accelerate the scoring of disjunction queries.
*/
private boolean allowdocsoutoforder
/** create a booleanscorer2.
* @param similarity the similarity to be used.
* @param minnrshouldmatch the minimum number of optional added scorers
*                         that should match during the search.
*                         in case no required scorers are added,
*                         at least one of the optional scorers will have to
*                         match during the search.
* @param allowdocsoutoforder whether it is allowed to return documents out of order.
*                            this can accelerate the scoring of disjunction queries.
*/
public booleanscorer2 similarity similarity  int minnrshouldmatch  boolean allowdocsoutoforder
super similarity
if  minnrshouldmatch < 0
throw new illegalargumentexception
coordinator   new coordinator
this minnrshouldmatch   minnrshouldmatch
this allowdocsoutoforder   allowdocsoutoforder
/** create a booleanscorer2.
*  in no required scorers are added,
*  at least one of the optional scorers will have to match during the search.
* @param similarity the similarity to be used.
* @param minnrshouldmatch the minimum number of optional added scorers
*                         that should match during the search.
*                         in case no required scorers are added,
*                         at least one of the optional scorers will have to
*                         match during the search.
*/
public booleanscorer2 similarity similarity  int minnrshouldmatch
this similarity  minnrshouldmatch  false
/** create a booleanscorer2.
*  in no required scorers are added,
*  at least one of the optional scorers will have to match during the search.
* @param similarity the similarity to be used.
*/
public booleanscorer2 similarity similarity
this similarity  0  false
public void add final scorer scorer  boolean required  boolean prohibited
if   prohibited
coordinator maxcoord
if  required
if  prohibited
throw new illegalargumentexception
requiredscorers add scorer
else if  prohibited
prohibitedscorers add scorer
else
optionalscorers add scorer
/** initialize the match counting scorer that sums all the
* scores. <p>
* when "counting" is used in a name it means counting the number
* of matching scorers.<br>
* when "sum" is used in a name it means score value summing
* over the matching scorers
*/
private void initcountingsumscorer   throws ioexception
coordinator init
countingsumscorer   makecountingsumscorer
/** count a scorer as a single match. */
private class singlematchscorer extends scorer
private scorer scorer
private int lastscoreddoc    1
singlematchscorer scorer scorer
super scorer getsimilarity
this scorer   scorer
public float score   throws ioexception
if  this doc   >  lastscoreddoc
lastscoreddoc   this doc
coordinator nrmatchers
return scorer score
public int doc
return scorer doc
public boolean next   throws ioexception
return scorer next
public boolean skipto int docnr  throws ioexception
return scorer skipto docnr
public explanation explain int docnr  throws ioexception
return scorer explain docnr
private scorer countingdisjunctionsumscorer final list scorers
int minnrshouldmatch
// each scorer from the list counted as a single matcher
return new disjunctionsumscorer scorers  minnrshouldmatch
private int lastscoreddoc    1
public float score   throws ioexception
if  this doc   >  lastscoreddoc
lastscoreddoc   this doc
coordinator nrmatchers    super nrmatchers
return super score
private static similarity defaultsimilarity   new defaultsimilarity
private scorer countingconjunctionsumscorer list requiredscorers  throws ioexception
// each scorer from the list counted as a single matcher
final int requirednrmatchers   requiredscorers size
return new conjunctionscorer defaultsimilarity  requiredscorers
private int lastscoreddoc    1
public float score   throws ioexception
if  this doc   >  lastscoreddoc
lastscoreddoc   this doc
coordinator nrmatchers    requirednrmatchers
// all scorers match, so defaultsimilarity super.score() always has 1 as
// the coordination factor.
// therefore the sum of the scores of the requiredscorers
// is used as score.
return super score
private scorer dualconjunctionsumscorer scorer req1  scorer req2  throws ioexception      non counting
return new conjunctionscorer defaultsimilarity  new scorer req1  req2
// all scorers match, so defaultsimilarity always has 1 as
// the coordination factor.
// therefore the sum of the scores of two scorers
// is used as score.
/** returns the scorer to be used for match counting and score summing.
* uses requiredscorers, optionalscorers and prohibitedscorers.
*/
private scorer makecountingsumscorer   throws ioexception      each scorer counted as a single matcher
return  requiredscorers size      0
? makecountingsumscorernoreq
makecountingsumscorersomereq
private scorer makecountingsumscorernoreq   throws ioexception      no required scorers
if  optionalscorers size      0
return new nonmatchingscorer       no clauses or only prohibited clauses
else      no required scorers  at least one optional scorer
// minnrshouldmatch optional scorers are required, but at least 1
int nroptrequired    minnrshouldmatch < 1  ? 1   minnrshouldmatch
if  optionalscorers size   < nroptrequired
return new nonmatchingscorer       fewer optional clauses than minimum  at least 1  that should match
else      optionalscorers size   >  nroptrequired  no required scorers
scorer requiredcountingsumscorer
optionalscorers size   > nroptrequired
? countingdisjunctionsumscorer optionalscorers  nroptrequired
optionalscorers size      nroptrequired  all optional scorers are required   no required scorers
optionalscorers size      1
? new singlematchscorer  scorer  optionalscorers get 0
countingconjunctionsumscorer optionalscorers
return addprohibitedscorers requiredcountingsumscorer
private scorer makecountingsumscorersomereq   throws ioexception      at least one required scorer
if  optionalscorers size   < minnrshouldmatch
return new nonmatchingscorer       fewer optional clauses than minimum that should match
else if  optionalscorers size      minnrshouldmatch       all optional scorers also required
arraylist allreq   new arraylist requiredscorers
allreq addall optionalscorers
return addprohibitedscorers countingconjunctionsumscorer allreq
else      optionalscorers size   > minnrshouldmatch  and at least one required scorer
scorer requiredcountingsumscorer
requiredscorers size      1
? new singlematchscorer  scorer  requiredscorers get 0
countingconjunctionsumscorer requiredscorers
if  minnrshouldmatch > 0       use a required disjunction scorer over the optional scorers
return addprohibitedscorers
dualconjunctionsumscorer     non counting
requiredcountingsumscorer
countingdisjunctionsumscorer
optionalscorers
minnrshouldmatch
else      minnrshouldmatch    0
return new reqoptsumscorer
addprohibitedscorers requiredcountingsumscorer
optionalscorers size      1
? new singlematchscorer  scorer  optionalscorers get 0
countingdisjunctionsumscorer optionalscorers  1        require 1 in combined  optional scorer
/** returns the scorer to be used for match counting and score summing.
* uses the given required scorer and the prohibitedscorers.
* @param requiredcountingsumscorer a required scorer already built.
*/
private scorer addprohibitedscorers scorer requiredcountingsumscorer
return  prohibitedscorers size      0
? requiredcountingsumscorer    no prohibited
new reqexclscorer requiredcountingsumscorer
prohibitedscorers size      1
?  scorer  prohibitedscorers get 0
new disjunctionsumscorer prohibitedscorers
/** scores and collects all matching documents.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* <br>when this method is used the {@link #explain(int)} method should not be used.
*/
public void score hitcollector hc  throws ioexception
if  allowdocsoutoforder    requiredscorers size      0
prohibitedscorers size   < 32
// fall back to booleanscorer, scores documents somewhat out of order
booleanscorer bs   new booleanscorer getsimilarity    minnrshouldmatch
iterator si   optionalscorers iterator
while  si hasnext
bs add  scorer  si next    false    required     false    prohibited
si   prohibitedscorers iterator
while  si hasnext
bs add  scorer  si next    false    required     true    prohibited
bs score hc
else
if  countingsumscorer    null
initcountingsumscorer();
while  countingsumscorer next
hc collect countingsumscorer doc    score
/** expert: collects matching documents in a range.
* <br>note that {@link #next()} must be called once before this method is
* called for the first time.
* @param hc the collector to which all matching documents are passed through
* {@link hitcollector#collect(int, float)}.
* @param max do not score documents past this.
* @return true if more matching documents may remain.
*/
protected boolean score hitcollector hc  int max  throws ioexception
// null pointer exception when next() was not called before:
int docnr   countingsumscorer doc
while  docnr < max
hc collect docnr  score
if    countingsumscorer next
return false
docnr   countingsumscorer doc
return true
public int doc     return countingsumscorer doc
public boolean next   throws ioexception
if  countingsumscorer    null
initcountingsumscorer();
return countingsumscorer next
public float score   throws ioexception
coordinator initdoc
float sum   countingsumscorer score
return sum   coordinator coordfactor
/** skips to the first match beyond the current whose document number is
* greater than or equal to a given target.
*
* <p>when this method is used the {@link #explain(int)} method should not be used.
*
* @param target the target document number.
* @return true iff there is such a match.
*/
public boolean skipto int target  throws ioexception
if  countingsumscorer    null
initcountingsumscorer();
return countingsumscorer skipto target
/** throws an unsupportedoperationexception.
* todo: implement an explanation of the coordination factor.
* @param doc the document number for the explanation.
* @throws unsupportedoperationexception
*/
public explanation explain int doc
throw new unsupportedoperationexception
/* how to explain the coordination factor?
initcountingsumscorer();
return countingsumscorer.explain(doc); // misses coord factor.
*/