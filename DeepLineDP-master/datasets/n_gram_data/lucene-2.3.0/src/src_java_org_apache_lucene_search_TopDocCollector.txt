package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene util priorityqueue
/** a {@link hitcollector} implementation that collects the top-scoring
* documents, returning them as a {@link topdocs}.  this is used by {@link
* indexsearcher} to implement {@link topdocs}-based search.
*
* <p>this may be extended, overriding the collect method to, e.g.,
* conditionally invoke <code>super()</code> in order to filter which
* documents are collected.
**/
public class topdoccollector extends hitcollector
private scoredoc reusablesd
int totalhits
priorityqueue hq
/** construct to collect a given number of hits.
* @param numhits the maximum number of hits to collect
*/
public topdoccollector int numhits
this numhits  new hitqueue numhits
topdoccollector int numhits  priorityqueue hq
this hq   hq
// javadoc inherited
public void collect int doc  float score
if  score > 0 0f
totalhits
if  reusablesd    null
reusablesd   new scoredoc doc  score
else if  score >  reusablesd score
// reusablesd holds the last "rejected" entry, so, if
// this new score is not better than that, there's no
// need to try inserting it
reusablesd doc   doc
reusablesd score   score
else
return
reusablesd    scoredoc  hq insertwithoverflow reusablesd
/** the total number of documents that matched this query. */
public int gettotalhits     return totalhits
/** the top-scoring hits. */
public topdocs topdocs
scoredoc scoredocs   new scoredoc
for  int i   hq size   1  i >  0  i            put docs in array
scoredocs    scoredoc hq pop
float maxscore    totalhits  0
? float negative_infinity
scoredocs score
return new topdocs totalhits  scoredocs  maxscore