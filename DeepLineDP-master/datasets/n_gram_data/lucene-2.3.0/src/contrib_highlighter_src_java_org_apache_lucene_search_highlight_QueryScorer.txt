package org apache lucene search highlight
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util hashmap
import java util hashset
import org apache lucene analysis token
import org apache lucene index indexreader
import org apache lucene search query
/**
* {@link scorer} implementation which scores text fragments by the number of unique query terms found.
* this class uses the {@link querytermextractor} class to process determine the query terms and
* their boosts to be used.
* @author mark@searcharea.co.uk
*/
//todo: provide option to boost score of fragments near beginning of document
// based on fragment.getfragnum()
public class queryscorer implements scorer
textfragment currenttextfragment null
hashset uniquetermsinfragment
float totalscore 0
float maxtermweight 0
private hashmap termstofind
/**
*
* @param query a lucene query (ideally rewritten using query.rewrite
* before being passed to this class and the searcher)
*/
public queryscorer query query
this querytermextractor getterms query
/**
*
* @param query a lucene query (ideally rewritten using query.rewrite
* before being passed to this class and the searcher)
* @param fieldname the field name which is used to match query terms
*/
public queryscorer query query  string fieldname
this querytermextractor getterms query  false fieldname
/**
*
* @param query a lucene query (ideally rewritten using query.rewrite
* before being passed to this class and the searcher)
* @param reader used to compute idf which can be used to a) score selected fragments better
* b) use graded highlights eg set font color intensity
* @param fieldname the field on which inverse document frequency (idf) calculations are based
*/
public queryscorer query query  indexreader reader  string fieldname
this querytermextractor getidfweightedterms query  reader  fieldname
public queryscorer weightedterm weightedterms
termstofind   new hashmap
for  int i   0  i < weightedterms length  i
weightedterm existingterm  weightedterm  termstofind get weightedterms term
if   existingterm  null     existingterm weight<weightedterms weight
//if a term is defined more than once, always use the highest scoring weight
termstofind put weightedterms term weightedterms
maxtermweight math max maxtermweight weightedterms getweight
/* (non-javadoc)
* @see org.apache.lucene.search.highlight.fragmentscorer#startfragment(org.apache.lucene.search.highlight.textfragment)
*/
public void startfragment textfragment newfragment
uniquetermsinfragment   new hashset
currenttextfragment newfragment
totalscore 0
/* (non-javadoc)
* @see org.apache.lucene.search.highlight.fragmentscorer#scoretoken(org.apache.lucene.analysis.token)
*/
public float gettokenscore token token
string termtext token termtext
weightedterm queryterm  weightedterm  termstofind get termtext
if queryterm  null
//not a query term - return
return 0
//found a query term - is it unique in this doc?
if  uniquetermsinfragment contains termtext
totalscore  queryterm getweight
uniquetermsinfragment add termtext
return queryterm getweight
/* (non-javadoc)
* @see org.apache.lucene.search.highlight.fragmentscorer#endfragment(org.apache.lucene.search.highlight.textfragment)
*/
public float getfragmentscore
return totalscore
/* (non-javadoc)
* @see org.apache.lucene.search.highlight.fragmentscorer#allfragmentsprocessed()
*/
public void allfragmentsprocessed
//this class has no special operations to perform at end of processing
/**
*
* @return the highest weighted term (useful for passing to gradientformatter to set
* top end of coloring scale.
*/
public float getmaxtermweight
return maxtermweight