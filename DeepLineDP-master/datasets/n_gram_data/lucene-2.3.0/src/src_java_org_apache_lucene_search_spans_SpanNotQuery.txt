package org apache lucene search spans
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util collection
import java util set
import org apache lucene index indexreader
import org apache lucene search query
import org apache lucene util tostringutils
/** removes matches which overlap with another spanquery. */
public class spannotquery extends spanquery
private spanquery include
private spanquery exclude
/** construct a spannotquery matching spans from <code>include</code> which
* have no overlap with spans from <code>exclude</code>.*/
public spannotquery spanquery include  spanquery exclude
this include   include
this exclude   exclude
if   include getfield   equals exclude getfield
throw new illegalargumentexception
/** return the spanquery whose matches are filtered. */
public spanquery getinclude     return include
/** return the spanquery whose matches must not overlap those returned. */
public spanquery getexclude     return exclude
public string getfield     return include getfield
/** returns a collection of all terms matched by this query.
* @deprecated use extractterms instead
* @see #extractterms(set)
*/
public collection getterms     return include getterms
public void extractterms set terms    include extractterms terms
public string tostring string field
stringbuffer buffer   new stringbuffer
buffer append
buffer append include tostring field
buffer append
buffer append exclude tostring field
buffer append
buffer append tostringutils boost getboost
return buffer tostring
public spans getspans final indexreader reader  throws ioexception
return new spans
private spans includespans   include getspans reader
private boolean moreinclude   true
private spans excludespans   exclude getspans reader
private boolean moreexclude   excludespans next
public boolean next   throws ioexception
if  moreinclude                            move to next include
moreinclude   includespans next
while  moreinclude    moreexclude
if  includespans doc   > excludespans doc       skip exclude
moreexclude   excludespans skipto includespans doc
while  moreexclude                       while exclude is before
includespans doc      excludespans doc
excludespans end   <  includespans start
moreexclude   excludespans next        increment exclude
if   moreexclude                         if no intersection
includespans doc      excludespans doc
includespans end   <  excludespans start
break                                  we found a match
moreinclude   includespans next          intersected  keep scanning
return moreinclude
public boolean skipto int target  throws ioexception
if  moreinclude                            skip include
moreinclude   includespans skipto target
if   moreinclude
return false
if  moreexclude                            skip exclude
includespans doc   > excludespans doc
moreexclude   excludespans skipto includespans doc
while  moreexclude                         while exclude is before
includespans doc      excludespans doc
excludespans end   <  includespans start
moreexclude   excludespans next          increment exclude
if   moreexclude                         if no intersection
includespans doc      excludespans doc
includespans end   <  excludespans start
return true                              we found a match
return next                                scan to next match
public int doc     return includespans doc
public int start     return includespans start
public int end     return includespans end
public string tostring
return     spannotquery this tostring
public query rewrite indexreader reader  throws ioexception
spannotquery clone   null
spanquery rewritteninclude    spanquery  include rewrite reader
if  rewritteninclude    include
clone    spannotquery  this clone
clone include   rewritteninclude
spanquery rewrittenexclude    spanquery  exclude rewrite reader
if  rewrittenexclude    exclude
if  clone    null  clone    spannotquery  this clone
clone exclude   rewrittenexclude
if  clone    null
return clone                            some clauses rewrote
else
return this                             no clauses rewrote
/** returns true iff <code>o</code> is equal to this. */
public boolean equals object o
if  this    o  return true
if    o instanceof spannotquery   return false
spannotquery other    spannotquery o
return this include equals other include
this exclude equals other exclude
this getboost      other getboost
public int hashcode
int h   include hashcode
h    h<<1     h >>> 31       rotate left
h ^  exclude hashcode
h    h<<1     h >>> 31       rotate left
h ^  float floattorawintbits getboost
return h