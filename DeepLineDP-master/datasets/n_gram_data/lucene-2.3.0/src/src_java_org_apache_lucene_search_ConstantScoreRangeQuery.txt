package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import java io ioexception
/**
* a range query that returns a constant score equal to its boost for
* all documents in the range.
* <p>
* it does not have an upper bound on the number of clauses covered in the range.
* <p>
* if an endpoint is null, it is said to be "open".
* either or both endpoints may be open.  open endpoints may not be exclusive
* (you can't select all but the first or last term without explicitly specifying the term to exclude.)
*
*
* @version $id$
*/
public class constantscorerangequery extends query
private final string fieldname
private final string lowerval
private final string upperval
private final boolean includelower
private final boolean includeupper
public constantscorerangequery string fieldname  string lowerval  string upperval  boolean includelower  boolean includeupper
// do a little bit of normalization...
// open ended range queries should always be inclusive.
if  lowerval  null
includelower true
else if  includelower    lowerval equals
lowerval null
if  upperval  null
includeupper true
this fieldname   fieldname intern        intern it  just like terms
this lowerval   lowerval
this upperval   upperval
this includelower   includelower
this includeupper   includeupper
/** returns the field name for this query */
public string getfield     return fieldname
/** returns the value of the lower endpoint of this range query, null if open ended */
public string getlowerval     return lowerval
/** returns the value of the upper endpoint of this range query, null if open ended */
public string getupperval     return upperval
/** returns <code>true</code> if the lower endpoint is inclusive */
public boolean includeslower     return includelower
/** returns <code>true</code> if the upper endpoint is inclusive */
public boolean includesupper     return includeupper
public query rewrite indexreader reader  throws ioexception
// map to rangefilter semantics which are slightly different...
rangefilter rangefilt   new rangefilter fieldname
lowerval  null?lowerval
upperval  lowerval   ?false includelower  upperval  null?false includeupper
query q   new constantscorequery rangefilt
q setboost getboost
return q
/** prints a user-readable version of this query. */
public string tostring string field
stringbuffer buffer   new stringbuffer
if   getfield   equals field
buffer append getfield
buffer append
buffer append includelower ?
buffer append lowerval    null ? lowerval
buffer append
buffer append upperval    null ? upperval
buffer append includeupper ?
if  getboost      1 0f
buffer append
buffer append float tostring getboost
return buffer tostring
/** returns true if <code>o</code> is equal to this. */
public boolean equals object o
if  this    o  return true
if    o instanceof constantscorerangequery   return false
constantscorerangequery other    constantscorerangequery  o
if  this fieldname    other fieldname     interned comparison
this includelower    other includelower
this includeupper    other includeupper
return false
if  this lowerval    null ?  this lowerval equals other lowerval    other lowerval    null  return false
if  this upperval    null ?  this upperval equals other upperval    other upperval    null  return false
return this getboost      other getboost
/** returns a hash code value for this object.*/
public int hashcode
int h   float floattointbits getboost    ^ fieldname hashcode
// hashcode of "" is 0, so don't use that for null...
h ^  lowerval    null ? lowerval hashcode     0x965a965a
// don't just xor upperval with out mixing either it or h, as it will cancel
// out lowerval if they are equal.
h ^   h << 17     h >>> 16       a reversible  one to one  32 bit mapping mix
h ^   upperval    null ?  upperval hashcode      0x5a695a69
h ^   includelower ? 0x665599aa   0
^  includeupper ? 0x99aa5566   0
return h