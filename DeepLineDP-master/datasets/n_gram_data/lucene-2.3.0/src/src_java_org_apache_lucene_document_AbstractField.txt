package org apache lucene document
/**
* copyright 2006 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
*
*
**/
public abstract class abstractfield implements fieldable
protected string name
protected boolean storetermvector   false
protected boolean storeoffsetwithtermvector   false
protected boolean storepositionwithtermvector   false
protected boolean omitnorms   false
protected boolean isstored   false
protected boolean isindexed   true
protected boolean istokenized   true
protected boolean isbinary   false
protected boolean iscompressed   false
protected boolean lazy   false
protected float boost   1 0f
// the one and only data object for all different kind of field values
protected object fieldsdata   null
protected abstractfield
protected abstractfield string name  field store store  field index index  field termvector termvector
if  name    null
throw new nullpointerexception
this name   name intern              field names are interned
if  store    field store yes
this isstored   true
this iscompressed   false
else if  store    field store compress
this isstored   true
this iscompressed   true
else if  store    field store no
this isstored   false
this iscompressed   false
else
throw new illegalargumentexception     store
if  index    field index no
this isindexed   false
this istokenized   false
else if  index    field index tokenized
this isindexed   true
this istokenized   true
else if  index    field index un_tokenized
this isindexed   true
this istokenized   false
else if  index    field index no_norms
this isindexed   true
this istokenized   false
this omitnorms   true
else
throw new illegalargumentexception     index
this isbinary   false
setstoretermvector termvector
/** sets the boost factor hits on this field.  this value will be
* multiplied into the score of all hits on this this field of this
* document.
*
* <p>the boost is multiplied by {@link org.apache.lucene.document.document#getboost()} of the document
* containing this field.  if a document has multiple fields with the same
* name, all such values are multiplied together.  this product is then
* multipled by the value {@link org.apache.lucene.search.similarity#lengthnorm(string,int)}, and
* rounded by {@link org.apache.lucene.search.similarity#encodenorm(float)} before it is stored in the
* index.  one should attempt to ensure that this product does not overflow
* the range of that encoding.
*
* @see org.apache.lucene.document.document#setboost(float)
* @see org.apache.lucene.search.similarity#lengthnorm(string, int)
* @see org.apache.lucene.search.similarity#encodenorm(float)
*/
public void setboost float boost
this boost   boost
/** returns the boost factor for hits for this field.
*
* <p>the default value is 1.0.
*
* <p>note: this value is not stored directly with the document in the index.
* documents returned from {@link org.apache.lucene.index.indexreader#document(int)} and
* {@link org.apache.lucene.search.hits#doc(int)} may thus not have the same value present as when
* this field was indexed.
*
* @see #setboost(float)
*/
public float getboost
return boost
/** returns the name of the field as an interned string.
* for example "date", "title", "body", ...
*/
public string name        return name
protected void setstoretermvector field termvector termvector
if  termvector    field termvector no
this storetermvector   false
this storepositionwithtermvector   false
this storeoffsetwithtermvector   false
else if  termvector    field termvector yes
this storetermvector   true
this storepositionwithtermvector   false
this storeoffsetwithtermvector   false
else if  termvector    field termvector with_positions
this storetermvector   true
this storepositionwithtermvector   true
this storeoffsetwithtermvector   false
else if  termvector    field termvector with_offsets
this storetermvector   true
this storepositionwithtermvector   false
this storeoffsetwithtermvector   true
else if  termvector    field termvector with_positions_offsets
this storetermvector   true
this storepositionwithtermvector   true
this storeoffsetwithtermvector   true
else
throw new illegalargumentexception     termvector
/** true iff the value of the field is to be stored in the index for return
with search hits.  it is an error for this to be true if a field is
reader-valued. */
public final boolean  isstored      return isstored
/** true iff the value of the field is to be indexed, so that it may be
searched on. */
public final boolean  isindexed       return isindexed
/** true iff the value of the field should be tokenized as text prior to
indexing.  un-tokenized fields are indexed as a single word and may not be
reader-valued. */
public final boolean  istokenized       return istokenized
/** true if the value of the field is stored and compressed within the index */
public final boolean  iscompressed       return iscompressed
/** true iff the term or terms used to index this field are stored as a term
*  vector, available from {@link org.apache.lucene.index.indexreader#gettermfreqvector(int,string)}.
*  these methods do not provide access to the original content of the field,
*  only to terms used to index it. if the original content must be
*  preserved, use the <code>stored</code> attribute instead.
*
* @see org.apache.lucene.index.indexreader#gettermfreqvector(int, string)
*/
public final boolean istermvectorstored     return storetermvector
/**
* true iff terms are stored as term vector together with their offsets
* (start and end positon in source text).
*/
public boolean isstoreoffsetwithtermvector
return storeoffsetwithtermvector
/**
* true iff terms are stored as term vector together with their token positions.
*/
public boolean isstorepositionwithtermvector
return storepositionwithtermvector
/** true iff the value of the filed is stored as binary */
public final boolean  isbinary          return isbinary
/** true if norms are omitted for this indexed field */
public boolean getomitnorms     return omitnorms
/** expert:
*
* if set, omit normalization factors associated with this indexed field.
* this effectively disables indexing boosts and length normalization for this field.
*/
public void setomitnorms boolean omitnorms    this omitnorms omitnorms
public boolean islazy
return lazy
/** prints a field for human consumption. */
public final string tostring
stringbuffer result   new stringbuffer
if  isstored
result append
if  iscompressed
result append
else
result append
if  isindexed
if  result length   > 0
result append
result append
if  istokenized
if  result length   > 0
result append
result append
if  storetermvector
if  result length   > 0
result append
result append
if  storeoffsetwithtermvector
if  result length   > 0
result append
result append
if  storepositionwithtermvector
if  result length   > 0
result append
result append
if  isbinary
if  result length   > 0
result append
result append
if  omitnorms
result append
if  lazy
result append
result append
result append name
result append
if  fieldsdata    null    lazy    false
result append fieldsdata
result append
return result tostring