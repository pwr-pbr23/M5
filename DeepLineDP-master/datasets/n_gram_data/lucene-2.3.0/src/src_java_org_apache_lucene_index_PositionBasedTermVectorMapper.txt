package org apache lucene index
/**
* copyright 2007 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util arraylist
import java util hashmap
import java util list
import java util map
/**
* for each field, store position by position information.  it ignores frequency information
* <p/>
* this is not thread-safe.
*/
public class positionbasedtermvectormapper extends termvectormapper
private map  <string  map<integer  tvpositioninfo>>   fieldtoterms
private string currentfield
/**
* a map of integer and tvpositioninfo
*/
private map  <integer  tvpositioninfo>   currentpositions
private boolean storeoffsets
/**
*
*
*/
public positionbasedtermvectormapper
super false  false
public positionbasedtermvectormapper boolean ignoringoffsets
super false  ignoringoffsets
/**
* never ignores positions.  this mapper doesn't make much sense unless there are positions
* @return false
*/
public boolean isignoringpositions
return false
/**
* callback for the termvectorreader.
* @param term
* @param frequency
* @param offsets
* @param positions
*/
public void map string term  int frequency  termvectoroffsetinfo offsets  int positions
for  int i   0  i < positions length  i
integer posval   new integer positions
tvpositioninfo pos    tvpositioninfo  currentpositions get posval
if  pos    null
pos   new tvpositioninfo positions  storeoffsets
currentpositions put posval  pos
pos addterm term  offsets    null ? offsets   null
/**
* callback mechanism used by the termvectorreader
* @param field  the field being read
* @param numterms the number of terms in the vector
* @param storeoffsets whether offsets are available
* @param storepositions whether positions are available
*/
public void setexpectations string field  int numterms  boolean storeoffsets  boolean storepositions
if  storepositions    false
throw new runtimeexception
if  storeoffsets    true
//ignoring offsets
fieldtoterms   new hashmap numterms
this storeoffsets   storeoffsets
currentfield   field
currentpositions   new hashmap
fieldtoterms put currentfield  currentpositions
/**
* get the mapping between fields and terms, sorted by the comparator
*
* @return a map between field names and a map.  the sub-map key is the position as the integer, the value is {@link org.apache.lucene.index.positionbasedtermvectormapper.tvpositioninfo}.
*/
public map getfieldtoterms
return fieldtoterms
/**
* container for a term at a position
*/
public static class tvpositioninfo
private int position
//a list of strings
private list terms
//a list of termvectoroffsetinfo
private list offsets
public tvpositioninfo int position  boolean storeoffsets
this position   position
terms   new arraylist
if  storeoffsets
offsets   new arraylist
void addterm string term  termvectoroffsetinfo info
terms add term
if  offsets    null
offsets add info
/**
*
* @return the position of the term
*/
public int getposition
return position
/**
* note, there may be multiple terms at the same position
* @return a list of strings
*/
public list getterms
return terms
/**
* parallel list (to {@link #getterms()}) of termvectoroffsetinfo objects.  there may be multiple entries since there may be multiple terms at a position
* @return a list of termvectoroffsetinfo objects, if offsets are store.
*/
public list getoffsets
return offsets