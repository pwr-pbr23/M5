package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java net socket
import java io ioexception
import java io inputstream
import java io outputstream
/**
* a {@link lockfactory} that wraps another {@link
* lockfactory} and verifies that each lock obtain/release
* is "correct" (never results in two processes holding the
* lock at the same time).  it does this by contacting an
* external server ({@link lockverifyserver}) to assert that
* at most one process holds the lock at a time.  to use
* this, you should also run {@link lockverifyserver} on the
* host & port matching what you pass to the constructor.
*
* @see lockverifyserver
* @see lockstresstest
*/
public class verifyinglockfactory extends lockfactory
lockfactory lf
byte id
string host
int port
private class checkedlock extends lock
private lock lock
public checkedlock lock lock
this lock   lock
private void verify byte message
try
socket s   new socket host  port
outputstream out   s getoutputstream
out write id
out write message
inputstream in   s getinputstream
int result   in read
in close
out close
s close
if  result    0
throw new runtimeexception
catch  exception e
throw new runtimeexception e
public synchronized boolean obtain long lockwaittimeout
throws lockobtainfailedexception  ioexception
boolean obtained   lock obtain lockwaittimeout
if  obtained
verify  byte  1
return obtained
public synchronized boolean obtain
throws lockobtainfailedexception  ioexception
return lock obtain
public synchronized boolean islocked
return lock islocked
public synchronized void release   throws ioexception
if  islocked
verify  byte  0
lock release
/**
* @param id should be a unique id across all clients
* @param lf the lockfactory that we are testing
* @param host host or ip where {@link lockverifyserver}
is running
* @param port the port {@link lockverifyserver} is
listening on
*/
public verifyinglockfactory byte id  lockfactory lf  string host  int port  throws ioexception
this id   id
this lf   lf
this host   host
this port   port
public synchronized lock makelock string lockname
return new checkedlock lf makelock lockname
public synchronized void clearlock string lockname
throws ioexception
lf clearlock lockname