package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/** a scorer for queries with a required part and an optional part.
* delays skipto() on the optional part until a score() is needed.
* <br>
* this <code>scorer</code> implements {@link scorer#skipto(int)}.
*/
public class reqoptsumscorer extends scorer
/** the scorers passed from the constructor.
* these are set to null as soon as their next() or skipto() returns false.
*/
private scorer reqscorer
private scorer optscorer
/** construct a <code>reqoptscorer</code>.
* @param reqscorer the required scorer. this must match.
* @param optscorer the optional scorer. this is used for scoring only.
*/
public reqoptsumscorer
scorer reqscorer
scorer optscorer
super null      no similarity used
this reqscorer   reqscorer
this optscorer   optscorer
private boolean firsttimeoptscorer   true
public boolean next   throws ioexception
return reqscorer next
public boolean skipto int target  throws ioexception
return reqscorer skipto target
public int doc
return reqscorer doc
/** returns the score of the current document matching the query.
* initially invalid, until {@link #next()} is called the first time.
* @return the score of the required scorer, eventually increased by the score
* of the optional scorer when it also matches the current document.
*/
public float score   throws ioexception
int curdoc   reqscorer doc
float reqscore   reqscorer score
if  firsttimeoptscorer
firsttimeoptscorer   false
if    optscorer skipto curdoc
optscorer   null
return reqscore
else if  optscorer    null
return reqscore
else if   optscorer doc   < curdoc        optscorer skipto curdoc
optscorer   null
return reqscore
// assert (optscorer != null) && (optscorer.doc() >= curdoc);
return  optscorer doc      curdoc
? reqscore   optscorer score
reqscore
/** explain the score of a document.
* @todo also show the total score.
* see booleanscorer.explain() on how to do this.
*/
public explanation explain int doc  throws ioexception
explanation res   new explanation
res setdescription
res adddetail reqscorer explain doc
res adddetail optscorer explain doc
return res