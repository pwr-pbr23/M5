package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/** provides access to stored term vector of
*  a document field.  the vector consists of the name of the field, an array of the terms tha occur in the field of the
* {@link org.apache.lucene.document.document} and a parallel array of frequencies.  thus, gettermfrequencies()[5] corresponds with the
* frequency of getterms()[5], assuming there are at least 5 terms in the document.
*/
public interface termfreqvector
/**
* the {@link org.apache.lucene.document.fieldable} name.
* @return the name of the field this vector is associated with.
*
*/
public string getfield
/**
* @return the number of terms in the term vector.
*/
public int size
/**
* @return an array of term texts in ascending order.
*/
public string getterms
/** array of term frequencies. locations of the array correspond one to one
*  to the terms in the array obtained from <code>getterms</code>
*  method. each location in the array contains the number of times this
*  term occurs in the document or the document field.
*/
public int gettermfrequencies
/** return an index in the term numbers array returned from
*  <code>getterms</code> at which the term with the specified
*  <code>term</code> appears. if this term does not appear in the array,
*  return -1.
*/
public int indexof string term
/** just like <code>indexof(int)</code> but searches for a number of terms
*  at the same time. returns an array that has the same size as the number
*  of terms searched for, each slot containing the result of searching for
*  that term number.
*
*  @param terms array containing terms to look for
*  @param start index in the array where the list of terms starts
*  @param len the number of terms in the list
*/
public int indexesof string terms  int start  int len