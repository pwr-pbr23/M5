package org apache lucene search payloads
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene index termpositions
import org apache lucene search
import org apache lucene search spans spanscorer
import org apache lucene search spans spantermquery
import org apache lucene search spans spanweight
import org apache lucene search spans termspans
import java io ioexception
/**
* copyright 2004 the apache software foundation
* <p/>
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
* <p/>
* http://www.apache.org/licenses/license-2.0
* <p/>
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* the boostingtermquery is very similar to the {@link org.apache.lucene.search.spans.spantermquery} except
* that it factors in the value of the payload located at each of the positions where the
* {@link org.apache.lucene.index.term} occurs.
* <p>
* in order to take advantage of this, you must override {@link org.apache.lucene.search.similarity#scorepayload(string, byte[],int,int)}
* which returns 1 by default.
* <p>
* payload scores are averaged across term occurrences in the document.
*
* @see org.apache.lucene.search.similarity#scorepayload(string, byte[], int, int)
*/
public class boostingtermquery extends spantermquery
public boostingtermquery term term
super term
}
protected weight createweight searcher searcher  throws ioexception
return new boostingtermweight this  searcher
}
protected class boostingtermweight extends spanweight implements weight
public boostingtermweight boostingtermquery query  searcher searcher  throws ioexception
super query  searcher
}
public scorer scorer indexreader reader  throws ioexception
return new boostingspanscorer  termspans query getspans reader   this  similarity
reader norms query getfield
}
class boostingspanscorer extends spanscorer
//todo: is this the best way to allocate this?
byte payload   new byte
private termpositions positions
protected float payloadscore
private int payloadsseen
public boostingspanscorer termspans spans  weight weight
similarity similarity  byte norms  throws ioexception
super spans  weight  similarity  norms
positions   spans getpositions
}
protected boolean setfreqcurrentdoc   throws ioexception
if   more
return false
}
doc   spans doc
freq   0 0f
payloadscore   0
payloadsseen   0
similarity similarity1   getsimilarity
while  more    doc    spans doc
int matchlength   spans end     spans start
freq    similarity1 sloppyfreq matchlength
processpayload similarity1
more   spans next     this moves positions to the next match in this document
}
return more     freq    0
}
protected void processpayload similarity similarity  throws ioexception
if  positions ispayloadavailable
payload   positions getpayload payload  0
payloadscore    similarity scorepayload term field    payload  0  positions getpayloadlength
payloadsseen
else
//zero out the payload?
}
}
public float score   throws ioexception
return super score      payloadsseen > 0 ?  payloadscore   payloadsseen    1
}
public explanation explain final int doc  throws ioexception
explanation result   new explanation
explanation nonpayloadexpl   super explain doc
result adddetail nonpayloadexpl
//question: is there a wau to avoid this skipto call?  we need to know whether to load the payload or not
explanation payloadboost   new explanation
result adddetail payloadboost
/*
if (skipto(doc) == true) {
processpayload();
}
*/
float avgpayloadscore     payloadsseen > 0 ?  payloadscore   payloadsseen    1
payloadboost setvalue avgpayloadscore
//gsi: i suppose we could tostring the payload, but i don't think that would be a good idea
payloadboost setdescription
result setvalue nonpayloadexpl getvalue     avgpayloadscore
result setdescription
return result
}
}
}
public boolean equals object o
if    o instanceof boostingtermquery
return false
boostingtermquery other    boostingtermquery  o
return  this getboost      other getboost
this term equals other term
}
}