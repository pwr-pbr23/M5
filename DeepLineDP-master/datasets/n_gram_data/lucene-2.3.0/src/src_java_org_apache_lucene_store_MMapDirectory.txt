package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java io file
import java io randomaccessfile
import java nio bytebuffer
import java nio channels filechannel
import java nio channels filechannel mapmode
/** file-based {@link directory} implementation that uses mmap for input.
*
* <p>to use this, invoke java with the system property
* org.apache.lucene.fsdirectory.class set to
* org.apache.lucene.store.mmapdirectory.  this will cause {@link
* fsdirectory#getdirectory(file,boolean)} to return instances of this class.
*/
public class mmapdirectory extends fsdirectory
private static class mmapindexinput extends indexinput
private bytebuffer buffer
private final long length
private mmapindexinput randomaccessfile raf  throws ioexception
this length   raf length
this buffer   raf getchannel   map mapmode read_only  0  length
public byte readbyte   throws ioexception
return buffer get
public void readbytes byte b  int offset  int len
throws ioexception
buffer get b  offset  len
public long getfilepointer
return buffer position
public void seek long pos  throws ioexception
buffer position  int pos
public long length
return length
public object clone
mmapindexinput clone    mmapindexinput super clone
clone buffer   buffer duplicate
return clone
public void close   throws ioexception
private static class multimmapindexinput extends indexinput
private bytebuffer buffers
private int bufsizes     keep here  bytebuffer size   method is optional
private final long length
private int curbufindex
private final int maxbufsize
private bytebuffer curbuf     redundant for speed  buffers
private int curavail     redundant for speed   bufsizes   curbuf position
public multimmapindexinput randomaccessfile raf  int maxbufsize
throws ioexception
this length   raf length
this maxbufsize   maxbufsize
if  maxbufsize <  0
throw new illegalargumentexception
maxbufsize
if   length   maxbufsize  > integer max_value
throw new illegalargumentexception
raf tostring
int nrbuffers    int   length   maxbufsize
if   nrbuffers   maxbufsize  < length  nrbuffers
this buffers   new bytebuffer
this bufsizes   new int
long bufferstart   0
filechannel rafc   raf getchannel
for  int bufnr   0  bufnr < nrbuffers  bufnr
int bufsize    length >  bufferstart   maxbufsize
? maxbufsize
int   length   bufferstart
this buffers   rafc map mapmode read_only bufferstart bufsize
this bufsizes   bufsize
bufferstart    bufsize
seek 0l
public byte readbyte   throws ioexception
// performance might be improved by reading ahead into an array of
// eg. 128 bytes and readbyte() from there.
if  curavail    0
curbufindex
curbuf   buffers     index out of bounds when too many bytes requested
curbuf position 0
curavail   bufsizes
curavail
return curbuf get
public void readbytes byte b  int offset  int len  throws ioexception
while  len > curavail
curbuf get b  offset  curavail
len    curavail
offset    curavail
curbufindex
curbuf   buffers     index out of bounds when too many bytes requested
curbuf position 0
curavail   bufsizes
curbuf get b  offset  len
curavail    len
public long getfilepointer
return  curbufindex    long  maxbufsize    curbuf position
public void seek long pos  throws ioexception
curbufindex    int   pos   maxbufsize
curbuf   buffers
int bufoffset    int   pos    curbufindex   maxbufsize
curbuf position bufoffset
curavail   bufsizes   bufoffset
public long length
return length
public object clone
multimmapindexinput clone    multimmapindexinput super clone
clone buffers   new bytebuffer
// no need to clone bufsizes.
// since most clones will use only one buffer, duplicate() could also be
// done lazy in clones, eg. when adapting curbuf.
for  int bufnr   0  bufnr < buffers length  bufnr
clone buffers   buffers duplicate
try
clone seek getfilepointer
catch ioexception ioe
runtimeexception newexception   new runtimeexception ioe
newexception initcause ioe
throw newexception
return clone
public void close   throws ioexception
private final int max_bbuf   integer max_value
public indexinput openinput string name  throws ioexception
file f    new file getfile    name
randomaccessfile raf   new randomaccessfile f
try
return  raf length   <  max_bbuf
?  indexinput  new mmapindexinput raf
indexinput  new multimmapindexinput raf  max_bbuf
finally
raf close
public indexinput openinput string name  int buffersize  throws ioexception
return openinput name