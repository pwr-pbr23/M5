package org apache lucene document
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene search hits
import org apache lucene search searcher
import java util                   for javadoc
/** documents are the unit of indexing and search.
*
* a document is a set of fields.  each field has a name and a textual value.
* a field may be {@link fieldable#isstored() stored} with the document, in which
* case it is returned with search hits on the document.  thus each document
* should typically contain one or more stored fields which uniquely identify
* it.
*
* <p>note that fields which are <i>not</i> {@link fieldable#isstored() stored} are
* <i>not</i> available in documents retrieved from the index, e.g. with {@link
* hits#doc(int)}, {@link searcher#doc(int)} or {@link
* indexreader#document(int)}.
*/
public final class document implements java io serializable
list fields   new arraylist
private float boost   1 0f
/** constructs a new document with no fields. */
public document
/** sets a boost factor for hits on any field of this document.  this value
* will be multiplied into the score of all hits on this document.
*
* <p>the default value is 1.0.
*
* <p>values are multiplied into the value of {@link fieldable#getboost()} of
* each field in this document.  thus, this method in effect sets a default
* boost for the fields of this document.
*
* @see fieldable#setboost(float)
*/
public void setboost float boost
this boost   boost
/** returns, at indexing time, the boost factor as set by {@link #setboost(float)}.
*
* <p>note that once a document is indexed this value is no longer available
* from the index.  at search time, for retrieved documents, this method always
* returns 1. this however does not mean that the boost value set at  indexing
* time was ignored - it was just combined with other indexing time factors and
* stored elsewhere, for better indexing and search performance. (for more
* information see the "norm(t,d)" part of the scoring formula in
* {@link org.apache.lucene.search.similarity similarity}.)
*
* @see #setboost(float)
*/
public float getboost
return boost
/**
* <p>adds a field to a document.  several fields may be added with
* the same name.  in this case, if the fields are indexed, their text is
* treated as though appended for the purposes of search.</p>
* <p> note that add like the removefield(s) methods only makes sense
* prior to adding a document to an index. these methods cannot
* be used to change the content of an existing index! in order to achieve this,
* a document has to be deleted from an index and a new changed version of that
* document has to be added.</p>
*/
public final void add fieldable field
fields add field
/**
* <p>removes field with the specified name from the document.
* if multiple fields exist with this name, this method removes the first field that has been added.
* if there is no field with the specified name, the document remains unchanged.</p>
* <p> note that the removefield(s) methods like the add method only make sense
* prior to adding a document to an index. these methods cannot
* be used to change the content of an existing index! in order to achieve this,
* a document has to be deleted from an index and a new changed version of that
* document has to be added.</p>
*/
public final void removefield string name
iterator it   fields iterator
while  it hasnext
fieldable field    fieldable it next
if  field name   equals name
it remove
return
/**
* <p>removes all fields with the given name from the document.
* if there is no field with the specified name, the document remains unchanged.</p>
* <p> note that the removefield(s) methods like the add method only make sense
* prior to adding a document to an index. these methods cannot
* be used to change the content of an existing index! in order to achieve this,
* a document has to be deleted from an index and a new changed version of that
* document has to be added.</p>
*/
public final void removefields string name
iterator it   fields iterator
while  it hasnext
fieldable field    fieldable it next
if  field name   equals name
it remove
/** returns a field with the given name if any exist in this document, or
* null.  if multiple fields exists with this name, this method returns the
* first value added.
* do not use this method with lazy loaded fields.
*/
public final field getfield string name
for  int i   0  i < fields size    i
field field    field fields get i
if  field name   equals name
return field
return null
/** returns a field with the given name if any exist in this document, or
* null.  if multiple fields exists with this name, this method returns the
* first value added.
*/
public fieldable getfieldable string name
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name
return field
return null
/** returns the string value of the field with the given name if any exist in
* this document, or null.  if multiple fields exist with this name, this
* method returns the first value added. if only binary fields with this name
* exist, returns null.
*/
public final string get string name
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name       field isbinary
return field stringvalue
return null
/** returns an enumeration of all the fields in a document.
* @deprecated use {@link #getfields()} instead
*/
public final enumeration fields
return new enumeration
final iterator iter   fields iterator
public boolean hasmoreelements
return iter hasnext
public object nextelement
return iter next
/** returns a list of all the fields in a document.
* <p>note that fields which are <i>not</i> {@link fieldable#isstored() stored} are
* <i>not</i> available in documents retrieved from the index, e.g. with {@link
* hits#doc(int)}, {@link searcher#doc(int)} or {@link indexreader#document(int)}.
*/
public final list getfields
return fields
/**
* returns an array of {@link field}s with the given name.
* this method can return <code>null</code>.
* do not use with lazy loaded fields.
*
* @param name the name of the field
* @return a <code>field[]</code> array
*/
public final field getfields string name
list result   new arraylist
for  int i   0  i < fields size    i
field field    field fields get i
if  field name   equals name
result add field
if  result size      0
return null
return  field result toarray new field
/**
* returns an array of {@link fieldable}s with the given name.
* this method can return <code>null</code>.
*
* @param name the name of the field
* @return a <code>fieldable[]</code> array or <code>null</code>
*/
public fieldable getfieldables string name
list result   new arraylist
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name
result add field
if  result size      0
return null
return  fieldable result toarray new fieldable
/**
* returns an array of values of the field specified as the method parameter.
* this method can return <code>null</code>.
*
* @param name the name of the field
* @return a <code>string[]</code> of field values or <code>null</code>
*/
public final string getvalues string name
list result   new arraylist
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name       field isbinary
result add field stringvalue
if  result size      0
return null
return  string result toarray new string
/**
* returns an array of byte arrays for of the fields that have the name specified
* as the method parameter. this method will return <code>null</code> if no
* binary fields with the specified name are available.
*
* @param name the name of the field
* @return a  <code>byte[][]</code> of binary field values or <code>null</code>
*/
public final byte getbinaryvalues string name
list result   new arraylist
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name      field isbinary
result add field binaryvalue
if  result size      0
return null
return  byte result toarray new byte
/**
* returns an array of bytes for the first (or only) field that has the name
* specified as the method parameter. this method will return <code>null</code>
* if no binary fields with the specified name are available.
* there may be non-binary fields with the same name.
*
* @param name the name of the field.
* @return a <code>byte[]</code> containing the binary field value or <code>null</code>
*/
public final byte getbinaryvalue string name
for  int i 0  i < fields size    i
fieldable field    fieldable fields get i
if  field name   equals name      field isbinary
return field binaryvalue
return null
/** prints the fields of a document for human consumption. */
public final string tostring
stringbuffer buffer   new stringbuffer
buffer append
for  int i   0  i < fields size    i
fieldable field    fieldable fields get i
buffer append field tostring
if  i    fields size   1
buffer append
buffer append
return buffer tostring