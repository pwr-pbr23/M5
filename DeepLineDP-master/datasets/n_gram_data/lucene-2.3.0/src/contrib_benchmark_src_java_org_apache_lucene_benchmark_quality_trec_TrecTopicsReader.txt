/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene benchmark quality trec
import java io bufferedreader
import java io ioexception
import java util arraylist
import java util arrays
import java util hashmap
import org apache lucene benchmark quality qualityquery
/**
* read trec topics.
* <p>
* expects this topic format -
* <pre>
*   &lt;top&gt;
*   &lt;num&gt; number: nnn
*
*   &lt;title&gt; title of the topic
*
*   &lt;desc&gt; description:
*   description of the topic
*
*   &lt;narr&gt; narrative:
*   "story" composed by assessors.
*
*   &lt;/top&gt;
* </pre>
* comment lines starting with '#' are ignored.
*/
public class trectopicsreader
private static final string newline   system getproperty
/**
*  constructor for trec's topicsreader
*/
public trectopicsreader
super
/**
* read quality queries from trec format topics file.
* @param reader where queries are read from.
* @return the result quality queries.
* @throws ioexception if cannot read the queries.
*/
public qualityquery readqueries bufferedreader reader  throws ioexception
arraylist res   new arraylist
stringbuffer sb
try
while  null   sb read reader   null false false
hashmap fields   new hashmap
// id
sb   read reader   null true false
int k   sb indexof
string id   sb substring k 1  trim
// title
sb   read reader   null true false
k   sb indexof
string title   sb substring k 1  trim
// description
sb   read reader   null false false
sb   read reader   null false true
string descripion   sb tostring   trim
// we got a topic!
fields put   title
fields put   descripion
qualityquery topic   new qualityquery id fields
res add topic
// skip narrative, get to end of doc
read reader   null false false
finally
reader close
// sort result array (by id)
qualityquery qq    qualityquery  res toarray new qualityquery
arrays sort qq
return qq
// read until finding a line that starts with the specified prefix
private stringbuffer read  bufferedreader reader  string prefix  stringbuffer sb  boolean collectmatchline  boolean collectall  throws ioexception
sb    sb  null ? new stringbuffer     sb
string sep
while  true
string line   reader readline
if  line  null
return null
if  line startswith prefix
if  collectmatchline
sb append sep line
sep   newline
break
if  collectall
sb append sep line
sep   newline
//system.out.println("read: "+sb);
return sb