package org apache lucene benchmark bytask tasks
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene benchmark bytask perfrundata
import org apache lucene benchmark bytask feeds docmaker
import org apache lucene analysis token
import org apache lucene analysis analyzer
import org apache lucene analysis tokenstream
import org apache lucene document document
import org apache lucene document field
import java text numberformat
import java io reader
import java util list
/**
* simple task to test performance of tokenizers.  it just
* creates a token stream for each field of the document and
* read all tokens out of that stream.
* <br>relevant properties: <code>doc.tokenize.log.step</code>.
*/
public class readtokenstask extends perftask
/**
* default value for property <code>doc.tokenize.log.step<code> - indicating how often
* an "added n docs / m tokens" message should be logged.
*/
public static final int default_doc_log_step   500
public readtokenstask perfrundata rundata
super rundata
private int logstep    1
int count   0
int totaltokencount   0
// volatile data passed between setup(), dologic(), teardown().
private document doc   null
/*
*  (non-javadoc)
* @see perftask#setup()
*/
public void setup   throws exception
super setup
docmaker docmaker   getrundata   getdocmaker
doc   docmaker makedocument
/* (non-javadoc)
* @see perftask#teardown()
*/
public void teardown   throws exception
log   count
doc   null
super teardown
token token   new token
public int dologic   throws exception
list fields   doc getfields
final int numfield   fields size
analyzer analyzer   getrundata   getanalyzer
int tokencount   0
for int i 0 i<numfield i
final field field    field  fields get i
final tokenstream stream
final tokenstream streamvalue   field tokenstreamvalue
if  streamvalue    null
stream   streamvalue
else
// the field does not have a tokenstream,
// so we have to obtain one from the analyzer
final reader reader 			     find or make reader
final reader readervalue   field readervalue
if  readervalue    null
reader   readervalue
else
string stringvalue   field stringvalue
if  stringvalue    null
throw new illegalargumentexception
stringreader init stringvalue
reader   stringreader
// tokenize field
stream   analyzer reusabletokenstream field name    reader
// reset the tokenstream to the first token
stream reset
while stream next token     null
tokencount
totaltokencount    tokencount
return tokencount
private void log int count
if  logstep<0
// init once per instance
logstep   getrundata   getconfig   get    default_doc_log_step
if  logstep>0     count%logstep   0
double seconds    system currenttimemillis     getrundata   getstarttimemillis    1000 0
numberformat nf   numberformat getinstance
nf setmaximumfractiondigits 2
system out println   nf format seconds        thread currentthread   getname     count         totaltokencount
/* simple stringreader that can be reset to a new string;
* we use this when tokenizing the string value from a
* field. */
reusablestringreader stringreader   new reusablestringreader
private final static class reusablestringreader extends reader
int upto
int left
string s
void init string s
this s   s
left   s length
this upto   0
public int read char c
return read c  0  c length
public int read char c  int off  int len
if  left > len
s getchars upto  upto len  c  off
upto    len
left    len
return len
else if  0    left
return  1
else
s getchars upto  upto left  c  off
int r   left
left   0
upto   s length
return r
public void close