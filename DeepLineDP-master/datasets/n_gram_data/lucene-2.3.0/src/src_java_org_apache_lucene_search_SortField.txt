package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io serializable
import java util locale
/**
* stores information about how to sort documents by terms in an individual
* field.  fields must be indexed in order to sort by them.
*
* <p>created: feb 11, 2004 1:25:29 pm
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
* @see sort
*/
public class sortfield
implements serializable
/** sort by document score (relevancy).  sort values are float and higher
* values are at the front. */
public static final int score   0
/** sort by document number (index order).  sort values are integer and lower
* values are at the front. */
public static final int doc   1
/** guess type of sort based on field contents.  a regular expression is used
* to look at the first term indexed for the field and determine if it
* represents an integer number, a floating point number, or just arbitrary
* string characters. */
public static final int auto   2
/** sort using term values as strings.  sort values are string and lower
* values are at the front. */
public static final int string   3
/** sort using term values as encoded integers.  sort values are integer and
* lower values are at the front. */
public static final int int   4
/** sort using term values as encoded floats.  sort values are float and
* lower values are at the front. */
public static final int float   5
/** sort using term values as encoded longs.  sort values are long and
* lower values are at the front. */
public static final int long   6
/** sort using term values as encoded doubles.  sort values are double and
* lower values are at the front. */
public static final int double   7
/** sort using a custom comparator.  sort values are any comparable and
* sorting is done according to natural order. */
public static final int custom   9
// implementation note: the fieldcache.string_index is in the same "namespace"
// as the above static int values.  any new values must not have the same value
// as fieldcache.string_index.
/** represents sorting by document score (relevancy). */
public static final sortfield field_score   new sortfield  null  score
/** represents sorting by document number (index order). */
public static final sortfield field_doc   new sortfield  null  doc
private string field
private int type   auto      defaults to determining type dynamically
private locale locale        defaults to    no locale
boolean reverse   false      defaults to natural order
private sortcomparatorsource factory
/** creates a sort by terms in the given field where the type of term value
* is determined dynamically ({@link #auto auto}).
* @param field name of field to sort by, cannot be <code>null</code>.
*/
public sortfield  string field
this field   field intern
/** creates a sort, possibly in reverse, by terms in the given field where
* the type of term value is determined dynamically ({@link #auto auto}).
* @param field name of field to sort by, cannot be <code>null</code>.
* @param reverse true if natural order should be reversed.
*/
public sortfield  string field  boolean reverse
this field   field intern
this reverse   reverse
/** creates a sort by terms in the given field with the type of term
* values explicitly given.
* @param field  name of field to sort by.  can be <code>null</code> if
*               <code>type</code> is score or doc.
* @param type   type of values in the terms.
*/
public sortfield  string field  int type
this field    field    null  ? field intern     field
this type   type
/** creates a sort, possibly in reverse, by terms in the given field with the
* type of term values explicitly given.
* @param field  name of field to sort by.  can be <code>null</code> if
*               <code>type</code> is score or doc.
* @param type   type of values in the terms.
* @param reverse true if natural order should be reversed.
*/
public sortfield  string field  int type  boolean reverse
this field    field    null  ? field intern     field
this type   type
this reverse   reverse
/** creates a sort by terms in the given field sorted
* according to the given locale.
* @param field  name of field to sort by, cannot be <code>null</code>.
* @param locale locale of values in the field.
*/
public sortfield  string field  locale locale
this field   field intern
this type   string
this locale   locale
/** creates a sort, possibly in reverse, by terms in the given field sorted
* according to the given locale.
* @param field  name of field to sort by, cannot be <code>null</code>.
* @param locale locale of values in the field.
*/
public sortfield  string field  locale locale  boolean reverse
this field   field intern
this type   string
this locale   locale
this reverse   reverse
/** creates a sort with a custom comparison function.
* @param field name of field to sort by; cannot be <code>null</code>.
* @param comparator returns a comparator for sorting hits.
*/
public sortfield  string field  sortcomparatorsource comparator
this field    field    null  ? field intern     field
this type   custom
this factory   comparator
/** creates a sort, possibly in reverse, with a custom comparison function.
* @param field name of field to sort by; cannot be <code>null</code>.
* @param comparator returns a comparator for sorting hits.
* @param reverse true if natural order should be reversed.
*/
public sortfield  string field  sortcomparatorsource comparator  boolean reverse
this field    field    null  ? field intern     field
this type   custom
this reverse   reverse
this factory   comparator
/** returns the name of the field.  could return <code>null</code>
* if the sort is by score or doc.
* @return name of field, possibly <code>null</code>.
*/
public string getfield
return field
/** returns the type of contents in the field.
* @return one of the constants score, doc, auto, string, int or float.
*/
public int gettype
return type
/** returns the locale by which term values are interpreted.
* may return <code>null</code> if no locale was specified.
* @return locale, or <code>null</code>.
*/
public locale getlocale
return locale
/** returns whether the sort should be reversed.
* @return  true if natural order should be reversed.
*/
public boolean getreverse
return reverse
public sortcomparatorsource getfactory
return factory
public string tostring
stringbuffer buffer   new stringbuffer
switch  type
case score  buffer append
break
case doc  buffer append
break
case custom
buffer append       append factory  append
break
default
buffer append
break
if  locale    null  buffer append    append locale  append
if  reverse  buffer append
return buffer tostring