package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
a term represents a word from text.  this is the unit of search.  it is
composed of two elements, the text of the word, as a string, and the name of
the field that the text occured in, an interned string.
note that terms may represent more than words from text fields, but also
things like dates, email addresses, urls, etc.  */
public final class term implements comparable  java io serializable
string field
string text
/** constructs a term with the given field and text.
* <p>note that a null field or null text value results in undefined
* behavior for most lucene apis that accept a term parameter. */
public term string fld  string txt
this fld  txt  true
term string fld  string txt  boolean intern
field   intern ? fld intern     fld 	     field names are interned
text   txt 					     unless already known to be
/** returns the field of this term, an interned string.   the field indicates
the part of a document which this term came from. */
public final string field     return field
/** returns the text of this term.  in the case of words, this is simply the
text of the word.  in the case of dates and other types, this is an
encoding of the object as a string.  */
public final string text     return text
/**
* optimized construction of new terms by reusing same field as this term
* - avoids field.intern() overhead
* @param text the text of the new term (field is implicitly same as this term instance)
* @return a new term
*/
public term createterm string text
return new term field text false
/** compares two terms, returning true iff they have the same
field and text. */
public final boolean equals object o
if  o    this
return true
if  o    null
return false
if    o instanceof term
return false
term other    term o
return field    other field    text equals other text
/** combines the hashcode() of the field and the text. */
public final int hashcode
return field hashcode     text hashcode
public int compareto object other
return compareto  term other
/** compares two terms, returning a negative integer if this
term belongs before the argument, zero if this term is equal to the
argument, and a positive integer if this term belongs after the argument.
the ordering of terms is first by field, then by text.*/
public final int compareto term other
if  field    other field 			     fields are interned
return text compareto other text
else
return field compareto other field
/** resets the field and text of a term. */
final void set string fld  string txt
field   fld
text   txt
public final string tostring     return field       text
private void readobject java io objectinputstream in
throws java io ioexception  classnotfoundexception
in defaultreadobject
field   field intern