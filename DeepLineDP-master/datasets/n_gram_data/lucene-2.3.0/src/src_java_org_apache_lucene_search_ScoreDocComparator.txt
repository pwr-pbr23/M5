package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* expert: compares two scoredoc objects for sorting.
*
* <p>created: feb 3, 2004 9:00:16 am
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
*/
public interface scoredoccomparator
/** special comparator for sorting hits according to computed relevance (document score). */
static final scoredoccomparator relevance   new scoredoccomparator
public int compare  scoredoc i  scoredoc j
if  i score > j score  return  1
if  i score < j score  return 1
return 0
public comparable sortvalue  scoredoc i
return new float  i score
public int sorttype
return sortfield score
/** special comparator for sorting hits according to index order (document number). */
static final scoredoccomparator indexorder   new scoredoccomparator
public int compare  scoredoc i  scoredoc j
if  i doc < j doc  return  1
if  i doc > j doc  return 1
return 0
public comparable sortvalue  scoredoc i
return new integer  i doc
public int sorttype
return sortfield doc
/**
* compares two scoredoc objects and returns a result indicating their
* sort order.
* @param i first scoredoc
* @param j second scoredoc
* @return a negative integer if <code>i</code> should come before <code>j</code><br>
*         a positive integer if <code>i</code> should come after <code>j</code><br>
*         <code>0</code> if they are equal
* @see java.util.comparator
*/
int compare  scoredoc i  scoredoc j
/**
* returns the value used to sort the given document.  the
* object returned must implement the java.io.serializable
* interface.  this is used by multisearchers to determine how
* to collate results from their searchers.
* @see fielddoc
* @param i document
* @return serializable object
*/
comparable sortvalue  scoredoc i
/**
* returns the type of sort.  should return <code>sortfield.score</code>,
* <code>sortfield.doc</code>, <code>sortfield.string</code>,
* <code>sortfield.integer</code>, <code>sortfield.float</code> or
* <code>sortfield.custom</code>.  it is not valid to return
* <code>sortfield.auto</code>.
* this is used by multisearchers to determine how to collate results
* from their searchers.
* @return one of the constants in sortfield.
* @see sortfield
*/
int sorttype