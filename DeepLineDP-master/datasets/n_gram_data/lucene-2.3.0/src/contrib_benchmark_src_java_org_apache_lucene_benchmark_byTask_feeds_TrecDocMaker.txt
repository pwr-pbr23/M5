package org apache lucene benchmark bytask feeds
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io bufferedinputstream
import java io bufferedreader
import java io file
import java io fileinputstream
import java io ioexception
import java io inputstreamreader
import java text dateformat
import java text parseexception
import java text simpledateformat
import java util arraylist
import java util date
import java util locale
import java util zip gzipinputstream
import org apache lucene benchmark bytask utils config
/**
* a docmaker using the (compressed) trec collection for its input.
* <p>
* config properties:<ul>
* <li>work.dir=&lt;path to the root of docs and indexes dirs| default: work&gt;</li>
* <li>docs.dir=&lt;path to the docs dir| default: trec&gt;</li>
* </ul>
*/
public class trecdocmaker extends basicdocmaker
private static final string newline   system getproperty
private threadlocal dateformat   new threadlocal
private file datadir   null
private arraylist inputfiles   new arraylist
private int nextfile   0
private int iteration 0
private bufferedreader reader
private gzipinputstream zis
private static final string date_formats
tue  09 dec 2003 22 39 08 gmt
tue dec 09 16 45 08 2003 est
tue  09 dec 2003 22 39 08 gmt
tue  09 dec 2003 22 39 08 gmt
/* (non-javadoc)
* @see simpledocmaker#setconfig(java.util.properties)
*/
public void setconfig config config
super setconfig config
file workdir   new file config get
string d   config get
datadir   new file d
if   datadir isabsolute
datadir   new file workdir  d
collectfiles datadir inputfiles
if  inputfiles size    0
throw new runtimeexception   datadir getabsolutepath
private void opennextfile   throws nomoredataexception  exception
closeinputs
int retries   0
while  true
file f   null
synchronized  this
if  nextfile >  inputfiles size
// exhausted files, start a new round, unless forever set to false.
if   forever
throw new nomoredataexception
nextfile   0
iteration
f    file  inputfiles get nextfile
system out println   f   f length
try
zis   new gzipinputstream new bufferedinputstream new fileinputstream f
reader   new bufferedreader new inputstreamreader zis
return
catch  exception e
retries
if  retries<20
system out println   f getabsolutepath     retries
continue
else
throw new nomoredataexception
private void closeinputs
if  zis  null
try
zis close
catch  ioexception e
system out println   e
e printstacktrace
zis   null
if  reader  null
try
reader close
catch  ioexception e
system out println   e
e printstacktrace
reader   null
// read until finding a line that starts with the specified prefix
private stringbuffer read  string prefix  stringbuffer sb  boolean collectmatchline  boolean collectall  throws exception
sb    sb  null ? new stringbuffer     sb
string sep
while  true
string line   reader readline
if  line  null
opennextfile
continue
if  line startswith prefix
if  collectmatchline
sb append sep line
sep   newline
break
if  collectall
sb append sep line
sep   newline
//system.out.println("read: "+sb);
return sb
protected synchronized docdata getnextdocdata   throws nomoredataexception  exception
if  reader  null
opennextfile
// 1. skip until doc start
read   null false false
// 2. name
stringbuffer sb   read   null true false
string name   sb substring   length
name   name substring 0 name indexof       iteration
// 3. skip until doc header
read   null false false
// 4. date
sb   read   null true false
string datestr   sb substring   length
// 5. skip until end of doc header
read   null false false
// 6. collect until end of doc
sb   read   null false true
// this is the next document, so parse it
date date   parsedate datestr
htmlparser p   gethtmlparser
docdata docdata   p parse name  date  sb  getdateformat 0
addbytes sb length        count char length of parsed html text  larger than the plain doc body text
return docdata
private dateformat getdateformat int n
dateformat df    dateformat  dateformat get
if  df    null
df   new simpledateformat
for  int i   0  i < df length  i
df   new simpledateformat date_formats locale us
df setlenient true
dateformat set df
return df
private date parsedate string datestr
date date   null
for  int i 0  i<date_formats length  i
try
date   getdateformat i  parse datestr trim
return date
catch  parseexception e
// do not fail test just because a date could not be parsed
system out println   datestr
date   new date       now
return date
/*
*  (non-javadoc)
* @see docmaker#resetiinputs()
*/
public synchronized void resetinputs
super resetinputs
closeinputs
nextfile   0
iteration   0
/*
*  (non-javadoc)
* @see docmaker#numuniquetexts()
*/
public int numuniquetexts
return inputfiles size