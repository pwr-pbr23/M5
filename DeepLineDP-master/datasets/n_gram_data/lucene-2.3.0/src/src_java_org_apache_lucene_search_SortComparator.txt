package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import java io ioexception
/**
* abstract base class for sorting hits returned by a query.
*
* <p>this class should only be used if the other sortfield
* types (score, doc, string, int, float) do not provide an
* adequate sorting.  it maintains an internal cache of values which
* could be quite large.  the cache is an array of comparable,
* one for each document in the index.  there is a distinct
* comparable for each unique term in the field - if
* some documents have the same term in the field, the cache
* array will have entries which reference the same comparable.
*
* <p>created: apr 21, 2004 5:08:38 pm
*
*
* @version $id$
* @since   1.4
*/
public abstract class sortcomparator
implements sortcomparatorsource
// inherit javadocs
public scoredoccomparator newcomparator  final indexreader reader  final string fieldname
throws ioexception
final string field   fieldname intern
final comparable cachedvalues   fieldcache default getcustom  reader  field  sortcomparator this
return new scoredoccomparator
public int compare  scoredoc i  scoredoc j
return cachedvalues compareto  cachedvalues
public comparable sortvalue  scoredoc i
return cachedvalues
public int sorttype
return sortfield custom
/**
* returns an object which, when sorted according to natural order,
* will order the term values in the correct order.
* <p>for example, if the terms contained integer values, this method
* would return <code>new integer(termtext)</code>.  note that this
* might not always be the most efficient implementation - for this
* particular example, a better implementation might be to make a
* scoredoclookupcomparator that uses an internal lookup table of int.
* @param termtext the textual value of the term.
* @return an object representing <code>termtext</code> that sorts according to the natural order of <code>termtext</code>.
* @see comparable
* @see scoredoccomparator
*/
protected abstract comparable getcomparable  string termtext