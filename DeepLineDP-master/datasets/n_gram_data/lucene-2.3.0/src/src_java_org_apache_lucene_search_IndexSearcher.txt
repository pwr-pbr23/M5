package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene document document
import org apache lucene document fieldselector
import org apache lucene index corruptindexexception
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene store directory
import java io ioexception
import java util bitset
/** implements search over a single indexreader.
*
* <p>applications usually need only call the inherited {@link #search(query)}
* or {@link #search(query,filter)} methods. for performance reasons it is
* recommended to open only one indexsearcher and use it for all of your searches.
*
* <p>note that you can only access hits from an indexsearcher as long as it is
* not yet closed, otherwise an ioexception will be thrown.
*/
public class indexsearcher extends searcher
indexreader reader
private boolean closereader
/** creates a searcher searching the index in the named directory.
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
public indexsearcher string path  throws corruptindexexception  ioexception
this indexreader open path   true
/** creates a searcher searching the index in the provided directory.
* @throws corruptindexexception if the index is corrupt
* @throws ioexception if there is a low-level io error
*/
public indexsearcher directory directory  throws corruptindexexception  ioexception
this indexreader open directory   true
/** creates a searcher searching the provided index. */
public indexsearcher indexreader r
this r  false
private indexsearcher indexreader r  boolean closereader
reader   r
this closereader   closereader
/** return the {@link indexreader} this searches. */
public indexreader getindexreader
return reader
/**
* note that the underlying indexreader is not closed, if
* indexsearcher was constructed with indexsearcher(indexreader r).
* if the indexreader was supplied implicitly by specifying a directory, then
* the indexreader gets closed.
*/
public void close   throws ioexception
if closereader
reader close
// inherit javadoc
public int docfreq term term  throws ioexception
return reader docfreq term
// inherit javadoc
public document doc int i  throws corruptindexexception  ioexception
return reader document i
// inherit javadoc
public document doc int i  fieldselector fieldselector  throws corruptindexexception  ioexception
return reader document i  fieldselector
// inherit javadoc
public int maxdoc   throws ioexception
return reader maxdoc
// inherit javadoc
public topdocs search weight weight  filter filter  final int ndocs
throws ioexception
if  ndocs <  0      null might be returned from hq top   below
throw new illegalargumentexception
topdoccollector collector   new topdoccollector ndocs
search weight  filter  collector
return collector topdocs
// inherit javadoc
public topfielddocs search weight weight  filter filter  final int ndocs
sort sort
throws ioexception
topfielddoccollector collector
new topfielddoccollector reader  sort  ndocs
search weight  filter  collector
return  topfielddocs collector topdocs
// inherit javadoc
public void search weight weight  filter filter
final hitcollector results  throws ioexception
hitcollector collector   results
if  filter    null
final bitset bits   filter bits reader
collector   new hitcollector
public final void collect int doc  float score
if  bits get doc                         skip docs not in bits
results collect doc  score
scorer scorer   weight scorer reader
if  scorer    null
return
scorer score collector
public query rewrite query original  throws ioexception
query query   original
for  query rewrittenquery   query rewrite reader   rewrittenquery    query
rewrittenquery   query rewrite reader
query   rewrittenquery
return query
public explanation explain weight weight  int doc  throws ioexception
return weight explain reader  doc