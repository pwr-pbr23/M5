package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index corruptindexexception
import org apache lucene index term
import org apache lucene document document
/** an abstract base class for search implementations.
* implements the main search methods.
*
* <p>note that you can only access hits from a searcher as long as it is
* not yet closed, otherwise an ioexception will be thrown.
*/
public abstract class searcher implements searchable
/** returns the documents matching <code>query</code>.
* @throws booleanquery.toomanyclauses
*/
public final hits search query query  throws ioexception
return search query   filter null
/** returns the documents matching <code>query</code> and
* <code>filter</code>.
* @throws booleanquery.toomanyclauses
*/
public hits search query query  filter filter  throws ioexception
return new hits this  query  filter
/** returns documents matching <code>query</code> sorted by
* <code>sort</code>.
* @throws booleanquery.toomanyclauses
*/
public hits search query query  sort sort
throws ioexception
return new hits this  query  null  sort
/** returns documents matching <code>query</code> and <code>filter</code>,
* sorted by <code>sort</code>.
* @throws booleanquery.toomanyclauses
*/
public hits search query query  filter filter  sort sort
throws ioexception
return new hits this  query  filter  sort
/** expert: low-level search implementation with arbitrary sorting.  finds
* the top <code>n</code> hits for <code>query</code>, applying
* <code>filter</code> if non-null, and sorting the hits by the criteria in
* <code>sort</code>.
*
* <p>applications should usually call {@link
* searcher#search(query,filter,sort)} instead.
* @throws booleanquery.toomanyclauses
*/
public topfielddocs search query query  filter filter  int n
sort sort  throws ioexception
return search createweight query   filter  n  sort
/** lower-level search api.
*
* <p>{@link hitcollector#collect(int,float)} is called for every non-zero
* scoring document.
*
* <p>applications should only use this if they need <i>all</i> of the
* matching documents.  the high-level search api ({@link
* searcher#search(query)}) is usually more efficient, as it skips
* non-high-scoring hits.
* <p>note: the <code>score</code> passed to this method is a raw score.
* in other words, the score will not necessarily be a float whose value is
* between 0 and 1.
* @throws booleanquery.toomanyclauses
*/
public void search query query  hitcollector results
throws ioexception
search query   filter null  results
/** lower-level search api.
*
* <p>{@link hitcollector#collect(int,float)} is called for every non-zero
* scoring document.
* <br>hitcollector-based access to remote indexes is discouraged.
*
* <p>applications should only use this if they need <i>all</i> of the
* matching documents.  the high-level search api ({@link
* searcher#search(query)}) is usually more efficient, as it skips
* non-high-scoring hits.
*
* @param query to match documents
* @param filter if non-null, a bitset used to eliminate some documents
* @param results to receive hits
* @throws booleanquery.toomanyclauses
*/
public void search query query  filter filter  hitcollector results
throws ioexception
search createweight query   filter  results
/** expert: low-level search implementation.  finds the top <code>n</code>
* hits for <code>query</code>, applying <code>filter</code> if non-null.
*
* <p>called by {@link hits}.
*
* <p>applications should usually call {@link searcher#search(query)} or
* {@link searcher#search(query,filter)} instead.
* @throws booleanquery.toomanyclauses
*/
public topdocs search query query  filter filter  int n
throws ioexception
return search createweight query   filter  n
/** returns an explanation that describes how <code>doc</code> scored against
* <code>query</code>.
*
* <p>this is intended to be used in developing similarity implementations,
* and, for good performance, should not be displayed with every hit.
* computing an explanation is as expensive as executing the query over the
* entire index.
*/
public explanation explain query query  int doc  throws ioexception
return explain createweight query   doc
/** the similarity implementation used by this searcher. */
private similarity similarity   similarity getdefault
/** expert: set the similarity implementation used by this searcher.
*
* @see similarity#setdefault(similarity)
*/
public void setsimilarity similarity similarity
this similarity   similarity
/** expert: return the similarity implementation used by this searcher.
*
* <p>this defaults to the current value of {@link similarity#getdefault()}.
*/
public similarity getsimilarity
return this similarity
/**
* creates a weight for <code>query</code>
* @return new weight
*/
protected weight createweight query query  throws ioexception
return query weight this
// inherit javadoc
public int docfreqs term terms  throws ioexception
int result   new int
for  int i   0  i < terms length  i
result   docfreq terms
return result
/* the following abstract methods were added as a workaround for gcj bug #15411.
* http://gcc.gnu.org/bugzilla/show_bug.cgi?id=15411
*/
abstract public void search weight weight  filter filter  hitcollector results  throws ioexception
abstract public void close   throws ioexception
abstract public int docfreq term term  throws ioexception
abstract public int maxdoc   throws ioexception
abstract public topdocs search weight weight  filter filter  int n  throws ioexception
abstract public document doc int i  throws corruptindexexception  ioexception
abstract public query rewrite query query  throws ioexception
abstract public explanation explain weight weight  int doc  throws ioexception
abstract public topfielddocs search weight weight  filter filter  int n  sort sort  throws ioexception
/* end patch for gcj bug #15411. */