package org apache lucene analysis el
/**
* copyright 2005 the apache software foundation
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
import org apache lucene analysis standard standardtokenizer
import java io reader
import java util hashset
import java util hashtable
import java util set
/**
* analyzer for the greek language. supports an external list of stopwords (words
* that will not be indexed at all).
* a default set of stopwords is used unless an alternative list is specified.
*
* @author  panagiotis astithas, past@ebs.gr
*/
public final class greekanalyzer extends analyzer
// the letters are indexes to the charset array (see greekcharsets.java)
private static char a   6
private static char b   7
private static char g   8
private static char d   9
private static char e   10
private static char z   11
private static char h   12
private static char th   13
private static char i   14
private static char k   15
private static char l   16
private static char m   17
private static char n   18
private static char ks   19
private static char o   20
private static char p   21
private static char r   22
private static char s   24 	   skip final sigma
private static char t   25
private static char y   26
private static char f   27
private static char x   28
private static char ps   29
private static char w   30
/**
* list of typical greek stopwords.
*/
private static char greek_stop_words
o
h
t  o
o  i
t  a
t  o  y
t  h  s
t  w  n
t  o  n
t  h  n
k  a  i
k  i
k
e  i  m  a  i
e  i  s  a  i
e  i  n  a  i
e  i  m  a  s  t  e
e  i  s  t  e
s  t  o
s  t  o  n
s  t  h
s  t  h  n
m  a
a  l  l  a
a  p  o
g  i  a
p  r  o  s
m  e
s  e
w  s
p  a  r  a
a  n  t  i
k  a  t  a
m  e  t  a
th  a
n  a
d  e
d  e  n
m  h
m  h  n
e  p  i
e  n  w
e  a  n
a  n
t  o  t  e
p  o  y
p  w  s
p  o  i  o  s
p  o  i  a
p  o  i  o
p  o  i  o  i
p  o  i  e  s
p  o  i  w  n
p  o  i  o  y  s
a  y  t  o  s
a  y  t  h
a  y  t  o
a  y  t  o  i
a  y  t  w  n
a  y  t  o  y  s
a  y  t  e  s
a  y  t  a
e  k  e  i  n  o  s
e  k  e  i  n  h
e  k  e  i  n  o
e  k  e  i  n  o  i
e  k  e  i  n  e  s
e  k  e  i  n  a
e  k  e  i  n  w  n
e  k  e  i  n  o  y  s
o  p  w  s
o  m  w  s
i  s  w  s
o  s  o
o  t  i
/**
* contains the stopwords used with the stopfilter.
*/
private set stopset   new hashset
/**
* charset for greek letters.
* represents encoding for 24 lowercase greek letters.
* predefined charsets can be taken from greekcharsets class
*/
private char charset
public greekanalyzer
charset   greekcharsets unicodegreek
stopset   stopfilter makestopset
makestopwords greekcharsets unicodegreek
/**
* builds an analyzer.
*/
public greekanalyzer char charset
this charset   charset
stopset   stopfilter makestopset makestopwords charset
/**
* builds an analyzer with the given stop words.
*/
public greekanalyzer char charset  string stopwords
this charset   charset
stopset   stopfilter makestopset stopwords
// takes greek stop words and translates them to a string array, using
// the given charset
private static string makestopwords char charset
string res   new string
for  int i   0  i < res length  i
char thestopword   greek_stop_words
// translate the word,using the charset
stringbuffer theword   new stringbuffer
for  int j   0  j < thestopword length  j
theword append charset]
res   theword tostring
return res
/**
* builds an analyzer with the given stop words.
*/
public greekanalyzer char charset  hashtable stopwords
this charset   charset
stopset   new hashset stopwords keyset
/**
* creates a tokenstream which tokenizes all the text in the provided reader.
*
* @return  a tokenstream build from a standardtokenizer filtered with
*                  greeklowercasefilter and stopfilter
*/
public tokenstream tokenstream string fieldname  reader reader
tokenstream result   new standardtokenizer reader
result   new greeklowercasefilter result  charset
result   new stopfilter result  stopset
return result