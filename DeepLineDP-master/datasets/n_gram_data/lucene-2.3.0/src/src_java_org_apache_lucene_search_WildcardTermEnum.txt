package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene index indexreader
import org apache lucene index term
/**
* subclass of filteredtermenum for enumerating all terms that match the
* specified wildcard filter term.
* <p>
* term enumerations are always ordered by term.compareto().  each term in
* the enumeration is greater than all that precede it.
*
* @version $id$
*/
public class wildcardtermenum extends filteredtermenum
term searchterm
string field
string text
string pre
int prelen   0
boolean endenum   false
/**
* creates a new <code>wildcardtermenum</code>.  passing in a
* {@link org.apache.lucene.index.term term} that does not contain a
* <code>wildcard_char</code> will cause an exception to be thrown.
* <p>
* after calling the constructor the enumeration is already pointing to the first
* valid term if such a term exists.
*/
public wildcardtermenum indexreader reader  term term  throws ioexception
super
searchterm   term
field   searchterm field
text   searchterm text
int sidx   text indexof wildcard_string
int cidx   text indexof wildcard_char
int idx   sidx
if  idx     1
idx   cidx
else if  cidx >  0
idx   math min idx  cidx
pre   searchterm text   substring 0 idx
prelen   pre length
text   text substring prelen
setenum reader terms new term searchterm field    pre
protected final boolean termcompare term term
if  field    term field
string searchtext   term text
if  searchtext startswith pre
return wildcardequals text  0  searchtext  prelen
endenum   true
return false
public final float difference
return 1 0f
public final boolean endenum
return endenum
/********************************************
* string equality with support for wildcards
********************************************/
public static final char wildcard_string
public static final char wildcard_char
/**
* determines if a word matches a wildcard pattern.
* <small>work released by granta design ltd after originally being done on
* company time.</small>
*/
public static final boolean wildcardequals string pattern  int patternidx
string string  int stringidx
int p   patternidx
for  int s   stringidx      p    s
// end of string yet?
boolean send    s >  string length
// end of pattern yet?
boolean pend    p >  pattern length
// if we're looking at the end of the string...
if  send
// assume the only thing left on the pattern is/are wildcards
boolean justwildcardsleft   true
// current wildcard position
int wildcardsearchpos   p
// while we haven't found the end of the pattern,
// and haven't encountered any non-wildcard characters
while  wildcardsearchpos < pattern length      justwildcardsleft
// check the character at the current position
char wildchar   pattern charat wildcardsearchpos
// if it's not a wildcard character, then there is more
// pattern information after this/these wildcards.
if  wildchar    wildcard_char    wildchar    wildcard_string
justwildcardsleft   false
else
// to prevent "cat" matches "ca??"
if  wildchar    wildcard_char
return false
// look at the next character
wildcardsearchpos
// this was a prefix wildcard search, and we've matched, so
// return true.
if  justwildcardsleft
return true
// if we've gone past the end of the string, or the pattern,
// return false.
if  send    pend
break
// match a single character, so continue.
if  pattern charat p     wildcard_char
continue
//
if  pattern charat p     wildcard_string
// look at the character beyond the '*'.
p
// examine the string, starting at the last character.
for  int i   string length    i >  s    i
if  wildcardequals pattern  p  string  i
return true
break
if  pattern charat p     string charat s
break
return false
public void close   throws ioexception
super close
searchterm   null
field   null
text   null