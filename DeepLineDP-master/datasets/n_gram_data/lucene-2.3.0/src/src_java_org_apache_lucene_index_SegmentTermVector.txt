package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util
/**
*/
class segmenttermvector implements termfreqvector
private string field
private string terms
private int termfreqs
segmenttermvector string field  string terms  int termfreqs
this field   field
this terms   terms
this termfreqs   termfreqs
/**
*
* @return the number of the field this vector is associated with
*/
public string getfield
return field
public string tostring
stringbuffer sb   new stringbuffer
sb append
sb append field  append
if terms    null
for  int i 0  i<terms length  i
if  i>0  sb append
sb append terms  append    append termfreqs
sb append
return sb tostring
public int size
return terms    null ? 0   terms length
public string  getterms
return terms
public int gettermfrequencies
return termfreqs
public int indexof string termtext
if terms    null
return  1
int res   arrays binarysearch terms  termtext
return res >  0 ? res    1
public int indexesof string  termnumbers  int start  int len
// todo: there must be a more efficient way of doing this.
//       at least, we could advance the lower bound of the terms array
//       as we find valid indexes. also, it might be possible to leverage
//       this even more by starting in the middle of the termnumbers array
//       and thus dividing the terms array maybe in half with each found index.
int res   new int
for  int i 0  i < len  i
res   indexof termnumbers
return res