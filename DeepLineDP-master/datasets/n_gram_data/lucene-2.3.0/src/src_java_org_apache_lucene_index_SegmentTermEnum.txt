package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene store indexinput
final class segmenttermenum extends termenum implements cloneable
private indexinput input
fieldinfos fieldinfos
long size
long position    1
private termbuffer termbuffer   new termbuffer
private termbuffer prevbuffer   new termbuffer
private termbuffer scratch                         used for scanning
private terminfo terminfo   new terminfo
private int format
private boolean isindex   false
long indexpointer   0
int indexinterval
int skipinterval
int maxskiplevels
private int formatm1skipinterval
segmenttermenum indexinput i  fieldinfos fis  boolean isi
throws corruptindexexception  ioexception
input   i
fieldinfos   fis
isindex   isi
maxskiplevels   1     use single level skip lists for formats >  3
int firstint   input readint
if  firstint >  0
// original-format file, without explicit format version number
format   0
size   firstint
// back-compatible settings
indexinterval   128
skipinterval   integer max_value     switch off skipto optimization
else
// we have a format version number
format   firstint
// check that it is a format we can understand
if  format < terminfoswriter format
throw new corruptindexexception     format
size   input readlong                          read the size
if format     1
if   isindex
indexinterval   input readint
formatm1skipinterval   input readint
// switch off skipto optimization for file format prior to 1.4rc2 in order to avoid a bug in
// skipto implementation of these versions
skipinterval   integer max_value
else
indexinterval   input readint
skipinterval   input readint
if  format     3
// this new format introduces multi-level skipping
maxskiplevels   input readint
protected object clone
segmenttermenum clone   null
try
clone    segmenttermenum  super clone
catch  clonenotsupportedexception e
clone input    indexinput  input clone
clone terminfo   new terminfo terminfo
clone termbuffer    termbuffer termbuffer clone
clone prevbuffer    termbuffer prevbuffer clone
clone scratch   null
return clone
final void seek long pointer  int p  term t  terminfo ti
throws ioexception
input seek pointer
position   p
termbuffer set t
prevbuffer reset
terminfo set ti
/** increments the enumeration to the next element.  true if one exists.*/
public final boolean next   throws ioexception
if  position   >  size   1
prevbuffer set termbuffer
termbuffer reset
return false
prevbuffer set termbuffer
termbuffer read input  fieldinfos
terminfo docfreq   input readvint   	     read doc freq
terminfo freqpointer    input readvlong   	     read freq pointer
terminfo proxpointer    input readvlong   	     read prox pointer
if format     1
//  just read skipoffset in order to increment  file pointer;
// value is never used since skipto is switched off
if   isindex
if  terminfo docfreq > formatm1skipinterval
terminfo skipoffset   input readvint
else
if  terminfo docfreq >  skipinterval
terminfo skipoffset   input readvint
if  isindex
indexpointer    input readvlong   	     read index pointer
return true
/** optimized scan, without allocating new terms. */
final void scanto term term  throws ioexception
if  scratch    null
scratch   new termbuffer
scratch set term
while  scratch compareto termbuffer  > 0    next
/** returns the current term in the enumeration.
initially invalid, valid after next() called for the first time.*/
public final term term
return termbuffer toterm
/** returns the previous term enumerated. initially null.*/
final term prev
return prevbuffer toterm
/** returns the current terminfo in the enumeration.
initially invalid, valid after next() called for the first time.*/
final terminfo terminfo
return new terminfo terminfo
/** sets the argument to the current terminfo in the enumeration.
initially invalid, valid after next() called for the first time.*/
final void terminfo terminfo ti
ti set terminfo
/** returns the docfreq from the current terminfo in the enumeration.
initially invalid, valid after next() called for the first time.*/
public final int docfreq
return terminfo docfreq
/* returns the freqpointer from the current terminfo in the enumeration.
initially invalid, valid after next() called for the first time.*/
final long freqpointer
return terminfo freqpointer
/* returns the proxpointer from the current terminfo in the enumeration.
initially invalid, valid after next() called for the first time.*/
final long proxpointer
return terminfo proxpointer
/** closes the enumeration to further activity, freeing resources. */
public final void close   throws ioexception
input close