package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene index indexreader
import org apache lucene index term
import org apache lucene util priorityqueue
import org apache lucene util tostringutils
import java io ioexception
/** implements the fuzzy search query. the similiarity measurement
* is based on the levenshtein (edit distance) algorithm.
*/
public class fuzzyquery extends multitermquery
public final static float defaultminsimilarity   0 5f
public final static int defaultprefixlength   0
private float minimumsimilarity
private int prefixlength
/**
* create a new fuzzyquery that will match terms with a similarity
* of at least <code>minimumsimilarity</code> to <code>term</code>.
* if a <code>prefixlength</code> &gt; 0 is specified, a common prefix
* of that length is also required.
*
* @param term the term to search for
* @param minimumsimilarity a value between 0 and 1 to set the required similarity
*  between the query term and the matching terms. for example, for a
*  <code>minimumsimilarity</code> of <code>0.5</code> a term of the same length
*  as the query term is considered similar to the query term if the edit distance
*  between both terms is less than <code>length(term)*0.5</code>
* @param prefixlength length of common (non-fuzzy) prefix
* @throws illegalargumentexception if minimumsimilarity is &gt;= 1 or &lt; 0
* or if prefixlength &lt; 0
*/
public fuzzyquery term term  float minimumsimilarity  int prefixlength  throws illegalargumentexception
super term
if  minimumsimilarity >  1 0f
throw new illegalargumentexception
else if  minimumsimilarity < 0 0f
throw new illegalargumentexception
if  prefixlength < 0
throw new illegalargumentexception
this minimumsimilarity   minimumsimilarity
this prefixlength   prefixlength
/**
* calls {@link #fuzzyquery(term, float) fuzzyquery(term, minimumsimilarity, 0)}.
*/
public fuzzyquery term term  float minimumsimilarity  throws illegalargumentexception
this term  minimumsimilarity  defaultprefixlength
/**
* calls {@link #fuzzyquery(term, float) fuzzyquery(term, 0.5f, 0)}.
*/
public fuzzyquery term term
this term  defaultminsimilarity  defaultprefixlength
/**
* returns the minimum similarity that is required for this query to match.
* @return float value between 0.0 and 1.0
*/
public float getminsimilarity
return minimumsimilarity
/**
* returns the non-fuzzy prefix length. this is the number of characters at the start
* of a term that must be identical (not fuzzy) to the query term if the query
* is to match that term.
*/
public int getprefixlength
return prefixlength
protected filteredtermenum getenum indexreader reader  throws ioexception
return new fuzzytermenum reader  getterm    minimumsimilarity  prefixlength
public query rewrite indexreader reader  throws ioexception
filteredtermenum enumerator   getenum reader
int maxclausecount   booleanquery getmaxclausecount
scoretermqueue stqueue   new scoretermqueue maxclausecount
scoreterm reusablest   null
try
do
float score   0 0f
term t   enumerator term
if  t    null
score   enumerator difference
if  reusablest    null
reusablest   new scoreterm t  score
else if  score >  reusablest score
// reusablest holds the last "rejected" entry, so, if
// this new score is not better than that, there's no
// need to try inserting it
reusablest score   score
reusablest term   t
else
continue
reusablest    scoreterm  stqueue insertwithoverflow reusablest
while  enumerator next
finally
enumerator close
booleanquery query   new booleanquery true
int size   stqueue size
for int i   0  i < size  i
scoreterm st    scoreterm  stqueue pop
termquery tq   new termquery st term           found a match
tq setboost getboost     st score      set the boost
query add tq  booleanclause occur should               add to query
return query
public string tostring string field
stringbuffer buffer   new stringbuffer
term term   getterm
if   term field   equals field
buffer append term field
buffer append
buffer append term text
buffer append
buffer append float tostring minimumsimilarity
buffer append tostringutils boost getboost
return buffer tostring
protected static class scoreterm
public term term
public float score
public scoreterm term term  float score
this term   term
this score   score
protected static class scoretermqueue extends priorityqueue
public scoretermqueue int size
initialize size
/* (non-javadoc)
* @see org.apache.lucene.util.priorityqueue#lessthan(java.lang.object, java.lang.object)
*/
protected boolean lessthan object a  object b
scoreterm terma    scoreterm a
scoreterm termb    scoreterm b
if  terma score    termb score
return terma term compareto termb term  > 0
else
return terma score < termb score
public boolean equals object o
if  this    o  return true
if    o instanceof fuzzyquery   return false
if   super equals o   return false
final fuzzyquery fuzzyquery    fuzzyquery  o
if  minimumsimilarity    fuzzyquery minimumsimilarity  return false
if  prefixlength    fuzzyquery prefixlength  return false
return true
public int hashcode
int result   super hashcode
result   29   result   minimumsimilarity     0 0f ? float floattointbits minimumsimilarity    0
result   29   result   prefixlength
return result