/*
* created on 25-jan-2006
*/
package org apache lucene xmlparser builders
import java io ioexception
import java io stringreader
import java util hashset
import java util set
import org apache lucene analysis analyzer
import org apache lucene analysis token
import org apache lucene analysis tokenstream
import org apache lucene search similar morelikethisquery
import org apache lucene search query
import org apache lucene xmlparser domutils
import org apache lucene xmlparser parserexception
import org apache lucene xmlparser querybuilder
import org w3c dom element
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* @author maharwood
*/
public class likethisquerybuilder implements querybuilder
private analyzer analyzer
string defaultfieldnames
int defaultmaxqueryterms 20
int defaultmintermfrequency 1
float defaultpercenttermstomatch 30    default is a 3rd of selected terms must match
public likethisquerybuilder analyzer analyzer string  defaultfieldnames
this analyzer analyzer
this defaultfieldnames defaultfieldnames
/* (non-javadoc)
* @see org.apache.lucene.xmlparser.queryobjectbuilder#process(org.w3c.dom.element)
*/
public query getquery element e  throws parserexception
string fieldslist e getattribute       a comma delimited list of fields
string fields defaultfieldnames
if  fieldslist  null    fieldslist trim   length  >0
fields fieldslist trim   split
//trim the fieldnames
for  int i   0  i < fields length  i
fields fields trim
//parse any "stopwords" attribute
//todo morelikethis needs to ideally have per-field stopwords lists - until then
//i use all analyzers/fields to generate multi-field compatible stop list
string stopwords e getattribute
set stopwordsset null
if  stopwords  null    fields  null
stopwordsset new hashset
for  int i   0  i < fields length  i
tokenstream ts   analyzer tokenstream fields new stringreader stopwords
try
token stoptoken ts next
while stoptoken  null
stopwordsset add stoptoken termtext
stoptoken ts next
catch ioexception ioe
throw new parserexception
getclass   getname     ioe getlocalizedmessage
morelikethisquery mlt new morelikethisquery domutils gettext e  fields analyzer
mlt setmaxqueryterms domutils getattribute e   defaultmaxqueryterms
mlt setmintermfrequency domutils getattribute e   defaultmintermfrequency
mlt setpercenttermstomatch domutils getattribute e   defaultpercenttermstomatch  100
mlt setstopwords stopwordsset
int mindocfreq domutils getattribute e    1
if mindocfreq> 0
mlt setmindocfreq mindocfreq
mlt setboost domutils getattribute e   1 0f
return mlt