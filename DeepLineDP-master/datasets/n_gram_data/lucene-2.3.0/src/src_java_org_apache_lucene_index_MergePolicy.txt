package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene store directory
import java io ioexception
import java util list
import java util arraylist
import java util set
/**
* <p>expert: a mergepolicy determines the sequence of
* primitive merge operations to be used for overall merge
* and optimize operations.</p>
*
* <p>whenever the segments in an index have been altered by
* {@link indexwriter}, either the addition of a newly
* flushed segment, addition of many segments from
* addindexes* calls, or a previous merge that may now need
* to cascade, {@link indexwriter} invokes {@link
* #findmerges} to give the mergepolicy a chance to pick
* merges that are now required.  this method returns a
* {@link mergespecification} instance describing the set of
* merges that should be done, or null if no merges are
* necessary.  when indexwriter.optimize is called, it calls
* {@link #findmergesforoptimize} and the mergepolicy should
* then return the necessary merges.</p>
*
* <p>note that the policy can return more than one merge at
* a time.  in this case, if the writer is using {@link
* serialmergescheduler}, the merges will be run
* sequentially but if it is using {@link
* concurrentmergescheduler} they will be run concurrently.</p>
*
* <p>the default mergepolicy is {@link
* logbytesizemergepolicy}.</p>
*/
public abstract class mergepolicy
/** onemerge provides the information necessary to perform
*  an individual primitive merge operation, resulting in
*  a single new segment.  the merge spec includes the
*  subset of segments to be merged as well as whether the
*  new segment should use the compound file format. */
public static class onemerge
segmentinfo info                   used by indexwriter
boolean mergedocstores             used by indexwriter
boolean optimize                   used by indexwriter
segmentinfos segmentsclone         used by indexwriter
boolean increfdone                 used by indexwriter
boolean registerdone               used by indexwriter
long mergegen                      used by indexwriter
boolean isexternal                 used by indexwriter
int maxnumsegmentsoptimize         used by indexwriter
final segmentinfos segments
final boolean usecompoundfile
boolean aborted
throwable error
public onemerge segmentinfos segments  boolean usecompoundfile
if  0    segments size
throw new runtimeexception
this segments   segments
this usecompoundfile   usecompoundfile
/** record that an exception occurred while executing
*  this merge */
synchronized void setexception throwable error
this error   error
/** retrieve previous exception set by {@link
*  #setexception}. */
synchronized throwable getexception
return error
/** mark this merge as aborted.  if this is called
*  before the merge is committed then the merge will
*  not be committed. */
synchronized void abort
aborted   true
/** returns true if this merge was aborted. */
synchronized boolean isaborted
return aborted
synchronized void checkaborted directory dir  throws mergeabortedexception
if  aborted
throw new mergeabortedexception     segstring dir
string segstring directory dir
stringbuffer b   new stringbuffer
final int numsegments   segments size
for int i 0 i<numsegments i
if  i > 0  b append
b append segments info i  segstring dir
if  info    null
b append    append info name
if  optimize
b append
return b tostring
/**
* a mergespecification instance provides the information
* necessary to perform multiple merges.  it simply
* contains a list of {@link onemerge} instances.
*/
public static class mergespecification
/**
* the subset of segments to be included in the primitive merge.
*/
public list merges   new arraylist
public void add onemerge merge
merges add merge
public string segstring directory dir
stringbuffer b   new stringbuffer
b append
final int count   merges size
for int i 0 i<count i
b append    append 1   i  append    append   onemerge  merges get i   segstring dir
return b tostring
/** exception thrown if there are any problems while
*  executing a merge. */
public static class mergeexception extends runtimeexception
public mergeexception string message
super message
public mergeexception throwable exc
super exc
public static class mergeabortedexception extends ioexception
public mergeabortedexception
super
public mergeabortedexception string message
super message
/**
* determine what set of merge operations are now
* necessary on the index.  the indexwriter calls this
* whenever there is a change to the segments.  this call
* is always synchronized on the indexwriter instance so
* only one thread at a time will call this method.
*
* @param segmentinfos the total set of segments in the index
* @param writer indexwriter instance
*/
abstract mergespecification findmerges segmentinfos segmentinfos
indexwriter writer
throws corruptindexexception  ioexception
/**
* determine what set of merge operations are necessary in
* order to optimize the index.  the indexwriter calls
* this when its optimize() method is called.  this call
* is always synchronized on the indexwriter instance so
* only one thread at a time will call this method.
*
* @param segmentinfos the total set of segments in the index
* @param writer indexwriter instance
* @param maxsegmentcount requested maximum number of
*   segments in the index (currently this is always 1)
* @param segmentstooptimize contains the specific
*   segmentinfo instances that must be merged away.  this
*   may be a subset of all segmentinfos.
*/
abstract mergespecification findmergesforoptimize segmentinfos segmentinfos
indexwriter writer
int maxsegmentcount
set segmentstooptimize
throws corruptindexexception  ioexception
/**
* release all resources for the policy.
*/
abstract void close
/**
* returns true if a newly flushed (not from merge)
* segment should use the compound file format.
*/
abstract boolean usecompoundfile segmentinfos segments  segmentinfo newsegment
/**
* returns true if the doc store files should use the
* compound file format.
*/
abstract boolean usecompounddocstore segmentinfos segments