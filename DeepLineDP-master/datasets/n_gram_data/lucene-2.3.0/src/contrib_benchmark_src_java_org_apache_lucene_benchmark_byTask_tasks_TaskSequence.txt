package org apache lucene benchmark bytask tasks
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util arraylist
import java util iterator
import org apache lucene benchmark bytask perfrundata
import org apache lucene benchmark bytask feeds nomoredataexception
/**
* sequence of parallel or sequential tasks.
*/
public class tasksequence extends perftask
public static int repeat_exhaust    2
private arraylist tasks
private int repetitions   1
private boolean parallel
private tasksequence parent
private boolean letchildreport   true
private int rate   0
private boolean permin   false     rate  if set  is  by default  be sec
private string seqname
private boolean exhausted   false
private boolean resetexhausted   false
private perftask tasksarray
private boolean anyexhaustibletasks
public tasksequence  perfrundata rundata  string name  tasksequence parent  boolean parallel
super rundata
name    name  null ? name    parallel ?
setname name
setsequencename
this parent   parent
this parallel   parallel
tasks   new arraylist
private void inittasksarray
if  tasksarray    null
final int numtasks   tasks size
tasksarray   new perftask
for int k 0 k<numtasks k
tasksarray    perftask  tasks get k
anyexhaustibletasks    tasksarray instanceof resetinputstask
anyexhaustibletasks    tasksarray instanceof tasksequence
/**
* @return returns the parallel.
*/
public boolean isparallel
return parallel
/**
* @return returns the repetitions.
*/
public int getrepetitions
return repetitions
/**
* @param repetitions the repetitions to set.
* @throws exception
*/
public void setrepetitions int repetitions  throws exception
this repetitions   repetitions
if  repetitions  repeat_exhaust
if  isparallel
throw new exception
if  getrundata   getconfig   get   true
throw new exception
setsequencename
/**
* @return returns the parent.
*/
public tasksequence getparent
return parent
/*
* (non-javadoc)
* @see org.apache.lucene.benchmark.bytask.tasks.perftask#dologic()
*/
public int dologic   throws exception
exhausted   resetexhausted   false
return   parallel ? doparalleltasks     doserialtasks
private int doserialtasks   throws exception
if  rate > 0
return doserialtaskswithrate
inittasksarray
int count   0
for  int k 0   repetitions  repeat_exhaust     exhausted     k<repetitions  k
for int l 0 l<tasksarray length l
try
final perftask task   tasksarray
count    task runandmaybestats letchildreport
if  anyexhaustibletasks
updateexhausted task
catch  nomoredataexception e
exhausted   true
return count
private int doserialtaskswithrate   throws exception
inittasksarray
long delaystep    permin ? 60000   1000   rate
long nextstarttime   system currenttimemillis
int count   0
for  int k 0   repetitions  repeat_exhaust     exhausted     k<repetitions  k
for  int l 0 l<tasksarray length l
final perftask task   tasksarray
long waitmore   nextstarttime   system currenttimemillis
if  waitmore > 0
//system.out.println("wait: "+waitmore+" for rate: "+ratepermin+" (delaystep="+delaystep+")");
thread sleep waitmore
nextstarttime    delaystep     this aims at avarage rate
try
count    task runandmaybestats letchildreport
if  anyexhaustibletasks
updateexhausted task
catch  nomoredataexception e
exhausted   true
return count
// update state regarding exhaustion.
private void updateexhausted perftask task
if  task instanceof resetinputstask
exhausted   false
resetexhausted   true
else if  task instanceof tasksequence
tasksequence t    tasksequence  task
if  t resetexhausted
exhausted   false
resetexhausted   true
t resetexhausted   false
else
exhausted    t exhausted
private int doparalleltasks   throws exception
inittasksarray
final int count     0
thread t   new thread
// prepare threads
int indx   0
for  int k 0  k<repetitions  k
for  int i   0  i < tasksarray length  i
final perftask task    perftask  tasksarray clone
t   new thread
public void run
int n
try
n   task runandmaybestats letchildreport
updateexhausted task
synchronized  count
count    n
catch  nomoredataexception e
exhausted   true
catch  exception e
throw new runtimeexception e
// run threads
startthreads t
// wait for all threads to complete
for  int i   0  i < t length  i
t join
// return total count
return count
// run threads
private void startthreads thread t  throws interruptedexception
if  rate > 0
startlthreadswithrate t
return
for  int i   0  i < t length  i
t start
// run threadsm with rate
private void startlthreadswithrate thread t  throws interruptedexception
long delaystep    permin ? 60000   1000   rate
long nextstarttime   system currenttimemillis
for  int i   0  i < t length  i
long waitmore   nextstarttime   system currenttimemillis
if  waitmore > 0
//system.out.println("thread wait: "+waitmore+" for rate: "+ratepermin+" (delaystep="+delaystep+")");
thread sleep waitmore
nextstarttime    delaystep     this aims at avarage rate of starting threads
t start
public void addtask perftask task
tasks add task
task setdepth getdepth   1
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
string padd   getpadding
stringbuffer sb   new stringbuffer super tostring
sb append parallel ?
sb append new_line
for  iterator it   tasks iterator    it hasnext
perftask task    perftask  it next
sb append task tostring
sb append new_line
sb append padd
sb append  letchildreport ?      parallel ?
if  repetitions>1
sb append     repetitions
if  repetitions  repeat_exhaust
sb append
if  rate>0
sb append     rate    permin?
return sb tostring
/**
* execute child tasks in a way that they do not report their time separately.
*/
public void setnochildreport
letchildreport    false
for  iterator it   tasks iterator    it hasnext
perftask task    perftask  it next
if  task instanceof tasksequence
tasksequence task  setnochildreport
/**
* returns the rate per minute: how many operations should be performed in a minute.
* if 0 this has no effect.
* @return the rate per min: how many operations should be performed in a minute.
*/
public int getrate
return  permin ? rate   60 rate
/**
* @param rate the rate to set.
*/
public void setrate int rate  boolean permin
this rate   rate
this permin   permin
setsequencename
private void setsequencename
seqname   super getname
if  repetitions  repeat_exhaust
seqname
else if  repetitions>1
seqname      repetitions
if  rate>0
seqname        rate    permin?
if  parallel    seqname tolowercase   indexof   <0
seqname
public string getname
return seqname     overide to include more info
/**
* @return returns the tasks.
*/
public arraylist gettasks
return tasks
/* (non-javadoc)
* @see java.lang.object#clone()
*/
protected object clone   throws clonenotsupportedexception
tasksequence res    tasksequence  super clone
res tasks   new arraylist
for  int i   0  i < tasks size    i
res tasks add   perftask tasks get i   clone
return res