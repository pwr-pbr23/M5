package org apache lucene store
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
/**
* <p>base class for locking implementation.  {@link directory} uses
* instances of this class to implement locking.</p>
*
* <p>note that there are some useful tools to verify that
* your lockfactory is working correctly: {@link
* verifyinglockfactory}, {@link lockstresstest}, {@link
* lockverifyserver}.</p>
*
* @see lockverifyserver
* @see lockstresstest
* @see verifyinglockfactory
*/
public abstract class lockfactory
protected string lockprefix
/**
* set the prefix in use for all locks created in this
* lockfactory.  this is normally called once, when a
* directory gets this lockfactory instance.  however, you
* can also call this (after this instance is assigned to
* a directory) to override the prefix in use.  this
* is helpful if you're running lucene on machines that
* have different mount points for the same shared
* directory.
*/
public void setlockprefix string lockprefix
this lockprefix   lockprefix
/**
* get the prefix in use for all locks created in this lockfactory.
*/
public string getlockprefix
return this lockprefix
/**
* return a new lock instance identified by lockname.
* @param lockname name of the lock to be created.
*/
public abstract lock makelock string lockname
/**
* attempt to clear (forcefully unlock and remove) the
* specified lock.  only call this at a time when you are
* certain this lock is no longer in use.
* @param lockname name of the lock to be cleared.
*/
abstract public void clearlock string lockname  throws ioexception