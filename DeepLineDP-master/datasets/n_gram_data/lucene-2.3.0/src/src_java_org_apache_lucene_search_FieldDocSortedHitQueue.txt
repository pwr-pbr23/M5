package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene util priorityqueue
import java text collator
import java util locale
/**
* expert: collects sorted results from searchable's and collates them.
* the elements put into this queue must be of type fielddoc.
*
* <p>created: feb 11, 2004 2:04:21 pm
*
* @author  tim jones (nacimiento software)
* @since   lucene 1.4
* @version $id$
*/
class fielddocsortedhitqueue
extends priorityqueue
// this cannot contain auto fields - any auto fields should
// have been resolved by the time this class is used.
volatile sortfield fields
// used in the case where the fields are sorted by locale
// based strings
volatile collator collators
/**
* creates a hit queue sorted by the given list of fields.
* @param fields fieldable names, in priority order (highest priority first).
* @param size  the number of hits to retain.  must be greater than zero.
*/
fielddocsortedhitqueue  sortfield fields  int size
this fields   fields
this collators   hascollators  fields
initialize  size
/**
* allows redefinition of sort fields if they are <code>null</code>.
* this is to handle the case using parallelmultisearcher where the
* original list contains auto and we don't know the actual sort
* type until the values come back.  the fields can only be set once.
* this method is thread safe.
* @param fields
*/
synchronized void setfields  sortfield fields
if  this fields    null
this fields   fields
this collators   hascollators  fields
/** returns the fields being used to sort. */
sortfield getfields
return fields
/** returns an array of collators, possibly <code>null</code>.  the collators
* correspond to any sortfields which were given a specific locale.
* @param fields array of sort fields.
* @return array, possibly <code>null</code>.
*/
private collator hascollators  final sortfield fields
if  fields    null  return null
collator ret   new collator
for  int i 0  i<fields length    i
locale locale   fields getlocale
if  locale    null
ret   collator getinstance  locale
return ret
/**
* returns whether <code>a</code> is less relevant than <code>b</code>.
* @param a scoredoc
* @param b scoredoc
* @return <code>true</code> if document <code>a</code> should be sorted after document <code>b</code>.
*/
protected final boolean lessthan  final object a  final object b
final fielddoc doca    fielddoc  a
final fielddoc docb    fielddoc  b
final int n   fields length
int c   0
for  int i 0  i<n    c  0    i
final int type   fields gettype
switch  type
case sortfield score
float r1     float doca fields  floatvalue
float r2     float docb fields  floatvalue
if  r1 > r2  c    1
if  r1 < r2  c   1
break
case sortfield doc
case sortfield int
int i1     integer doca fields  intvalue
int i2     integer docb fields  intvalue
if  i1 < i2  c    1
if  i1 > i2  c   1
break
case sortfield long
long l1     long doca fields  longvalue
long l2     long docb fields  longvalue
if  l1 < l2  c    1
if  l1 > l2  c   1
break
case sortfield string
string s1    string  doca fields
string s2    string  docb fields
// null values need to be sorted first, because of how fieldcache.getstringindex()
// works - in that routine, any documents without a value in the given field are
// put first.  if both are null, the next sortfield is used
if  s1    null  c    s2  null  ? 0    1
else if  s2    null  c   1
else if  fields getlocale      null
c   s1 compareto s2
else
c   collators compare  s1  s2
break
case sortfield float
float f1     float doca fields  floatvalue
float f2     float docb fields  floatvalue
if  f1 < f2  c    1
if  f1 > f2  c   1
break
case sortfield double
double d1     double doca fields  doublevalue
double d2     double docb fields  doublevalue
if  d1 < d2  c    1
if  d1 > d2  c   1
break
case sortfield custom
c   doca fields compareto  docb fields
break
case sortfield auto
// we cannot handle this - even if we determine the type of object (float or
// integer), we don't necessarily know how to compare them (both score and
// float contain floats, but are sorted opposite of each other). before
// we get here, each auto should have been replaced with its actual value.
throw new runtimeexception
default
throw new runtimeexception    type
if  fields getreverse
c    c
// avoid random sort order that could lead to duplicates (bug #31241):
if  c    0
return doca doc > docb doc
return c > 0