package org apache lucene document
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* provides support for converting longs to strings, and back again. the strings
* are structured so that lexicographic sorting order is preserved.
*
* <p>
* that is, if l1 is less than l2 for any two longs l1 and l2, then
* numbertools.longtostring(l1) is lexicographically less than
* numbertools.longtostring(l2). (similarly for "greater than" and "equals".)
*
* <p>
* this class handles <b>all</b> long values (unlike
* {@link org.apache.lucene.document.datefield}).
*
*
*/
public class numbertools
private static final int radix   36
private static final char negative_prefix
// nb: negative_prefix must be < positive_prefix
private static final char positive_prefix
//nb: this must be less than
/**
* equivalent to longtostring(long.min_value)
*/
public static final string min_string_value   negative_prefix
/**
* equivalent to longtostring(long.max_value)
*/
public static final string max_string_value   positive_prefix
/**
* the length of (all) strings returned by {@link #longtostring}
*/
public static final int str_size   min_string_value length
/**
* converts a long to a string suitable for indexing.
*/
public static string longtostring long l
if  l    long min_value
// special case, because long is not symetric around zero
return min_string_value
stringbuffer buf   new stringbuffer str_size
if  l < 0
buf append negative_prefix
l   long max_value   l   1
else
buf append positive_prefix
string num   long tostring l  radix
int padlen   str_size   num length     buf length
while  padlen   > 0
buf append
buf append num
return buf tostring
/**
* converts a string that was returned by {@link #longtostring} back to a
* long.
*
* @throws illegalargumentexception
*             if the input is null
* @throws numberformatexception
*             if the input does not parse (it was not a string returned by
*             longtostring()).
*/
public static long stringtolong string str
if  str    null
throw new nullpointerexception
if  str length      str_size
throw new numberformatexception
if  str equals min_string_value
return long min_value
char prefix   str charat 0
long l   long parselong str substring 1   radix
if  prefix    positive_prefix
// nop
else if  prefix    negative_prefix
l   l   long max_value   1
else
throw new numberformatexception
return l