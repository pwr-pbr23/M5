package org apache lucene index
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import org apache lucene store indexoutput
import org apache lucene store ramoutputstream
/**
* this abstract class writes skip lists with multiple levels.
*
* example for skipinterval = 3:
*                                                     c            (skip level 2)
*                 c                 c                 c            (skip level 1)
*     x     x     x     x     x     x     x     x     x     x      (skip level 0)
* d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d  (posting list)
*     3     6     9     12    15    18    21    24    27    30     (df)
*
* d - document
* x - skip data
* c - skip data with child pointer
*
* skip level i contains every skipinterval-th entry from skip level i-1.
* therefore the number of entries on level i is: floor(df / ((skipinterval ^ (i + 1))).
*
* each skip entry on a level i>0 contains a pointer to the corresponding skip entry in list i-1.
* this guarantess a logarithmic amount of skips to find the target document.
*
* while this class takes care of writing the different skip levels,
* subclasses must define the actual format of the skip data.
*
*/
abstract class multilevelskiplistwriter
// number of levels in this skip list
private int numberofskiplevels
// the skip interval in the list with level = 0
private int skipinterval
// for every skip level a different buffer is used
private ramoutputstream skipbuffer
protected multilevelskiplistwriter int skipinterval  int maxskiplevels  int df
this skipinterval   skipinterval
// calculate the maximum number of skip levels for this document frequency
numberofskiplevels   df    0 ? 0    int  math floor math log df    math log skipinterval
// make sure it does not exceed maxskiplevels
if  numberofskiplevels > maxskiplevels
numberofskiplevels   maxskiplevels
protected void init
skipbuffer   new ramoutputstream
for  int i   0  i < numberofskiplevels  i
skipbuffer   new ramoutputstream
protected void resetskip
// creates new buffers or empties the existing ones
if  skipbuffer    null
init
else
for  int i   0  i < skipbuffer length  i
skipbuffer reset
/**
* subclasses must implement the actual skip data encoding in this method.
*
* @param level the level skip data shall be writting for
* @param skipbuffer the skip buffer to write to
*/
protected abstract void writeskipdata int level  indexoutput skipbuffer  throws ioexception
/**
* writes the current skip data to the buffers. the current document frequency determines
* the max level is skip data is to be written to.
*
* @param df the current document frequency
* @throws ioexception
*/
void bufferskip int df  throws ioexception
int numlevels
// determine max level
for  numlevels   0   df % skipinterval     0    numlevels < numberofskiplevels  df    skipinterval
numlevels
long childpointer   0
for  int level   0  level < numlevels  level
writeskipdata level  skipbuffer
long newchildpointer   skipbuffer getfilepointer
if  level    0
// store child pointers for all levels except the lowest
skipbuffer writevlong childpointer
//remember the childpointer for the next level
childpointer   newchildpointer
/**
* writes the buffered skip lists to the given output.
*
* @param output the indexoutput the skip lists shall be written to
* @return the pointer the skip list starts
*/
long writeskip indexoutput output  throws ioexception
long skippointer   output getfilepointer
if  skipbuffer    null    skipbuffer length    0  return skippointer
for  int level   numberofskiplevels   1  level > 0  level
long length   skipbuffer getfilepointer
if  length > 0
output writevlong length
skipbuffer writeto output
skipbuffer writeto output
return skippointer