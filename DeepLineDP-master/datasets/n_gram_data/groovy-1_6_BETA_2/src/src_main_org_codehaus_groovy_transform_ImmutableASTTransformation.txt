/*
* copyright 2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy transform
import groovy lang immutable
import org codehaus groovy ast
import org codehaus groovy ast expr
import org codehaus groovy ast stmt
import org codehaus groovy control compilephase
import org codehaus groovy control sourceunit
import org codehaus groovy runtime defaultgroovymethods
import org codehaus groovy syntax token
import org codehaus groovy syntax types
import org codehaus groovy util hashcodehelper
import org objectweb asm opcodes
import java util
/**
* handles generation of code for the @immutable annotation.
* this is experimental, use at your own risk.
*
* @author paul king
*/
@groovyasttransformation phase   compilephase canonicalization
public class immutableasttransformation implements asttransformation  opcodes
/*
currently leaving biginteger and bigdecimal in list but see:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348370
*/
private static class immutablelist
boolean class
byte class
character class
double class
float class
integer class
long class
short class
string class
java math biginteger class
java math bigdecimal class
java awt color class
private static final classnode hashmap_type   new classnode hashmap class
private static final classnode map_type   new classnode map class
private static final classnode date_type   new classnode date class
private static final classnode cloneable_type   new classnode cloneable class
private static final classnode collection_type   new classnode collection class
private static final classnode hashutil_type   new classnode hashcodehelper class
private static final classnode stringbuffer_type   new classnode stringbuffer class
private static final classnode dgm_type   new classnode defaultgroovymethods class
private static final classnode my_type   new classnode immutable class
private static final string my_type_name       my_type getnamewithoutpackage
private static final classnode self_type   new classnode immutableasttransformation class
private static final token compare_equal   token newsymbol types compare_equal   1   1
private static final token compare_not_equal   token newsymbol types compare_not_equal   1   1
private static final token compare_identical   token newsymbol types compare_identical   1   1
private static final token assign   token newsymbol types assign   1   1
public void visit astnode nodes  sourceunit source
if    nodes instanceof annotationnode       nodes instanceof annotatednode
throw new runtimeexception
annotatednode parent    annotatednode  nodes
annotationnode node    annotationnode  nodes
if   my_type equals node getclassnode     return
list<propertynode> newnodes   new arraylist<propertynode>
if  parent instanceof classnode
classnode cnode    classnode  parent
string cname   cnode getname
if  cnode isinterface
throw new runtimeexception     cname       my_type_name
if   cnode getmodifiers     acc_final     0
throw new runtimeexception     cname       my_type_name
final list<propertynode> plist   cnode getproperties
for  propertynode pnode   plist
adjustpropertyforimmutability pnode  newnodes
for  propertynode pnode   newnodes
plist remove pnode
addproperty cnode  pnode
final list<fieldnode> flist   cnode getfields
for  fieldnode fnode   flist
ensurenotpublic cname  fnode
createconstructor cnode
createhashcode cnode
createequals cnode
createtostring cnode
private void ensurenotpublic string cnode  fieldnode fnode
string fname   fnode getname
// todo: do we need to lock down things like: $ownclass
if  fnode ispublic       fname contains
throw new runtimeexception     fname       my_type_name       cnode
private void createhashcode classnode cnode
final fieldnode hashfield   cnode addfield    acc_private   acc_synthetic  classhelper int_type  null
final blockstatement body   new blockstatement
final expression hash   new fieldexpression hashfield
final list<propertynode> list   cnode getproperties
body addstatement new ifstatement
iszeroexpr hash
calculatehashstatements hash  list
new emptystatement
body addstatement new returnstatement hash
cnode addmethod new methodnode    acc_public  classhelper int_type  parameter empty_array  classnode empty_array  body
private void createtostring classnode cnode
final blockstatement body   new blockstatement
final list<propertynode> list   cnode getproperties
// def _result = new stringbuffer()
final expression result   new variableexpression
final expression init   new constructorcallexpression stringbuffer_type  methodcallexpression no_arguments
body addstatement new expressionstatement new declarationexpression result  assign  init
body addstatement append result  new constantexpression cnode getname
body addstatement append result  new constantexpression
boolean first   true
for  propertynode pnode   list
if  first
first   false
else
body addstatement append result  new constantexpression
body addstatement new ifstatement
new booleanexpression new fieldexpression cnode getfield
tostringpropertyname result  pnode getname
new emptystatement
final fieldexpression fieldexpr   new fieldexpression pnode getfield
body addstatement append result  new methodcallexpression fieldexpr     methodcallexpression no_arguments
body addstatement append result  new constantexpression
body addstatement new returnstatement new methodcallexpression result     methodcallexpression no_arguments
cnode addmethod new methodnode    acc_public  classhelper string_type  parameter empty_array  classnode empty_array  body
private statement tostringpropertyname expression result  string fname
final blockstatement body   new blockstatement
body addstatement append result  new constantexpression fname
body addstatement append result  new constantexpression
return body
private expressionstatement append expression result  expression expr
return new expressionstatement new methodcallexpression result     expr
private statement calculatehashstatements expression hash  list<propertynode> list
final blockstatement body   new blockstatement
// def _result = hashcodehelper.inithash()
final expression result   new variableexpression
final expression init   new staticmethodcallexpression hashutil_type     methodcallexpression no_arguments
body addstatement new expressionstatement new declarationexpression result  assign  init
// fields
for  propertynode pnode   list
// _result = hashcodehelper.updatehash(_result, field)
final expression fieldexpr   new fieldexpression pnode getfield
final expression args   new tupleexpression result  fieldexpr
final expression current   new staticmethodcallexpression hashutil_type     args
body addstatement assignstatement result  current
// $hash$code = _result
body addstatement assignstatement hash  result
return body
private void createequals classnode cnode
final blockstatement body   new blockstatement
final list<propertynode> list   cnode getproperties
expression other   new variableexpression
// some short circuit cases for efficiency
body addstatement returnfalseifnull other
body addstatement returntrueifidentical variableexpression this_expression  other
// fields
for  propertynode pnode   list
body addstatement returnfalseifpropertynotequal pnode  other
// default
body addstatement new returnstatement constantexpression true
parameter params    new parameter cnode
cnode addmethod new methodnode    acc_public  classhelper boolean_type  params  classnode empty_array  body
private ifstatement returnfalseifnull expression other
return new ifstatement
equalsnullexpr other
new returnstatement constantexpression false
new emptystatement
private ifstatement returntrueifidentical expression self  expression other
return new ifstatement
identicalexpr self  other
new returnstatement constantexpression true
new emptystatement
private statement returnfalseifpropertynotequal propertynode pnode  expression other
return new ifstatement
notequalsexpr pnode  other
new returnstatement constantexpression false
new emptystatement
private void addproperty classnode cnode  propertynode pnode
final fieldnode fn   pnode getfield
cnode getfields   remove fn
cnode addproperty pnode getname    pnode getmodifiers     acc_final  pnode gettype
pnode getinitialexpression    pnode getgetterblock    pnode getsetterblock
final fieldnode newfn   cnode getfield fn getname
cnode getfields   remove newfn
cnode addfield fn
private void createconstructor classnode cnode
// pretty tostring will remember how the user declared the params and print accordingly
final fieldnode constructorfield   cnode addfield    acc_private   acc_synthetic  classhelper boolean_type  null
final fieldexpression constructorstyle   new fieldexpression constructorfield
if  cnode getdeclaredconstructors   size      0
// todo: allow constructors which call provided constructor?
throw new runtimeexception my_type_name
// map constructor
final blockstatement body   new blockstatement
list<propertynode> list   cnode getproperties
final variableexpression args   new variableexpression
for  propertynode pnode   list
body addstatement createconstructorstatement pnode
final list<fieldnode> flist   cnode getfields
for  fieldnode fnode   flist
if   fnode ispublic       fnode getname   contains        cnode getproperty fnode getname       null
body addstatement createconstructorstatementdefault fnode
body addstatement assignstatement constructorstyle  constantexpression true
final parameter params   new parameter new parameter hashmap_type
cnode addconstructor new constructornode acc_public  params  classnode empty_array  new ifstatement
equalsnullexpr args
new emptystatement
body
// alternative ordered constructor
final mapexpression argmap   new mapexpression
final parameter orderedparams   new parameter
int index   0
for  propertynode pnode   list
orderedparams   new parameter pnode getfield   gettype    pnode getfield   getname
argmap addmapentryexpression new constantexpression pnode getname     new variableexpression pnode getname
final blockstatement orderedbody   new blockstatement
orderedbody addstatement new expressionstatement
new constructorcallexpression classnode this  argmap
orderedbody addstatement assignstatement constructorstyle  constantexpression false
cnode addconstructor new constructornode acc_public  orderedparams  classnode empty_array  orderedbody
private statement createconstructorstatement propertynode pnode
fieldnode fnode   pnode getfield
final classnode fieldtype   fnode gettype
final statement statement
if  fieldtype isarray      implementsinterface fieldtype  cloneable_type
statement   createconstructorstatementarrayorcloneable fnode
else if  fieldtype isderivedfrom date_type
statement   createconstructorstatementdate fnode
else if  fieldtype isderivedfrom collection_type     fieldtype isderivedfrom map_type
statement   createconstructorstatementcollection fnode
else if  isknownimmutable fieldtype
statement   createconstructorstatementdefault fnode
else if  fieldtype isresolved
throw new runtimeexception createerrormessage fnode getname    fieldtype getname
else
statement   createconstructorstatementguarded fnode
return statement
private boolean implementsinterface classnode fieldtype  classnode interfacetype
return arrays aslist fieldtype getinterfaces    contains interfacetype
private statement createconstructorstatementguarded fieldnode fnode
final fieldexpression fieldexpr   new fieldexpression fnode
expression initexpr   fnode getinitialvalueexpression
if  initexpr    null  initexpr   constantexpression null
expression unknown   findarg fnode getname
return new ifstatement
equalsnullexpr unknown
new ifstatement
equalsnullexpr initexpr
new emptystatement
assignstatement fieldexpr  checkunresolved fnode  initexpr
assignstatement fieldexpr  checkunresolved fnode  unknown
private expression checkunresolved fieldnode fnode  expression value
expression args   new tupleexpression new constantexpression fnode getname     value
return new staticmethodcallexpression self_type     args
private statement createconstructorstatementcollection fieldnode fnode
final fieldexpression fieldexpr   new fieldexpression fnode
expression initexpr   fnode getinitialvalueexpression
if  initexpr    null  initexpr   constantexpression null
expression collection   findarg fnode getname
return new ifstatement
equalsnullexpr collection
new ifstatement
equalsnullexpr initexpr
new emptystatement
assignstatement fieldexpr  clonecollectionexpr initexpr
assignstatement fieldexpr  clonecollectionexpr collection
private boolean isknownimmutable classnode fieldtype
if   fieldtype isresolved    return false
class typeclass   fieldtype gettypeclass
return typeclass isenum
typeclass isprimitive
inimmutablelist typeclass
private static boolean inimmutablelist class typeclass
return arrays aslist immutablelist  contains typeclass
private statement createconstructorstatementdefault fieldnode fnode
final fieldexpression fieldexpr   new fieldexpression fnode
expression initexpr   fnode getinitialvalueexpression
if  initexpr    null  initexpr   constantexpression null
expression value   findarg fnode getname
return new ifstatement
equalsnullexpr value
new ifstatement
equalsnullexpr initexpr
new emptystatement
assignstatement fieldexpr  initexpr
assignstatement fieldexpr  value
private statement createconstructorstatementarrayorcloneable fieldnode fnode
final fieldexpression fieldexpr   new fieldexpression fnode
expression initexpr   fnode getinitialvalueexpression
if  initexpr    null  initexpr   constantexpression null
final expression array   findarg fnode getname
return new ifstatement
equalsnullexpr array
new ifstatement
equalsnullexpr initexpr
assignstatement fieldexpr  constantexpression null
assignstatement fieldexpr  clonearrayorcloneableexpr initexpr
assignstatement fieldexpr  clonearrayorcloneableexpr array
private statement createconstructorstatementdate fieldnode fnode
final fieldexpression fieldexpr   new fieldexpression fnode
expression initexpr   fnode getinitialvalueexpression
if  initexpr    null  initexpr   constantexpression null
final expression date   findarg fnode getname
return new ifstatement
equalsnullexpr date
new ifstatement
equalsnullexpr initexpr
assignstatement fieldexpr  constantexpression null
assignstatement fieldexpr  clonedateexpr initexpr
assignstatement fieldexpr  clonedateexpr date
private expression clonedateexpr expression origdate
return new constructorcallexpression date_type
new methodcallexpression origdate     methodcallexpression no_arguments
private statement assignstatement expression fieldexpr  expression value
return new expressionstatement assignexpr fieldexpr  value
private expression assignexpr expression fieldexpr  expression value
return new binaryexpression fieldexpr  assign  value
private booleanexpression equalsnullexpr expression argexpr
return new booleanexpression new binaryexpression argexpr  compare_equal  constantexpression null
private booleanexpression iszeroexpr expression expr
return new booleanexpression new binaryexpression expr  compare_equal  new constantexpression integer valueof 0
private booleanexpression notequalsexpr propertynode pnode  expression other
final expression fieldexpr   new fieldexpression pnode getfield
final expression otherexpr   new propertyexpression other  pnode getfield   getname
return new booleanexpression new binaryexpression fieldexpr  compare_not_equal  otherexpr
private booleanexpression identicalexpr expression self  expression other
return new booleanexpression new binaryexpression self  compare_identical  other
private expression findarg string fname
return new propertyexpression new variableexpression     fname
private void adjustpropertyforimmutability propertynode pnode  list<propertynode> newnodes
final fieldnode fnode   pnode getfield
fnode setmodifiers  pnode getmodifiers      ~acc_public     acc_final   acc_private
adjustpropertynode pnode  creategetterbody fnode
newnodes add pnode
private void adjustpropertynode propertynode pnode  statement getterbody
pnode setsetterblock null
pnode setgetterblock getterbody
private statement creategetterbody fieldnode fnode
blockstatement body   new blockstatement
final classnode fieldtype   fnode gettype
final statement statement
if  fieldtype isarray      implementsinterface fieldtype  cloneable_type
statement   creategetterbodyarrayorcloneable fnode
else if  fieldtype isderivedfrom date_type
statement   creategetterbodydate fnode
else
statement   creategetterbodydefault fnode
body addstatement statement
return body
private statement creategetterbodydefault fieldnode fnode
final expression fieldexpr   new fieldexpression fnode
return new expressionstatement fieldexpr
private static string createerrormessage string fieldname  string typename  string mode
return     fieldname
typename       mode       my_type_name
private statement creategetterbodyarrayorcloneable fieldnode fnode
final expression fieldexpr   new fieldexpression fnode
final expression expression   clonearrayorcloneableexpr fieldexpr
return safeexpression fieldexpr  expression
private expression clonearrayorcloneableexpr expression fieldexpr
return new methodcallexpression fieldexpr     methodcallexpression no_arguments
private expression clonecollectionexpr expression fieldexpr
return new staticmethodcallexpression dgm_type     fieldexpr
private statement creategetterbodydate fieldnode fnode
final expression fieldexpr   new fieldexpression fnode
final expression expression   clonedateexpr fieldexpr
return safeexpression fieldexpr  expression
private statement safeexpression expression fieldexpr  expression expression
return new ifstatement
equalsnullexpr fieldexpr
new expressionstatement fieldexpr
new expressionstatement expression
public static object checkimmutable string fieldname  object field
if  field    null    field instanceof enum    inimmutablelist field getclass     return field
if  field instanceof collection  return defaultgroovymethods asimmutable  collection  field
if  field getclass   getannotation immutable class     null  return field
final string typename   field getclass   getname
throw new runtimeexception createerrormessage fieldname  typename