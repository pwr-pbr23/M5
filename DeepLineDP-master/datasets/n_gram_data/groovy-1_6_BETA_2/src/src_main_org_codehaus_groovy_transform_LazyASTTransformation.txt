/*
* copyright 2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy transform
import org codehaus groovy ast
import org codehaus groovy ast expr
import org codehaus groovy ast stmt
import org codehaus groovy control compilephase
import org codehaus groovy control sourceunit
import org codehaus groovy syntax token
import org codehaus groovy transform asttransformation
import org codehaus groovy transform groovyasttransformation
import org objectweb asm opcodes
import java lang ref softreference
/**
* handles generation of code for the @lazy annotation
*
* @author alex tkachman
*/
@groovyasttransformation phase  compilephase canonicalization
public class lazyasttransformation implements asttransformation  opcodes
final static classnode soft_ref   classhelper make softreference class
public void visit astnode nodes  sourceunit source
if    nodes instanceof annotationnode       nodes instanceof annotatednode
throw new runtimeexception
annotatednode parent    annotatednode  nodes
annotationnode node    annotationnode  nodes
if  parent instanceof fieldnode
fieldnode fieldnode    fieldnode  parent
final expression member   node getmember
final expression init   getinitexpr fieldnode
fieldnode rename     fieldnode getname
fieldnode setmodifiers acc_private    fieldnode getmodifiers      ~ acc_public acc_protected
if member instanceof constantexpression      constantexpression member  getvalue   equals true
createsoft fieldnode  init
else
create fieldnode  init
private void create fieldnode fieldnode  final expression initexpr
blockstatement body   new blockstatement
final fieldexpression fieldexpr   new fieldexpression fieldnode
if   fieldnode getmodifiers     acc_volatile     0
body addstatement new ifstatement
new booleanexpression new binaryexpression fieldexpr  token newsymbol    1  1   constantexpression null
new expressionstatement fieldexpr
new expressionstatement new binaryexpression fieldexpr  token newsymbol    1  1   initexpr
else
body addstatement new ifstatement
new booleanexpression new binaryexpression fieldexpr  token newsymbol    1  1   constantexpression null
new returnstatement fieldexpr
new synchronizedstatement
variableexpression this_expression
new ifstatement
new booleanexpression new binaryexpression fieldexpr  token newsymbol    1  1   constantexpression null
new returnstatement fieldexpr
new returnstatement new binaryexpression fieldexpr token newsymbol    1  1   initexpr
final string name       fieldnode getname   substring 1  2  touppercase     fieldnode getname   substring 2
fieldnode getdeclaringclass   addmethod name  acc_public  fieldnode gettype    parameter empty_array  classnode empty_array  body
private void createsoft fieldnode fieldnode  expression initexpr
classnode type   fieldnode gettype
fieldnode settype soft_ref
createsoftgetter fieldnode  initexpr  type
createsoftsetter fieldnode  type
private void createsoftgetter fieldnode fieldnode  expression initexpr  classnode type
blockstatement body   new blockstatement
final fieldexpression fieldexpr   new fieldexpression fieldnode
final variableexpression resexpr   new variableexpression    type
final methodcallexpression callexpression   new methodcallexpression new fieldexpression fieldnode      new argumentlistexpression
callexpression setsafe true
body addstatement new expressionstatement new declarationexpression resexpr  token newsymbol    1  1   callexpression
blockstatement elseblock   new blockstatement
elseblock addstatement new expressionstatement new binaryexpression resexpr  token newsymbol    1  1   initexpr
elseblock addstatement new expressionstatement new binaryexpression fieldexpr  token newsymbol    1  1   new constructorcallexpression soft_ref  resexpr
elseblock addstatement new expressionstatement resexpr
final ifstatement mainif   new ifstatement
new booleanexpression new binaryexpression resexpr  token newsymbol     1   1   constantexpression null
new expressionstatement resexpr
elseblock
if   fieldnode getmodifiers     acc_volatile     0
body addstatement mainif
else
body addstatement new ifstatement
new booleanexpression new binaryexpression resexpr  token newsymbol    1  1   constantexpression null
new expressionstatement resexpr
new synchronizedstatement
variableexpression this_expression
mainif
final string name       fieldnode getname   substring 1  2  touppercase     fieldnode getname   substring 2
fieldnode getdeclaringclass   addmethod name  acc_public  type  parameter empty_array  classnode empty_array  body
private void createsoftsetter fieldnode fieldnode  classnode type
blockstatement body   new blockstatement
final fieldexpression fieldexpr   new fieldexpression fieldnode
final string name       fieldnode getname   substring 1  2  touppercase     fieldnode getname   substring 2
final parameter parameter   new parameter type
final variableexpression paramexpr   new variableexpression parameter
body addstatement new ifstatement
new booleanexpression new binaryexpression paramexpr  token newsymbol    1  1   constantexpression null
new expressionstatement new binaryexpression fieldexpr  token newsymbol    1  1   new constructorcallexpression soft_ref  paramexpr
new expressionstatement new binaryexpression fieldexpr  token newsymbol    1  1   constantexpression null
fieldnode getdeclaringclass   addmethod name  acc_public  classhelper void_type  new parameter  parameter   classnode empty_array  body
private expression getinitexpr fieldnode fieldnode
expression initexpr   fieldnode getinitialvalueexpression
fieldnode setinitialvalueexpression null
if  initexpr    null
initexpr   new constructorcallexpression fieldnode gettype    new argumentlistexpression
return initexpr