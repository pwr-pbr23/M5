/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang closure
import groovy lang groovyruntimeexception
import groovy lang groovyshell
import junit framework testcase
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime scriptbytecodeadapter
import org codehaus groovy runtime typehandling defaulttypetransformation
import java lang reflect method
import java lang reflect modifier
import java util logging logger
/**
* a default junit testcase in groovy. this provides a number of helper methods
* plus avoids the junit restriction of requiring all test* methods to be void
* return type.
*
* @author <a href="mailto:bob@werken.com">bob mcwhirter</a>
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author dierk koenig (the notyetimplemented feature, changes to shouldfail)
* @version $revision$
*/
public class groovytestcase extends testcase
protected static logger log   logger getlogger groovytestcase class getname
private static int counter
private boolean useagiledoxnaming   false
public groovytestcase
/**
* overload the getname() method to make the test cases look more like agiledox
* (thanks to joe walnes for this tip!)
*/
public string getname
if  useagiledoxnaming
return super getname   substring 4  replaceall       tolowercase
else
return super getname
public string getmethodname
return super getname
/**
* asserts that the arrays are equivalent and contain the same values
*
* @param expected
* @param value
*/
protected void assertarrayequals object expected  object value
string message
invokerhelper tostring expected        invokerhelper tostring value
assertnotnull message      expected
assertnotnull message      value
assertequals message  expected length  value length
for  int i   0  size   expected length  i < size  i
assertequals     i       message  expected  value
/**
* asserts that the array of characters has a given length
*
* @param length expected length
* @param array the array
*/
protected void assertlength int length  char array
assertequals length  array length
/**
* asserts that the array of ints has a given length
*
* @param length expected length
* @param array the array
*/
protected void assertlength int length  int array
assertequals length  array length
/**
* asserts that the array of objects has a given length
*
* @param length expected length
* @param array the array
*/
protected void assertlength int length  object array
assertequals length  array length
/**
* asserts that the array of characters contains a given char
*
* @param expected expected character to be found
* @param array the array
*/
protected void assertcontains char expected  char array
for  int i   0  i < array length    i
if  array    expected
return
stringbuffer message   new stringbuffer
message append expected  append
for  int i   0  i < array length    i
message append    append array  append
if  i <  array length   1
message append
message append
fail message tostring
/**
* asserts that the array of ints contains a given int
*
* @param expected expected int
* @param array the array
*/
protected void assertcontains int expected  int array
for  int i   0  i < array length    i
if  array    expected
return
stringbuffer message   new stringbuffer
message append expected  append
for  int i   0  i < array length    i
message append    append array  append
if  i <  array length   1
message append
message append
fail message tostring
/**
* asserts that the value of tostring() on the given object matches the
* given text string
*
* @param value the object to be output to the console
* @param expected the expected string representation
*/
protected void asserttostring object value  string expected
object console   invokerhelper invokemethod value     null
assertequals     value  expected  console
/**
* asserts that the value of inspect() on the given object matches the
* given text string
*
* @param value the object to be output to the console
* @param expected the expected string representation
*/
protected void assertinspect object value  string expected
object console   invokerhelper invokemethod value     null
assertequals     value  expected  console
/**
* asserts that the script runs without any exceptions
*
* @param script the script that should pass without any exception thrown
*/
protected void assertscript final string script  throws exception
groovyshell shell   new groovyshell
shell evaluate script  gettestclassname
protected string gettestclassname
return     getmethodname      counter
/**
* asserts that the given code closure fails when it is evaluated
*
* @param code
* @return the message of the thrown throwable
*/
protected string shouldfail closure code
boolean failed   false
string result   null
try
code call
catch  groovyruntimeexception gre
failed   true
result   scriptbytecodeadapter unwrap gre  getmessage
catch  throwable e
failed   true
result   e getmessage
asserttrue     code      failed
return result
/**
* asserts that the given code closure fails when it is evaluated
* and that a particular exception is thrown.
*
* @param clazz the class of the expected exception
* @param code the closure that should fail
* @return the message of the expected throwable
*/
protected string shouldfail class clazz  closure code
throwable th   null
try
code call
catch  groovyruntimeexception gre
th   scriptbytecodeadapter unwrap gre
catch  throwable e
th   e
if  th  null
fail     code       clazz getname
else if    clazz isinstance th
fail     code       clazz getname         th
return th getmessage
protected string shouldfailwithcause class clazz  closure code
throwable th   null
try
code call
catch  groovyruntimeexception gre
th   gre
while  th getcause    null    th getcause    gre      if wrapped  find the root cause
th th getcause
if  th  gre     th instanceof groovyruntimeexception
gre    groovyruntimeexception  th
catch  throwable e
th   e
if  th  null
fail     code       clazz getname
else if    clazz isinstance th
fail     code       clazz getname         th
return th getmessage
/**
*  returns a copy of a string in which all eols are \n.
*/
protected string fixeols  string value
return value replaceall
/**
* runs the calling junit test again and fails only if it unexpectedly runs.<br/>
* this is helpful for tests that don't currently work but should work one day,
* when the tested functionality has been implemented.<br/>
* the right way to use it is:
* <pre>
* public void testxxx() {
*   if (groovytestcase.notyetimplemented(this)) return;
*   ... the real (now failing) unit test
* }
* </pre>
* idea copied from htmlunit (many thanks to marc guillemot).
* future versions maybe available in the junit distro.
* the purpose of providing a 'static' version is such that you can use the
* feature even if not subclassing groovytestcase.
* @return <false> when not itself already in the call stack
*/
public static boolean notyetimplemented testcase caller
if  notyetimplementedflag get      null
return false
notyetimplementedflag set boolean true
final method testmethod   findrunningjunittestmethod caller getclass
try
log info     testmethod getname
testmethod invoke caller   object  new class
fail testmethod getname
catch  final exception e
log info testmethod getname
// method execution failed, it is really "not yet implemented"
finally
notyetimplementedflag set null
return true
/**
* convenience method for subclasses of groovytestcase, identical to
* <pre> groovytestcase.notyetimplemented(this); </pre>.
* @see #notyetimplemented(junit.framework.testcase)
* @return  <false> when not itself already in the call stack
*/
public boolean notyetimplemented
return notyetimplemented this
/**
* from junit. finds from the call stack the active running junit test case
* @return the test case method
* @throws runtimeexception if no method could be found.
*/
private static method findrunningjunittestmethod class caller
final class args   new class
// search the inial junit test
final throwable t   new exception
for  int i t getstacktrace   length 1  i> 0    i
final stacktraceelement element   t getstacktrace
if  element getclassname   equals caller getname
try
final method m   caller getmethod element getmethodname    args
if  ispublictestmethod m
return m
catch  final exception e
// can't access, ignore it
throw new runtimeexception
/**
* from junit. test if the method is a junit test.
* @param method the method
* @return <code>true</code> if this is a junit test.
*/
private static boolean ispublictestmethod final method method
final string name   method getname
final class parameters   method getparametertypes
final class returntype   method getreturntype
return parameters length    0    name startswith
returntype equals void type
modifier ispublic method getmodifiers
public static void assertequals string message  object expected  object actual
if  expected    null    actual    null
return
if  expected    null    defaulttypetransformation compareequal expected  actual
return
failnotequals message  expected  actual
public static void assertequals object expected  object actual
assertequals null  expected  actual
public static void assertequals string expected  string actual
assertequals null  expected  actual
private static final threadlocal notyetimplementedflag   new threadlocal