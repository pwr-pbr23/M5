/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ant
import groovy lang groovyclassloader
import org apache commons cli commandline
import org apache commons cli options
import org apache commons cli posixparser
import org apache tools ant antclassloader
import org apache tools ant buildexception
import org apache tools ant directoryscanner
import org apache tools ant project
import org apache tools ant taskdefs execute
import org apache tools ant taskdefs javac
import org apache tools ant taskdefs matchingtask
import org apache tools ant types path
import org apache tools ant types reference
import org apache tools ant util globpatternmapper
import org apache tools ant util sourcefilescanner
import org codehaus groovy control compilationunit
import org codehaus groovy control compilerconfiguration
import org codehaus groovy tools errorreporter
import org codehaus groovy tools filesystemcompiler
import org codehaus groovy tools javac javaawarecompilationunit
import java io
import java nio charset charset
import java util
/**
* compiles groovy source files. this task can take the following arguments:
* <ul>
* <li>srcdir</li>
* <li>destdir</li>
* <li>classpath</li>
* <li>encoding</li>
* <li>verbose</li>
* <li>failonerror</li>
* <li>includeantruntime</li>
* <li>includejavaruntime</li>
* <li>memoryinitialsize</li>
* <li>memorymaximumsize</li>
* <li>fork</li>
* <li>stacktrace</li>
* </ul>
* of these arguments, the <b>srcdir</b> and <b>destdir</b> are required.
* <p/>
* <p>when this task executes, it will recursively scan srcdir and destdir looking for groovy source files
* to compile. this task makes its compile decision based on timestamp.</p>
* <p/>
* <p>based heavily on the javac implementation in ant.</p>
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author hein meling
* @author <a href="mailto:russel.winder@concertant.com">russel winder</a>
* @author danno ferrin
* @version $revision$
*/
public class groovyc extends matchingtask
private final logginghelper log   new logginghelper this
private path src
private file destdir
private path compileclasspath
private path compilesourcepath
private string encoding
private boolean stacktrace   false
private boolean verbose   false
private boolean includeantruntime   true
private boolean includejavaruntime   false
private boolean fork   false
private file forkjdk
private string memoryinitialsize
private string memorymaximumsize
protected boolean failonerror   true
protected boolean listfiles   false
protected file compilelist   new file
private string updatedproperty
private string errorproperty
private boolean tasksuccess   true     assume the best
private boolean includedestclasses   true
protected compilerconfiguration configuration
private javac javac
private boolean jointcompilation
private list<file> temporaryfiles   new arraylist 2
/**
* adds a path for source compilation.
*
* @return a nested src element.
*/
public path createsrc
if  src    null
src   new path getproject
}
return src createpath
}
/**
* recreate src.
*
* @return a nested src element.
*/
protected path recreatesrc
src   null
return createsrc
}
/**
* set the source directories to find the source java files.
*
* @param srcdir the source directories as a path
*/
public void setsrcdir path srcdir
if  src    null
src   srcdir
else
src append srcdir
}
}
/**
* gets the source dirs to find the source java files.
*
* @return the source directorys as a path
*/
public path getsrcdir
return src
}
/**
* set the destination directory into which the java source
* files should be compiled.
*
* @param destdir the destination director
*/
public void setdestdir file destdir
this destdir   destdir
}
/**
* gets the destination directory into which the java source files
* should be compiled.
*
* @return the destination directory
*/
public file getdestdir
return destdir
}
/**
* set the sourcepath to be used for this compilation.
*
* @param sourcepath the source path
*/
public void setsourcepath path sourcepath
if  compilesourcepath    null
compilesourcepath   sourcepath
else
compilesourcepath append sourcepath
}
}
/**
* gets the sourcepath to be used for this compilation.
*
* @return the source path
*/
public path getsourcepath
return compilesourcepath
}
/**
* adds a path to sourcepath.
*
* @return a sourcepath to be configured
*/
public path createsourcepath
if  compilesourcepath    null
compilesourcepath   new path getproject
}
return compilesourcepath createpath
}
/**
* adds a reference to a source path defined elsewhere.
*
* @param r a reference to a source path
*/
public void setsourcepathref reference r
createsourcepath   setrefid r
}
/**
* set the classpath to be used for this compilation.
*
* @param classpath an ant path object containing the compilation classpath.
*/
public void setclasspath path classpath
if  compileclasspath    null
compileclasspath   classpath
else
compileclasspath append classpath
}
}
/**
* gets the classpath to be used for this compilation.
*
* @return the class path
*/
public path getclasspath
return compileclasspath
}
/**
* adds a path to the classpath.
*
* @return a class path to be configured
*/
public path createclasspath
if  compileclasspath    null
compileclasspath   new path getproject
}
return compileclasspath createpath
}
/**
* adds a reference to a classpath defined elsewhere.
*
* @param r a reference to a classpath
*/
public void setclasspathref reference r
createclasspath   setrefid r
}
/**
* if true, list the source files being handed off to the compiler.
*
* @param list if true list the source files
*/
public void setlistfiles boolean list
listfiles   list
}
/**
* get the listfiles flag.
*
* @return the listfiles flag
*/
public boolean getlistfiles
return listfiles
}
/**
* indicates whether the build will continue
* even if there are compilation errors; defaults to true.
*
* @param fail if true halt the build on failure
*/
public void setfailonerror boolean fail
failonerror   fail
}
/**
* @param proceed inverse of failonerror
*/
public void setproceed boolean proceed
failonerror    proceed
}
/**
* gets the failonerror flag.
*
* @return the failonerror flag
*/
public boolean getfailonerror
return failonerror
}
/**
* the initial size of the memory for the underlying vm
* if javac is run externally; ignored otherwise.
* defaults to the standard vm memory setting.
* (examples: 83886080, 81920k, or 80m)
*
* @param memoryinitialsize string to pass to vm
*/
public void setmemoryinitialsize string memoryinitialsize
this memoryinitialsize   memoryinitialsize
}
/**
* gets the memoryinitialsize flag.
*
* @return the memoryinitialsize flag
*/
public string getmemoryinitialsize
return memoryinitialsize
}
/**
* the maximum size of the memory for the underlying vm
* if javac is run externally; ignored otherwise.
* defaults to the standard vm memory setting.
* (examples: 83886080, 81920k, or 80m)
*
* @param memorymaximumsize string to pass to vm
*/
public void setmemorymaximumsize string memorymaximumsize
this memorymaximumsize   memorymaximumsize
}
/**
* gets the memorymaximumsize flag.
*
* @return the memorymaximumsize flag
*/
public string getmemorymaximumsize
return memorymaximumsize
}
/**
* sets the file encoding for generated files.
*
* @param encoding the file encoding to be used
*/
public void setencoding string encoding
this encoding   encoding
}
/**
* returns the encoding to be used when creating files.
*
* @return the file encoding to use
*/
public string getencoding
return encoding
}
/**
* enable verbose compiling which will display which files
* are being compiled
*/
public void setverbose boolean verbose
this verbose   verbose
}
/**
* gets the verbose flag.
*
* @return the verbose flag
*/
public boolean getverbose
return verbose
}
/**
* if true, includes ant's own classpath in the classpath.
*
* @param include if true, includes ant's own classpath in the classpath
*/
public void setincludeantruntime boolean include
includeantruntime   include
}
/**
* gets whether or not the ant classpath is to be included in the classpath.
*
* @return whether or not the ant classpath is to be included in the classpath
*/
public boolean getincludeantruntime
return includeantruntime
}
/**
* if true, includes the java runtime libraries in the classpath.
*
* @param include if true, includes the java runtime libraries in the classpath
*/
public void setincludejavaruntime boolean include
includejavaruntime   include
}
/**
* gets whether or not the java runtime should be included in this
* task's classpath.
*
* @return the includejavaruntime attribute
*/
public boolean getincludejavaruntime
return includejavaruntime
}
/**
* if true forks the groovy compiler.
*
* @param f "true|false|on|off|yes|no"
*/
public void setfork boolean f
fork   f
}
/**
* the jdk home to use when forked.
*
* @param home the java.home value to use, default is the current jdk's home
*/
public void setjavahome file home
forkjdk   home
}
/**
* the property to set on compliation success.
* this property will not be set if the compilation
* fails, or if there are no files to compile.
*
* @param updatedproperty the property name to use.
*/
public void setupdatedproperty string updatedproperty
this updatedproperty   updatedproperty
}
/**
* the property to set on compliation failure.
* this property will be set if the compilation
* fails.
*
* @param errorproperty the property name to use.
*/
public void seterrorproperty string errorproperty
this errorproperty   errorproperty
}
/**
* this property controls whether to include the
* destination classes directory in the classpath
* given to the compiler.
* the default value is "true".
*
* @param includedestclasses the value to use.
*/
public void setincludedestclasses boolean includedestclasses
this includedestclasses   includedestclasses
}
/**
* get the value of the includedestclasses property.
*
* @return the value.
*/
public boolean isincludedestclasses
return includedestclasses
}
/**
* get the result of the groovyc task (success or failure).
*
* @return true if compilation succeeded, or
*         was not neccessary, false if the compilation failed.
*/
public boolean gettasksuccess
return tasksuccess
}
/*
public void setjointcompilationoptions(string options) {
string[] args = stringhelper.tokenizeunquoted(options);
evalcompilerflags(args);
}
*/
/**
* add the configured nested javac task if present to initiate joint compilation.
*/
public void addconfiguredjavac final javac javac
this javac   javac
jointcompilation   true
}
/**
* enable compiler to report stack trace information if a problem occurs
* during compilation.
*/
public void setstacktrace boolean stacktrace
this stacktrace   stacktrace
}
/**
* executes the task.
*
* @throws buildexception if an error occurs
*/
public void execute   throws buildexception
checkparameters
resetfilelists
if  javac    null  jointcompilation   true
// scan source directories and dest directory to build up
// compile lists
string list   src list
for  int i   0  i < list length  i
file file   getproject   resolvefile list
if   file exists
throw new buildexception       getlocation
}
directoryscanner ds   this getdirectoryscanner file
string files   ds getincludedfiles
scandir file  destdir    null ? destdir   file  files
}
compile
if  updatedproperty    null
tasksuccess
compilelist length    0
getproject   setnewproperty updatedproperty
}
}
/**
* clear the list of files to be compiled and copied..
*/
protected void resetfilelists
compilelist   new file
}
/**
* scans the directory looking for source files to be compiled.
* the results are returned in the class variable compilelist
*
* @param srcdir  the source directory
* @param destdir the destination directory
* @param files   an array of filenames
*/
protected void scandir file srcdir  file destdir  string files
globpatternmapper m   new globpatternmapper
m setfrom
m setto
sourcefilescanner sfs   new sourcefilescanner this
file newfiles   sfs restrictasfiles files  srcdir  destdir  m
addtocompilelist newfiles
if  jointcompilation
m setfrom
m setto
newfiles   sfs restrictasfiles files  srcdir  destdir  m
addtocompilelist newfiles
}
}
protected void addtocompilelist file newfiles
if  newfiles length > 0
file newcompilelist   new file
system arraycopy compilelist  0  newcompilelist  0  compilelist length
system arraycopy newfiles  0  newcompilelist  compilelist length  newfiles length
compilelist   newcompilelist
}
}
/**
* gets the list of files to be compiled.
*
* @return the list of files as an array
*/
public file getfilelist
return compilelist
}
protected void checkparameters   throws buildexception
if  src    null
throw new buildexception    getlocation
}
if  src size      0
throw new buildexception    getlocation
}
if  destdir    null     destdir isdirectory
throw new buildexception  "
destdir
does not exist or is not a directory"
getlocation
}
if  encoding    null     charset issupported encoding
throw new buildexception
}
}
protected void compile
if  compilelist length > 0
log     compilelist length
compilelist length    1 ?
destdir    null ?     destdir
if  listfiles
for  int i   0  i < compilelist length    i
string filename   compilelist getabsolutepath
log filename
}
}
path classpath   getclasspath      null ? getclasspath     new path getproject
// extract joint options, some get pushed up...
list jointoptions   new arraylist
if  jointcompilation
for  iterator i   javac getruntimeconfigurablewrapper   getattributemap   entryset   iterator    i hasnext
final map entry e    map entry  i next
final string key   e getkey   tostring
final string value   e getvalue   tostring
if  key indexof        1
string level
if  javac getdebuglevel      null
level       javac getdebuglevel
}
jointoptions add     level
else if  key indexof        1
// ignore, taken care of in debug
else if    key indexof        1
key indexof        1
key indexof        1
equalsignorecase value       equalsignorecase value       equalsignorecase
jointoptions add     key
else if  key indexof        1
classpath add javac getclasspath
else if   key indexof        1
key indexof        1
key indexof        1
key indexof        1
key indexof        1
key indexof        1
key indexof        1
jointoptions add     key       value
else
log     key      project msg_warn
}
// includes? excludes?
}
}
string separator   system getproperty
arraylist commandlinelist   new arraylist
if  fork
string javahome
if  forkjdk    null
javahome   forkjdk getpath
else
javahome   system getproperty
}
if  includeantruntime
classpath addexisting  new path getproject     concatsystemclasspath
}
if  includejavaruntime
classpath addjavaruntime
}
commandlinelist add javahome   separator       separator
commandlinelist add
commandlinelist add classpath tostring
if   memoryinitialsize    null      memoryinitialsize equals
commandlinelist add     memoryinitialsize
}
if   memorymaximumsize    null      memorymaximumsize equals
commandlinelist add     memorymaximumsize
}
commandlinelist add
}
commandlinelist add
commandlinelist add classpath tostring
if  jointcompilation
commandlinelist add
commandlinelist addall jointoptions
}
commandlinelist add
commandlinelist add destdir getpath
if  encoding    null
commandlinelist add
commandlinelist add encoding
}
if  stacktrace
commandlinelist add
}
// check to see if an external file is needed
int count   0
if  fork
for  int i   0  i < compilelist length  i
count    compilelist getpath   length
}
for  iterator iter   commandlinelist iterator    iter hasnext
count    iter next   tostring   length
}
count    compilelist length
count    commandlinelist size
}
// 32767 is the command line length limit on windows
if  fork     count > 32767
try
file tempfile   file createtempfile
temporaryfiles add tempfile
printwriter pw   new printwriter new filewriter tempfile
for  int i   0  i < compilelist length  i
pw println compilelist getpath
}
pw close
commandlinelist add     tempfile getpath
catch  ioexception e
log    e  project msg_err
}
else
for  int i   0  i < compilelist length  i
commandlinelist add compilelist getpath
}
}
final string commandline   new string
for  int i   0  i < commandline length    i
commandline    string  commandlinelist get i
}
if  fork
// use the main method in filesystemcompiler
final execute executor   new execute       new logstreamhandler   attributes   project msg_info   project msg_warn
executor setantrun getproject
executor setworkingdirectory getproject   getbasedir
executor setcommandline commandline
try
executor execute
}
catch  final ioexception ioe
throw new buildexception    ioe
}
final int returncode   executor getexitvalue
if  returncode    0
if  failonerror
throw new buildexception     returncode
else
log     returncode  project msg_err
}
}
else
// hand crank it so we can add our own compiler configuration
try
options options   filesystemcompiler createcompilationoptions
posixparser cliparser   new posixparser
commandline cli
cli   cliparser parse options  commandline
configuration   filesystemcompiler generatecompilerconfigurationfromoptions cli
//
// load the file name list
string filenames   filesystemcompiler generatefilenamesfromoptions cli
boolean filenameerrors   filenames    null
filenameerrors   filenameerrors     filesystemcompiler validatefiles filenames
if   filenameerrors
filesystemcompiler docompilation configuration  makecompileunit    filenames
}
catch  exception re
throwable t   re
if   re getclass      runtimeexception class      re getcause      null
// unwrap to the real exception
t   re getcause
}
stringwriter writer   new stringwriter
new errorreporter t  false  write new printwriter writer
string message   writer tostring
if  failonerror
log message  project msg_info
throw new buildexception    t  getlocation
else
log message  project msg_err
}
}
}
iterator<file> files   temporaryfiles iterator
while  files hasnext
filesystemcompiler deleterecursive files next
files remove
}
}
}
protected compilationunit makecompileunit
if  configuration getjointcompilationoptions      null
if   configuration getjointcompilationoptions   containskey
try
file tempstubdir   filesystemcompiler createtempdir
temporaryfiles add tempstubdir
configuration getjointcompilationoptions   put    tempstubdir
catch  ioexception ioe
throw new buildexception ioe
}
}
return new javaawarecompilationunit configuration  buildclassloaderfor
else
return new compilationunit configuration  null  buildclassloaderfor
}
}
protected groovyclassloader buildclassloaderfor
classloader parent   this getclass   getclassloader
if  parent instanceof antclassloader
antclassloader antloader    antclassloader  parent
string pathelm   antloader getclasspath   split file pathseparator
list classpath   configuration getclasspath
/*
* iterate over the classpath provided to groovyc, and add any missing path
* entries to the antclassloader.  this is a workaround, since for some reason
* 'directory' classpath entries were not added to the antclassloader' classpath.
*/
for  iterator iter   classpath iterator    iter hasnext
string cpentry    string  iter next
boolean found   false
for  int i   0  i < pathelm length  i
if  cpentry equals pathelm
found   true
break
}
}
/*
* fix for groovy-2284
* seems like antclassloader doesn't check if the file
* may not exist in the classpath yet
*/
if   found    new file cpentry  exists
antloader addpathelement cpentry
}
}
return new groovyclassloader parent  configuration
}
}