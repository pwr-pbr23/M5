/*
* copyright 2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy beans
import org codehaus groovy ast
import org codehaus groovy ast expr
import org codehaus groovy ast stmt blockstatement
import org codehaus groovy ast stmt expressionstatement
import org codehaus groovy ast stmt returnstatement
import org codehaus groovy ast stmt statement
import org codehaus groovy control compilephase
import org codehaus groovy control sourceunit
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy runtime metaclasshelper
import org codehaus groovy syntax syntaxexception
import org codehaus groovy syntax token
import org codehaus groovy syntax types
import org codehaus groovy transform groovyasttransformation
import java beans propertyvetoexception
import java beans vetoablechangelistener
import java beans vetoablechangesupport
import java util collection
/**
* handles generation of code for the @vetoable annotation, and @bindable
* if also present.
* <p/>
* generally, it adds (if needed) a vetoablechangesupport field and
* the needed add/removevetoablechangelistener methods to support the
* listeners.
* <p/>
* it also generates the setter and wires the setter through the
* vetoablechangesupport.
* <p/>
* if a {@link bindable} annotaton is detected it also adds support similar
* to what {@link bindableasttransformation} would do.
*
* @author danno ferrin (shemnon)
*/
@groovyasttransformation phase   compilephase canonicalization
public class vetoableasttransformation extends bindableasttransformation
protected static classnode constrainedclassnode   new classnode vetoable class
protected classnode vcsclassnode   new classnode vetoablechangesupport class
/**
* field use to remember a discovered vcs field
*/
protected fieldnode vcsfield
/**
* convienience method to see if an annotatied node is @vetoable.
*
* @param node the node to check
* @return true if the node is constrained
*/
public static boolean hasvetoableannotation annotatednode node
for  annotationnode annotation    collection<annotationnode>  node getannotations
if  constrainedclassnode equals annotation getclassnode
return true
return false
/**
* handles the bulk of the processing, mostly delegating to other methods.
*
* @param nodes   the ast nodes
* @param source  the source unit for the nodes
*/
public void visit astnode nodes  sourceunit source
if    nodes instanceof annotationnode       nodes instanceof annotatednode
throw new runtimeexception
annotationnode node    annotationnode  nodes
if  nodes instanceof classnode
addlistenertoclass source  node   classnode  nodes
else
addlistenertoproperty source  node   annotatednode  nodes
private void addlistenertoproperty sourceunit source  annotationnode node  annotatednode parent
classnode declaringclass   parent getdeclaringclass
fieldnode field     fieldnode  parent
string fieldname   field getname
for  propertynode propertynode    collection<propertynode>  declaringclass getproperties
boolean bindable   bindableasttransformation hasbindableannotation parent
bindableasttransformation hasbindableannotation parent getdeclaringclass
if  propertynode getname   equals fieldname
if  field isstatic
//noinspection throwableinstanceneverthrown
source geterrorcollector   adderrorandcontinue
new syntaxerrormessage new syntaxexception
node getlinenumber
node getcolumnnumber
source
else
createlistenersetter source  node  bindable  declaringclass   propertynode
return
//noinspection throwableinstanceneverthrown
source geterrorcollector   adderrorandcontinue
new syntaxerrormessage new syntaxexception
node getlinenumber
node getcolumnnumber
source
private void addlistenertoclass sourceunit source  annotationnode node  classnode classnode
boolean bindable   bindableasttransformation hasbindableannotation classnode
for  propertynode propertynode    collection<propertynode>  classnode getproperties
if   hasvetoableannotation propertynode getfield
propertynode getfield   isstatic
createlistenersetter source  node
bindable    bindableasttransformation hasbindableannotation propertynode getfield
classnode  propertynode
private void createlistenersetter sourceunit source  annotationnode node  boolean bindable  classnode declaringclass  propertynode propertynode
if  bindable    needspropertychangesupport declaringclass
addpropertychangesupport declaringclass
if  needsvetoablechangesupport declaringclass
addvetoablechangesupport declaringclass
string settername       metaclasshelper capitalize propertynode getname
if  declaringclass getmethods settername  isempty
expression fieldexpression   new fieldexpression propertynode getfield
blockstatement setterblock   new blockstatement
setterblock addstatement createconstrainedstatement propertynode  fieldexpression
if  bindable
setterblock addstatement createbindablestatement propertynode  fieldexpression
else
setterblock addstatement createsetstatement fieldexpression
// create method void <setter>(<type> fieldname)
createsettermethod declaringclass  propertynode  settername  setterblock
else
//noinspection throwableinstanceneverthrown
source geterrorcollector   adderrorandcontinue
new syntaxerrormessage new syntaxexception
node getlinenumber
node getcolumnnumber
source
/**
* creates a statement body silimar to:
* <code>vcsfield.firevetoablechange("field", field, field = value)</code>
*
* @param propertynode           the field node for the property
* @param fieldexpression a field expression for setting the property value
* @return the created statement
*/
protected statement createconstrainedstatement propertynode propertynode  expression fieldexpression
return new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
new argumentlistexpression
new expression
new constantexpression propertynode getname
fieldexpression
new variableexpression
/**
* creates a statement body similar to:
* <code>field = value</code>
* <p/>
* used when the field is not also @bindable
*
* @param fieldexpression a field expression for setting the property value
* @return the created statement
*/
protected statement createsetstatement expression fieldexpression
return new expressionstatement
new binaryexpression
fieldexpression
token newsymbol types equal  0  0
new variableexpression
/**
* snoops through the declaring class and all parents looking for a field
* of type vetoablechangesupport.  remembers the field and returns false
* if found otherwise returns true to indicate that such support should
* be added.
*
* @param declaringclass the class to search
* @return true if vetoable change support should be added
*/
protected boolean needsvetoablechangesupport classnode declaringclass
while  declaringclass    null
for  fieldnode field    collection<fieldnode>  declaringclass getfields
if  field gettype      null
continue
if  vcsclassnode equals field gettype
vcsfield   field
return false
//todo check add/remove conflicts
declaringclass   declaringclass getsuperclass
return true
/**
* creates a setter method with the given body.
* <p/>
* this differs from normal setters in that we need to add a declared
* exception java.beans.propertyvetoexception
*
* @param declaringclass the class to which we will add the setter
* @param propertynode          the field to back the setter
* @param settername     the name of the setter
* @param setterblock    the statement representing the setter block
*/
protected void createsettermethod classnode declaringclass  propertynode propertynode  string settername  statement setterblock
parameter setterparametertypes    new parameter propertynode gettype
classnode exceptions    new classnode propertyvetoexception class
methodnode setter
new methodnode settername  propertynode getmodifiers    classhelper void_type  setterparametertypes  exceptions  setterblock
setter setsynthetic true
// add it to the class
declaringclass addmethod setter
/**
* adds the necessary field and methods to support vetoable change support.
* <p/>
* adds a new field:
* <code>"protected final java.beans.vetoablechangesupport this$vetoablechangesupport = new java.beans.vetoablechangesupport(this)"</code>
* <p/>
* also adds support methods:
* <code>public void addvetoablechangelistener(java.beans.vetoablechangelistener)</code>
* <code>public void addvetoablechangelistener(string, java.beans.vetoablechangelistener)</code>
* <code>public void removevetoablechangelistener(java.beans.vetoablechangelistener)</code>
* <code>public void removevetoablechangelistener(string, java.beans.vetoablechangelistener)</code>
* <code>public java.beans.vetoablechangelistener[] getvetoablechangelisteners()</code>
*
* @param declaringclass the class to which we add the support field and methods
*/
protected void addvetoablechangesupport classnode declaringclass
classnode vcsclassnode   classhelper make vetoablechangesupport class
classnode vclclassnode   classhelper make vetoablechangelistener class
// add field:
// protected static vetoablechangesupport this$vetoablechangesupport = new java.beans.vetoablechangesupport(this)
vcsfield   declaringclass addfield
acc_final   acc_protected   acc_synthetic
vcsclassnode
new constructorcallexpression vcsclassnode
new argumentlistexpression new expression new variableexpression
// add method:
// void addvetoablechangelistener(listener) {
//     this$vetoablechangesupport.addvetoablechangelistner(listener)
//  }
declaringclass addmethod
new methodnode
acc_public   acc_synthetic
classhelper void_type
new parameter new parameter vclclassnode
classnode empty_array
new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
new argumentlistexpression
new expression new variableexpression
// add method:
// void addvetoablechangelistener(name, listener) {
//     this$vetoablechangesupport.addvetoablechangelistner(name, listener)
//  }
declaringclass addmethod
new methodnode
acc_public   acc_synthetic
classhelper void_type
new parameter new parameter classhelper string_type      new parameter vclclassnode
classnode empty_array
new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
new argumentlistexpression
new expression new variableexpression     new variableexpression
// add method:
// boolean removevetoablechangelistener(listener) {
//    return this$vetoablechangesupport.removevetoablechangelistener(listener);
// }
declaringclass addmethod
new methodnode
acc_public   acc_synthetic
classhelper void_type
new parameter new parameter vclclassnode
classnode empty_array
new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
new argumentlistexpression
new expression new variableexpression
// add method: void removevetoablechangelistener(name, listener)
declaringclass addmethod
new methodnode
acc_public   acc_synthetic
classhelper void_type
new parameter new parameter classhelper string_type      new parameter vclclassnode
classnode empty_array
new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
new argumentlistexpression
new expression new variableexpression     new variableexpression
// add method:
// vetoablechangesupport[] getvetoablechangelisteners() {
//   return this$vetoablechangesupport.getvetoablechangelisteners
// }
declaringclass addmethod
new methodnode
acc_public   acc_synthetic
vclclassnode makearray
parameter empty_array
classnode empty_array
new returnstatement
new expressionstatement
new methodcallexpression
new fieldexpression vcsfield
argumentlistexpression empty_arguments