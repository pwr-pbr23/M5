/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import org codehaus groovy ast
import org codehaus groovy ast expr
import org codehaus groovy ast stmt statement
import java util
/**
* visitor to resolve constants and method calls from static imports
*
* @author jochen theodorou
* @author paul king
*/
public class staticimportvisitor extends classcodeexpressiontransformer
private classnode currentclass
private methodnode currentmethod
private sourceunit source
private compilationunit compilationunit
private boolean stillresolving
private boolean inspecialconstructorcall
private boolean inclosure
private boolean inpropertyexpression
private expression foundconstant
private expression foundargs
public staticimportvisitor compilationunit cu
compilationunit   cu
public void visitclass classnode node  sourceunit source
this currentclass   node
this source   source
super visitclass node
protected void visitconstructorormethod methodnode node  boolean isconstructor
this currentmethod   node
super visitconstructorormethod node  isconstructor
this currentmethod   null
public expression transform expression exp
if  exp    null  return null
if  exp getclass      variableexpression class
return transformvariableexpression  variableexpression  exp
if  exp getclass      propertyexpression class
return transformpropertyexpression  propertyexpression  exp
if  exp getclass      methodcallexpression class
return transformmethodcallexpression  methodcallexpression  exp
if  exp getclass      closureexpression class
return transformclosureexpression  closureexpression  exp
if  exp getclass      constructorcallexpression class
return transformconstructorcallexpression  constructorcallexpression  exp
if  exp getclass      argumentlistexpression class
expression result   exp transformexpression this
if  inpropertyexpression
foundargs   result
return result
if  exp getclass      constantexpression class
expression result   exp transformexpression this
if  inpropertyexpression
foundconstant   result
return result
return exp transformexpression this
protected expression transformvariableexpression variableexpression ve
variable v   ve getaccessedvariable
if  v    null    v instanceof dynamicvariable
expression result   findstaticfieldimportfrommodule v getname
if  result    null
result setsourceposition ve
return result
if   inpropertyexpression    inspecialconstructorcall  addstaticvariableerror ve
return ve
protected expression transformmethodcallexpression methodcallexpression mce
expression args   transform mce getarguments
expression method   transform mce getmethod
expression object   transform mce getobjectexpression
boolean isexplicitthisorsuper   false
if  object instanceof variableexpression
variableexpression ve    variableexpression  object
isexplicitthisorsuper    mce isimplicitthis       ve getname   equals       ve getname   equals
if  isexplicitthisorsuper    currentmethod    null    currentmethod isstatic
adderror     ve getname         currentmethod getname        mce
return null
if  mce isimplicitthis      isexplicitthisorsuper
expression ret   findstaticmethodimportfrommodule method  args
if  ret    null
ret setsourceposition mce
return ret
if  method instanceof constantexpression
constantexpression ce    constantexpression  method
object value   ce getvalue
if  value instanceof string
string methodname    string  value
if  inspecialconstructorcall    currentclass haspossiblestaticmethod methodname  args
staticmethodcallexpression smce   new staticmethodcallexpression currentclass  methodname  args
smce setsourceposition mce
return smce
methodcallexpression result   new methodcallexpression object  method  args
result setsafe mce issafe
result setimplicitthis mce isimplicitthis
result setspreadsafe mce isspreadsafe
result setsourceposition mce
return result
protected expression transformconstructorcallexpression constructorcallexpression cce
inspecialconstructorcall   cce isspecialcall
expression ret   cce transformexpression this
inspecialconstructorcall   false
return ret
protected expression transformclosureexpression closureexpression ce
boolean oldinclosure   inclosure
inclosure   true
statement code   ce getcode
if  code    null  code visit this
inclosure   oldinclosure
return ce
protected expression transformpropertyexpression propertyexpression pe
boolean oldinpropertyexpression   inpropertyexpression
expression oldfoundargs   foundargs
expression oldfoundmethod   foundconstant
inpropertyexpression   true
foundargs   null
foundconstant   null
expression objectexpression   transform pe getobjectexpression
// check for static field access in a static method in the class containing the field
if  objectexpression instanceof classexpression    currentmethod    null    currentmethod isstatic
classexpression ce    classexpression  objectexpression
if  ce gettype   getname   equals currentclass getname
fieldnode field   currentclass getdeclaredfield pe getpropertyasstring
if  field    null    field isstatic
expression expression   new fieldexpression field
expression setsourceposition pe
return expression
// some this/super validation
boolean isexplicitthisorsuper   false
if  objectexpression instanceof variableexpression
variableexpression ve    variableexpression  objectexpression
isexplicitthisorsuper    pe isimplicitthis       ve getname   equals       ve getname   equals
if  isexplicitthisorsuper    currentmethod    null    currentmethod isstatic
adderror     ve getname         currentmethod getname        pe
return null
if  foundargs    null    foundconstant    null
expression result   findstaticmethodimportfrommodule foundconstant  foundargs
if  result    null
objectexpression   result
inpropertyexpression   oldinpropertyexpression
foundargs   oldfoundargs
foundconstant   oldfoundmethod
pe setobjectexpression objectexpression
if   inspecialconstructorcall  checkstaticscope pe
return pe
private void checkstaticscope propertyexpression pe
if  inclosure  return
for  expression it   pe  it    null  it     propertyexpression  it  getobjectexpression
if  it instanceof propertyexpression  continue
if  it instanceof variableexpression
addstaticvariableerror  variableexpression  it
return
private void addstaticvariableerror variableexpression ve
// closures are always dynamic
// propertiesexpressions will handle the error a bit different
if   inspecialconstructorcall     inclosure     ve isinstaticcontext     return
if  stillresolving  return
if  ve isthisexpression      ve issuperexpression    return
variable v   ve getaccessedvariable
if  v    null      v instanceof dynamicvariable     v isinstaticcontext    return
adderror     ve getname
ve
private expression findstaticfieldimportfrommodule string name
modulenode module   currentclass getmodule
if  module    null  return null
map aliases   module getstaticimportaliases
stillresolving   false
if  aliases containskey name
classnode node    classnode  aliases get name
map fields   module getstaticimportfields
string fieldname    string  fields get name
expression expression   findstaticfield node  fieldname
if  expression    null  return expression
map importedclasses   module getstaticimportclasses
for  object o   importedclasses keyset
string classname    string  o
classnode node    classnode  importedclasses get classname
expression expression   findstaticfield node  name
if  expression    null  return expression
return null
private expression findstaticfield classnode staticimporttype  string fieldname
if  staticimporttype isprimaryclassnode      staticimporttype isresolved
staticimporttype getfields       force init
fieldnode field   staticimporttype getfield fieldname
if  field    null    field isstatic
return new propertyexpression new classexpression staticimporttype   fieldname
else
stillresolving   true
return null
private expression findstaticmethodimportfrommodule expression method  expression args
modulenode module   currentclass getmodule
if  module    null      method instanceof constantexpression   return null
map aliases   module getstaticimportaliases
constantexpression ce    constantexpression  method
object value   ce getvalue
// skip non-strings, e.g. integer
if    value instanceof string   return null
final string name    string  value
if  aliases containskey name
classnode node    classnode  aliases get name
map fields   module getstaticimportfields
string fieldname    string  fields get name
expression expression   findstaticmethod node  fieldname  args
if  expression    null  return expression
map importpackages   module getstaticimportclasses
for  object o   importpackages keyset
string classname    string  o
classnode starimporttype    classnode  importpackages get classname
expression expression   findstaticmethod starimporttype  name  args
if  expression    null  return expression
return null
private expression findstaticmethod classnode staticimporttype  string methodname  expression args
if  staticimporttype isprimaryclassnode      staticimporttype isresolved
if  staticimporttype haspossiblestaticmethod methodname  args
return new staticmethodcallexpression staticimporttype  methodname  args
return null
protected sourceunit getsourceunit
return source