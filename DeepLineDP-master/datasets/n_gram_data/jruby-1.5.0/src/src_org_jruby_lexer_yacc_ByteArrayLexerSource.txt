package org jruby lexer yacc
import java io bytearrayinputstream
import java io ioexception
import java io inputstream
import java util list
import org jruby util bytelist
/**
*
* @author nicksieger
*/
public class bytearraylexersource extends lexersource
private cursor readcursor
private cursor maincursor  pushbackcursor
private final boolean capturesource
public bytearraylexersource string sourcename  byte in  list<string> list  int line
boolean extrapositioninformation
super sourcename  list  line  extrapositioninformation
this readcursor   new bytearraycursor in
this maincursor   readcursor
this pushbackcursor   new pushbackcursor maincursor  new bytelist 128
this capturesource   list    null
@override
@suppresswarnings
public boolean matchmarker bytelist marker  boolean indent  boolean withnewline  throws ioexception
int matchpos   0
if  indent
for  int c   readcursor at matchpos
c    rubyyacclexer eof    character iswhitespace c     c
c   readcursor at   matchpos
for  int i   0  i < marker length    i
if  readcursor at matchpos     marker get i
return false
matchpos
if  withnewline
int c   readcursor at matchpos
if  c
// skip
c   readcursor at matchpos
if  c
return false
for  int i   0  i < matchpos  i
readcursor read
return true
@override
public int read
return readcursor read
@override
public bytelist readuntil char marker  throws ioexception
return readuntil marker  true
private bytelist readuntil char marker  boolean nullifend  throws ioexception
bytelist result   new bytelist 128
int c
while   c   readcursor read       marker    c    rubyyacclexer eof
result append c
if  nullifend    c    rubyyacclexer eof
return null
return result
@override
public bytelist readlinebytes   throws ioexception
return readuntil    false
@override
public int skipuntil int marker  throws ioexception
int c
do
c   readcursor read
while  c    marker    c    rubyyacclexer eof
return c
@override
public void unread int c
if  c    rubyyacclexer eof
return
if  capturesource
uncapturefeature c
readcursor unread c
@override
public void unreadmany charsequence line
for  int i   line length     1  i >  0  i
unread line charat i
@override
public boolean peek int c  throws ioexception
return readcursor at 0     c
@override
public boolean lastwasbeginofline
int c   readcursor at  1
return c         c    rubyyacclexer eof
@override
public boolean wasbeginofline
final int c   readcursor at  2
return c          c    rubyyacclexer eof    c    readcursor at  1
@override
public string getcurrentline
int lineoffset   0
int c
while   c   readcursor at lineoffset   1           c    rubyyacclexer eof
lineoffset
string ptr   makepointer   lineoffset   1
stringbuilder linebuilder   new stringbuilder
for  c   readcursor at lineoffset   c         c    rubyyacclexer eof  c   readcursor at   lineoffset
linebuilder append  char  c
linebuilder append    append ptr
return linebuilder tostring
@override
public inputstream getremainingasstream
bytelist buf   new bytelist 128
int c
while   c   read       rubyyacclexer eof
buf append c
return new bytearrayinputstream buf getunsafebytes    0  buf length
private int forward int c
if  c    rubyyacclexer eof
offset
switch  c
case
line
break
case
if   c   read
unread c
c
break
if  capturesource
capturefeature c
return c
private void backward int c
offset
if  c
line
if  readcursor at  1
unread
interface cursor
int read
void unread int c
/**
* read the character at the offset given without moving the cursor
* @param offset relative to the current cursor position; -1 means previous character
* @return the character at that offset
*/
int at int offset
class bytearraycursor implements cursor
private final byte region
private int index
public bytearraycursor byte region
this region   region
this index   0
public int read
if  index >  region length
return forward rubyyacclexer eof
return forward region
public void unread int c
if  index > 0    region    c
index
backward c
else
readcursor   pushbackcursor
pushbackcursor unread c
public int at int offset
int location   index   offset
if  location >  region length    location < 0
return rubyyacclexer eof
return region
class pushbackcursor implements cursor
private final cursor parent
private final bytelist region
public pushbackcursor cursor prev  bytelist region
this parent   prev
this region   region
public int read
int index   region length     1
if  index < 0
readcursor   parent
return parent read
int c   region get index
region setrealsize index
return forward c
public void unread int c
region append c
backward c
public int at int offset
if  offset < 0
return parent at offset
else if  offset >  region length
return parent at offset   region length
else
return region get region length     offset   1