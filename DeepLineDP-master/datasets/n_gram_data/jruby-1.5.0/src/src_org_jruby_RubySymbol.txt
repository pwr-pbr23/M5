/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 joey gibson <joey@joeygibson.com>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2006 derek berner <derek.berner@state.nm.us>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
* copyright (c) 2007 william n dortch <bill.dortch@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby util stringsupport codelength
import static org jruby util stringsupport codepoint
import java util concurrent locks reentrantlock
import org jcodings encoding
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime blockcallback
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
/**
* represents a ruby symbol (e.g. :bar)
*/
@jrubyclass name
public class rubysymbol extends rubyobject
private final string symbol
private final int id
private final bytelist symbolbytes
/**
*
* @param runtime
* @param internedsymbol the string value of the new symbol. this <em>must</em>
*                       have been previously interned
*/
private rubysymbol ruby runtime  string internedsymbol  bytelist symbolbytes
super runtime  runtime getsymbol    false  false
// symbol string *must* be interned
//        assert internedsymbol == internedsymbol.intern() : internedsymbol + " is not interned";
int length   symbolbytes getbegin     symbolbytes getrealsize
for  int i   symbolbytes getbegin    i < length  i
if  symbolbytes getunsafebytes      0
throw runtime newsyntaxerror
}
}
this symbol   internedsymbol
this symbolbytes   symbolbytes
this id   runtime allocsymbolid
}
private rubysymbol ruby runtime  string internedsymbol
this runtime  internedsymbol  bytelist create internedsymbol
}
public static rubyclass createsymbolclass ruby runtime
rubyclass symbolclass   runtime defineclass    runtime getobject    objectallocator not_allocatable_allocator
runtime setsymbol symbolclass
rubyclass symbolmetaclass   symbolclass getmetaclass
symbolclass index   classindex symbol
symbolclass setreifiedclass rubysymbol class
symbolclass kindof   new rubymodule kindof
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubysymbol
}
symbolclass defineannotatedmethods rubysymbol class
symbolmetaclass undefinemethod
return symbolclass
}
@override
public int getnativetypeindex
return classindex symbol
}
/** rb_to_id
*
* @return a string representation of the symbol
*/
@override
public string asjavastring
return symbol
}
@override
public rubystring converttostring
ruby runtime   getruntime
return runtime is1_9   ? newshared runtime    super converttostring
}
@override
public string tostring
return symbol
}
final bytelist getbytes
return symbolbytes
}
/** short circuit for symbol key comparison
*
*/
@override
public final boolean eql irubyobject other
return other    this
}
@override
public boolean isimmediate
return true
}
@override
public rubyclass getsingletonclass
throw getruntime   newtypeerror
}
public static rubysymbol getsymbollong ruby runtime  long id
return runtime getsymboltable   lookup id
}
/* symbol class methods.
*
*/
public static rubysymbol newsymbol ruby runtime  string name
return runtime getsymboltable   getsymbol name
}
@deprecated
public rubyfixnum to_i
return to_i getruntime
}
@jrubymethod name      compat   compatversion ruby1_8
public rubyfixnum to_i threadcontext context
return to_i context getruntime
}
private final rubyfixnum to_i ruby runtime
return runtime newfixnum id
}
@deprecated
public rubyfixnum to_int
return to_int getruntime
}
@jrubymethod name      compat   compatversion ruby1_8
public rubyfixnum to_int threadcontext context
return to_int context getruntime
}
private final rubyfixnum to_int ruby runtime
if  runtime isverbose
runtime getwarnings   warn id symbol_as_integer
}
return to_i runtime
}
@deprecated
@override
public irubyobject inspect
return inspect getruntime
}
@jrubymethod name      compat   compatversion ruby1_8
public irubyobject inspect threadcontext context
return inspect context getruntime
}
private final irubyobject inspect ruby runtime
final bytelist bytes
if  issymbolname symbol
bytes   symbolbytes
else
bytes     rubystring rubystring newstring runtime  symbolbytes  dump    getbytelist
}
bytelist result   new bytelist bytes getrealsize     1
result append  byte
result append bytes
return rubystring newstring runtime  result
}
@deprecated
public irubyobject inspect19
return inspect19 getruntime
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject inspect19 threadcontext context
return inspect19 context getruntime
}
private final irubyobject inspect19 ruby runtime
bytelist result   new bytelist symbolbytes getrealsize     1
result setencoding symbolbytes getencoding
result append  byte
result append symbolbytes
rubystring str   rubystring newstring runtime  result
if  isprintable      issymbolname symbol        todo  1 9 rb_enc_symname_p
return str
else
str    rubystring str inspect19
bytelist bytes   str getbytelist
bytes set 0
bytes set 1
return str
}
}
@override
public irubyobject to_s
return to_s getruntime
}
@jrubymethod name
public irubyobject to_s threadcontext context
return to_s context getruntime
}
private final irubyobject to_s ruby runtime
return rubystring newstringshared runtime  symbolbytes
}
public irubyobject id2name
return to_s getruntime
}
@jrubymethod name
public irubyobject id2name threadcontext context
return to_s context
}
@jrubymethod name      required   1
@override
public irubyobject op_eqq threadcontext context  irubyobject other
return super op_equal context  other
}
@deprecated
@override
public rubyfixnum hash
return getruntime   newfixnum hashcode
}
@jrubymethod name
public rubyfixnum hash threadcontext context
return context getruntime   newfixnum hashcode
}
@override
public int hashcode
return id
}
public int getid
return id
}
@override
public boolean equals object other
return other    this
}
@jrubymethod name
public irubyobject to_sym
return this
}
@override
public irubyobject taint threadcontext context
return this
}
private rubystring newshared ruby runtime
return rubystring newstringshared runtime  symbolbytes
}
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject succ threadcontext context
ruby runtime   context getruntime
return newsymbol runtime  newshared runtime  succ19 context  tostring
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject op_cmp threadcontext context  irubyobject other
ruby runtime   context getruntime
if  other instanceof rubysymbol
return  newshared runtime  op_cmp19 context    rubysymbol other  newshared runtime
}
return runtime getnil
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject casecmp threadcontext context  irubyobject other
ruby runtime   context getruntime
if  other instanceof rubysymbol
return newshared runtime  casecmp19 context    rubysymbol  other  newshared runtime
}
return runtime getnil
}
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject op_match19 threadcontext context  irubyobject other
ruby runtime   context getruntime
return newshared runtime  op_match19 context  other
}
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject op_aref threadcontext context  irubyobject arg
ruby runtime   context getruntime
return newshared runtime  op_aref19 context  arg
}
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject op_aref threadcontext context  irubyobject arg1  irubyobject arg2
ruby runtime   context getruntime
return newshared runtime  op_aref19 context  arg1  arg2
}
@jrubymethod name           compat   compatversion ruby1_9
public irubyobject length
return newshared getruntime    length19
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject empty_p threadcontext context
return newshared context getruntime    empty_p context
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject upcase threadcontext context
ruby runtime   context getruntime
return newsymbol runtime  newshared runtime  upcase19 context  tostring
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject downcase threadcontext context
ruby runtime   context getruntime
return newsymbol runtime  newshared runtime  downcase19 context  tostring
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject capitalize threadcontext context
ruby runtime   context getruntime
return newsymbol runtime  newshared runtime  capitalize19 context  tostring
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject swapcase threadcontext context
ruby runtime   context getruntime
return newsymbol runtime  newshared runtime  swapcase19 context  tostring
}
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject encoding threadcontext context
return context getruntime   getencodingservice   getencoding symbolbytes getencoding
}
private static class toproccallback implements blockcallback
private rubysymbol symbol
public toproccallback rubysymbol symbol
this symbol   symbol
}
public irubyobject call threadcontext ctx  irubyobject args  block blk
irubyobject currentargs   args
switch currentargs length
case 0  throw symbol getruntime   newargumenterror
case 1
if  currentargs instanceof rubyarray       rubyarray currentargs  getlength      0
// this is needed to unpack stuff
currentargs     rubyarray currentargs  tojavaarraymaybeunsafe
irubyobject args2   new irubyobject
system arraycopy currentargs  1  args2  0  args2 length
return runtimehelpers invoke ctx  currentargs  symbol symbol  args2
else
return runtimehelpers invoke ctx  currentargs  symbol symbol
}
}
default
irubyobject args2   new irubyobject
system arraycopy currentargs  1  args2  0  args2 length
return runtimehelpers invoke ctx  currentargs  symbol symbol  args2
}
}
}
}
/*
@jrubymethod
public irubyobject to_proc() {
return rubyproc.newproc(getruntime(),
callblock.newcallclosure(this, getruntime().getsymbol(), arity.noarguments(), new toproccallback(this), getruntime().getcurrentcontext()),
block.type.proc);
}
*/
private static boolean isidentstart char c
return   c >       c <        c >       c <
c
}
private static boolean isidentchar char c
return   c >       c <         c >       c <         c >       c <
c
}
private static boolean isidentifier string s
if  s    null    s length   <  0
return false
}
if   isidentstart s charat 0
return false
}
for  int i   1  i < s length    i
if   isidentchar s charat i
return false
}
}
return true
}
/**
* is_special_global_name from parse.c.
* @param s
* @return
*/
private static boolean isspecialglobalname string s
if  s    null    s length   <  0
return false
}
int length   s length
switch  s charat 0
case    case    case    case    case    case    case    case
case    case    case    case    case    case    case    case
case    case    case    case    case
return length    1
case
return  length    1     length    2    isidentchar s charat 1
default
// we already confirmed above that length > 0
for  int i   0  i < length  i
if   character isdigit s charat i
return false
}
}
}
return true
}
private boolean isprintable
ruby runtime   getruntime
int p   symbolbytes getbegin
int end   p   symbolbytes getrealsize
bytebytes   symbolbytes getunsafebytes
encoding enc   symbolbytes getencoding
while  p < end
int c   codepoint runtime  enc  bytes  p  end
if   enc isprint c   return false
p    codelength runtime  enc  c
}
return true
}
private static boolean issymbolname string s
if  s    null    s length   < 1  return false
int length   s length
char c   s charat 0
switch  c
case
if  length > 1    isspecialglobalname s substring 1
return true
}
return isidentifier s substring 1
case
int offset   1
if  length >  2    s charat 1
offset
}
return isidentifier s substring offset
case
return  length    1     length    2     s equals       s equals
length    3    s equals
case
return  length    1      length    2     s equals       s equals
case
return   length    2     s equals       s equals
length    3    s equals
case
return  length    1     length    2    s equals
case
return  length    1     length    2    s equals
case
return  length    1     length    2    s equals
case    case    case    case    case    case    case
return length    1
case
return s equals       s equals
}
if   isidentstart c   return false
boolean localid    c >       c <
int last   1
for    last < length  last
char d   s charat last
if   isidentchar d
break
}
}
if  last    length
return true
else if  localid    last    length   1
char d   s charat last
return d         d         d
}
return false
}
@jrubymethod name      meta   true
public static irubyobject all_symbols threadcontext context  irubyobject recv
return context getruntime   getsymboltable   all_symbols
}
@deprecated
public static irubyobject all_symbols irubyobject recv
return recv getruntime   getsymboltable   all_symbols
}
public static rubysymbol unmarshalfrom unmarshalstream input  throws java io ioexception
rubysymbol result   newsymbol input getruntime    rubystring bytelisttostring input unmarshalstring
input registerlinktarget result
return result
}
@override
public object tojava class target
if  target    string class    target    charsequence class
return symbol
}
return super tojava target
}
public static final class symboltable
static final int default_initial_capacity   2048      must  be power of 2
static final int maximum_capacity   1 << 30
static final float default_load_factor   0 75f
private final reentrantlock tablelock   new reentrantlock
private volatile symbolentry symboltable
private int size
private int threshold
private final float loadfactor
private final ruby runtime
public symboltable ruby runtime
this runtime   runtime
this loadfactor   default_load_factor
this threshold    int  default_initial_capacity   default_load_factor
this symboltable   new symbolentry
}
// note all fields are final -- rehash creates new entries when necessary.
// as documented in java.util.concurrent.concurrenthashmap.java, that will
// statistically affect only a small percentage (< 20%) of entries for a given rehash.
static class symbolentry
final int hash
final string name
final rubysymbol symbol
final symbolentry next
symbolentry int hash  string name  rubysymbol symbol  symbolentry next
this hash   hash
this name   name
this symbol   symbol
this next   next
}
}
public rubysymbol getsymbol string name
int hash   name hashcode
symbolentry table   symboltable
symbolentry e   getentryfromtable table  hash
for    e    null  e   e next
if  issymbolmatch name  hash  e   return e symbol
}
return createsymbol name  bytelist create name   hash  table
}
public rubysymbol getsymbol bytelist bytes
string name   bytes tostring
int hash   name hashcode
symbolentry table   symboltable
symbolentry e   getentryfromtable table  hash
for    e    null  e   e next
if  issymbolmatch name  hash  e   return e symbol
}
return createsymbol name  bytes  hash  table
}
public rubysymbol fastgetsymbol string internedname
//            assert internedname == internedname.intern() : internedname + " is not interned";
symbolentry table   symboltable
symbolentry e   getentryfromtable symboltable  internedname hashcode
for    e    null  e   e next
if  issymbolmatch internedname  e   return e symbol
}
return fastcreatesymbol internedname  table
}
private static symbolentry getentryfromtable symbolentry table  int hash
return table
}
private static boolean issymbolmatch string name  int hash  symbolentry entry
return hash    entry hash    name equals entry name
}
private static boolean issymbolmatch string internedname  symbolentry entry
return internedname    entry name
}
private rubysymbol createsymbol string name  bytelist value  int hash  symbolentry table
reentrantlock lock
lock   tablelock  lock
try
int potentialnewsize
if   potentialnewsize   size   1  > threshold
table   rehash
else
table   symboltable
}
int index
// try lookup again under lock
for  symbolentry e   table  e    null  e   e next
if  hash    e hash    name equals e name
return e symbol
}
}
string internedname
rubysymbol symbol   new rubysymbol runtime  internedname   name intern    value
table   new symbolentry hash  internedname  symbol  table
size   potentialnewsize
// write-volatile
symboltable   table
return symbol
finally
lock unlock
}
}
private rubysymbol fastcreatesymbol string internedname  symbolentry table
reentrantlock lock
lock   tablelock  lock
try
int potentialnewsize
if   potentialnewsize   size   1  > threshold
table   rehash
else
table   symboltable
}
int index
int hash
// try lookup again under lock
for  symbolentry e   table  e    null  e   e next
if  internedname    e name
return e symbol
}
}
rubysymbol symbol   new rubysymbol runtime  internedname
table   new symbolentry hash  internedname  symbol  table
size   potentialnewsize
// write-volatile
symboltable   table
return symbol
finally
lock unlock
}
}
// backwards-compatibility, but threadsafe now
public rubysymbol lookup string name
int hash   name hashcode
symbolentry table
for  symbolentry e    table   symboltable   e    null  e   e next
if  hash    e hash    name equals e name
return e symbol
}
}
return null
}
public rubysymbol lookup long id
symbolentry table   symboltable
for  int i   table length    i >  0
for  symbolentry e   table  e    null  e   e next
if  id    e symbol id
return e symbol
}
}
}
return null
}
public rubyarray all_symbols
symbolentry table   this symboltable
rubyarray array   runtime newarray this size
for  int i   table length    i >  0
for  symbolentry e   table  e    null  e   e next
array append e symbol
}
}
return array
}
// not so backwards-compatible here, but no one should have been
// calling this anyway.
@deprecated
public void store rubysymbol symbol
throw new unsupportedoperationexception
}
private symbolentry rehash
symbolentry oldtable   symboltable
int oldcapacity
if   oldcapacity   oldtable length  >  maximum_capacity
return oldtable
}
int newcapacity   oldcapacity << 1
symbolentry newtable   new symbolentry
threshold    int  newcapacity   loadfactor
int sizemask   newcapacity   1
symbolentry e
for  int i   oldcapacity    i >  0
// we need to guarantee that any existing reads of old map can
//  proceed. so we cannot yet null out each bin.
e   oldtable
if  e    null
symbolentry next   e next
int idx   e hash   sizemask
//  single node on list
if  next    null
newtable   e
else
// reuse trailing consecutive sequence at same slot
symbolentry lastrun   e
int lastidx   idx
for  symbolentry last   next
last    null
last   last next
int k   last hash   sizemask
if  k    lastidx
lastidx   k
lastrun   last
}
}
newtable   lastrun
// clone all remaining nodes
for  symbolentry p   e  p    lastrun  p   p next
int k   p hash   sizemask
symbolentry n   newtable
newtable   new symbolentry p hash  p name  p symbol  n
}
}
}
}
symboltable   newtable
return newtable
}
}
}