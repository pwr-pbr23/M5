/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2006 ola bini <ola@ologix.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java util arraylist
import static org jruby rubyenumerator enumeratorize
import java util comparator
import java util arrays
import java util collections
import java util list
import java util concurrent atomic atomicinteger
import org jruby anno jrubymethod
import org jruby anno jrubymodule
import org jruby common irubywarnings id
import org jruby exceptions jumpexception
import org jruby javasupport util runtimehelpers
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime callblock
import org jruby runtime blockcallback
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
import org jruby util typeconverter
/**
* the implementation of ruby's enumerable module.
*/
@jrubymodule name
public class rubyenumerable
public static rubymodule createenumerablemodule ruby runtime
rubymodule enummodule   runtime definemodule
runtime setenumerable enummodule
enummodule defineannotatedmethods rubyenumerable class
return enummodule
public static irubyobject calleach ruby runtime  threadcontext context  irubyobject self
blockcallback callback
return runtimehelpers invoke context  self     callblock newcallclosure self  runtime getenumerable
arity noarguments    callback  context
public static irubyobject calleach ruby runtime  threadcontext context  irubyobject self  irubyobject args
blockcallback callback
return runtimehelpers invoke context  self     args  callblock newcallclosure self  runtime getenumerable    arity noarguments    callback  context
private static void checkcontext threadcontext firstcontext  threadcontext secondcontext  string name
if  firstcontext    secondcontext
throw secondcontext getruntime   newthreaderror     name
public static irubyobject checkargs ruby runtime  irubyobjectlargs
return largs length    0 ? runtime getnil     largs
@jrubymethod name      frame   true
public static irubyobject count threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
final int result
if  block isgiven
result   new int   0
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue
result
return runtime getnil
else
if  self respondsto     return self callmethod context
result   new int   0
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
result
return runtime getnil
return rubyfixnum newfixnum runtime  result
@jrubymethod name      frame   true
public static irubyobject count threadcontext context  irubyobject self  final irubyobject arg  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
final int result   new int   0
if  block isgiven    runtime getwarnings   warn id block_unused
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block block
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
if  larg equals arg   result
return runtime getnil
return rubyfixnum newfixnum runtime  result
@jrubymethod name      frame   true
public static irubyobject cycle threadcontext context  irubyobject self  final block block
if   block isgiven    return enumeratorize context getruntime    self
return cyclecommon context  self   1  block
@jrubymethod name      frame   true
public static irubyobject cycle threadcontext context  irubyobject self  irubyobject arg  final block block
if  arg isnil    return cycle context  self  block
if   block isgiven    return enumeratorize context getruntime    self     arg
long times   rubynumeric num2long arg
if  times <  0  return context getruntime   getnil
return cyclecommon context  self  times  block
/*
* @param nv number of times to cycle or -1 to cycle indefinitely
*/
private static irubyobject cyclecommon threadcontext context  irubyobject self  long nv  final block block
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
synchronized  result
result append larg
block yield ctx  larg
return runtime getnil
int len   result size
if  len    0  return runtime getnil
while  nv < 0    0 <   nv
for  int i 0  i < len  i
block yield context  result eltinternal i
return runtime getnil
@jrubymethod name
public static irubyobject take threadcontext context  irubyobject self  irubyobject n  final block block
final ruby runtime   context getruntime
final long len   rubynumeric num2long n
if  len < 0  throw runtime newargumenterror
if  len    0  return runtime newemptyarray
final rubyarray result   runtime newarray
try
calleach runtime  context  self  new blockcallback
long i   len     atomic ?
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
synchronized  result
result append larg
if    i    0  throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name      frame   true
public static irubyobject take_while threadcontext context  irubyobject self  final block block
if   block isgiven    return enumeratorize context getruntime    self
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if   block yield ctx  larg  istrue    throw jumpexception special_jump
synchronized  result
result append larg
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name
public static irubyobject drop threadcontext context  irubyobject self  irubyobject n  final block block
final ruby runtime   context getruntime
final long len   rubynumeric num2long n
if  len < 0  throw runtime newargumenterror
final rubyarray result   runtime newarray
try
calleach runtime  context  self  new blockcallback
long i   len     atomic ?
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
synchronized  result
if  i    0
result append larg
else
i
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name      frame   true
public static irubyobject drop_while threadcontext context  irubyobject self  final block block
if   block isgiven    return enumeratorize context getruntime    self
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
try
calleach runtime  context  self  new blockcallback
boolean memo   false
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if   memo     block yield ctx  larg  istrue    memo   true
if  memo  synchronized  result
result append larg
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name
public static irubyobject first threadcontext context  irubyobject self
final ruby runtime   context getruntime
final threadcontext localcontext   context
final irubyobject holder   new irubyobject runtime getnil
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
holder   larg
throw jumpexception special_jump
catch  jumpexception specialjump sj
return holder
@jrubymethod name
public static irubyobject first threadcontext context  irubyobject self  final irubyobject num
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
final threadcontext localcontext   context
final int firstcount   rubynumeric fix2int num
if  firstcount < 0
throw runtime newargumenterror
else if  firstcount    0
return result
try
calleach runtime  context  self  new blockcallback
private int iter   rubynumeric fix2int num
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
result append larg
if  iter      1
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return result
@jrubymethod name           compat   compatversion ruby1_8
public static irubyobject to_a threadcontext context  irubyobject self
ruby runtime   context getruntime
rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
return result
@jrubymethod name           rest   true  compat   compatversion ruby1_8
public static irubyobject to_a threadcontext context  irubyobject self  irubyobject args
ruby runtime   context getruntime
rubyarray result   runtime newarray
runtimehelpers invoke context  self     args  callblock newcallclosure self  runtime getenumerable
arity optional  new appendblockcallback runtime  result   context
return result
@jrubymethod name           compat   compatversion ruby1_9
public static irubyobject to_a19 threadcontext context  irubyobject self
ruby runtime   context getruntime
rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
result infectby self
return result
@jrubymethod name           rest   true  compat   compatversion ruby1_9
public static irubyobject to_a19 threadcontext context  irubyobject self  irubyobject args
ruby runtime   context getruntime
rubyarray result   runtime newarray
runtimehelpers invoke context  self     args  callblock newcallclosure self  runtime getenumerable
arity optional  new appendblockcallback runtime  result   context
result infectby self
return result
@jrubymethod name      frame   true
public static irubyobject sort threadcontext context  irubyobject self  final block block
ruby runtime   context getruntime
rubyarray result   runtime newarray
calleach runtime  context  self  new appendblockcallback runtime  result
result sort_bang context  block
return result
public static irubyobject sort_bycommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context     must not be used across threads
if  self instanceof rubyarray
rubyarray selfarray    rubyarray  self
final irubyobject valuesandcriteria   new irubyobject
calleach runtime  context  self  new blockcallback
atomicinteger i   new atomicinteger 0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject myvandc   valuesandcriteria
myvandc   larg
myvandc   block yield ctx  larg
return runtime getnil
arrays sort valuesandcriteria  new comparator<irubyobject>
public int compare irubyobject o1  irubyobject o2
return rubyfixnum fix2int o1 callmethod localcontext     o2
irubyobject dstarray   new irubyobject
for  int i   0  i < dstarray length  i
dstarray   valuesandcriteria
return runtime newarraynocopy dstarray
else
final list<irubyobject> valuesandcriteria   new arraylist<irubyobject>
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject myvandc   new irubyobject
myvandc   larg
myvandc   block yield ctx  larg
valuesandcriteria add myvandc
return runtime getnil
collections sort valuesandcriteria  new comparator<irubyobject>
public int compare irubyobject o1  irubyobject o2
return rubyfixnum fix2int o1 callmethod localcontext     o2
irubyobject dstarray   new irubyobject
for  int i   0  i < dstarray length  i
dstarray   valuesandcriteria get i
return runtime newarraynocopy dstarray
@jrubymethod name      frame   true
public static irubyobject sort_by threadcontext context  irubyobject self  final block block
return block isgiven   ? sort_bycommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      required   1  frame   true
public static irubyobject grep threadcontext context  irubyobject self  final irubyobject pattern  final block block
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
ctx setrubyframedelta ctx getrubyframedelta   2
if  pattern callmethod ctx     larg  istrue
irubyobject value   block yield ctx  larg
synchronized  result
result append value
ctx setrubyframedelta ctx getrubyframedelta   2
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if  pattern callmethod ctx     larg  istrue
synchronized  result
result append larg
return runtime getnil
return result
public static irubyobject detectcommon threadcontext context  irubyobject self  final block block
return detectcommon context  self  null  block
public static irubyobject detectcommon threadcontext context  irubyobject self  irubyobject ifnone  final block block
final ruby runtime   context getruntime
final irubyobject result   new irubyobject   null
final threadcontext localcontext   context
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
if  block yield ctx  larg  istrue
result   larg
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return result
return ifnone    null ? ifnone callmethod context       runtime getnil
@jrubymethod name      frame   true
public static irubyobject detect threadcontext context  irubyobject self  final block block
boolean blockgiven   block isgiven
if  self instanceof rubyarray    blockgiven  return   rubyarray  self  find context  null  block
return block isgiven   ? detectcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      frame   true
public static irubyobject detect threadcontext context  irubyobject self  irubyobject ifnone  final block block
boolean blockgiven   block isgiven
if  self instanceof rubyarray    blockgiven  return   rubyarray  self  find context  null  block
return block isgiven   ? detectcommon context  self  ifnone  block    enumeratorize context getruntime    self     ifnone
// fixme: custom array enumeratorize should be made for all of these methods which skip array without a supplied block.
@jrubymethod name      frame   true
public static irubyobject find threadcontext context  irubyobject self  final block block
boolean blockgiven   block isgiven
if  self instanceof rubyarray    blockgiven  return   rubyarray  self  find context  null  block
return blockgiven ? detectcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      frame   true
public static irubyobject find threadcontext context  irubyobject self  irubyobject ifnone  final block block
boolean blockgiven   block isgiven
if  self instanceof rubyarray    blockgiven  return   rubyarray  self  find context  ifnone  block
return blockgiven ? detectcommon context  self  ifnone  block
enumeratorize context getruntime    self     ifnone
@jrubymethod name      frame   true
public static irubyobject find_index threadcontext context  irubyobject self  final block block
boolean blockgiven   block isgiven
if  self instanceof rubyarray    blockgiven  return   rubyarray  self  find_index context  block
return blockgiven ? find_indexcommon context  self  block
enumeratorize context getruntime    self
@jrubymethod name      frame   true
public static irubyobject find_index threadcontext context  irubyobject self  final irubyobject cond  final block block
final ruby runtime   context getruntime
if  block isgiven    runtime getwarnings   warn id block_unused
if  self instanceof rubyarray  return   rubyarray  self  find_index context  cond
return find_indexcommon context  self  cond
public static irubyobject find_indexcommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final long result   new long  0
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue    throw jumpexception special_jump
result
return runtime getnil
catch  jumpexception specialjump sj
return rubyfixnum newfixnum runtime  result
return runtime getnil
public static irubyobject find_indexcommon threadcontext context  irubyobject self  final irubyobject cond
final ruby runtime   context getruntime
final long result   new long  0
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if  larg equals cond   throw jumpexception special_jump
result
return runtime getnil
catch  jumpexception specialjump sj
return rubyfixnum newfixnum runtime  result
return runtime getnil
public static irubyobject selectcommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue
synchronized  result
result append larg
return runtime getnil
return result
@jrubymethod name      frame   true
public static irubyobject select threadcontext context  irubyobject self  final block block
return block isgiven   ? selectcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      frame   true
public static irubyobject find_all threadcontext context  irubyobject self  final block block
return block isgiven   ? selectcommon context  self  block    enumeratorize context getruntime    self
public static irubyobject rejectcommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if   block yield ctx  larg  istrue
synchronized  result
result append larg
return runtime getnil
return result
@jrubymethod name      frame   true
public static irubyobject reject threadcontext context  irubyobject self  final block block
return block isgiven   ? rejectcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name           frame   true  compat   compatversion ruby1_8
public static irubyobject collect threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final rubyarray result   runtime newarray
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject value   block yield ctx  larg
synchronized  result
result append value
return runtime getnil
else
calleach runtime  context  self  new appendblockcallback runtime  result
return result
@jrubymethod name        frame   true  compat   compatversion ruby1_9
public static irubyobject collect19 threadcontext context  irubyobject self  final block block
return collectcommon19 context  self  block
@jrubymethod name        frame   true  compat   compatversion ruby1_9
public static irubyobject map19 threadcontext context  irubyobject self  final block block
return collectcommon19 context  self  block
private static irubyobject collectcommon19 threadcontext context  irubyobject self  final block block  string methodname
final ruby runtime   context getruntime
if  block isgiven
final rubyarray result   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject value   block yield ctx  larg
synchronized  result
result append value
return runtime getnil
return result
else
return enumeratorize runtime  self  methodname
public static irubyobject collectcommon threadcontext context  ruby runtime  irubyobject self
rubyarray result  final block block  blockcallback blockcallback
calleach runtime  context  self  blockcallback
return result
@jrubymethod name        frame   true  compat   compatversion ruby1_9
public static irubyobject flat_map19 threadcontext context  irubyobject self  final block block
return flatmapcommon19 context  self  block
@jrubymethod name        frame   true  compat   compatversion ruby1_9
public static irubyobject collect_concat19 threadcontext context  irubyobject self  final block block
return flatmapcommon19 context  self  block
private static irubyobject flatmapcommon19 threadcontext context  irubyobject self  final block block  string methodname
final ruby runtime   context getruntime
if block isgiven
final rubyarray ary   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject i   block yield ctx  larg
irubyobject tmp   i checkarraytype
synchronized ary
if tmp isnil
ary append i
else
ary concat tmp
return runtime getnil
return ary
else
return enumeratorize runtime  self  methodname
public static irubyobject injectcommon threadcontext context  irubyobject self  irubyobject init  final block block
final ruby runtime   context getruntime
final irubyobject result   new irubyobject   init
final threadcontext localcontext   context
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
result   result    null ?
larg   block yieldarray ctx  runtime newarray result  larg   null  null
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name           frame   true
public static irubyobject inject threadcontext context  irubyobject self  final block block
return injectcommon context  self  null  block
@jrubymethod name           frame   true
public static irubyobject inject threadcontext context  irubyobject self  irubyobject arg  final block block
return block isgiven   ? injectcommon context  self  arg  block    inject context  self  null  arg  block
@jrubymethod name           frame   true
public static irubyobject inject threadcontext context  irubyobject self  irubyobject init  irubyobject method  final block block
final ruby runtime   context getruntime
if  block isgiven    runtime getwarnings   warn id block_unused
final string methodid   method asjavastring
final irubyobject result   new irubyobject   init
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
result   result    null ? larg   result callmethod ctx  methodid  larg
return runtime getnil
return result    null ? runtime getnil     result
public static irubyobject partitioncommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final rubyarray arr_true   runtime newarray
final rubyarray arr_false   runtime newarray
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue
synchronized  arr_true
arr_true append larg
else
synchronized  arr_false
arr_false append larg
return runtime getnil
return runtime newarray arr_true  arr_false
@jrubymethod name      frame   true
public static irubyobject partition threadcontext context  irubyobject self  final block block
return block isgiven   ? partitioncommon context  self  block    enumeratorize context getruntime    self
private static class eachwithindex implements blockcallback
private int index   0
private final block block
private final ruby runtime
public eachwithindex threadcontext ctx  block block
this block   block
this runtime   ctx getruntime
public irubyobject call threadcontext context  irubyobject iargs  block block
this block call context  new irubyobject   runtime newarray checkargs runtime  iargs   runtime newfixnum index
return runtime getnil
public static irubyobject each_with_indexcommon threadcontext context  irubyobject self  block block
calleach context getruntime    context  self  new eachwithindex context  block
return self
public static irubyobject each_with_indexcommon19 threadcontext context  irubyobject self  block block  irubyobject args
calleach context getruntime    context  self  args  new eachwithindex context  block
return self
@jrubymethod name      frame   true  compat   compatversion ruby1_8
public static irubyobject each_with_index threadcontext context  irubyobject self  block block
return block isgiven   ? each_with_indexcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      frame   true  rest   true  compat   compatversion ruby1_9
public static irubyobject each_with_index19 threadcontext context  irubyobject self  irubyobject args  block block
return block isgiven   ? each_with_indexcommon19 context  self  block  args    enumeratorize context getruntime    self     args
@jrubymethod name      frame   true
public static irubyobject enum_with_index threadcontext context  irubyobject self  block block
return block isgiven   ? each_with_indexcommon context  self  block    enumeratorize context getruntime    self
@jrubymethod name      frame   true
public static irubyobject reverse_each threadcontext context  irubyobject self  block block
return block isgiven   ? reverse_eachinternal context  self  to_a context  self   block
enumeratorize context getruntime    self
@jrubymethod name      frame   true  rest   true
public static irubyobject reverse_each threadcontext context  irubyobject self  irubyobject args  block block
return block isgiven   ? reverse_eachinternal context  self  to_a context  self  args   block
enumeratorize context getruntime    self     args
private static irubyobject reverse_eachinternal threadcontext context  irubyobject self  irubyobject obj  block block
rubyarray obj  reverse_each context  block
return self
@jrubymethod name           required   1  frame   true
public static irubyobject include_p threadcontext context  irubyobject self  final irubyobject arg
final ruby runtime   context getruntime
final threadcontext localcontext   context
try
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
if  rubyobject equalinternal ctx  larg  arg
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime gettrue
return runtime getfalse
@jrubymethod name      frame   true
public static irubyobject max threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final irubyobject result   new irubyobject   null
final threadcontext localcontext   context
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
if  result    null    rubycomparable cmpint ctx  block yieldarray ctx
runtime newarray larg  result   null  null   larg  result  > 0
result   larg
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
synchronized  result
if  result    null    rubycomparable cmpint ctx  larg callmethod ctx     result   larg  result  > 0
result   larg
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name      frame   true
public static irubyobject max_by threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  self
final irubyobject result   new irubyobject   runtime getnil
final threadcontext localcontext   context
calleach runtime  context  self  new blockcallback
irubyobject memo   null
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
irubyobject v   block yield ctx  larg
if  memo    null    rubycomparable cmpint ctx  v callmethod ctx     memo   v  memo  > 0
memo   v
result   larg
return runtime getnil
return result
@jrubymethod name      frame   true
public static irubyobject min threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final irubyobject result   new irubyobject   null
final threadcontext localcontext   context
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
if  result    null    rubycomparable cmpint ctx  block yield ctx
runtime newarray larg  result    larg  result  < 0
result   larg
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
synchronized  result
if  result    null    rubycomparable cmpint ctx  larg callmethod ctx     result   larg  result  < 0
result   larg
return runtime getnil
return result    null ? runtime getnil     result
@jrubymethod name      frame   true
public static irubyobject min_by threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  self
final irubyobject result   new irubyobject   runtime getnil
final threadcontext localcontext   context
calleach runtime  context  self  new blockcallback
irubyobject memo   null
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
checkcontext localcontext  ctx
irubyobject v   block yield ctx  larg
if  memo    null    rubycomparable cmpint ctx  v callmethod ctx     memo   v  memo  < 0
memo   v
result   larg
return runtime getnil
return result
@jrubymethod name      frame   true
public static irubyobject minmax threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final irubyobject result   new irubyobject   null  null
final threadcontext localcontext   context
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject arg   checkargs runtime  largs
if  result    null
result   result   arg
else
if  rubycomparable cmpint ctx
block yield ctx  runtime newarray arg  result    arg  result  < 0
result   arg
if  rubycomparable cmpint ctx
block yield ctx  runtime newarray arg  result    arg  result  > 0
result   arg
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject arg   checkargs runtime  largs
synchronized  result
if  result    null
result   result   arg
else
if  rubycomparable cmpint ctx  arg callmethod ctx     result   arg  result  < 0
result   arg
if  rubycomparable cmpint ctx  arg callmethod ctx     result   arg  result  > 0
result   arg
return runtime getnil
if  result    null
result   result   runtime getnil
return runtime newarraynocopy result
@jrubymethod name      frame   true
public static irubyobject minmax_by threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  self
final irubyobject result   new irubyobject   runtime getnil    runtime getnil
final threadcontext localcontext   context
calleach runtime  context  self  new blockcallback
irubyobject minmemo   null  maxmemo   null
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject arg   checkargs runtime  largs
irubyobject v   block yield ctx  arg
if  minmemo    null
minmemo   maxmemo   v
result   result   arg
else
if  rubycomparable cmpint ctx  v callmethod ctx     minmemo   v  minmemo  < 0
minmemo   v
result   arg
if  rubycomparable cmpint ctx  v callmethod ctx     maxmemo   v  maxmemo  > 0
maxmemo   v
result   arg
return runtime getnil
return runtime newarraynocopy result
@jrubymethod name      frame   true
public static irubyobject none_p threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue    throw jumpexception special_jump
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  larg istrue    throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime getfalse
return runtime gettrue
@jrubymethod name      frame   true  compat   compatversion ruby1_9
public static irubyobject one_p threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
final boolean result   new boolean   false
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue
if  result
throw jumpexception special_jump
else
result   true
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  larg istrue
if  result
throw jumpexception special_jump
else
result   true
return runtime getnil
catch  jumpexception specialjump sj
return runtime getfalse
return result ? runtime gettrue     runtime getfalse
@jrubymethod name      frame   true
public static irubyobject all_p threadcontext context  irubyobject self  final block block
if  self instanceof rubyarray  return   rubyarray  self  all_p context  block
return all_pcommon context  self  block
public static irubyobject all_pcommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if   block yield ctx  larg  istrue
throw jumpexception special_jump
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if   larg istrue
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime getfalse
return runtime gettrue
@jrubymethod name      frame   true
public static irubyobject any_p threadcontext context  irubyobject self  final block block
if  self instanceof rubyarray  return   rubyarray  self  any_p context  block
return any_pcommon context  self  block
public static irubyobject any_pcommon threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
final threadcontext localcontext   context
try
if  block isgiven
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  block yield ctx  larg  istrue
throw jumpexception special_jump
return runtime getnil
else
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
checkcontext localcontext  ctx
irubyobject larg   checkargs runtime  largs
if  larg istrue
throw jumpexception special_jump
return runtime getnil
catch  jumpexception specialjump sj
return runtime gettrue
return runtime getfalse
@jrubymethod name      rest   true  frame   true  compat   compatversion ruby1_8
public static irubyobject zip threadcontext context  irubyobject self  final irubyobject args  final block block
return zipcommon context  self  args  block
@jrubymethod name      rest   true  frame   true  compat   compatversion ruby1_9
public static irubyobject zip19 threadcontext context  irubyobject self  final irubyobject args  final block block
return zipcommon context  self  args  block
public static irubyobject zipcommonconvert ruby runtime  irubyobject args  string methodconverter
rubyclass array   runtime getarray
for  int i   0  i < args length  i
args   typeconverter converttotype args  array  methodconverter
return args
public static irubyobject zipcommon threadcontext context  irubyobject self
irubyobject aargs  final block block  string methodconverter
final ruby runtime   context getruntime
final int alen   aargs length   1
final irubyobject args   zipcommonconvert runtime  aargs  methodconverter
if  block isgiven
calleach runtime  context  self  new blockcallback
atomicinteger ix   new atomicinteger 0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
rubyarray array   runtime newarray alen
int myix   ix getandincrement
array append larg
for  int i   0  j   args length  i < j  i
array append   rubyarray  args  entry myix
block yield ctx  array
return runtime getnil
return runtime getnil
else
final rubyarray zip   runtime newarray
calleach runtime  context  self  new blockcallback
atomicinteger ix   new atomicinteger 0
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
rubyarray array   runtime newarray alen
array append larg
int myix   ix getandincrement
for  int i   0  j   args length  i < j  i
array append   rubyarray  args  entry myix
synchronized  zip
zip append array
return runtime getnil
return zip
@jrubymethod name      frame   true
public static irubyobject group_by threadcontext context  irubyobject self  final block block
final ruby runtime   context getruntime
if   block isgiven    return enumeratorize runtime  self
final rubyhash result   new rubyhash runtime
calleach runtime  context  self  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject larg   checkargs runtime  largs
irubyobject key   block yield ctx  larg
synchronized  result
rubyarray curr    rubyarray result fastaref key
if  curr    null
curr   runtime newarray
result fastaset key  curr
curr append larg
return runtime getnil
return result
@jrubymethod name      required   0  optional   1  frame   true  compat   compatversion ruby1_9
public static irubyobject chunk threadcontext context  irubyobject self  final irubyobject args  final block block
irubyobject initialstate   context getruntime   getnil
if  block isgiven
throw context getruntime   newargumenterror
if args length > 0
initialstate   args
irubyobject enumerator   context getruntime   getenumerator   allocate
enumerator getinternalvariables   setinternalvariable    self
enumerator getinternalvariables   setinternalvariable    rubyproc newproc context getruntime    block  block type
enumerator getinternalvariables   setinternalvariable    initialstate
runtimehelpers invoke context  enumerator
callblock newcallclosure self  context getruntime   getenumerable    arity noarguments
new chunkedblockcallback context getruntime    enumerator   context
return enumerator
static class chunkarg
public irubyobject categorize
public irubyobject state
public irubyobject prev_value
public irubyobject prev_elts
public irubyobject yielder
// chunk_i
public static final class chunkedblockcallback implements blockcallback
private final ruby runtime
private final irubyobject enumerator
public chunkedblockcallback ruby runtime  irubyobject enumerator
this runtime   runtime
this enumerator   enumerator
public irubyobject call threadcontext context  irubyobject largs  block blk
irubyobject args   checkargs runtime  largs
final chunkarg arg   new chunkarg
irubyobject enumerable    irubyobject enumerator getinternalvariables   getinternalvariable
arg categorize    irubyobject enumerator getinternalvariables   getinternalvariable
arg state    irubyobject enumerator getinternalvariables   getinternalvariable
arg prev_value   runtime getnil
arg prev_elts   runtime getnil
arg yielder   args
if  arg state isnil
arg state   arg state dup
final irubyobject alone   runtime newsymbol
final irubyobject separator   runtime newsymbol
calleach runtime  context  enumerable  new blockcallback
public irubyobject call threadcontext ctx  irubyobject largs  block blk
irubyobject i   checkargs runtime  largs
irubyobject v
if arg state isnil
v   arg categorize callmethod ctx     i
else
v   arg categorize callmethod ctx     new irubyobject i  arg state
if v    alone
if  arg prev_value isnil
arg yielder callmethod ctx     runtime newarray arg prev_value  arg prev_elts
arg prev_value   arg prev_elts   runtime getnil
arg yielder callmethod ctx     runtime newarray v  runtime newarray i
else if v isnil      v    separator
if  arg prev_value isnil
arg yielder callmethod ctx     runtime newarray arg prev_value  arg prev_elts
arg prev_value   arg prev_elts   runtime getnil
else if  v instanceof rubysymbol     v tostring   charat 0
throw runtime newruntimeerror
else
if arg prev_value isnil
arg prev_value   v
arg prev_elts   runtime newarray i
else
if arg prev_value equals v
rubyarray arg prev_elts  append i
else
arg yielder callmethod ctx     runtime newarray arg prev_value  arg prev_elts
arg prev_value   v
arg prev_elts   runtime newarray i
return runtime getnil
if  arg prev_elts isnil
arg yielder callmethod context     runtime newarray arg prev_value  arg prev_elts
return runtime getnil
public static final class appendblockcallback implements blockcallback
private ruby runtime
private rubyarray result
public appendblockcallback ruby runtime  rubyarray result
this runtime   runtime
this result   result
public irubyobject call threadcontext context  irubyobject largs  block blk
result append checkargs runtime  largs
return runtime getnil
@jrubymethod name      compat   compatversion ruby1_9
public static irubyobject join threadcontext context  irubyobject self
return join context  self  context getruntime   getglobalvariables   get
@jrubymethod name      compat   compatversion ruby1_9
public static irubyobject join threadcontext context  irubyobject self  final irubyobject sep
return   rubyarray to_a19 context  self   join19 context  sep