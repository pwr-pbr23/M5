/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008 jruby project
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext ffi
import java util collections
import java util map
import java util weakhashmap
import org jruby ruby
import org jruby rubyclass
import org jruby rubymodule
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby internal runtime methods dynamicmethod
import org jruby runtime arity
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime builtin irubyobject
/**
* a native function invoker
*/
@jrubyclass name       abstractinvoker class_name  parent
public abstract class abstractinvoker extends pointer
static final string class_name
/**
* reference map to keep libraries open for as long as there is a method mapped
* to that library.
*/
private static final map<dynamicmethod  abstractinvoker> refmap
collections synchronizedmap new weakhashmap<dynamicmethod  abstractinvoker>
/**
* the arity of this function.
*/
protected final arity arity
public static rubyclass createabstractinvokerclass ruby runtime  rubymodule module
rubyclass result   module defineclassunder class_name
module fastgetclass
objectallocator not_allocatable_allocator
result defineannotatedmethods abstractinvoker class
result defineannotatedconstants abstractinvoker class
return result
/**
* creates a new <tt>abstractinvoker</tt> instance.
* @param arity
*/
protected abstractinvoker ruby runtime  rubyclass klass  int arity  directmemoryio io
super runtime  klass  io  0
this arity   arity fixed arity
/**
* attaches this function to a ruby module or class.
*
* @param module the module or class to attach the function to.
* @param methodname the ruby name to attach the function as.
*/
@jrubymethod name
public irubyobject attach threadcontext context  irubyobject obj  irubyobject methodname
dynamicmethod m   createdynamicmethod obj getsingletonclass
obj getsingletonclass   addmethod methodname asjavastring    m
if  obj instanceof rubymodule
rubymodule  obj  addmethod methodname asjavastring    m
refmap put m  this
return this
protected abstract dynamicmethod createdynamicmethod rubymodule module
/**
* returns the {@link org.jruby.runtime.arity} of this function.
*
* @return the <tt>arity</tt> of the native function.
*/
public final arity getarity
return arity