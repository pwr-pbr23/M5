/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2008 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io serializable
import java util arraylist
import java util list
import java util map
import java util concurrent atomic atomicboolean
import org jruby anno jrubymethod
import org jruby internal runtime methods dynamicmethod
import org jruby javasupport javaobject
import org jruby javasupport javautil
import org jruby javasupport util runtimehelpers
import org jruby runtime block
import org jruby runtime classindex
import org jruby runtime objectallocator
import org jruby runtime objectspace
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime builtin instancevariables
import org jruby runtime builtin internalvariables
import org jruby runtime builtin variable
import org jruby runtime component variableentry
import org jruby runtime marshal coreobjecttype
import org jruby util idutil
import org jruby util typeconverter
/**
*
* @author enebo
*/
public class rubybasicobject implements cloneable  irubyobject  serializable  comparable<irubyobject>  coreobjecttype  instancevariables  internalvariables
private static final boolean debug   false
private static final object null_object_array   new object
// the class of this object
protected transient rubyclass metaclass
// zeroed by jvm
protected int flags
// variable table, lazily allocated as needed (if needed)
private volatile object vartable   null_object_array
/**
* the error message used when some one tries to modify an
* instance variable in a high security setting.
*/
protected static final string err_insecure_set_inst_var
public static final int all_f    1
public static final int false_f   1 << 0
/**
* this flag is a bit funny. it's used to denote that this value
* is nil. it's a bit counterintuitive for a java programmer to
* not use subclassing to handle this case, since we have a
* rubynil subclass anyway. well, the reason for it being a flag
* is that the {@link #isnil()} method is called extremely often. so often
* that it gives a good speed boost to make it monomorphic and
* final. it turns out using a flag for this actually gives us
* better performance than having a polymorphic {@link #isnil()} method.
*/
public static final int nil_f   1 << 1
public static final int frozen_f   1 << 2
public static final int tainted_f   1 << 3
public static final int untrusted_f   1 << 4
public static final int fl_ushift   5
public static final int user0_f    1<< fl_ushift 0
public static final int user1_f    1<< fl_ushift 1
public static final int user2_f    1<< fl_ushift 2
public static final int user3_f    1<< fl_ushift 3
public static final int user4_f    1<< fl_ushift 4
public static final int user5_f    1<< fl_ushift 5
public static final int user6_f    1<< fl_ushift 6
public static final int user7_f    1<< fl_ushift 7
public static final int compare_by_identity_f    1<< fl_ushift 8
/**
*  a value that is used as a null sentinel in among other places
*  the rubyarray implementation. it will cause large problems to
*  call any methods on this object.
*/
public static final irubyobject never   new rubybasicobject
/**
* a value that specifies an undefined value. this value is used
* as a sentinel for undefined constant values, and other places
* where neither null nor never makes sense.
*/
public static final irubyobject undef   new rubybasicobject
/**
* it's not valid to create a totally empty rubyobject. since the
* rubyobject is always defined in relation to a runtime, that
* means that creating rubyobjects from outside the class might
* cause problems.
*/
private rubybasicobject
/**
* default allocator instance for all ruby objects. the only
* reason to not use this allocator is if you actually need to
* have all instances of something be a subclass of rubyobject.
*
* @see org.jruby.runtime.objectallocator
*/
public static final objectallocator object_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubybasicobject runtime  klass
/**
* will create the ruby class object in the runtime
* specified. this method needs to take the actual class as an
* argument because of the object class' central part in runtime
* initialization.
*/
public static rubyclass createbasicobjectclass ruby runtime  rubyclass objectclass
objectclass index   classindex object
objectclass defineannotatedmethods basicobjectmethods class
objectclass defineannotatedmethods rubybasicobject class
return objectclass
/**
* interestingly, the object class doesn't really have that many
* methods for itself. instead almost all of the object methods
* are really defined on the kernel module. this class is a holder
* for all object methods.
*
* @see rubykernel
*/
public static class basicobjectmethods
@jrubymethod name      visibility   visibility private
public static irubyobject intialize irubyobject self
return self getruntime   getnil
/**
* standard path for object creation. objects are entered into objectspace
* only if objectspace is enabled.
*/
public rubybasicobject ruby runtime  rubyclass metaclass
assert metaclass    null
this metaclass   metaclass
if  runtime isobjectspaceenabled    addtoobjectspace runtime
if  runtime getsafelevel   >  3  taint runtime
/**
* path for objects that don't taint and don't enter objectspace.
*/
public rubybasicobject rubyclass metaclass
this metaclass   metaclass
/**
* path for objects who want to decide whether they don't want to be in
* objectspace even when it is on. (notably used by objects being
* considered immediate, they'll always pass false here)
*/
protected rubybasicobject ruby runtime  rubyclass metaclass  boolean useobjectspace  boolean canbetainted
this metaclass   metaclass
if  useobjectspace  addtoobjectspace runtime
if  canbetainted    runtime getsafelevel   >  3  taint runtime
protected rubybasicobject ruby runtime  rubyclass metaclass  boolean useobjectspace
this metaclass   metaclass
if  useobjectspace  addtoobjectspace runtime
if  runtime getsafelevel   >  3  taint runtime
private void addtoobjectspace ruby runtime
assert runtime isobjectspaceenabled
runtime getobjectspace   add this
protected void taint ruby runtime
runtime secure 4
if   istaint
testfrozen
settaint true
/** rb_frozen_class_p
*
* helper to test whether this object is frozen, and if it is will
* throw an exception based on the message.
*/
protected final void testfrozen string message
if  isfrozen
throw getruntime   newfrozenerror message
/** rb_frozen_class_p
*
* helper to test whether this object is frozen, and if it is will
* throw an exception based on the message.
*/
protected final void testfrozen
if  isfrozen
throw getruntime   newfrozenerror
/**
* sets or unsets a flag on this object. the only flags that are
* guaranteed to be valid to use as the first argument is:
*
* <ul>
*  <li>{@link #false_f}</li>
*  <li>{@link nil_f}</li>
*  <li>{@link frozen_f}</li>
*  <li>{@link tainted_f}</li>
*  <li>{@link user0_f}</li>
*  <li>{@link user1_f}</li>
*  <li>{@link user2_f}</li>
*  <li>{@link user3_f}</li>
*  <li>{@link user4_f}</li>
*  <li>{@link user5_f}</li>
*  <li>{@link user6_f}</li>
*  <li>{@link user7_f}</li>
* </ul>
*
* @param flag the actual flag to set or unset.
* @param set if true, the flag will be set, if false, the flag will be unset.
*/
public final void setflag int flag  boolean set
if  set
flags    flag
else
flags    ~flag
/**
* get the value of a custom flag on this object. the only
* guaranteed flags that can be sent in to this method is:
*
* <ul>
*  <li>{@link #false_f}</li>
*  <li>{@link nil_f}</li>
*  <li>{@link frozen_f}</li>
*  <li>{@link tainted_f}</li>
*  <li>{@link user0_f}</li>
*  <li>{@link user1_f}</li>
*  <li>{@link user2_f}</li>
*  <li>{@link user3_f}</li>
*  <li>{@link user4_f}</li>
*  <li>{@link user5_f}</li>
*  <li>{@link user6_f}</li>
*  <li>{@link user7_f}</li>
* </ul>
*
* @param flag the flag to get
* @return true if the flag is set, false otherwise
*/
public final boolean getflag int flag
return  flags   flag     0
/**
* see org.jruby.javasupport.util.runtimehelpers#invokesuper
*/
@deprecated
public irubyobject callsuper threadcontext context  irubyobject args  block block
return runtimehelpers invokesuper context  this  args  block
/**
* will invoke a named method with no arguments and no block if that method or a custom
* method missing exists. otherwise returns null. 1.9: rb_check_funcall
*/
public final irubyobject checkcallmethod threadcontext context  string name
return runtimehelpers invokechecked context  this  name
/**
* will invoke a named method with no arguments and no block.
*/
public final irubyobject callmethod threadcontext context  string name
return runtimehelpers invoke context  this  name
/**
* will invoke a named method with one argument and no block with
* functional invocation.
*/
public final irubyobject callmethod threadcontext context  string name  irubyobject arg
return runtimehelpers invoke context  this  name  arg
/**
* will invoke a named method with the supplied arguments and no
* block with functional invocation.
*/
public final irubyobject callmethod threadcontext context  string name  irubyobject args
return runtimehelpers invoke context  this  name  args
public final irubyobject callmethod string name  irubyobject    args
return runtimehelpers invoke getruntime   getcurrentcontext    this  name  args
public final irubyobject callmethod string name
return runtimehelpers invoke getruntime   getcurrentcontext    this  name
/**
* will invoke a named method with the supplied arguments and
* supplied block with functional invocation.
*/
public final irubyobject callmethod threadcontext context  string name  irubyobject args  block block
return runtimehelpers invoke context  this  name  args  block
/**
* will invoke an indexed method with the no arguments and no
* block.
*/
@deprecated
public final irubyobject callmethod threadcontext context  int methodindex  string name
return runtimehelpers invoke context  this  name
/**
* will invoke an indexed method with the one argument and no
* block with a functional invocation.
*/
@deprecated
public final irubyobject callmethod threadcontext context  int methodindex  string name  irubyobject arg
return runtimehelpers invoke context  this  name  arg  block null_block
/**
* does this object represent nil? see the docs for the {@link
* #nil_f} flag for more information.
*/
public final boolean isnil
return  flags   nil_f     0
/**
* is this value a true value or not? based on the {@link #false_f} flag.
*/
public final boolean istrue
return  flags   false_f     0
/**
* is this value a false value or not? based on the {@link #false_f} flag.
*/
public final boolean isfalse
return  flags   false_f     0
/**
* gets the taint. shortcut for getflag(tainted_f).
*
* @return true if this object is tainted
*/
public boolean istaint
return  flags   tainted_f     0
/**
* sets the taint flag. shortcut for setflag(tainted_f, taint)
*
* @param taint should this object be tainted or not?
*/
public void settaint boolean taint
// jruby-4113: callers should not call settaint on immediate objects
if  isimmediate    return
if  taint
flags    tainted_f
else
flags    ~tainted_f
/** obj_infect
*
* infects this object with traits from the argument obj. in real
* terms this currently means that if obj is tainted, this object
* will get tainted too. it's possible to hijack this method to do
* other infections if that would be interesting.
*/
public irubyobject infectby irubyobject obj
if  obj istaint    settaint true
if  obj isuntrusted    setuntrusted true
return this
final rubybasicobject infectby rubybasicobject obj
flags     obj flags    tainted_f   untrusted_f
return this
final rubybasicobject infectby int tuflags
flags     tuflags    tainted_f   untrusted_f
return this
/**
* is this value frozen or not? shortcut for doing
* getflag(frozen_f).
*
* @return true if this object is frozen, false otherwise
*/
public boolean isfrozen
return  flags   frozen_f     0
/**
* sets whether this object is frozen or not. shortcut for doing
* setflag(frozen_f, frozen).
*
* @param frozen should this object be frozen?
*/
public void setfrozen boolean frozen
if  frozen
flags    frozen_f
else
flags    ~frozen_f
/**
* is this value untrusted or not? shortcut for doing
* getflag(untrusted_f).
*
* @return true if this object is frozen, false otherwise
*/
public boolean isuntrusted
return  flags   untrusted_f     0
/**
* sets whether this object is frozen or not. shortcut for doing
* setflag(frozen_f, frozen).
*
* @param frozen should this object be frozen?
*/
public void setuntrusted boolean untrusted
if  untrusted
flags    untrusted_f
else
flags    ~untrusted_f
/**
*  is object immediate (def: fixnum, symbol, true, false, nil?).
*/
public boolean isimmediate
return false
/**
* if exist return the meta-class else return the type of the object.
*
*/
public final rubyclass getmetaclass
return metaclass
/** rb_singleton_class
*
* note: this method is specialized for rubyfixnum, rubysymbol,
* rubynil and rubyboolean
*
* will either return the existing singleton class for this
* object, or create a new one and return that.
*/
public rubyclass getsingletonclass
rubyclass klass
if  getmetaclass   issingleton        metaclass getmetaclass    getattached      this
klass   getmetaclass
else
klass   makemetaclass getmetaclass
klass settaint istaint
if  isfrozen    klass setfrozen true
return klass
/** rb_make_metaclass
*
* will create a new meta class, insert this in the chain of
* classes for this specific object, and return the generated meta
* class.
*/
public rubyclass makemetaclass rubyclass superclass
metaclass klass   new metaclass getruntime    superclass  this      rb_class_boot
setmetaclass klass
klass setmetaclass superclass getrealclass   getmetaclass
superclass addsubclass klass
return klass
/**
* makes it possible to change the metaclass of an object. in
* practice, this is a simple version of smalltalks become, except
* that it doesn't work when we're dealing with subclasses. in
* practice it's used to change the singleton/meta class used,
* without changing the "real" inheritance chain.
*/
public void setmetaclass rubyclass metaclass
this metaclass   metaclass
/**
* @see org.jruby.runtime.builtin.irubyobject#gettype()
*/
public rubyclass gettype
return getmetaclass   getrealclass
/**
* does this object respond to the specified message? uses a
* shortcut if it can be proved that respond_to? haven't been
* overridden.
*/
public final boolean respondsto string name
if getmetaclass   searchmethod       getruntime   getrespondtomethod
return getmetaclass   ismethodbound name  false
else
return callmethod getruntime   getcurrentcontext     getruntime   newsymbol name   istrue
/**
* will return the runtime that this object is associated with.
*
* @return current runtime
*/
public final ruby getruntime
return getmetaclass   getclassruntime
/**
* will return the java interface that most closely can represent
* this object, when working through java integration
* translations.
*/
public class getjavaclass
object obj   datagetstruct
if  obj instanceof javaobject
return   javaobject obj  getvalue   getclass
return getclass
/** rb_to_id
*
* will try to convert this object to a string using the ruby
* "to_str" if the object isn't already a string. if this still
* doesn't work, will throw a ruby typeerror.
*
*/
public string asjavastring
irubyobject asstring   checkstringtype
if  asstring isnil    return   rubystring asstring  asjavastring
throw getruntime   newtypeerror inspect   tostring
/** rb_obj_as_string
*
* first converts this object into a string using the "to_s"
* method, infects it with the current taint and returns it. if
* to_s doesn't return a ruby string, {@link #anytostring} is used
* instead.
*/
public rubystring asstring
irubyobject str   runtimehelpers invoke getruntime   getcurrentcontext    this
if    str instanceof rubystring   return  rubystring anytostring
if  istaint    str settaint true
return  rubystring  str
/**
* tries to convert this object to a ruby array using the "to_ary"
* method.
*/
public rubyarray converttoarray
return  rubyarray  typeconverter converttotype this  getruntime   getarray
/**
* tries to convert this object to a ruby hash using the "to_hash"
* method.
*/
public rubyhash converttohash
return  rubyhash typeconverter converttotype this  getruntime   gethash
/**
* tries to convert this object to a ruby float using the "to_f"
* method.
*/
public rubyfloat converttofloat
return  rubyfloat  typeconverter converttotype this  getruntime   getfloat
/**
* tries to convert this object to a ruby integer using the "to_int"
* method.
*/
public rubyinteger converttointeger
return converttointeger
@deprecated
public rubyinteger converttointeger int methodindex  string convertmethod
return converttointeger convertmethod
/**
* tries to convert this object to a ruby integer using the
* supplied conversion method.
*/
public rubyinteger converttointeger string convertmethod
irubyobject val   typeconverter converttotype this  getruntime   getinteger    convertmethod  true
if    val instanceof rubyinteger   throw getruntime   newtypeerror getmetaclass   getname         convertmethod
return  rubyinteger val
/**
* tries to convert this object to a ruby string using the
* "to_str" method.
*/
public rubystring converttostring
return  rubystring  typeconverter converttotype this  getruntime   getstring
/**
* internal method that helps to convert any object into the
* format of a class name and a hex string inside of #<>.
*/
public irubyobject anytostring
string cname   getmetaclass   getrealclass   getname
/* 6:tags 16:addr 1:eos */
rubystring str   getruntime   newstring     cname       integer tohexstring system identityhashcode this
str settaint istaint
return str
/** rb_check_string_type
*
* tries to return a coerced string representation of this object,
* using "to_str". if that returns something other than a string
* or nil, an empty string will be returned.
*
*/
public irubyobject checkstringtype
irubyobject str   typeconverter converttotypewithcheck this  getruntime   getstring
if  str isnil        str instanceof rubystring
str   rubystring newemptystring getruntime
return str
/** rb_check_string_type
*
* tries to return a coerced string representation of this object,
* using "to_str". if that returns something other than a string
* or nil, an empty string will be returned.
*
*/
public irubyobject checkstringtype19
irubyobject str   typeconverter converttotypewithcheck19 this  getruntime   getstring
if  str isnil        str instanceof rubystring
str   rubystring newemptystring getruntime
return str
/** rb_check_array_type
*
* returns the result of trying to convert this object to an array
* with "to_ary".
*/
public irubyobject checkarraytype
return typeconverter converttotypewithcheck this  getruntime   getarray
// 1.9 rb_check_to_integer
irubyobject checkintegertype ruby runtime  irubyobject obj  string method
if  obj instanceof rubyfixnum  return obj
irubyobject conv   typeconverter converttotype obj  getruntime   getinteger    method  false
return conv instanceof rubyinteger ? conv   obj getruntime   getnil
/**
* @see irubyobject.tojava
*/
public object tojava class target
// for callers that unconditionally pass null retval type (jruby-4737)
if  target    void class  return null
if  datagetstruct   instanceof javaobject
// for interface impls
javaobject innerwrapper    javaobject datagetstruct
// ensure the object is associated with the wrapper we found it in,
// so that if it comes back we don't re-wrap it
if  target isassignablefrom innerwrapper getvalue   getclass
getruntime   getjavasupport   getobjectproxycache   put innerwrapper getvalue    this
return innerwrapper getvalue
else if  javautil isducktypeconvertable getclass    target
if   respondsto
return javautil convertproctointerface getruntime   getcurrentcontext    this  target
else if  target isassignablefrom getclass
return this
throw getruntime   newtypeerror     getclass         target
public irubyobject dup
if  isimmediate    throw getruntime   newtypeerror     getmetaclass   getname
irubyobject dup   getmetaclass   getrealclass   allocate
if  istaint    dup settaint true
if  isuntrusted    dup setuntrusted true
initcopy dup  this
return dup
/** init_copy
*
* initializes a copy with variable and special instance variable
* information, and then call the initialize_copy ruby method.
*/
private static void initcopy irubyobject clone  irubyobject original
assert  clone isfrozen         clone getmetaclass   getname
original copyspecialinstancevariables clone
if  original hasvariables    clone syncvariables original getvariablelist
if  original instanceof rubymodule    rubymodule  clone  syncconstants  rubymodule  original
/* fixme: finalizer should be dupped here */
clone callmethod clone getruntime   getcurrentcontext       original
/**
* lots of mri objects keep their state in non-lookupable ivars
* (e:g. range, struct, etc). this method is responsible for
* dupping our java field equivalents
*/
public void copyspecialinstancevariables irubyobject clone
/** rb_inspect
*
* the internal helper that ensures a rubystring instance is returned
* so dangerous casting can be omitted
* prefered over callmethod(context, "inspect")
*/
static rubystring inspect threadcontext context  irubyobject object
return rubystring objasstring context  object callmethod context
public irubyobject rbclone
if  isimmediate    throw getruntime   newtypeerror     getmetaclass   getname
// we're cloning ourselves, so we know the result should be a rubyobject
rubyobject clone    rubyobject getmetaclass   getrealclass   allocate
clone setmetaclass getsingletonclassclone
if  istaint    clone settaint true
initcopy clone  this
if  isfrozen    clone setfrozen true
if  isuntrusted    clone setuntrusted true
return clone
/** rb_singleton_class_clone
*
* will make sure that if the current objects class is a
* singleton, it will get cloned.
*
* @return either a real class, or a clone of the current singleton class
*/
protected rubyclass getsingletonclassclone
rubyclass klass   getmetaclass
if   klass issingleton
return klass
metaclass clone   new metaclass getruntime    klass getsuperclass      metaclass  klass  getattached
clone flags   flags
if  this instanceof rubyclass
clone setmetaclass clone
else
clone setmetaclass klass getsingletonclassclone
if  klass hasvariables
clone syncvariables klass getvariablelist
clone syncconstants klass
klass clonemethods clone
metaclass  clone getmetaclass    setattached clone
return clone
/**
* specifically polymorphic method that are meant to be overridden
* by modules to specify that they are modules in an easy way.
*/
public boolean ismodule
return false
/**
* specifically polymorphic method that are meant to be overridden
* by classes to specify that they are classes in an easy way.
*/
public boolean isclass
return false
/**
* @see org.jruby.runtime.builtin.irubyobject#datawrapstruct()
*/
public synchronized void datawrapstruct object obj
if  obj    null
removeinternalvariable
else
fastsetinternalvariable    obj
// the datastruct is a place where custom information can be
// contained for core implementations that doesn't necessarily
// want to go to the trouble of creating a subclass of
// rubyobject. the openssl implementation uses this heavily to
// save holder objects containing java cryptography objects.
// java integration uses this to store the java object ref.
//protected transient object datastruct;
/**
* @see org.jruby.runtime.builtin.irubyobject#datagetstruct()
*/
public synchronized object datagetstruct
return fastgetinternalvariable
// equivalent of data_get_struct
// this will first check that the object in question is actually a t_data equivalent.
public synchronized object datagetstructchecked
typeconverter checkdata this
return this fastgetinternalvariable
/** rb_obj_id
*
* return the internal id of an object.
*/
public irubyobject id
ruby runtime   getruntime
long id
// the logic here is to use the special objectid accessor slot from the
// parent as a lazy store for an object id. ids are generated atomically,
// in serial, and guaranteed unique for up to 2^63 objects. the special
// objectid slot is managed separately from the "normal" vars so it
// does not marshal, clone/dup, or refuse to be initially set when the
// object is frozen.
synchronized  this
rubyclass variableaccessor objectidaccessor   getmetaclass   getrealclass   getobjectidaccessorforwrite
id    long objectidaccessor get this
if  id    null
if  runtime isobjectspaceenabled
id   runtime getobjectspace   idof this
else
id   objectspace calculateobjectid this
// we use a direct path here to avoid frozen checks
setobjectid objectidaccessor getindex    id
return runtime newfixnum id
/** rb_obj_inspect
*
*  call-seq:
*     obj.inspect   => string
*
*  returns a string containing a human-readable representation of
*  <i>obj</i>. if not overridden, uses the <code>to_s</code> method to
*  generate the string.
*
*     [ 1, 2, 3..4, 'five' ].inspect   #=> "[1, 2, 3..4, \"five\"]"
*     time.new.inspect                 #=> "wed apr 09 08:54:39 cdt 2003"
*/
public irubyobject inspect
ruby runtime   getruntime
if    isimmediate         this instanceof rubymodule     hasvariables
return hashyinspect
if  isnil    return rubynil inspect this
return runtimehelpers invoke runtime getcurrentcontext    this
public irubyobject hashyinspect
ruby runtime   getruntime
stringbuilder part   new stringbuilder
string cname   getmetaclass   getrealclass   getname
part append    append cname  append
part append integer tohexstring inspecthashcode
if  runtime isinspecting this
/* 6:tags 16:addr 1:eos */
part append
return runtime newstring part tostring
try
runtime registerinspecting this
return runtime newstring inspectobj part  tostring
finally
runtime unregisterinspecting this
/**
* for most objects, the hash used in the default #inspect is just the
* identity hashcode of the actual object.
*
* see org.jruby.java.proxies.javaproxy for a divergent case.
*
* @return the identity hashcode of this object
*/
protected int inspecthashcode
return system identityhashcode this
/** inspect_obj
*
* the internal helper method that takes care of the part of the
* inspection that inspects instance variables.
*/
private stringbuilder inspectobj stringbuilder part
threadcontext context   getruntime   getcurrentcontext
string sep
for  variable<irubyobject> ivar   getinstancevariablelist
part append sep  append    append ivar getname    append
part append ivar getvalue   callmethod context
sep
part append
return part
// methods of the object class (rb_obj_*):
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject op_not threadcontext context
return context getruntime   newboolean  this istrue
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject op_not_equal threadcontext context  irubyobject other
return context getruntime   newboolean  op_equal context  other  istrue
public int compareto irubyobject other
return  int callmethod getruntime   getcurrentcontext       other  converttointeger   getlongvalue
public irubyobject op_equal threadcontext context  irubyobject obj
// remain unimplemented due to problems with the double java hierarchy
return context getruntime   getnil
/** rb_obj_equal
*
* will by default use identity equality to compare objects. this
* follows the ruby semantics.
*
* the name of this method doesn't follow the convention because hierarchy problems
*/
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject op_equal_19 threadcontext context  irubyobject obj
return this    obj ? context getruntime   gettrue     context getruntime   getfalse
public irubyobject op_eqq threadcontext context  irubyobject other
// remain unimplemented due to problems with the double java hierarchy
return context getruntime   getnil
@jrubymethod name      required   1  compat   compatversion ruby1_9
public irubyobject equal_p19 threadcontext context  irubyobject other
return op_equal_19 context  other
/**
* helper method for checking equality, first using java identity
* equality, and then calling the "==" method.
*/
protected static boolean equalinternal final threadcontext context  final irubyobject that  final irubyobject other
return that    other    that callmethod context     other  istrue
/** method used for hash key comparison (specialized for string, symbol and fixnum)
*
* will by default just call the ruby method "eql?"
*/
public boolean eql irubyobject other
return callmethod getruntime   getcurrentcontext       other  istrue
/**
* adds the specified object as a finalizer for this object.
*/
public void addfinalizer irubyobject f
finalizer finalizer    finalizer fastgetinternalvariable
if  finalizer    null
finalizer   new finalizer  rubyfixnum id
fastsetinternalvariable    finalizer
getruntime   addfinalizer finalizer
finalizer addfinalizer f
/**
* remove all the finalizers for this object.
*/
public void removefinalizers
finalizer finalizer    finalizer fastgetinternalvariable
if  finalizer    null
finalizer removefinalizers
removeinternalvariable
getruntime   removefinalizer finalizer
private object getvariabletableforread
return vartable
private synchronized object getvariabletableforwrite int index
if  vartable    null_object_array
if  debug  system out println     vartable length       getmetaclass   getrealclass   getvariabletablesizewithobjectid
vartable   new object
else if  vartable length <  index
if  debug  system out println     vartable length       getmetaclass   getrealclass   getvariabletablesizewithobjectid
object newtable   new object
system arraycopy vartable  0  newtable  0  vartable length
vartable   newtable
return vartable
public object getvariable int index
if  index < 0  return null
object ivartable   getvariabletableforread
if  ivartable length > index  return ivartable
return null
public synchronized void setvariable int index  object value
ensureinstancevariablessettable
if  index < 0  return
object ivartable   getvariabletableforwrite index
ivartable   value
private synchronized void setobjectid int index  long value
if  index < 0  return
object ivartable   getvariabletableforwrite index
ivartable   value
//
// common variable methods
//
/**
* returns true if object has any variables, defined as:
* <ul>
* <li> instance variables
* <li> class variables
* <li> constants
* <li> internal variables, such as those used when marshaling ranges and exceptions
* </ul>
* @return true if object has any variables, else false
*/
public boolean hasvariables
// we check both to exclude object_id
return getmetaclass   getrealclass   getvariabletablesize   > 0    vartable length > 0
/**
* returns the amount of instance variables, class variables,
* constants and internal variables this object has.
*/
@deprecated
public int getvariablecount
// we use min to exclude object_id
return math min vartable length  getmetaclass   getrealclass   getvariabletablesize
/**
* gets a list of all variables in this object.
*/
// todo: must override in rubymodule to pick up constants
public list<variable<object>> getvariablelist
map<string  rubyclass variableaccessor> ivaraccessors   getmetaclass   getrealclass   getvariableaccessorsforread
arraylist<variable<object>> list   new arraylist<variable<object>>
for  map entry<string  rubyclass variableaccessor> entry   ivaraccessors entryset
object value   entry getvalue   get this
if  value    null  continue
list add new variableentry<object> entry getkey    value
return list
/**
* gets a name list of all variables in this object.
*/
// todo: must override in rubymodule to pick up constants
public list<string> getvariablenamelist
map<string  rubyclass variableaccessor> ivaraccessors   getmetaclass   getrealclass   getvariableaccessorsforread
arraylist<string> list   new arraylist<string>
for  map entry<string  rubyclass variableaccessor> entry   ivaraccessors entryset
object value   entry getvalue   get this
if  value    null  continue
list add entry getkey
return list
/**
* checks if the variable table contains a variable of the
* specified name.
*/
protected boolean variabletablecontains string name
return getmetaclass   getrealclass   getvariableaccessorforread name  get this     null
/**
* checks if the variable table contains the the variable of the
* specified name, where the precondition is that the name must be
* an interned java string.
*/
protected boolean variabletablefastcontains string internedname
return variabletablecontains internedname
/**
* fetch an object from the variable table based on the name.
*
* @return the object or null if not found
*/
protected object variabletablefetch string name
return getmetaclass   getrealclass   getvariableaccessorforread name  get this
/**
* fetch an object from the variable table based on the name,
* where the name must be an interned java string.
*
* @return the object or null if not found
*/
protected object variabletablefastfetch string internedname
return variabletablefetch internedname
/**
* store a value in the variable store under the specific name.
*/
protected object variabletablestore string name  object value
getmetaclass   getrealclass   getvariableaccessorforwrite name  set this  value
return value
/**
* will store the value under the specified name, where the name
* needs to be an interned java string.
*/
protected object variabletablefaststore string internedname  object value
return variabletablestore internedname  value
/**
* removes the entry with the specified name from the variable
* table, and returning the removed value.
*/
protected object variabletableremove string name
synchronized this
object value   getmetaclass   getrealclass   getvariableaccessorforread name  get this
getmetaclass   getrealclass   getvariableaccessorforwrite name  set this  null
return value
/**
* synchronize the variable table with the argument. in real terms
* this means copy all entries into a newly allocated table.
*/
protected void variabletablesync list<variable<object>> vars
synchronized this
for  variable<object> var   vars
variabletablestore var getname    var getvalue
//
// internal variable methods
//
/**
* dummy method to avoid a cast, and to avoid polluting the
* irubyobject interface with all the instance variable management
* methods.
*/
public internalvariables getinternalvariables
return this
/**
* @see org.jruby.runtime.builtin.internalvariables#hasinternalvariable
*/
public boolean hasinternalvariable string name
assert  idutil isrubyvariable name
return variabletablecontains name
/**
* @see org.jruby.runtime.builtin.internalvariables#fasthasinternalvariable
*/
public boolean fasthasinternalvariable string internedname
assert  idutil isrubyvariable internedname
return variabletablefastcontains internedname
/**
* @see org.jruby.runtime.builtin.internalvariables#getinternalvariable
*/
public object getinternalvariable string name
assert  idutil isrubyvariable name
return variabletablefetch name
/**
* @see org.jruby.runtime.builtin.internalvariables#fastgetinternalvariable
*/
public object fastgetinternalvariable string internedname
assert  idutil isrubyvariable internedname
return variabletablefastfetch internedname
/**
* @see org.jruby.runtime.builtin.internalvariables#setinternalvariable
*/
public void setinternalvariable string name  object value
assert  idutil isrubyvariable name
variabletablestore name  value
/**
* @see org.jruby.runtime.builtin.internalvariables#fastsetinternalvariable
*/
public void fastsetinternalvariable string internedname  object value
assert  idutil isrubyvariable internedname
variabletablefaststore internedname  value
/**
* @see org.jruby.runtime.builtin.internalvariables#removeinternalvariable
*/
public object removeinternalvariable string name
assert  idutil isrubyvariable name
return variabletableremove name
/**
* sync one variable table with another - this is used to make
* rbclone work correctly.
*/
public void syncvariables list<variable<object>> variables
variabletablesync variables
//
// instance variable api methods
//
/**
* dummy method to avoid a cast, and to avoid polluting the
* irubyobject interface with all the instance variable management
* methods.
*/
public instancevariables getinstancevariables
return this
/**
* @see org.jruby.runtime.builtin.instancevariables#hasinstancevariable
*/
public boolean hasinstancevariable string name
assert idutil isinstancevariable name
return variabletablecontains name
/**
* @see org.jruby.runtime.builtin.instancevariables#fasthasinstancevariable
*/
public boolean fasthasinstancevariable string internedname
assert idutil isinstancevariable internedname
return variabletablefastcontains internedname
/**
* @see org.jruby.runtime.builtin.instancevariables#getinstancevariable
*/
public irubyobject getinstancevariable string name
assert idutil isinstancevariable name
return  irubyobject variabletablefetch name
/**
* @see org.jruby.runtime.builtin.instancevariables#fastgetinstancevariable
*/
public irubyobject fastgetinstancevariable string internedname
assert idutil isinstancevariable internedname
return  irubyobject variabletablefastfetch internedname
/** rb_iv_set / rb_ivar_set
*
* @see org.jruby.runtime.builtin.instancevariables#setinstancevariable
*/
public irubyobject setinstancevariable string name  irubyobject value
assert idutil isinstancevariable name     value    null
ensureinstancevariablessettable
return  irubyobject variabletablestore name  value
/**
* @see org.jruby.runtime.builtin.instancevariables#fastsetinstancevariable
*/
public irubyobject fastsetinstancevariable string internedname  irubyobject value
assert idutil isinstancevariable internedname     value    null
ensureinstancevariablessettable
return  irubyobject variabletablefaststore internedname  value
/**
* @see org.jruby.runtime.builtin.instancevariables#removeinstancevariable
*/
public irubyobject removeinstancevariable string name
assert idutil isinstancevariable name
ensureinstancevariablessettable
return  irubyobject variabletableremove name
/**
* gets a list of all variables in this object.
*/
// todo: must override in rubymodule to pick up constants
public list<variable<irubyobject>> getinstancevariablelist
map<string  rubyclass variableaccessor> ivaraccessors   getmetaclass   getvariableaccessorsforread
arraylist<variable<irubyobject>> list   new arraylist<variable<irubyobject>>
for  map entry<string  rubyclass variableaccessor> entry   ivaraccessors entryset
object value   entry getvalue   get this
if  value    null      value instanceof irubyobject      idutil isinstancevariable entry getkey     continue
list add new variableentry<irubyobject> entry getkey     irubyobject value
return list
/**
* gets a name list of all variables in this object.
*/
// todo: must override in rubymodule to pick up constants
public list<string> getinstancevariablenamelist
map<string  rubyclass variableaccessor> ivaraccessors   getmetaclass   getrealclass   getvariableaccessorsforread
arraylist<string> list   new arraylist<string>
for  map entry<string  rubyclass variableaccessor> entry   ivaraccessors entryset
object value   entry getvalue   get this
if  value    null      value instanceof irubyobject      idutil isinstancevariable entry getkey     continue
list add entry getkey
return list
/**
* @see org.jruby.runtime.builtin.instancevariables#getinstancevariablenamelist
*/
public void copyinstancevariablesinto final instancevariables other
for  variable<irubyobject> var   getinstancevariablelist
synchronized  this
other setinstancevariable var getname    var getvalue
/**
* makes sure that instance variables can be set on this object,
* including information about whether this object is frozen, or
* tainted. will throw a suitable exception in that case.
*/
protected final void ensureinstancevariablessettable
if   isfrozen       getruntime   getsafelevel   < 4    istaint
return
if  getruntime   getsafelevel   >  4     istaint
throw getruntime   newsecurityerror err_insecure_set_inst_var
if  isfrozen
if  this instanceof rubymodule
throw getruntime   newfrozenerror
else
throw getruntime   newfrozenerror
public int getnativetypeindex
throw new unsupportedoperationexception
/**
* a method to determine whether the method named by methodname is a builtin
* method.  this means a method with a jrubymethod annotation written in
* java.
*
* @param methodname to look for.
* @return true if so
*/
public boolean isbuiltin string methodname
dynamicmethod method   getmetaclass   searchmethodinner methodname
return method    null    method isbuiltin
/**
* class that keeps track of the finalizers for the object under
* operation.
*/
public static class finalizer implements finalizable
private rubyfixnum id
private irubyobject firstfinalizer
private list<irubyobject> finalizers
private atomicboolean finalized
public finalizer rubyfixnum id
this id   id
this finalized   new atomicboolean false
public void addfinalizer irubyobject finalizer
if  firstfinalizer    null
firstfinalizer   finalizer
else
if  finalizers    null  finalizers   new arraylist<irubyobject> 4
finalizers add finalizer
public void removefinalizers
firstfinalizer   null
finalizers   null
@override
public void finalize
if  finalized compareandset false  true
if  firstfinalizer    null  callfinalizer firstfinalizer
if  finalizers    null
for  int i   0  i < finalizers size    i
callfinalizer finalizers get i
private void callfinalizer irubyobject finalizer
runtimehelpers invoke
finalizer getruntime   getcurrentcontext
finalizer     id