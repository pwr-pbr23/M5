/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2005 david corbin <dcorbin@users.sourceforge.net>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import java io printstream
import java lang reflect member
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby javasupport java
import org jruby javasupport javaobject
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
import org jruby util safepropertyaccessor
@jrubyclass name      parent
public class nativeexception extends rubyexception
private final throwable cause
public static final string class_name
private final ruby runtime
public nativeexception ruby runtime  rubyclass rubyclass  throwable cause
super runtime  rubyclass  cause getclass   getname         cause getmessage
this runtime   runtime
this cause   cause
public static rubyclass createclass ruby runtime  rubyclass baseclass
// fixme: if nativeexception is expected to be used from ruby code, it should provide
// a real allocator to be used. otherwise class.new will fail, as will marshalling. jruby-415
rubyclass exceptionclass   runtime defineclass class_name  baseclass  objectallocator not_allocatable_allocator
exceptionclass defineannotatedmethods nativeexception class
return exceptionclass
@jrubymethod frame   true
public irubyobject cause block unusedblock
return java getinstance getruntime    cause
public irubyobject backtrace
irubyobject rubytrace   super backtrace
if  rubytrace isnil
return rubytrace
rubyarray array    rubyarray  rubytrace dup
stacktraceelement stacktrace   cause getstacktrace
for  int i   stacktrace length   1  i >  0  i
stacktraceelement element   stacktrace
string classname   element getclassname
string line   null
if  element getfilename      null
line   classname       element getlinenumber         element getmethodname
else
int index   classname lastindexof
string packagename   null
if  index     1
packagename
else
packagename   classname substring 0  index
line   packagename replace         element getfilename         element getlinenumber         element getmethodname
rubystring string   runtime newstring line
array unshift string
return array
public void trimstacktrace member target
throwable t   new throwable
stacktraceelement origstacktrace   cause getstacktrace
stacktraceelement currentstacktrace   t getstacktrace
int skip   0
for  int i   1
i <  origstacktrace length    i <  currentstacktrace length
i
stacktraceelement a   origstacktrace
stacktraceelement b   currentstacktrace
if  a equals b
skip    1
else
break
// if we know what method was being called, strip everything
// before the call. this hides the jruby and reflection internals.
if  target    null
string classname   target getdeclaringclass   getname
string methodname   target getname
for  int i   origstacktrace length   skip   1  i >  0    i
stacktraceelement frame   origstacktrace
if  frame getclassname   equals classname
frame getmethodname   equals methodname
skip   origstacktrace length   i   1
break
if  skip > 0
stacktraceelement newstacktrace
new stacktraceelement
for  int i   0  i < newstacktrace length    i
newstacktrace   origstacktrace
cause setstacktrace newstacktrace
public void printbacktrace printstream errorstream
super printbacktrace errorstream
if  getruntime   getdebug   istrue
errorstream println
cause printstacktrace errorstream
public throwable getcause
return cause