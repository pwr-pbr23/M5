/*
***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2007 ola bini <ola@ologix.com>
* copyright (c) 2007 thomas e enebo <enebo@acm.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby ext socket
import static com kenai constantine platform addressfamily
import java io filedescriptor
import java io ioexception
import java net connectexception
import java net inet4address
import java net inet6address
import java net inetaddress
import java net inetsocketaddress
import java net socket
import java net unknownhostexception
import java nio channels closedchannelexception
import java nio channels selectionkey
import java nio channels socketchannel
import org jruby ruby
import org jruby rubyclass
import org jruby rubyio
import org jruby rubynumeric
import org jruby rubystring
import org jruby anno jrubymethod
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby util io modeflags
import org jruby util io channeldescriptor
import org jruby util io invalidvalueexception
public class rubytcpsocket extends rubyipsocket
static void createtcpsocket ruby runtime
rubyclass rb_ctcpsocket   runtime defineclass    runtime fastgetclass     tcpsocket_allocator
rb_ctcpsocket includemodule runtime fastgetclass    fastgetconstant
rb_ctcpsocket defineannotatedmethods rubytcpsocket class
runtime getobject   fastsetconstant   rb_ctcpsocket
private static objectallocator tcpsocket_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubytcpsocket runtime  klass
public rubytcpsocket ruby runtime  rubyclass type
super runtime  type
private int getportfrom ruby runtime  irubyobject arg
return rubynumeric fix2int arg instanceof rubystring ?
rubynumeric str2inum runtime   rubystring  arg  0  true    arg
@jrubymethod required   2  optional   2  visibility   visibility private  backtrace   true
public irubyobject initialize threadcontext context  irubyobject args
arity checkargumentcount context getruntime    args  2  4
string remotehost   args isnil  ?     args converttostring   tostring
int remoteport   getportfrom context getruntime    args
string localhost   args length >  3     args isnil   ? args converttostring   tostring     null
int localport   args length    4 ? getportfrom context getruntime    args    0
try
// this is a bit convoluted because (1) socketchannel.bind is only in jdk 7 and
// (2) socket.getchannel() seems to return null in some cases
final socketchannel channel   socketchannel open
final socket socket   channel socket
if  localhost    null
socket bind  new inetsocketaddress inetaddress getbyname localhost   localport
try
channel configureblocking false
channel connect  new inetsocketaddress inetaddress getbyname remotehost   remoteport
context getthread   select channel  this  selectionkey op_connect
channel finishconnect
finally
channel configureblocking true
initsocket context getruntime    new channeldescriptor channel  rubyio getnewfileno    new modeflags modeflags rdwr   new filedescriptor
catch  invalidvalueexception ex
throw context getruntime   newerrnoeinvalerror
catch connectexception e
throw context getruntime   newerrnoeconnrefusederror
catch  closedchannelexception cce
throw context getruntime   newerrnoeconnrefusederror
catch unknownhostexception e
throw sockerr context getruntime
catch ioexception e
throw sockerr context getruntime
catch  illegalargumentexception iae
throw sockerr context getruntime    iae getmessage
return this
@deprecated
public static irubyobject open irubyobject recv  irubyobject args  block block
return open recv getruntime   getcurrentcontext    recv  args  block
@jrubymethod frame   true  rest   true  meta   true
public static irubyobject open threadcontext context  irubyobject recv  irubyobject args  block block
rubytcpsocket sock    rubytcpsocket recv callmethod context   args
if   block isgiven    return sock
try
return block yield context  sock
finally
if  sock openfile isopen    sock close
@deprecated
public static irubyobject gethostbyname irubyobject recv  irubyobject hostname
return gethostbyname recv getruntime   getcurrentcontext    recv  hostname
@jrubymethod meta   true
public static irubyobject gethostbyname threadcontext context  irubyobject recv  irubyobject hostname
try
irubyobject ret   new irubyobject
ruby r   context getruntime
inetaddress addr
string hoststring   hostname converttostring   tostring
addr   inetaddress getbyname hoststring
ret   r newstring addr getcanonicalhostname
ret   r newarray
ret   r newstring addr gethostaddress
if  addr instanceof inet4address
inet4address addr4    inet4address addr
ret   r newfixnum af_inet     af_inet
else if  addr instanceof inet6address
inet6address addr6    inet6address addr
ret   r newfixnum af_inet6     af_inet
return r newarraynocopy ret
catch unknownhostexception e
throw sockerr context getruntime