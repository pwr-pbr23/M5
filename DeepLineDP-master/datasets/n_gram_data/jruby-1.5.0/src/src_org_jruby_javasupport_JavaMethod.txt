/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 chad fowler <chadfowler@chadfowler.com>
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2004 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2005 charles o nutter <headius@headius.com>
* copyright (c) 2006 kresten krab thorup <krab@gnu.org>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby javasupport
import java lang annotation annotation
import java lang reflect accessibleobject
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java lang reflect type
import org jruby ruby
import org jruby rubyboolean
import org jruby rubyclass
import org jruby rubyinstanceconfig
import org jruby rubymodule
import org jruby rubystring
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby compiler util handlefactory
import org jruby compiler util handlefactory handle
import org jruby exceptions raiseexception
import org jruby javasupport proxy internaljavaproxy
import org jruby javasupport proxy javaproxyclass
import org jruby javasupport proxy javaproxymethod
import org jruby runtime objectallocator
import org jruby runtime builtin irubyobject
import org jruby util codegenutils
@jrubyclass name
public class javamethod extends javacallable
private final static boolean use_handles   rubyinstanceconfig use_generated_handles
private final static boolean handle_debug   false
private final method method
private final class boxedreturntype
private final boolean isfinal
private final handle handle
private final javautil javaconverter returnconverter
public object getvalue
return method
public static rubyclass createjavamethodclass ruby runtime  rubymodule javamodule
// todo: not_allocatable_allocator is probably ok here, since we don't intend for people to monkey with
// this type and it can't be marshalled. confirm. jruby-415
rubyclass result
javamodule defineclassunder    runtime getobject    objectallocator not_allocatable_allocator
javaaccessibleobject registerrubymethods runtime  result
javacallable registerrubymethods runtime  result
result defineannotatedmethods javamethod class
return result
public javamethod ruby runtime  method method
super runtime  runtime getjavasupport   getjavamethodclass    method getparametertypes
this method   method
this isfinal   modifier isfinal method getmodifiers
if  method getreturntype   isprimitive      method getreturntype      void class
this boxedreturntype   codegenutils getboxtype method getreturntype
else
this boxedreturntype   method getreturntype
boolean methodispublic   modifier ispublic method getmodifiers
boolean classispublic   modifier ispublic method getdeclaringclass   getmodifiers
// try to find a "totally" public version of the method using superclasses and interfaces
if  methodispublic     classispublic
if  handle_debug  system out println     method
method newmethod   method
class newclass   method getdeclaringclass
outer  while  newclass    null
// try class
try
if  handle_debug  system out println     method       newclass
newmethod   newclass getmethod method getname    method getparametertypes
// got it; break if this class is public
if  modifier ispublic newmethod getdeclaringclass   getmodifiers
break
catch  nosuchmethodexception nsme
// try interfaces
for  class ifc   newclass getinterfaces
try
if  handle_debug  system out println     method       ifc
newmethod   ifc getmethod method getname    method getparametertypes
break outer
catch  nosuchmethodexception nsme
// go to superclass
newclass   newclass getsuperclass
newmethod   null
if  newmethod    null
if  handle_debug  system out println     newmethod
method   newmethod
methodispublic   modifier ispublic method getmodifiers
classispublic   modifier ispublic method getdeclaringclass   getmodifiers
// prepare a faster handle if handles are enabled and the method and class are public
handle tmphandle   null
try
if  use_handles
// must be a public method
methodispublic
// must be a public class
classispublic
// must have been loaded from our known classloader hierarchy
runtime getjrubyclassloader   loadclass method getdeclaringclass   getcanonicalname       method getdeclaringclass
tmphandle   handlefactory createhandle runtime getjrubyclassloader    method
else
tmphandle   null
catch  classnotfoundexception cnfe
tmphandle   null
if  tmphandle    null
if  handle_debug  system out println     method
handle   tmphandle
// special classes like collections.empty_list are inner classes that are private but
// implement public interfaces.  their methods are all public methods for the public
// interface.  let these public methods execute via setaccessible(true).
if  methodispublic
modifier ispublic method getdeclaringclass   getmodifiers
accessibleobject   setaccessible true
returnconverter   javautil getjavaconverter method getreturntype
public static javamethod create ruby runtime  method method
return new javamethod runtime  method
public static javamethod create ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
try
method method   javaclass getmethod methodname  argumenttypes
return create runtime  method
catch  nosuchmethodexception e
throw runtime newnameerror     methodname       javaclass getname
methodname
public static javamethod createdeclared ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
try
return create runtime  javaclass getdeclaredmethod methodname  argumenttypes
catch  nosuchmethodexception e
throw runtime newnameerror     methodname       javaclass getname
methodname
public static javamethod getmatchingdeclaredmethod ruby runtime  class<?> javaclass  string methodname  class<?> argumenttypes
// fixme: do we really want 'declared' methods?  includes private/protected, and does _not_
// include superclass methods.  also, the getdeclared calls may throw securityexception if
// we're running under a restrictive security policy.
try
return create runtime  javaclass getdeclaredmethod methodname  argumenttypes
catch  nosuchmethodexception e
// search through all declared methods to find a closest match
methodsearch  for  method method   javaclass getdeclaredmethods
if  method getname   equals methodname
class<?> targettypes   method getparametertypes
// for zero args case we can stop searching
if  targettypes length    0    argumenttypes length    0
return create runtime  method
typescan  for  int i   0  i < argumenttypes length  i
if  i >  targettypes length  continue methodsearch
if  targettypes isassignablefrom argumenttypes
continue typescan
else
continue methodsearch
// if we get here, we found a matching method, use it
// todo: choose narrowest method by continuing to search
return create runtime  method
// no matching method found
return null
@override
public boolean equals object other
return other instanceof javamethod
this method      javamethod other  method
@override
public int hashcode
return method hashcode
@jrubymethod
@override
public rubystring name
return getruntime   newstring method getname
public int getarity
return parametertypes length
@jrubymethod name
@override
public rubyboolean public_p
return getruntime   newboolean modifier ispublic method getmodifiers
@jrubymethod name
public rubyboolean final_p
return getruntime   newboolean modifier isfinal method getmodifiers
@jrubymethod rest   true
public irubyobject invoke irubyobject args
checkarity args length   1
object arguments   new object
convertarguments args  arguments  1
irubyobject invokee   args
if invokee isnil
return invokewithexceptionhandling method  null  arguments
object javainvokee   null
if   isstatic
javainvokee   javautil unwrapjavavalue getruntime    invokee
if    method getdeclaringclass   isinstance javainvokee
throw getruntime   newtypeerror
javainvokee getclass   getname
method getdeclaringclass   getname
//
// this test really means, that this is a ruby-defined subclass of a java class
//
if  javainvokee instanceof internaljavaproxy
// don't bother to check if final method, it won't
// be there (not generated, can't be!)
modifier isfinal method getmodifiers
javaproxyclass jpc     internaljavaproxy  javainvokee
___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null
jpm hassuperimplementation
return invokewithexceptionhandling jpm getsupermethod    javainvokee  arguments
return invokewithexceptionhandling method  javainvokee  arguments
@jrubymethod rest   true
public irubyobject invoke_static irubyobject args
checkarity args length
object arguments   new object
system arraycopy args  0  arguments  0  arguments length
convertarguments args  arguments  0
return invokewithexceptionhandling method  null  arguments
@jrubymethod
public irubyobject return_type
class<?> klass   method getreturntype
if  klass equals void class
return getruntime   getnil
return javaclass get getruntime    klass
@jrubymethod
public irubyobject type_parameters
return java getinstance getruntime    method gettypeparameters
public irubyobject invokedirect object javainvokee  object args
checkarity args length
checkinstanceof javainvokee
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee  args
return invokedirectwithexceptionhandling method  javainvokee  args
public irubyobject invokedirect object javainvokee
assert method getdeclaringclass   isinstance javainvokee
checkarity 0
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee
return invokedirectwithexceptionhandling method  javainvokee
public irubyobject invokedirect object javainvokee  object arg0
assert method getdeclaringclass   isinstance javainvokee
checkarity 1
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee  arg0
return invokedirectwithexceptionhandling method  javainvokee  arg0
public irubyobject invokedirect object javainvokee  object arg0  object arg1
assert method getdeclaringclass   isinstance javainvokee
checkarity 2
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee  arg0  arg1
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1
public irubyobject invokedirect object javainvokee  object arg0  object arg1  object arg2
assert method getdeclaringclass   isinstance javainvokee
checkarity 3
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee  arg0  arg1  arg2
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1  arg2
public irubyobject invokedirect object javainvokee  object arg0  object arg1  object arg2  object arg3
assert method getdeclaringclass   isinstance javainvokee
checkarity 4
if  mightbeproxy javainvokee
return tryproxyinvocation javainvokee  arg0  arg1  arg2  arg3
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1  arg2  arg3
public irubyobject invokestaticdirect object args
checkarity args length
return invokedirectwithexceptionhandling method  null  args
public irubyobject invokestaticdirect
checkarity 0
return invokedirectwithexceptionhandling method  null
public irubyobject invokestaticdirect object arg0
checkarity 1
return invokedirectwithexceptionhandling method  null  arg0
public irubyobject invokestaticdirect object arg0  object arg1
checkarity 2
return invokedirectwithexceptionhandling method  null  arg0  arg1
public irubyobject invokestaticdirect object arg0  object arg1  object arg2
checkarity 3
return invokedirectwithexceptionhandling method  null  arg0  arg1  arg2
public irubyobject invokestaticdirect object arg0  object arg1  object arg2  object arg3
checkarity 4
return invokedirectwithexceptionhandling method  null  arg0  arg1  arg2  arg3
private void checkinstanceof object javainvokee  throws raiseexception
if   method getdeclaringclass   isinstance javainvokee
throw getruntime   newtypeerror         javainvokee getclass   getname         method getdeclaringclass   getname
private irubyobject invokewithexceptionhandling method method  object javainvokee  object arguments
try
object result   handle    null
? handle invoke javainvokee  arguments
method invoke javainvokee  arguments
return returnconverter convert getruntime    result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arguments
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectsuperwithexceptionhandling method method  object javainvokee  object    arguments
// super calls from proxies must use reflected method
// fixme: possible to make handles do the superclass call?
try
object result   method invoke javainvokee  arguments
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arguments
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee  object arguments
try
object result   handle    null
? handle invoke javainvokee  arguments
method invoke javainvokee  arguments
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arguments
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee
try
object result   handle    null
? handle invoke javainvokee
method invoke javainvokee
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee  object arg0
try
object result   handle    null
? handle invoke javainvokee  arg0
method invoke javainvokee  arg0
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arg0
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee  object arg0  object arg1
try
object result   handle    null
? handle invoke javainvokee  arg0  arg1
method invoke javainvokee  arg0  arg1
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arg0  arg1
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee  object arg0  object arg1  object arg2
try
object result   handle    null
? handle invoke javainvokee  arg0  arg1  arg2
method invoke javainvokee  arg0  arg1  arg2
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arg0  arg1  arg2
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject invokedirectwithexceptionhandling method method  object javainvokee  object arg0  object arg1  object arg2  object arg3
try
object result   handle    null
? handle invoke javainvokee  arg0  arg1  arg2  arg3
method invoke javainvokee  arg0  arg1  arg2  arg3
return convertreturn result
catch  illegalargumentexception iae
return handlelillegalargumentex method  iae  arg0  arg1  arg2  arg3
catch  illegalaccessexception iae
return handleillegalaccessex method  iae
catch  invocationtargetexception ite
return handleinvocationtargetex ite  method
catch  throwable t
return handlethrowable t  method
private irubyobject convertreturn object result
if  result    null    result getclass      boxedreturntype
// actual type does not exactly match method return type, re-get converter
// fixme: when the only autoconversions are primitives, this won't be needed
return javautil convertjavatousablerubyobject getruntime    result
return javautil convertjavatousablerubyobjectwithconverter getruntime    result  returnconverter
private irubyobject handleillegalaccessex method method  illegalaccessexception iae  throws raiseexception
throw getruntime   newtypeerror     method getname         iae getmessage
private irubyobject handlelillegalargumentex method method  illegalargumentexception iae  object    arguments  throws raiseexception
throw getruntime   newtypeerror
method getdeclaringclass   getsimplename
method getname
argument_types   inspect
dumpargtypes arguments
iae getmessage
private void convertarguments irubyobject argsin  object argsout  int from
class<?> types   parametertypes
for  int i   argsout length    i >  0
argsout   argsin tojava types
public class<?> getparametertypes
return parametertypes
public class<?> getexceptiontypes
return method getexceptiontypes
public type getgenericparametertypes
return method getgenericparametertypes
public type getgenericexceptiontypes
return method getgenericexceptiontypes
public annotation getparameterannotations
return method getparameterannotations
public boolean isvarargs
return method isvarargs
protected string nameoninspection
return     gettype   tostring         method getname
public rubyboolean static_p
return getruntime   newboolean isstatic
public rubyboolean bridge_p
return getruntime   newboolean method isbridge
private boolean isstatic
return modifier isstatic method getmodifiers
public int getmodifiers
return method getmodifiers
public string togenericstring
return method togenericstring
protected accessibleobject accessibleobject
return method
private boolean mightbeproxy object javainvokee
// this test really means, that this is a ruby-defined subclass of a java class
return javainvokee instanceof internaljavaproxy     isfinal
private irubyobject tryproxyinvocation object javainvokee  object    args
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee  args
else
return invokedirectwithexceptionhandling method  javainvokee  args
private irubyobject tryproxyinvocation object javainvokee
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee
else
return invokedirectwithexceptionhandling method  javainvokee
private irubyobject tryproxyinvocation object javainvokee  object arg0
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee  arg0
else
return invokedirectwithexceptionhandling method  javainvokee  arg0
private irubyobject tryproxyinvocation object javainvokee  object arg0  object arg1
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee  arg0  arg1
else
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1
private irubyobject tryproxyinvocation object javainvokee  object arg0  object arg1  object arg2
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee  arg0  arg1  arg2
else
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1  arg2
private irubyobject tryproxyinvocation object javainvokee  object arg0  object arg1  object arg2  object arg3
javaproxyclass jpc     internaljavaproxy  javainvokee  ___getproxyclass
javaproxymethod jpm
if   jpm   jpc getmethod method getname    parametertypes      null    jpm hassuperimplementation
return invokedirectsuperwithexceptionhandling jpm getsupermethod    javainvokee  arg0  arg1  arg2  arg3
else
return invokedirectwithexceptionhandling method  javainvokee  arg0  arg1  arg2  arg3
public static raiseexception newmethodnotfounderror ruby runtime  class target  string prettyname  string simplename
return runtime newnameerror     target getname         prettyname  simplename
public static raiseexception newargsizemismatcherror ruby runtime  class     argtypes
return runtime newargumenterror     codegenutils prettyparams argtypes