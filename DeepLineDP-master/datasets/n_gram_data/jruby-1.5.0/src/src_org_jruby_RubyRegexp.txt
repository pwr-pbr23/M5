/***** begin license block *****
* version: cpl 1.0/gpl 2.0/lgpl 2.1
*
* the contents of this file are subject to the common public
* license version 1.0 (the "license"); you may not use this file
* except in compliance with the license. you may obtain a copy of
* the license at http://www.eclipse.org/legal/cpl-v10.html
*
* software distributed under the license is distributed on an "as
* is" basis, without warranty of any kind, either express or
* implied. see the license for the specific language governing
* rights and limitations under the license.
*
* copyright (c) 2001 alan moore <alan_moore@gmx.net>
* copyright (c) 2001-2002 benoit cerrina <b.cerrina@wanadoo.fr>
* copyright (c) 2001-2004 jan arne petersen <jpetersen@uni-bonn.de>
* copyright (c) 2002-2004 anders bengtsson <ndrsbngtssn@yahoo.se>
* copyright (c) 2004-2005 thomas e enebo <enebo@acm.org>
* copyright (c) 2004 stefan matthias aust <sma@3plus4.de>
* copyright (c) 2005 david corbin <dcorbin@users.sourceforge.net>
* copyright (c) 2006 nick sieger <nicksieger@gmail.com>
* copyright (c) 2006 miguel covarrubias <mlcovarrubias@gmail.com>
*
* alternatively, the contents of this file may be used under the terms of
* either of the gnu general public license version 2 or later (the "gpl"),
* or the gnu lesser general public license version 2.1 or later (the "lgpl"),
* in which case the provisions of the gpl or the lgpl are applicable instead
* of those above. if you wish to allow use of your version of this file only
* under the terms of either the gpl or the lgpl, and not to allow others to
* use your version of this file under the terms of the cpl, indicate your
* decision by deleting the provisions above and replace them with the notice
* and other provisions required by the gpl or the lgpl. if you do not delete
* the provisions above, a recipient may use your version of this file under
* the terms of any one of the cpl, the gpl or the lgpl.
***** end license block *****/
package org jruby
import static org jruby anno framefield backref
import static org jruby anno framefield lastline
import java lang ref softreference
import java util iterator
import java util map
import java util concurrent concurrenthashmap
import org jcodings encoding
import org jcodings specific asciiencoding
import org jcodings specific usasciiencoding
import org jcodings specific utf8encoding
import org joni matcher
import org joni nameentry
import org joni option
import org joni regex
import org joni region
import org joni syntax
import org joni exception joniexception
import org jruby anno jrubyclass
import org jruby anno jrubymethod
import org jruby common irubywarnings id
import org jruby exceptions raiseexception
import org jruby parser reoptions
import org jruby runtime arity
import org jruby runtime block
import org jruby runtime classindex
import org jruby runtime dynamicscope
import org jruby runtime objectallocator
import org jruby runtime threadcontext
import org jruby runtime visibility
import org jruby runtime builtin irubyobject
import org jruby runtime encoding encodingcapable
import org jruby runtime marshal marshalstream
import org jruby runtime marshal unmarshalstream
import org jruby util bytelist
import org jruby util kcode
import org jruby util pack
import org jruby util sprintf
import org jruby util stringsupport
import org jruby util typeconverter
@jrubyclass name
public class rubyregexp extends rubyobject implements reoptions  encodingcapable
private kcode kcode
private regex pattern
private bytelist str   bytelist empty_bytelist
private static final int regexp_literal_f           user1_f
private static final int regexp_kcode_default       user2_f
private static final int regexp_encoding_none       user3_f
private static final int arg_option_mask            re_option_ignorecase   re_option_extended   re_option_multiline
private static final int arg_encoding_fixed         16
private static final int arg_encoding_none          32
public void setliteral
flags    regexp_literal_f
public void clearliteral
flags    ~regexp_literal_f
public boolean isliteral
return  flags   regexp_literal_f     0
public void setkcodedefault
flags    regexp_kcode_default
public void clearkcodedefault
flags    ~regexp_kcode_default
public boolean iskcodedefault
return  flags   regexp_kcode_default     0
public void setencodingnone
flags    regexp_encoding_none
public void clearencodingnone
flags    ~regexp_encoding_none
public boolean isencodingnone
return  flags   regexp_encoding_none     0
public kcode getkcode
return kcode
public encoding getencoding
return pattern getencoding
private static final class regexpcache
private volatile softreference<map<bytelist  regex>> cache   new softreference<map<bytelist  regex>> null
private map<bytelist  regex> get
map<bytelist  regex> patterncache   cache get
if  patterncache    null
patterncache   new concurrenthashmap<bytelist  regex> 5
cache   new softreference<map<bytelist  regex>> patterncache
return patterncache
private static final regexpcache patterncache   new regexpcache
private static final regexpcache quotedpatterncache   new regexpcache
private static final regexpcache preprocessedpatterncache   new regexpcache
private static regex makeregexp ruby runtime  bytelist bytes  int flags  encoding enc
try
int p   bytes getbegin
return new regex bytes getunsafebytes    p  p   bytes getrealsize    flags  enc  syntax default  runtime getwarnings
catch  exception e
if  runtime is1_9
raiseregexperror19 runtime  bytes  enc  flags  e getmessage
else
raiseregexperror runtime  bytes  enc  flags  e getmessage
return null     not reached
static regex getregexpfromcache ruby runtime  bytelist bytes  encoding enc  int options
map<bytelist  regex> cache   patterncache get
regex regex   cache get bytes
if  regex    null    regex getencoding      enc    regex getoptions      options  return regex
regex   makeregexp runtime  bytes  options  enc
cache put bytes  regex
return regex
static regex getquotedregexpfromcache ruby runtime  bytelist bytes  encoding enc  int options
map<bytelist  regex> cache   quotedpatterncache get
regex regex   cache get bytes
if  regex    null    regex getencoding      enc    regex getoptions      options  return regex
regex   makeregexp runtime  quote bytes  enc   options  enc
cache put bytes  regex
return regex
static regex getquotedregexpfromcache19 ruby runtime  bytelist bytes  int options  boolean asciionly
map<bytelist  regex> cache   quotedpatterncache get
regex regex   cache get bytes
encoding enc   asciionly ? usasciiencoding instance   bytes getencoding
if  regex    null    regex getencoding      enc    regex getoptions      options  return regex
bytelist quoted   quote19 bytes  asciionly
regex   makeregexp runtime  quoted  options  quoted getencoding
regex setuserobject quoted
cache put bytes  regex
return regex
private static regex getpreprocessedregexpfromcache ruby runtime  bytelist bytes  encoding enc  int options  errormode mode
map<bytelist  regex> cache   preprocessedpatterncache get
regex regex   cache get bytes
if  regex    null    regex getencoding      enc    regex getoptions      options  return regex
bytelist preprocessed   preprocess runtime  bytes  enc  new encoding null   errormode raise
regex   makeregexp runtime  preprocessed  options  enc
regex setuserobject preprocessed
cache put bytes  regex
return regex
public static rubyclass createregexpclass ruby runtime
rubyclass regexpclass   runtime defineclass    runtime getobject    regexp_allocator
runtime setregexp regexpclass
regexpclass index   classindex regexp
regexpclass setreifiedclass rubyregexp class
regexpclass kindof   new rubymodule kindof
@override
public boolean iskindof irubyobject obj  rubymodule type
return obj instanceof rubyregexp
regexpclass defineconstant    runtime newfixnum re_option_ignorecase
regexpclass defineconstant    runtime newfixnum re_option_extended
regexpclass defineconstant    runtime newfixnum re_option_multiline
if  runtime is1_9    regexpclass defineconstant    runtime newfixnum arg_encoding_fixed
regexpclass defineannotatedmethods rubyregexp class
return regexpclass
private static objectallocator regexp_allocator   new objectallocator
public irubyobject allocate ruby runtime  rubyclass klass
return new rubyregexp runtime  klass
@override
public int getnativetypeindex
return classindex regexp
/** used by allocator
*/
private rubyregexp ruby runtime  rubyclass klass
super runtime  klass
/** default constructor
*/
private rubyregexp ruby runtime
super runtime  runtime getregexp
private rubyregexp ruby runtime  bytelist str
this runtime
setkcodedefault
this kcode   runtime getkcode
this str   str
this pattern   getregexpfromcache runtime  str  kcode getencoding    0
private rubyregexp ruby runtime  bytelist str  int options
this runtime
setkcode runtime  options   0x7f      mask off   flag
this str   str
this pattern   getregexpfromcache runtime  str  kcode getencoding    options   0xf
// used only by the compiler/interpreter (will set the literal flag)
public static rubyregexp newregexp ruby runtime  string pattern  int options
return newregexp runtime  bytelist create pattern   options
// used only by the compiler/interpreter (will set the literal flag)
public static rubyregexp newregexp ruby runtime  bytelist pattern  int options
try
return new rubyregexp runtime  pattern  options
catch  raiseexception re
throw runtime newsyntaxerror re getmessage
// used only by the compiler/interpreter (will set the literal flag)
public static rubyregexp newdregexp ruby runtime  rubystring pattern  int options
try
return new rubyregexp runtime  pattern getbytelist    options
catch  raiseexception re
throw runtime newregexperror re getmessage
public static rubyregexp newregexp ruby runtime  bytelist pattern
return new rubyregexp runtime  pattern
static rubyregexp newregexp ruby runtime  bytelist str  regex pattern
rubyregexp regexp   new rubyregexp runtime
regexp str   str
regexp setkcode runtime  pattern getoptions
regexp pattern   pattern
return regexp
// internal usage (complex/rational)
static rubyregexp newdummyregexp ruby runtime  regex regex
rubyregexp regexp   new rubyregexp runtime
regexp pattern   regex
regexp str   bytelist empty_bytelist
regexp kcode   kcode none
return regexp
/** rb_get_kcode
*/
private int getkcode
if  kcode    kcode none
return 16
else if  kcode    kcode euc
return 32
else if  kcode    kcode sjis
return 48
else if  kcode    kcode utf8
return 64
return 0
/** rb_set_kcode
*/
private void setkcode ruby runtime  int options
clearkcodedefault
switch  options   ~0xf
case 0
default
setkcodedefault
kcode   runtime getkcode
break
case 16
kcode   kcode none
break
case 32
kcode   kcode euc
break
case 48
kcode   kcode sjis
break
case 64
kcode   kcode utf8
break
/** rb_reg_options
*/
private int getoptions
check
int options    pattern getoptions      re_option_ignorecase re_option_multiline re_option_extended
if   iskcodedefault    options    getkcode
return options
final regex getpattern
check
return pattern
private static void encodingmatcherror ruby runtime  regex pattern  encoding strenc
throw runtime newencodingcompatibilityerror
pattern getencoding         strenc
private encoding checkencoding rubystring str  boolean warn
if  str scanforcoderange      stringsupport cr_broken
throw getruntime   newargumenterror     str getencoding
check
encoding enc   str getencoding
if   enc isasciicompatible
if  enc    pattern getencoding    encodingmatcherror getruntime    pattern  enc
else if   iskcodedefault
if  enc    pattern getencoding
pattern getencoding   isasciicompatible
str scanforcoderange      stringsupport cr_7bit   encodingmatcherror getruntime    pattern  enc
enc   pattern getencoding
if  warn    isencodingnone      enc    asciiencoding instance    str scanforcoderange      stringsupport cr_7bit
getruntime   getwarnings   warn id regexp_match_against_string      enc
return enc
final regex preparepattern rubystring str
check
encoding enc   checkencoding str  true
if  enc    pattern getencoding    return pattern
return getpreprocessedregexpfromcache getruntime    this str  enc  pattern getoptions    errormode preprocess
static regex preparepattern ruby runtime  regex pattern  rubystring str
if  str scanforcoderange      stringsupport cr_broken
throw runtime newargumenterror     str getencoding
encoding enc   str getencoding
if   enc isasciicompatible
if  enc    pattern getencoding    encodingmatcherror runtime  pattern  enc
// todo: check for iskcodedefault() somehow
//        if (warn && isencodingnone() && enc != asciiencoding.instance && str.scanforcoderange() != stringsupport.cr_7bit) {
//            getruntime().getwarnings().warn(id.regexp_match_against_string, "regexp match /.../n against to " + enc + " string");
//        }
if  enc    pattern getencoding    return pattern
return getpreprocessedregexpfromcache runtime   bytelist pattern getuserobject    enc  pattern getoptions    errormode preprocess
private static enum errormode  raise  preprocess  desc
private static int raisepreprocesserror ruby runtime  bytelist str  string err  errormode mode
switch  mode
case raise
raiseregexperror19 runtime  str  str getencoding    0  err
case preprocess
throw runtime newargumenterror     err
case desc
// silent ?
return 0
private static int readescapedbyte ruby runtime  byteto  int top  bytebytes  int p  int end  bytelist str  errormode mode
if  p    end    bytes     byte    raisepreprocesserror runtime  str     mode
boolean metaprefix   false  ctrlprefix   false
int code   0
while  true
if  p    end  raisepreprocesserror runtime  str     mode
switch  bytes
case    code      break
case    code      break
case    code      break
case    code      break
case    code      break
case    code      break
case    code      break
case    code      break
/* \ooo */
case    case    case    case
case    case    case    case
p
int olen   end < p   3 ? end   p   3
code   stringsupport scanoct bytes  p  olen
p    stringsupport octlength bytes  p  olen
break
case        xhh
int hlen   end < p   2 ? end   p   2
code   stringsupport scanhex bytes  p  hlen
int len   stringsupport hexlength bytes  p  hlen
if  len < 1  raisepreprocesserror runtime  str     mode
p    len
break
case        m x   m  c x   m  cx
if  metaprefix  raisepreprocesserror runtime  str     mode
metaprefix   true
if  p   1 < end    bytes     byte       bytes   0x80     0
if  bytes     byte
p
continue
else
code   bytes   0xff
break
raisepreprocesserror runtime  str     mode
case        c x   c  m x
if  p    end    bytes     byte    raisepreprocesserror runtime  str     mode
case        cx   c m x
if  ctrlprefix  raisepreprocesserror runtime  str     mode
ctrlprefix   true
if  p < end     bytes   0x80     0
if  bytes     byte
p
continue
else
code   bytes   0xff
break
raisepreprocesserror runtime  str     mode
default
raisepreprocesserror runtime  str     mode
switch
if  code < 0    code > 0xff  raisepreprocesserror runtime  str     mode
if  ctrlprefix  code    0x1f
if  metaprefix  code    0x80
to    byte code
return p
while
private static int unescapeescapednonascii ruby runtime  bytelist to  bytebytes  int p  int end  encoding enc  encodingencp  bytelist str  errormode mode
bytechbuf   new byte
int chlen   0
p   readescapedbyte runtime  chbuf  chlen    bytes  p  end  str  mode
while  chlen < enc maxlength      stringsupport preciselength enc  chbuf  0  chlen  <  1       mbclen_needmore_p
p   readescapedbyte runtime  chbuf  chlen    bytes  p  end  str  mode
int cl   stringsupport preciselength enc  chbuf  0  chlen
if  cl     1  raisepreprocesserror runtime  str     mode      mbclen_invalid_p
if  chlen > 1     chbuf   0x80     0
to append chbuf  0  chlen
if  encp    null
encp   enc
else if  encp    enc
raisepreprocesserror runtime  str     mode
else
sprintf sprintf runtime  to     chbuf   0xff
return p
private static void checkunicoderange ruby runtime  int code  bytelist str  errormode mode
// unicode is can be only 21 bits long, int is enough
if   0xd800 <  code    code <  0xdfff     surrogates       0x10ffff < code
raisepreprocesserror runtime  str     mode
private static void appendutf8 ruby runtime  bytelist to  int code  encodingenc  bytelist str  errormode mode
checkunicoderange runtime  code  str  mode
if  code < 0x80
sprintf sprintf runtime  to     code
else
to ensure to getrealsize     6
to setrealsize to getrealsize     pack utf8decode runtime  to getunsafebytes    to getbegin     to getrealsize    code
if  enc    null
enc   utf8encoding instance
else if    enc instanceof utf8encoding        do not load the class if not used
raisepreprocesserror runtime  str     mode
private static int unescapeunicodelist ruby runtime  bytelist to  bytebytes  int p  int end  encodingencp  bytelist str  errormode mode
while  p < end    asciiencoding instance isspace bytes   0xff   p
boolean hasunicode   false
while  true
int code   stringsupport scanhex bytes  p  end   p
int len   stringsupport hexlength bytes  p  end   p
if  len    0  break
if  len > 6  raisepreprocesserror runtime  str     mode
p    len
appendutf8 runtime  to  code  encp  str  mode
hasunicode   true
while  p < end    asciiencoding instance isspace bytes   0xff   p
if   hasunicode  raisepreprocesserror runtime  str     mode
return p
private static int unescapeunicodebmp ruby runtime  bytelist to  bytebytes  int p  int end  encodingencp  bytelist str  errormode mode
if  p   4 > end  raisepreprocesserror runtime  str     mode
int code   stringsupport scanhex bytes  p  4
int len   stringsupport hexlength bytes  p  4
if  len    4  raisepreprocesserror runtime  str     mode
appendutf8 runtime  to  code  encp  str  mode
return p   4
private static boolean unescapenonascii ruby runtime  bytelist to  bytebytes  int p  int end  encoding enc  encodingencp  bytelist str  errormode mode
boolean hasproperty   false
while  p < end
int cl   stringsupport preciselength enc  bytes  p  end
if  cl <  0  raisepreprocesserror runtime  str     mode
if  cl > 1     bytes   0x80     0
to append bytes  p  cl
p    cl
if  encp    null
encp   enc
else if  encp    enc
raisepreprocesserror runtime  str     mode
continue
int c
switch  c   bytes   0xff
case
if  p    end  raisepreprocesserror runtime  str     mode
switch  c   bytes   0xff
case    case    case
case    case    case    case        o   oo   ooo or backref
if  stringsupport scanoct bytes  p   1  end    p   1   <  0177
to append    append c
break
case        0   0o   0oo
case        xhh
case        cx   c m x
case        c x   c  m x
case        m x   m  c x   m  cx
p   unescapeescapednonascii runtime  to  bytes  p   2  end  enc  encp  str  mode
break
case
if  p    end  raisepreprocesserror runtime  str     mode
if  bytes     byte           u h hh hhh hhhh hhhhh hhhhhh
p
p   unescapeunicodelist runtime  to  bytes  p  end  encp  str  mode
if  p    end    bytes     byte    raisepreprocesserror runtime  str     mode
else        uhhhh
p   unescapeunicodebmp runtime  to  bytes  p  end  encp  str  mode
break
case        p hiragana
if  encp    null  hasproperty   true
to append    append c
break
default
to append    append c
break
inner switch
break
default
to append c
switch
while
return hasproperty
private static bytelist preprocess ruby runtime  bytelist str  encoding enc  encodingfixedenc  errormode mode
bytelist to   new bytelist str getrealsize
if  enc isasciicompatible
fixedenc   null
else
fixedenc   enc
to setencoding enc
boolean hasproperty   unescapenonascii runtime  to  str getunsafebytes    str getbegin    str getbegin     str getrealsize    enc  fixedenc  str  mode
if  hasproperty    fixedenc    null  fixedenc   enc
if  fixedenc    null  to setencoding fixedenc
return to
public static void preprocesscheck ruby runtime  irubyobject obj
bytelist bytes   obj converttostring   getbytelist
preprocess runtime  bytes  bytes getencoding    new encoding null   errormode raise
private void check
if  pattern    null  throw getruntime   newtypeerror
@jrubymethod name           rest   true  meta   true
public static rubyregexp newinstance irubyobject recv  irubyobject args
rubyclass klass    rubyclass recv
rubyregexp re    rubyregexp  klass allocate
re callinit args  block null_block
return re
@jrubymethod name      meta   true  compat   compatversion ruby1_9
public static irubyobject try_convert threadcontext context  irubyobject recv  irubyobject args
return typeconverter converttotypewithcheck args  context getruntime   getregexp
/** rb_reg_s_quote
*
*/
@jrubymethod name           required   1  optional   1  meta   true  compat   compatversion ruby1_8
public static rubystring quote threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
final kcode code
if  args length    1    args isnil
code   runtime getkcode
else
code   kcode create runtime  args tostring
rubystring src   args converttostring
rubystring dst   rubystring newstringshared runtime  quote src getbytelist    code getencoding
dst infectby src
return dst
@jrubymethod name           meta   true  compat   compatversion ruby1_9
public static irubyobject quote19 threadcontext context  irubyobject recv  irubyobject arg
ruby runtime   context getruntime
rubystring str   operandcheck runtime  arg
return rubystring newstringshared runtime  quote19 str getbytelist    str isasciionly
/** rb_reg_quote
*
*/
private static bytelist quote bytelist bs  encoding enc
int p   bs getbegin
int end   p   bs getrealsize
bytebytes   bs getunsafebytes
metafound  do
for   p < end  p
int c   bytes   0xff
int cl   enc length bytes  p  end
if  cl    1
while  cl   > 0    p < end  p
p
continue
switch  c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case    case
case    case    case    case
break metafound
return bs
while  false
bytelist result   new bytelist end   2
byteobytes   result getunsafebytes
int op   p   bs getbegin
system arraycopy bytes  bs getbegin    obytes  0  op
for   p < end  p
int c   bytes   0xff
int cl   enc length bytes  p  end
if  cl    1
while  cl   > 0    p < end  obytes   bytes
p
continue
switch  c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case    obytes      break
case    obytes      obytes      continue
case   obytes      obytes      continue
case   obytes      obytes      continue
case   obytes      obytes      continue
case   obytes      obytes      continue
obytes    byte c
result setrealsize op
return result
static bytelist quote19 bytelist bs  boolean asciionly
int p   bs getbegin
int end   p   bs getrealsize
bytebytes   bs getunsafebytes
encoding enc   bs getencoding
metafound  do
while  p < end
final int c
final int cl
if  enc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength enc  bytes  p  end
c   enc mbctocode bytes  p  end
if   encoding isascii c
p    stringsupport length enc  bytes  p  end
continue
switch  c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case    case
case    case    case    case
break metafound
p    cl
if  asciionly
bytelist tmp   bs shallowdup
tmp setencoding usasciiencoding instance
return tmp
return bs
while  false
bytelist result   new bytelist end   2
result setencoding asciionly ? usasciiencoding instance   bs getencoding
byteobytes   result getunsafebytes
int op   p   bs getbegin
system arraycopy bytes  bs getbegin    obytes  0  op
while  p < end
final int c
final int cl
if  enc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength enc  bytes  p  end
c   enc mbctocode bytes  p  end
if   encoding isascii c
int n   stringsupport length enc  bytes  p  end
while  n   > 0  obytes   bytes
continue
p    cl
switch  c
case    case    case    case
case    case    case    case
case    case    case
case    case    case    case
case
op    enc codetombc    obytes  op
break
case
op    enc codetombc    obytes  op
op    enc codetombc    obytes  op
continue
case
op    enc codetombc    obytes  op
op    enc codetombc    obytes  op
continue
case
op    enc codetombc    obytes  op
op    enc codetombc    obytes  op
continue
case
op    enc codetombc    obytes  op
op    enc codetombc    obytes  op
continue
case
op    enc codetombc    obytes  op
op    enc codetombc    obytes  op
continue
op    enc codetombc c  obytes  op
result setrealsize op
return result
/**
* variable arity version for compatibility. not bound to a ruby method.
* @deprecated use the versions with zero, one, or two args.
*/
public static irubyobject last_match_s threadcontext context  irubyobject recv  irubyobject args
switch  args length
case 0
return last_match_s context  recv
case 1
return last_match_s context  recv  args
default
arity raiseargumenterror context getruntime    args length  0  1
return null     not reached
/** rb_reg_s_last_match / match_getter
*
*/
@jrubymethod name      meta   true  reads   backref
public static irubyobject last_match_s threadcontext context  irubyobject recv
irubyobject match   context getcurrentscope   getbackref context getruntime
if  match instanceof rubymatchdata    rubymatchdata match  use
return match
/** rb_reg_s_last_match
*
*/
@jrubymethod name      meta   true  reads   backref
public static irubyobject last_match_s threadcontext context  irubyobject recv  irubyobject nth
irubyobject match   context getcurrentscope   getbackref context getruntime
if  match isnil    return match
return nth_match   rubymatchdata match  backrefnumber nth   match
/** rb_reg_s_union
*
*/
@jrubymethod name      rest   true  meta   true
public static irubyobject union threadcontext context  irubyobject recv  irubyobject args
ruby runtime   context getruntime
irubyobject realargs   args
if  args length    0
return newregexp runtime  bytelist create     0
else if  args length    1
irubyobject v   typeconverter converttotypewithcheck args  runtime getregexp
if   v isnil
return v
else
irubyobject a   typeconverter converttotypewithcheck args  runtime getarray
if   a isnil
rubyarray aa    rubyarray a
int len   aa getlength
realargs   new irubyobject
for int i   0  i<len  i
realargs   aa entry i
else
// newinstance here
return newregexp runtime  quote context  recv  args  getbytelist    0
kcode kcode   null
irubyobject kcode_re   runtime getnil
rubystring source   runtime newstring
irubyobject _args   new irubyobject
for  int i   0  i < realargs length  i
if  0 < i  source cat  byte
irubyobject v   typeconverter converttotypewithcheck realargs  runtime getregexp
if   v isnil
if     rubyregexp v  iskcodedefault
if  kcode    null
kcode_re   v
kcode     rubyregexp v  kcode
else if    rubyregexp v  kcode    kcode
irubyobject str1   kcode_re inspect
irubyobject str2   v inspect
throw runtime newargumenterror     str1       str2
v     rubyregexp v  to_s
else
v   quote context  recv  new irubyobject realargs
source append v
_args   source
_args   runtime getnil
if  kcode    null
_args   runtime getnil
else if  kcode    kcode none
_args   runtime newstring
else if  kcode    kcode euc
_args   runtime newstring
else if  kcode    kcode sjis
_args   runtime newstring
else if  kcode    kcode utf8
_args   runtime newstring
return recv callmethod context     _args
// rb_reg_raise
private static void raiseregexperror ruby runtime  bytelist bytes  encoding enc  int flags  string err
throw runtime newregexperror err       regexpdescription runtime  bytes  enc  flags
// rb_reg_desc
private static bytelist regexpdescription ruby runtime  bytelist bytes  encoding enc  int options
return regexpdescription runtime  bytes getunsafebytes    bytes getbegin    bytes getrealsize    enc  options
private static bytelist regexpdescription ruby runtime  byte bytes  int start  int len  encoding enc  int options
bytelist description   new bytelist
description append  byte
appendregexpstring runtime  description  bytes  start  len  enc
description append  byte
appendoptions description  options
return description
// rb_enc_reg_raise
private static void raiseregexperror19 ruby runtime  bytelist bytes  encoding enc  int flags  string err
// todo: we loose encoding information here, fix it
throw runtime newregexperror err       regexpdescription19 runtime  bytes  flags  enc
// rb_enc_reg_error_desc
static bytelist regexpdescription19 ruby runtime  bytelist bytes  int options  encoding enc
return regexpdescription19 runtime  bytes getunsafebytes    bytes getbegin    bytes getrealsize    options  enc
private static bytelist regexpdescription19 ruby runtime  byte s  int start  int len  int options  encoding enc
bytelist description   new bytelist
description setencoding enc
description append  byte
appendregexpstring19 runtime  description  s  start  len  enc
description append  byte
appendoptions description  options
return description
/** rb_reg_init_copy
*/
@jrubymethod name      required   1
@override
public irubyobject initialize_copy irubyobject re
if  this    re  return this
checkfrozen
if  getmetaclass   getrealclass      re getmetaclass   getrealclass
throw getruntime   newtypeerror
rubyregexp regexp    rubyregexp re
regexp check
return initializecommon regexp str  regexp getoptions
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_8
public irubyobject initialize_m irubyobject arg
if  arg instanceof rubyregexp  return initializebyregexp  rubyregexp arg
return initializecommon arg converttostring   getbytelist    0
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_8
public irubyobject initialize_m irubyobject arg0  irubyobject arg1
if  arg0 instanceof rubyregexp
getruntime   getwarnings   warn id regexp_ignored_flags
return initializebyregexp  rubyregexp arg0
int options   arg1 instanceof rubyfixnum ? rubynumeric fix2int arg1    arg1 istrue   ? re_option_ignorecase   0
return initializecommon arg0 converttostring   getbytelist    options
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_8
public irubyobject initialize_m irubyobject arg0  irubyobject arg1  irubyobject arg2
if  arg0 instanceof rubyregexp
getruntime   getwarnings   warn id regexp_ignored_flags
return initializebyregexp  rubyregexp arg0
int options   arg1 instanceof rubyfixnum ? rubynumeric fix2int arg1    arg1 istrue   ? re_option_ignorecase   0
if   arg2 isnil
bytelist kcodebytes   arg2 converttostring   getbytelist
char first   kcodebytes length   > 0 ? kcodebytes charat 0    0
options    ~0x70
switch  first
case    case
options    16
break
case    case
options    32
break
case    case
options    48
break
case    case
options    64
break
default
break
return initializecommon arg0 converttostring   getbytelist    options
private irubyobject initializebyregexp rubyregexp regexp
regexp check
int options   regexp pattern getoptions
if   regexp iskcodedefault      regexp kcode    null    regexp kcode    kcode nil
if  regexp kcode    kcode none
options    16
else if  regexp kcode    kcode euc
options    32
else if  regexp kcode    kcode sjis
options    48
else if  regexp kcode    kcode utf8
options    64
return initializecommon regexp str  options
private rubyregexp initializecommon bytelist bytes  int options
ruby runtime   getruntime
if   istaint      runtime getsafelevel   >  4  throw runtime newsecurityerror
checkfrozen
if  isliteral    throw runtime newsecurityerror
setkcode runtime  options
pattern   getregexpfromcache runtime  bytes  kcode getencoding    options   0xf
str   bytes
return this
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_9
public irubyobject initialize_m19 irubyobject arg
if  arg instanceof rubyregexp  return initializebyregexp19  rubyregexp arg
return initializecommon19 arg converttostring    0
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_9
public irubyobject initialize_m19 irubyobject arg0  irubyobject arg1
if  arg0 instanceof rubyregexp
getruntime   getwarnings   warn id regexp_ignored_flags
return initializebyregexp19  rubyregexp arg0
int options   arg1 instanceof rubyfixnum ? rubynumeric fix2int arg1    arg1 istrue   ? re_option_ignorecase   0
return initializecommon19 arg0 converttostring    options
@jrubymethod name      visibility   visibility private  compat   compatversion ruby1_9
public irubyobject initialize_m19 irubyobject arg0  irubyobject arg1  irubyobject arg2
if  arg0 instanceof rubyregexp
getruntime   getwarnings   warn id regexp_ignored_flags
return initializebyregexp19  rubyregexp arg0
int options   arg1 instanceof rubyfixnum ? rubynumeric fix2int arg1    arg1 istrue   ? re_option_ignorecase   0
if   arg2 isnil
bytelist kcodebytes   arg2 converttostring   getbytelist
if   kcodebytes getrealsize   > 0    kcodebytes getunsafebytes
kcodebytes getrealsize   > 1    kcodebytes getunsafebytes
return initializecommon19 arg0 converttostring   getbytelist    asciiencoding instance  options   arg_encoding_none
else
getruntime   getwarnings   warn     kcodebytes
return initializecommon19 arg0 converttostring    options
private irubyobject initializebyregexp19 rubyregexp regexp
regexp check
return initializecommon19 regexp str  regexp getencoding    regexp pattern getoptions
// rb_reg_initialize_str
private rubyregexp initializecommon19 rubystring str  int options
bytelist bytes   str getbytelist
encoding enc   bytes getencoding
if   options   regexp_encoding_none     0
if  enc    asciiencoding instance
if  str scanforcoderange      stringsupport cr_7bit
raiseregexperror19 getruntime    bytes  enc  options
enc   asciiencoding instance
return initializecommon19 bytes  enc  options
// rb_reg_initialize
private rubyregexp initializecommon19 bytelist bytes  encoding enc  int options
ruby runtime   getruntime
setkcode runtime  options
if   istaint      runtime getsafelevel   >  4  throw runtime newsecurityerror
checkfrozen
if  isliteral    throw runtime newsecurityerror
if  pattern    null  throw runtime newtypeerror
if  enc isdummy    raiseregexperror19 runtime  bytes  enc  options
encodingfixedenc   new encoding null
bytelist unescaped   preprocess runtime  bytes  enc  fixedenc  errormode raise
if  fixedenc    null
if   fixedenc    enc     options   arg_encoding_fixed     0
fixedenc    asciiencoding instance     options   arg_encoding_none     0
raiseregexperror19 runtime  bytes  enc  options
if  fixedenc    asciiencoding instance
options    arg_encoding_fixed
enc   fixedenc
else if   options   arg_encoding_fixed     0
enc   usasciiencoding instance
if   options   arg_encoding_fixed     0    fixedenc    null  setkcodedefault
if   options   arg_encoding_none     0  setencodingnone
pattern   getregexpfromcache runtime  unescaped  enc  options   arg_option_mask
str   bytes
return this
@jrubymethod name
public irubyobject kcode threadcontext context
return   iskcodedefault      kcode    null  ?
context getruntime   newstring kcode name      context getruntime   getnil
@jrubymethod name
@override
public rubyfixnum hash
check
int hash   pattern getoptions
int len   str getrealsize
int p   str getbegin
bytebytes   str getunsafebytes
while  len   > 0
hash   hash   33   bytes
return getruntime   newfixnum hash    hash >> 5
@jrubymethod name           required   1
@override
public irubyobject op_equal threadcontext context  irubyobject other
if  this    other  return context getruntime   gettrue
if    other instanceof rubyregexp   return context getruntime   getfalse
rubyregexp otherregex    rubyregexp other
check
otherregex check
return context getruntime   newboolean str equal otherregex str
kcode    otherregex kcode    pattern getoptions      otherregex pattern getoptions
@jrubymethod name      reads    lastline  backref   writes   backref
public irubyobject op_match2 threadcontext context
ruby runtime   context getruntime
irubyobject line   context getcurrentscope   getlastline runtime
if  line instanceof rubystring
int start   search context   rubystring line  0  false
if  start < 0  return runtime getnil
return runtime newfixnum start
context getcurrentscope   setbackref runtime getnil
return runtime getnil
/** rb_reg_eqq
*
*/
@jrubymethod name      required   1  writes   backref  compat   compatversion ruby1_8
public irubyobject eqq threadcontext context  irubyobject arg
ruby runtime   context getruntime
final rubystring str
if  arg instanceof rubystring
str    rubystring arg
else
irubyobject tmp   arg checkstringtype
if  tmp isnil
context getcurrentscope   setbackref tmp
return runtime getfalse
str    rubystring tmp
int start   search context  str  0  false
return  start < 0  ? runtime getfalse     runtime gettrue
@jrubymethod name      required   1  writes   backref  compat   compatversion ruby1_9
public irubyobject eqq19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
arg   operandnocheck arg
if  arg isnil
context getcurrentscope   setbackref arg
return runtime getfalse
int start   search19 context   rubystring arg  0  false
return  start < 0  ? runtime getfalse     runtime gettrue
/** rb_reg_match
*
*/
@jrubymethod name      required   1  writes   backref  compat   compatversion ruby1_8
@override
public irubyobject op_match threadcontext context  irubyobject str
ruby runtime   context getruntime
if  str isnil
context getcurrentscope   setbackref str
return str
int start   search context  str converttostring    0  false
if  start < 0  return runtime getnil
return rubyfixnum newfixnum runtime  start
@jrubymethod name      required   1  writes   backref  compat   compatversion ruby1_9
public irubyobject op_match19 threadcontext context  irubyobject arg
ruby runtime   context getruntime
if  arg isnil
context getcurrentscope   setbackref arg
return arg
rubystring str   operandcheck runtime  arg
int pos   matchpos context  str  0
if  pos < 0  return runtime getnil
return rubyfixnum newfixnum runtime  str sublength pos
/** rb_reg_match_m
*
*/
@jrubymethod name      required   1  reads   backref  compat   compatversion ruby1_8
public irubyobject match_m threadcontext context  irubyobject str
irubyobject result   op_match context  str
if  result isnil    return result
result   context getcurrentscope   getbackref context getruntime
rubymatchdata result  use
return result
@jrubymethod name      reads   backref  compat   compatversion ruby1_9
public irubyobject match_m19 threadcontext context  irubyobject str  block block
return match19common context  str  0  block
@jrubymethod name      reads   backref  compat   compatversion ruby1_9
public irubyobject match_m19 threadcontext context  irubyobject str  irubyobject pos  block block
return match19common context  str  rubynumeric num2int pos   block
private irubyobject match19common threadcontext context  irubyobject arg  int pos  block block
dynamicscope scope   context getcurrentscope
if  arg isnil
scope setbackref arg
return arg
ruby runtime   context getruntime
rubystring str   operandcheck runtime  arg
if  matchpos context  str  pos  < 0
scope setbackref runtime getnil
return runtime getnil
irubyobject backref   scope getbackref runtime
rubymatchdata backref  use
if  block isgiven    return block yield context  backref
return backref
private int matchpos threadcontext context  rubystring str  int pos
if  pos    0
if  pos < 0
pos    str strlength
if  pos < 0  return pos
pos   adjuststartpos19 str  pos  false
return search19 context  str  pos  false
/** rb_reg_search
*/
public final int search threadcontext context  rubystring str  int pos  boolean reverse
check
dynamicscope scope   context getcurrentscope
bytelist value   str getbytelist
if  pos <  value getrealsize      pos >  0
int realsize   value getrealsize
int begin   value getbegin
matcher matcher   pattern matcher value getunsafebytes    begin  begin   realsize
int result   matcher search begin   pos  begin    reverse ? 0   realsize   option none
if  result >  0
updatebackref context  str  scope  matcher
return result
scope setbackref context getruntime   getnil
return  1
private rubymatchdata updatebackref threadcontext context  rubystring str  dynamicscope scope  matcher matcher
rubymatchdata match   updatebackref context  str  scope  matcher  pattern
match regexp   this
match infectby this
return match
static final rubymatchdata updatebackref threadcontext context  rubystring str  dynamicscope scope  matcher matcher  regex pattern
ruby runtime   context getruntime
irubyobject backref   scope getbackref runtime
final rubymatchdata match
boolean setbackref   false
if  backref isnil        rubymatchdata backref  used
match   new rubymatchdata runtime
setbackref   true
else
match    rubymatchdata backref
match settaint runtime getsafelevel   >  3
// fixme: this is pretty gross; we should have a cleaner initialization
// that doesn't depend on package-visible fields and ideally is atomic,
// probably using an immutable structure we replace all at once.
match regs   matcher getregion       lazy  null when no groups defined
match begin   matcher getbegin
match end   matcher getend
match pattern   pattern
match str    rubystring str strdup runtime  freeze context
match infectby str
// jruby-3625: delay setting backref until the matchdata is completely initialized
if  setbackref  scope setbackref match
return match
public final int search19 threadcontext context  rubystring str  int pos  boolean reverse
check
dynamicscope scope   context getcurrentscope
bytelist value   str getbytelist
if  pos <  value getrealsize      pos >  0
int realsize   value getrealsize
int begin   value getbegin
matcher matcher   preparepattern str  matcher value getunsafebytes    begin  begin   realsize
int result   matcher search begin   pos  begin    reverse ? 0   realsize   option none
if  result >  0
updatebackref context  str  scope  matcher  charoffsetupdated   false
return result
scope setbackref context getruntime   getnil
return  1
static final rubymatchdata updatebackref19 threadcontext context  rubystring str  dynamicscope scope  matcher matcher  regex pattern
rubymatchdata match   updatebackref context  str  scope  matcher  pattern
match charoffsetupdated   false
return match
@jrubymethod name
public irubyobject options
return getruntime   newfixnum getoptions
@jrubymethod name
public irubyobject casefold_p threadcontext context
check
return context getruntime   newboolean  pattern getoptions     re_option_ignorecase     0
/** rb_reg_source
*
*/
@jrubymethod name
public irubyobject source
check
rubystring str   rubystring newstringshared getruntime    this str
if  istaint    str settaint true
return str
final int length
return str getrealsize
/** rb_reg_inspect
*
*/
@jrubymethod name      compat   compatversion ruby1_8
@override
public irubyobject inspect
check
bytelist result   regexpdescription getruntime    str  kcode getencoding    pattern getoptions
if  kcode    null     iskcodedefault    result append  byte kcode name   charat 0
return rubystring newstring getruntime    result
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject inspect19
if  pattern    null  return anytostring
return rubystring newstring getruntime    regexpdescription19 getruntime    str  pattern getoptions    str getencoding
private final static int embeddable   re_option_multiline re_option_ignorecase re_option_extended
@jrubymethod name
@override
public irubyobject to_s
check
int options   pattern getoptions
int p   str getbegin
int len   str getrealsize
byte bytes   str getunsafebytes
bytelist result   new bytelist len
result append  byte    append  byte
again  do
if  len >  4    bytes         bytes
boolean err   true
p    2
if   len    2  > 0
do
if  bytes
options    re_option_multiline
else if  bytes
options    re_option_ignorecase
else if  bytes
options    re_option_extended
else
break
p
while    len > 0
if  len > 1    bytes
p
len
do
if  bytes
options    ~re_option_multiline
else if  bytes
options    ~re_option_ignorecase
else if  bytes
options    ~re_option_extended
else
break
p
while    len > 0
if  bytes
len
p
continue again
if  bytes         bytes
try
new regex bytes    p  p    len    2   option default  kcode getencoding    syntax default
err   false
catch  joniexception e
err   true
if  err
options   pattern getoptions
p   str getbegin
len   str getrealsize
appendoptions result  options
if   options   embeddable     embeddable
result append  byte
if   options   re_option_multiline     0  result append  byte
if   options   re_option_ignorecase     0  result append  byte
if   options   re_option_extended     0  result append  byte
result append  byte
appendregexpstring getruntime    result  bytes  p  len  kcode getencoding
result append  byte
return rubystring newstring getruntime    result  infectby this
while  true
// rb_reg_expr_str
private static void appendregexpstring ruby runtime  bytelist to  bytebytes  int start  int len  encoding enc
int p   start
int end   p   len
boolean needescape   false
while  p < end
int c   bytes   0xff
if  c           enc isprint c     enc length bytes  p  end     1
needescape   true
break
p    enc length bytes  p  end
if   needescape
to append bytes  start  len
else
p   start
while  p < end
int c   bytes   0xff
if  c
int n   enc length bytes  p   1  end    1
to append bytes  p  n
p    n
continue
else if  c
to append  byte
to append bytes  p  1
else if  enc length bytes  p  end     1
to append bytes  p  enc length bytes  p  end
p    enc length bytes  p  end
continue
else if  enc isprint c
to append bytes  p  1
else if   enc isspace c
sprintf sprintf runtime  to     bytes   0377
else
to append bytes  p  1
p
private static void appendregexpstring19 ruby runtime  bytelist to  bytebytes  int start  int len  encoding enc
int p   start
int end   p   len
boolean needescape   false
while  p < end
final int c
final int cl
if  enc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength enc  bytes  p  end
c   enc mbctocode bytes  p  end
if   encoding isascii c
p    stringsupport length enc  bytes  p  end
else if  c         enc isprint c
p    cl
else
needescape   true
break
if   needescape
to append bytes  start  len
else
p   start
while  p < end
final int c
final int cl
if  enc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength enc  bytes  p  end
c   enc mbctocode bytes  p  end
if  c         p   cl < end
int n   cl   stringsupport length enc  bytes  p   cl  end
to append bytes  p  n
p    n
continue
else if  c
to append  byte
to append bytes  p  cl
else if   encoding isascii c
int l   stringsupport length enc  bytes  p  end
to append bytes  p  l
p    l
continue
else if  enc isprint c
to append bytes  p  cl
else if   enc isspace c
sprintf sprintf runtime  to     c
else
to append bytes  p  cl
p    cl
// option_to_str
private static void appendoptions bytelist to  int options
if   options   reoptions re_option_multiline     0  to append  byte
if   options   reoptions re_option_ignorecase     0  to append  byte
if   options   reoptions re_option_extended     0  to append  byte
/** rb_reg_names
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject names threadcontext context
if  pattern numberofnames      0  return getruntime   newemptyarray
rubyarray ary   context getruntime   newarray pattern numberofnames
for  iterator<nameentry> i   pattern namedbackrefiterator    i hasnext
nameentry e   i next
ary append rubystring newstringshared getruntime    e name  e namep  e nameend   e namep
return ary
/** rb_reg_named_captures
*
*/
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject named_captures threadcontext context
rubyhash hash   rubyhash newhash getruntime
if  pattern numberofnames      0  return hash
for  iterator<nameentry> i   pattern namedbackrefiterator    i hasnext
nameentry e   i next
intbackrefs   e getbackrefs
rubyarray ary   getruntime   newarray backrefs length
for  int backref   backrefs  ary append rubyfixnum newfixnum getruntime    backref
hash fastaset rubystring newstringshared getruntime    e name  e namep  e nameend   e namep  freeze context   ary
return hash
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject encoding threadcontext context
return context getruntime   getencodingservice   getencoding pattern getencoding
@jrubymethod name      compat   compatversion ruby1_9
public irubyobject fixed_encoding_p threadcontext context
ruby runtime   context getruntime
return iskcodedefault   ? runtime getfalse     runtime gettrue
/** rb_reg_nth_match
*
*/
public static irubyobject nth_match int nth  irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
ruby runtime   m getruntime
final int start  end
if  m regs    null
if  nth >  1     nth < 0      nth <  0   return runtime getnil
start   m begin
end   m end
else
if  nth >  m regs numregs     nth < 0     nth  m regs numregs  <  0   return runtime getnil
start   m regs beg
end   m regs end
if  start     1  return runtime getnil
rubystring str   m str makeshared runtime  start  end   start
str infectby m
return str
/** rb_reg_last_match
*
*/
public static irubyobject last_match irubyobject match
return nth_match 0  match
/** rb_reg_match_pre
*
*/
public static irubyobject match_pre irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
ruby runtime   m getruntime
if  m begin     1  runtime getnil
return m str makeshared runtime  0   m begin  infectby m
/** rb_reg_match_post
*
*/
public static irubyobject match_post irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
ruby runtime   m getruntime
if  m begin     1  return runtime getnil
return m str makeshared runtime  m end  m str getbytelist   getrealsize     m end  infectby m
/** rb_reg_match_last
*
*/
public static irubyobject match_last irubyobject match
if  match isnil    return match
rubymatchdata m    rubymatchdata match
if  m regs    null    m regs beg     1  return match getruntime   getnil
int i
for  i   m regs numregs   1  m regs beg     1    i > 0  i
if  i    0  return match getruntime   getnil
return nth_match i  match
static rubystring regsub rubystring str  rubystring src  matcher matcher  encoding enc
region regs   matcher getregion
int no    1
bytelist bs   str getbytelist
int p   bs getbegin
int s   p
int end   p   bs getrealsize
bytebytes   bs getunsafebytes
bytelist srcbs   src getbytelist
bytelist val   null
while  s < end
int ss   s
int c   bytes   0xff
int l   enc length bytes  s    end
if  l    1
s    l   1
continue
if  c         s    end  continue
if  val    null  val   new bytelist ss   p
val append bytes  p  ss   p
c   bytes   0xff
p   s
switch  c
case    case    case    case    case
case    case    case    case    case
no   c
break
case
no   0
break
case
val append  srcbs getunsafebytes    srcbs getbegin    matcher getbegin
continue
case
val append srcbs getunsafebytes    srcbs getbegin     matcher getend    srcbs getrealsize     matcher getend
continue
case
if  regs    null
if  matcher getbegin       1
no   0
continue
else
no   regs numregs   1
while  regs beg     1    no > 0  no
if  no    0  continue
break
case
val append bytes  s   1  1
continue
default
val append bytes  s   2  2
continue
if  regs    null
if  no >  0
if  no >  regs numregs    regs beg     1  continue
val append srcbs getunsafebytes    srcbs getbegin     regs beg  regs end   regs beg
else
if  no    0    matcher getbegin       1  continue
val append srcbs getunsafebytes    srcbs getbegin     matcher getbegin    matcher getend     matcher getbegin
if  p < end
if  val    null
return rubystring newstring str getruntime    bs makeshared p   bs getbegin    end   p
else
val append bytes  p  end   p
if  val    null  return str
return rubystring newstring str getruntime    val
static rubystring regsub19 rubystring str  rubystring src  matcher matcher  regex pattern
region regs   matcher getregion
int no    1
bytelist bs   str getbytelist
int p   bs getbegin
int s   p
int end   p   bs getrealsize
bytebytes   bs getunsafebytes
encoding strenc   bs getencoding
bytelist srcbs   src getbytelist
encoding srcenc   srcbs getencoding
rubystring val   null
while  s < end
int c  cl
if  strenc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength strenc  bytes  s  end
c   strenc mbctocode bytes  s  end
if   encoding isascii c
s    stringsupport length strenc  bytes  s  end
continue
int ss   s
s    cl
if  c         s    end  continue
if  val    null  val   rubystring newstring str getruntime    new bytelist ss   p
val cat bytes  p  ss   p  strenc
if  strenc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength strenc  bytes  s  end
c   strenc mbctocode bytes  s  end
if   encoding isascii c
s    stringsupport length strenc  bytes  s  end
val cat bytes  ss  s   ss  strenc
p   s
continue
s    cl
p   s
switch  c
case    case    case    case
case    case    case    case    case
if  pattern nonamegroupisactive syntax ruby
no   c
break
continue
case
if  s < end
if  strenc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength strenc  bytes  s  end
c   strenc mbctocode bytes  s  end
if  c
int name   s   cl
int nameend   name
while  nameend < end
if  strenc isasciicompatible
cl   1
c   bytes   0xff
else
cl   stringsupport preciselength strenc  bytes  nameend  end
c   strenc mbctocode bytes  nameend  end
if  c       break
nameend      encoding isascii c   ? stringsupport length strenc  bytes  nameend  end    cl
if  nameend < end
try
no   pattern nametobackrefnumber bytes  name  nameend  regs
catch  joniexception je
throw str getruntime   newindexerror je getmessage
p   s   nameend   cl
break
else
throw str getruntime   newruntimeerror
val cat bytes  ss  s   ss  strenc
continue
case    case
no   0
break
case
val cat  srcbs getunsafebytes    srcbs getbegin    matcher getbegin    srcenc
continue
case
val cat srcbs getunsafebytes    srcbs getbegin     matcher getend    srcbs getrealsize     matcher getend    srcenc
continue
case
if  regs    null
if  matcher getbegin       1
no   0
continue
else
no   regs numregs   1
while  regs beg     1    no > 0  no
if  no    0  continue
break
case
val cat bytes  s   cl  cl  strenc
continue
default
val cat bytes  ss  s   ss  strenc
continue
if  regs    null
if  no >  0
if  no >  regs numregs    regs beg     1  continue
val cat srcbs getunsafebytes    srcbs getbegin     regs beg  regs end   regs beg  srcenc
else
if  no    0    matcher getbegin       1  continue
val cat srcbs getunsafebytes    srcbs getbegin     matcher getbegin    matcher getend     matcher getbegin    srcenc
if  val    null  return str
if  p < end  val cat bytes  p  end   p  strenc
return val
final int adjuststartpos19 rubystring str  int pos  boolean reverse
return adjuststartposinternal str  checkencoding str  false   pos  reverse
final int adjuststartpos rubystring str  int pos  boolean reverse
return adjuststartposinternal str  pattern getencoding    pos  reverse
private final int adjuststartposinternal rubystring str  encoding enc  int pos  boolean reverse
check
bytelist value   str getbytelist
int len   value getrealsize
if  pos > 0    enc maxlength      1    pos < len
int start   value getbegin
if   reverse ?  pos   len   pos  > 0
return enc rightadjustcharhead value getunsafebytes    start  start   pos  start   len    start
else
return enc leftadjustcharhead value getunsafebytes    start  start   pos  start   len    start
return pos
private static irubyobject operandnocheck irubyobject str
if  str instanceof rubysymbol  return   rubysymbol str  to_s
return str checkstringtype
private static rubystring operandcheck ruby runtime  irubyobject str
if  str instanceof rubysymbol  return  rubystring   rubysymbol str  to_s
irubyobject tmp   str checkstringtype
if  tmp isnil    throw runtime newtypeerror     str getmetaclass
return  rubystring tmp
public static rubyregexp unmarshalfrom unmarshalstream input  throws java io ioexception
rubyregexp result   newregexp input getruntime    input unmarshalstring    input readsignedbyte
input registerlinktarget result
return result
public static void marshalto rubyregexp regexp  marshalstream output  throws java io ioexception
output registerlinktarget regexp
output writestring regexp str
output writebyte regexp pattern getoptions     embeddable