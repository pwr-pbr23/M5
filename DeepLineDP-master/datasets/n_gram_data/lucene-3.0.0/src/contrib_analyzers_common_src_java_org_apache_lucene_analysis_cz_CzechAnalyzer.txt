package org apache lucene analysis cz
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import org apache lucene analysis analyzer
import org apache lucene analysis chararrayset
import org apache lucene analysis lowercasefilter
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenizer
import org apache lucene analysis wordlistloader
import org apache lucene analysis standard standardfilter
import org apache lucene analysis standard standardtokenizer
import org apache lucene analysis standard standardanalyzer      for javadoc
import org apache lucene util version
import java io
import java util arrays
import java util hashset
import java util set
import java util collections
/**
* {@link analyzer} for czech language.
* <p>
* supports an external list of stopwords (words that
* will not be indexed at all).
* a default set of stopwords is used unless an alternative list is specified.
* </p>
*
* <p><b>note</b>: this class uses the same {@link version}
* dependent settings as {@link standardanalyzer}.</p>
*/
public final class czechanalyzer extends analyzer
/**
* list of typical stopwords.
* @deprecated use {@link #getdefaultstopset()} instead
*/
// todo make this private in 3.1
public final static string czech_stop_words
/**
* returns a set of default czech-stopwords
* @return a set of default czech-stopwords
*/
public static final set<?> getdefaultstopset
return defaultsetholder default_set
private static class defaultsetholder
private static final set<?> default_set   chararrayset unmodifiableset new chararrayset
arrays aslist czech_stop_words   false
/**
* contains the stopwords used with the {@link stopfilter}.
*/
// todo make this final in 3.1
private set<?> stoptable
private final version matchversion
/**
* builds an analyzer with the default stop words ({@link #czech_stop_words}).
*/
public czechanalyzer version matchversion
this matchversion  defaultsetholder default_set
/**
* builds an analyzer with the given stop words and stemming exclusion words
*
* @param matchversion
*          lucene compatibility version
* @param stopwords
*          a stopword set
*/
public czechanalyzer version matchversion  set<?> stopwords
this matchversion   matchversion
this stoptable   chararrayset unmodifiableset chararrayset copy stopwords
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #czechanalyzer(version, set)} instead
*/
public czechanalyzer version matchversion  string    stopwords
this matchversion  stopfilter makestopset  stopwords
/**
* builds an analyzer with the given stop words.
*
* @deprecated use {@link #czechanalyzer(version, set)} instead
*/
public czechanalyzer version matchversion  hashset<?> stopwords
this matchversion   set<?> stopwords
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #czechanalyzer(version, set)} instead
*/
public czechanalyzer version matchversion  file stopwords   throws ioexception
this matchversion   set<?> wordlistloader getwordset  stopwords
/**
* loads stopwords hash from resource stream (file, database...).
* @param   wordfile    file containing the wordlist
* @param   encoding    encoding used (win-1250, iso-8859-2, ...), null for default system encoding
* @deprecated use {@link wordlistloader#getwordset(reader, string) }
*             and {@link #czechanalyzer(version, set)} instead
*/
public void loadstopwords  inputstream wordfile  string encoding
setprevioustokenstream null      force a new stopfilter to be created
if   wordfile    null
stoptable   collections emptyset
return
try
// clear any previous table (if present)
stoptable   collections emptyset
inputstreamreader isr
if  encoding    null
isr   new inputstreamreader wordfile
else
isr   new inputstreamreader wordfile  encoding
stoptable   wordlistloader getwordset isr
catch   ioexception e
// clear any previous table (if present)
// todo: throw ioexception
stoptable   collections emptyset
/**
* creates a {@link tokenstream} which tokenizes all the text in the provided {@link reader}.
*
* @return  a {@link tokenstream} built from a {@link standardtokenizer} filtered with
* 			{@link standardfilter}, {@link lowercasefilter}, and {@link stopfilter}
*/
@override
public final tokenstream tokenstream  string fieldname  reader reader
tokenstream result   new standardtokenizer  matchversion  reader
result   new standardfilter  result
result   new lowercasefilter  result
result   new stopfilter  stopfilter getenablepositionincrementsversiondefault matchversion
result  stoptable
return result
private class savedstreams
tokenizer source
tokenstream result
/**
* returns a (possibly reused) {@link tokenstream} which tokenizes all the text in
* the provided {@link reader}.
*
* @return  a {@link tokenstream} built from a {@link standardtokenizer} filtered with
*          {@link standardfilter}, {@link lowercasefilter}, and {@link stopfilter}
*/
@override
public tokenstream reusabletokenstream string fieldname  reader reader
throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new standardtokenizer matchversion  reader
streams result   new standardfilter streams source
streams result   new lowercasefilter streams result
streams result   new stopfilter stopfilter getenablepositionincrementsversiondefault matchversion
streams result  stoptable
setprevioustokenstream streams
else
streams source reset reader
return streams result