package org apache lucene analysis
import java util abstractset
import java util collection
import java util collections
import java util iterator
import java util set
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* a simple class that stores strings as char[]'s in a
* hash table.  note that this is not a general purpose
* class.  for example, it cannot remove items from the
* set, nor does it resize its hash table to be smaller,
* etc.  it is designed to be quick to test if a char[]
* is in the set without the necessity of converting it
* to a string first.
* <p>
* <em>please note:</em> this class implements {@link java.util.set set} but
* does not behave like it should in all cases. the generic type is
* {@code set<object>}, because you can add any object to it,
* that has a string representation. the add methods will use
* {@link object#tostring} and store the result using a {@code char[]}
* buffer. the same behaviour have the {@code contains()} methods.
* the {@link #iterator()} returns an {@code iterator<string>}.
* for type safety also {@link #stringiterator()} is provided.
*/
public class chararrayset extends abstractset<object>
private final static int init_size   8
private char entries
private int count
private final boolean ignorecase
public static final chararrayset empty_set   chararrayset unmodifiableset new chararrayset 0  false
/** create set with enough capacity to hold startsize
*  terms */
public chararrayset int startsize  boolean ignorecase
this ignorecase   ignorecase
int size   init_size
while startsize    startsize>>2  > size
size <<  1
entries   new char
/** create set from a collection of char[] or string */
public chararrayset collection<? extends object> c  boolean ignorecase
this c size    ignorecase
addall c
/** create set from entries */
private chararrayset char entries  boolean ignorecase  int count
this entries   entries
this ignorecase   ignorecase
this count   count
/** true if the <code>len</code> chars of <code>text</code> starting at <code>off</code>
* are in the set */
public boolean contains char text  int off  int len
return entries    null
/** true if the <code>charsequence</code> is in the set */
public boolean contains charsequence cs
return entries    null
private int getslot char text  int off  int len
int code   gethashcode text  off  len
int pos   code    entries length 1
char text2   entries
if  text2    null     equals text  off  len  text2
final int inc     code>>8  code  1
do
code    inc
pos   code    entries length 1
text2   entries
while  text2    null     equals text  off  len  text2
return pos
/** returns true if the string is in the set */
private int getslot charsequence text
int code   gethashcode text
int pos   code    entries length 1
char text2   entries
if  text2    null     equals text  text2
final int inc     code>>8  code  1
do
code    inc
pos   code    entries length 1
text2   entries
while  text2    null     equals text  text2
return pos
/** add this charsequence into the set */
public boolean add charsequence text
return add text tostring        could be more efficient
/** add this string into the set */
public boolean add string text
return add text tochararray
/** add this char[] directly to the set.
* if ignorecase is true for this set, the text array will be directly modified.
* the user should never modify this text array after calling this method.
*/
public boolean add char text
if  ignorecase
for int i 0 i<text length i
text   character tolowercase text
int slot   getslot text  0  text length
if  entries    null  return false
entries   text
count
if  count    count>>2  > entries length
rehash
return true
private boolean equals char text1  int off  int len  char text2
if  len    text2 length
return false
if  ignorecase
for int i 0 i<len i
if  character tolowercase text1     text2
return false
else
for int i 0 i<len i
if  text1    text2
return false
return true
private boolean equals charsequence text1  char text2
int len   text1 length
if  len    text2 length
return false
if  ignorecase
for int i 0 i<len i
if  character tolowercase text1 charat i      text2
return false
else
for int i 0 i<len i
if  text1 charat i     text2
return false
return true
private void rehash
final int newsize   2 entries length
char oldentries   entries
entries   new char
for int i 0 i<oldentries length i
char text   oldentries
if  text    null
// todo: could be faster... no need to compare strings on collision
entries   text
private int gethashcode char text  int offset  int len
int code   0
final int stop   offset   len
if  ignorecase
for  int i offset  i<stop  i
code   code 31   character tolowercase text
else
for  int i offset  i<stop  i
code   code 31   text
return code
private int gethashcode charsequence text
int code   0
int len   text length
if  ignorecase
for  int i 0  i<len  i
code   code 31   character tolowercase text charat i
else
for  int i 0  i<len  i
code   code 31   text charat i
return code
@override
public int size
return count
@override
public boolean isempty
return count  0
@override
public boolean contains object o
if  o instanceof char
final char text    char o
return contains text  0  text length
return contains o tostring
@override
public boolean add object o
if  o instanceof char
return add  char o
return add o tostring
/**
* returns an unmodifiable {@link chararrayset}. this allows to provide
* unmodifiable views of internal sets for "read-only" use.
*
* @param set
*          a set for which the unmodifiable set is returned.
* @return an new unmodifiable {@link chararrayset}.
* @throws nullpointerexception
*           if the given set is <code>null</code>.
*/
public static chararrayset unmodifiableset chararrayset set
if  set    null
throw new nullpointerexception
if  set    empty_set
return empty_set
if  set instanceof unmodifiablechararrayset
return set
/*
* instead of delegating calls to the given set copy the low-level values to
* the unmodifiable subclass
*/
return new unmodifiablechararrayset set entries  set ignorecase  set count
/**
* returns a copy of the given set as a {@link chararrayset}. if the given set
* is a {@link chararrayset} the ignorecase property will be preserved.
*
* @param set
*          a set to copy
* @return a copy of the given set as a {@link chararrayset}. if the given set
*         is a {@link chararrayset} the ignorecase property will be
*         preserved.
*/
public static chararrayset copy set<?> set
if  set    null
throw new nullpointerexception
if set    empty_set
return empty_set
final boolean ignorecase   set instanceof chararrayset ?   chararrayset  set  ignorecase
false
return new chararrayset set  ignorecase
/** the iterator<string> for this set.  strings are constructed on the fly, so
* use <code>nextchararray</code> for more efficient access. */
public class chararraysetiterator implements iterator<string>
int pos  1
char next
chararraysetiterator
gonext
private void gonext
next   null
pos
while  pos < entries length     next entries     null  pos
public boolean hasnext
return next    null
/** do not modify the returned char[] */
public char nextchararray
char ret   next
gonext
return ret
/** returns the next string, as a set<string> would...
* use nextchararray() for better efficiency. */
public string next
return new string nextchararray
public void remove
throw new unsupportedoperationexception
/** returns an iterator of new allocated strings */
public iterator<string> stringiterator
return new chararraysetiterator
/** returns an iterator of new allocated strings, this method violates the set interface */
@override
@suppresswarnings
public iterator<object> iterator
return  iterator  stringiterator
/**
* efficient unmodifiable {@link chararrayset}. this implementation does not
* delegate calls to a give {@link chararrayset} like
* {@link collections#unmodifiableset(java.util.set)} does. instead is passes
* the internal representation of a {@link chararrayset} to a super
* constructor and overrides all mutators.
*/
private static final class unmodifiablechararrayset extends chararrayset
private unmodifiablechararrayset char entries  boolean ignorecase
int count
super entries  ignorecase  count
@override
public boolean add object o
throw new unsupportedoperationexception
@override
public boolean addall collection<? extends object> coll
throw new unsupportedoperationexception
@override
public boolean add char text
throw new unsupportedoperationexception
@override
public boolean add charsequence text
throw new unsupportedoperationexception
@override
public boolean add string text
throw new unsupportedoperationexception