package org apache lucene analysis fr
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util set
import java util arrays
import org apache lucene analysis standard standardtokenizer     for javadocs
import org apache lucene analysis chararrayset
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenfilter
import org apache lucene analysis tokenattributes termattribute
/**
* removes elisions from a {@link tokenstream}. for example, "l'avion" (the plane) will be
* tokenized as "avion" (plane).
* <p>
* note that {@link standardtokenizer} sees " ' " as a space, and cuts it out.
*
* @see <a href="http://fr.wikipedia.org/wiki/%c3%89lision">elision in wikipedia</a>
*/
public final class elisionfilter extends tokenfilter
private chararrayset articles   null
private termattribute termatt
private static char apostrophes
public void setarticles set<?> articles
if  articles instanceof chararrayset
this articles    chararrayset  articles
else
this articles   new chararrayset articles  true
/**
* constructs an elision filter with standard stop words
*/
protected elisionfilter tokenstream input
super input
this articles   new chararrayset arrays aslist
true
termatt   addattribute termattribute class
/**
* constructs an elision filter with a set of stop words
*/
public elisionfilter tokenstream input  set<?> articles
super input
setarticles articles
termatt   addattribute termattribute class
/**
* constructs an elision filter with an array of stop words
*/
public elisionfilter tokenstream input  string articles
super input
this articles   new chararrayset arrays aslist articles   true
termatt   addattribute termattribute class
/**
* increments the {@link tokenstream} with a {@link termattribute} without elisioned start
*/
@override
public final boolean incrementtoken   throws ioexception
if  input incrementtoken
char termbuffer   termatt termbuffer
int termlength   termatt termlength
int minpoz   integer max_value
for  int i   0  i < apostrophes length  i
char apos   apostrophes
// the equivalent of string.indexof(ch)
for  int poz   0  poz < termlength   poz
if  termbuffer    apos
minpoz   math min poz  minpoz
break
// an apostrophe has been found. if the prefix is an article strip it off.
if  minpoz    integer max_value
articles contains termatt termbuffer    0  minpoz
termatt settermbuffer termatt termbuffer    minpoz   1  termatt termlength      minpoz   1
return true
else
return false