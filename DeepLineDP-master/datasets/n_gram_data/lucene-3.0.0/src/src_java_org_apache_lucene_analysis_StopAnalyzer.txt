package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io file
import java io ioexception
import java io reader
import java util arrays
import java util set
import java util list
import org apache lucene util version
/** filters {@link lettertokenizer} with {@link lowercasefilter} and {@link stopfilter}.
*
* <a name="version"/>
* <p>you must specify the required {@link version}
* compatibility when creating stopanalyzer:
* <ul>
*   <li> as of 2.9, position increments are preserved
* </ul>
*/
public final class stopanalyzer extends analyzer
private final set<?> stopwords
private final boolean enablepositionincrements
/** an unmodifiable set containing some common english words that are not usually useful
for searching.*/
public static final set<?> english_stop_words_set
static
final list<string> stopwords   arrays aslist
final chararrayset stopset   new chararrayset stopwords size    false
stopset addall stopwords
english_stop_words_set   chararrayset unmodifiableset stopset
/** builds an analyzer which removes words in
*  {@link #english_stop_words_set}.
* @param matchversion see <a href="#version">above</a>
*/
public stopanalyzer version matchversion
stopwords   english_stop_words_set
enablepositionincrements   stopfilter getenablepositionincrementsversiondefault matchversion
/** builds an analyzer with the stop words from the given set.
* @param matchversion see <a href="#version">above</a>
* @param stopwords set of stop words */
public stopanalyzer version matchversion  set<?> stopwords
this stopwords   stopwords
enablepositionincrements   stopfilter getenablepositionincrementsversiondefault matchversion
/** builds an analyzer with the stop words from the given file.
* @see wordlistloader#getwordset(file)
* @param matchversion see <a href="#version">above</a>
* @param stopwordsfile file to load stop words from */
public stopanalyzer version matchversion  file stopwordsfile  throws ioexception
stopwords   wordlistloader getwordset stopwordsfile
this enablepositionincrements   stopfilter getenablepositionincrementsversiondefault matchversion
/** builds an analyzer with the stop words from the given reader.
* @see wordlistloader#getwordset(reader)
* @param matchversion see <a href="#version">above</a>
* @param stopwords reader to load stop words from */
public stopanalyzer version matchversion  reader stopwords  throws ioexception
stopwords   wordlistloader getwordset stopwords
this enablepositionincrements   stopfilter getenablepositionincrementsversiondefault matchversion
/** filters lowercasetokenizer with stopfilter. */
@override
public tokenstream tokenstream string fieldname  reader reader
return new stopfilter enablepositionincrements  new lowercasetokenizer reader   stopwords
/** filters lowercasetokenizer with stopfilter. */
private class savedstreams
tokenizer source
tokenstream result
@override
public tokenstream reusabletokenstream string fieldname  reader reader  throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new lowercasetokenizer reader
streams result   new stopfilter enablepositionincrements  streams source  stopwords
setprevioustokenstream streams
else
streams source reset reader
return streams result