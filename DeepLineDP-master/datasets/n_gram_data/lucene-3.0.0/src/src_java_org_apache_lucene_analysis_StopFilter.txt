package org apache lucene analysis
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util arrays
import java util set
import java util list
import org apache lucene analysis tokenattributes positionincrementattribute
import org apache lucene analysis tokenattributes termattribute
import org apache lucene queryparser queryparser     for javadoc
import org apache lucene util version
/**
* removes stop words from a token stream.
*/
public final class stopfilter extends tokenfilter
private final chararrayset stopwords
private boolean enablepositionincrements   false
private termattribute termatt
private positionincrementattribute posincratt
/**
* construct a token stream filtering the given input.
* if <code>stopwords</code> is an instance of {@link chararrayset} (true if
* <code>makestopset()</code> was used to construct the set) it will be directly used
* and <code>ignorecase</code> will be ignored since <code>chararrayset</code>
* directly controls case sensitivity.
* <p/>
* if <code>stopwords</code> is not an instance of {@link chararrayset},
* a new chararrayset will be constructed and <code>ignorecase</code> will be
* used to specify the case sensitivity of that set.
*
* @param enablepositionincrements true if token positions should record the removed stop words
* @param input input tokenstream
* @param stopwords a set of strings or char[] or any other tostring()-able set representing the stopwords
* @param ignorecase if true, all words are lower cased first
*/
public stopfilter boolean enablepositionincrements  tokenstream input  set<?> stopwords  boolean ignorecase
super input
if  stopwords instanceof chararrayset
this stopwords    chararrayset stopwords
else
this stopwords   new chararrayset stopwords size    ignorecase
this stopwords addall stopwords
this enablepositionincrements   enablepositionincrements
termatt   addattribute termattribute class
posincratt   addattribute positionincrementattribute class
/**
* constructs a filter which removes words from the input
* tokenstream that are named in the set.
*
* @param enablepositionincrements true if token positions should record the removed stop words
* @param in input stream
* @param stopwords a set of strings or char[] or any other tostring()-able set representing the stopwords
* @see #makestopset(java.lang.string[])
*/
public stopfilter boolean enablepositionincrements  tokenstream in  set<?> stopwords
this enablepositionincrements  in  stopwords  false
/**
* builds a set from an array of stop words,
* appropriate for passing into the stopfilter constructor.
* this permits this stopwords construction to be cached once when
* an analyzer is constructed.
*
* @see #makestopset(java.lang.string[], boolean) passing false to ignorecase
*/
public static final set<object> makestopset string    stopwords
return makestopset stopwords  false
/**
* builds a set from an array of stop words,
* appropriate for passing into the stopfilter constructor.
* this permits this stopwords construction to be cached once when
* an analyzer is constructed.
* @param stopwords a list of strings or char[] or any other tostring()-able list representing the stopwords
* @return a set ({@link chararrayset}) containing the words
* @see #makestopset(java.lang.string[], boolean) passing false to ignorecase
*/
public static final set<object> makestopset list<?> stopwords
return makestopset stopwords  false
/**
*
* @param stopwords an array of stopwords
* @param ignorecase if true, all words are lower cased first.
* @return a set containing the words
*/
public static final set<object> makestopset string stopwords  boolean ignorecase
chararrayset stopset   new chararrayset stopwords length  ignorecase
stopset addall arrays aslist stopwords
return stopset
/**
*
* @param stopwords a list of strings or char[] or any other tostring()-able list representing the stopwords
* @param ignorecase if true, all words are lower cased first
* @return a set ({@link chararrayset}) containing the words
*/
public static final set<object> makestopset list<?> stopwords  boolean ignorecase
chararrayset stopset   new chararrayset stopwords size    ignorecase
stopset addall stopwords
return stopset
/**
* returns the next input token whose term() is not a stop word.
*/
@override
public final boolean incrementtoken   throws ioexception
// return the first non-stop word found
int skippedpositions   0
while  input incrementtoken
if   stopwords contains termatt termbuffer    0  termatt termlength
if  enablepositionincrements
posincratt setpositionincrement posincratt getpositionincrement     skippedpositions
return true
skippedpositions    posincratt getpositionincrement
// reached eos -- return false
return false
/**
* returns version-dependent default for
* enablepositionincrements.  analyzers that embed
* stopfilter use this method when creating the
* stopfilter.  prior to 2.9, this returns false.  on 2.9
* or later, it returns true.
*/
public static boolean getenablepositionincrementsversiondefault version matchversion
return matchversion onorafter version lucene_29
/**
* @see #setenablepositionincrements(boolean).
*/
public boolean getenablepositionincrements
return enablepositionincrements
/**
* if <code>true</code>, this stopfilter will preserve
* positions of the incoming tokens (ie, accumulate and
* set position increments of the removed stop tokens).
* generally, <code>true</code> is best as it does not
* lose information (positions of the original tokens)
* during indexing.
*
* <p> when set, when a token is stopped
* (omitted), the position increment of the following
* token is incremented.
*
* <p> <b>note</b>: be sure to also
* set {@link queryparser#setenablepositionincrements} if
* you use queryparser to create queries.
*/
public void setenablepositionincrements boolean enable
this enablepositionincrements   enable