package org apache lucene analysis br
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io file
import java io ioexception
import java io reader
import java util arrays
import java util hashset
import java util map
import java util set
import java util collections
import org apache lucene analysis analyzer
import org apache lucene analysis chararrayset
import org apache lucene analysis lowercasefilter
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenizer
import org apache lucene analysis wordlistloader
import org apache lucene analysis standard standardanalyzer      for javadoc
import org apache lucene analysis standard standardfilter
import org apache lucene analysis standard standardtokenizer
import org apache lucene util version
/**
* {@link analyzer} for brazilian portuguese language.
* <p>
* supports an external list of stopwords (words that
* will not be indexed at all) and an external list of exclusions (words that will
* not be stemmed, but indexed).
* </p>
*
* <p><b>note</b>: this class uses the same {@link version}
* dependent settings as {@link standardanalyzer}.</p>
*/
public final class braziliananalyzer extends analyzer
/**
* list of typical brazilian portuguese stopwords.
* @deprecated use {@link #getdefaultstopset()} instead
*/
// todo make this private in 3.1
public final static string brazilian_stop_words
/**
* returns an unmodifiable instance of the default stop-words set.
* @return an unmodifiable instance of the default stop-words set.
*/
public static set<?> getdefaultstopset
return defaultsetholder default_stop_set
private static class defaultsetholder
static final set<?> default_stop_set   chararrayset
unmodifiableset new chararrayset arrays aslist brazilian_stop_words
false
/**
* contains the stopwords used with the {@link stopfilter}.
*/
private final set<?> stoptable
/**
* contains words that should be indexed but not stemmed.
*/
// todo make this private in 3.1
private set<?> excltable   collections emptyset
private final version matchversion
/**
* builds an analyzer with the default stop words ({@link #brazilian_stop_words}).
*/
public braziliananalyzer version matchversion
this matchversion  defaultsetholder default_stop_set
/**
* builds an analyzer with the given stop words
*
* @param matchversion
*          lucene compatibility version
* @param stopwords
*          a stopword set
*/
public braziliananalyzer version matchversion  set<?> stopwords
stoptable   chararrayset unmodifiableset chararrayset copy stopwords
this matchversion   matchversion
/**
* builds an analyzer with the given stop words and stemming exclusion words
*
* @param matchversion
*          lucene compatibility version
* @param stopwords
*          a stopword set
*/
public braziliananalyzer version matchversion  set<?> stopwords
set<?> stemexclusionset
this matchversion  stopwords
excltable   chararrayset unmodifiableset chararrayset
copy stemexclusionset
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #braziliananalyzer(version, set)} instead
*/
public braziliananalyzer version matchversion  string    stopwords
this matchversion  stopfilter makestopset stopwords
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #braziliananalyzer(version, set)} instead
*/
public braziliananalyzer version matchversion  map<? ?> stopwords
this matchversion  stopwords keyset
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #braziliananalyzer(version, set)} instead
*/
public braziliananalyzer version matchversion  file stopwords
throws ioexception
this matchversion  wordlistloader getwordset stopwords
/**
* builds an exclusionlist from an array of strings.
* @deprecated use {@link #braziliananalyzer(version, set, set)} instead
*/
public void setstemexclusiontable  string    exclusionlist
excltable   stopfilter makestopset  exclusionlist
setprevioustokenstream null      force a new stemmer to be created
/**
* builds an exclusionlist from a {@link map}.
* @deprecated use {@link #braziliananalyzer(version, set, set)} instead
*/
public void setstemexclusiontable  map<? ?> exclusionlist
excltable   new hashset<object> exclusionlist keyset
setprevioustokenstream null      force a new stemmer to be created
/**
* builds an exclusionlist from the words contained in the given file.
* @deprecated use {@link #braziliananalyzer(version, set, set)} instead
*/
public void setstemexclusiontable  file exclusionlist   throws ioexception
excltable   wordlistloader getwordset  exclusionlist
setprevioustokenstream null      force a new stemmer to be created
/**
* creates a {@link tokenstream} which tokenizes all the text in the provided {@link reader}.
*
* @return  a {@link tokenstream} built from a {@link standardtokenizer} filtered with
* 			{@link lowercasefilter}, {@link standardfilter}, {@link stopfilter}, and
*          {@link brazilianstemfilter}.
*/
@override
public final tokenstream tokenstream string fieldname  reader reader
tokenstream result   new standardtokenizer  matchversion  reader
result   new lowercasefilter  result
result   new standardfilter  result
result   new stopfilter  stopfilter getenablepositionincrementsversiondefault matchversion
result  stoptable
result   new brazilianstemfilter  result  excltable
return result
private class savedstreams
tokenizer source
tokenstream result
/**
* returns a (possibly reused) {@link tokenstream} which tokenizes all the text
* in the provided {@link reader}.
*
* @return  a {@link tokenstream} built from a {@link standardtokenizer} filtered with
*          {@link lowercasefilter}, {@link standardfilter}, {@link stopfilter}, and
*          {@link brazilianstemfilter}.
*/
@override
public tokenstream reusabletokenstream string fieldname  reader reader
throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new standardtokenizer matchversion  reader
streams result   new lowercasefilter streams source
streams result   new standardfilter streams result
streams result   new stopfilter stopfilter getenablepositionincrementsversiondefault matchversion
streams result  stoptable
streams result   new brazilianstemfilter streams result  excltable
setprevioustokenstream streams
else
streams source reset reader
return streams result