package org apache lucene analysis ru
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java io reader
import java util arrays
import java util map
import java util set
import org apache lucene analysis analyzer
import org apache lucene analysis chararrayset
import org apache lucene analysis lowercasefilter
import org apache lucene analysis stopfilter
import org apache lucene analysis tokenstream
import org apache lucene analysis tokenizer
import org apache lucene util version
/**
* {@link analyzer} for russian language.
* <p>
* supports an external list of stopwords (words that
* will not be indexed at all).
* a default set of stopwords is used unless an alternative list is specified.
* </p>
*/
public final class russiananalyzer extends analyzer
/**
* list of typical russian stopwords.
*/
private static final string russian_stop_words
"ãâ²ãâãâµã
ãâ²ãâ ãâ³ãâ´ãâµ"
"ãâ¸ã
ãâº ãâºãâ°ãâº"
"ãâ½ãâ¸ã
ãâ½ãâ¾ ãâ½ãâ ãâ¾ ãâ¾ãâ±"
"ã
ãâ¾ãâãâ ãâãâµãâ³ãâ¾ ãâãâµãâ¹"
private static class defaultsetholder
static final set<?> default_stop_set   chararrayset
unmodifiableset new chararrayset arrays aslist russian_stop_words
false
/**
* contains the stopwords used with the stopfilter.
*/
private final set<?> stopset
private final version matchversion
public russiananalyzer version matchversion
this matchversion  defaultsetholder default_stop_set
/**
* builds an analyzer with the given stop words.
* @deprecated use {@link #russiananalyzer(version, set)} instead
*/
public russiananalyzer version matchversion  string    stopwords
this matchversion  stopfilter makestopset stopwords
/**
* builds an analyzer with the given stop words
*
* @param matchversion
*          lucene compatibility version
* @param stopwords
*          a stopword set
*/
public russiananalyzer version matchversion  set<?> stopwords
stopset   chararrayset unmodifiableset chararrayset copy stopwords
this matchversion   matchversion
/**
* builds an analyzer with the given stop words.
* todo: create a set version of this ctor
* @deprecated use {@link #russiananalyzer(version, set)} instead
*/
public russiananalyzer version matchversion  map<? ?> stopwords
this matchversion  stopwords keyset
/**
* creates a {@link tokenstream} which tokenizes all the text in the
* provided {@link reader}.
*
* @return  a {@link tokenstream} built from a
*   {@link russianlettertokenizer} filtered with
*   {@link russianlowercasefilter}, {@link stopfilter},
*   and {@link russianstemfilter}
*/
@override
public tokenstream tokenstream string fieldname  reader reader
tokenstream result   new russianlettertokenizer reader
result   new lowercasefilter result
result   new stopfilter stopfilter getenablepositionincrementsversiondefault matchversion
result  stopset
result   new russianstemfilter result
return result
private class savedstreams
tokenizer source
tokenstream result
/**
* returns a (possibly reused) {@link tokenstream} which tokenizes all the text
* in the provided {@link reader}.
*
* @return  a {@link tokenstream} built from a
*   {@link russianlettertokenizer} filtered with
*   {@link russianlowercasefilter}, {@link stopfilter},
*   and {@link russianstemfilter}
*/
@override
public tokenstream reusabletokenstream string fieldname  reader reader
throws ioexception
savedstreams streams    savedstreams  getprevioustokenstream
if  streams    null
streams   new savedstreams
streams source   new russianlettertokenizer reader
streams result   new lowercasefilter streams source
streams result   new stopfilter stopfilter getenablepositionincrementsversiondefault matchversion
streams result  stopset
streams result   new russianstemfilter streams result
setprevioustokenstream streams
else
streams source reset reader
return streams result