/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache lucene spatial geometry shape
import org apache lucene spatial geometry floatlatlng
import org apache lucene spatial geometry latlng
/**
* lat-long rect.  instances are mutable.
*
* <p><font color="red"><b>note:</b> this api is still in
* flux and might change in incompatible ways in the next
* release.</font>
*/
public class llrect
private latlng ll  ur
public llrect latlng ll  latlng ur
this ll ll
this ur ur
public llrect llrect other
this ll other ll
this ur other ur
/**
* return the area in units of lat-lng squared.  this is a contrived unit
* that only has value when comparing to something else.
*/
public double area
return math abs  ll getlat   ur getlat       ll getlng   ur getlng
public latlng getlowerleft
return ll
public latlng getupperright
return ur
@override
public string tostring
return     ll       ur
public latlng getmidpoint
return ll calculatemidpoint ur
/**
* approximates a box centered at the given point with the given width and height in miles.
* @param center
* @param widthmi
* @param heightmi
*/
public static llrect createbox latlng center  double widthmi  double heightmi
double d   widthmi
latlng ur   boxcorners center  d  45 0      assume right angles
latlng ll   boxcorners center  d  225 0
//system.err.println("boxcorners: ur " + ur.getlat() + ',' + ur.getlng());
//system.err.println("boxcorners: cnt " + center.getlat() + ',' + center.getlng());
//system.err.println("boxcorners: ll " + ll.getlat() + ',' + ll.getlng());
return new llrect ll  ur
/**
* returns a rectangle shape for the bounding box
*/
public rectangle torectangle
return new rectangle ll getlng    ll getlat    ur getlng    ur getlat
private static latlng boxcorners latlng center  double d  double brngdeg
double a   center getlat
double b   center getlng
double r   3963 0     radius of earth in miles
double brng    math pi brngdeg 180
double lat1    math pi a 180
double lon1    math pi b 180
// haversine formula
double lat2   math asin  math sin lat1  math cos d r
math cos lat1  math sin d r  math cos brng
double lon2   lon1   math atan2 math sin brng  math sin d r  math cos lat1
math cos d r  math sin lat1  math sin lat2
lat2    lat2 180  math pi
lon2    lon2 180  math pi
// normalize long first
latlng ll   normlng lat2 lon2
// normalize lat - could flip poles
ll   normlat ll getlat   ll getlng
return ll
/**
* returns a normalized lat rectangle shape for the bounding box
* if you go over the poles, you need to flip the lng value too
*/
private static latlng normlat double lat  double lng
if  lat > 90 0
lat   90 0    lat   90 0
if  lng < 0
lng   lng 180
else
lng lng 180
else if  lat <  90 0
lat    90 0    lat   90 0
if  lng < 0
lng   lng 180
else
lng lng 180
latlng ll new floatlatlng lat  lng
return ll
/**
* returns a normalized lng rectangle shape for the bounding box
*/
private static latlng normlng double lat double lng
if  lng > 180 0
lng    1 0  180 0    lng   180 0
else if  lng <  180 0
lng    lng   180 0  180 0
latlng ll new floatlatlng lat  lng
return ll
@override
public int hashcode
final int prime   31
int result   1
result   prime   result     ll    null  ? 0   ll hashcode
result   prime   result     ur    null  ? 0   ur hashcode
return result
@override
public boolean equals object obj
if  this    obj
return true
if  obj    null
return false
if  getclass      obj getclass
return false
llrect other    llrect  obj
if  ll    null
if  other ll    null
return false
else if   ll equals other ll
return false
if  ur    null
if  other ur    null
return false
else if   ur equals other ur
return false
return true