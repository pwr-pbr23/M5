package org apache lucene search
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java io ioexception
import java util map
import java util weakhashmap
import java util concurrent locks reentrantlock
import org apache lucene index indexreader
import org apache lucene util openbitsetdisi
/**
* wraps another filter's result and caches it.  the purpose is to allow
* filters to simply filter, and then wrap with this class to add caching.
*/
public class cachingwrapperfilter extends filter
filter filter
/**
* a transient filter cache (package private because of test)
*/
transient map<indexreader  docidset> cache
private final reentrantlock lock   new reentrantlock
/**
* @param filter filter to cache results of
*/
public cachingwrapperfilter filter filter
this filter   filter
/** provide the docidset to be cached, using the docidset provided
*  by the wrapped filter.
*  <p>this implementation returns the given {@link docidset}, if {@link docidset#iscacheable}
*  returns <code>true</code>, else it copies the {@link docidsetiterator} into
*  an {@link openbitsetdisi}.
*/
protected docidset docidsettocache docidset docidset  indexreader reader  throws ioexception
if  docidset iscacheable
return docidset
else
final docidsetiterator it   docidset iterator
// null is allowed to be returned by iterator(),
// in this case we wrap with the empty set,
// which is cacheable.
return  it    null  ? docidset empty_docidset   new openbitsetdisi it  reader maxdoc
@override
public docidset getdocidset indexreader reader  throws ioexception
lock lock
try
if  cache    null
cache   new weakhashmap<indexreader docidset>
final docidset cached   cache get reader
if  cached    null  return cached
finally
lock unlock
final docidset docidset   docidsettocache filter getdocidset reader   reader
if  docidset    null
lock lock
try
cache put reader  docidset
finally
lock unlock
return docidset
@override
public string tostring
return   filter
@override
public boolean equals object o
if    o instanceof cachingwrapperfilter   return false
return this filter equals   cachingwrapperfilter o  filter
@override
public int hashcode
return filter hashcode   ^ 0x1117bf25