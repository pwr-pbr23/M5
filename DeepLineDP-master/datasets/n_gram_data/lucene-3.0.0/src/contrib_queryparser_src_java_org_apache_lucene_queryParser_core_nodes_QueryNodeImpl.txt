package org apache lucene queryparser core nodes
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
import java util arraylist
import java util hashtable
import java util list
import java util map
import java util resourcebundle
import org apache lucene messages nls
import org apache lucene queryparser core messages queryparsermessages
/**
* a {@link querynodeimpl} is the default implementation of the interface
* {@link querynode}
*/
public abstract class querynodeimpl implements querynode  cloneable
private static final long serialversionuid   5569870883474845989l
/* index default field */
// todo remove plaintext_field_name replacing it with configuration apis
public static final string plaintext_field_name
private boolean isleaf   true
private hashtable<charsequence  object> tags   new hashtable<charsequence  object>
private list<querynode> clauses   null
protected void allocate
if  this clauses    null
this clauses   new arraylist<querynode>
else
this clauses clear
public final void add querynode child
if  isleaf      this clauses    null    child    null
throw new illegalargumentexception nls
getlocalizedmessage queryparsermessages node_action_not_supported
this clauses add child
querynodeimpl  child  setparent this
public final void add list<querynode> children
if  isleaf      this clauses    null
throw new illegalargumentexception nls
getlocalizedmessage queryparsermessages node_action_not_supported
for  querynode child   getchildren
add child
public boolean isleaf
return this isleaf
public final void set list<querynode> children
if  isleaf      this clauses    null
resourcebundle bundle   resourcebundle
getbundle
string message   bundle getobject
tostring
throw new illegalargumentexception message
// reset parent value
for  querynode child   children
querynodeimpl  child  setparent null
// allocate new children list
allocate
// add new children and set parent
for  querynode child   children
add child
public querynode clonetree   throws clonenotsupportedexception
querynodeimpl clone    querynodeimpl  super clone
clone isleaf   this isleaf
// reset all tags
clone tags   new hashtable<charsequence  object>
// copy children
if  this clauses    null
list<querynode> localclauses   new arraylist<querynode>
for  querynode clause   this clauses
localclauses add clause clonetree
clone clauses   localclauses
return clone
@override
public object clone   throws clonenotsupportedexception
return clonetree
protected void setleaf boolean isleaf
this isleaf   isleaf
/**
* @return a list for querynode object. returns null, for nodes that do not
*         contain children. all leaf nodes return null.
*/
public final list<querynode> getchildren
if  isleaf      this clauses    null
return null
return this clauses
public void settag charsequence tagname  object value
this tags put tagname tostring   tolowercase    value
public void unsettag charsequence tagname
this tags remove tagname tostring   tolowercase
public boolean containstag charsequence tagname
return this tags containskey tagname tostring   tolowercase
public object gettag charsequence tagname
return this tags get tagname tostring   tolowercase
private querynode parent   null
private void setparent querynode parent
this parent   parent
public querynode getparent
return this parent
protected boolean isroot
return getparent      null
/**
* if set to true the the method toquerystring will not write field names
*/
protected boolean toquerystringignorefields   false
/**
* this method is use toquerystring to detect if fld is the default field
*
* @param fld
*          - field name
* @return true if fld is the default field
*/
protected boolean isdefaultfield charsequence fld
if  this toquerystringignorefields
return true
if  fld    null
return true
if  querynodeimpl plaintext_field_name equals fld tostring
return true
return false
/**
* every implementation of this class should return pseudo xml like this:
*
* for fieldquerynode: <field start='1' end='2' field='subject' text='foo'/>
*
* @see org.apache.lucene.queryparser.core.nodes.querynode#tostring()
*/
@override
public string tostring
return super tostring
/**
* @see org.apache.lucene.queryparser.core.nodes.querynode#gettag(charsequence)
* @return a map with all tags for this querynode
*/
@suppresswarnings
public map<charsequence  object> gettags
return  map<charsequence  object>  this tags clone
end class querynodeimpl