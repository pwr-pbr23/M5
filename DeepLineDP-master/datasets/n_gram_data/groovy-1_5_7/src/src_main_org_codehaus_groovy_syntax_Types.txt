/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy syntax
import java util hashmap
import java util iterator
import java util map
import org codehaus groovy groovybugerror
/**
*  typing information for the cst system.  the types here are those
*  used by cstnode, token, and reduction.
*
*  @author <a href="mailto:bob@werken.com">bob mcwhirter</a>
*  @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
*
*  @version $id$
*/
public class types
//---------------------------------------------------------------------------
// types: note that ordering and values are important to local routines!
//
// special tokens
public static final int eof                            1        end of file
public static final int unknown                       0         the unknown token
//
// relevant whitespace
public static final int newline                       5          n
//
// operators and other markers
public static final int left_curly_brace              10
public static final int right_curly_brace             20
public static final int left_square_bracket           30        [
public static final int right_square_bracket          40        ]
public static final int left_parenthesis              50
public static final int right_parenthesis             60
public static final int dot                           70
public static final int dot_dot                       75
public static final int dot_dot_dot                   77
public static final int navigate                      80         >
public static final int find_regex                    90         ~
public static final int match_regex                   94          ~
public static final int regex_pattern                 97        ~
public static final int equal                         100
public static final int equals                        equal
public static final int assign                        equal
public static final int compare_not_equal             120
public static final int compare_identical             121
public static final int compare_not_identical         122
public static final int compare_equal                 123
public static final int compare_less_than             124       <
public static final int compare_less_than_equal       125       <
public static final int compare_greater_than          126       >
public static final int compare_greater_than_equal    127       >
public static final int compare_to                    128       < >
public static final int not                           160
public static final int logical_or                    162
public static final int logical_and                   164
public static final int logical_or_equal              166
public static final int logical_and_equal             168
public static final int plus                          200
public static final int minus                         201
public static final int multiply                      202
public static final int divide                        203
public static final int intdiv                        204
public static final int mod                           205       %
public static final int star_star                     206
public static final int power                         star_star
public static final int plus_equal                    210
public static final int minus_equal                   211
public static final int multiply_equal                212
public static final int divide_equal                  213
public static final int intdiv_equal                  214
public static final int mod_equal                     215       %
public static final int power_equal                   216
public static final int plus_plus                     250
public static final int prefix_plus_plus              251
public static final int postfix_plus_plus             252
public static final int prefix_plus                   253
public static final int minus_minus                   260
public static final int prefix_minus_minus            261
public static final int postfix_minus_minus           262
public static final int prefix_minus                  263          negation
public static final int left_shift                    280       <<
public static final int right_shift                   281       >>
public static final int right_shift_unsigned          282       >>>
public static final int left_shift_equal              285       <<
public static final int right_shift_equal             286       >>
public static final int right_shift_unsigned_equal    287       >>>
public static final int star                          multiply
public static final int comma                         300
public static final int colon                         310
public static final int semicolon                     320
public static final int question                      330       ?
// todo refactor pipe to be bitwise_or
public static final int pipe                          340
public static final int double_pipe                   logical_or
public static final int bitwise_or                    pipe
public static final int bitwise_and                   341
public static final int bitwise_xor                   342       ^
public static final int bitwise_or_equal              350
public static final int bitwise_and_equal             351
public static final int bitwise_xor_equal             352       ^
public static final int bitwise_negation              regex_pattern        ~
//
// literals
public static final int string                        400       any bare string data
public static final int identifier                    440       anything text and not a keyword
public static final int integer_number                450       integer
public static final int decimal_number                451       decimal
//
// keywords: (primarily) class/method declaration modifiers
public static final int keyword_private               500       declaration visibility
public static final int keyword_protected             501       declaration visibility
public static final int keyword_public                502       declaration visibility
public static final int keyword_abstract              510       method body missing
public static final int keyword_final                 511       declaration cannot be overridden
public static final int keyword_native                512       a native code entry point
public static final int keyword_transient             513       property should not be persisted
public static final int keyword_volatile              514       compiler should never cache property
public static final int keyword_synchronized          520       modifier and block type
public static final int keyword_static                521       modifier and block type
//
// keywords: type system
public static final int keyword_def                   530       identifies a function declaration
public static final int keyword_defmacro              539       xxx br identifies a macro declaration
public static final int keyword_class                 531       identifies a class declaration
public static final int keyword_interface             532       identifies an interface declaration
public static final int keyword_mixin                 533       identifies a mixin declaration
public static final int keyword_implements            540       specifies the interfaces implemented by a class
public static final int keyword_extends               541       specifies the base class interface for a new one
public static final int keyword_this                  542       method variable points to the current instance
public static final int keyword_super                 543       method variable points to the base instance
public static final int keyword_instanceof            544       type comparator
public static final int keyword_property              545       deprecated  identifies a property
public static final int keyword_new                   546       used to create a new instance of a class
public static final int keyword_package               550       declares the package scope
public static final int keyword_import                551       declares an external class
public static final int keyword_as                    552       used in import statements to create an alias
//
// keywords: control structures
public static final int keyword_return                560       returns from a closure or method
public static final int keyword_if                    561       if
public static final int keyword_else                  562       else
public static final int keyword_do                    570       do loop
public static final int keyword_while                 571       while loop
public static final int keyword_for                   572       for loop
public static final int keyword_in                    573       for  each  loop separator
public static final int keyword_break                 574       exits a loop or block
public static final int keyword_continue              575       restarts a loop on the next iteration
public static final int keyword_switch                576       switch block
public static final int keyword_case                  577       item in a switch block
public static final int keyword_default               578       catch all item in a switch block
public static final int keyword_try                   580       block to monitor for exceptions
public static final int keyword_catch                 581       catch block for a particular exception
public static final int keyword_finally               582       block to always execute on exit of the try
public static final int keyword_throw                 583       statement to throw an exception
public static final int keyword_throws                584       method modifier to declare thrown transactions
public static final int keyword_assert                585       alternate throw for code invariants
//
// keywords: primitive types
public static final int keyword_void                  600       void
public static final int keyword_boolean               601       boolean
public static final int keyword_byte                  602       1 byte integer
public static final int keyword_short                 603       2 byte integer
public static final int keyword_int                   604       4 byte integer
public static final int keyword_long                  605       8 byte integer
public static final int keyword_float                 606       32 bit floating point number
public static final int keyword_double                607       64 bit floating point number
public static final int keyword_char                  608       unicode character code
//
// keywords: special values
public static final int keyword_true                  610       boolean truth
public static final int keyword_false                 611       boolean false
public static final int keyword_null                  612       missing instance
//
// keywords: reserved
public static final int keyword_const                 700       reserved in java and groovy
public static final int keyword_goto                  701       reserved in java and groovy
//
// special (calculated) meanings
public static final int synth_compilation_unit        800       reserved  a synthetic root for a cst
public static final int synth_class                   801       applied to class names
public static final int synth_interface               802       applied to interface names
public static final int synth_mixin                   803       applied to mixin names
public static final int synth_method                  804       applied to method names
public static final int synth_property                805       applied to property names
public static final int synth_parameter_declaration   806       applied to method closure parameter names
public static final int synth_list                    810       applied to   that marks a list
public static final int synth_map                     811       applied to   that marks a map
public static final int synth_gstring                 812       a complete gstring
public static final int synth_method_call             814       applied to the optional   that marks a call to a method
public static final int synth_cast                    815       applied to   that marks a type cast
public static final int synth_block                   816       applied to   that marks a block
public static final int synth_closure                 817       applied to   that marks a closure
public static final int synth_label                   818       applied to a statement label
public static final int synth_ternary                 819       applied to   that marks a ternary expression
public static final int synth_tuple                   820       applied to   that marks an array initializer
public static final int synth_variable_declaration    830       applied to an identifier that specifies
// the type of a variable declaration
//
// gstring tokens
public static final int gstring_start                 901       any marker tha begins a gstring
public static final int gstring_end                   902       any matching marker that ends a gstring
public static final int gstring_expression_start      903       the $  marker that starts a gstring expression
public static final int gstring_expression_end        904       the   marker that ends a gstring expresssion
//
// type classes
public static final int any                           1000      anything
public static final int not_eof                       1001      anything but eof
public static final int general_end_of_statement      1002            eof
public static final int any_end_of_statement          1003            eof
public static final int assignment_operator           1100             etc
public static final int comparison_operator           1101               >  <  etc
public static final int math_operator                 1102                 %  plus the logical_operators
public static final int logical_operator              1103
public static final int range_operator                1104
public static final int regex_comparison_operator     1105       ~  etc
public static final int dereference_operator          1106          >
public static final int bitwise_operator              1107            <<  >>  >>>  ^  ~
public static final int prefix_operator               1200             etc
public static final int postfix_operator              1210          etc
public static final int infix_operator                1220               etc
public static final int prefix_or_infix_operator      1230
public static final int pure_prefix_operator          1235      prefix    prefix
public static final int keyword                       1300      any keyword
public static final int symbol                        1301      any symbol
public static final int literal                       1310      strings  numbers  identifiers
public static final int number                        1320      integers and decimals
public static final int sign                          1325
public static final int named_value                   1330      true  false  null
public static final int truth_value                   1331      true  false
public static final int primitive_type                1340      void  byte  short  int  etc
public static final int creatable_primitive_type      1341      any primitive_type except void
public static final int loop                          1350      do  while  etc
public static final int reserved_keyword              1360      const  goto  etc
public static final int keyword_identifier            1361      keywords that can appear as identifiers
public static final int synthetic                     1370      any of the synth types
public static final int type_declaration              1400      class  interface  mixin
public static final int declaration_modifier          1410      public  private  abstract  etc
public static final int type_name                     1420      identifiers  primitive types
public static final int creatable_type_name           1430      identifiers  primitive types except void
public static final int matched_container             1500
public static final int left_of_matched_container     1501         [
public static final int right_of_matched_container    1502         ]
public static final int expression                    1900      all of the below 1900 series
public static final int operator_expression           1901
public static final int synth_expression              1902      cast  ternary  and closure expression
public static final int keyword_expression            1903      new  this  super  instanceof  true  false  null
public static final int literal_expression            1904      literal
public static final int array_expression              1905
public static final int simple_expression             1910      literal  this  true  false  null
public static final int complex_expression            1911      simple_expression  and various molecules
//
// type groups (operations support)
public static final int parameter_terminators         2000
public static final int array_item_terminators        2001
public static final int type_list_terminators         2002
public static final int optional_datatype_followers   2003      identifier
public static final int switch_block_terminators      2004
public static final int switch_entries                2005
public static final int method_call_starters          2006      literal
public static final int unsafe_over_newlines          2007      things the expression parser should cross lines for in it doesn't have to
public static final int precludes_cast_operator       2008      anything that prevents  x  from being a cast
//---------------------------------------------------------------------------
// type hierarchies
/**
*  given two types, returns true if the second describes the first.
*/
public static boolean oftype  int specific  int general
if  general    specific
return true
switch  general
case any
return true
case not_eof
return specific >  unknown    specific <  synth_variable_declaration
case general_end_of_statement
switch  specific
case eof
case newline
case semicolon
return true
break
case any_end_of_statement
switch  specific
case eof
case newline
case semicolon
case right_curly_brace
return true
break
case assignment_operator
return specific    equal     specific >  plus_equal    specific <  power_equal      specific >  logical_or_equal    specific <  logical_and_equal
specific >  left_shift_equal    specific <  right_shift_unsigned_equal
specific >  bitwise_or_equal    specific <  bitwise_xor_equal
case comparison_operator
return specific >  compare_not_equal    specific <  compare_to
case math_operator
return  specific >  plus    specific <  right_shift_unsigned      specific >  not    specific <  logical_and
specific >  bitwise_or    specific <  bitwise_xor
case logical_operator
return specific >  not    specific <  logical_and
case bitwise_operator
return  specific >  bitwise_or    specific <  bitwise_xor     specific    bitwise_negation
case range_operator
return specific    dot_dot    specific    dot_dot_dot
case regex_comparison_operator
return specific    find_regex    specific    match_regex
case dereference_operator
return specific    dot    specific    navigate
case prefix_operator
switch  specific
case minus
case plus_plus
case minus_minus
return true
/* fall through */
case pure_prefix_operator
switch  specific
case regex_pattern
case not
case prefix_plus
case prefix_plus_plus
case prefix_minus
case prefix_minus_minus
case synth_cast
return true
break
case postfix_operator
switch  specific
case plus_plus
case postfix_plus_plus
case minus_minus
case postfix_minus_minus
return true
break
case infix_operator
switch  specific
case dot
case navigate
case logical_or
case logical_and
case bitwise_or
case bitwise_and
case bitwise_xor
case left_shift
case right_shift
case right_shift_unsigned
case find_regex
case match_regex
case dot_dot
case dot_dot_dot
case keyword_instanceof
return true
return  specific >  compare_not_equal    specific <  compare_to      specific >  plus    specific <  mod_equal     specific    equal     specific >  plus_equal    specific <  power_equal      specific >  logical_or_equal    specific <  logical_and_equal
specific >  left_shift_equal    specific <  right_shift_unsigned_equal      specific >  bitwise_or_equal    specific <  bitwise_xor_equal
case prefix_or_infix_operator
switch  specific
case power
case plus
case minus
case prefix_plus
case prefix_minus
return true
break
case keyword
return specific >  keyword_private    specific <  keyword_goto
case symbol
return specific >  newline    specific <  pipe
case literal
return specific >  string    specific <  decimal_number
case number
return specific    integer_number    specific    decimal_number
case sign
switch  specific
case plus
case minus
return true
break
case named_value
return specific >  keyword_true    specific <  keyword_null
case truth_value
return specific    keyword_true    specific    keyword_false
case type_name
if  specific    identifier
return true
/* fall through */
case primitive_type
return specific >  keyword_void    specific <  keyword_char
case creatable_type_name
if  specific    identifier
return true
/* fall through */
case creatable_primitive_type
return specific >  keyword_boolean    specific <  keyword_char
case loop
switch  specific
case keyword_do
case keyword_while
case keyword_for
return true
break
case reserved_keyword
return specific >  keyword_const    specific <  keyword_goto
case keyword_identifier
switch  specific
case keyword_class
case keyword_interface
case keyword_mixin
case keyword_def
case keyword_defmacro
case keyword_in
case keyword_property
return true
break
case synthetic
return specific >  synth_compilation_unit    specific <  synth_variable_declaration
case type_declaration
return specific >  keyword_class    specific <  keyword_mixin
case declaration_modifier
return specific >  keyword_private    specific <  keyword_static
case matched_container
switch  specific
case left_curly_brace
case right_curly_brace
case left_square_bracket
case right_square_bracket
case left_parenthesis
case right_parenthesis
return true
break
case left_of_matched_container
switch  specific
case left_curly_brace
case left_square_bracket
case left_parenthesis
return true
break
case right_of_matched_container
switch  specific
case right_curly_brace
case right_square_bracket
case right_parenthesis
return true
break
case parameter_terminators
return specific    right_parenthesis    specific    comma
case array_item_terminators
return specific    right_square_bracket    specific    comma
case type_list_terminators
switch  specific
case keyword_implements
case keyword_throws
case left_curly_brace
case comma
return true
break
case optional_datatype_followers
switch  specific
case identifier
case left_square_bracket
case dot
return true
break
case switch_block_terminators
if  specific    right_curly_brace
return true
/* fall through */
case switch_entries
return specific    keyword_case    specific    keyword_default
case method_call_starters
if  specific >  string    specific <  decimal_number
return true
switch  specific
case left_parenthesis
case gstring_start
case synth_gstring
case keyword_new
return true
break
case unsafe_over_newlines
if  oftype specific  symbol
switch  specific
case left_curly_brace
case left_parenthesis
case left_square_bracket
case plus
case plus_plus
case minus
case minus_minus
case regex_pattern
case not
return true
return false
switch  specific
case keyword_instanceof
case gstring_expression_start
case gstring_expression_end
case gstring_end
return false
return true
case precludes_cast_operator
switch  specific
case plus
case minus
case prefix_minus
case prefix_minus_minus
case prefix_plus
case prefix_plus_plus
case left_parenthesis
return false
return  oftype  specific  complex_expression
case operator_expression
return specific >  dot    specific <  right_shift_unsigned
case synth_expression
switch  specific
case synth_cast
case synth_closure
case synth_ternary
return true
break
case keyword_expression
switch  specific
case keyword_new
case keyword_this
case keyword_super
case keyword_instanceof
case keyword_true
case keyword_false
case keyword_null
return true
break
case literal_expression
return specific >  string    specific <  decimal_number
case array_expression
return specific    left_square_bracket
case expression
if  specific >  dot    specific <  right_shift_unsigned
return true
if  specific >  string    specific <  decimal_number
return true
switch  specific
case synth_cast
case synth_closure
case synth_ternary
case synth_gstring
case keyword_new
case keyword_this
case keyword_super
case keyword_instanceof
case keyword_true
case keyword_false
case keyword_null
case left_square_bracket
return true
break
case complex_expression
switch  specific
case keyword_new
case synth_method_call
case synth_gstring
case synth_list
case synth_map
case synth_closure
case synth_ternary
case synth_variable_declaration
return true
/* fall through */
case simple_expression
if  specific >  string    specific <  decimal_number
return true
switch  specific
case keyword_super
case keyword_this
case keyword_true
case keyword_false
case keyword_null
return true
break
return false
//---------------------------------------------------------------------------
// type coersions
/**
*  given two types, returns true if the first can be viewed as the second.
*  note that <code>canmean()</code> is orthogonal to <code>oftype()</code>.
*/
public static boolean canmean  int actual  int preferred
if  actual    preferred
return true
switch  preferred
case synth_parameter_declaration
case identifier
switch  actual
case identifier
case keyword_def
case keyword_defmacro
case keyword_class
case keyword_interface
case keyword_mixin
return true
break
case synth_class
case synth_interface
case synth_mixin
case synth_method
case synth_property
return actual    identifier
case synth_list
case synth_map
return actual    left_square_bracket
case synth_cast
return actual    left_parenthesis
case synth_block
case synth_closure
return actual    left_curly_brace
case synth_label
return actual    colon
case synth_variable_declaration
return actual    identifier
return false
/**
*  converts a node from a generic type to a specific prefix type.
*  throws a <code>groovybugerror</code> if the type can't be converted
*  and requested.
*/
public static void makeprefix  cstnode node  boolean throwifinvalid
switch  node getmeaning
case plus
node setmeaning  prefix_plus
break
case minus
node setmeaning  prefix_minus
break
case plus_plus
node setmeaning  prefix_plus_plus
break
case minus_minus
node setmeaning  prefix_minus_minus
break
default
if  throwifinvalid
throw new groovybugerror      node getmeaning
/**
*  converts a node from a generic type to a specific postfix type.
*  throws a <code>groovybugerror</code> if the type can't be converted.
*/
public static void makepostfix  cstnode node  boolean throwifinvalid
switch  node getmeaning
case plus_plus
node setmeaning  postfix_plus_plus
break
case minus_minus
node setmeaning  postfix_minus_minus
break
default
if  throwifinvalid
throw new groovybugerror      node getmeaning
//---------------------------------------------------------------------------
// operator precedence
/**
*  returns the precendence of the specified operator.  non-operator's will
*  receive -1 or a groovybugerror, depending on your preference.
*/
public static int getprecedence  int type  boolean throwifinvalid
switch  type
case left_parenthesis
return 0
case equal
case plus_equal
case minus_equal
case multiply_equal
case divide_equal
case intdiv_equal
case mod_equal
case power_equal
case logical_or_equal
case logical_and_equal
case left_shift_equal
case right_shift_equal
case right_shift_unsigned_equal
case bitwise_or_equal
case bitwise_and_equal
case bitwise_xor_equal
return 5
case question
return 10
case logical_or
return 15
case logical_and
return 20
case bitwise_or
case bitwise_and
case bitwise_xor
return 22
case compare_identical
case compare_not_identical
return 24
case compare_not_equal
case compare_equal
case compare_less_than
case compare_less_than_equal
case compare_greater_than
case compare_greater_than_equal
case compare_to
case find_regex
case match_regex
case keyword_instanceof
return 25
case dot_dot
case dot_dot_dot
return 30
case left_shift
case right_shift
case right_shift_unsigned
return 35
case plus
case minus
return 40
case multiply
case divide
case intdiv
case mod
return 45
case not
case regex_pattern
return 50
case synth_cast
return 55
case plus_plus
case minus_minus
case prefix_plus_plus
case prefix_minus_minus
case postfix_plus_plus
case postfix_minus_minus
return 65
case prefix_plus
case prefix_minus
return 70
case power
return 72
case synth_method
case left_square_bracket
return 75
case dot
case navigate
return 80
case keyword_new
return 85
if  throwifinvalid
throw new groovybugerror
return  1
//---------------------------------------------------------------------------
// texts
private static final map texts    new hashmap        symbol keyword type  > text
private static final map lookup   new hashmap        text  > symbol keyword type
/**
*  returns the type for the specified symbol/keyword text.  returns unknown
*  if the text isn't found.  you can filter finds on a type.
*/
public static int lookup  string text  int filter
int type   unknown
if  lookup containskey text
type     integer lookup get text   intvalue
if  filter    unknown     oftype type  filter
type   unknown
return type
/**
*  returns the type for the specified keyword text.  returns unknown
*  if the text isn't found.
*/
public static int lookupkeyword  string text
return lookup  text  keyword
/**
*  returns the type for the specified symbol text.  returns unknown
*  if the text isn't found.
*/
public static int lookupsymbol  string text
return lookup  text  symbol
/**
*  returns the text for the specified type.  returns "" if the
*  text isn't found.
*/
public static string gettext  int type
integer key   new integer  type
string text
if  texts containskey key
text    string texts get  key
return text
/**
*  adds a element to the texts and lookup.
*/
private static void addtranslation  string text  int type
integer key   new integer  type
texts put  key  text
lookup put  text  key
static
//
// symbols
addtranslation               newline
addtranslation                left_curly_brace
addtranslation                right_curly_brace
addtranslation                left_square_bracket
addtranslation                right_square_bracket
addtranslation                left_parenthesis
addtranslation                right_parenthesis
addtranslation                dot
addtranslation               dot_dot
addtranslation              dot_dot_dot
addtranslation               navigate
addtranslation               find_regex
addtranslation              match_regex
addtranslation                regex_pattern
addtranslation                equal
addtranslation               compare_not_equal
addtranslation              compare_identical
addtranslation              compare_not_identical
addtranslation               compare_equal
addtranslation                compare_less_than
addtranslation               compare_less_than_equal
addtranslation                compare_greater_than
addtranslation               compare_greater_than_equal
addtranslation              compare_to
addtranslation                not
addtranslation               logical_or
addtranslation               logical_and
addtranslation              logical_or_equal
addtranslation              logical_and_equal
addtranslation                plus
addtranslation                minus
addtranslation                multiply
addtranslation                divide
addtranslation               intdiv
addtranslation                mod
addtranslation               power
addtranslation               plus_equal
addtranslation               minus_equal
addtranslation               multiply_equal
addtranslation               divide_equal
addtranslation              intdiv_equal
addtranslation               mod_equal
addtranslation              power_equal
addtranslation               plus_plus
addtranslation               minus_minus
addtranslation               left_shift
addtranslation               right_shift
addtranslation              right_shift_unsigned
addtranslation              left_shift_equal
addtranslation              right_shift_equal
addtranslation             right_shift_unsigned_equal
addtranslation                bitwise_and
addtranslation                bitwise_xor
addtranslation               bitwise_or_equal
addtranslation               bitwise_and_equal
addtranslation               bitwise_xor_equal
addtranslation                comma
addtranslation                colon
addtranslation                semicolon
addtranslation                question
addtranslation                pipe
addtranslation              gstring_expression_start
//
// keywords
addtranslation         keyword_abstract
addtranslation               keyword_as
addtranslation           keyword_assert
addtranslation            keyword_break
addtranslation             keyword_case
addtranslation            keyword_catch
addtranslation            keyword_class
addtranslation            keyword_const
addtranslation         keyword_continue
addtranslation              keyword_def
addtranslation         keyword_def                       xxx br defmacro
addtranslation          keyword_default
addtranslation               keyword_do
addtranslation             keyword_else
addtranslation          keyword_extends
addtranslation            keyword_final
addtranslation          keyword_finally
addtranslation              keyword_for
addtranslation             keyword_goto
addtranslation               keyword_if
addtranslation               keyword_in
addtranslation       keyword_implements
addtranslation           keyword_import
addtranslation       keyword_instanceof
addtranslation        keyword_interface
addtranslation            keyword_mixin
addtranslation           keyword_native
addtranslation              keyword_new
addtranslation          keyword_package
addtranslation          keyword_private
addtranslation         keyword_property
addtranslation        keyword_protected
addtranslation           keyword_public
addtranslation           keyword_return
addtranslation           keyword_static
addtranslation            keyword_super
addtranslation           keyword_switch
addtranslation     keyword_synchronized
addtranslation             keyword_this
addtranslation            keyword_throw
addtranslation           keyword_throws
addtranslation        keyword_transient
addtranslation              keyword_try
addtranslation         keyword_volatile
addtranslation            keyword_while
addtranslation             keyword_true
addtranslation            keyword_false
addtranslation             keyword_null
addtranslation             keyword_void
addtranslation          keyword_boolean
addtranslation             keyword_byte
addtranslation              keyword_int
addtranslation            keyword_short
addtranslation             keyword_long
addtranslation            keyword_float
addtranslation           keyword_double
addtranslation             keyword_char
//---------------------------------------------------------------------------
// descriptions
private static final map descriptions   new hashmap
/**
*  gets the description for the specified type.
*/
public static string getdescription  int type
integer typekey   new integer type
if  descriptions containskey typekey
return  string descriptions get typekey
return
/**
*  adds a description to the set.
*/
private static void adddescription int type  string description
adddescription new integer type   description
/**
*  adds a description to the set.
*/
private static void adddescription integer type  string description
if  description startswith       description endswith
descriptions put type  description
else
descriptions put type
static
iterator iterator   lookup keyset   iterator
while  iterator hasnext
string text    string iterator next
integer key    integer lookup get text
adddescription  key  text
adddescription  newline
adddescription  prefix_plus_plus
adddescription  postfix_plus_plus
adddescription  prefix_minus_minus
adddescription  postfix_minus_minus
adddescription  prefix_plus
adddescription  prefix_minus
adddescription  string
adddescription  identifier
adddescription  integer_number
adddescription  decimal_number
adddescription  synth_compilation_unit
adddescription  synth_class
adddescription  synth_interface
adddescription  synth_mixin
adddescription  synth_method
adddescription  synth_method_call
adddescription  synth_property
adddescription  synth_parameter_declaration
adddescription  synth_list
adddescription  synth_map
adddescription  synth_tuple
adddescription  synth_gstring
adddescription  synth_cast
adddescription  synth_block
adddescription  synth_closure
adddescription  synth_ternary
adddescription  synth_label
adddescription  synth_variable_declaration
adddescription  gstring_start
adddescription  gstring_end
adddescription  gstring_expression_start
adddescription  gstring_expression_end
adddescription  assignment_operator
adddescription  comparison_operator
adddescription  math_operator
adddescription  logical_operator
adddescription  bitwise_operator
adddescription  range_operator
adddescription  regex_comparison_operator
adddescription  dereference_operator
adddescription  prefix_operator
adddescription  postfix_operator
adddescription  infix_operator
adddescription  keyword
adddescription  literal
adddescription  number
adddescription  named_value
adddescription  truth_value
adddescription  primitive_type
adddescription  creatable_primitive_type
adddescription  loop
adddescription  reserved_keyword
adddescription  synthetic
adddescription  type_declaration
adddescription  declaration_modifier
adddescription  type_name
adddescription  creatable_type_name
adddescription  matched_container
adddescription  left_of_matched_container
adddescription  right_of_matched_container
adddescription  switch_entries