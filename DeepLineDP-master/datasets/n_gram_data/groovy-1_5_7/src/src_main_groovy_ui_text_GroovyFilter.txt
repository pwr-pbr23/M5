/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy ui text
import java awt color
import java awt event actionevent
import java awt event keyevent
import javax swing abstractaction
import javax swing action
import javax swing keystroke
import javax swing text badlocationexception
import javax swing text defaultstyleddocument
import javax swing text element
import javax swing text jtextcomponent
import javax swing text segment
import javax swing text style
import javax swing text styleconstants
import javax swing text styleddocument
import javax swing text stylecontext
/**
*
* @author evan "hippy" slatis
*/
public class groovyfilter extends structuredsyntaxdocumentfilter
// java tab policy action
private static final action auto_tab_action   new autotabaction
// style names
public static final string comment
public static final string slash_star_comment
public static final string slash_slash_comment
public static final string quotes
3  ?      3    z    ?      ? ?
public static final string single_quotes
public static final string slashy_quotes
public static final string digit = "\\d+?[efld]?";
public static final string ident = "[\\w\\$&&[\\d]][\\w\\$]*";
public static final string operation = "[\\w\\$&&[\\d]][\\w\\$]* *\\(";
public static final string left_parens = "\\(";
private static final color comment_color =
color.light_gray.darker().darker();
public static final string reserved_word = "reserved";
public static final string[] reserved_words =   {"\\babstract\\b",
"\\bassert\\b",
"\\bdefault\\b",
"\\bif\\b",
"\\bprivate\\b",
"\\bthis\\b",
"\\bboolean\\b",
"\\bdo\\b",
"\\bimplements\\b",
"\\bprotected\\b",
"\\bthrow\\b",
"\\bbreak\\b",
"\\bdouble\\b",
"\\bimport\\b",
"\\bpublic\\b",
"\\bthrows\\b",
"\\bbyte\\b",
"\\belse\\b",
"\\binstanceof\\b",
"\\breturn\\b",
"\\btransient\\b",
"\\bcase\\b",
"\\bextends\\b",
"\\bint\\b",
"\\bshort\\b",
"\\btry\\b",
"\\bcatch\\b",
"\\bfinal\\b",
"\\binterface\\b",
"\\benum\\b",
"\\bstatic\\b",
"\\bvoid\\b",
"\\bchar\\b",
"\\bfinally\\b",
"\\blong\\b",
"\\bstrictfp\\b",
"\\bvolatile\\b",
"\\bclass\\b",
"\\bfloat\\b",
"\\bnative\\b",
"\\bsuper\\b",
"\\bwhile\\b",
"\\bconst\\b",
"\\bfor\\b",
"\\bnew\\b",
"\\bswitch\\b",
"\\bcontinue\\b",
"\\bgoto\\b",
"\\bpackage\\b",
"\\bdef\\b",
"\\bas\\b",
"\\bin\\b",
"\\bsynchronized\\b",
"\\bnull\\b"};
/**
* creates a new instance of groovyfilter
*/
public groovyfilter defaultstyleddocument doc
super doc
init
private void init
stylecontext stylecontext   stylecontext getdefaultstylecontext
style defaultstyle   stylecontext getstyle stylecontext default_style
style comment   stylecontext addstyle comment  defaultstyle
styleconstants setforeground comment  comment_color
styleconstants setitalic comment  true
style quotes   stylecontext addstyle quotes  defaultstyle
styleconstants setforeground quotes  color magenta darker   darker
style charquotes   stylecontext addstyle single_quotes  defaultstyle
styleconstants setforeground charquotes  color green darker   darker
style slashyquotes   stylecontext addstyle slashy_quotes  defaultstyle
styleconstants setforeground slashyquotes  color orange darker
style digit   stylecontext addstyle digit  defaultstyle
styleconstants setforeground digit  color red darker
style operation   stylecontext addstyle operation  defaultstyle
styleconstants setbold operation  true
style ident   stylecontext addstyle ident  defaultstyle
style reservedwords   stylecontext addstyle reserved_word  defaultstyle
styleconstants setbold reservedwords  true
styleconstants setforeground reservedwords  color blue darker   darker
style leftparens   stylecontext addstyle ident  defaultstyle
getrootnode   putstyle slash_star_comment  comment
getrootnode   putstyle slash_slash_comment  comment
getrootnode   putstyle quotes  quotes
getrootnode   putstyle single_quotes  charquotes
getrootnode   putstyle slashy_quotes  slashyquotes
getrootnode   putstyle digit  digit
getrootnode   putstyle operation  operation
structuredsyntaxdocumentfilter lexernode node   createlexernode
node putstyle reserved_words  reservedwords
node putstyle left_parens  leftparens
getrootnode   putchild operation  node
getrootnode   putstyle ident  ident
node   createlexernode
node putstyle reserved_words  reservedwords
getrootnode   putchild ident  node
public static void installautotabaction jtextcomponent tcomp
tcomp getactionmap   put    auto_tab_action
keystroke keystroke   keystroke getkeystroke keyevent vk_enter  0  false
tcomp getinputmap   put keystroke
private static class autotabaction extends abstractaction
private styleddocument doc
private final segment segment   new segment
private final stringbuffer buffer   new stringbuffer
public void actionperformed actionevent ae
jtextcomponent tcomp    jtextcomponent ae getsource
if  tcomp getdocument   instanceof styleddocument
doc    styleddocument tcomp getdocument
try
doc gettext 0  doc getlength    segment
catch  exception e
// should never reach here
e printstacktrace
int offset   tcomp getcaretposition
int index   findtablocation offset
buffer delete 0  buffer length
buffer append
if  index >  1
for  int i   0  i < index   4  i
buffer append
try
doc insertstring offset  buffer tostring
doc getdefaultrootelement   getattributes
catch  badlocationexception ble
ble printstacktrace
public int findtablocation int offset
// find first {
boolean cont   true
while  offset >  1    cont
element el   doc getcharacterelement offset
object color
el getattributes   getattribute styleconstants foreground
if   comment_color equals color
cont   segment array
segment array
offset    cont ? 1   0
if  offset >  1    segment array
while  offset >  1
character iswhitespace segment array
int index   offset < 0    segment array      ?  4   0
if  offset >  1
element top   doc getdefaultrootelement
offset   top getelement top getelementindex offset   getstartoffset
while  character iswhitespace segment array
index
return index