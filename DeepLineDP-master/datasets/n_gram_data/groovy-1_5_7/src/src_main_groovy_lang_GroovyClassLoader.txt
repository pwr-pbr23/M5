/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* @todo: multi threaded compiling of the same class but with different roots
* for compilation... t1 compiles a, which uses b, t2 compiles b... mark a and b
* as parsed and then synchronize compilation. problems: how to synchronize?
* how to get error messages?
*
*/
package groovy lang
import org codehaus groovy ast classnode
import org codehaus groovy ast modulenode
import org codehaus groovy classgen verifier
import org codehaus groovy control
import org objectweb asm classvisitor
import org objectweb asm classwriter
import java io
import java net
import java security accesscontroller
import java security codesource
import java security privilegedaction
import java security protectiondomain
import java util
/**
* a classloader which can load groovy classes. the loaded classes are cached,
* classes from other classlaoders should not be cached. to be able to load a
* script that was asked for earlier but was created later it is essential not
* to keep anything like a "class not found" information for that class name.
* this includes possible parent loaders. classes that are not chached are always
* reloaded.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author guillaume laforge
* @author steve goetze
* @author bing ran
* @author <a href="mailto:scottstirling@rcn.com">scott stirling</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @version $revision$
*/
public class groovyclassloader extends urlclassloader
/**
* this cache contains the loaded classes or parsing, if the class is currently parsed
*/
protected final map classcache   new hashmap
/**
* this cache contains mappings of file name to class. it is used
* to bypass compilation.
*/
protected final map sourcecache   new hashmap
private final compilerconfiguration config
private boolean recompile
// use 1000000 as offset to avoid conflicts with names form the groovyshell
private static int scriptnamecounter   1000000
private groovyresourceloader resourceloader   new groovyresourceloader
public url loadgroovysource final string filename  throws malformedurlexception
url file    url  accesscontroller doprivileged new privilegedaction
public object run
return getsourcefile filename
return file
/**
* creates a groovyclassloader using the current thread's context
* class loader as parent.
*/
public groovyclassloader
this thread currentthread   getcontextclassloader
/**
* creates a groovyclassloader using the given classloader as parent
*/
public groovyclassloader classloader loader
this loader  null
/**
* creates a groovyclassloader using the given groovyclassloader as parent.
* this loader will get the parent's compilerconfiguration
*/
public groovyclassloader groovyclassloader parent
this parent  parent config  false
/**
* creates a groovyclasslaoder.
*
* @param parent                    the parent class loader
* @param config                    the compiler configuration
* @param useconfigurationclasspath determines if the configurations classpath should be added
*/
public groovyclassloader classloader parent  compilerconfiguration config  boolean useconfigurationclasspath
super new url  parent
if  config    null  config   compilerconfiguration default
this config   config
if  useconfigurationclasspath
for  iterator it   config getclasspath   iterator    it hasnext
string path    string  it next
this addclasspath path
/**
* creates a groovyclassloader using the given classloader as parent.
*/
public groovyclassloader classloader loader  compilerconfiguration config
this loader  config  true
public void setresourceloader groovyresourceloader resourceloader
if  resourceloader    null
throw new illegalargumentexception
this resourceloader   resourceloader
public groovyresourceloader getresourceloader
return resourceloader
/**
* loads the given class node returning the implementation class
*
* @param classnode
* @return a class
* @deprecated
*/
public class defineclass classnode classnode  string file
//return defineclass(classnode, file, "/groovy/defineclass");
throw new deprecationexception
/**
* loads the given class node returning the implementation class.
* <p/>
* warning: this compilation is not synchronized
*
* @param classnode
* @return a class
*/
public class defineclass classnode classnode  string file  string newcodebase
codesource codesource   null
try
codesource   new codesource new url       newcodebase    java security cert certificate  null
catch  malformedurlexception e
//swallow
compilationunit unit   createcompilationunit config  codesource
classcollector collector   createcollector unit  classnode getmodule   getcontext
try
unit addclassnode classnode
unit setclassgencallback collector
unit compile phases class_generation
return collector generatedclass
catch  compilationfailedexception e
throw new runtimeexception e
/**
* parses the given file into a java class capable of being run
*
* @param file the file name to parse
* @return the main class defined in the given script
*/
public class parseclass file file  throws compilationfailedexception  ioexception
return parseclass new groovycodesource file
/**
* parses the given text into a java class capable of being run
*
* @param text     the text of the script/class to parse
* @param filename the file name to use as the name of the class
* @return the main class defined in the given script
*/
public class parseclass string text  string filename  throws compilationfailedexception
byte bytes   null
try
bytes   text getbytes config getsourceencoding
catch  unsupportedencodingexception e
throw new compilationfailedexception 1 null e
return parseclass new bytearrayinputstream bytes   filename
/**
* parses the given text into a java class capable of being run
*
* @param text the text of the script/class to parse
* @return the main class defined in the given script
*/
public class parseclass string text  throws compilationfailedexception
return parseclass text      system currenttimemillis
/**
* parses the given character stream into a java class capable of being run
*
* @param in an inputstream
* @return the main class defined in the given script
*/
public class parseclass inputstream in  throws compilationfailedexception
return parseclass in  generatescriptname
public synchronized string generatescriptname
scriptnamecounter
return     scriptnamecounter
public class parseclass final inputstream in  final string filename  throws compilationfailedexception
// for generic input streams, provide a catch-all codebase of
// groovyscript
// security for these classes can be administered via policy grants with
// a codebase of file:groovy.script
groovycodesource gcs    groovycodesource  accesscontroller doprivileged new privilegedaction
public object run
return new groovycodesource in  filename
return parseclass gcs
public class parseclass groovycodesource codesource  throws compilationfailedexception
return parseclass codesource  codesource iscachable
/**
* parses the given code source into a java class. if there is a class file
* for the given code source, then no parsing is done, instead the cached class is returned.
*
* @param shouldcachesource if true then the generated class will be stored in the source cache
* @return the main class defined in the given script
*/
public class parseclass groovycodesource codesource  boolean shouldcachesource  throws compilationfailedexception
synchronized  sourcecache
class answer    class  sourcecache get codesource getname
if  answer    null  return answer
// was neither already loaded nor compiling, so compile and add to
// cache.
compilationunit unit   createcompilationunit config  codesource getcodesource
sourceunit su   null
if  codesource getfile      null
su   unit addsource codesource getname    codesource getinputstream
else
su   unit addsource codesource getfile
classcollector collector   createcollector unit  su
unit setclassgencallback collector
int goalphase   phases class_generation
if  config    null    config gettargetdirectory      null  goalphase   phases output
unit compile goalphase
answer   collector generatedclass
for  iterator iter   collector getloadedclasses   iterator    iter hasnext
class clazz    class  iter next
setclasscacheentry clazz
if  shouldcachesource  sourcecache put codesource getname    answer
return answer
/**
* gets the currently used classpath.
*
* @return a string[] containing the file information of the urls
* @see #geturls()
*/
protected string getclasspath
//workaround for groovy-835
url urls   geturls
string ret   new string
for  int i   0  i < ret length  i
ret   urls getfile
return ret
/**
* expands the classpath
*
* @param pathlist  an empty list that will contain the elements of the classpath
* @param classpath the classpath specified as a single string
* @deprecated
*/
protected void expandclasspath list pathlist  string base  string classpath  boolean ismanifestclasspath
throw new deprecationexception
/**
* a helper method to allow bytecode to be loaded. spg changed name to
* defineclass to make it more consistent with other classloader methods
*
* @deprecated
*/
protected class defineclass string name  byte bytecode  protectiondomain domain
throw new deprecationexception
public static class innerloader extends groovyclassloader
private final groovyclassloader delegate
private final long timestamp
public innerloader groovyclassloader delegate
super delegate
this delegate   delegate
timestamp   system currenttimemillis
public void addclasspath string path
delegate addclasspath path
public void clearcache
delegate clearcache
public url findresource string name
return delegate findresource name
public enumeration findresources string name  throws ioexception
return delegate findresources name
public class getloadedclasses
return delegate getloadedclasses
public url getresource string name
return delegate getresource name
public inputstream getresourceasstream string name
return delegate getresourceasstream name
public groovyresourceloader getresourceloader
return delegate getresourceloader
public url geturls
return delegate geturls
public class loadclass string name  boolean lookupscriptfiles  boolean preferclassoverscript  boolean resolve  throws classnotfoundexception  compilationfailedexception
class c   findloadedclass name
if  c    null  return c
return delegate loadclass name  lookupscriptfiles  preferclassoverscript  resolve
public class parseclass groovycodesource codesource  boolean shouldcache  throws compilationfailedexception
return delegate parseclass codesource  shouldcache
public void setresourceloader groovyresourceloader resourceloader
delegate setresourceloader resourceloader
public void addurl url url
delegate addurl url
public long gettimestamp
return timestamp
/**
* creates a new compilationunit. if you want to add additional
* phase operations to the compilationunit (for example to inject
* additional methods, variables, fields), then you should overwrite
* this method.
*
* @param config the compiler configuration, usually the same as for this class loader
* @param source the source containing the initial file to compile, more files may follow during compilation
* @return the compilationunit
*/
protected compilationunit createcompilationunit compilerconfiguration config  codesource source
return new compilationunit config  source  this
/**
* creates a classcollector for a new compilation.
*
* @param unit the compilationunit
* @param su   the soruceunit
* @return the classcollector
*/
protected classcollector createcollector compilationunit unit  sourceunit su
innerloader loader    innerloader  accesscontroller doprivileged new privilegedaction
public object run
return new innerloader groovyclassloader this
return new classcollector loader  unit  su
public static class classcollector extends compilationunit classgencallback
private class generatedclass
private final groovyclassloader cl
private final sourceunit su
private final compilationunit unit
private final collection loadedclasses
protected classcollector innerloader cl  compilationunit unit  sourceunit su
this cl   cl
this unit   unit
this loadedclasses   new arraylist
this su   su
protected groovyclassloader getdefiningclassloader
return cl
protected class createclass byte code  classnode classnode
groovyclassloader cl   getdefiningclassloader
class theclass   cl defineclass classnode getname    code  0  code length  unit getast   getcodesource
this loadedclasses add theclass
if  generatedclass    null
modulenode mn   classnode getmodule
sourceunit msu   null
if  mn    null  msu   mn getcontext
classnode main   null
if  mn    null  main    classnode  mn getclasses   get 0
if  msu    su    main    classnode  generatedclass   theclass
return theclass
protected class onclassnode classwriter classwriter  classnode classnode
byte code   classwriter tobytearray
return createclass code  classnode
public void call classvisitor classwriter  classnode classnode
onclassnode  classwriter  classwriter  classnode
public collection getloadedclasses
return this loadedclasses
/**
* open up the super class define that takes raw bytes
*/
public class defineclass string name  byte b
return super defineclass name  b  0  b length
/**
* loads a class from a file or a parent classloader.
* this method does call loadclass(string, boolean, boolean, boolean)
* with the last parameter set to false.
*
* @throws compilationfailedexception if compilation was not successful
*/
public class loadclass final string name  boolean lookupscriptfiles  boolean preferclassoverscript
throws classnotfoundexception  compilationfailedexception
return loadclass name  lookupscriptfiles  preferclassoverscript  false
/**
* gets a class from the class cache. this cache contains only classes loaded through
* this class loader or an innerloader instance. if no class is stored for a
* specific name, then the method should return null.
*
* @param name of the class
* @return the class stored for the given name
* @see #removeclasscacheentry(string)
* @see #setclasscacheentry(class)
* @see #clearcache()
*/
protected class getclasscacheentry string name
if  name    null  return null
synchronized  classcache
return  class  classcache get name
/**
* sets an entry in the class cache.
*
* @param cls the class
* @see #removeclasscacheentry(string)
* @see #getclasscacheentry(string)
* @see #clearcache()
*/
protected void setclasscacheentry class cls
synchronized  classcache
classcache put cls getname    cls
/**
* removes a class from the class cache.
*
* @param name of the class
* @see #getclasscacheentry(string)
* @see #setclasscacheentry(class)
* @see #clearcache()
*/
protected void removeclasscacheentry string name
synchronized  classcache
classcache remove name
/**
* adds a url to the classloader.
*
* @param url the new classpath element
*/
public void addurl url url
super addurl url
/**
* indicates if a class is recompilable. recompileable means, that the classloader
* will try to locate a groovy source file for this class and then compile it again,
* adding the resulting class as entry to the cache. giving null as class is like a
* recompilation, so the method should always return true here. only classes that are
* implementing groovyobject are compileable and only if the timestamp in the class
* is lower than long.max_value.
* <p/>
* note: first the parent loaders will be asked and only if they don't return a
* class the recompilation will happen. recompilation also only happen if the source
* file is newer.
*
* @param cls the class to be tested. if null the method should return true
* @return true if the class should be compiled again
* @see #issourcenewer(url, class)
*/
protected boolean isrecompilable class cls
if  cls    null  return true
if  cls getclassloader    this  return false
if  recompile    null     config getrecompilegroovysource    return false
if  recompile    null     recompile booleanvalue    return false
if   groovyobject class isassignablefrom cls   return false
long timestamp   gettimestamp cls
if  timestamp    long max_value  return false
return true
/**
* sets if the recompilation should be enable. there are 3 possible
* values for this. any value different than null overrides the
* value from the compiler configuration. true means to recompile if needed
* false means to never recompile.
*
* @param mode the recompilation mode
* @see compilerconfiguration
*/
public void setshouldrecompile boolean mode
recompile   mode
/**
* gets the currently set recompilation mode. null means, the
* compiler configuration is used. false means no recompilation and
* true means that recompilation will be done if needed.
*
* @return the recompilation mode
*/
public boolean isshouldrecompile
return recompile
/**
* loads a class from a file or a parent classloader.
*
* @param name                  of the class to be loaded
* @param lookupscriptfiles     if false no lookup at files is done at all
* @param preferclassoverscript if true the file lookup is only done if there is no class
* @param resolve               @see classloader#loadclass(java.lang.string, boolean)
* @return the class found or the class created from a file lookup
* @throws classnotfoundexception     if the class could not be found
* @throws compilationfailedexception if the source file could not be compiled
*/
public class loadclass final string name  boolean lookupscriptfiles  boolean preferclassoverscript  boolean resolve
throws classnotfoundexception  compilationfailedexception
// look into cache
class cls   getclasscacheentry name
// enable recompilation?
boolean recompile   isrecompilable cls
if   recompile  return cls
// check security manager
securitymanager sm   system getsecuritymanager
if  sm    null
string classname   name replace
int i   classname lastindexof
if  i     1
sm checkpackageaccess classname substring 0  i
// try parent loader
classnotfoundexception last   null
try
class parentclassloaderclass   super loadclass name  resolve
// always return if the parent loader was successful
if  cls    parentclassloaderclass  return parentclassloaderclass
catch  classnotfoundexception cnfe
last   cnfe
catch  noclassdeffounderror ncdfe
if  ncdfe getmessage   indexof    > 0
last   new classnotfoundexception name
else
throw ncdfe
// prefer class if no recompilation
if  cls    null    preferclassoverscript  return cls
// at this point the loading from a parent loader failed
// and we want to recompile if needed.
if  lookupscriptfiles
// synchronize on sourcecache, as we want only one
// compilation at the same time
synchronized  sourcecache
// try groovy file
try
// check if recompilation already happened.
final class classcacheentry   getclasscacheentry name
if  classcacheentry    cls  return classcacheentry
url source   resourceloader loadgroovysource name
cls   recompile source  name  cls
catch  ioexception ioe
last   new classnotfoundexception     name  ioe
finally
if  cls    null
removeclasscacheentry name
else
setclasscacheentry cls
if  cls    null
// no class found, there should have been an exception before now
if  last    null  throw new assertionerror true
throw last
return cls
/**
* (re)compiles the given source.
* this method starts the compilation of a given source, if
* the source has changed since the class was created. for
* this issourcenewer is called.
*
* @param source    the source pointer for the compilation
* @param classname the name of the class to be generated
* @param oldclass  a possible former class
* @return the old class if the source wasn't new enough, the new class else
* @throws compilationfailedexception if the compilation failed
* @throws ioexception                if the source is not readable
* @see #issourcenewer(url, class)
*/
protected class recompile url source  string classname  class oldclass  throws compilationfailedexception  ioexception
if  source    null
// found a source, compile it if newer
if   oldclass    null    issourcenewer source  oldclass       oldclass    null
sourcecache remove classname
return parseclass source openstream    classname
return oldclass
/**
* implemented here to check package access prior to returning an
* already loaded class.
*
* @throws compilationfailedexception if the compilation failed
* @throws classnotfoundexception     if the class was not found
* @see java.lang.classloader#loadclass(java.lang.string, boolean)
*/
protected class loadclass final string name  boolean resolve  throws classnotfoundexception
return loadclass name  true  true  resolve
/**
* gets the time stamp of a given class. for groovy
* generated classes this usually means to return the value
* of the static field __timestamp. if the parameter doesn't
* have such a field, then long.max_value is returned
*
* @param cls the class
* @return the time stamp
*/
protected long gettimestamp class cls
return verifier gettimestamp cls
/*
* this method will take a file name and try to "decode" any url encoded characters.  for example
* if the file name contains any spaces this method call will take the resulting %20 encoded values
* and convert them to spaces.
*
* this method was added specifically to fix defect:  groovy-1787.  the defect involved a situation
* where two scripts were sitting in a directory with spaces in its name.  the code would fail
* when the class loader tried to resolve the file name and would choke on the urlencoded space values.
*
*/
private string decodefilename string filename
string decodedfile   filename
try
decodedfile   urldecoder decode filename
catch  unsupportedencodingexception e
system err println
system err println
return decodedfile
private url getsourcefile string name
string filename   name replace         config getdefaultscriptextension
url ret   getresource filename
if  ret    null    ret getprotocol   equals
string filewithoutpackage   filename
if  filewithoutpackage indexof        1
int index   filewithoutpackage lastindexof
filewithoutpackage   filewithoutpackage substring index   1
file path   new file decodefilename ret getfile     getparentfile
if  path exists      path isdirectory
file file   new file path  filewithoutpackage
if  file exists
// file.exists() might be case insensitive. let's do
// case sensitive match for the filename
file parent   file getparentfile
string files   parent list
for  int j   0  j < files length  j
if  files equals filewithoutpackage   return ret
//file does not exist!
return null
return ret
/**
* decides if the given source is newer than a class.
*
* @param source the source we may want to compile
* @param cls    the former class
* @return true if the source is newer, false else
* @throws ioexception if it is not possible to open an
*                     connection for the given source
* @see #gettimestamp(class)
*/
protected boolean issourcenewer url source  class cls  throws ioexception
long lastmod
// special handling for file:// protocol, as getlastmodified() often reports
// incorrect results (-1)
if  source getprotocol   equals
// coerce the file url to a file
string path   source getpath   replace    file separatorchar  replace
file file   new file path
lastmod   file lastmodified
else
urlconnection conn   source openconnection
lastmod   conn getlastmodified
conn getinputstream   close
long classtime   gettimestamp cls
return classtime   config getminimumrecompilationinterval   < lastmod
/**
* adds a classpath to this classloader.
*
* @param path is a jar file or a directory.
* @see #addurl(url)
*/
public void addclasspath final string path
accesscontroller doprivileged new privilegedaction
public object run
try
file f   new file path
url newurl   f touri   tourl
url urls   geturls
for  int i   0  i < urls length  i
if  urls equals newurl   return null
addurl newurl
catch  malformedurlexception e
//todo: fail through ?
return null
/**
* <p>returns all groovy classes loaded by this class loader.
*
* @return all classes loaded by this class loader
*/
public class getloadedclasses
synchronized  classcache
final collection values   classcache values
return  class  values toarray new class
/**
* removes all classes from the class cache.
*
* @see #getclasscacheentry(string)
* @see #setclasscacheentry(class)
* @see #removeclasscacheentry(string)
*/
public void clearcache
synchronized  classcache
classcache clear
synchronized  sourcecache
sourcecache clear