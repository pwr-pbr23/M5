/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr
import java awt event windowadapter
import java awt event windowevent
import java io file
import java io filereader
import org codehaus groovy antlr parser groovylexer
import org codehaus groovy antlr parser groovyrecognizer
import antlr astfactory
import antlr commonast
import antlr token
import antlr collections ast
import antlr debug misc astframe
class main
static boolean whitespaceincluded   false
static boolean showtree   false
//static boolean xml = false;
static boolean verbose   false
public static void main string args
// use a try/catch block for parser exceptions
try {
// if we have at least one command-line argument
if  args length > 0
system err println
// for each directory/file specified on the command line
for int i 0  i< args length i
if   args equals
showtree   true
}
//else if ( args[i].equals("-xml") ) {
//    xml = true;
//}
else if   args equals
verbose   true
}
else if   args equals
groovyrecognizer tracing   true
groovylexer tracing   true
}
else if   args equals
groovyrecognizer tracing   true
}
else if   args equals
groovylexer tracing   true
}
else if   args equals
whitespaceincluded   true
}
else
dofile new file args       parse it
}
else
system err println
}
catch exception e
system err println   e
e printstacktrace system err        so we can get stack trace
}
}
// this method decides what action to take based on the type of
//   file we are looking at
public static void dofile file f
throws exception
// if this is a directory, walk each file/dir in that directory
if  f isdirectory
string files   f list
for int i 0  i < files length  i
dofile new file f  files
}
// otherwise, if this is a groovy file, parse it!
else if  f getname   endswith
system err println   f getabsolutepath
// parsefile(f.getname(), new fileinputstream(f));
sourcebuffer sourcebuffer   new sourcebuffer
unicodeescapingreader unicodereader   new unicodeescapingreader new filereader f  sourcebuffer
groovylexer lexer   new groovylexer unicodereader
unicodereader setlexer lexer
parsefile f getname   lexer sourcebuffer
}
}
// here's where we do the real work...
public static void parsefile string f  groovylexer l  sourcebuffer sourcebuffer
throws exception
try {
// create a parser that reads from the scanner
groovyrecognizer parser   groovyrecognizer make l
parser setsourcebuffer sourcebuffer
parser setfilename f
if  whitespaceincluded
groovylexer lexer   parser getlexer
lexer setwhitespaceincluded true
while  true
token t   lexer nexttoken
system out println t
if  t    null    t gettype      token eof_type   break
}
return
}
// start parsing at the compilationunit rule
parser compilationunit
system out println   f   parser getast
// do something with the tree
dotreeaction f  parser getast    parser gettokennames
}
catch  exception e
system err println   e
e printstacktrace         so we can get stack trace
}
}
public static void dotreeaction string f  ast t  string tokennames
if   t  null   return
if   showtree
commonast setverbosestringconversion true  tokennames
astfactory factory = new astfactory();
ast r = factory.create(0,"ast root");
r.setfirstchild(t);
final astframe frame   new astframe    r
frame setvisible true
frame addwindowlistener
new windowadapter
public void windowclosing  windowevent e
frame setvisible false      hide the frame
frame dispose
system exit 0
}
}
if  verbose   system out println t tostringlist
}
/*if ( xml ) {
((commonast)t).setverbosestringconversion(true, tokennames);
astfactory factory = new astfactory();
ast r = factory.create(0,"ast root");
r.setfirstchild(t);
xstream xstream = new xstream();
xstream.alias("ast", commonast.class);
try {
xstream.toxml(r,new filewriter(f + ".xml"));
system.out.println("written ast to " + f + ".xml");
} catch (exception e) {
system.out.println("couldn't write to " + f + ".xml");
e.printstacktrace();
}
//if (verbose)  system.out.println(t.tostringlist());
}*/
/*@todo
groovytreeparser tparse = new groovytreeparser();
try {
tparse.compilationunit(t);
if (verbose)  system.out.println("successful walk of result ast for "+f);
}
catch (recognitionexception e) {
system.err.println(e.getmessage());
e.printstacktrace();
}
@todo*/
}
}