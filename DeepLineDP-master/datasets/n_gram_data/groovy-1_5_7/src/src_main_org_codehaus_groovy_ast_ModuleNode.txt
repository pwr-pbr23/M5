/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import groovy lang binding
import org codehaus groovy ast expr argumentlistexpression
import org codehaus groovy ast expr classexpression
import org codehaus groovy ast expr methodcallexpression
import org codehaus groovy ast expr variableexpression
import org codehaus groovy ast stmt blockstatement
import org codehaus groovy ast stmt expressionstatement
import org codehaus groovy ast stmt statement
import org codehaus groovy control sourceunit
import org codehaus groovy runtime invokerhelper
import org objectweb asm opcodes
import java io file
import java util
/**
* represents a module, which consists typically of a class declaration
* but could include some imports, some statements and multiple classes
* intermixed with statements like scripts in python or ruby
*
* @author jochen theodorou
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class modulenode extends astnode implements opcodes
private blockstatement statementblock   new blockstatement
list classes   new linkedlist
private list methods   new arraylist
private list imports   new arraylist
private list importpackages   new arraylist
private map importindex   new hashmap
private map staticimportaliases   new hashmap
private map staticimportfields   new linkedhashmap
private map staticimportclasses   new linkedhashmap
private compileunit unit
private string packagename
private string description
private boolean createclassforstatements   true
private transient sourceunit context
private boolean importsresolved   false
private static final string empty_string_array   new string      class names  not qualified
public modulenode  sourceunit context
this context   context
public modulenode  compileunit unit
this unit   unit
public blockstatement getstatementblock
return statementblock
public list getmethods
return methods
public list getclasses
if  createclassforstatements      statementblock isempty       methods isempty
classnode mainclass   createstatementsclass
createclassforstatements   false
classes add 0  mainclass
mainclass setmodule this
addtocompileunit mainclass
return classes
public list getimports
return imports
public list getimportpackages
return importpackages
/**
* @return the class name for the given alias or null if none is available
*/
public classnode getimport string alias
return  classnode  importindex get alias
public void addimport string alias  classnode type
imports add new importnode type  alias
importindex put alias  type
public string  addimportpackage string packagename
importpackages add packagename
return empty_string_array
public void addstatement statement node
statementblock addstatement node
public void addclass classnode node
classes add node
node setmodule this
addtocompileunit node
/**
* @param node
*/
private void addtocompileunit classnode node
// register the new class with the compile unit
if  unit    null
unit addclass node
public void addmethod methodnode node
methods add node
public void visit groovycodevisitor visitor
public string getpackagename
return packagename
public void setpackagename string packagename
this packagename   packagename
public boolean haspackagename
return this packagename    null
public sourceunit getcontext
return context
/**
* @return the underlying character stream description
*/
public string getdescription
if  context    null
return context getname
else
return this description
public void setdescription string description
// deprecated -- context.getname() is now sufficient
this description   description
public compileunit getunit
return unit
void setunit compileunit unit
this unit   unit
protected classnode createstatementsclass
string name   getpackagename
if  name    null
name
// now lets use the file name to determine the class name
if  getdescription      null
throw new runtimeexception
name    extractclassfromfiledescription
string baseclassname   null
if  unit    null  baseclassname   unit getconfig   getscriptbaseclass
classnode baseclass   null
if  baseclassname  null
baseclass   classhelper make baseclassname
if  baseclass    null
baseclass   classhelper script_type
classnode classnode   new classnode name  acc_public  baseclass
classnode setscript true
classnode setscriptbody true
// return new foo(new shellcontext(args)).run()
classnode addmethod
new methodnode
acc_public   acc_static
classhelper void_type
new parameter   new parameter classhelper string_type makearray
classnode empty_array
new expressionstatement
new methodcallexpression
new classexpression classhelper make invokerhelper class
new argumentlistexpression
new classexpression classnode
new variableexpression
classnode addmethod
new methodnode    acc_public  classhelper object_type  parameter empty_array  classnode empty_array  statementblock
classnode addconstructor acc_public  parameter empty_array  classnode empty_array  new blockstatement
statement stmt   new expressionstatement
new methodcallexpression
new variableexpression
new argumentlistexpression
new variableexpression
classnode addconstructor
acc_public
new parameter   new parameter classhelper make binding class
classnode empty_array
stmt
for  iterator iter   methods iterator    iter hasnext
methodnode node    methodnode  iter next
int modifiers   node getmodifiers
if   modifiers   acc_abstract     0
throw new runtimeexception
node getname
// br: the old logic seems to add static to all def f().... in a script, which makes enclosing
// inner classes (including closures) in a def function difficult. comment it out.
node setmodifiers modifiers     acc_static
classnode addmethod node
return classnode
protected string extractclassfromfiledescription
// lets strip off everything after the last .
string answer   getdescription
int idx   answer lastindexof
if  idx > 0
answer   answer substring 0  idx
// new lets trip the path separators
idx   answer lastindexof
if  idx >  0
answer   answer substring idx   1
idx   answer lastindexof file separatorchar
if  idx >  0
answer   answer substring idx   1
return answer
public boolean isempty
return classes isempty      statementblock getstatements   isempty
public void sortclasses
if  isempty    return
list classes   getclasses
linkedlist sorted   new linkedlist
int level 1
while   classes isempty
for  iterator cni   classes iterator    cni hasnext
classnode cn    classnode  cni next
classnode sn   cn
for  int i 0  sn  null    i<level  i    sn   sn getsuperclass
if  sn  null    sn isprimaryclassnode    continue
cni remove
sorted addlast cn
level
this classes   sorted
public boolean hasimportsresolved
return importsresolved
public void setimportsresolved boolean importsresolved
this importsresolved   importsresolved
public map getstaticimportaliases
return staticimportaliases
public map getstaticimportclasses
return staticimportclasses
public map getstaticimportfields
return staticimportfields
public void addstaticmethodorfield classnode type  string fieldname  string alias
staticimportaliases put alias  type
staticimportfields put alias  fieldname
public void addstaticimportclass string name  classnode type
staticimportclasses put name  type