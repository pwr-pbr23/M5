/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime typehandling
import java math bigdecimal
/**
* bigdecimal numbermath operations
*
* @author steve goetze
*/
public class bigdecimalmath extends numbermath
//this is an arbitrary value, picked as a reasonable choice for a rounding point
//for typical user math.
public static final int max_division_scale   10
public static final bigdecimalmath instance   new bigdecimalmath
private bigdecimalmath
protected number absimpl number number
return tobigdecimal number  abs
protected number addimpl number left  number right
return tobigdecimal left  add tobigdecimal right
protected number subtractimpl number left  number right
return tobigdecimal left  subtract tobigdecimal right
protected number multiplyimpl number left  number right
return tobigdecimal left  multiply tobigdecimal right
protected number divideimpl number left  number right
//hack until java 1.5 bigdecimal is available.  for now, pick
//a result scale which is the maximum of the scale of the
//two operands and an arbitrary maximum (similar to what a
//handheld calculator would do).  then, normalize the result
//by removing any trailing zeros.
bigdecimal bigleft   tobigdecimal left
bigdecimal bigright   tobigdecimal right
int scale   math max bigleft scale    bigright scale
return normalize bigleft divide bigright  math max scale  max_division_scale   bigdecimal round_half_up
protected int comparetoimpl number left  number right
return tobigdecimal left  compareto tobigdecimal right
private bigdecimal normalize bigdecimal number
// we have to take care of the case number==0, because 0 can have every
// scale and the test in the while loop would never end
if  number signum    0
// the smallest scale for 0 is 0
return number setscale 0
// rescale until we found the smallest possible scale
try
while  true
number   number setscale number scale   1
catch  arithmeticexception e
return number
protected number unaryminusimpl number left
return tobigdecimal left  negate