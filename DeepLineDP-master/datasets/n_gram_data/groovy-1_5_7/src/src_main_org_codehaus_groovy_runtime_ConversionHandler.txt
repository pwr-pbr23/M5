/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect proxy
/**
* this class is a general adapter to map a call to an java interface
* to a given delegate.
* <p>
* @author ben yu
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
*/
public abstract class conversionhandler implements invocationhandler
private object delegate
/**
* creates a conversionhandler with an deleagte.
* @param delegate the delegate
* @throws illegalargumentexception if the given delegate is null
*/
public conversionhandler object delegate
if  delegate  null  throw new illegalargumentexception
this delegate   delegate
/**
* gets the delegate.
* @return the delegate
*/
public object getdelegate
return delegate
/**
* this method is a default implementation for the invoke method
* given in invocationhandler. any call to an method with an
* declaring class that is not object is redirected to invokecustom.
* methods like tostring, equals and hashcode are called on the class
* itself instead of the delegate. it is better to overwrite the
* invokecustom method where the object related methods are filtered out.
*
* @see #invokecustom(object, method, object[])
* @see invocationhandler#invoke(java.lang.object, java.lang.reflect.method, java.lang.object[])
*
* @param proxy the proxy
* @param method the method
* @param args the arguments
* @return the result of the invocation by method or delegate
* @throws throwable any exception caused by the delegate or the method
*/
public object invoke object proxy  method method  object args
throws throwable
if  isobjectmethod method
return invokecustom proxy method args
try
return method invoke this  args
catch  invocationtargetexception ite
throw ite gettargetexception
/**
* this method is called for all methods not defined on object.
* the delegate should be called here.
*
* @param proxy the proxy
* @param method the method
* @param args the arguments
* @return the result of the invocation of the delegate
* @throws throwable any exception causes by the delegate
* @see #invoke(object, method, object[])
* @see invocationhandler#invoke(java.lang.object, java.lang.reflect.method, java.lang.object[])
*
*/
public abstract object invokecustom object proxy  method method  object args  throws throwable
/**
* indicates whether some other object is "equal to" this one.
* the delegate is used if the class of the parameter and the
* current class are equal. in other cases the method will return
* false. the exact class is here used, if inheritance is needed,
* this method must be overwritten.
*
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object obj
if  obj instanceof proxy
obj   proxy getinvocationhandler obj
if  obj instanceof conversionhandler
return    conversionhandler obj  getdelegate    equals delegate
else
return false
/**
* returns a hash code value for the delegate.
* @see java.lang.object#hashcode()
*/
public int hashcode
return delegate hashcode
/**
* returns a string version of the delegate.
* @see java.lang.object#tostring()
*/
public string tostring
return delegate tostring
private static boolean isobjectmethod method mtd
return mtd getdeclaringclass   equals object class