/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control io
import java io bufferedreader
import java io ioexception
import org codehaus groovy control compilerconfiguration
import org codehaus groovy control janitor
/**
* for readersources that can choose a parent class, a base that
* provides common functionality.
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @version $id$
*/
public abstract class abstractreadersource implements readersource
protected compilerconfiguration configuration       configuration data
public abstractreadersource compilerconfiguration configuration
if  configuration    null
throw new illegalargumentexception
// ... or more relaxed?
// configuration = compilerconfiguration.default;
this configuration   configuration
/**
* returns true if the source can be restarted (ie. if getreader()
* will return non-null on subsequent calls.
*/
public boolean canreopensource
return true
private bufferedreader linesource   null        if set  a reader on the current source file
private string line   null        the last line read from the current source file
private int number   0           the last line number read
/**
* returns a line from the source, or null, if unavailable.  if
* you supply a janitor, resources will be cached.
*/
public string getline int linenumber  janitor janitor
// if the source is already open and is passed the line we
// want, close it.
if  linesource    null    number > linenumber
cleanup
// if the line source is closed, try to open it.
if  linesource    null
try
linesource   new bufferedreader getreader
catch  exception e
// ignore
number   0
// read until the appropriate line number.
if  linesource    null
while  number < linenumber
try
line   linesource readline
number
catch  ioexception e
cleanup
if  janitor    null
cleanup
else
janitor register this
return line
/**
* cleans up any cached resources used by getline().
*/
public void cleanup
if  linesource    null
try
linesource close
catch  exception e
// ignore
linesource   null
line   null
number   0