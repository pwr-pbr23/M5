/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr
import java io ioexception
import java io reader
import antlr charscanner
/**
* translates gls-defined unicode escapes into characters. throws an exception
* in the event of an invalid unicode escape being detected.
*
* <p>no attempt has been made to optimise this class for speed or
* space.</p>
*
* @version $revision$
*/
public class unicodeescapingreader extends reader
private final reader reader
private charscanner lexer
private boolean hasnextchar   false
private int nextchar
private final sourcebuffer sourcebuffer
/**
* constructor.
* @param reader the reader that this reader will filter over.
*/
public unicodeescapingreader reader reader sourcebuffer sourcebuffer
this reader   reader
this sourcebuffer   sourcebuffer
/**
* sets the lexer that is using this reader. must be called before the
* lexer is used.
*/
public void setlexer charscanner lexer
this lexer   lexer
/**
* reads characters from the underlying reader.
* @see java.io.reader#read(char[],int,int)
*/
public int read char cbuf  int off  int len  throws ioexception
int c   0
int count   0
while  count < len     c   read       1
cbuf    char  c
count
return  count    0    c     1  ?  1   count
/**
* gets the next character from the underlying reader,
* translating escapes as required.
* @see java.io.reader#close()
*/
public int read   throws ioexception
if  hasnextchar
hasnextchar   false
write nextchar
return nextchar
int c   reader read
if  c
write c
return c
// have one backslash, continue if next char is 'u'
c   reader read
if  c
hasnextchar   true
nextchar   c
write
return
// swallow multiple 'u's
do
c   reader read
while  c
// get first hex digit
checkhexdigit c
stringbuffer charnum   new stringbuffer
charnum append  char  c
// must now be three more hex digits
for  int i   0  i < 3  i
c   reader read
checkhexdigit c
charnum append  char  c
int rv   integer parseint charnum tostring    16
write rv
return rv
private void write int c
if  sourcebuffer    null   sourcebuffer write c
/**
* checks that the given character is indeed a hex digit.
*/
private void checkhexdigit int c  throws ioexception
if  c >       c <
return
if  c >       c <
return
if  c >       c <
return
// causes the invalid escape to be skipped
hasnextchar   true
nextchar   c
throw new ioexception
lexer getline         lexer getcolumn
/**
* closes this reader by calling close on the underlying reader.
* @see java.io.reader#close()
*/
public void close   throws ioexception
reader close