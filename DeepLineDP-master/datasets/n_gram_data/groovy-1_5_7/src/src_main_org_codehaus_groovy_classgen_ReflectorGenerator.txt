/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import org codehaus groovy reflection cachedclass
import org codehaus groovy reflection cachedmethod
import org objectweb asm classvisitor
import org objectweb asm label
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import java util arraylist
import java util iterator
import java util list
/**
* code generates a reflector
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class reflectorgenerator implements opcodes
private list methods
private classvisitor cv
private bytecodehelper helper   new bytecodehelper null
private string classinternalname
private static list m_names   new arraylist
private static string get_m_name  int i
while  i >  m_names size
m_names add     m_names size
return  string  m_names get i
public reflectorgenerator list methods
this methods   new arraylist methods size
for  iterator it   methods iterator    it hasnext
cachedmethod method    cachedmethod  it next
if  method canbecalledbyreflector
this methods add method
public void generate classvisitor cv  string classname
this cv   cv
classinternalname   bytecodehelper getclassinternalname classname
cv visit classgenerator asmjdkversion  acc_public   acc_super  classinternalname  null     null
cv visitfield acc_public   acc_static        null  null
methodvisitor mvinit   cv visitmethod acc_public        null  null
mvinit visitvarinsn aload  0
mvinit visitmethodinsn invokespecial
mvinit visitinsn return
mvinit visitmaxs 1  1
methodvisitor mvclinit   cv visitmethod acc_static        null  null
mvclinit visittypeinsn new  classinternalname
mvclinit visitinsn dup
mvclinit visitmethodinsn invokespecial  classinternalname
mvclinit visitfieldinsn putstatic  classinternalname
mvclinit visitinsn return
mvclinit visitmaxs 1  1
generateinvokemethod
cv visitend
protected void generateinvokemethod
int methodcount   methods size
methodvisitor mv   cv visitmethod
acc_public


// load parameters for the helper method call
mv visitvarinsn aload  0
mv visitvarinsn aload  1
mv visitvarinsn aload  2
mv visitvarinsn aload  3
// get method number for switch
mv visitvarinsn aload  1
mv visitmethodinsn invokevirtual
// init meta methods with number
label defaultlabel   new label
label labels   new label
int indices   new int
for  int i   0  i < methodcount  i
labels   new label
cachedmethod method    cachedmethod  methods get i
method setmethodindex indices   i 1
// do switch
mv visitlookupswitchinsn defaultlabel  indices  labels
// create switch cases
for  int i   0  i < methodcount  i
// call helper for invocation
mv visitlabel labels
mv visitmethodinsn
invokespecial
classinternalname
get_m_name i
mv visitinsn areturn
// call helper for error
mv visitlabel defaultlabel
mv visitmethodinsn
invokevirtual
classinternalname
mv visitinsn areturn
// end method
mv visitmaxs 4  4
mv visitend
// create helper methods m*
for  int i   0  i < methodcount  i
mv   cv visitmethod
acc_private
get_m_name i


helper   new bytecodehelper mv
cachedmethod method    cachedmethod  methods get i
invokemethod method  mv
if  method getreturntype      void class
mv visitinsn aconst_null
mv visitinsn areturn
mv visitmaxs 0  0
mv visitend
protected void invokemethod cachedmethod method  methodvisitor mv
// compute class to make the call on
class callclass   method getdeclaringclass   gettheclass
boolean useinterface   callclass isinterface
//        if (callclass == null) {
//            callclass = method.getcallclass();
//        } else {
//            useinterface = true;
//        }
// get bytecode information
string type   bytecodehelper getclassinternalname callclass getname
string descriptor   bytecodehelper getmethoddescriptor method getreturntype    method getnativeparametertypes
// make call
if  method isstatic
loadparameters method  3  mv
mv visitmethodinsn invokestatic  type  method getname    descriptor
else
mv visitvarinsn aload  2
helper docast callclass
loadparameters method  3  mv
mv visitmethodinsn  useinterface  ? invokeinterface   invokevirtual  type  method getname    descriptor
helper box method getreturntype
protected void loadparameters cachedmethod method  int argumentindex  methodvisitor mv
cachedclass parameters   method getparametertypes
int size   parameters length
for  int i   0  i < size  i
// unpack argument from object[]
mv visitvarinsn aload  argumentindex
helper pushconstant i
mv visitinsn aaload
// cast argument to parameter class, inclusive unboxing
// for methods with primitive types
class type   parameters gettheclass
if  type isprimitive
helper unbox type
else
helper docast type