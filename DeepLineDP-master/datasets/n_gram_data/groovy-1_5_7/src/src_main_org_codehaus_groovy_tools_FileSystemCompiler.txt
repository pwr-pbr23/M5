/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy tools
import java io file
import java io ioexception
import java util hashmap
import java util map
import org apache commons cli commandline
import org apache commons cli helpformatter
import org apache commons cli optionbuilder
import org apache commons cli options
import org apache commons cli posixparser
import org codehaus groovy control compilationunit
import org codehaus groovy control compilerconfiguration
import org codehaus groovy control configurationexception
import org codehaus groovy tools javac javaawarecompilationunit
import org codehaus groovy runtime invokerhelper
/**
* command-line compiler (aka. <tt>groovyc</tt>).
*
* @version $id$
*/
public class filesystemcompiler
private final compilationunit unit
public filesystemcompiler  compilerconfiguration configuration  throws configurationexception
if  configuration getjointcompilationoptions    null
this unit   new javaawarecompilationunit configuration
else
this unit   new compilationunit configuration
public void compile  string paths   throws exception
unit addsources  paths
unit compile
public void compile  file files   throws exception
unit addsources  files
unit compile
public static void displayhelp final options options
final helpformatter formatter   new helpformatter
formatter printhelp   80          options
public static void displayversion
string version   invokerhelper getversion
system err println     version
system err println
system err println
public static int checkfiles  string filenames
int errors   0
for int i   0  i < filenames length    i
file file   new file  filenames
if   file exists
system err println      file
errors
else if   file canread
system err println      file
errors
return errors
/**
*  primary entry point for compiling from the command line
*  (using the groovyc script).
*/
public static void main  string args
boolean displaystacktraceonerror   false
boolean jointcompilation
try
//
// parse the command line
options options   new options
options addoption optionbuilder withlongopt    hasarg   withargname    withdescription    create
options addoption optionbuilder withlongopt    hasarg   withargname    withdescription    create
options addoption optionbuilder withlongopt    hasarg   withargname    withdescription    create
options addoption optionbuilder withlongopt    hasarg   withargname    withdescription    create
options addoption optionbuilder hasarg   withdescription    create
//            options.addoption(optionbuilder.withlongopt("strict").withdescription("turn on strict type safety.").create('s'));
options addoption optionbuilder withlongopt    withdescription    create
options addoption optionbuilder withlongopt    withdescription    create
options addoption optionbuilder withlongopt    withdescription    create
options addoption optionbuilder withlongopt    withdescription    create
options addoption
optionbuilder withargname
withvalueseparator
hasargs 2
withdescription
create
options addoption
optionbuilder withargname
hasarg
withdescription
create
posixparser cliparser   new posixparser
commandline cli   cliparser parse options  args
if  cli hasoption
displayhelp options
return
if  cli hasoption
displayversion
return
//
// setup the configuration data
compilerconfiguration configuration   new compilerconfiguration
if  cli hasoption
configuration setclasspath  cli getoptionvalue
if  cli hasoption
configuration settargetdirectory  cli getoptionvalue
if  cli hasoption
configuration setsourceencoding cli getoptionvalue
displaystacktraceonerror   cli hasoption
// joint compilation parameters
jointcompilation   cli hasoption
if  jointcompilation
map compileroptions    new hashmap
string opts   cli getoptionvalues
compileroptions put    opts
opts   cli getoptionvalues
compileroptions put    opts
configuration setjointcompilationoptions compileroptions
//
// load the file name list
string filenames   cli getargs
if  filenames length    0
displayhelp options
return
int errors   checkfiles  filenames
//
// create and start the compiler
if  errors    0
if  jointcompilation
file tmpdir   createtempdir
configuration getjointcompilationoptions   put   tmpdir
filesystemcompiler compiler   new filesystemcompiler configuration
compiler compile  filenames
catch  throwable e
new errorreporter  e  displaystacktraceonerror   write  system err
private static file createtempdir   throws ioexception
file tempfile   file createtempfile
tempfile delete
tempfile mkdirs
return tempfile