/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control io
import java io ioexception
import java io reader
import org codehaus groovy control hascleanup
import org codehaus groovy control janitor
/**
*  an interface for things that can supply (and potentially resupply) a reader
*  on a source stream.
*
*  @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
*
*  @version $id$
*/
public interface readersource extends hascleanup
/**
*  returns a new reader on the underlying source object.  returns
*  null if the source can't be reopened.
* @throws java.io.ioexception if there was an error opening for stream
* @return the reader to the resource
*/
reader getreader   throws ioexception
/**
*  returns true if the source can be restarted (ie. if getreader()
*  will return non-null on subsequent calls.
* @return true if the resource can be reopened for reading
*/
boolean canreopensource
/**
*  returns a line from the source, or null, if unavailable.  if
*  you supply a janitor, resources will be cached.
* @param linenumber the number of the line of interest
* @param janitor helper to clean up afterwards
* @return the line of interest
*/
string getline  int linenumber  janitor janitor
/**
*  cleans up any cached resources used by getline().
*/
void cleanup