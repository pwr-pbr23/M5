/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy xml
import java io ioexception
import java io objectinputstream
import java io serializable
/**
* <code>qname</code> class represents the value of a qualified name
* as specified in <a href=" http://www.w3.org/tr/xmlschema-2/#qname ">xml
* schema part2: datatypes specification</a>.
* <p>
* the value of a qname contains a <b>namespaceuri</b>, a <b>localpart</b> and a <b>prefix</b>.
* the localpart provides the local part of the qualified name. the
* namespaceuri is a uri reference identifying the namespace.
*
* @version 1.1
*/
public class qname implements serializable
/** comment/shared empty string */
private static final string empty_string     intern
/** field namespaceuri */
private string namespaceuri
/** field localpart */
private string localpart
/** field prefix */
private string prefix
/**
* constructor for the qname.
*
* @param localpart local part of the qname
*/
public qname string localpart
this empty_string  localpart  empty_string
/**
* constructor for the qname.
*
* @param namespaceuri namespace uri for the qname
* @param localpart local part of the qname.
*/
public qname string namespaceuri  string localpart
this namespaceuri  localpart  empty_string
/**
* constructor for the qname.
*
* @param namespaceuri namespace uri for the qname
* @param localpart local part of the qname.
* @param prefix prefix of the qname.
*/
public qname string namespaceuri  string localpart  string prefix
this namespaceuri    namespaceuri    null
? empty_string
namespaceuri trim   intern
if  localpart    null
throw new illegalargumentexception
else
this localpart   localpart trim   intern
if  prefix    null
throw new illegalargumentexception
else
this prefix   prefix trim   intern
/**
* gets the namespace uri for this qname
*
* @return namespace uri
*/
public string getnamespaceuri
return namespaceuri
/**
* gets the local part for this qname
*
* @return local part
*/
public string getlocalpart
return localpart
/**
* gets the prefix for this qname
*
* @return prefix
*/
public string getprefix
return prefix
/**
* returns the fully qualified name of this qname
*
* @return  a string representation of the qname
*/
public string getqualifiedname
return   prefix equals empty_string
? localpart
prefix       localpart
/**
* returns a string representation of this qname
*
* @return  a string representation of the qname
*/
public string tostring
return   namespaceuri equals empty_string
? localpart
namespaceuri       localpart
/**
* tests this qname for equality with another object.
* <p>
* if the given object is not a qname or string equivalent or is null then this method
* returns <tt>false</tt>.
* <p>
* for two qnames to be considered equal requires that both
* localpart and namespaceuri must be equal. this method uses
* <code>string.equals</code> to check equality of localpart
* and namespaceuri. any class that extends qname is required
* to satisfy this equality contract.
*
* if the supplied object is a string, then it is split in two on the last colon
* and the first half is compared against the prefix || namespaceuri
* and the second half is compared against the localpart
*
* i.e. assert new qname("namespace","localpart").equals("namespace:localpart")
*
* intended usage: for gpath accessors, e.g. root.'urn:mynamespace:node'
*
* warning: this equivalence is not commutative,
* i.e. qname.equals(string) may be true/false  but string.equals(qname) is always false
*
* <p>
* this method satisfies the general contract of the <code>object.equals</code> method.
*
* @param o the reference object with which to compare
*
* @return <code>true</code> if the given object is identical to this
*      qname: <code>false</code> otherwise.
*/
public boolean equals object o
if  this    o  return true
if  o    null  return false
if  o instanceof qname
final qname qname    qname  o
if   namespaceuri equals qname namespaceuri   return false
return localpart equals qname localpart
else if  o instanceof string
final string string    string o
if  string length      0  return false
int lastcolonindex   string lastindexof
if  lastcolonindex < 0    lastcolonindex    string length     1  return false
final string stringprefix   string substring 0 lastcolonindex
final string stringlocalpart   string substring lastcolonindex   1
if  stringprefix equals prefix     stringprefix equals namespaceuri
return localpart equals stringlocalpart
return false
return false
/**
* tests if this qname matches another object.
* <p>
* if the given object is not a qname or string equivalent or is null then this method
* returns <tt>false</tt>.
* <p>
* for two qnames to be considered matching requires that both
* localpart and namespaceuri must be equal or one of them is a wildcard.
*
* if the supplied object is a string, then it is split in two on the last colon
* and the first half is matched against the prefix || namespaceuri
* and the second half is matched against the localpart
*
* @param o the reference object with which to compare
*
* @return <code>true</code> if the given object matches
* this qname: <code>false</code> otherwise.
*/
public boolean matches object o
if  this    o  return true
if  o    null  return false
if  o instanceof qname
final qname qname    qname  o
if   namespaceuri equals qname namespaceuri      namespaceuri equals        qname namespaceuri equals     return false
return localpart equals qname localpart     localpart equals       qname localpart equals
else if  o instanceof string
final string string    string o
if  string length      0  return false
// try matching against 'prefix:localname'
int lastcolonindex   string lastindexof
if  lastcolonindex < 0    lastcolonindex    string length     1  return false
final string stringprefix   string substring 0 lastcolonindex
final string stringlocalpart   string substring lastcolonindex   1
if  stringprefix equals prefix     stringprefix equals namespaceuri     stringprefix equals
return localpart equals stringlocalpart     stringlocalpart equals
return false
/**
* returns a qname holding the value of the specified string.
* <p>
* the string must be in the form returned by the qname.tostring()
* method, i.e. "{namespaceuri}localpart", with the "{namespaceuri}"
* part being optional.
* <p>
* this method doesn't do a full validation of the resulting qname.
* in particular, it doesn't check that the resulting namespace uri
* is a legal uri (per rfc 2396 and rfc 2732), nor that the resulting
* local part is a legal ncname per the xml namespaces specification.
*
* @param s the string to be parsed
* @throws java.lang.illegalargumentexception if the specified string cannot be parsed as a qname
* @return qname corresponding to the given string
*/
public static qname valueof string s
if   s    null     s equals
throw new illegalargumentexception
if  s charat 0
int i   s indexof
if  i     1
throw new illegalargumentexception
if  i    s length     1
throw new illegalargumentexception
else
return new qname s substring 1  i   s substring i   1
else
return new qname s
/**
* returns a hash code value for this qname object. the hash code
* is based on both the localpart and namespaceuri parts of the
* qname. this method satisfies the  general contract of the
* <code>object.hashcode</code> method.
*
* @return a hash code value for this qname object
*/
public int hashcode
int result
result   namespaceuri hashcode
result   29   result   localpart hashcode
return result
/**
* ensure that deserialization properly interns the results.
* @param in the objectinputstream to be read
*/
private void readobject objectinputstream in  throws
ioexception  classnotfoundexception
in defaultreadobject
namespaceuri   namespaceuri intern
localpart   localpart intern
prefix   prefix intern