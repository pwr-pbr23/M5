/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy tools groovydoc
import java util arrays
import java util hashmap
import java util iterator
import java util list
import java util map
import org codehaus groovy groovydoc groovyclassdoc
import org codehaus groovy groovydoc groovypackagedoc
import org codehaus groovy groovydoc groovyrootdoc
import groovy text gstringtemplateengine
import groovy text template
import groovy text templateengine
/*
* todo
*  comma at the end of method parameters
*  add comments
*  static modifier
*  order methods alphabetically (implement compareto enough?)
*  provide links to other html files (e.g. return type of a method)
*/
public class groovydoctemplateengine
private templateengine engine
private groovydoctool tool
private resourcemanager resourcemanager
//	private string relativetemplatepath;
private map doctemplates     cache
private list doctemplatepaths     once per documentation set
private map packagetemplates     cache
private list packagetemplatepaths     once per package
private map classtemplates     cache
private list classtemplatepaths     once per class
public groovydoctemplateengine groovydoctool tool  resourcemanager resourcemanager  string classtemplate
this tool  resourcemanager  new string    new string    new string  classtemplate
}
public groovydoctemplateengine groovydoctool tool  resourcemanager resourcemanager
string doctemplates
string packagetemplates
string classtemplates
this tool   tool
this resourcemanager   resourcemanager
this doctemplatepaths   arrays aslist doctemplates
this packagetemplatepaths   arrays aslist packagetemplates
this classtemplatepaths   arrays aslist classtemplates
this doctemplates   new hashmap
this packagetemplates   new hashmap
this classtemplates   new hashmap
engine   new gstringtemplateengine
}
string applyclasstemplates groovyclassdoc classdoc
string templatepath    string  classtemplatepaths get 0      todo  iterate
string templatewithbindingapplied = "";
try {
template t    template  classtemplates get templatepath
if  t    null
t   engine createtemplate resourcemanager getreader templatepath
classtemplates put templatepath  t
}
map binding = new hashmap();
binding.put("classdoc", classdoc);
templatewithbindingapplied   t make binding  tostring
} catch (exception e) {
e.printstacktrace();
}
return templatewithbindingapplied;
}
string applypackagetemplate string template  groovypackagedoc packagedoc
string templatepath   template
string templatewithbindingapplied = "";
try {
template t    template  packagetemplates get templatepath
if  t    null
t   engine createtemplate resourcemanager getreader templatepath
packagetemplates put templatepath  t
}
map binding = new hashmap();
binding put    packagedoc
templatewithbindingapplied   t make binding  tostring
} catch (exception e) {
e.printstacktrace();
}
return templatewithbindingapplied;
}
string applyrootdoctemplate string template  groovyrootdoc rootdoc
string templatepath   template
string templatewithbindingapplied = "";
try {
template t    template  doctemplates get templatepath
if  t    null
t   engine createtemplate resourcemanager getreader templatepath
doctemplates put templatepath  t
}
map binding = new hashmap();
binding put    rootdoc
templatewithbindingapplied   t make binding  tostring
} catch (exception e) {
e.printstacktrace();
}
return templatewithbindingapplied;
}
iterator classtemplatesiterator
return classtemplatepaths iterator
}
iterator packagetemplatesiterator
return packagetemplatepaths iterator
}
iterator doctemplatesiterator
return doctemplatepaths iterator
}
/*
string applyclasstemplateswithvelocity(groovyclassdoc classdoc) {
//		iterator templates = classtemplates.iterator();
//		while (templates.hasnext)
string templatepath = (string) classtemplates.get(0); // todo (iterate)
string templatewithbindingapplied = "";
try {
//			template t = new gstringtemplateengine().createtemplate(template);
velocitytemplateengine t = new velocitytemplateengine(new file(".").getabsolutepath());
map binding = new hashmap();
binding.put("classdoc", classdoc);
//	        templatewithbindingapplied = t.make(binding).tostring();
templatewithbindingapplied = t.apply(templatepath,binding);
} catch (exception e) {
e.printstacktrace();
}
return templatewithbindingapplied;
}
*/
}