/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import org codehaus groovy control compilationfailedexception
import groovy lang binding
import groovy lang groovyshell
/**
* allow easy integration from groovy into java through convenience methods.
*
* @author dierk koenig
*/
public class eval
/**
* @param expression the groovy expression to evaluate
* @return the result of the expression
* @throws compilationfailedexception if expression is no proper groovy
*/
public static object me final string expression  throws compilationfailedexception
return me null  null  expression
/**
* evaluate expression and make object available inside the expression as 'symbol'
* @param expression the groovy expression to evaluate
* @return the result of the expression
* @throws compilationfailedexception if expression is no proper groovy
*/
public static object me final string symbol  final object object  final string expression  throws compilationfailedexception
binding b   new binding
b setvariable symbol  object
groovyshell sh   new groovyshell b
return sh evaluate expression
/**
* evaluate expression and make x available inside the expression as 'x'
* @param expression the groovy expression to evaluate
* @return the result of the expression
* @throws compilationfailedexception if expression is no proper groovy
*/
public static object x final object x  final string expression  throws compilationfailedexception
return me    x  expression
/**
* evaluate expression and make x and y available inside the expression as 'x' and 'y'
* @param expression the groovy expression to evaluate
* @return the result of the expression
* @throws compilationfailedexception if expression is no proper groovy
*/
public static object xy final object x  final object y  final string expression  throws compilationfailedexception
binding b   new binding
b setvariable    x
b setvariable    y
groovyshell sh   new groovyshell b
return sh evaluate expression
/**
* evaluate expression and make x,y,z available inside the expression as 'x','y','z'
* @param expression the groovy expression to evaluate
* @return the result of the expression
* @throws compilationfailedexception if expression is no proper groovy
*/
public static object xyz final object x  final object y  final object z  final string expression  throws compilationfailedexception
binding b   new binding
b setvariable    x
b setvariable    y
b setvariable    z
groovyshell sh   new groovyshell b
return sh evaluate expression