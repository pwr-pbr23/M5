/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ant
import java io file
import java io filenamefilter
import java util arraylist
import java util arrays
import java util iterator
import java util list
import java util stringtokenizer
import org apache tools ant buildexception
import org apache tools ant directoryscanner
import org apache tools ant task
import org apache tools ant types dirset
import org apache tools ant types path
import org apache tools ant types patternset
import org codehaus groovy tools groovydoc classpathresourcemanager
import org codehaus groovy tools groovydoc fileoutputtool
import org codehaus groovy tools groovydoc groovydoctool
/**
* access to the groovydoc tool from ant.
*
* @version $id$
*/
public class groovydoc extends task
private final logginghelper log   new logginghelper this
private path sourcepath
private file destdir
private list packagenames
private list excludepackagenames
private string windowtitle
private boolean privatescope
private boolean usedefaultexcludes
private boolean includenosourcepackages
private list packagesets
private list sourcefilestodoc
// todo: hook this in
private list links   new arraylist
public groovydoc
packagenames   new arraylist
excludepackagenames   new arraylist
packagesets   new arraylist
sourcefilestodoc   new arraylist
privatescope   false
usedefaultexcludes   true
includenosourcepackages   false
/**
* specify where to find source file
*
* @param src a path instance containing the various source directories.
*/
public void setsourcepath path src
if  sourcepath    null
sourcepath   src
else
sourcepath append src
/**
* set the directory where the javadoc output will be generated.
*
* @param dir the destination directory.
*/
public void setdestdir file dir
destdir   dir
// todo: maybe tell groovydoc to use file output
/**
* set the package names to be processed.
*
* @param packages a comma separated list of packages specs
*        (may be wildcarded).
*
*/
public void setpackagenames string packages
stringtokenizer tok   new stringtokenizer packages
while  tok hasmoretokens
string packagename   tok nexttoken
packagenames add packagename
public void setuse boolean b
//ignore as 'use external file' irrelevant with groovydoc :-)
/**
* set the title to be placed in the html &lt;title&gt; tag of the
* generated documentation.
*
* @param title the window title to use.
*/
public void setwindowtitle string title
windowtitle   title
/**
* indicate whether all classes and
* members are to be included in the scope processed
*
* @param b true if scope is to be private level.
*/
public void setprivate boolean b
privatescope   b
/**
* add the directories matched by the nested dirsets to the vector
* and the base directories of the dirsets to the path.  it also
* handles the packages and excludepackages attributes and
* elements.
*
* @since 1.5
*/
private void parsepackages list resultantpackages  path sp
list addedpackages   new arraylist
list dirsets   new arraylist packagesets
// for each sourcepath entry, add a directoryset with includes
// taken from packagenames attribute and nested package
// elements and excludes taken from excludepackages attribute
// and nested excludepackage elements
if  sourcepath    null
patternset ps   new patternset
if  packagenames size   > 0
iterator itr   packagenames iterator
while  itr hasnext
string p    string  itr next
string pkg   p replace
if  pkg endswith
pkg
ps createinclude   setname pkg
else
ps createinclude   setname
iterator itr2   excludepackagenames iterator
while  itr2 hasnext
string p    string  itr2 next
string pkg   p replace
if  pkg endswith
pkg
ps createexclude   setname pkg
string pathelements   sourcepath list
for  int i   0  i < pathelements length  i
file dir   new file pathelements
if  dir isdirectory
dirset ds   new dirset
ds setdefaultexcludes usedefaultexcludes
ds setdir dir
ds createpatternset   addconfiguredpatternset ps
dirsets add ds
else
log warn     pathelements
iterator itr3   dirsets iterator
while  itr3 hasnext
dirset ds    dirset  itr3 next
file basedir   ds getdir getproject
log debug     basedir
directoryscanner dsc   ds getdirectoryscanner getproject
string dirs   dsc getincludeddirectories
boolean containspackages   false
for  int i   0  i < dirs length  i
// are there any groovy or java files in this directory?
file pd   new file basedir  dirs
string files   pd list new filenamefilter
public boolean accept file dir1  string name
return name endswith
name endswith
name endswith
name endswith
name endswith
includenosourcepackages
name equals
iterator itr4   arrays aslist files  iterator
while  itr4 hasnext
string filename    string  itr4 next
sourcefilestodoc add dirs   file separator   filename
if  files length > 0
if    equals dirs
log warn basedir
else
containspackages   true
string packagename
dirs replace file separatorchar
if   addedpackages contains packagename
addedpackages add packagename
resultantpackages add packagename
if  containspackages
// we don't need to care for duplicates here,
// path.list does it for us.
sp createpathelement   setlocation basedir
else
log verbose basedir
public void execute   throws buildexception
// do it
list packagestodoc   new arraylist
path sourcedirs   new path getproject
if  sourcepath    null
sourcedirs addexisting sourcepath
parsepackages packagestodoc  sourcedirs
groovydoctool htmltool   new groovydoctool
new classpathresourcemanager       we're gonna get the default templates out of the dist jar file
sourcepath tostring       sourcepath                       todo multiple paths need to be handled here
new string      top level templates
needs all package names
needs all packages   class names
needs all packages
new string      package level templates
new string      class level templates
links
try
iterator itr   sourcefilestodoc iterator
while  itr hasnext
htmltool add  string  itr next
fileoutputtool output   new fileoutputtool
htmltool rendertooutput output  destdir getcanonicalpath        todo push destdir through apis?
catch  exception e
e printstacktrace
/**
* create link to javadoc/groovydoc output at the given url.
*
* @return link argument to configure
*/
public linkargument createlink
linkargument la   new linkargument
links add la
return la
/**
* represents a link pair (href, packages).
*/
public static class linkargument
private string href
private string packages
/**
* get the packages attribute.
*
* @return the packages attribute.
*/
public string getpackages
return packages
/**
* set the packages attribute.
*
* @param packages the comma separated package prefixs corresponding to this link
*/
public void setpackages string packages
this packages   packages
/**
* get the href attribute.
*
* @return the href attribute.
*/
public string gethref
return href
/**
* set the href attribute.
*
* @param hr a <code>string</code> value representing the url to use for this link
*/
public void sethref string hr
href   hr