/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy reflection
import groovy lang metamethod
import org codehaus groovy classgen bytecodehelper
import org codehaus groovy runtime invokerinvocationexception
import org codehaus groovy runtime metaclass methodhelper
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java security accesscontroller
import java security privilegedaction
import java util arrays
import java util comparator
/**
* @author alex.tkachman
*/
public class cachedmethod extends metamethod implements comparable
public final cachedclass cachedclass
private final method cachedmethod
private volatile boolean alreadysetaccessible
private int methodindex
private int hashcode
private static mycomparator comparator   new mycomparator
public cachedmethod cachedclass clazz  method method
this cachedmethod   method
this cachedclass   clazz
alreadysetaccessible   modifier ispublic method getmodifiers       modifier ispublic clazz getmodifiers
public cachedmethod method method
this reflectioncache getcachedclass method getdeclaringclass    method
public static cachedmethod find method method
cachedmethod methods   reflectioncache getcachedclass method getdeclaringclass    getmethods
//        for (int i = 0; i < methods.length; i++) {
//            cachedmethod cachedmethod = methods[i];
//            if (cachedmethod.cachedmethod.equals(method))
//                return cachedmethod;
//        }
//        return null;
int i   arrays binarysearch methods  method  comparator
if  i < 0
return null
return methods
protected class getpt
return cachedmethod getparametertypes
public string getname
return cachedmethod getname
public string getdescriptor
return bytecodehelper getmethoddescriptor getreturntype    getnativeparametertypes
public cachedclass getdeclaringclass
return cachedclass
public object invoke object object  object arguments
try
return setaccessible   invoke object  arguments
catch  illegalargumentexception e
throw new invokerinvocationexception e
catch  illegalaccessexception e
throw new invokerinvocationexception e
catch  invocationtargetexception e
throw new invokerinvocationexception e
public parametertypes getparamtypes
return null
public class getreturntype
return cachedmethod getreturntype
public int getparamscount
return getparametertypes   length
public int getmodifiers
return cachedmethod getmodifiers
public string getsignature
return getname     getdescriptor
public method setaccessible
if    alreadysetaccessible
setaccessible0
return cachedmethod
private synchronized void setaccessible0
accesscontroller doprivileged new privilegedaction
public object run
cachedmethod setaccessible true
return null
alreadysetaccessible   true
public boolean isstatic
return methodhelper isstatic cachedmethod
public void setmethodindex int i
methodindex   i
public int getmethodindex
return methodindex
public boolean canbecalledbyreflector
if   modifier ispublic cachedclass getmodifiers
return false
if   modifier ispublic getmodifiers
return false
getparametertypes
for  int i   0  i    parametertypes length    i
if   parametertypes isprimitive     modifier ispublic parametertypes getmodifiers
return false
return true
public int compareto object o
if  o instanceof cachedmethod
return comparetocachedmethod  cachedmethod o
else
return comparetomethod  method o
private int comparetocachedmethod cachedmethod m
if  m    null
return  1
final int strcomp   getname   compareto m getname
if  strcomp    0
return strcomp
final int retcomp   getreturntype   getname   compareto m getreturntype   getname
if  retcomp    0
return retcomp
cachedclass  params     getparametertypes
cachedclass  mparams   m getparametertypes
final int pd   params length   mparams length
if  pd    0
return pd
for  int i   0  i    params length    i
final int namecomp   params getname   compareto mparams getname
if  namecomp    0
return namecomp
throw new runtimeexception
private int comparetomethod method m
if  m    null
return  1
final int strcomp   getname   compareto m getname
if  strcomp    0
return strcomp
final int retcomp   getreturntype   getname   compareto m getreturntype   getname
if  retcomp    0
return retcomp
cachedclass  params     getparametertypes
class  mparams   m getparametertypes
final int pd   params length   mparams length
if  pd    0
return pd
for  int i   0  i    params length    i
final int namecomp   params getname   compareto mparams getname
if  namecomp    0
return namecomp
return 0
public boolean equals object o
return  o instanceof cachedmethod    cachedmethod equals   cachedmethod o  cachedmethod
o instanceof method    cachedmethod equals o
public int hashcode
if  hashcode    0
hashcode   cachedmethod hashcode
if  hashcode    0
hashcode   0xcafebebe
return hashcode
public string tostring
return cachedmethod tostring
private static class mycomparator implements comparator
public int compare object o1  object o2
if  o1 instanceof cachedmethod
return   cachedmethod o1  compareto o2
else if  o2 instanceof cachedmethod
return    cachedmethod o2  compareto o1
else
// really, this should never happen, it's eveidence of corruption if it does
throw new classcastexception