/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang closure
import java beans propertychangeevent
import java beans propertychangelistener
import java beans propertychangesupport
import java util arraylist
import java util collection
import java util collections
import java util iterator
import java util list
import java util listiterator
/**
* list decorator that will trigger propertychangeevents when a value changes.<br>
* an optional closure may be specified and will work as a filter, if it returns true the property
* will trigger an event (if the value indeed changed), otherwise it won't. the closure may receive
* 1 or 2 parameters, the single one being the value, the other one both the key and value, for
* example:
*
* <pre>
* // skip all properties whose value is a closure
* def map = new observablelist( {!(it instanceof closure)} )
* &lt;p/&gt;
* // skip all properties whose name matches a regex
* def map = new observablelist( { name, value -&gt; !(name =&tilde; /[a-z+]/) } )
* </pre>
*
* <p>
* the current implementation will trigger specialized events in the following scenarios, you need
* not register a different listener as those events extend from propertychangeevent
* <ul>
* <li>observablelist.elementaddedevent - a new element is added to the list</li>
* <li>observablelist.elementremovedevent - a element is removed from the list</li>
* <li>observablelist.elementupdatedevent - a element changes value (same as regular
* propertychangeevent)</li>
* <li>observablelist.elementclearedevent - all elements have been removed from the list</li>
* <li>observablelist.multielementaddedevent - triggered by calling list.addall()</li>
* <li>observablelist.multielementremoveedevent - triggered by calling
* list.removeall()/list.retainall()</li>
* </ul>
* </p>
*
* @author <a href="mailto:aalmiray@users.sourceforge.net">andres almiray</a>
*/
public class observablelist implements list
private list delegate
private propertychangesupport pcs
private closure test
public observablelist
this  new arraylist    null
public observablelist  list delegate
this  delegate  null
public observablelist  closure test
this  new arraylist    test
public observablelist  list delegate  closure test
this delegate   delegate
this test   test
pcs   new propertychangesupport  this
public void add  int index  object element
delegate add  index  element
if  test    null
object result   test call  element
if  result    null    result instanceof boolean      boolean  result  booleanvalue
pcs firepropertychange  new elementaddedevent  this  element  index
else
pcs firepropertychange  new elementaddedevent  this  element  index
public boolean add  object o
boolean success   delegate add  o
if  success
if  test    null
object result   test call  o
if  result    null    result instanceof boolean      boolean  result  booleanvalue
pcs firepropertychange  new elementaddedevent  this  o  size     1
else
pcs firepropertychange  new elementaddedevent  this  o  size     1
return success
public boolean addall  collection c
int index   size     1
index   index < 0 ? 0   index
boolean success   delegate addall  c
if  success    c    null
list values   new arraylist
for  iterator i   c iterator    i hasnext
object element   i next
if  test    null
object result   test call  element
if  result    null    result instanceof boolean      boolean  result  booleanvalue
values add  element
else
values add  element
if  values size   > 0
pcs firepropertychange  new multielementaddedevent  this  index  values
return success
public boolean addall  int index  collection c
boolean success   delegate addall  index  c
if  success    c    null
list values   new arraylist
for  iterator i   c iterator    i hasnext
object element   i next
if  test    null
object result   test call  element
if  result    null    result instanceof boolean      boolean  result  booleanvalue
values add  element
else
values add  element
if  values size   > 0
pcs firepropertychange  new multielementaddedevent  this  index  values
return success
public void clear
list values   new arraylist
values addall  delegate
delegate clear
if   values isempty
pcs firepropertychange  new elementclearedevent  this  values
public boolean contains  object o
return delegate contains  o
public boolean containsall  collection c
return delegate containsall  c
public boolean equals  object o
return delegate equals  o
public object get  int index
return delegate get  index
public int hashcode
return delegate hashcode
public int indexof  object o
return delegate indexof  o
public boolean isempty
return delegate isempty
public iterator iterator
return new observableiterator  delegate iterator
public int lastindexof  object o
return delegate lastindexof  o
public listiterator listiterator
return new observablelistiterator  delegate listiterator    0
public listiterator listiterator  int index
return new observablelistiterator  delegate listiterator  index    index
public object remove  int index
object element   delegate remove  index
pcs firepropertychange  new elementremovedevent  this  element  index
return element
public boolean remove  object o
int index   delegate indexof  o
boolean success   delegate remove  o
if  success
pcs firepropertychange  new elementremovedevent  this  o  index
return success
public boolean removeall  collection c
if  c    null
return false
list values   new arraylist
if  c    null
for  iterator i   c iterator    i hasnext
object element   i next
if  delegate contains  element
values add  element
boolean success   delegate removeall  c
if  success     values isempty
pcs firepropertychange  new multielementremovedevent  this  values
return success
public boolean retainall  collection c
if  c    null
return false
list values   new arraylist
if  c    null
for  iterator i   delegate iterator    i hasnext
object element   i next
if   c contains  element
values add  element
boolean success   delegate retainall  c
if  success     values isempty
pcs firepropertychange  new multielementremovedevent  this  values
return success
public object set  int index  object element
object oldvalue   delegate set  index  element
if  test    null
object result   test call  element
if  result    null    result instanceof boolean      boolean  result  booleanvalue
pcs firepropertychange  new elementupdatedevent  this  oldvalue  element  index
else
pcs firepropertychange  new elementupdatedevent  this  oldvalue  element  index
return oldvalue
public int size
return delegate size
public list sublist  int fromindex  int toindex
return delegate sublist  fromindex  toindex
public object toarray
return delegate toarray
public object toarray  object a
return delegate toarray  a
private class observableiterator implements iterator
private iterator iterdelegate
protected int cursor   0
public observableiterator  iterator iterdelegate
this iterdelegate   iterdelegate
public iterator getdelegate
return iterdelegate
public boolean hasnext
return iterdelegate hasnext
public object next
cursor
return iterdelegate next
public void remove
observablelist this remove  cursor
private class observablelistiterator extends observableiterator implements listiterator
public observablelistiterator  listiterator iterdelegate  int index
super  iterdelegate
cursor   index
public listiterator getlistiterator
return  listiterator  getdelegate
public void add  object o
observablelist this add  o
cursor
public boolean hasprevious
return getlistiterator   hasprevious
public int nextindex
return getlistiterator   nextindex
public object previous
return getlistiterator   previous
public int previousindex
return getlistiterator   previousindex
public void set  object o
observablelist this set  cursor  o
// observable interface
public void addpropertychangelistener  propertychangelistener listener
pcs addpropertychangelistener  listener
public void addpropertychangelistener  string propertyname  propertychangelistener listener
pcs addpropertychangelistener  propertyname  listener
public propertychangelistener getpropertychangelisteners
return pcs getpropertychangelisteners
public propertychangelistener getpropertychangelisteners  string propertyname
return pcs getpropertychangelisteners  propertyname
public void removepropertychangelistener  propertychangelistener listener
pcs removepropertychangelistener  listener
public void removepropertychangelistener  string propertyname  propertychangelistener listener
pcs removepropertychangelistener  propertyname  listener
public boolean haslisteners  string propertyname
return pcs haslisteners  propertyname
public abstract static class elementevent extends propertychangeevent
public static final int added   0
public static final int updated   1
public static final int removed   2
public static final int cleared   3
public static final int multi_add   4
public static final int multi_remove   5
private static final string property_name
protected static final object oldvalue   new object
protected static final object newvalue   new object
private int type
private int index
public elementevent  object source  object oldvalue  object newvalue  int index  int type
super  source  property_name  oldvalue  newvalue
switch  type
case added
case updated
case removed
case cleared
case multi_add
case multi_remove
this type   type
break
default
this type   updated
break
this index   index
public int getindex
return index
public int gettype
return type
public string gettypeasstring
switch  type
case added
return
case updated
return
case removed
return
case cleared
return
case multi_add
return
case multi_remove
return
default
return
public static class elementaddedevent extends elementevent
public elementaddedevent  object source  object newvalue  int index
super  source  null  newvalue  index  elementevent added
public static class elementupdatedevent extends elementevent
public elementupdatedevent  object source  object oldvalue  object newvalue  int index
super  source  oldvalue  newvalue  index  elementevent updated
public static class elementremovedevent extends elementevent
public elementremovedevent  object source  object newvalue  int index
super  source  null  newvalue  index  elementevent removed
public static class elementclearedevent extends elementevent
private list values   new arraylist
public elementclearedevent  object source  list values
super  source  oldvalue  newvalue  elementevent cleared  0
if  values    null
this values addall  values
public list getvalues
return collections unmodifiablelist  values
public static class multielementaddedevent extends elementevent
private list values   new arraylist
public multielementaddedevent  object source  int index  list values
super  source  oldvalue  newvalue  elementevent multi_add  index
if  values    null
this values addall  values
public list getvalues
return collections unmodifiablelist  values
public static class multielementremovedevent extends elementevent
private list values   new arraylist
public multielementremovedevent  object source  list values
super  source  oldvalue  newvalue  elementevent multi_add  0
if  values    null
this values addall  values
public list getvalues
return collections unmodifiablelist  values