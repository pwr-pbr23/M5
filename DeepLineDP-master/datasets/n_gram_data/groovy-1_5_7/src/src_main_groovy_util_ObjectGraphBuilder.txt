/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang closure
import groovy lang metaproperty
import java util collection
import java util hashmap
import java util map
import org codehaus groovy runtime invokerhelper
/**
* a builder for creating object graphs.<br>
* each node defines the class to be created and the property on its parent (if
* any) at the same time.
*
* @author scott vlaminck (http://refactr.com)
* @author andres almiray <aalmiray@users.sourceforge.com>
*/
public class objectgraphbuilder extends factorybuildersupport
public static final string node_class
public static final string node_name
public static final string object_id
private childpropertysetter childpropertysetter
private classnameresolver classnameresolver
private identifierresolver identifierresolver
private newinstanceresolver newinstanceresolver
private objectfactory objectfactory   new objectfactory
private objectreffactory objectreffactory   new objectreffactory
private referenceresolver referenceresolver
private relationnameresolver relationnameresolver
private map   <string class>   resolvedclasses   new hashmap   <string class>
private classloader classloader
public objectgraphbuilder
classnameresolver   new defaultclassnameresolver
newinstanceresolver   new defaultnewinstanceresolver
relationnameresolver   new defaultrelationnameresolver
childpropertysetter   new defaultchildpropertysetter
identifierresolver   new defaultidentifierresolver
referenceresolver   new defaultreferenceresolver
/**
* returns the current childpropertysetter.
*/
public childpropertysetter getchildpropertysetter
return childpropertysetter
/**
* returns the classloader used to load a node's class.
*/
public classloader getclassloader
return classloader
/**
* returns the current classnameresolver.
*/
public classnameresolver getclassnameresolver
return classnameresolver
/**
* returns the current newinstanceresolver.
*/
public newinstanceresolver getnewinstanceresolver
return newinstanceresolver
/**
* returns the current relationnameresolver.
*/
public relationnameresolver getrelationnameresolver
return relationnameresolver
/**
* sets the current childpropertysetter.<br>
* it will assign defaultchildpropertysetter if null.<br>
* it accepts a childpropertysetter instance or a closure.
*/
public void setchildpropertysetter  final object childpropertysetter
if  childpropertysetter instanceof childpropertysetter
this childpropertysetter    childpropertysetter  childpropertysetter
else if  childpropertysetter instanceof closure
this childpropertysetter   new childpropertysetter
public void setchild  object parent  object child  string parentname
string propertyname
closure  childpropertysetter  call  new object   parent  child  parentname
propertyname
else
this childpropertysetter   new defaultchildpropertysetter
/**
* sets the classloader used to load a node's class.
*/
public void setclassloader  classloader classloader
this classloader   classloader
/**
* sets the current classnameresolver.<br>
* it will assign defaultclassnameresolver if null.<br>
* it accepts a classnameresolver instance, a string or a closure.
*/
public void setclassnameresolver  final object classnameresolver
if  classnameresolver instanceof classnameresolver
this classnameresolver    classnameresolver  classnameresolver
else if  classnameresolver instanceof string
this classnameresolver   new classnameresolver
public string resolveclassname  string classname
return classnameresolver       classname substring  0  1
touppercase     classname substring  1
else if  classnameresolver instanceof closure
this classnameresolver   new classnameresolver
public string resolveclassname  string classname
return  string    closure  classnameresolver  call  new object   classname
else
this classnameresolver   new defaultclassnameresolver
/**
* sets the current identifierresolver.<br>
* it will assign defaultidentifierresolver if null.<br>
* it accepts a identifierresolver instance or a closure.
*/
public void setidentifierresolver  final object identifierresolver
if  identifierresolver instanceof identifierresolver
this identifierresolver    identifierresolver  identifierresolver
else if  identifierresolver instanceof closure
this identifierresolver   new identifierresolver
public string getidentifierfor  string nodename
return  string     closure  identifierresolver  call  new object   nodename
else
this identifierresolver   new defaultidentifierresolver
/**
* sets the current newinstanceresolver.<br>
* it will assign defaultnewinstanceresolver if null.<br>
* it accepts a newinstanceresolver instance or a closure.
*/
public void setnewinstanceresolver  final object newinstanceresolver
if  newinstanceresolver instanceof newinstanceresolver
this newinstanceresolver    newinstanceresolver  newinstanceresolver
else if  newinstanceresolver instanceof closure
this newinstanceresolver   new newinstanceresolver
public object newinstance  class klass  map attributes
throws instantiationexception  illegalaccessexception
return   closure  newinstanceresolver  call  new object   klass  attributes
else
this newinstanceresolver   new defaultnewinstanceresolver
/**
* sets the current referenceresolver.<br>
* it will assign defaultreferenceresolver if null.<br>
* it accepts a referenceresolver instance or a closure.
*/
public void setreferenceresolver  final object referenceresolver
if  referenceresolver instanceof referenceresolver
this referenceresolver    referenceresolver  referenceresolver
else if  referenceresolver instanceof closure
this referenceresolver   new referenceresolver
public string getreferencefor  string nodename
return  string     closure  referenceresolver  call  new object   nodename
else
this referenceresolver   new defaultreferenceresolver
/**
* sets the current relationnameresolver.<br>
* it will assign defaultrelationnameresolver if null.
*/
public void setrelationnameresolver  relationnameresolver relationnameresolver
this relationnameresolver   relationnameresolver    null ? relationnameresolver
new defaultrelationnameresolver
protected void postinstantiate  object name  map attributes  object node
super postinstantiate  name  attributes  node
map context   getcontext
string objectid    string  context get  object_id
if  objectid    null    node    null
setvariable  objectid  node
protected void preinstantiate  object name  map attributes  object value
super preinstantiate  name  attributes  value
map context   getcontext
context put  object_id
attributes remove  identifierresolver getidentifierfor   string  name
protected factory resolvefactory  object name  map attributes  object value
// let custom factories to be resolved first
factory factory   super resolvefactory  name  attributes  value
if  factory    null
return factory
if  attributes get  referenceresolver getreferencefor   string  name        null
return objectreffactory
return objectfactory
/**
* strategy for setting a child node on its parent.<br>
* useful for handling lists/arrays vs normal properties.
*/
public interface childpropertysetter
/**
* @param parent the parent's node value
* @param child the child's node value
* @param parentname the name of the parent node
* @param propertyname the resolved relation name of the child
*/
void setchild  object parent  object child  string parentname  string propertyname
/**
* strategy for resolving a classname.
*/
public interface classnameresolver
/**
* @param classname the node name as written on the building code
*/
string resolveclassname  string classname
/**
* default impl that calls parent.propertyname = child<br>
* if parent.propertyname is a collection it will try to add child to the
* collection.
*/
public static class defaultchildpropertysetter implements childpropertysetter
public void setchild  object parent  object child  string parentname  string propertyname
object property   invokerhelper getproperty  parent  propertyname
if  property    null    collection class isassignablefrom  property getclass
collection  property  add  child
else
invokerhelper setproperty  parent  propertyname  child
/**
* default impl that capitalizes the classname.
*/
public static class defaultclassnameresolver implements classnameresolver
public string resolveclassname  string classname
if  classname length      1
return classname touppercase
return classname substring  0  1
touppercase     classname substring  1
/**
* default impl, always returns 'id'
*/
public static class defaultidentifierresolver implements identifierresolver
public string getidentifierfor  string nodename
return
/**
* default impl that calls class.newinstance()
*/
public static class defaultnewinstanceresolver implements newinstanceresolver
public object newinstance  class klass  map attributes   throws instantiationexception
illegalaccessexception
return klass newinstance
/**
* default impl, always returns 'refid'
*/
public static class defaultreferenceresolver implements referenceresolver
public string getreferencefor  string nodename
return
/**
* default impl that returns parentname &amp; childname accordingly.
*/
public static class defaultrelationnameresolver implements relationnameresolver
/**
* follow the most conventional plural in english, add 's' to childname.<br>
* if the property does not exist then it will return childname
* unchanged.
*/
public string resolvechildrelationname  string parentname  object parent  string childname
object child
metaproperty metaproperty   invokerhelper getmetaclass  parent
hasproperty  parent  childname
if  metaproperty    null
return childname
return childname
/**
* follow the most conventional pattern, returns the parentname
* unchanged.
*/
public string resolveparentrelationname  string parentname  object parent
string childname  object child
return parentname
/**
* strategy for picking the correct synthetic identifier.
*/
public interface identifierresolver
/**
* returns the name of the property that will identify the node.<br>
*
* @param nodename the name of the node
*/
string getidentifierfor  string nodename
/**
* strategy for creating new instances of a class.<br>
* useful for plug-in calls to non-default constructors.
*/
public interface newinstanceresolver
/**
* create a new instance of class klass.
*
* @param klass the resolved class name
* @param attributes the attribute map available for the node
*/
object newinstance  class klass  map attributes   throws instantiationexception
illegalaccessexception
/**
* strategy for picking the correct synthetic reference identifier.
*/
public interface referenceresolver
/**
* returns the name of the property that references another node.<br>
*
* @param nodename the name of the node
*/
string getreferencefor  string nodename
/**
* strategy for resolving a relationship property name.
*/
public interface relationnameresolver
/**
* returns the mapping name of child -&gt; parent
*
* @param parentname the name of the parent node
* @param parent the parent node
* @param childname the name of the child node
* @param child the child node
*/
string resolvechildrelationname  string parentname  object parent  string childname
object child
/**
* returns the mapping name of parent -&gt; child
*
* @param parentname the name of the parent node
* @param parent the parent node
* @param childname the name of the child node
* @param child the child node
*/
string resolveparentrelationname  string parentname  object parent  string childname
object child
private static class objectfactory extends abstractfactory
public object newinstance  factorybuildersupport builder  object name  object value
map properties   throws instantiationexception  illegalaccessexception
objectgraphbuilder ogbuilder    objectgraphbuilder  builder
string classname   ogbuilder classnameresolver resolveclassname   string  name
class klass    class  ogbuilder resolvedclasses get  classname
if  klass    null
klass   loadclass  ogbuilder classloader  classname
if  klass    null
klass   loadclass  ogbuilder getclass   getclassloader    classname
if  klass    null
try
klass   class forname  classname
catch  classnotfoundexception e
// ignore
if  klass    null
klass   loadclass  thread currentthread   getcontextclassloader    classname
if  klass    null
throw new runtimeexception new classnotfoundexception classname
ogbuilder resolvedclasses put  classname  klass
map context   ogbuilder getcontext
context put  objectgraphbuilder node_name  name
context put  objectgraphbuilder node_class  klass
return ogbuilder newinstanceresolver newinstance  klass  properties
public void setchild  factorybuildersupport builder  object parent  object child
objectgraphbuilder ogbuilder    objectgraphbuilder  builder
if  parent    null
map context   ogbuilder getcontext
map parentcontext   ogbuilder getparentcontext
string parentname   null
string childname    string  context get  node_name
class parentclass   null
class childclass    class  context get  node_class
if  parentcontext    null
parentname    string  parentcontext get  node_name
parentclass    class  parentcontext get  node_class
string propertyname   ogbuilder relationnameresolver resolveparentrelationname
parentname  parent  childname  child
metaproperty metaproperty   invokerhelper getmetaclass  child
hasproperty  child  propertyname
if  metaproperty    null
metaproperty setproperty  child  parent
public void setparent  factorybuildersupport builder  object parent  object child
objectgraphbuilder ogbuilder    objectgraphbuilder  builder
if  parent    null
map context   ogbuilder getcontext
map parentcontext   ogbuilder getparentcontext
string parentname   null
string childname    string  context get  node_name
class parentclass   null
class childclass    class  context get  node_class
if  parentcontext    null
parentname    string  parentcontext get  node_name
parentclass    class  parentcontext get  node_class
ogbuilder childpropertysetter setchild  parent  child  parentname
ogbuilder relationnameresolver resolvechildrelationname  parentname
parent  childname  child
private class loadclass  classloader classloader  string classname
if  classloader    null    classname    null
return null
try
return classloader loadclass  classname
catch  classnotfoundexception e
return null
private static class objectreffactory extends objectfactory
public boolean isleaf
return true
public object newinstance  factorybuildersupport builder  object name  object value
map properties   throws instantiationexception  illegalaccessexception
objectgraphbuilder ogbuilder    objectgraphbuilder  builder
string refproperty   ogbuilder referenceresolver getreferencefor   string  name
string refid    string  properties remove  refproperty
object object   ogbuilder getproperty  refid
if  object    null
throw new illegalargumentexception
ogbuilder identifierresolver getidentifierfor   string  name
refid
if   properties isempty
throw new illegalargumentexception
map context   ogbuilder getcontext
context put  objectgraphbuilder node_name  name
context put  objectgraphbuilder node_class  object getclass
return object