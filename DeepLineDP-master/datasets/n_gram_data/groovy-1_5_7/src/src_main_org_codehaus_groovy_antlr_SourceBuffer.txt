/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr
import java util list
import java util arraylist
/**
* a simple buffer that provides line/col access to chunks of source code
* held within itself.
*
* @author <a href="mailto:groovy@ross-rayner.com">jeremy rayner</a>
* @version $revision$
*/
public class sourcebuffer
private final list lines
private stringbuffer current
public sourcebuffer
lines   new arraylist
//lines.add(new stringbuffer()); // dummy row for position [0] in the list
current   new stringbuffer
lines add current
/**
* obtains a snippet of the source code within the bounds specified
* @param start (inclusive line/ inclusive column)
* @param end (inclusive line / exclusive column)
* @return specified snippet of source code as a string, or null if no source available
*/
public string getsnippet linecolumn start  linecolumn end
// preconditions
if  start    null    end    null    return null       no text to return
if  start equals end     return null       no text to return
if  lines size      1    current length      0    return null       buffer hasn't been filled yet
// working variables
int startline   start getline
int startcolumn   start getcolumn
int endline   end getline
int endcolumn   end getcolumn
// reset any out of bounds requests
if  startline < 1    startline   1
if  endline < 1    endline   1
if  startcolumn < 1    startcolumn   1
if  endcolumn < 1    endcolumn   1
if  startline > lines size      startline   lines size
if  endline > lines size      endline   lines size
// obtain the snippet from the buffer within specified bounds
stringbuffer snippet   new stringbuffer
for  int i   startline   1  i < endline i
string line     stringbuffer lines get i   tostring
if  startline    endline
// reset any out of bounds requests (again)
if  startcolumn > line length      startcolumn   line length
if  startcolumn < 1    startcolumn   1
if  endcolumn > line length      endcolumn   line length     1
if  endcolumn < 1    endcolumn   1
line   line substring startcolumn   1  endcolumn   1
else
if  i    startline   1
if  startcolumn   1 < line length
line   line substring startcolumn   1
if  i    endline   1
if  endcolumn   1 < line length
line   line substring 0 endcolumn   1
snippet append line
return snippet tostring
/**
* writes the specified character into the buffer
* @param c
*/
public void write int c
if  c     1
current append  char c
if  c
current   new stringbuffer
lines add current