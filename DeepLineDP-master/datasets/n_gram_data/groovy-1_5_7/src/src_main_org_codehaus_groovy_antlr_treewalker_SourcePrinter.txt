/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr treewalker
import java io printstream
import java util stack
import org codehaus groovy antlr groovysourceast
import org codehaus groovy antlr parser groovytokentypes
/**
* an antlr ast visitor that prints groovy source code for each visited node
* to the supplied printstream.
*
* @author <a href="mailto:groovy@ross-rayner.com">jeremy rayner</a>
* @version $revision$
*/
public class sourceprinter extends visitoradapter
private final string tokennames
private int tablevel
private int lastlineprinted
private final boolean newlines
protected final printstream out
private string classname
private final stack stack
private int stringconstructorcounter
/**
* a visitor that prints groovy source code for each node visited.
* @param out where to print the source code to
* @param tokennames an array of token names from antlr
*/
public sourceprinter printstream out string tokennames
this out tokennames true
/**
* a visitor that prints groovy source code for each node visited.
* @param out where to print the source code to
* @param tokennames an array of token names from antlr
* @param newlines output newline character
*/
public sourceprinter printstream out string tokennames  boolean newlines
this tokennames   tokennames
tablevel   0
lastlineprinted   0
this out   out
this newlines   newlines
this stack   new stack
public void visitabstract groovysourceast t  int visit
print t visit   null null
public void visitannotation groovysourceast t  int visit
if  visit    opening_visit
print t visit
if  visit    second_visit
print t visit
if  visit    subsequent_visit
print t visit
if  visit    closing_visit
if  t getnumberofchildren   > 1
print t visit
else
print(t,visit," ");
public void visitannotations groovysourceast t  int visit
// do nothing
public void visitannotationdef groovysourceast t int visit
print t visit   null null
public void visitannotationfielddef groovysourceast t  int visit
print t visit     null
public void visitannotationmembervaluepair groovysourceast t  int visit
print t visit   null null
public void visitarraydeclarator groovysourceast t  int visit
//<array_declarator>int</array_declarator> primes = new int(<array_declarator>5</array_declarator>)
if  getparentnode   gettype      groovytokentypes type
getparentnode   gettype      groovytokentypes typecast       ugly hack
// type defintion, i.e.   int[] x;
print t visit null null
else
// usually in new, i.e.   def y = new int[5];
print t visit   null
public void visitassign groovysourceast t int visit
print t visit   null null
// visitat() ...
//   token type 'at' should never be visited, as annotation definitions and usage, and
//   direct field access should have all moved this token out of the way. no test needed.
//   one of the band tokens is actually replaced by type_upper_bounds (e.g. class foo<t extends c & i> {t t} )
public void visitband groovysourceast t  int visit
print t visit   null null
public void visitbandassign groovysourceast t int visit
print t visit   null null
// visitbigsuffix() ...
//   token type big_suffix never created/visited, num_big_int, num_big_decimal instead...
// visitblock() ...
//   token type block never created/visited, see closable_block etc...
public void visitbnot groovysourceast t  int visit
print t visit   null null
// note: old closure syntax using bor is deprecated, and also never creates/visits a bor node
public void visitbor groovysourceast t  int visit
print t visit   null null
public void visitborassign groovysourceast t int visit
print t visit   null null
public void visitbsr groovysourceast t  int visit
print t visit   null null
public void visitbsrassign groovysourceast t int visit
print t visit   null null
public void visitbxor groovysourceast t  int visit
print t visit   null null
public void visitbxorassign groovysourceast t int visit
print t visit   null null
public void visitcasegroup groovysourceast t  int visit
if  visit    opening_visit
tablevel
if  visit    closing_visit
tablevel
public void visitclassdef groovysourceast t int visit
print t visit   null null
if  visit    opening_visit
// store name of class away for use in constructor ident
classname   t childoftype groovytokentypes ident  gettext
public void visitclosedblock groovysourceast t  int visit
printupdatingtablevel t visit
public void visitclosurelist groovysourceast t  int visit
print t visit
// visitclosureop ...
//   token type closable_block_op never created/visited, see closable_block...
// visitcolon ...
//   token type colon never created/visited, see labeled_stat, for_in_iterable,
//   assert, case, question, map_constructor, labeled_arg, spread_map_arg
// visitcomma ...
//   token type comma never created/visited,
//   see type_arguments, annotation, many others ...
public void visitcompareto groovysourceast t int visit
print t visit   null null
public void visitctorcall groovysourceast t int visit
printupdatingtablevel t visit
public void visitctorident groovysourceast t  int visit
// use name of class for constructor from the class definition
print t visit classname null null
public void visitdec groovysourceast t  int visit
print t visit   null null
// visitdigit ...
//    never created/visited
public void visitdiv groovysourceast t  int visit
print t visit   null null
public void visitdivassign groovysourceast t int visit
print t visit   null null
// visitdollar ...
//   token type dollar never created/visited, see scope_escape instead
public void visitdot groovysourceast t int visit
print t visit   null null
public void visitdynamicmember groovysourceast t  int visit
if  t childoftype groovytokentypes string_constructor     null
printupdatingtablevel t visit   null
public void visitelist groovysourceast t int visit
if  getparentnode   gettype      groovytokentypes enum_constant_def
print t visit
else
print t visit null   null
// visitemptystat ...
//   token type empty_stat obsolete and should be removed, never visited/created
public void visitenumconstantdef groovysourceast t int visit
groovysourceast sibling    groovysourceast t getnextsibling
if  sibling    null    sibling gettype      groovytokentypes enum_constant_def
print t visit null null
public void visitenumdef groovysourceast t int visit
print t visit   null null
// visiteof ...
//   token type eof never visited/created
public void visitequal groovysourceast t int visit
print t visit   null null
// visitexponent ...
//   token type exponent only used by lexer, never visited/created
public void visitexpr groovysourceast t int visit
// do nothing
public void visitextendsclause groovysourceast t int visit
if  visit    opening_visit
if  t getnumberofchildren      0
print t visit
public void visitfinal groovysourceast t  int visit
print t visit   null null
// visitfloatsuffix ... never visited/created see num_double or num_float instead
public void visitforcondition groovysourceast t  int visit
print t visit   null null
// visitforeachclause ...
//   for_each_clause obsolete and should be removed, never visited/created
public void visitforinit groovysourceast t  int visit
print t visit   null null
public void visitforiniterable groovysourceast t  int visit
printupdatingtablevel t visit
public void visitforiterator groovysourceast t  int visit
print t visit   null
public void visitge groovysourceast t  int visit
print t visit   null null
public void visitgt groovysourceast t  int visit
print t visit   null null
public void visitident groovysourceast t int visit
print t visit t gettext   null null
public void visitimplementsclause groovysourceast t int visit
if  visit    opening_visit
if  t getnumberofchildren      0
print t visit
if  visit    closing_visit
//space between classdef and objblock
print(t,visit," ");
public void visitimplicitparameters groovysourceast t  int visit
// do nothing
public void visitimport groovysourceast t int visit
print t visit   null null
public void visitinc groovysourceast t  int visit
print t visit   null null
public void visitindexop groovysourceast t  int visit
printupdatingtablevel t visit   null
public void visitinterfacedef groovysourceast t int visit
print t visit   null null
public void visitinstanceinit groovysourceast t  int visit
// do nothing
public void visitlabeledarg groovysourceast t  int visit
print t visit   null null
public void visitlabeledstat groovysourceast t  int visit
print t visit   null null
public void visitland groovysourceast t  int visit
print t visit   null null
// visit lbrack()
//   token type lbrack only used inside parser, never visited/created
// visit lcurly()
//   token type lcurly only used inside parser, never visited/created
public void visitle groovysourceast t  int visit
print t visit   null null
// visitletter ...
//   token type letter only used by lexer, never visited/created
public void visitlistconstructor groovysourceast t  int visit
printupdatingtablevel t visit   null
public void visitliteralas groovysourceast t int visit
print t visit   null null
public void visitliteralassert groovysourceast t int visit
if  t getnumberofchildren   > 1
print t visit   null
else
print t visit   null null
public void visitliteralboolean groovysourceast t  int visit
print t visit   null null
public void visitliteralbreak groovysourceast t  int visit
print t visit   null null
public void visitliteralbyte groovysourceast t  int visit
print t visit   null null
public void visitliteralcase groovysourceast t  int visit
print t visit   null
public void visitliteralcatch groovysourceast t int visit
printupdatingtablevel t visit   null
public void visitliteralchar groovysourceast t  int visit
print t visit   null null
// visitliteralclass ...
//   token type "class" only used by parser, never visited/created directly
public void visitliteralcontinue groovysourceast t  int visit
print t visit   null null
// visitliteraldef ...
//   token type "def" only used by parser, never visited/created directly
public void visitliteraldefault groovysourceast t int visit
print t visit   null
public void visitliteraldouble groovysourceast t  int visit
print t visit   null null
// visitliteralelse ...
//   token type "else" only used by parser, never visited/created directly
// visitliteralenum ...
//   token type "enum" only used by parser, never visited/created directly
// visitliteralextends
//   token type "extends" only used by parser, never visited/created directly
public void visitliteralfalse groovysourceast t int visit
print t visit   null null
public void visitliteralfinally groovysourceast t int visit
print t visit   null null
public void visitliteralfloat groovysourceast t int visit
print t visit   null null
public void visitliteralfor groovysourceast t int visit
print t visit   null null
public void visitliteralif groovysourceast t int visit
// slightly strange as subsequent visit is done after closing visit
printupdatingtablevel t visit
// visitliteralimplements
//   token type "implements" only used by parser, never visited/created directly
// visitliteralimport
//   token type "import" only used by parser, never visited/created directly
public void visitliteralin groovysourceast t  int visit
print t visit   null null
public void visitliteralinstanceof groovysourceast t  int visit
print t visit   null null
public void visitliteralint groovysourceast t int visit
print t visit   null null
// visitliteralinterface
//   token type "interface" only used by parser, never visited/created directly
public void visitliterallong groovysourceast t int visit
print t visit   null null
public void visitliteralnative groovysourceast t int visit
print t visit   null null
public void visitliteralnew groovysourceast t int visit
if  t childoftype groovytokentypes array_declarator     null
// only print parenthesis if is not of form def x = new int[5]
print t visit
else
print t visit   null null
public void visitliteralnull groovysourceast t  int visit
print t visit   null null
// visitliteralpackage
//   token type "package" only used by parser, never visited/created directly
public void visitliteralprivate groovysourceast t int visit
print t visit   null null
public void visitliteralprotected groovysourceast t int visit
print t visit   null null
public void visitliteralpublic groovysourceast t int visit
print t visit   null null
public void visitliteralreturn groovysourceast t  int visit
print t visit   null null
public void visitliteralshort groovysourceast t int visit
print t visit   null null
public void visitliteralstatic groovysourceast t  int visit
print t visit   null null
public void visitliteralsuper groovysourceast t  int visit
// only visited when calling super() without parentheses, i.e. "super 99" is equivalent to "super(99)"
print t visit   null null
public void visitliteralswitch groovysourceast t  int visit
if  visit    opening_visit
print t visit
tablevel
if  visit    subsequent_visit
print t visit
if  visit    closing_visit
tablevel
print t visit
public void visitliteralsynchronized groovysourceast t int visit
if  t getnumberofchildren   > 0
print t visit   null
else
print t visit   null null
public void visitliteralthis groovysourceast t  int visit
print t visit   null null
public void visitliteralthreadsafe groovysourceast t int visit
print t visit   null null
public void visitliteralthrow groovysourceast t  int visit
print t visit   null null
public void visitliteralthrows groovysourceast t  int visit
print t visit   null null
public void visitliteraltransient groovysourceast t int visit
print t visit   null null
public void visitliteraltrue groovysourceast t int visit
print t visit   null null
public void visitliteraltry groovysourceast t int visit
print t visit   null null
public void visitliteralvoid groovysourceast t int visit
print t visit   null null
public void visitliteralvolatile groovysourceast t int visit
print t visit   null null
public void visitliteralwhile groovysourceast t int visit
printupdatingtablevel t visit   null
//deprecated
//  public void visitliteralwith(groovysourceast t,int visit) {
//        printupdatingtablevel(t,visit,"with (",null,") ");
//    }
public void visitlnot groovysourceast t  int visit
print t visit   null null
// note: old closure syntax using lor is deprecated, and also never creates/visits a lor node
public void visitlor groovysourceast t  int visit
print t visit   null null
public void visitlt groovysourceast t  int visit
print t visit   null null
public void visitmapconstructor groovysourceast t  int visit
if  t getnumberofchildren      0
print t visit   null null
else
printupdatingtablevel t visit   null
public void visitmemberpointer groovysourceast t  int visit
print t visit   null null
public void visitmethodcall groovysourceast t int visit
if    equals t gettext
printupdatingtablevel t visit     null
else
printupdatingtablevel t visit
public void visitmethoddef groovysourceast t int visit
//do nothing
public void visitminus groovysourceast t int visit
print t visit   null null
public void visitminusassign groovysourceast t  int visit
print t visit   null null
// visitmlcomment
//   multi-line comments are not created on the ast currently.
public void visitmod groovysourceast t  int visit
print t visit   null null
public void visitmodifiers groovysourceast t int visit
//do nothing
public void visitmodassign groovysourceast t  int visit
print t visit   null null
// visitnls
//   new lines are used by parser, but are not created on the ast,
//   they can be implied by the source code line/column information
// visitnulltreelookahead
//   not used explicitly by parser.
public void visitnotequal groovysourceast t  int visit
print t visit   null null
public void visitnumbigdecimal groovysourceast t int visit
print t visit t gettext   null null
public void visitnumbigint groovysourceast t int visit
print t visit t gettext   null null
public void visitnumdouble groovysourceast t int visit
print t visit t gettext   null null
public void visitnumint groovysourceast t int visit
print t visit t gettext   null null
public void visitnumfloat groovysourceast t int visit
print t visit t gettext   null null
public void visitnumlong groovysourceast t int visit
print t visit t gettext   null null
public void visitobjblock groovysourceast t int visit
if  visit    opening_visit
tablevel
print t visit
else
tablevel
print t visit
// visitonenl
//   new lines are used by parser, but are not created on the ast,
//   they can be implied by the source code line/column information
public void visitoptionaldot groovysourceast t int visit
print t visit   null null
public void visitpackagedef groovysourceast t  int visit
print t visit   null null
public void visitparameterdef groovysourceast t int visit
//do nothing
public void visitparameters groovysourceast t int visit
if  getparentnode   gettype      groovytokentypes closable_block
printupdatingtablevel t visit null
else
printupdatingtablevel t visit
public void visitplus groovysourceast t  int visit
print t visit   null null
public void visitplusassign groovysourceast t  int visit
print t visit   null null
public void visitpostdec groovysourceast t  int visit
print t visit null null
public void visitpostinc groovysourceast t  int visit
print t visit null null
public void visitquestion groovysourceast t  int visit
// ternary operator
print t visit     null
public void visitrangeexclusive groovysourceast t  int visit
print t visit   null null
public void visitrangeinclusive groovysourceast t  int visit
print t visit   null null
// visit rbrack()
//   token type rbrack only used inside parser, never visited/created
// visit rcurly()
//   token type rcurly only used inside parser, never visited/created
// visit regexpctorend
// visit regexpliteral
// visit regexpsymbol
//    token types regexp_ctor_end, regexp_literal, regexp_symbol only used inside lexer
public void visitregexfind groovysourceast t  int visit
print t visit   null null
public void visitregexmatch groovysourceast t  int visit
print t visit   null null
// visit rparen()
//   token type rparen only used inside parser, never visited/created
public void visitselectslot groovysourceast t  int visit
print t visit   null null
// visit semi()
//  semi only used inside parser, never visited/created (see visitforcondition(), visitforiterator())
// visit shcomment()
//  never visited/created by parser
public void visitsl groovysourceast t  int visit
print t visit   null null
public void visitslassign groovysourceast t  int visit
print t visit   null null
public void visitslist groovysourceast t int visit
if  visit    opening_visit
tablevel
print t visit
else
tablevel
print t visit
// visit slcomment()
//   never visited/created by parser
public void visitspreadarg groovysourceast t int visit
print t visit   null null
public void visitspreaddot groovysourceast t int visit
print t visit   null null
public void visitspreadmaparg groovysourceast t int visit
print t visit   null null
public void visitsr groovysourceast t  int visit
print t visit   null null
public void visitsrassign groovysourceast t  int visit
print t visit   null null
public void visitstar groovysourceast t int visit
print t visit   null null
public void visitstarassign groovysourceast t  int visit
print t visit   null null
public void visitstarstar groovysourceast t int visit
print t visit   null null
public void visitstarstarassign groovysourceast t  int visit
print t visit   null null
public void visitstaticinit groovysourceast t  int visit
print t visit   null null
public void visitstaticimport groovysourceast t int visit
print t visit   null null
public void visitstrictfp groovysourceast t int visit
print t visit   null null
// visitstringch
//   string characters only used by lexer, never visited/created directly
public void visitstringconstructor groovysourceast t int visit
if  visit    opening_visit
stringconstructorcounter   0
print t visit  "
if  visit    subsequent_visit
// every other subsequent visit use an escaping $
if  stringconstructorcounter % 2    0
print t visit
stringconstructorcounter
if  visit    closing_visit
print t visit  "
public void visitstringliteral groovysourceast t int visit
if  visit    opening_visit
string thestring   escape t gettext
if  getparentnode   gettype      groovytokentypes labeled_arg
getparentnode   gettype      groovytokentypes string_constructor
thestring
print t visit thestring
private string escape string literal
literal   literal replaceall          can't seem to do  n in one go with java regex
literal   literal replaceall
return literal
public void visitsuperctorcall groovysourceast t int visit
printupdatingtablevel t visit
// visit tripledot, not used in the ast
public void visittype groovysourceast t int visit
groovysourceast parent   getparentnode
groovysourceast modifiers   parent childoftype groovytokentypes modifiers
// no need to print 'def' if we already have some modifiers
if  modifiers    null    modifiers getnumberofchildren      0
if  visit    opening_visit
if  t getnumberofchildren      0
parent gettype      groovytokentypes parameter_def       no need for   if in a parameter list
print t visit
if  visit    closing_visit
if    parent gettype      groovytokentypes variable_def
parent gettype      groovytokentypes method_def
parent gettype      groovytokentypes annotation_field_def
parent gettype      groovytokentypes parameter_def    t getnumberofchildren    0
print(t,visit," ");
/*if (visit == closing_visit) {
print(t,visit," ");
}*/
else
if  visit    closing_visit
if  t getnumberofchildren      0
print(t,visit," ");
public void visittypeargument groovysourceast t  int visit
// print nothing
public void visittypearguments groovysourceast t  int visit
print t visit
public void visittypecast groovysourceast t int visit
print t visit   null
public void visittypelowerbounds groovysourceast t int visit
print t visit     null
public void visittypeparameter groovysourceast t  int visit
// print nothing
public void visittypeparameters groovysourceast t  int visit
print t visit
public void visittypeupperbounds groovysourceast t int visit
print t visit     null
public void visitunaryminus groovysourceast t  int visit
print t visit   null null
public void visitunaryplus groovysourceast t  int visit
print t visit   null null
// visit unused "const", "do", "goto" - unsurprisingly these are unused by the ast.
public void visitvariabledef groovysourceast t int visit
// do nothing
// a.k.a. "variable arity parameter" in the jls
public void visitvariableparameterdef groovysourceast t int visit
print t visit null   null
// visit vocab - only used by lexer
public void visitwildcardtype groovysourceast t  int visit
print t visit   null null
// visit ws - only used by lexer
public void visitdefault groovysourceast t int visit
if  visit    opening_visit
print t visit     tokennames
//out.print("<" + t.gettype() + ">");
else
print t visit     tokennames
//out.print("</" + t.gettype() + ">");
protected void printupdatingtablevel groovysourceast t int visit string opening  string subsequent  string closing
if  visit    opening_visit    opening    null
print t visit opening
tablevel
if  visit    subsequent_visit    subsequent    null
print t visit subsequent
if  visit    closing_visit    closing    null
tablevel
print t visit closing
protected void print groovysourceast t int visit string opening  string subsequent  string closing
if  visit    opening_visit    opening    null
print t visit opening
if  visit    subsequent_visit    subsequent    null
print t visit subsequent
if  visit    closing_visit    closing    null
print t visit closing
protected void print groovysourceast t int visit string value
if visit    opening_visit
printnewlineandindent t  visit
if  visit    closing_visit
printnewlineandindent t  visit
out print value
protected void printnewlineandindent groovysourceast t  int visit
int currentline   t getline
if  lastlineprinted    0    lastlineprinted   currentline
if  lastlineprinted    currentline
if  newlines
if    visit    opening_visit    t gettype      groovytokentypes slist
for  int i lastlineprinted i<currentline i
out println
if  lastlineprinted > currentline
out println
lastlineprinted   currentline
if  visit    opening_visit     visit    closing_visit    lastlineprinted > currentline
for  int i 0 i<tablevel i
out print
lastlineprinted   math max currentline lastlineprinted
public void push groovysourceast t
stack push t
public groovysourceast pop
if   stack empty
return  groovysourceast  stack pop
return null
private groovysourceast getparentnode
object currentnode   stack pop
object parentnode   stack peek
stack push currentnode
return  groovysourceast  parentnode