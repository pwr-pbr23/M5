/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy reflection
import groovy lang groovyruntimeexception
import groovy lang metaproperty
import org codehaus groovy runtime typehandling defaulttypetransformation
import java lang reflect field
import java lang reflect modifier
import java security accesscontroller
import java security privilegedaction
public class cachedfield extends metaproperty
public final field field
cachedclass cachedclass
boolean alreadysetaccessible
public cachedfield cachedclass clazz  field field
super  field getname    field gettype
this field   field
cachedclass   clazz
alreadysetaccessible   modifier ispublic field getmodifiers       modifier ispublic field getdeclaringclass   getmodifiers
public boolean isstatic
return modifier isstatic getmodifiers
public int getmodifiers
return field getmodifiers
/**
* @return the property of the given object
* @throws exception if the property could not be evaluated
*/
public object getproperty final object object
if    alreadysetaccessible
accesscontroller doprivileged new privilegedaction
public object run
field setaccessible true
return null
alreadysetaccessible   true
try
return field get object
catch  illegalaccessexception e
throw new groovyruntimeexception     name      e
/**
* sets the property on the given object to the new value
*
* @param object on which to set the property
* @param newvalue the new value of the property
* @throws runtimeexception if the property could not be set
*/
public void setproperty final object object  object newvalue
final object goalvalue   defaulttypetransformation casttotype newvalue  field gettype
if    alreadysetaccessible
accesscontroller doprivileged new privilegedaction
public object run
field setaccessible true
return null
alreadysetaccessible   true
try
field set object  goalvalue
catch  illegalaccessexception ex
throw new groovyruntimeexception     name      ex