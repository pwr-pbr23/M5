/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy sql
import groovy lang closure
import groovy lang groovyobjectsupport
import groovy lang missingpropertyexception
import java sql resultset
import java sql sqlexception
import java sql resultsetmetadata
import java util iterator
import java util map
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime invokerinvocationexception
/**
* groovyresultsetextension implements additional logic for resultset. due to
* the version incompatibility between java6 and java5 this methods are moved
* here from the original groovyresultset class. the methods in this class are
* used by the proxy groovyresultsetproxy, which will try to invoke methods
* on this class before invokeing it on resultset.
* <p/>
* <p><b>this class is not intended to be used directly. should be used through
* groovyresultsetproxy only!</b></p>
*
* @author jochen theodorou
* @see groovyresultset
* @see groovyresultsetproxy
*/
public class groovyresultsetextension extends groovyobjectsupport
private boolean updated
private final resultset resultset
/**
* gets the current result set.
*
* @return the result set
* @throws sqlexception if the result set can not be returned
*/
protected resultset getresultset   throws sqlexception
return resultset
/**
* creats a groovyresultset implementation-
*
* @param set the result set
*/
public groovyresultsetextension resultset set
updated   false
resultset   set
public string tostring
try
stringbuffer sb   new stringbuffer
resultsetmetadata metadata   resultset getmetadata
int count   metadata getcolumncount
for  int i   1  i <  count  i
sb append metadata getcolumnname i
sb append
object object   resultset getobject i
if  object  null
sb append object tostring
else
sb append
if  i < count
sb append
sb append
return sb tostring
catch  sqlexception e
//            system.err.println("e.getmessage() = " + e.getmessage());
return super tostring
public object invokemethod string name  object args
try
return invokerhelper invokemethod getresultset    name  args
catch  sqlexception se
throw new invokerinvocationexception se
/**
* gets the value of the designated column in the current row
* of as an <code>object</code>.
*
* @param columnname the sql name of the column
* @return the returned column value
* @throws missingpropertyexception if an sqlexception happens while getting the object
* @see groovy.lang.groovyobject#getproperty(java.lang.string)
* @see resultset#getobject(java.lang.string)
*/
public object getproperty string columnname
try
return getresultset   getobject columnname
catch  sqlexception e
throw new missingpropertyexception columnname  groovyresultsetproxy class  e
/**
* updates the designated column with an <code>object</code> value.
*
* @param columnname the sql name of the column
* @param newvalue   the updated value
* @throws missingpropertyexception if an sqlexception happens while setting the new value
* @see groovy.lang.groovyobject#setproperty(java.lang.string, java.lang.object)
* @see resultset#updateobject(java.lang.string, java.lang.object)
*/
public void setproperty string columnname  object newvalue
try
getresultset   updateobject columnname  newvalue
updated   true
catch  sqlexception e
throw new missingpropertyexception columnname  groovyresultsetproxy class  e
/**
* supports integer based subscript operators for accessing at numbered columns
* starting at zero. negative indices are supported, they will count from the last column backwards.
*
* @param index is the number of the column to look at starting at 1
* @return the returned column value
* @throws java.sql.sqlexception if something goes wrong
* @see resultset#getobject(int)
*/
public object getat int index  throws sqlexception
index   normalizeindex index
return getresultset   getobject index
/**
* supports integer based subscript operators for updating the values of numbered columns
* starting at zero. negative indices are supported, they will count from the last column backwards.
*
* @param index    is the number of the column to look at starting at 1
* @param newvalue the updated value
* @throws java.sql.sqlexception if something goes wrong
* @see resultset#updateobject(java.lang.string, java.lang.object)
*/
public void putat int index  object newvalue  throws sqlexception
index   normalizeindex index
getresultset   updateobject index  newvalue
/**
* adds a new row to the result set
*
* @param values a map containing the mappings for column names and values
* @throws java.sql.sqlexception if something goes wrong
* @see resultset#insertrow()
* @see resultset#updateobject(java.lang.string, java.lang.object)
* @see resultset#movetoinsertrow()
*/
public void add map values  throws sqlexception
getresultset   movetoinsertrow
for  iterator iter   values entryset   iterator    iter hasnext
map entry entry    map entry  iter next
getresultset   updateobject entry getkey   tostring    entry getvalue
getresultset   insertrow
/**
* takes a zero based index and convert it into an sql based 1 based index.
* a negative index will count backwards from the last column.
*
* @param index the raw requested index (may be negative)
* @return a jdbc index
* @throws sqlexception if some exception occurs finding out the column count
*/
protected int normalizeindex int index  throws sqlexception
if  index < 0
int columncount   getresultset   getmetadata   getcolumncount
do
index    columncount
while  index < 0
return index   1
/**
* call the closure once for each row in the result set.
*
* @param closure the closure to perform on each row
* @throws sqlexception if something goes wrong
*/
public void eachrow closure closure  throws sqlexception
while  next
closure call this
// implementation of java.sql.getresultset()
// ------------------------------------------------------------
/**
* moves the cursor down one row from its current position.
* a <code>getresultset()</code> cursor is initially positioned
* before the first row; the first call to the method
* <code>next</code> makes the first row the current row; the
* second call makes the second row the current row, and so on.
* <p/>
* <p>if an input stream is open for the current row, a call
* to the method <code>next</code> will
* implicitly close it. a <code>getresultset()</code> object's
* warning chain is cleared when a new row is read.
*
* @return <code>true</code> if the new current row is valid;
*         <code>false</code> if there are no more rows
* @throws sqlexception if a database access error occurs
*/
public boolean next   throws sqlexception
if  updated
getresultset   updaterow
updated   false
return getresultset   next
/**
* moves the cursor to the previous row in this
* <code>getresultset()</code> object.
*
* @return <code>true</code> if the cursor is on a valid row;
*         <code>false</code> if it is off the result set
* @throws sqlexception if a database access error
*                      occurs or the result set type is <code>type_forward_only</code>
* @since 1.2
*/
public boolean previous   throws sqlexception
if  updated
getresultset   updaterow
updated   false
return getresultset   previous