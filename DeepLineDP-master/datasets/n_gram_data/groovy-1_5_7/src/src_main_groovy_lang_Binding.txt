/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import java util hashmap
import java util map
/**
* represents the variable bindings of a script which can be altered
* from outside the script object or created outside of a script and passed
* into it.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class binding extends groovyobjectsupport
private map variables
public binding
public binding map variables
this variables   variables
/**
* a helper constructor used in main(string[]) method calls
*
* @param args are the command line arguments from a main()
*/
public binding string args
this
setvariable    args
/**
* @param name the name of the variable to lookup
* @return the variable value
*/
public object getvariable string name
if  variables    null
throw new missingpropertyexception name  binding class
object result   variables get name
if  result    null     variables containskey name
throw new missingpropertyexception name  binding class
return result
/**
* sets the value of the given variable
* @param name the name of the variable to set
* @param value the new value for the given variable
*/
public void setvariable string name  object value
if  variables    null
variables   new hashmap
variables put name  value
public map getvariables
if  variables    null
variables   new hashmap
return variables
/**
* overloaded to make variables appear as bean properties or via the subscript operator
*/
public object getproperty string property
/** @todo we should check if we have the property with the metaclass instead of try/catch  */
try
return super getproperty property
catch  missingpropertyexception e
return getvariable property
/**
* overloaded to make variables appear as bean properties or via the subscript operator
*/
public void setproperty string property  object newvalue
/** @todo we should check if we have the property with the metaclass instead of try/catch  */
try
super setproperty property  newvalue
catch  missingpropertyexception e
setvariable property  newvalue