/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy reflection
import java util nosuchelementexception
public class complexkeyhashmap
public static class entry
public int hash
public entry next
public object value
public object getvalue
return value
public void setvalue object value
this value   value
protected entry table
protected static final int default_capacity   32
protected static final int minimum_capacity   4
protected static final int maximum_capacity   1 << 28
protected int size
protected transient int threshold
public complexkeyhashmap
init default_capacity
public complexkeyhashmap boolean b
public complexkeyhashmap int expectedmaxsize
init  capacity expectedmaxsize
public static int hash int h
h    ~ h << 9
h ^    h >>> 14
h      h << 4
h ^    h >>> 10
return h
public int size
return size
public boolean isempty
return size    0
public void clear
object tab   table
for  int i   0  i < tab length  i
tab   null
size   0
public void init int initcapacity
threshold    initcapacity   6  8
table   new entry
public void resize int newlength
entry oldtable   table
int oldlength   table length
entry newtable   new entry
for  int j   0  j < oldlength  j
for  entry e   oldtable   e    null
entry next   e next
int index   e hash    newlength 1
e next   newtable
newtable    e
e   next
table   newtable
threshold    6   newlength    8
private int capacity int expectedmaxsize
// compute min capacity for expectedmaxsize given a load factor of 3/4
int mincapacity    8   expectedmaxsize  6
// compute the appropriate capacity
int result
if  mincapacity > maximum_capacity    mincapacity < 0
result   maximum_capacity
else
result   minimum_capacity
while  result < mincapacity
result <<  1
return result
public interface entryiterator
boolean hasnext
entry   next
public complexkeyhashmap entry gettable
return table
public entryiterator  getentrysetiterator
return new entryiterator
entry next 	   next entry to return
int index 		   current slot
entry current 	   current entry
entry t   table
int i   t length
entry n   null
if  size    0       advance to first entry
while  i > 0     n   t     null
next   n
index   i
public boolean hasnext
return next    null
public entry next
return nextentry
entry nextentry
entry e   next
if  e    null
throw new nosuchelementexception
entry n   e next
entry t   table
int i   index
while  n    null    i > 0
n   t
index   i
next   n
return current   e