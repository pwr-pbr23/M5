/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import java util collection
import java util iterator
import org codehaus groovy ast
import org codehaus groovy control compilerconfiguration
import org codehaus groovy control errorcollector
import org codehaus groovy control sourceunit
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy syntax syntaxexception
/**
* a specialized groovy ast visitor meant to perform additional verifications upon the
* current ast. currently it does checks on annotated nodes and annotations itself.
*
* current limitations:
* - annotations on local variables are not supported
*
* @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>alex popescu</a>
*/
public class extendedverifier implements groovyclassvisitor
public static final string jvm_error_message
private sourceunit source
private classnode currentclass
public extendedverifier sourceunit sourceunit
this source   sourceunit
public void visitclass classnode node
this currentclass   node
visitannotations node  annotationnode type_target
node visitcontents this
public void visitconstructor constructornode node
visitannotations node  annotationnode constructor_target
public void visitfield fieldnode node
visitannotations node  annotationnode field_target
public void visitmethod methodnode node
visitannotations node  annotationnode method_target
for  int i   0  i < node getparameters   length  i
parameter parameter   node getparameters
visitannotations parameter  annotationnode parameter_target
public void visitproperty propertynode node
protected void visitannotations annotatednode node  int target
if node getannotations   isempty
return
this currentclass setannotated true
if  isannotationcompatible
adderror     jvm_error_message
node
return
collection annotations   node getannotations   values
for iterator it   annotations iterator    it hasnext
annotationnode an    annotationnode  it next
annotationnode annotation   visitannotation an
if  annotation isvalid
return
if  annotation istargetallowed target
adderror     annotation getclassnode   getname
annotationnode targettoname target
annotation
/**
* resolve metadata and details of the annotation.
*/
private annotationnode visitannotation annotationnode node
errorcollector errorcollector   new errorcollector this source getconfiguration
annotationvisitor visitor   new annotationvisitor this source  errorcollector
annotationnode solvedannotation   visitor visit node
this source geterrorcollector   addcollectorcontents errorcollector
return solvedannotation
/**
* check if the current runtime allows annotation usage.
*/
protected boolean isannotationcompatible
return compilerconfiguration post_jdk5 equals this source getconfiguration   gettargetbytecode
protected void adderror string msg  astnode expr
this source geterrorcollector   adderrorandcontinue
new syntaxerrormessage
new syntaxexception msg      expr getlinenumber    expr getcolumnnumber     this source
public void visitgenerictype genericstype genericstype