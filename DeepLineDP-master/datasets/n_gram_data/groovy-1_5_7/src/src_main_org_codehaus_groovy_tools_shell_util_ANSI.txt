/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy tools shell util
import java lang reflect field
import java lang reflect modifier
import java io outputstream
import java io printwriter
import java io writer
import java util hashmap
import java util map
import jline ansibuffer ansicodes
import jline terminal
/**
* provides support for using ansi color escape codes.
*
* @version $id$
* @author <a href="mailto:jason@planet57.com">jason dillon</a>
*/
public class ansi
//
// detection/enabled muck
//
/**
* tries to detect if the current system supports ansi.
*/
private static boolean detect
boolean enabled   terminal getterminal   isansisupported
if   enabled
string force   system getproperty ansi class getname
enabled   boolean valueof force  booleanvalue
return enabled
public static boolean isdetected
return detect
private static boolean enabled
public static void setenabled final boolean flag
enabled   boolean valueof flag
public static boolean isenabled
if  enabled    null
enabled   boolean valueof isdetected
return enabled booleanvalue
//
// code
//
public static class code
//
// note: some fields duplicated from jline.ansibuffer.ansicodes to change access modifiers
//
public static final int off   0
public static final int bold   1
public static final int underscore   4
public static final int blink   5
public static final int reverse   7
public static final int concealed   8
public static final int fg_black   30
public static final int fg_red   31
public static final int fg_green   32
public static final int fg_yellow   33
public static final int fg_blue   34
public static final int fg_magenta   35
public static final int fg_cyan   36
public static final int fg_white   37
public static final int black   fg_black
public static final int red   fg_red
public static final int green   fg_green
public static final int yellow   fg_yellow
public static final int blue   fg_blue
public static final int magenta   fg_magenta
public static final int cyan   fg_cyan
public static final int white   fg_white
public static final int bg_black   40
public static final int bg_red   41
public static final int bg_green   42
public static final int bg_yellow   43
public static final int bg_blue   44
public static final int bg_magenta   45
public static final int bg_cyan   46
public static final int bg_white   47
/** a map of code names to values. */
private static final map names_to_codes
/** a map of codes to name. */
private static final map codes_to_names
static
field fields   code class getdeclaredfields
map names   new hashmap fields length
map codes   new hashmap fields length
try
for  int i 0  i<fields length  i
// skip anything non-public, all public fields are codes
int mods   fields getmodifiers
if   modifier ispublic mods
continue
string name   fields getname
number code    number  fields get code class
names put name  code
codes put code  name
catch  illegalaccessexception e
// this should never happen
throw new error e
names_to_codes   names
codes_to_names   codes
/**
* returns the ansi code for the given symbolic name.  supported symbolic names are all defined as
* fields in {@link org.codehaus.groovy.tools.shell.util.ansi.code} where the case is not significant.
*/
public static int forname final string name  throws illegalargumentexception
assert name    null
// all names in the map are upper-case
string tmp   name touppercase
number code    number  names_to_codes get tmp
if  code    null
throw new illegalargumentexception     name
return code intvalue
/**
* returns the symbolic name for the given ansi code.
*/
public static string name final int code  throws illegalargumentexception
string name    string  codes_to_names get new integer code
if  name    null
throw new illegalargumentexception     code
return name
//
// buffer
//
public static class buffer
private final stringbuffer buff   new stringbuffer
public final boolean autoclear   true
public string tostring
try
return buff tostring
finally
if  autoclear  clear
public void clear
buff setlength 0
public int size
return buff length
public buffer append final string text
buff append text
return this
public buffer append final object obj
return append string valueof obj
public buffer attrib final int code
if  isenabled
buff append ansicodes attrib code
return this
public buffer attrib final string text  final int code
assert text    null
if  isenabled
buff append ansicodes attrib code   append text  append ansicodes attrib code off
else
buff append text
return this
public buffer attrib final string text  final string codename
return attrib text  code forname codename
//
// renderer
//
public static class renderer
public static final string begin_token
private static final int begin_token_size   begin_token length
public static final string end_token
private static final int end_token_size   end_token length
public static final string code_text_separator
public static final string code_list_separator
private final buffer buff   new buffer
public string render final string input  throws renderexception
assert input    null
// current, prefix and suffix positions
int c   0  p  s
while  c < input length
p   input indexof begin_token  c
if  p < 0    break
s   input indexof end_token  p   begin_token_size
if  s < 0
throw new renderexception     end_token       input
string expr   input substring p   begin_token_size  s
buff append input substring c  p
evaluate expr
c   s   end_token_size
buff append input substring c
return buff tostring
private void evaluate final string input  throws renderexception
assert input    null
int i   input indexof code_text_separator
if  i < 0
throw new renderexception     code_text_separator       input
string tmp   input substring 0  i
string codes   tmp split code_list_separator
string text   input substring i   1  input length
for  int j 0  j<codes length  j
int code   code forname codes
buff attrib code
buff append text
buff attrib code off
//
// renderexception
//
public static class renderexception
extends runtimeexception
public renderexception final string msg
super msg
//
// helpers
//
public static boolean test final string text
return text    null    text indexof begin_token  >  0
public static string encode final string text  final int code
return new stringbuffer begin_token
append code name code
append code_text_separator
append text
append end_token
tostring
//
// renderwriter
//
public static class renderwriter
extends printwriter
private final renderer renderer   new renderer
public renderwriter final outputstream out
super out
public renderwriter final outputstream out  final boolean autoflush
super out  autoflush
public renderwriter final writer out
super out
public renderwriter final writer out  final boolean autoflush
super out  autoflush
public void write final string s
if  renderer test s
super write renderer render s
else
super write s
//
// rendermessagesource
//
public static class rendermessagesource
extends messagesource
private final renderer renderer   new renderer
public rendermessagesource final string names
super names
public rendermessagesource final string name
super name
public rendermessagesource final class types
super types
public rendermessagesource final class type
super type
public string getmessage final string code
final string msg   super getmessage code
if  renderer test msg
return renderer render msg
return msg