/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy runtime iteratorclosureadapter
import java math biginteger
import java util abstractlist
import java util collection
import java util iterator
import java util list
/**
* represents a list of integer objects from a specified int up (or down) to and including
* a given to.<p>
* <p/>
* this class is a copy of {@link objectrange} optimized for <code>int</code>.  if you make any
* changes to this class, you might consider making parallel changes to {@link objectrange}.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class intrange extends abstractlist implements range
/**
* iterates through each number in an <code>intrange</code>.
*/
private class intrangeiterator implements iterator
/**
* counts from 0 up to size - 1.
*/
private int index
/**
* the number of values in the range.
*/
private int size   size
/**
* the next value to return.
*/
private int value   reverse ? to   from
/**
* {@inheritdoc}
*/
public boolean hasnext
return index < size
/**
* {@inheritdoc}
*/
public object next
if  index   > 0
if  index > size
return null
else
if  reverse
value
else
value
return new integer value
/**
* not supported.
*
* @throws javax.naming.operationnotsupportedexception always
*/
public void remove
intrange this remove index
/**
* the first number in the range.  <code>from </code> is always less than or equal to <code>to</code>.
*/
private int from
/**
* the last number in the range. <code>to</code> is always greater than or eqaul to <code>from</code>.
*/
private int to
/**
* if <code>false</code>, counts up from <code>from</code> to <code>to</code>.  otherwise, counts down
* from <code>to</code> to <code>from</code>.
*/
private boolean reverse
/**
* creates a new <code>intrange</code>. if <code>from</code> is greater
* than <code>to</code>, a reverse range is created with
* <code>from</code> and <code>to</code> swapped.
*
* @param from the first number in the range.
* @param to   the last number in the range.
* @throws illegalargumentexception if the range would contain more than
*                                  {@link integer#max_value} values.
*/
public intrange int from  int to
if  from > to
this from   to
this to   from
this reverse   true
else
this from   from
this to   to
// size() an integer so ranges can have no more than integer.max_value elements
if  this to   this from >  integer max_value
throw new illegalargumentexception     integer max_value
/**
* creates a new <code>intrange</code>.
*
* @param from    the first value in the range.
* @param to      the last value in the range.
* @param reverse <code>true</code> if the range should count from
*                <code>to</code> to <code>from</code>.
* @throws illegalargumentexception if <code>from</code> is greater than <code>to</code>.
*/
protected intrange int from  int to  boolean reverse
if  from > to
throw new illegalargumentexception
this from   from
this to   to
this reverse   reverse
/**
* determines if this object is equal to another object. delegates to
* {@link abstractlist#equals(object)} if <code>that</code> is anthing
* other than an {@link intrange}.
* <p/>
* <p/>
* it is not necessary to override <code>hashcode</code>, as
* {@link abstractlist#hashcode()} provides a suitable hash code.<p>
* <p/>
* note that equals is generally handled by {@link org.codehaus.groovy.runtime.defaultgroovymethods#equals(list,list)}
* instead of this method.
*
* @param that the object to compare
* @return <code>true</code> if the objects are equal
*/
public boolean equals object that
return that instanceof intrange ? equals  intrange  that    super equals that
/**
* compares an {@link intrange} to another {@link intrange}.
*
* @return <code>true</code> if the ranges are equal
* @param that the object to compare for equality
*/
public boolean equals intrange that
return that    null    this reverse    that reverse    this from    that from    this to    that to
/**
* {@inheritdoc}
*/
public comparable getfrom
return new integer from
/**
* {@inheritdoc}
*/
public comparable getto
return new integer to
/**
* gets the 'from' value as an integer.
*
* @return the 'from' value as an integer.
*/
public int getfromint
return from
/**
* gets the 'to' value as an integer.
*
* @return the 'to' value as an integer.
*/
public int gettoint
return to
/**
* {@inheritdoc}
*/
public boolean isreverse
return reverse
public boolean containswithinbounds object o
return contains o
/**
* {@inheritdoc}
*/
public object get int index
if  index < 0
throw new indexoutofboundsexception     index
if  index >  size
throw new indexoutofboundsexception     index       this
int value   reverse ? to   index   index   from
return new integer value
/**
* {@inheritdoc}
*/
public int size
return to   from   1
/**
* {@inheritdoc}
*/
public iterator iterator
return new intrangeiterator
/**
* {@inheritdoc}
*/
public list sublist int fromindex  int toindex
if  fromindex < 0
throw new indexoutofboundsexception     fromindex
if  toindex > size
throw new indexoutofboundsexception     toindex
if  fromindex > toindex
throw new illegalargumentexception     fromindex       toindex
if  fromindex    toindex
return new emptyrange new integer from
return new intrange fromindex   this from  toindex   this from   1  reverse
/**
* {@inheritdoc}
*/
public string tostring
return reverse ?     to       from       from       to
/**
* {@inheritdoc}
*/
public string inspect
return tostring
/**
* {@inheritdoc}
*/
public boolean contains object value
if  value instanceof integer
integer integer    integer  value
int i   integer intvalue
return i >  from    i <  to
if  value instanceof biginteger
biginteger bigint    biginteger  value
return bigint compareto biginteger valueof from   >  0
bigint compareto biginteger valueof to   <  0
return false
/**
* {@inheritdoc}
*/
public boolean containsall collection other
if  other instanceof intrange
final intrange range    intrange  other
return this from <  range from    range to <  this to
return super containsall other
/**
* {@inheritdoc}
*/
public void step int step  closure closure
if  reverse
step    step
if  step >  0
int value   from
while  value <  to
closure call new integer value
value   value   step
else
int value   to
while  value >  from
closure call new integer value
value   value   step
/**
* {@inheritdoc}
*/
public list step int step
iteratorclosureadapter adapter   new iteratorclosureadapter this
step step  adapter
return adapter aslist