/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy ast classnode
import java util list
/**
* a metaclass within groovy defines the behaviour of any given groovy or java class. the metaclass
* interface defines two parts. the client api, which is defined via the extend metaobjectprotocol interface
* and the contract with the groovy runtime system.
*
* in general the compiler and groovy runtime engine interact with methods on this class whilst metaclass
* clients interact with the method defined by the metaobjectprotocol interface
*
*
* @see metaclassimpl
* @see groovy.lang.metaobjectprotocol
*
* @author john wilson
* @author graeme rocher
*/
public interface metaclass extends metaobjectprotocol
/**
* <p>invokes a method on the given receiver for the specified arguments. the sender is the class that invoked the method on the object.
* the metaclass will attempt to establish the method to invoke based on the name and arguments provided.
*
* <p>the iscalltosuper and frominsideclass help the groovy runtime perform optimisations on the call to go directly
* to the super class if necessary
*
* @param sender the java.lang.class instance that invoked the method
* @param receiver the object which the method was invoked on
* @param methodname the name of the method
* @param arguments the arguments to the method
* @param iscalltosuper whether the method is a call to a super class method
* @param frominsideclass whether the call was invoked from the inside or the outside of the class
*
* @return the return value of the method
*/
object invokemethod class sender  object receiver  string methodname  object arguments  boolean iscalltosuper  boolean frominsideclass
/**
* <p>retrieves a property on the given receiver for the specified arguments. the sender is the class that is requesting the property from the object.
* the metaclass will attempt to establish the method to invoke based on the name and arguments provided.
*
* <p>the iscalltosuper and frominsideclass help the groovy runtime perform optimisations on the call to go directly
* to the super class if necessary
*
* @param sender the java.lang.class instance that requested the property
* @param receiver the object which the property is being retrieved from
* @param property the name of the property
* @param iscalltosuper whether the call is to a super class property
* @param frominsideclass ??
*
* @return the properties value
*/
object getproperty class sender  object receiver  string property  boolean iscalltosuper  boolean frominsideclass
/**
* <p>retrieves a property on the given receiver for the specified arguments. the sender is the class that is requesting the property from the object.
* the metaclass will attempt to establish the method to invoke based on the name and arguments provided.
*
* <p>the iscalltosuper and frominsideclass help the groovy runtime perform optimisations on the call to go directly
* to the super class if necessary
*
* @param sender the java.lang.class instance that is mutating the property
* @param receiver the object which the property is being set on
* @param property the name of the property
* @param value the new value of the property to set
* @param iscalltosuper whether the call is to a super class property
* @param frominsideclass ??
*
*/
void setproperty class sender  object receiver  string property  object value  boolean iscalltosuper  boolean frominsideclass
/**
*
* <p>attempts to invoke the methodmissing method otherwise throws a missingmethodexception
*
* @see groovy.lang.missingmethodexception
*
* @param instance the instance to invoke methodmissing on
* @param methodname the name of the method
* @param arguments the arguments to the method
* @return the results of methodmissing or throws missingmethodexception
*/
object invokemissingmethod object instance  string methodname  object arguments
/**
* invokes the propertymissing method otherwise throws a missingpropertyexception
*
* @param instance the instance of the class
* @param propertyname the name of the property
* @param optionalvalue the value of the property which could be null in the case of a getter
* @param isgetter whether the missing property event was the result of a getter or a setter
*
* @return the result of the propertymissing method or throws missingpropertyexception
*/
object invokemissingproperty object instance  string propertyname  object optionalvalue  boolean isgetter
/**
* retrieves the value of an attribute (field). this method is to support the groovy runtime and not for general client api usage.
*
* @param sender the class of the object that requested the attribute
* @param receiver the instance
* @param messagename the name of the attribute
* @param usesuper whether to look-up on the super class or not
* @return the attribute value
*/
object getattribute class sender  object receiver  string messagename  boolean usesuper
/**
* sets the value of an attribute (field). this method is to support the groovy runtime and not for general client api usage.
*
* @param sender the class of the object that requested the attribute
* @param receiver the instance
* @param messagename the name of the attribute
* @param messagevalue the value of the attribute
* @param usesuper whether to look-up on the super class or not
* @param frominsideclass whether the call happened from the inside or the outside of a class
*/
void setattribute class sender  object receiver  string messagename  object messagevalue  boolean usesuper  boolean frominsideclass
/**
* complete the initlialisation process. after this method
* is called no methods should be added to the meta class.
* invocation of methods or access to fields/proeprties is
* forbidden unless this method is called. this method
* should contain any initialisation code, taking a longer
* time to complete. an example is the creation of the
* reflector. it is suggested to synchronize this
* method.
*/
void initialize
/**
* retrives a list of metaproperty instances that the metaclass has
*
* @see metaproperty
*
* @return a list of metaproperty instances
*/
list getproperties
/**
* retrieves a list of metamethods held by the class
*
* @return a list of metamethods
*
*/
list getmethods
/**
* obtains a reference to the original ast for the metaclass if it is available at runtime
*
* @return the original ast or null if it cannot be returned
*/
classnode getclassnode
/**
* retrieves a list of metamethod instances held by this class
* @return a list of metamethod instances
*/
list getmetamethods
/**
*
* internal method to support groovy runtime. not for client usage.
*
* @param numberofconstructors the number of constructors
* @param arguments the arguments
*
* @return selected index
*/
int selectconstructorandtransformarguments int numberofconstructors  object arguments
/**
* selects a method by name and argument classes. this method
* does not search for an exact match, it searches for a compatible
* method. for this the method selection mechanism is used as provided
* bye the implementation of this metaclass. pickmethod may or may
* not used during the method selection process when invoking a method
* thereis no warranty for that.
*
* @return a matching metamethod or null
* @throws groovyruntimeexception if there is more than one matching method
* @param methodname the name of the method to pick
* @param arguments the method arguments
*/
metamethod pickmethod string methodname  class arguments