/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime typehandling
import java math bigdecimal
import java math biginteger
/**
* stateless objects used to perform math on the various number subclasses.
* instances are required so that polymorphic calls work properly, but each
* subclass creates a singleton instance to minimize garbage.  all methods
* must be thread-safe.
*
* the design goals of this class are as follows:
* <ol>
* <li>support a 'least surprising' math model to scripting language users.  this
* means that exact, or decimal math should be used for default calculations.  this
* scheme assumes that by default, groovy literals with decimal points are instantiated
* as bigdecimal objects rather than binary floating points (float, double).
* <li>do not force the appearance of exactness on a number that is by definition not
* guaranteed to be exact.  in particular this means that if an operand in a numbermath
* operation is a binary floating point number, ensure that the result remains a binary floating point
* number (i.e. never automatically promote a binary floating point number to a bigdecimal).
* this has the effect of preserving the expectations of binary floating point users and helps performance.
* <li>provide an implementation that is as close as practical to the java 1.5 bigdecimal math model
* which implements precision based floating point decimal math (ansi x3.274-1996 and
* ansi x3.274-1996/am 1-2000 (section 7.4).
* </ol>
*
* @author steve goetze
*/
public abstract class numbermath
public static number abs number number
return getmath number  absimpl number
public static number add number left  number right
return getmath left  right  addimpl left right
public static number subtract number left  number right
return getmath left right  subtractimpl left right
public static number multiply number left  number right
return getmath left right  multiplyimpl left right
public static number divide number left  number right
return getmath left right  divideimpl left right
public static int compareto number left  number right
return getmath left right  comparetoimpl left  right
public static number or number left  number right
return getmath left right  orimpl left  right
public static number and number left  number right
return getmath left right  andimpl left  right
public static number xor number left  number right
return getmath left right  xorimpl left  right
public static number intdiv number left  number right
return getmath left right  intdivimpl left right
public static number mod number left  number right
return getmath left right  modimpl left  right
/**
* for this operation, consider the operands independently.  throw an exception if the right operand
* (shift distance) is not an integral type.  for the left operand (shift value) also require an integral
* type, but do not promote from integer to long.  this is consistent with java, and makes sense for the
* shift operators.
*/
public static number leftshift number left  number right
if  isfloatingpoint right     isbigdecimal right
throw new unsupportedoperationexception      right       right getclass   getname
return getmath left  leftshiftimpl left right
/**
* for this operation, consider the operands independently.  throw an exception if the right operand
* (shift distance) is not an integral type.  for the left operand (shift value) also require an integral
* type, but do not promote from integer to long.  this is consistent with java, and makes sense for the
* shift operators.
*/
public static number rightshift number left  number right
if  isfloatingpoint right     isbigdecimal right
throw new unsupportedoperationexception      right       right getclass   getname
return getmath left  rightshiftimpl left right
/**
* for this operation, consider the operands independently.  throw an exception if the right operand
* (shift distance) is not an integral type.  for the left operand (shift value) also require an integral
* type, but do not promote from integer to long.  this is consistent with java, and makes sense for the
* shift operators.
*/
public static number rightshiftunsigned number left  number right
if  isfloatingpoint right     isbigdecimal right
throw new unsupportedoperationexception      right       right getclass   getname
return getmath left  rightshiftunsignedimpl left right
public static number unaryminus number left
return getmath left  unaryminusimpl left
public static boolean isfloatingpoint number number
return number instanceof double    number instanceof float
public static boolean isinteger number number
return number instanceof integer
public static boolean islong number number
return number instanceof long
public static boolean isbigdecimal number number
return number instanceof bigdecimal
public static boolean isbiginteger number number
return number instanceof biginteger
public static bigdecimal tobigdecimal number n
return  n instanceof bigdecimal ?  bigdecimal  n   new bigdecimal n tostring
public static biginteger tobiginteger number n
return  n instanceof biginteger ?  biginteger  n   new biginteger n tostring
/**
* determine which numbermath instance to use, given the supplied operands.  this method implements
* the type promotion rules discussed in the documentation.  note that by the time this method is
* called, any byte, character or short operands will have been promoted to integer.  for reference,
* here is the promotion matrix:
*    bd bi  d  f  l  i
* bd bd bd  d  d bd bd
* bi bd bi  d  d bi bi
*  d  d  d  d  d  d  d
*  f  d  d  d  d  d  d
*  l bd bi  d  d  l  l
*  i bd bi  d  d  l  i
*
* note that for division, if either operand isfloatingpoint, the result will be floating.  otherwise,
* the result is bigdecimal
*/
private static numbermath getmath number left  number right
if  isfloatingpoint left     isfloatingpoint right
return floatingpointmath instance
if  isbigdecimal left     isbigdecimal right
return bigdecimalmath instance
if  isbiginteger left     isbiginteger right
return bigintegermath instance
if  islong left     islong right
return longmath instance
return integermath instance
private static numbermath getmath number number
if  islong number
return longmath instance
if  isfloatingpoint number
return floatingpointmath instance
if  isbigdecimal number
return bigdecimalmath instance
if  isbiginteger number
return bigintegermath instance
return integermath instance
//subclasses implement according to the type promotion hierarchy rules
protected abstract number absimpl number number
protected abstract number addimpl number left  number right
protected abstract number subtractimpl number left  number right
protected abstract number multiplyimpl number left  number right
protected abstract number divideimpl number left  number right
protected abstract int comparetoimpl number left  number right
protected abstract number unaryminusimpl number left
protected number orimpl number left  number right
throw createunsupportedexception    left
protected number andimpl number left  number right
throw createunsupportedexception    left
protected number xorimpl number left  number right
throw createunsupportedexception    left
protected number modimpl number left  number right
throw createunsupportedexception    left
protected number intdivimpl number left  number right
throw createunsupportedexception    left
protected number leftshiftimpl number left  number right
throw createunsupportedexception    left
protected number rightshiftimpl number left  number right
throw createunsupportedexception    left
protected number rightshiftunsignedimpl number left  number right
throw createunsupportedexception    left
protected unsupportedoperationexception createunsupportedexception string operation  number left
return new unsupportedoperationexception     operation       left getclass   getname         left