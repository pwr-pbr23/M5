/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy runtime generatedclosure
import org codehaus groovy runtime metaclass closuremetaclass
import java lang reflect constructor
/**
* a metaclassregistry is an object that is responsible for managing the a cache of metaclass instances. each
* java.lang.class instance has an associated metaclass and client code can query this interface for the metaclass for
* a given associated java.lang.class
*
* @see groovy.lang.metaclass
*
* @author john wilson
* @author graeme rocher
*
*/
public interface metaclassregistry
/*
* the main function of the registry
* if a metaclass exists then return it
* otherwise create one, put it in the registry and return it
*/
metaclass getmetaclass class theclass
/*
* do we really want these two?
*/
void setmetaclass class theclass  metaclass themetaclass
/**
* removes a cached metaclass from the registry
* @param theclass the java class of the metaclass to remove
*/
void removemetaclass class theclass
/**
* retrieves the metaclasscreationhandle that is responsible for constructing metaclass instances
*
* @return the metaclasscreationhandle instance
*/
metaclasscreationhandle getmetaclasscreationhandler
/**
* sets the metaclasscreationhandle instance that is responsible for constructing instances
*
* @param handle the hande instance
*/
void setmetaclasscreationhandle metaclasscreationhandle handle
/**
* class used as base for the creation of metaclass implementations.
* the class defaults to metaclassimpl, if the class loading fails to
* find a special meta class. the name for such a meta class would be
* the class name it is created for with the prefix
* "groovy.runtime.metaclass." by replacing the handle in the registry
* you can have any control over the creation of what metaclass is used
* for a class that you want to have.
* warning: experimental code, likely to change soon
* @author jochen theodorou
*/
class metaclasscreationhandle
public final metaclass create class theclass  metaclassregistry registry
try
final class custommetaclass   class forname     theclass getname
if  delegatingmetaclass class isassignablefrom custommetaclass
final constructor custommetaclassconstructor   custommetaclass getconstructor new class metaclass class
metaclass normalmetaclass   createnormalmetaclass theclass  registry
return  metaclass custommetaclassconstructor newinstance new object normalmetaclass
else
final constructor custommetaclassconstructor   custommetaclass getconstructor new class metaclassregistry class  class class
return  metaclass custommetaclassconstructor newinstance new object registry  theclass
catch  final classnotfoundexception e
return createnormalmetaclass theclass  registry
catch  final exception e
throw new groovyruntimeexception     theclass getname         e  e
protected metaclass createnormalmetaclass class theclass metaclassregistry registry
if  generatedclosure class isassignablefrom theclass
return new closuremetaclass registry theclass
else
return new metaclassimpl registry  theclass