/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang closure
import java beans propertychangeevent
import java beans propertychangelistener
import java beans propertychangesupport
import java util
/**
* map decorator that will trigger propertychangeevents when a value changes.<br>
* an optional closure may be specified and will work as a filter, if it returns
* true the property will trigger an event (if the value indeed changed),
* otherwise it won't. the closure may receive 1 or 2 parameters, the single one
* being the value, the other one both the key and value, for example:
* <pre>
* // skip all properties whose value is a closure
* def map = new observablemap( {!(it instanceof closure)} )
* <p/>
* // skip all properties whose name matches a regex
* def map = new observablemap( { name, value -&gt; !(name =~ /[a-z+]/) } )
* </pre>
*
* <p>the current implementation will trigger specialized events in the following scenarios,
* you needn't register a different listener as those events extend from propertychangeevent
* <ul>
* <li>observablemap.propertyaddedevent - a new property is added to the map</li>
* <li>observablemap.propertyremovedevent - a property is removed from the map</li>
* <li>observablemap.propertyupdatedevent - a property changes value (same as regular propertychangeevent)</li>
* <li>observablemap.propertyclearedevent - all properties have been removed from the map</li>
* <li>observablemap.multipropertyaddedevent - triggered by calling map.putall(), contains added|updated events</li>
* </ul></p>
*
* @author <a href="mailto:aalmiray@users.sourceforge.net">andres almiray</a>
*/
public class observablemap implements map
private map delegate
private propertychangesupport pcs
private closure test
public observablemap
this new linkedhashmap    null
public observablemap closure test
this new linkedhashmap    test
public observablemap map delegate
this delegate  null
public observablemap map delegate  closure test
this delegate   delegate
this test   test
pcs   new propertychangesupport this
// map interface
public void clear
map values   new hashmap
if   delegate isempty
values putall  delegate
delegate clear
if  values    null
pcs firepropertychange  new propertyclearedevent this values
public boolean containskey object key
return delegate containskey key
public boolean containsvalue object value
return delegate containsvalue value
public set entryset
return delegate entryset
public boolean equals object o
return delegate equals o
public object get object key
return delegate get key
public int hashcode
return delegate hashcode
public boolean isempty
return delegate isempty
public set keyset
return delegate keyset
public object put object key  object value
object oldvalue   null
boolean newkey    delegate containskey  key
if  test    null
oldvalue   delegate put key  value
object result   null
if  test getmaximumnumberofparameters      2
result   test call new object  key  value
else
result   test call value
if  result    null    result instanceof boolean      boolean  result  booleanvalue
if  newkey
pcs firepropertychange  new propertyaddedevent this  string valueof key   value
else if  oldvalue    value
pcs firepropertychange  new propertyupdatedevent this  string valueof key   oldvalue  value
else
oldvalue   delegate put key  value
if  newkey
pcs firepropertychange  new propertyaddedevent this  string valueof key   value
else if  oldvalue    value
pcs firepropertychange  new propertyupdatedevent this  string valueof key   oldvalue  value
return oldvalue
public void putall map map
if  map    null
list events   new arraylist
for  iterator entries   map entryset
iterator    entries hasnext
map entry entry    map entry  entries next
string key   string valueof entry getkey
object newvalue   entry getvalue
object oldvalue   null
boolean newkey    delegate containskey  key
if  test    null
oldvalue   delegate put key  newvalue
object result   null
if  test getmaximumnumberofparameters      2
result   test call new object  key  newvalue
else
result   test call newvalue
if  result    null    result instanceof boolean      boolean  result  booleanvalue
if  newkey
events add  new propertyaddedevent this  key  newvalue
else if  oldvalue    newvalue
events add  new propertyupdatedevent this  key  oldvalue  newvalue
else
oldvalue   delegate put key  newvalue
if  newkey
events add  new propertyaddedevent this  key  newvalue
else if  oldvalue    newvalue
events add  new propertyupdatedevent this  key  oldvalue  newvalue
if  events size   > 0
pcs firepropertychange  new multipropertyevent this   propertyevent  events toarray new propertyevent
public object remove object key
object result    delegate remove key
if  key    null
pcs firepropertychange  new propertyremovedevent this  string valueof key   result
return result
public int size
return delegate size
public collection values
return delegate values
// observable interface
public void addpropertychangelistener propertychangelistener listener
pcs addpropertychangelistener listener
public void addpropertychangelistener string propertyname  propertychangelistener listener
pcs addpropertychangelistener propertyname  listener
public propertychangelistener getpropertychangelisteners
return pcs getpropertychangelisteners
public propertychangelistener getpropertychangelisteners string propertyname
return pcs getpropertychangelisteners propertyname
public void removepropertychangelistener propertychangelistener listener
pcs removepropertychangelistener listener
public void removepropertychangelistener string propertyname  propertychangelistener listener
pcs removepropertychangelistener propertyname  listener
public boolean haslisteners string propertyname
return pcs haslisteners propertyname
public abstract static class propertyevent extends propertychangeevent
public static final int added   0
public static final int updated   1
public static final int removed   2
public static final int cleared   3
public static final int multi   4
protected static final object oldvalue   new object
protected static final object newvalue   new object
private int type
public propertyevent  object source  string propertyname  object oldvalue  object newvalue  int type
super  source  propertyname  oldvalue  newvalue
switch  type
case added
case updated
case removed
case cleared
case multi
this type   type
break
default
this type   updated
break
public int gettype
return type
public static class propertyaddedevent extends propertyevent
public propertyaddedevent  object source  string propertyname  object newvalue
super  source  propertyname  null  newvalue  propertyevent added
public static class propertyupdatedevent extends propertyevent
public propertyupdatedevent  object source  string propertyname  object oldvalue  object newvalue
super  source  propertyname  oldvalue  newvalue  propertyevent updated
public static class propertyremovedevent extends propertyevent
public propertyremovedevent  object source  string propertyname  object oldvalue
super  source  propertyname  oldvalue  null  propertyevent removed
public static class propertyclearedevent extends propertyevent
public static final string clear_property
private map values   new hashmap
public propertyclearedevent  object source  map values
super  source  clear_property  oldvalue  newvalue  propertyevent cleared
if  values    null
this values putall  values
public map getvalues
return collections unmodifiablemap  values
public static class multipropertyevent extends propertyevent
public static final string multi_property
private propertyevent events   new propertyevent
public multipropertyevent  object source  propertyevent events
super  source  multi_property  oldvalue  newvalue  propertyevent multi
if  events    null    events length > 0
this events   new propertyevent
system arraycopy events  0  this events  0  events length
public propertyevent getevents
propertyevent copy   new propertyevent
system arraycopy events  0  copy  0  events length
return copy