package org codehaus groovy classgen
import java util arraylist
import java util iterator
import java util list
import org codehaus groovy ast classcodevisitorsupport
import org codehaus groovy ast classhelper
import org codehaus groovy ast classnode
import org codehaus groovy ast codevisitorsupport
import org codehaus groovy ast constructornode
import org codehaus groovy ast fieldnode
import org codehaus groovy ast methodnode
import org codehaus groovy ast parameter
import org codehaus groovy ast expr
import org codehaus groovy ast stmt
import org codehaus groovy control compilationunit
import org codehaus groovy control sourceunit
import org codehaus groovy syntax token
import org codehaus groovy syntax types
import org objectweb asm opcodes
public class enumvisitor extends classcodevisitorsupport
// some constants for modifiers
private static final int fs   opcodes acc_final   opcodes acc_static
private static final int ps   opcodes acc_public   opcodes acc_static
private static final int public_fs   opcodes acc_public   fs
private static final int private_fs   opcodes acc_private   fs
private final compilationunit compilationunit
private final sourceunit sourceunit
public enumvisitor compilationunit cu  sourceunit su
compilationunit   cu
sourceunit   su
public void visitclass classnode node
if   isenum node   return
completeenum node
protected sourceunit getsourceunit
return sourceunit
private boolean isenum classnode node
return  node getmodifiers   opcodes acc_enum     0
private void completeenum final classnode enumclass
classnode enumarray   enumclass makearray
list methods   enumclass getmethods
boolean hasnext   false
boolean hasprevious   false
for  int i   0  i < methods size    i
methodnode m    methodnode  methods get i
if  m getname   equals       m getparameters   length    0  hasnext   true
if  m getname   equals       m getparameters   length    0  hasprevious   true
if  hasnext    hasprevious  break
// create min_value and max_value fields
fieldnode minvalue   new fieldnode    public_fs  enumclass  enumclass  null
fieldnode maxvalue   new fieldnode    public_fs  enumclass  enumclass  null
// create values field
fieldnode values   new fieldnode   private_fs enumarray enumclass null
values setsynthetic true
// create values() method
methodnode valuesmethod   new methodnode   public_fs enumarray new parameter classnode empty_array null
valuesmethod setsynthetic true
blockstatement code   new blockstatement
code addstatement
new returnstatement
new methodcallexpression new fieldexpression values    methodcallexpression no_arguments
valuesmethod setcode code
enumclass addmethod valuesmethod
if   hasnext
// create next() method, code:
//     day next() {
//        int ordinal = ordinal().next()
//        if (ordinal >= values().size()) ordinal = 0
//        return values()[ordinal]
//     }
token assign   token newsymbol types assign   1   1
token ge   token newsymbol types compare_greater_than_equal   1   1
methodnode nextmethod   new methodnode    opcodes acc_public  enumclass  new parameter  classnode empty_array  null
nextmethod setsynthetic true
blockstatement code   new blockstatement
blockstatement ifstatement   new blockstatement
ifstatement addstatement
new expressionstatement
new binaryexpression new variableexpression     assign  new constantexpression new integer 0
code addstatement
new expressionstatement
new declarationexpression
new variableexpression
assign
new methodcallexpression
new methodcallexpression
variableexpression this_expression
methodcallexpression no_arguments
methodcallexpression no_arguments
code addstatement
new ifstatement
new booleanexpression new binaryexpression
new variableexpression
ge
new methodcallexpression
new fieldexpression values
methodcallexpression no_arguments
ifstatement
emptystatement instance
code addstatement
new returnstatement
new methodcallexpression new fieldexpression values      new variableexpression
nextmethod setcode code
enumclass addmethod nextmethod
if   hasprevious
// create previous() method, code:
//    day previous() {
//        int ordinal = ordinal().previous()
//        if (ordinal < 0) ordinal = values().size() - 1
//        return values()[ordinal]
//    }
token assign   token newsymbol types assign   1   1
token lt   token newsymbol types compare_less_than   1   1
methodnode nextmethod   new methodnode    opcodes acc_public  enumclass  new parameter  classnode empty_array  null
nextmethod setsynthetic true
blockstatement code   new blockstatement
blockstatement ifstatement   new blockstatement
ifstatement addstatement
new expressionstatement
new binaryexpression new variableexpression     assign
new methodcallexpression
new methodcallexpression
new fieldexpression values
methodcallexpression no_arguments
new constantexpression new integer 1
code addstatement
new expressionstatement
new declarationexpression
new variableexpression
assign
new methodcallexpression
new methodcallexpression
variableexpression this_expression
methodcallexpression no_arguments
methodcallexpression no_arguments
code addstatement
new ifstatement
new booleanexpression new binaryexpression
new variableexpression
lt
new constantexpression new integer 0
ifstatement
emptystatement instance
code addstatement
new returnstatement
new methodcallexpression new fieldexpression values      new variableexpression
nextmethod setcode code
enumclass addmethod nextmethod
// create valueof
parameter stringparameter   new parameter classhelper string_type
methodnode valueofmethod   new methodnode   ps enumclass new parameter stringparameter  classnode empty_array null
argumentlistexpression callarguments   new argumentlistexpression
callarguments addexpression new classexpression enumclass
callarguments addexpression new variableexpression
blockstatement code   new blockstatement
code addstatement
new returnstatement
new methodcallexpression new classexpression classhelper enum_type    callarguments
valueofmethod setcode code
valueofmethod setsynthetic true
enumclass addmethod valueofmethod
addconstructor enumclass
// constructor helper
// this method is used instead of calling the constructor as
// calling the constructor may require a table with metaclass
// selecting the constructor for each enum value. so instead we
// use this method to have a central point for constructor selection
// and only one table. the whole construction is needed because
// reflection forbids access to the enum constructor.
// code:
// def $init(object[] para) {
//  return this(*para)
// }
parameter parameter   new parameter new parameter classhelper object_type makearray
methodnode initmethod   new methodnode   private_fs enumclass parameter classnode empty_array null
initmethod setsynthetic true
constructorcallexpression cce   new constructorcallexpression
classnode this
new argumentlistexpression
new spreadexpression new variableexpression
blockstatement code   new blockstatement
code addstatement new returnstatement cce
initmethod setcode code
enumclass addmethod initmethod
// static init
list fields   enumclass getfields
list arrayinit   new arraylist
int value    1
token assign   token newsymbol types assign   1   1
list block   new arraylist
fieldnode tempmin   null
fieldnode tempmax   null
for  iterator iterator   fields iterator    iterator hasnext
fieldnode field    fieldnode  iterator next
if   field getmodifiers   opcodes acc_enum     0  continue
value
if  tempmin    null  tempmin   field
tempmax   field
argumentlistexpression args   new argumentlistexpression
args addexpression new constantexpression field getname
args addexpression new constantexpression new integer value
if  field getinitialexpression    null
listexpression oldargs    listexpression  field getinitialexpression
for  iterator oldargsiterator   oldargs getexpressions   iterator    oldargsiterator hasnext
expression exp    expression  oldargsiterator next
args addexpression exp
field setinitialvalueexpression null
block add
new expressionstatement
new binaryexpression
new fieldexpression field
assign
new methodcallexpression new classexpression enumclass    args
arrayinit add new fieldexpression field
if  tempmin  null
block add
new expressionstatement
new binaryexpression
new fieldexpression minvalue
assign
new fieldexpression tempmin
block add
new expressionstatement
new binaryexpression
new fieldexpression maxvalue
assign
new fieldexpression tempmax
enumclass addfield minvalue
enumclass addfield maxvalue
block add
new expressionstatement
new binaryexpression new fieldexpression values  assign new arrayexpression enumclass arrayinit
enumclass addstaticinitializerstatements block  true
enumclass addfield values
private void addconstructor classnode enumclass
// first look if there are declared constructors
list ctors   new arraylist enumclass getdeclaredconstructors
if  ctors size    0
// add default constructor
constructornode init   new constructornode opcodes acc_private new parameter classnode empty_array new blockstatement
enumclass addconstructor init
ctors add init
// for each constructor:
// if constructor does not define a call to super, then transform constructor
// to get string,int parameters at beginning and add call super(string,int)
for  iterator iterator   ctors iterator    iterator hasnext
constructornode ctor    constructornode  iterator next
if  ctor firststatementisspecialconstructorcall    continue
// we need to add parameters
parameter oldp   ctor getparameters
parameter newp   new parameter
string stringparametername   getuniquevariablename   ctor getcode
newp   new parameter classhelper string_type stringparametername
string intparametername   getuniquevariablename   ctor getcode
newp   new parameter classhelper int_type intparametername
system arraycopy oldp  0  newp  2  oldp length
ctor setparameters newp
// and a super call
constructorcallexpression cce   new constructorcallexpression
classnode super
new argumentlistexpression
new variableexpression stringparametername
new variableexpression intparametername
blockstatement code   new blockstatement
code addstatement new expressionstatement cce
statement oldcode   ctor getcode
if  oldcode  null  code addstatement oldcode
ctor setcode code
private string getuniquevariablename final string name  statement code
if  code  null  return name
final object found new object
codevisitorsupport cv   new codevisitorsupport
public void visitvariableexpression variableexpression expression
if  expression getname   equals name   found boolean true
code visit cv
if  found  null  return getuniquevariablename   name  code
return name