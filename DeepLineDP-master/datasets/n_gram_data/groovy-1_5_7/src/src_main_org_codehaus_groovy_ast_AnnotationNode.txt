/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import java util arraylist
import java util hashmap
import java util list
import java util map
import org codehaus groovy ast expr expression
/**
* represents an annotation which can be attached to interfaces, classes, methods and fields.
*
* @author <a href="mailto:jstrachan@protique.com">james strachan</a>
* @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>alex popescu</a>
* @version $revision$
*/
public class annotationnode extends astnode
public static final int type_target   1
public static final int constructor_target   1 << 1
public static final int method_target   1 << 2
public static final int field_target   1 << 3
public static final int parameter_target    1 << 4
public static final int local_variable_target   1 << 5
public static final int annotation_target   1 << 6
private static final int all_targets   type_target   constructor_target   method_target
field_target   parameter_target   local_variable_target   annotation_target
private final classnode classnode
private map members   new hashmap
private boolean runtimeretention  false
private boolean sourceretention  false
private int allowedtargets   all_targets
private boolean valid
public annotationnode classnode classnode
this classnode   classnode
public classnode getclassnode
return classnode
public map getmembers
return members
public expression getmember string name
return  expression  members get name
public void addmember string name  expression value
expression oldvalue    expression  members get name
if  oldvalue    null
members put name  value
else
list list   null
if  oldvalue instanceof list
list    list  oldvalue
else
list   new arraylist
list add oldvalue
members put name  list
list add value
public void setmember string name  expression value
members put name  value
public boolean isbuiltin
return false
/**
* flag corresponding to <code>retentionpolicy</code>.
* @return <tt>true</tt> if the annotation should be visible at runtime,
*      <tt>false</tt> otherwise
*/
public boolean hasruntimeretention
return this runtimeretention
/**
* sets the internal flag of this annotation runtime retention policy.
* if the current annotation has
* <code>retentionpolicy.runtime</code> or if <tt>false</tt>
* if the <code>retentionpolicy.class</code>.
* @param flag if <tt>true</tt> then current annotation is marked as having
*     <code>retentionpolicy.runtime</code>. if <tt>false</tt> then
*     the annotation has <code>retentionpolicy.class</code>.
*/
public void setruntimeretention boolean flag
this runtimeretention   flag
/**
* flag corresponding to <code>retentionpolicy.source</code>.
* @return <tt>true</tt> if the annotation is only allowed in sources
*      <tt>false</tt> otherwise
*/
public boolean hassourceretention
return this sourceretention
/** sets the internal flag if the current annotation has
* <code>retentionpolicy.source</code>.
*/
public void setsourceretention boolean flag
this sourceretention   flag
public void setallowedtargets int bitmap
this allowedtargets   bitmap
public boolean istargetallowed int target
return  this allowedtargets   target     target
/**
* set if the current annotation is verified and passed all
* validations
* @param flag
*/
public void setvalid boolean flag
this valid   flag
/**
* returns the state of this annotation (verified and all verification passed).
*/
public boolean isvalid
return this valid
public static final string targettoname int target
switch target
case type_target
return
case constructor_target
return
case method_target
return
case field_target
return
case parameter_target
return
case local_variable_target
return
case annotation_target
return
default
return