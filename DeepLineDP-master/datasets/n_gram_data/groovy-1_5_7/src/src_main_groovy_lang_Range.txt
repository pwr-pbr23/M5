/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import java util list
/**
* represents the interface of a range implementation which includes the
* from and to values.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public interface range extends list
/**
* gets the lower value in the range.
*
* @return the lower value in the range.
*/
comparable getfrom
/**
* gets the lower value in the range.
*
* @return the upper value in the range
*/
comparable getto
/**
* indicates whether this is a reverse range which iterates backwards
* starting from the to value and ending on the from value
*
* @return <code>true</code> if this is a reverse range
*/
boolean isreverse
/**
* indicates whether this is a reverse range which iterates backwards
* starting from the to value and ending on the from value
*
* @param o the object to check against the boundaries of the range
* @return <code>true</code> if the object is between the from and to values
*/
boolean containswithinbounds object o
/**
* steps through the range, calling a closure for each number.
*
* @param step    the amount by which to step. if negative, steps through the
*                range backwards.
* @param closure the {@link closure} to call
*/
void step int step  closure closure
/**
* forms a list by stepping through the range by the indicated interval.
*
* @param step the amount by which to step. if negative, steps through the
*             range backwards.
* @return the list formed by stepping through the range by the indicated
*         interval.
*/
list step int step
/**
* @return the verbose {@link string} representation of this {@link range} as would be typed into a console
*         to create the {@link range} instance
*/
string inspect