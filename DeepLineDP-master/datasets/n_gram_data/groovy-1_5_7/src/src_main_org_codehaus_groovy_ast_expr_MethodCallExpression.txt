/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import groovy lang metamethod
import org codehaus groovy ast classhelper
import org codehaus groovy ast groovycodevisitor
/**
* a method call on an object or class
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class methodcallexpression extends expression
private expression objectexpression
private expression method
private expression arguments
private boolean spreadsafe   false
private boolean safe   false
private boolean implicitthis
public static final expression no_arguments   new tupleexpression
public metamethod getmetamethod
return metamethod
private metamethod metamethod   null
public methodcallexpression expression objectexpression  string method  expression arguments
this objectexpression new constantexpression method  arguments
public methodcallexpression expression objectexpression  expression method  expression arguments
this objectexpression   objectexpression
this method   method
this arguments   arguments
//todo: set correct type here
// if setting type and a methodcall is the last expression in a method,
// then the method will return null if the method itself is not void too!
// (in bytecode after call: aconst_null, areturn)
this settype classhelper dynamic_type
this setimplicitthis true
public void visit groovycodevisitor visitor
visitor visitmethodcallexpression this
public expression transformexpression expressiontransformer transformer
methodcallexpression answer
new methodcallexpression transformer transform objectexpression   transformer transform method   transformer transform arguments
answer setsafe safe
answer setimplicitthis implicitthis
answer setsourceposition this
return answer
public expression getarguments
return arguments
public void setarguments expression arguments
this arguments   arguments
public expression getmethod
return method
public void setmethod expression method
this method   method
/**
* this method returns the method name as string if it is no dynamic
* calculated method name, but a constant.
*/
public string getmethodasstring
if     method instanceof constantexpression   return null
constantexpression constant    constantexpression  method
return constant gettext
public void setobjectexpression expression objectexpression
this objectexpression   objectexpression
public expression getobjectexpression
return objectexpression
public string gettext
return objectexpression gettext         method gettext     arguments gettext
/**
* @return is this a safe method call, i.e. if true then if the source object is null
* then this method call will return null rather than throwing a null pointer exception
*/
public boolean issafe
return safe
public void setsafe boolean safe
this safe   safe
public boolean isspreadsafe
return spreadsafe
public void setspreadsafe boolean value
spreadsafe   value
/**
* @return true if no object expression was specified otherwise if
* some expression was specified for the object on which to evaluate
* the method then return false
*/
public boolean isimplicitthis
return implicitthis
public void setimplicitthis boolean implicitthis
this implicitthis   implicitthis
public string tostring
return super tostring
objectexpression
method
arguments
public void setmetamethod metamethod mmeth
this metamethod   mmeth
super settype classhelper make mmeth getreturntype