/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy reflection
import org codehaus groovy groovybugerror
import org codehaus groovy runtime metaclasshelper
import org codehaus groovy runtime wrappers wrapper
import java lang reflect array
public class parametertypes
protected volatile class  nativeparamtypes
protected volatile cachedclass  parametertypes
protected boolean isvargsmethod
public parametertypes
public parametertypes class pt
nativeparamtypes   pt
public parametertypes string pt
nativeparamtypes   new class
for  int i   0  i    pt length    i
try
nativeparamtypes   class forname pt
catch  classnotfoundexception e
noclassdeffounderror err   new noclassdeffounderror
err initcause e
throw err
public parametertypes cachedclass parametertypes
setparameterstypes parametertypes
protected final void setparameterstypes cachedclass pt
this parametertypes   pt
isvargsmethod   pt length > 0    pt  isarray
public cachedclass getparametertypes
if  parametertypes    null
getparameterstypes0
return parametertypes
private synchronized void getparameterstypes0
if  parametertypes    null
return
class  npt   nativeparamtypes    null ? getpt     nativeparamtypes
cachedclass pt   new cachedclass
for  int i   0  i    npt length    i
pt   reflectioncache getcachedclass npt
nativeparamtypes   npt
setparameterstypes pt
public class getnativeparametertypes
if  nativeparamtypes    null
getnativeparametertypes0
return nativeparamtypes
private synchronized void getnativeparametertypes0
if  nativeparamtypes    null
return
class  npt
if  parametertypes    null
npt   new class
for  int i   0  i    parametertypes length    i
npt   parametertypes gettheclass
else
npt   getpt
nativeparamtypes   npt
protected class getpt     throw new unsupportedoperationexception getclass   getname
public boolean isvargsmethod object arguments
// uncomment if at some point this method can be called before parametertypes initialized
// getparametertypes();
if  isvargsmethod
return false
final int lenminus1   parametertypes length   1
// -1 because the varg part is optional
if  lenminus1    arguments length  return true
if  lenminus1 > arguments length  return false
if  arguments length > parametertypes length  return true
// only case left is arguments.length == parametertypes.length
object last   arguments
if  last    null  return true
class clazz   last getclass
return  clazz equals parametertypes gettheclass
public final object coerceargumentstoclasses object argumentarray
// uncomment if at some point this method can be called before parametertypes initialized
// getparametertypes();
argumentarray   correctarguments argumentarray
final cachedclass pt   parametertypes
final int len   argumentarray length
for  int i   0  i < len  i
final object argument   argumentarray
if  argument    null
argumentarray   pt coerceargument argument
return argumentarray
private object correctarguments object argumentarray
// correct argumentarray's length
if  argumentarray    null
return metaclasshelper empty_array
final cachedclass pt   parametertypes
if  pt length    1    argumentarray length    0
if  isvargsmethod
return new object array newinstance pt gettheclass   getcomponenttype    0
else
return metaclasshelper array_with_null
if  isvargsmethod    isvargsmethod argumentarray
return fittovargs argumentarray  pt
return argumentarray
/**
* this method is called when the number of arguments to a method is greater than 1
* and if the method is a vargs method. this method will then transform the given
* arguments to make the method callable
*
* @param argumentarray the arguments used to call the method
* @param paramtypes    the types of the paramters the method takes
*/
private static object fittovargs object argumentarray  cachedclass paramtypes
class vargsclass   reflectioncache autoboxtype paramtypes gettheclass   getcomponenttype
if  argumentarray length    paramtypes length   1
// the vargs argument is missing, so fill it with an empty array
object newargs   new object
system arraycopy argumentarray  0  newargs  0  argumentarray length
object vargs   metaclasshelper makearray null  vargsclass  0
newargs   vargs
return newargs
else if  argumentarray length    paramtypes length
// the number of arguments is correct, but if the last argument
// is no array we have to wrap it in a array. if the last argument
// is null, then we don't have to do anything
object lastargument   argumentarray
if  lastargument    null     lastargument getclass   isarray
// no array so wrap it
object wrapped   metaclasshelper makearray lastargument  vargsclass  1
system arraycopy argumentarray  argumentarray length   1  wrapped  0  1
object newargs   new object
system arraycopy argumentarray  0  newargs  0  paramtypes length   1
newargs   wrapped
return newargs
else
// we may have to box the arguemnt!
return argumentarray
else if  argumentarray length > paramtypes length
// the number of arguments is too big, wrap all exceeding elements
// in an array, but keep the old elements that are no vargs
object newargs   new object
// copy arguments that are not a varg
system arraycopy argumentarray  0  newargs  0  paramtypes length   1
// create a new array for the vargs and copy them
int numberofvargs   argumentarray length   paramtypes length
object vargs   metaclasshelper makecommonarray argumentarray  paramtypes length   1  vargsclass
newargs   vargs
return newargs
else
throw new groovybugerror
public boolean isvalidmethod class arguments
if  arguments    null  return true
final int size   arguments length
cachedclass pt   getparametertypes
final int paramminus1   pt length 1
if   size >  paramminus1    isvargsmethod
return isvalidvarargsmethod arguments  size  pt  paramminus1
else
if  pt length    size
return isvalidexactmethod arguments  size  pt
else
if  pt length    1    size    0
return true
return false
private boolean isvalidexactmethod class arguments  int size  cachedclass pt
// lets check the parameter types match
for  int i   0  i < size  i
if  pt isassignablefrom arguments   continue
return false
return true
private boolean isvalidvarargsmethod class arguments  int size  cachedclass pt  int paramminus1
// first check normal number of parameters
for  int i   0  i < paramminus1  i
if  pt isassignablefrom arguments   continue
return false
// check direct match
cachedclass varg   pt
class clazz   varg gettheclass   getcomponenttype
if   size  pt length
varg isassignablefrom arguments
testcomponentassignable clazz  arguments
return true
// check varged
for  int i   paramminus1  i < size  i
if  metaclasshelper isassignablefrom clazz  arguments   continue
return false
return true
private final static boolean testcomponentassignable class totestagainst  class totest
class component   totest getcomponenttype
if  component  null  return false
return metaclasshelper isassignablefrom totestagainst  component
public boolean isvalidmethod object arguments
if  arguments    null  return true
final int size   arguments length
cachedclass paramtypes   getparametertypes
final int paramminus1   paramtypes length 1
if   size >  paramminus1    paramtypes length > 0
paramtypes isarray
// first check normal number of parameters
for  int i   0  i < paramminus1  i
if  paramtypes isassignablefrom getargclass arguments    continue
return false
// check direct match
cachedclass varg   paramtypes
class clazz   varg gettheclass   getcomponenttype
if   size  paramtypes length
varg isassignablefrom getargclass arguments
testcomponentassignable clazz getargclass arguments
return true
// check varged
for  int i   paramminus1  i < size  i
if  metaclasshelper isassignablefrom clazz  getargclass arguments    continue
return false
return true
else if  paramtypes length    size
// lets check the parameter types match
for  int i   0  i < size  i
if  paramtypes isassignablefrom getargclass arguments    continue
return false
return true
else if  paramtypes length    1    size    0
return true
return false
private class getargclass object arg
class cls
if  arg    null
cls   null
else
if  arg instanceof wrapper
cls     wrapper arg  gettype
else
cls   arg getclass
return cls