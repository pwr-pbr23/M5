/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import java util collections
import java util hashmap
import java util iterator
import java util map
/**
* represents a variable scope. this is primarily used to determine variable sharing
* across method and closure boundaries.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author jochen theodorou
* @version $revision$
*/
public class variablescope
private map declaredvariables   collections empty_map
private map referencedlocalvariables   collections empty_map
private map referencedclassvariables   collections empty_map
private boolean instaticcontext   false
private boolean resolvesdynamic   false
private classnode clazzscope
private variablescope parent
public variablescope
public variablescope variablescope parent
this parent   parent
public variable getdeclaredvariable string name
return  variable  declaredvariables get name
public boolean isreferencedlocalvariable string name
return referencedlocalvariables containskey name
public boolean isreferencedclassvariable string name
return referencedclassvariables containskey name
public variablescope getparent
return parent
public boolean isinstaticcontext
return instaticcontext
public void setinstaticcontext boolean instaticcontext
this instaticcontext   instaticcontext
public boolean isresolvingdynamic
return resolvesdynamic
public void setdynamicresolving boolean resolvesdynamic
this resolvesdynamic   resolvesdynamic
public void setclassscope classnode node
this clazzscope   node
public classnode getclassscope
return clazzscope
public boolean isclassscope
return clazzscope  null
public boolean isroot
return parent  null
public variablescope copy
variablescope copy   new variablescope
copy clazzscope   clazzscope
if  declaredvariables size   > 0
copy declaredvariables   new hashmap
copy declaredvariables putall declaredvariables
copy instaticcontext   instaticcontext
copy parent   parent
if  referencedclassvariables size   > 0
copy referencedclassvariables   new hashmap
copy referencedclassvariables putall referencedclassvariables
if  referencedlocalvariables size   > 0
copy referencedlocalvariables   new hashmap
copy referencedlocalvariables putall referencedlocalvariables
copy resolvesdynamic   resolvesdynamic
return copy
public void putdeclaredvariable variable var
if  declaredvariables    collections empty_map
declaredvariables   new hashmap
declaredvariables put var getname    var
public iterator getreferencedlocalvariablesiterator
return referencedlocalvariables values   iterator
public int getreferencedlocalvariablescount
return referencedlocalvariables size
public variable getreferencedlocalvariable string name
return  variable  referencedlocalvariables get name
public void putreferencedlocalvariable variable var
if  referencedlocalvariables    collections empty_map
referencedlocalvariables   new hashmap
referencedlocalvariables put var getname    var
public void putreferencedclassvariable variable var
if  referencedclassvariables    collections empty_map
referencedclassvariables   new hashmap
referencedclassvariables put var getname    var
public variable getreferencedclassvariable string name
return  variable  referencedclassvariables get name
public object removereferencedclassvariable string name
if  referencedclassvariables    collections empty_map
return null
else
return referencedclassvariables remove name
/**
* gets a map containing the class variables referenced
* by this scope. this not can not be modified.
* @return a map containing the class variable references
*/
public map getreferencedclassvariables
if  referencedclassvariables    collections empty_map
return collections empty_map
else
return collections unmodifiablemap referencedclassvariables
/**
* gets an iterator for the referenced class variables. the
* remove operation is not supported.
* @return an iterator for the referenced class variables
*/
public iterator getreferencedclassvariablesiterator
return getreferencedclassvariables   values   iterator