/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy syntax
import org codehaus groovy groovybugerror
/**
*  a <code>cstnode</code> produced by the <code>lexer</code>.
*
*  @see antlr.parser
*  @see antlr.token
*  @see reduction
*  @see types
*
*  @author <a href="mailto:bob@werken.com">bob mcwhirter</a>
*  @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
*
*  @version $id$
*/
public class token extends cstnode
public static final token null   new token
public static final token eof    new token  types eof      1   1
//---------------------------------------------------------------------------
// token initialization and such
private int type          types unknown      the actual type identified by the lexer
private int meaning       types unknown      an interpretation applied to the token after the fact
private string     text                     the text of the token
private int   startline    1                 the source line on which the token begins
private int startcolumn    1                 the source column on which the token begins
/**
*  initializes the token with the specified information.
*/
public token  int type  string text  int startline  int startcolumn
this type          type
this meaning       type
this text          text
this startline     startline
this startcolumn   startcolumn
/**
*  initializes the null token.
*/
private token
/**
*  returns a copy of this token.
*/
public token dup
token token   new token  this type  this text  this startline  this startcolumn
token setmeaning  this meaning
return token
//---------------------------------------------------------------------------
// node identification and meaning
/**
*  returns the meaning of this node.  if the node isempty(), returns
*  the type of token.null.
*/
public int getmeaning
return meaning
/**
*  sets the meaning for this node (and it's root token).  not
*  valid if the node isempty().  returns this token, for
*  convenience.
*/
public cstnode setmeaning  int meaning
this meaning   meaning
return this
/**
*  returns the actual type of the node.  if the node isempty(), returns
*  the type of token.null.
*/
public int gettype
return type
//---------------------------------------------------------------------------
// member access
/**
*  returns the number of elements in the node (including root).
*/
public int size
return 1
/**
*  returns the specified element, or null.
*/
public cstnode get  int index
if  index > 0
throw new groovybugerror
return this
/**
*  returns the root of the node.  by convention, all nodes have
*  a token as the first element (or root), which indicates the type
*  of the node.  may return null if the node <code>isempty()</code>.
*/
public token getroot
return this
/**
*  returns the text of the root node.  uses <code>getroot(true)</code>
*  to get the root, so you will only receive null in return if the
*  root token returns it.
*/
public string getroottext
return text
/**
*  returns the text of the token.  equivalent to
*  <code>getroottext()</code> when called directly.
*/
public string gettext
return text
/**
*  not advisable, but if you need to adjust the token's text, this
*  will do it.
*/
public void settext  string text
this text   text
/**
*  returns the starting line of the node.  returns -1
*  if not known.
*/
public int getstartline
return startline
/**
*  returns the starting column of the node.  returns -1
*  if not known.
*/
public int getstartcolumn
return startcolumn
//---------------------------------------------------------------------------
// operations
/**
*  creates a <code>reduction</code> from this token.  returns self if the
*  node is already a <code>reduction</code>.
*/
public reduction asreduction
return new reduction  this
/**
*  creates a <code>reduction</code> from this token, adding the supplied
*  node as the second element.
*/
public reduction asreduction  cstnode second
reduction created   asreduction
created add  second
return created
/**
*  creates a <code>reduction</code> from this token, adding the supplied
*  nodes as the second and third element, respectively.
*/
public reduction asreduction  cstnode second  cstnode third
reduction created   asreduction  second
created add  third
return created
/**
*  creates a <code>reduction</code> from this token, adding the supplied
*  nodes as the second, third, and fourth element, respectively.
*/
public reduction asreduction  cstnode second  cstnode third  cstnode fourth
reduction created   asreduction  second  third
created add  fourth
return created
//---------------------------------------------------------------------------
// token factories
/**
*  creates a token that represents a keyword.  returns null if the
*  specified text isn't a keyword.
*/
public static token newkeyword  string text  int startline  int startcolumn
int type   types lookupkeyword  text
if  type    types unknown
return new token  type  text  startline  startcolumn
return null
/**
*  creates a token that represents a double-quoted string.
*/
public static token newstring  string text  int startline  int startcolumn
return new token  types string  text  startline  startcolumn
/**
*  creates a token that represents an identifier.
*/
public static token newidentifier  string text  int startline  int startcolumn
return new token  types identifier  text  startline  startcolumn
/**
*  creates a token that represents an integer.
*/
public static token newinteger  string text  int startline  int startcolumn
return new token  types integer_number  text  startline  startcolumn
/**
*  creates a token that represents a decimal number.
*/
public static token newdecimal  string text  int startline  int startcolumn
return new token  types decimal_number  text  startline  startcolumn
/**
*  creates a token that represents a symbol, using a library for the text.
*/
public static token newsymbol  int type  int startline  int startcolumn
return new token  type  types gettext type   startline  startcolumn
/**
*  creates a token that represents a symbol, using a library for the type.
*/
public static token newsymbol  string type  int startline  int startcolumn
return new token  types lookupsymbol type   type  startline  startcolumn
/**
*  creates a token with the specified meaning.
*/
public static token newplaceholder  int type
token token   new token  types unknown      1   1
token setmeaning  type
return token