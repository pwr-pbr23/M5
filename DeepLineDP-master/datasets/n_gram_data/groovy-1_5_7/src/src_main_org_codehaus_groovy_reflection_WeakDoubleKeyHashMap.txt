/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy reflection
import java lang ref referencequeue
import java lang ref weakreference
public class weakdoublekeyhashmap extends complexkeyhashmap
private static class ref extends weakreference
public ref object referent  referencequeue q  entry entry
super referent  q
this entry   entry
entry entry
public static class entry extends complexkeyhashmap entry
public ref key1  key2
private final referencequeue queue   new referencequeue
private void expungestaleentries
ref r
while    r    ref  queue poll       null
entry e   r entry
if  e    null
continue
r entry   null
e key1   e key2   null
int h   e hash
int i   h    table length 1
entry prev    entry  table
entry p   prev
while  p    null
entry next    entry  p next
if  p    e
if  prev    e
table   next
else
prev next   next
e next   null      help gc
e value   null
size
break
prev   p
p   next
public final object get object key1  object key2
//    expungestaleentries();
int h   hash  31 key1 hashcode   key2 hashcode
complexkeyhashmap entry e   table
for    e    null  e   e next
if  e hash    h    checkequals  entry  e  key1  key2
return e
return null
public boolean checkequals complexkeyhashmap entry e  object key1  object key2
entry ee    entry  e
return ee key1 get      key1    ee key2 get      key2
public entry getorput object key1  object key2
//    expungestaleentries();
int h   hash  31 key1 hashcode   key2 hashcode
final complexkeyhashmap entry t   table
final int index   h    t length   1
complexkeyhashmap entry e   t
for    e    null  e   e next
if  e hash    h    checkequals  e  key1  key2
return  entry  e
complexkeyhashmap entry entry   createentry key1  key2  h  index
t   entry
if     size    threshold
resize 2  t length
return  entry  entry
private complexkeyhashmap entry createentry object key1  object key2  int h  int index
entry entry   createentry
entry next   table
entry hash   h
entry key1   new ref key1  queue  entry
entry key2   new ref key2  queue  entry
return entry
public entry createentry
return new entry
public int size
expungestaleentries
return super size
public final complexkeyhashmap entry remove object key1  object key2
expungestaleentries
int h   hash  31 key1 hashcode   key2 hashcode
int index   h    table length  1
for  complexkeyhashmap entry e   table   prev   null  e    null  prev   e  e   e next
if  e hash    h    checkequals  entry  e  key1  key2
if  prev    null
table    e next
else
prev next   e next
size
e next   null
return e
return null