/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import java lang reflect method
import java util hashmap
import java util iterator
import java util list
import java util map
import org codehaus groovy ast astnode
import org codehaus groovy ast annotationnode
import org codehaus groovy ast classhelper
import org codehaus groovy ast classnode
import org codehaus groovy ast expr annotationconstantexpression
import org codehaus groovy ast expr constantexpression
import org codehaus groovy ast expr expression
import org codehaus groovy ast expr listexpression
import org codehaus groovy ast expr propertyexpression
import org codehaus groovy control errorcollector
import org codehaus groovy control sourceunit
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy syntax syntaxexception
/**
* an annotation visitor responsible with:
* - reading annotation metadata (@retention, @target, attribute types)
* - verify that an <code>annotationnode</code> conforms to annotation meta
* - enhancing an <code>annotationnode</code> ast to reflect real annotation meta
*
* @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>alex popescu</a>
*/
public class annotationvisitor
private static final class empty_arg_types   new class
private static final object empty_args   new object
private final class annotationrootclass
private sourceunit source
private errorcollector errorcollector
private annotationnode annotation
private class annotationclass
private map requiredattrtypes   new hashmap       map<string  class>
private map defaultattrtypes   new hashmap        map<string  class>
public annotationvisitor sourceunit source  errorcollector errorcollector
this source   source
this errorcollector   errorcollector
this annotationrootclass   loadannotationrootclass
public annotationnode visit annotationnode node
if  isvalidannotationclass node
node setvalid false
return node
this annotation   node
if  node getclassnode   isresolved
adderror
node setvalid false
return node
this annotationclass   node getclassnode   gettypeclass
extractannotationmeta this annotationclass
if this errorcollector haserrors
this annotation setvalid false
return this annotation
map attributes   this annotation getmembers
for iterator it   attributes entryset   iterator    it hasnext
map entry entry    map entry  it next
string attrname    string  entry getkey
expression attrexpr    expression  entry getvalue
class attrtype   getattributetype attrname
if attrtype    null
adderror     attrname      attrexpr
break
visitexpression attrname  attrexpr  attrtype
if  this requiredattrtypes isempty
adderror     this requiredattrtypes keyset
this annotation
this annotation setvalid  this errorcollector haserrors
return this annotation
/**
* @param node
* @return
*/
private boolean isvalidannotationclass annotationnode node
return node getclassnode   implementsinterface classhelper annotation_type
protected void visitexpression string attrname  expression attrast  class attrtype
if attrtype isarray
// check needed as @test(attr = {"elem"}) passes through the parser
if attrast instanceof listexpression
visitlistexpression attrname   listexpression  attrast  attrtype getcomponenttype
else
adderror    attrast
if attrtype isprimitive
visitconstantexpression attrname   constantexpression  attrast  classhelper getwrapper classhelper make attrtype
else if string class equals attrtype
visitconstantexpression attrname   constantexpression  attrast  classhelper make string class
else if class class equals attrtype
// there is nothing to check about classexpressions
else if isenum attrtype
if attrast instanceof propertyexpression
visitenumexpression attrname   propertyexpression  attrast  classhelper make attrtype
else
adderror     attrname  attrast
else if isannotation attrtype
visitannotationexpression attrname   annotationconstantexpression  attrast  attrtype
/**
* @param attrname
* @param expression
* @param attrtype
*/
protected void visitannotationexpression string attrname  annotationconstantexpression expression  class attrtype
annotationnode annotationnode    annotationnode  expression getvalue
annotationvisitor visitor   new annotationvisitor this source  this errorcollector
visitor visit annotationnode
protected void visitlistexpression string attrname  listexpression listexpr  class elementtype
list expressions   listexpr getexpressions
for  int i   0  i < expressions size    i
visitexpression attrname   expression  expressions get i   elementtype
protected void visitconstantexpression string attrname  constantexpression constexpr  classnode attrtype
if  constexpr gettype   isderivedfrom attrtype
adderror     attrname       attrtype getname
constexpr gettype   getname
constexpr
protected void visitenumexpression string attrname  propertyexpression propexpr  classnode attrtype
if  propexpr getobjectexpression   gettype   isderivedfrom attrtype
adderror     attrname       attrtype getname
propexpr getobjectexpression   gettype   getname
propexpr
private boolean isannotation class clazz
boolean result    boolean  invoke clazz getclass       empty_arg_types  clazz  empty_args
return result booleanvalue
private boolean isenum class clazz
boolean result    boolean  invoke clazz getclass       empty_arg_types  clazz  empty_args
return result booleanvalue
private void extractannotationmeta class annotationclass
initializeannotationmeta annotationclass
initializeattributetypes annotationclass
private void initializeannotationmeta class annotationclass
object annotations    object  invoke annotationclass getclass
empty_arg_types  annotationclass  empty_args
if  annotations    null
adderror
extendedverifier jvm_error_message
return
for int i   0  i < annotations length  i
class annotationtype    class  invoke this annotationrootclass
empty_arg_types  annotations  empty_args
if  annotationtype    null  continue
if    equals annotationtype getname
initializeretention annotationclass  annotationtype  annotations
else if   equals annotationtype getname
initializetarget annotationclass  annotationtype  annotations
private void initializeattributetypes class annotationclass
method methods   annotationclass getdeclaredmethods
for int i   0  i < methods length  i
object defaultvalue   invoke method class     empty_arg_types  methods  empty_args
if  defaultvalue    null
// by now we know jdk1.5 api is available so a null means no default value
defaultattrtypes put methods getname    methods getreturntype
else
requiredattrtypes put methods getname    methods getreturntype
private void initializeretention class annotationclass  class retentionclass  object retentionannotation
object retentionpolicyenum
invoke retentionclass     empty_arg_types  retentionannotation  empty_args
if  retentionpolicyenum    null
adderror     annotationclass getname
extendedverifier jvm_error_message
return
if   equals retentionpolicyenum tostring
this annotation setruntimeretention true
else if   equals retentionpolicyenum tostring
this annotation setsourceretention true
private void initializetarget class annotationclass  class targetclass  object targetannotation
object elementtypeenum
object  invoke targetclass     empty_arg_types  targetannotation  empty_args
if  elementtypeenum    null
adderror     annotationclass getname
extendedverifier jvm_error_message
return
int bitmap   0
for  int i   0  i < elementtypeenum length  i
string targetname   elementtypeenum tostring
if   equals targetname
bitmap    annotationnode type_target
else if   equals targetname
bitmap    annotationnode constructor_target
else if   equals targetname
bitmap    annotationnode method_target
else if   equals targetname
bitmap    annotationnode field_target
else if   equals targetname
bitmap    annotationnode parameter_target
else if   equals targetname
bitmap    annotationnode local_variable_target
else if   equals targetname
bitmap    annotationnode annotation_target
this annotation setallowedtargets bitmap
protected void adderror string msg
this errorcollector adderrorandcontinue
new syntaxerrormessage new syntaxexception msg
this annotationclass getname
this annotation getlinenumber
this annotation getcolumnnumber     this source
protected void adderror string msg  astnode expr
this errorcollector adderrorandcontinue
new syntaxerrormessage new syntaxexception msg
this annotationclass getname
expr getlinenumber
expr getcolumnnumber     this source
private class getattributetype string attr
if this requiredattrtypes containskey attr
return  class  this requiredattrtypes remove attr
return  class  this defaultattrtypes remove attr
private object invoke class clazz  string methodname  class argtypes  object target  object args
try
method m   clazz getmethod methodname  argtypes
return m invoke target  args
catch throwable cause
// we report an error on called side
return null
private class loadannotationrootclass
try
return class forname
catch throwable cause
// report the error later
return null