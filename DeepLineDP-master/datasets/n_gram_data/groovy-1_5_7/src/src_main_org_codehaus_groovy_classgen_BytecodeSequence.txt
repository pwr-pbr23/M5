/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import java util iterator
import java util list
import org codehaus groovy ast astnode
import org codehaus groovy ast groovycodevisitor
import org codehaus groovy ast stmt statement
/**
* this class repersents a sequence of bytecodeinstructions
* or astnodes. the evaluation is dpeending on the type of
* the visitor.
*
* @see bytecodeinstruction
* @see astnode
*/
public class bytecodesequence extends statement
private final list instructions
public bytecodesequence list instructions
this instructions   instructions
/**
* delegates to the visit method used for this class.
* if the visitor is a classgenerator, then
* {@link classgenerator#visitbytecodesequence(bytecodesequence)}
* is called with this instance. if the visitor is no
* classgenerator, then this method will call visit on
* each astnode element sotred by this class. if one
* element is a bytecodeinstruction, then it will be skipped
* as it is no astnode.
*
* @param visitor the visitor
* @see classgenerator
*/
public void visit groovycodevisitor visitor
if  visitor instanceof classgenerator
classgenerator gen    classgenerator  visitor
gen visitbytecodesequence this
return
for  iterator iterator   instructions iterator    iterator hasnext
object part    object  iterator next
if  part instanceof astnode
astnode part  visit visitor
public list getinstructions
return instructions