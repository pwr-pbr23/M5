/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy runtime defaultgroovymethods
import org codehaus groovy runtime invokerhelper
import java io ioexception
import java io serializable
import java io stringwriter
import java io writer
import java util arraylist
import java util arrays
import java util list
import java util regex pattern
/**
* represents a string which contains embedded values such as "hello there
* ${user} how are you?" which can be evaluated lazily. advanced users can
* iterate over the text and values to perform special processing, such as for
* performing sql operations, the values can be substituted for ? and the
* actual value objects can be bound to a jdbc statement. the lovely name of
* this class was suggested by jules gosnell and was such a good idea, i
* couldn't resist :)
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public abstract class gstring extends groovyobjectsupport implements comparable  charsequence  writable  buildable  serializable
static final long serialversionuid    2638020355892246323l
private object values
public gstring object values
this values    object  values
public gstring object values
this values   values
// will be static in an instance
public abstract string getstrings
/**
* overloaded to implement duck typing for strings
* so that any method that can't be evaluated on this
* object will be forwarded to the tostring() object instead.
*/
public object invokemethod string name  object args
try
return super invokemethod name  args
catch  missingmethodexception e
// lets try invoke the method on the real string
return invokerhelper invokemethod tostring    name  args
public object getvalues
return values
public gstring plus gstring that
list stringlist   new arraylist
list valuelist   new arraylist
stringlist addall arrays aslist getstrings
valuelist addall arrays aslist getvalues
list thatstrings   arrays aslist that getstrings
if  stringlist size   > valuelist size
thatstrings   new arraylist thatstrings
// merge onto end of previous gstring to avoid an empty bridging value
string s    string  stringlist get stringlist size     1
s    thatstrings get 0
thatstrings remove 0
stringlist set stringlist size     1  s
stringlist addall thatstrings
valuelist addall arrays aslist that getvalues
final string newstrings   new string
stringlist toarray newstrings
object newvalues   valuelist toarray
return new gstring newvalues
public string getstrings
return newstrings
public gstring plus string that
string currentstrings   getstrings
string newstrings   null
object newvalues   null
boolean appendtolaststring   currentstrings length > getvalues   length
if  appendtolaststring
newstrings   new string
else
newstrings   new string
newvalues   new object
int lastindex   currentstrings length
system arraycopy currentstrings  0  newstrings  0  lastindex
system arraycopy getvalues    0  newvalues  0  getvalues   length
if  appendtolaststring
newstrings    that
else
newstrings   that
final string finalstrings   newstrings
return new gstring newvalues
public string getstrings
return finalstrings
public int getvaluecount
return values length
public object getvalue int idx
return values
public string tostring
stringwriter buffer   new stringwriter
try
writeto buffer
catch  ioexception e
throw new stringwriterioexception e
return buffer tostring
public writer writeto writer out  throws ioexception
string s   getstrings
int numberofvalues   values length
for  int i   0  size   s length  i < size  i
out write s
if  i < numberofvalues
final object value   values
if  value instanceof closure
final closure c    closure value
if  c getmaximumnumberofparameters      0
invokerhelper write out  c call null
else if  c getmaximumnumberofparameters      1
c call new object out
else
throw new groovyruntimeexception
c getmaximumnumberofparameters
else
invokerhelper write out  value
return out
/* (non-javadoc)
* @see groovy.lang.buildable#build(groovy.lang.groovyobject)
*/
public void build final groovyobject builder
final string s   getstrings
final int numberofvalues   values length
for  int i   0  size   s length  i < size  i
builder getproperty
builder invokemethod    new object s
if  i < numberofvalues
builder getproperty
builder invokemethod    new object values
public boolean equals object that
if  that instanceof gstring
return equals  gstring  that
return false
public boolean equals gstring that
return tostring   equals that tostring
public int hashcode
return 37   tostring   hashcode
public int compareto object that
return tostring   compareto that tostring
public char charat int index
return tostring   charat index
public int length
return tostring   length
public charsequence subsequence int start  int end
return tostring   subsequence start  end
/**
* turns a string into a regular expression pattern
*
* @return the regular expression pattern
*/
public pattern negate
return defaultgroovymethods bitwisenegate tostring