package org codehaus groovy runtimemetaclassactionssupport
import groovy lang gstring
import java lang reflect method
/*
* copyright 2005 john g. wilson
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*
*/
/**
* @author john wilson
*
*/
public abstract class methodgenerator
protected final static string default_groovy_methods
protected final static string default_static_groovy_methods
protected final method method
/**
* @param method
*/
public methodgenerator method method
this method   method
public string getname
return this method getname
public int getnumberofparameters
return this method getparametertypes   length
public class getparametertypes
return this method getparametertypes
public boolean isoverloaded final methodgenerator other
return getname   equals other getname       getnumberofparameters      other getnumberofparameters
public methodgenerator processoverloaded final class claz  final methodgenerator other
final class p1   getparametertypes
final class p2   other getparametertypes
for  int i   0  i    p1 length  i
if  p1    p2
return new overloadedmethodsgenerator this  other      we have an overloaded method
// we have a duplicate - return the one which has its declaring class as the current class
if  this method getdeclaringclass      claz
return this
else
return other
public string generatedeclaration int methodindex
return
public string generatecall final class claz
final stringbuffer code   new stringbuffer
final class returntype   method getreturntype
if  returntype isprimitive
if  returntype    void class
makecall code  append
else if  returntype    int class
code append
makecall code  append
else if  returntype    long class
code append
makecall code  append
else if  returntype    short class
code append
makecall code  append
else if  returntype    char class
code append
makecall code  append
else if  returntype    byte class
code append
makecall code  append
else if  returntype    boolean class
code append
makecall code  append
else if  returntype    float class
code append
makecall code  append
else if  returntype    double class
code append
makecall code  append
else
code append     returntype getname
else
code append
makecall code  append
return code tostring
private stringbuffer makecall final stringbuffer code
startcall code
addparameters code  this method getparametertypes    append
return code
protected abstract void startcall stringbuffer code
protected stringbuffer addparameters final stringbuffer code  final class parametertypes
if  parametertypes length    0
for  int i   0  i    parametertypes length  i
final class parametertype   parametertypes
if  parametertype isprimitive
if  parametertype    int class
code append    append
code append i  append
else if  parametertype    long class
code append    append
code append i  append
else if  parametertype    short class
code append    append
code append i  append
else if  parametertype    char class
code append    append
code append i  append
else if  parametertype    byte class
code append    append
code append i  append
else if  parametertype    boolean class
code append    append
code append i  append
else if  parametertype    float class
code append    append
code append i  append
else if  parametertype    double class
code append    append
code append i  append
else
code append     parametertype getname
else if  parametertype    string class
code append    append i  append
else if  parametertype    gstring class
code append    append i  append
code append    append i  append
code append    append i  append
else
code append
getfullname parametertype  code
code append    append i  append
code setlength code length     2       trim the last   off
return code
protected stringbuffer getfullname final class claz  final stringbuffer code
final package classpackage    claz isarray    ? claz getcomponenttype   getpackage     claz getpackage
if  classpackage    null
code append classpackage getname    append
return code append claz getsimplename