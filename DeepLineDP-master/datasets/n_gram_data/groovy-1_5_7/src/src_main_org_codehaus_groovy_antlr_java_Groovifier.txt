/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr java
import org codehaus groovy antlr groovysourceast
import org codehaus groovy antlr parser groovytokentypes
import org codehaus groovy antlr treewalker visitoradapter
public class groovifier extends visitoradapter implements groovytokentypes
private string tokennames
private string currentclassname
public groovifier string tokennames
this tokennames   tokennames
}
public void visitclassdef groovysourceast t int visit
if  visit    opening_visit
currentclassname   t childoftype groovytokentypes ident  gettext
}
}
public void visitdefault groovysourceast t int visit
if  visit    opening_visit
// only want to do this once per node...
// remove 'public' when implied already
if  t gettype      literal_public
t settype expr
}
// constructors are not distinguished from methods in java ast
if  t gettype      method_def
string methodname   t childoftype ident  gettext
if  methodname    null    methodname length   > 0
if  methodname equals currentclassname
t settype ctor_ident
}
}
}
/*        	if (t.gettype() == modifiers) {
groovysourceast publicnode = t.childoftype(literal_public);
if (t.getnumberofchildren() > 1 && publicnode != null) {
// has more than one modifier, and one of them is public
// delete 'public' node
publicnode.settype(expr); // near enough the same as delete for now...
}
}*/
// ----
}
}
}