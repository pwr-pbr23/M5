/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy syntax
import java math biginteger
import java math bigdecimal
/**
*  helper class for processing groovy numeric literals.
*
*  @author brian larson
*  @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
*
*  @version $id$
*/
public class numbers
//---------------------------------------------------------------------------
// lexing support
/**
*  returns true if the specified character is a base-10 digit.
*/
public static boolean isdigit  char c
return c >       c <
/**
*  returns true if the specific character is a base-8 digit.
*/
public static boolean isoctaldigit  char c
return c >       c <
/**
*  returns true if the specified character is a base-16 digit.
*/
public static boolean ishexdigit  char c
return isdigit c      c >       c <         c >       c <
/**
*  returns true if the specified character is a valid type specifier
*  for a numeric value.
*/
public static boolean isnumerictypespecifier  char c  boolean isdecimal
if  isdecimal
switch  c
case
case
case
case
case
case
return true
else
switch  c
case
case
case
case
case
case
return true
return false
//---------------------------------------------------------------------------
// parsing support
private static final biginteger max_long      biginteger valueof long max_value
private static final biginteger min_long      biginteger valueof long min_value
private static final biginteger max_integer   biginteger valueof integer max_value
private static final biginteger min_integer   biginteger valueof integer min_value
private static final bigdecimal max_double    new bigdecimal string valueof double max_value
private static final bigdecimal min_double    max_double negate
private static final bigdecimal max_float     new bigdecimal string valueof float max_value
private static final bigdecimal min_float     max_float negate
/**
*  builds a number from the given integer descriptor.  creates the narrowest
*  type possible, or a specific type, if specified.
*
*  @param  text literal text to parse
*  @return instantiated number object
*  @throws numberformatexception if the number does not fit within the type
*          requested by the type specifier suffix (invalid numbers don't make
*          it here)
*/
public static number parseinteger  string text
char c
int length   text length
//
// strip off the sign, if present
boolean negative   false
if   c   text charat 0           c
negative    c
text   text substring  1  length
length    1
//
// determine radix (default is 10).
int radix   10
if  text charat 0          length > 1
if   c   text charat 1           c
radix   16
text   text substring  2  length
length    2
else
radix   8
//
// strip off any type specifier and convert it to lower
// case, if present.
char type          pick best fit
if  isnumerictypespecifier text charat length 1   false
type   character tolowercase  text charat length 1
text   text substring  0  length 1
length    1
//
// add the sign back, if necessary
if  negative
text       text
//
// build the specified type or, if no type was specified, the
// smallest type in which the number will fit.
switch  type
case
return new integer  integer parseint text  radix
case
return new long  long parselong text  radix
case
return new biginteger  text  radix
default
//
// if not specified, we will return the narrowest possible
// of integer, long, and biginteger.
biginteger value   new biginteger  text  radix
if  value compareto max_integer  <  0    value compareto min_integer  >  0
return new integer value intvalue
else if  value compareto max_long  <  0    value compareto min_long  >  0
return new long value longvalue
return value
/**
*  builds a number from the given decimal descriptor.  uses bigdecimal,
*  unless, double or float is requested.
*
*  @param  text literal text to parse
*  @return instantiated number object
*  @throws numberformatexception if the number does not fit within the type
*          requested by the type specifier suffix (invalid numbers don't make
*          it here)
*/
public static number parsedecimal  string text
int length   text length
//
// strip off any type specifier and convert it to lower
// case, if present.
char type
if  isnumerictypespecifier text charat length 1   true
type   character tolowercase  text charat length 1
text   text substring  0  length 1
length    1
//
// build the specified type or default to bigdecimal
bigdecimal value   new bigdecimal  text
switch  type
case
if  value compareto max_float  <  0    value compareto min_float  >  0
return new float  text
throw new numberformatexception
case
if  value compareto max_double  <  0    value compareto min_double  >  0
return new double  text
throw new numberformatexception
case
default
return value