/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime wrappers
//import java.lang.reflect.constructor;
//import java.lang.reflect.method;
//import java.util.list;
//import java.util.map;
//
//import org.codehaus.groovy.ast.classnode;
import groovy lang groovyobject
import groovy lang metaclass
//import groovy.lang.metamethod;
/**
* @author john wilson
*
*/
public abstract class wrapper implements groovyobject
protected metaclass delegatingmetaclass
//  protected metaclass delegatingmetaclass = new metaclass(object.class) {
//    /**
//     * @param obj
//     * @see java.lang.object#equals(java.lang.object)
//     */
//    public boolean equals(object obj) {
//      return wrapper.this.getdelegatedmetaclass().equals(obj);
//    }
//
//    /**
//     * @param object
//     * @param attribute
//     * @see groovy.lang.metaclass#getattribute(java.lang.object, java.lang.string)
//     */
//    public object getattribute(object object, string attribute) {
//      return wrapper.this.getdelegatedmetaclass().getattribute(wrapper.this.getwrapped(), attribute);
//    }
//
//    /**
//     * @see groovy.lang.metaclass#getclassnode()
//     */
//    public classnode getclassnode() {
//      return wrapper.this.getdelegatedmetaclass().getclassnode();
//    }
//
//    /**
//     * @see groovy.lang.metaclass#getmetamethods()
//     */
//    public list getmetamethods() {
//      return wrapper.this.getdelegatedmetaclass().getmetamethods();
//    }
//
//    /**
//     * @see groovy.lang.metaclass#getmethods()
//     */
//    public list getmethods() {
//      return wrapper.this.getdelegatedmetaclass().getmethods();
//    }
//
//    /**
//     * @see groovy.lang.metaclass#getproperties()
//     */
//    public list getproperties() {
//      return wrapper.this.getdelegatedmetaclass().getproperties();
//    }
//
//    /**
//     * @param object
//     * @param property
//     * @see groovy.lang.metaclass#getproperty(java.lang.object, java.lang.string)
//     */
//    public object getproperty(object object, string property) {
//      return wrapper.this.getdelegatedmetaclass().getproperty(wrapper.this.getwrapped(), property);
//    }
//
//    /**
//     * @see java.lang.object#hashcode()
//     */
//    public int hashcode() {
//      return wrapper.this.getdelegatedmetaclass().hashcode();
//    }
//
//    /**
//     * @param arguments
//     * @see groovy.lang.metaclass#invokeconstructor(java.lang.object[])
//     */
//    public object invokeconstructor(object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().invokeconstructor(arguments);
//    }
//
//    /**
//     * @param at
//     * @param arguments
//     * @see groovy.lang.metaclass#invokeconstructorat(java.lang.class, java.lang.object[])
//     */
//    public object invokeconstructorat(class at, object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().invokeconstructorat(at, arguments);
//    }
//
//    /**
//     * @param object
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#invokemethod(java.lang.object, java.lang.string, java.lang.object)
//     */
//    public object invokemethod(object object, string methodname, object arguments) {
//      return wrapper.this.getdelegatedmetaclass().invokemethod(wrapper.this.getwrapped(), methodname, arguments);
//    }
//
//    /**
//     * @param object
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#invokemethod(java.lang.object, java.lang.string, java.lang.object[])
//     */
//    public object invokemethod(object object, string methodname, object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().invokemethod(wrapper.this.getwrapped(), methodname, arguments);
//    }
//
//    /**
//     * @param object
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#invokestaticmethod(java.lang.object, java.lang.string, java.lang.object[])
//     */
//    public object invokestaticmethod(object object, string methodname, object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().invokestaticmethod(wrapper.this.getwrapped(), methodname, arguments);
//    }
//
//    /**
//     * @param arguments
//     * @see groovy.lang.metaclass#retrieveconstructor(java.lang.class[])
//     */
//    public constructor retrieveconstructor(class[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().retrieveconstructor(arguments);
//    }
//
//    /**
//     * @param owner
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#retrievemethod(java.lang.object, java.lang.string, java.lang.object[])
//     */
//    public metamethod retrievemethod(object owner, string methodname, object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().retrievemethod(owner, methodname, arguments);
//    }
//
//    /**
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#retrievemethod(java.lang.string, java.lang.class[])
//     */
//    public metamethod retrievemethod(string methodname, class[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().retrievemethod(methodname, arguments);
//    }
//
//    /**
//     * @param methodname
//     * @param arguments
//     * @see groovy.lang.metaclass#retrievestaticmethod(java.lang.string, java.lang.class[])
//     */
//    public metamethod retrievestaticmethod(string methodname, class[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().retrievestaticmethod(methodname, arguments);
//    }
//
//    /**
//     * @param object
//     * @param attribute
//     * @param newvalue
//     * @see groovy.lang.metaclass#setattribute(java.lang.object, java.lang.string, java.lang.object)
//     */
//    public void setattribute(object object, string attribute, object newvalue) {
//      wrapper.this.getdelegatedmetaclass().setattribute(wrapper.this.getwrapped(), attribute, newvalue);
//    }
//
//    /**
//     * @param bean
//     * @param map
//     * @see groovy.lang.metaclass#setproperties(java.lang.object, java.util.map)
//     */
//    public void setproperties(object bean, map map) {
//      wrapper.this.getdelegatedmetaclass().setproperties(wrapper.this.getwrapped(), map);
//    }
//
//    /**
//     * @param object
//     * @param property
//     * @param newvalue
//     * @see groovy.lang.metaclass#setproperty(java.lang.object, java.lang.string, java.lang.object)
//     */
//    public void setproperty(object object, string property, object newvalue) {
//      wrapper.this.getdelegatedmetaclass().setproperty(wrapper.this.getwrapped(), property, newvalue);
//    }
//
//    /**
//     * @see java.lang.object#tostring()
//     */
//    public string tostring() {
//      return wrapper.this.getdelegatedmetaclass().tostring();
//    }
//
//    /* (non-javadoc)
//     * @see groovy.lang.metaclass#addnewinstancemethod(java.lang.reflect.method)
//     */
//    public void addnewinstancemethod(method method) {
//      wrapper.this.getdelegatedmetaclass().addnewinstancemethod(method);
//    }
//
//    /* (non-javadoc)
//     * @see groovy.lang.metaclass#addnewstaticmethod(java.lang.reflect.method)
//     */
//    public void addnewstaticmethod(method method) {
//      wrapper.this.getdelegatedmetaclass().addnewstaticmethod(method);
//    }
//
//    /* (non-javadoc)
//     * @see groovy.lang.metaclass#checkinitialised()
//     */
//    public void checkinitialised() {
//      wrapper.this.getdelegatedmetaclass().checkinitialised();
//    }
//
//    /* (non-javadoc)
//     * @see groovy.lang.metaclass#pickmethod(java.lang.object, java.lang.string, java.lang.object[])
//     */
//    public metamethod pickmethod(object object, string methodname, object[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().pickmethod(object, methodname, arguments);
//    }
//
//    /* (non-javadoc)
//     * @see groovy.lang.metaclass#pickmethod(java.lang.string, java.lang.class[])
//     */
//    public metamethod pickmethod(string methodname, class[] arguments) {
//      return wrapper.this.getdelegatedmetaclass().pickmethod(methodname, arguments);
//    }
//  };
protected final class constrainedtype
public wrapper final class constrainedtype
this constrainedtype   constrainedtype
/* (non-javadoc)
* @see groovy.lang.groovyobject#getmetaclass()
*
* this will only be useful post 1.0
*/
public metaclass getmetaclass
return this delegatingmetaclass
public abstract object unwrap
public class gettype
return this constrainedtype
protected abstract object getwrapped
protected abstract metaclass getdelegatedmetaclass