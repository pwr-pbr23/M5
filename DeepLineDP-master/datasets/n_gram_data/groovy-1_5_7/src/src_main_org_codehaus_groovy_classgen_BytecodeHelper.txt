/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import org codehaus groovy ast
import org codehaus groovy runtime typehandling defaulttypetransformation
import org codehaus groovy reflection reflectioncache
import org objectweb asm label
import org objectweb asm methodvisitor
import org objectweb asm opcodes
import java math bigdecimal
import java math biginteger
/**
* a helper class for bytecode generation with asmclassgenerator.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author <a href="mailto:b55r@sina.com">bing ran</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @version $revision$
*/
public class bytecodehelper implements opcodes
private methodvisitor mv
public methodvisitor getmethodvisitor
return mv
public bytecodehelper methodvisitor mv
this mv   mv
/**
* box the primitive value on the stack
*
* @param type
*/
public void quickboxifnecessary classnode type
string descr   gettypedescription type
if  type    classhelper boolean_type
boxboolean
else if  classhelper isprimitivetype type     type    classhelper void_type
classnode wrapper   classhelper getwrapper type
string internname   getclassinternalname wrapper
mv visittypeinsn new  internname
mv visitinsn dup
if  type    classhelper double_type    type    classhelper long_type
mv visitinsn dup2_x2
mv visitinsn pop2
else
mv visitinsn dup2_x1
mv visitinsn pop2
mv visitmethodinsn invokespecial  internname         descr
public void quickunboxifnecessary classnode type
if  classhelper isprimitivetype type     type    classhelper void_type       todo care when bigdecimal or bigineteger on stack
classnode wrapper   classhelper getwrapper type
string internname   getclassinternalname wrapper
if  type    classhelper boolean_type
mv visittypeinsn checkcast  internname
mv visitmethodinsn invokevirtual  internname  type getname            gettypedescription type
else      numbers
mv visittypeinsn checkcast
mv visitmethodinsn invokevirtual    internname     type getname            gettypedescription type
/**
* generates the bytecode to autobox the current value on the stack
*/
public void box class type
if  reflectioncache getcachedclass type  isprimitive    type    void class
string returnstring       gettypedescription type
mv visitmethodinsn invokestatic  getclassinternalname defaulttypetransformation class getname        returnstring
public void box classnode type
if  type isprimaryclassnode    return
box type gettypeclass
/**
* generates the bytecode to unbox the current value on the stack
*/
public void unbox class type
if  type isprimitive      type    void type
string returnstring       gettypedescription type
mv visitmethodinsn
invokestatic
getclassinternalname defaulttypetransformation class getname
type getname
returnstring
public void unbox classnode type
if  type isprimaryclassnode    return
unbox type gettypeclass
public static string getclassinternalname classnode t
if  t isprimaryclassnode
return getclassinternalname t getname
return getclassinternalname t gettypeclass
public static string getclassinternalname class t
return org objectweb asm type getinternalname t
/**
* @return the asm internal name of the type
*/
public static string getclassinternalname string name
return name replace
/**
* @return the asm method type descriptor
*/
public static string getmethoddescriptor classnode returntype  parameter parameters
stringbuffer buffer   new stringbuffer
for  int i   0  i < parameters length  i
buffer append gettypedescription parameters gettype
buffer append
buffer append gettypedescription returntype
return buffer tostring
/**
* @return the asm method type descriptor
*/
public static string getmethoddescriptor class returntype  class paramtypes
// lets avoid class loading
stringbuffer buffer   new stringbuffer
for  int i   0  i < paramtypes length  i
buffer append gettypedescription paramtypes
buffer append
buffer append gettypedescription returntype
return buffer tostring
public static string gettypedescription class c
return org objectweb asm type getdescriptor c
/**
* array types are special:
* eg.: string[]: classname: [ljava.lang.string;
* object:   classname: java.lang.object
* int[] :   classname: [i
* unlike gettypedescription '.' is not replaced by '/'.
* it seems that makes problems for
* the class loading if '.' is replaced by '/'
*
* @return the asm type description for class loading
*/
public static string getclassloadingtypedescription classnode c
stringbuffer buf   new stringbuffer
boolean array   false
while  true
if  c isarray
buf append
c   c getcomponenttype
array   true
else
if  classhelper isprimitivetype c
buf append gettypedescription c
else
if  array  buf append
buf append c getname
if  array  buf append
return buf tostring
/**
* array types are special:
* eg.: string[]: classname: [ljava/lang/string;
* int[]: [i
*
* @return the asm type description
*/
public static string gettypedescription classnode c
return gettypedescription c  true
/**
* array types are special:
* eg.: string[]: classname: [ljava/lang/string;
* int[]: [i
*
* @return the asm type description
*/
private static string gettypedescription classnode c  boolean end
stringbuffer buf   new stringbuffer
classnode d   c
while  true
if  classhelper isprimitivetype d
char car
if  d    classhelper int_type
car
else if  d    classhelper void_type
car
else if  d    classhelper boolean_type
car
else if  d    classhelper byte_type
car
else if  d    classhelper char_type
car
else if  d    classhelper short_type
car
else if  d    classhelper double_type
car
else if  d    classhelper float_type
car
else    long
car
buf append car
return buf tostring
else if  d isarray
buf append
d   d getcomponenttype
else
buf append
string name   d getname
int len   name length
for  int i   0  i < len    i
char car   name charat i
buf append car      ?     car
if  end  buf append
return buf tostring
/**
* @return an array of asm internal names of the type
*/
public static string getclassinternalnames classnode names
int size   names length
string answer   new string
for  int i   0  i < size  i
answer   getclassinternalname names
return answer
protected void pushconstant boolean value
if  value
mv visitinsn iconst_1
else
mv visitinsn iconst_0
public void pushconstant int value
switch  value
case 0
mv visitinsn iconst_0
break
case 1
mv visitinsn iconst_1
break
case 2
mv visitinsn iconst_2
break
case 3
mv visitinsn iconst_3
break
case 4
mv visitinsn iconst_4
break
case 5
mv visitinsn iconst_5
break
default
if  value >  byte min_value    value <  byte max_value
mv visitintinsn bipush  value
else if  value >  short min_value    value <  short max_value
mv visitintinsn sipush  value
else
mv visitldcinsn new integer value
public void docast class type
if  type    object class
if  type isprimitive      type    void type
unbox type
else
mv visittypeinsn
checkcast
type isarray   ? gettypedescription type    getclassinternalname type getname
public void docast classnode type
if  type    classhelper object_type  return
if  classhelper isprimitivetype type     type    classhelper void_type
unbox type
else
mv visittypeinsn
checkcast
type isarray   ? gettypedescription type    getclassinternalname type
public void load classnode type  int idx
if  type    classhelper double_type
mv visitvarinsn dload  idx
else if  type    classhelper float_type
mv visitvarinsn fload  idx
else if  type    classhelper long_type
mv visitvarinsn lload  idx
else if
type    classhelper boolean_type
type    classhelper char_type
type    classhelper byte_type
type    classhelper int_type
type    classhelper short_type
mv visitvarinsn iload  idx
else
mv visitvarinsn aload  idx
public void load variable v
load v gettype    v getindex
public void store variable v  boolean markstart
classnode type   v gettype
unbox type
int idx   v getindex
if  type    classhelper double_type
mv visitvarinsn dstore  idx
else if  type    classhelper float_type
mv visitvarinsn fstore  idx
else if  type    classhelper long_type
mv visitvarinsn lstore  idx
else if
type    classhelper boolean_type
type    classhelper char_type
type    classhelper byte_type
type    classhelper int_type
type    classhelper short_type
mv visitvarinsn istore  idx
else
mv visitvarinsn astore  idx
public void store variable v
store v  false
/**
* load the constant on the operand stack. primitives auto-boxed.
*/
void loadconstant object value
if  value    null
mv visitinsn aconst_null
else if  value instanceof string
mv visitldcinsn value
else if  value instanceof character
string classname
mv visittypeinsn new  classname
mv visitinsn dup
mv visitldcinsn value
string methodtype
mv visitmethodinsn invokespecial  classname     methodtype
else if  value instanceof number
/** todo it would be more efficient to generate class constants */
number n    number  value
string classname   bytecodehelper getclassinternalname value getclass   getname
mv visittypeinsn new  classname
mv visitinsn dup
string methodtype
if  n instanceof integer
//pushconstant(n.intvalue());
mv visitldcinsn n
methodtype
else if  n instanceof double
mv visitldcinsn n
methodtype
else if  n instanceof float
mv visitldcinsn n
methodtype
else if  n instanceof long
mv visitldcinsn n
methodtype
else if  n instanceof bigdecimal
mv visitldcinsn n tostring
methodtype
else if  n instanceof biginteger
mv visitldcinsn n tostring
methodtype
else if  n instanceof short
mv visitldcinsn n
methodtype
else if  n instanceof byte
mv visitldcinsn n
methodtype
else
throw new classgeneratorexception
value
value getclass   getname
mv visitmethodinsn invokespecial  classname     methodtype
else if  value instanceof boolean
boolean bool    boolean  value
string text    bool booleanvalue    ?
mv visitfieldinsn getstatic     text
else if  value instanceof class
class vc    class  value
if  vc getname   equals
// load nothing here for void
else
throw new classgeneratorexception
value       value getclass   getname
else
throw new classgeneratorexception
value       value getclass   getname
/**
* load the value of the variable on the operand stack. unbox it if it's a reference
*
* @param variable
*/
public void loadvar variable variable
int index   variable getindex
if  variable isholder
mv visitvarinsn aload  index
mv visitmethodinsn invokevirtual
else
load variable
if  variable    variable this_variable    variable    variable super_variable
box variable gettype
public void storevar variable variable
string type   variable gettypename
int index   variable getindex
if  variable isholder
mv visitvarinsn aload  index
mv visitinsn swap
mv visitmethodinsn invokevirtual
else
store variable  false
public void putfield fieldnode fld
putfield fld  getclassinternalname fld getowner
public void putfield fieldnode fld  string ownername
mv visitfieldinsn putfield  ownername  fld getname    gettypedescription fld gettype
public void swapobjectwith classnode type
if  type    classhelper long_type    type    classhelper double_type
mv visitinsn dup_x2
mv visitinsn pop
else
mv visitinsn swap
public void swapwithobject classnode type
if  type    classhelper long_type    type    classhelper double_type
mv visitinsn dup2_x1
mv visitinsn pop2
else
mv visitinsn swap
public static classnode boxonprimitive classnode type
if   type isarray    return classhelper getwrapper type
return boxonprimitive type getcomponenttype    makearray
/**
* convert boolean to boolean
*/
public void boxboolean
label l0   new label
mv visitjumpinsn ifeq  l0
mv visitfieldinsn getstatic
label l1   new label
mv visitjumpinsn goto  l1
mv visitlabel l0
mv visitfieldinsn getstatic
mv visitlabel l1
/**
* negate a boolean on stack. true->false, false->true
*/
public void negateboolean
// code to negate the primitive boolean
label endlabel   new label
label falselabel   new label
mv visitjumpinsn ifne  falselabel
mv visitinsn iconst_1
mv visitjumpinsn goto  endlabel
mv visitlabel falselabel
mv visitinsn iconst_0
mv visitlabel endlabel
/**
* load a message on the stack and remove it right away. good for put a mark in the generated bytecode for debugging purpose.
*
* @param msg
*/
public void mark string msg
mv visitldcinsn msg
mv visitinsn pop
/**
* returns a name that class.forname() can take. notablely for arrays:
* [i, [ljava.lang.string; etc
* regular object type:  java.lang.string
*
* @param name
*/
public static string formatnameforclassloading string name
if  name equals
name equals
name equals
name equals
name equals
name equals
name equals
name equals
name equals
return name
if  name    null
return
if  name startswith
return name replace
if  name startswith
name   name substring 1
if  name endswith
name   name substring 0  name length     1
return name replace
string prefix
if  name endswith          todo need process multi
prefix
name   name substring 0  name length     2
if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else if  name equals
return prefix
else
return prefix       name replace
return name replace
public void dup
mv visitinsn dup
public void doreturn classnode returntype
if  returntype    classhelper double_type
mv visitinsn dreturn
else if  returntype    classhelper float_type
mv visitinsn freturn
else if  returntype    classhelper long_type
mv visitinsn lreturn
else if
returntype    classhelper boolean_type
returntype    classhelper char_type
returntype    classhelper byte_type
returntype    classhelper int_type
returntype    classhelper short_type
//byte,short,boolean,int are all ireturn
mv visitinsn ireturn
else if  returntype    classhelper void_type
mv visitinsn return
else
mv visitinsn areturn
private static boolean hasgenerics parameter param
if  param length    0  return false
for  int i   0  i < param length  i
classnode type   param gettype
if  type getgenericstypes      null  return true
return false
public static string getgenericsmethodsignature methodnode node
genericstype generics   node getgenericstypes
parameter param   node getparameters
classnode returntype   node getreturntype
if  generics    null     hasgenerics param     returntype getgenericstypes      null  return null
stringbuffer ret   new stringbuffer 100
getgenericstypespec ret  generics
genericstype paramtypes   new genericstype
for  int i   0  i < param length  i
classnode ptype   param gettype
if  ptype getgenericstypes      null     ptype isgenericsplaceholder
paramtypes   new genericstype ptype
else
paramtypes   ptype getgenericstypes
addsubtypes ret  paramtypes
if  returntype isgenericsplaceholder
addsubtypes ret  returntype getgenericstypes
else
writegenericsbounds ret  new genericstype returntype   false
return ret tostring
private static boolean usesgenericsinclasssignature classnode node
if   node isusinggenerics    return false
if  node getgenericstypes      null  return true
classnode sclass   node getunresolvedsuperclass false
if  sclass isusinggenerics    return true
classnode interfaces   node getinterfaces
if  interfaces    null
for  int i   0  i < interfaces length  i
if  interfaces isusinggenerics    return true
return false
public static string getgenericssignature classnode node
if   usesgenericsinclasssignature node   return null
genericstype genericstypes   node getgenericstypes
stringbuffer ret   new stringbuffer 100
getgenericstypespec ret  genericstypes
genericstype extendspart   new genericstype node getunresolvedsuperclass false
writegenericsbounds ret  extendspart  true
classnode interfaces   node getinterfaces
for  int i   0  i < interfaces length  i
genericstype interfacepart   new genericstype interfaces
writegenericsbounds ret  interfacepart  false
return ret tostring
private static void getgenericstypespec stringbuffer ret  genericstype genericstypes
if  genericstypes    null  return
ret append
for  int i   0  i < genericstypes length  i
string name   genericstypes getname
ret append name
ret append
writegenericsbounds ret  genericstypes  true
ret append
public static string getgenericsbounds classnode type
genericstype genericstypes   type getgenericstypes
if  genericstypes    null  return null
stringbuffer ret   new stringbuffer 100
if  type isgenericsplaceholder
addsubtypes ret  type getgenericstypes
else
genericstype gt   new genericstype type
writegenericsbounds ret  gt  false
return ret tostring
private static void writegenericsboundtype stringbuffer ret  classnode printtype  boolean writeinterfacemarker
if  writeinterfacemarker    printtype isinterface    ret append
ret append gettypedescription printtype  false
addsubtypes ret  printtype getgenericstypes
if   classhelper isprimitivetype printtype   ret append
private static void writegenericsbounds stringbuffer ret  genericstype type  boolean writeinterfacemarker
if  type getupperbounds      null
classnode bounds   type getupperbounds
for  int i   0  i < bounds length  i
writegenericsboundtype ret  bounds  writeinterfacemarker
else if  type getlowerbound      null
writegenericsboundtype ret  type getlowerbound    writeinterfacemarker
else
writegenericsboundtype ret  type gettype    writeinterfacemarker
private static void addsubtypes stringbuffer ret  genericstype types  string start  string end
if  types    null  return
ret append start
for  int i   0  i < types length  i
string name   types getname
if  types isplaceholder
ret append
ret append name
ret append
else if  types iswildcard
if  types getupperbounds      null
ret append
writegenericsbounds ret  types  false
else if  types getlowerbound      null
ret append
writegenericsbounds ret  types  false
else
ret append
else
writegenericsbounds ret  types  false
ret append end