/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy xml qname
import groovy xml factorysupport
import java io file
import java io fileinputstream
import java io ioexception
import java io inputstream
import java io reader
import java io stringreader
import java util arraylist
import java util hashmap
import java util list
import java util map
import javax xml parsers parserconfigurationexception
import javax xml parsers saxparser
import javax xml parsers saxparserfactory
import org xml sax
/**
* a helper class for parsing xml into a tree of node instances for a
* simple way of processing xml. this parser does not preserve the xml
* infoset - if that's what you need try using w3c dom, dom4j, jdom, xom etc.
* this parser ignores comments and processing instructions and converts
* the xml into a node for each element in the xml with attributes
* and child nodes and strings. this simple model is sufficient for
* most simple use cases of processing xml.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author paul king
* @version $revision$
*/
public class xmlparser implements contenthandler
private stringbuffer bodytext   new stringbuffer
private list stack   new arraylist
private locator locator
private xmlreader reader
private node parent
private boolean trimwhitespace   true
private boolean namespaceaware
public xmlparser   throws parserconfigurationexception  saxexception
this false  true
public xmlparser boolean validating  boolean namespaceaware  throws parserconfigurationexception  saxexception
saxparserfactory factory   factorysupport createsaxparserfactory
factory setnamespaceaware namespaceaware
this namespaceaware   namespaceaware
factory setvalidating validating
reader   factory newsaxparser   getxmlreader
public xmlparser xmlreader reader
this reader   reader
public xmlparser saxparser parser  throws saxexception
reader   parser getxmlreader
/**
* returns the current trim whitespace setting.
*
* @return true if whitespace will be trimmed
*/
public boolean istrimwhitespace
return trimwhitespace
/**
* sets the trim whitespace setting value.
*
* @param trimwhitespace the desired setting value
*/
public void settrimwhitespace boolean trimwhitespace
this trimwhitespace   trimwhitespace
/**
* parses the content of the given file as xml turning it into a tree
* of nodes.
*
* @param file the file containing the xml to be parsed
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parse file file  throws ioexception  saxexception
inputsource input   new inputsource new fileinputstream file
input setsystemid     file getabsolutepath
getxmlreader   parse input
return parent
/**
* parse the content of the specified input source into a tree of nodes.
*
* @param input the inputsource for the xml to parse
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parse inputsource input  throws ioexception  saxexception
getxmlreader   parse input
return parent
/**
* parse the content of the specified input stream into a tree of nodes.
*
* note that using this method will not provide the parser with any uri
* for which to find dtds etc
*
* @param input an inputstream containing the xml to be parsed
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parse inputstream input  throws ioexception  saxexception
inputsource is   new inputsource input
getxmlreader   parse is
return parent
/**
* parse the content of the specified reader into a tree of nodes.
*
* note that using this method will not provide the parser with any uri
* for which to find dtds etc
*
* @param in a reader to read the xml to be parsed
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parse reader in  throws ioexception  saxexception
inputsource is   new inputsource in
getxmlreader   parse is
return parent
/**
* parse the content of the specified uri into a tree of nodes.
*
* @param uri a string containing a uri pointing to the xml to be parsed
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parse string uri  throws ioexception  saxexception
inputsource is   new inputsource uri
getxmlreader   parse is
return parent
/**
* a helper method to parse the given text as xml.
*
* @param text the xml text to parse
* @return the root node of the parsed tree of nodes
* @throws saxexception any sax exception, possibly
*                      wrapping another exception.
* @throws ioexception  an io exception from the parser,
*                      possibly from a byte stream or character stream
*                      supplied by the application.
*/
public node parsetext string text  throws ioexception  saxexception
return parse new stringreader text
/**
* determine if namspace handling is enabled.
*
* @return true if namespace handling is enabled
*/
public boolean isnamespaceaware
return namespaceaware
/**
* enable and/or disable namspace handling.
*
* @param namespaceaware the new desired value
*/
public void setnamespaceaware boolean namespaceaware
this namespaceaware   namespaceaware
// delegated xmlreader methods
//------------------------------------------------------------------------
/* (non-javadoc)
* @see org.xml.sax.xmlreader#getdtdhandler()
*/
public dtdhandler getdtdhandler
return this reader getdtdhandler
/* (non-javadoc)
* @see org.xml.sax.xmlreader#getentityresolver()
*/
public entityresolver getentityresolver
return this reader getentityresolver
/* (non-javadoc)
* @see org.xml.sax.xmlreader#geterrorhandler()
*/
public errorhandler geterrorhandler
return this reader geterrorhandler
/* (non-javadoc)
* @see org.xml.sax.xmlreader#getfeature(java.lang.string)
*/
public boolean getfeature final string uri  throws saxnotrecognizedexception  saxnotsupportedexception
return this reader getfeature uri
/* (non-javadoc)
* @see org.xml.sax.xmlreader#getproperty(java.lang.string)
*/
public object getproperty final string uri  throws saxnotrecognizedexception  saxnotsupportedexception
return this reader getproperty uri
/* (non-javadoc)
* @see org.xml.sax.xmlreader#setdtdhandler(org.xml.sax.dtdhandler)
*/
public void setdtdhandler final dtdhandler dtdhandler
this reader setdtdhandler dtdhandler
/* (non-javadoc)
* @see org.xml.sax.xmlreader#setentityresolver(org.xml.sax.entityresolver)
*/
public void setentityresolver final entityresolver entityresolver
this reader setentityresolver entityresolver
/* (non-javadoc)
* @see org.xml.sax.xmlreader#seterrorhandler(org.xml.sax.errorhandler)
*/
public void seterrorhandler final errorhandler errorhandler
this reader seterrorhandler errorhandler
/* (non-javadoc)
* @see org.xml.sax.xmlreader#setfeature(java.lang.string, boolean)
*/
public void setfeature final string uri  final boolean value  throws saxnotrecognizedexception  saxnotsupportedexception
this reader setfeature uri  value
/* (non-javadoc)
* @see org.xml.sax.xmlreader#setproperty(java.lang.string, java.lang.object)
*/
public void setproperty final string uri  final object value  throws saxnotrecognizedexception  saxnotsupportedexception
this reader setproperty uri  value
// contenthandler interface
//-------------------------------------------------------------------------
public void startdocument   throws saxexception
parent   null
public void enddocument   throws saxexception
stack clear
public void startelement string namespaceuri  string localname  string qname  attributes list
throws saxexception
addtexttonode
object name   getelementname namespaceuri  localname  qname
int size   list getlength
map attributes   new hashmap size
for  int i   0  i < size  i
object attributename   getelementname list geturi i   list getlocalname i   list getqname i
string value   list getvalue i
attributes put attributename  value
parent   new node parent  name  attributes  new nodelist
stack add parent
public void endelement string namespaceuri  string localname  string qname  throws saxexception
addtexttonode
if   stack isempty
stack remove stack size     1
if   stack isempty
parent    node  stack get stack size     1
public void characters char buffer  int start  int length  throws saxexception
bodytext append buffer  start  length
public void startprefixmapping string prefix  string namespaceuri  throws saxexception
public void endprefixmapping string prefix  throws saxexception
public void ignorablewhitespace char buffer  int start  int len  throws saxexception
public void processinginstruction string target  string data  throws saxexception
public locator getdocumentlocator
return locator
public void setdocumentlocator locator locator
this locator   locator
public void skippedentity string name  throws saxexception
// implementation methods
//-------------------------------------------------------------------------
protected xmlreader getxmlreader
reader setcontenthandler this
return reader
protected void addtexttonode
string text   bodytext tostring
if  trimwhitespace
text   text trim
if  text length   > 0
parent children   add text
bodytext   new stringbuffer
protected object getelementname string namespaceuri  string localname  string qname  throws saxexception
string name   localname
string prefix
if   name    null      name length   < 1
name   qname
if  namespaceuri    null    namespaceuri length   <  0
return name
if  qname    null    qname length   > 0    namespaceaware
int index   qname lastindexof
if  index > 0
prefix   qname substring 0  index
return new qname namespaceuri  name  prefix