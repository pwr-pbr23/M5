/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy syntax
import org codehaus groovy groovybugerror
import java util list
import java util arraylist
import java util collections
/**
*  a syntax reduction, produced by the <code>parser</code>.
*
*  @see antlr.parser
*  @see token
*  @see cstnode
*  @see types
*
*  @author <a href="mailto:bob@werken.com">bob mcwhirter</a>
*  @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
*
*  @version $id$
*/
public class reduction extends cstnode
public static final reduction empty   new reduction
//---------------------------------------------------------------------------
// initialization and such
private list    elements    null        the set of child nodes
private boolean marked      false       used for completion marking by some parts of the parser
/**
*  initializes the <code>reduction</code> with the specified root.
*/
public reduction  token root
elements   new arraylist
set  0  root
/**
*  initializes the <code>reduction</code> to empty.
*/
private reduction
elements   collections empty_list
/**
*  creates a new <code>reduction</code> with <code>token.null</code>
*  as it's root.
*/
public static reduction newcontainer
return new reduction  token null
//---------------------------------------------------------------------------
// member access
/**
*  returns true if the node is completely empty (no root, even).
*/
public boolean isempty
return size      0
/**
*  returns the number of elements in the node.
*/
public int size
return elements size
/**
*  returns the specified element, or null.
*/
public cstnode get  int index
cstnode element   null
if  index < size
element    cstnode elements get  index
return element
/**
*  returns the root of the node, the token that indicates it's
*  type.  returns null if there is no root (usually only if the
*  node is a placeholder of some kind -- see isempty()).
*/
public token getroot
if  size   > 0
return  token elements get 0
else
return null
/**
*  marks the node a complete expression.
*/
public void markasexpression
marked   true
/**
*  returns true if the node is a complete expression.
*/
public boolean isanexpression
if  isa types complex_expression
return true
return marked
//---------------------------------------------------------------------------
// operations
/**
*  adds an element to the node.
*/
public cstnode add  cstnode element
return set  size    element
/**
*  sets an element in at the specified index.
*/
public cstnode set  int index  cstnode element
if  elements    null
throw new groovybugerror
if  index    0      element instanceof token
//
// it's not the greatest of design that the interface allows this, but it
// is a tradeoff with convenience, and the convenience is more important.
throw new groovybugerror
//
// fill slots with nulls, if necessary.
int count   elements size
if  index >  count
for  int i   count  i <  index  i
elements add  null
//
// then set in the element.
elements set  index  element
return element
/**
*  removes a node from the <code>reduction</code>.  you cannot remove
*  the root node (index 0).
*/
public cstnode remove  int index
if  index < 1
throw new groovybugerror
return  cstnode elements remove  index
/**
*  creates a <code>reduction</code> from this node.  returns self if the
*  node is already a <code>reduction</code>.
*/
public reduction asreduction
return this