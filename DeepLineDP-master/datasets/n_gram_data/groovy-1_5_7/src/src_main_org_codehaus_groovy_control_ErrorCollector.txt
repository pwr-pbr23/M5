/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import java io printwriter
import java util iterator
import java util linkedlist
import java util list
import org codehaus groovy control messages exceptionmessage
import org codehaus groovy control messages locatedmessage
import org codehaus groovy control messages message
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy control messages warningmessage
import org codehaus groovy syntax cstnode
import org codehaus groovy syntax syntaxexception
/**
* a base class for collecting messages and errors during processing.
* each compilationunit should have one and sourceunits should share
* their errorcollector with the compilationunit.
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @version $id$
*/
public class errorcollector
/**
* warningmessages collected during processing
*/
protected linkedlist warnings
/**
* errormessages collected during processing
*/
protected linkedlist errors
/**
* configuration and other settings that control processing
*/
protected compilerconfiguration configuration
/**
* initialize the errorreporter.
*/
public errorcollector compilerconfiguration configuration
this warnings   null
this errors   null
this configuration   configuration
public void addcollectorcontents errorcollector er
if  er errors  null
if  errors  null
errors   er errors
else
errors addall er errors
if  er warnings  null
if  warnings  null
warnings   er warnings
else
warnings addall er warnings
/**
* adds an error to the message set, but don't fail.
*/
public void adderrorandcontinue message message
if  this errors    null
this errors   new linkedlist
this errors add message
/**
* adds a non-fatal error to the message set.
*/
public void adderror message message  throws compilationfailedexception
adderrorandcontinue message
if  errors  null    this errors size   >  configuration gettolerance
failiferrors
/**
* adds an optionally-fatal error to the message set.  throws
* the unit as a phasefailedexception, if the error is fatal.
*/
public void adderror message message  boolean fatal  throws compilationfailedexception
if  fatal
addfatalerror message
else
adderror message
/**
* convenience wrapper for adderror().
*/
public void adderror syntaxexception error  sourceunit source  throws compilationfailedexception
adderror message create error  source   error isfatal
/**
* convenience wrapper for adderror().
*/
public void adderror string text  cstnode context  sourceunit source  throws compilationfailedexception
adderror new locatedmessage text  context  source
/**
* adds a fatal exception to the message set and throws
* the unit as a phasefailedexception.
*/
public void addfatalerror message message  throws compilationfailedexception
adderror message
failiferrors
public void addexception exception cause  sourceunit source  throws compilationfailedexception
adderror new exceptionmessage cause configuration getdebug   source
failiferrors
/**
* returns true if there are any errors pending.
*/
public boolean haserrors
return this errors    null
/**
* returns true if there are any warnings pending.
*/
public boolean haswarnings
return this warnings    null
/**
* returns the list of warnings, or null if there are none.
*/
public list getwarnings
return this warnings
/**
* returns the list of errors, or null if there are none.
*/
public list geterrors
return this errors
/**
* returns the number of warnings.
*/
public int getwarningcount
return   this warnings    null  ? 0   this warnings size
/**
* returns the number of errors.
*/
public int geterrorcount
return   this errors    null  ? 0   this errors size
/**
* returns the specified warning message, or null.
*/
public warningmessage getwarning int index
if  index < getwarningcount
return  warningmessage  this warnings get index
return null
/**
* returns the specified error message, or null.
*/
public message geterror int index
if  index < geterrorcount
return  message  this errors get index
return null
/**
* returns the last error reported
*/
public message getlasterror
return  message  this errors getlast
/**
* convenience routine to return the specified error's
* underlying syntaxexception, or null if it isn't one.
*/
public syntaxexception getsyntaxerror int index
syntaxexception exception   null
message message   geterror index
if  message    null    message instanceof syntaxerrormessage
exception     syntaxerrormessage  message  getcause
return exception
/**
* convenience routine to return the specified error's
* underlying exception, or null if it isn't one.
*/
public exception getexception int index
exception exception   null
message message   geterror index
if  message    null
if  message instanceof exceptionmessage
exception     exceptionmessage  message  getcause
else if  message instanceof syntaxerrormessage
exception     syntaxerrormessage  message  getcause
return exception
/**
* adds a warningmessage to the message set.
*/
public void addwarning warningmessage message
if  message isrelevant configuration getwarninglevel
if  this warnings    null
this warnings   new linkedlist
this warnings add message
/**
* convenience wrapper for addwarning() that won't create an object
* unless it is relevant.
*/
public void addwarning int importance  string text  cstnode context  sourceunit source
if  warningmessage isrelevant importance  configuration getwarninglevel
addwarning new warningmessage importance  text  context  source
/**
* convenience wrapper for addwarning() that won't create an object
* unless it is relevant.
*/
public void addwarning int importance  string text  object data  cstnode context  sourceunit source
if  warningmessage isrelevant importance  configuration getwarninglevel
addwarning new warningmessage importance  text  data  context  source
/**
* causes the current phase to fail by throwing a
* compilationfailedexception.
*/
protected void failiferrors   throws compilationfailedexception
if  haserrors
throw new multiplecompilationerrorsexception this
//---------------------------------------------------------------------------
// output
private void write printwriter writer  janitor janitor  list messages  string txt
if  messages  null    messages size    0  return
iterator iterator   messages iterator
while  iterator hasnext
message message    message  iterator next
message write writer  janitor
if  configuration getdebug       message instanceof syntaxerrormessage
syntaxerrormessage sem    syntaxerrormessage  message
sem getcause   printstacktrace writer
writer println
writer print messages size
writer print   txt
if  messages size  >1  writer print
writer println
/**
* writes error messages to the specified printwriter.
*/
public void write printwriter writer  janitor janitor
write writer janitor warnings
write writer janitor errors