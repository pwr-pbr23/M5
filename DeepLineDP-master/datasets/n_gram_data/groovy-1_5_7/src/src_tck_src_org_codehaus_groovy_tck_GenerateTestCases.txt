/**
* @author jeremy rayner
*/
package org codehaus groovy tck
import java io
import java nio charset charset
import org apache tools ant
import org apache tools ant taskdefs matchingtask
import org apache tools ant types
import org apache tools ant util
/**
* generates test files. this task can take the following
* arguments:
* <ul>
* <li>sourcedir
* <li>destdir
* </ul>
* both are required.
* <p>
* when this task executes, it will recursively scan the sourcedir
* looking for source files to expand into testcases. this task makes its
* generation decision based on timestamp.
*
* based heavily on the javac implementation in ant
*
* @author <a href="mailto:jeremy.rayner@bigfoot.com">jeremy rayner</a>
* @version $revision$
*/
public class generatetestcases extends matchingtask
private batchgenerate batchgenerate   new batchgenerate
private path src
private file destdir
private path compileclasspath
private path compilesourcepath
private string encoding
protected boolean failonerror   true
protected boolean listfiles   false
protected file compilelist   new file
public generatetestcases
/**
* adds a path for source compilation.
*
* @return a nested src element.
*/
public path createsrc
if  src    null
src   new path getproject
return src createpath
/**
* recreate src.
*
* @return a nested src element.
*/
protected path recreatesrc
src   null
return createsrc
/**
* set the source directories to find the source java files.
* @param srcdir the source directories as a path
*/
public void setsrcdir path srcdir
if  src    null
src   srcdir
else
src append srcdir
batchgenerate setsrcdirpath src tostring
/**
* gets the source dirs to find the source java files.
* @return the source directorys as a path
*/
public path getsrcdir
return src
/**
* set the destination directory into which the java source
* files should be compiled.
* @param destdir the destination director
*/
public void setdestdir file destdir
this destdir   destdir
/**
* enable verbose compiling which will display which files
* are being compiled
* @param verbose
*/
public void setverbose boolean verbose
batchgenerate setverbose  verbose
/**
* gets the destination directory into which the java source files
* should be compiled.
* @return the destination directory
*/
public file getdestdir
return destdir
/**
* set the sourcepath to be used for this compilation.
* @param sourcepath the source path
*/
public void setsourcepath path sourcepath
if  compilesourcepath    null
compilesourcepath   sourcepath
else
compilesourcepath append sourcepath
/**
* gets the sourcepath to be used for this compilation.
* @return the source path
*/
public path getsourcepath
return compilesourcepath
/**
* adds a path to sourcepath.
* @return a sourcepath to be configured
*/
public path createsourcepath
if  compilesourcepath    null
compilesourcepath   new path getproject
return compilesourcepath createpath
/**
* adds a reference to a source path defined elsewhere.
* @param r a reference to a source path
*/
public void setsourcepathref reference r
createsourcepath   setrefid r
/**
* set the classpath to be used for this compilation.
*
* @param classpath an ant path object containing the compilation classpath.
*/
public void setclasspath path classpath
if  compileclasspath    null
compileclasspath   classpath
else
compileclasspath append classpath
/**
* gets the classpath to be used for this compilation.
* @return the class path
*/
public path getclasspath
return compileclasspath
/**
* adds a path to the classpath.
* @return a class path to be configured
*/
public path createclasspath
if  compileclasspath    null
compileclasspath   new path getproject
return compileclasspath createpath
/**
* adds a reference to a classpath defined elsewhere.
* @param r a reference to a classpath
*/
public void setclasspathref reference r
createclasspath   setrefid r
public string createencoding
if  encoding    null
encoding   system getproperty
return encoding
public void setencoding string encoding
this encoding   encoding
public string getencoding
return encoding
/**
* if true, list the source files being handed off to the compiler.
* @param list if true list the source files
*/
public void setlistfiles boolean list
listfiles   list
/**
* get the listfiles flag.
* @return the listfiles flag
*/
public boolean getlistfiles
return listfiles
/**
* indicates whether the build will continue
* even if there are compilation errors; defaults to true.
* @param fail if true halt the build on failure
*/
public void setfailonerror boolean fail
failonerror   fail
/**
* @param proceed inverse of failoferror
*/
public void setproceed boolean proceed
failonerror    proceed
/**
* gets the failonerror flag.
* @return the failonerror flag
*/
public boolean getfailonerror
return failonerror
/**
* executes the task.
* @exception buildexception if an error occurs
*/
public void execute   throws buildexception
checkparameters
resetfilelists
// scan source directories and dest directory to build up
// compile lists
string list   src list
for  int i   0  i < list length  i
file srcdir   getproject   resolvefile list
if   srcdir exists
throw new buildexception       getlocation
directoryscanner ds   this getdirectoryscanner srcdir
string files   ds getincludedfiles
scandir srcdir  destdir    null ? destdir   srcdir  files
compile
/**
* clear the list of files to be compiled and copied..
*/
protected void resetfilelists
compilelist   new file
/**
* scans the directory looking for source files to be compiled.
* the results are returned in the class variable compilelist
*
* @param srcdir   the source directory
* @param destdir  the destination directory
* @param files    an array of filenames
*/
protected void scandir file srcdir  file destdir  string files
globpatternmapper m   new globpatternmapper
m setfrom
m setto
sourcefilescanner sfs   new sourcefilescanner this
file newfiles   sfs restrictasfiles files  srcdir  destdir  m
if  newfiles length > 0
file newcompilelist   new file
system arraycopy compilelist  0  newcompilelist  0  compilelist length
system arraycopy newfiles  0  newcompilelist  compilelist length  newfiles length
compilelist   newcompilelist
/**
* gets the list of files to be compiled.
* @return the list of files as an array
*/
public file getfilelist
return compilelist
protected void checkparameters   throws buildexception
if  src    null
throw new buildexception    getlocation
if  src size      0
throw new buildexception    getlocation
if  destdir    null     destdir isdirectory
throw new buildexception
getlocation
if  encoding    null     charset issupported encoding
throw new buildexception
protected void compile
if  compilelist length > 0
log
compilelist length
compilelist length    1 ?
destdir    null ?     destdir
if  listfiles
for  int i   0  i < compilelist length  i
string filename   compilelist getabsolutepath
log filename
try
path classpath   getclasspath
if  classpath    null
//@todo - is this useful?
//batchofbiscuits.setclasspath(classpath.tostring());
batchgenerate settargetdirectory destdir
if  encoding    null
batchgenerate setsourceencoding encoding
batchgenerate addsources  compilelist
batchgenerate compile
catch  exception e
stringwriter writer   new stringwriter
//@todo --
e printstacktrace
//new errorreporter( e, false ).write( new printwriter(writer) );
string message   writer tostring
if  failonerror
throw new buildexception message  e  getlocation
else
log message  project msg_err