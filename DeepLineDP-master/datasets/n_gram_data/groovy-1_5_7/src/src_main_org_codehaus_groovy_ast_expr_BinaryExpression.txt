/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import org codehaus groovy ast classnode
import org codehaus groovy ast groovycodevisitor
import org codehaus groovy ast variable
import org codehaus groovy syntax token
import org codehaus groovy syntax types
/**
* represents two expressions and an operation
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class binaryexpression extends expression
private expression leftexpression
private expression rightexpression
private final token operation
public binaryexpression expression leftexpression
token operation
expression rightexpression
this leftexpression   leftexpression
this operation   operation
this rightexpression   rightexpression
public string tostring
return super tostring        leftexpression   operation   rightexpression
public void visit groovycodevisitor visitor
visitor visitbinaryexpression this
public expression transformexpression expressiontransformer transformer
expression ret   new binaryexpression transformer transform leftexpression   operation  transformer transform rightexpression
ret setsourceposition this
return ret
public expression getleftexpression
return leftexpression
public void setleftexpression expression leftexpression
this leftexpression   leftexpression
public void setrightexpression expression rightexpression
this rightexpression   rightexpression
public token getoperation
return operation
public expression getrightexpression
return rightexpression
public string gettext
if  operation gettype      types left_square_bracket
return leftexpression gettext         rightexpression gettext
return     leftexpression gettext         operation gettext         rightexpression gettext
/**
*  creates an assignment expression in which the specified expression
*  is written into the specified variable name.
*/
public static binaryexpression newassignmentexpression  variable variable  expression rhs
variableexpression lhs   new variableexpression  variable
token         operator   token newplaceholder  types assign
return new binaryexpression  lhs  operator  rhs
/**
*  creates variable initialization expression in which the specified expression
*  is written into the specified variable name.
*/
public static binaryexpression newinitializationexpression  string variable  classnode type  expression rhs
variableexpression lhs   new variableexpression  variable
if  type    null
lhs settype type
token operator   token newplaceholder  types assign
return new binaryexpression  lhs  operator  rhs