/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy runtime invokerhelper
import java util
/**
* constructing ranges like 0..<0
* @author dierk koenig
* @author edwin tellman
*/
public class emptyrange extends abstractlist implements range
/**
* the value at which the range originates (may be <code>null</code>).
*/
protected comparable at
/**
* creates a new {@link emptyrange}.
*
* @param at the value at which the range starts (may be <code>null</code>).
*/
public emptyrange comparable at
this at   at
/**
* {@inheritdoc}
*/
public comparable getfrom
return at
/**
* {@inheritdoc}
*/
public comparable getto
return at
/**
* never true for an empty range.
*
* @return <code>false</code>
*/
public boolean isreverse
return false
/**
* never true for an empty range.
*
* @return <code>false</code>
*/
public boolean containswithinbounds object o
return false
/**
* {@inheritdoc}
*/
public string inspect
return invokerhelper inspect at        invokerhelper inspect at
/**
* {@inheritdoc}
*/
public string tostring
return  null    at
?
at tostring         at tostring
/**
* always 0 for an empty range.
*
* @return 0
*/
public int size
return 0
/**
* always throws <code>indexoutofboundsexception</code> for an empty range.
*
* @throws indexoutofboundsexception always
*/
public object get int index
throw new indexoutofboundsexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception always
*/
public boolean add object o
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public boolean addall int index  collection c
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public boolean addall collection c
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public boolean remove object o
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public object remove int index
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public boolean removeall collection c
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public boolean retainall collection c
throw new unsupportedoperationexception
/**
* always throws <code>unsupportedoperationexception</code> for an empty range.
*
* @throws unsupportedoperationexception
*/
public object set int index  object element
throw new unsupportedoperationexception
/**
* always does nothing for an empty range.
*/
public void step int step  closure closure
/**
* always returns an empty list for an empty range.
*/
public list step int step
return new arraylist