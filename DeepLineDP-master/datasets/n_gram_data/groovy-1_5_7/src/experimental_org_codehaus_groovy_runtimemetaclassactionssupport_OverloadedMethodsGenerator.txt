/*
* copyright 2005 john g. wilson
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*
*/
package org codehaus groovy runtimemetaclassactionssupport
import java util iterator
import java util linkedlist
import java util list
/**
* @author john wilson
*
*/
public class overloadedmethodsgenerator extends methodgenerator
private final methodgenerator firstmethod
private final list generatorlist   new linkedlist
private int methodindex   0
public overloadedmethodsgenerator final methodgenerator firstmethod  final methodgenerator secondmethod
super null
this firstmethod   firstmethod
this generatorlist add firstmethod
this generatorlist add secondmethod
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#generatecall(java.lang.class)
*/
public string generatecall final class claz
final stringbuffer code   new stringbuffer
final iterator iter   this generatorlist iterator
int i   0
code append    append getname    append    append this methodindex  append
while  iter hasnext
final methodgenerator generator    methodgenerator iter next
code append    append i    append
code append generator generatecall claz
code append
code append
code append
return code tostring
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#startcall(java.lang.stringbuffer)
*/
protected void startcall final stringbuffer code
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#generatedeclaration(int)
*/
public string generatedeclaration final int methodindex
final stringbuffer code   new stringbuffer
final iterator iter   this generatorlist iterator
int i   1
this methodindex   methodindex
while  iter hasnext
final methodgenerator generator    methodgenerator iter next
code append generator generatedeclaration  methodindex << 16    i        todo  find a better way of getting unique indexes
code append    append getname    append    append methodindex  append
final iterator iter1   this generatorlist iterator
while  iter1 hasnext
final methodgenerator generator    methodgenerator iter1 next
final class parametertypes   generator getparametertypes
code append
for  int j   0  j    parametertypes length  j
final class parametertype   parametertypes
if  parametertype isprimitive
if  parametertype    int class
code append
else if  parametertype    long class
code append
else if  parametertype    short class
code append
else if  parametertype    char class
code append
else if  parametertype    byte class
code append
else if  parametertype    boolean class
code append
else if  parametertype    float class
code append
else if  parametertype    double class
code append
else
code append     parametertype getname
else
getfullname parametertype  code
code append
code setlength code length     2       trim the trailing
code append
code setlength code length     3       trim the trailing
code append
return code tostring
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#getname()
*/
public string getname
return firstmethod getname
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#getnumberofparameters()
*/
public int getnumberofparameters
return firstmethod getnumberofparameters
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#getparametertypes()
*/
public class getparametertypes
return firstmethod getparametertypes
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#isoverloaded(org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator)
*/
public boolean isoverloaded final methodgenerator other
return firstmethod isoverloaded other
/* (non-javadoc)
* @see org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator#processoverloaded(java.lang.class, org.codehaus.groovy.runtimemetaclassactionssupport.methodgenerator)
*/
public methodgenerator processoverloaded final class claz  final methodgenerator other
if  other instanceof overloadedmethodsgenerator
final iterator iter     overloadedmethodsgenerator other  generatorlist iterator
while  iter hasnext
processoverloaded claz   methodgenerator iter next
else
final class p1   other getparametertypes
for  int i   0  i    this generatorlist size    i
final methodgenerator generator    methodgenerator this generatorlist get i
final class p2   generator getparametertypes
int j   0
while  p1    p2      j    p1 length
if  j    p1 length
// other is a duplicate of this method
if  other method getdeclaringclass      claz
this generatorlist add i  other
return this
this generatorlist add other
return this