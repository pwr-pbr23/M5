/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import org codehaus groovy ast classhelper
import org codehaus groovy ast groovycodevisitor
/**
* represents a constant expression such as null, true, false
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class constantexpression extends expression
public static final constantexpression void   new constantexpression void class
public static final constantexpression null   new constantexpression null
public static final constantexpression true   new constantexpression boolean true
public static final constantexpression false   new constantexpression boolean false
public static final constantexpression empty_string   new constantexpression
//public static final expression empty_array = new propertyexpression(new classexpression(argumentlistexpression.class.getname()), "empty_array");
public static final constantexpression emtpy_expression   new constantexpression null
private object value
public constantexpression object value
this value   value
if  this value    null
settype classhelper make value getclass
public string tostring
return     value
public void visit groovycodevisitor visitor
visitor visitconstantexpression this
public expression transformexpression expressiontransformer transformer
return this
/**
* @return the value of this constant expression
*/
public object getvalue
return value
public string gettext
return  value    null  ?     value tostring