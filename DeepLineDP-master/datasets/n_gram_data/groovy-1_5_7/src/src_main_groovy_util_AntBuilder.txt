/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy xml qname
import org apache tools ant
import org apache tools ant helper antxmlcontext
import org apache tools ant helper projecthelper2
import org apache tools ant input defaultinputhandler
import org codehaus groovy ant filescanner
import org xml sax attributes
import org xml sax locator
import org xml sax saxparseexception
import org xml sax helpers attributesimpl
import java io inputstream
import java util collections
import java util enumeration
import java util hashmap
import java util iterator
import java util map
import java util vector
import java util logging level
import java util logging logger
/**
* allows ant tasks to be used with groovymarkup
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>, changes by dierk koenig (dk)
* @author marc guillemot
* @version $revision$
*/
public class antbuilder extends buildersupport
private static final class add_task_param_types     string class
private final logger log   logger getlogger getclass   getname
private project project
private final antxmlcontext antxmlcontext
private final projecthelper2 elementhandler antelementhandler   new projecthelper2 elementhandler
private final projecthelper2 targethandler anttargethandler   new projecthelper2 targethandler
private final target collectortarget
private final target implicittarget
private object lastcompletednode
public antbuilder
this createproject
public antbuilder final project project
this project  new target
public antbuilder final project project  final target owningtarget
this project   project
this project setinputhandler new defaultinputhandler
collectortarget   owningtarget
antxmlcontext   new antxmlcontext project
collectortarget setproject project
antxmlcontext setcurrenttarget collectortarget
antxmlcontext setlocator new antbuilderlocator
antxmlcontext setcurrenttargets new hashmap
implicittarget   new target
implicittarget setproject project
implicittarget setname
antxmlcontext setimplicittarget implicittarget
// filescanner is a groovy hack (utility?)
project adddatatypedefinition    filescanner class
public antbuilder final task parenttask
this parenttask getproject    parenttask getowningtarget
// define "owning" task as wrapper to avoid having tasks added to the target
// but it needs to be an unknownelement and no access is available from
// task to its original unknownelement
final unknownelement ue   new unknownelement parenttask gettaskname
ue setproject parenttask getproject
ue settasktype parenttask gettasktype
ue settaskname parenttask gettaskname
ue setlocation parenttask getlocation
ue setowningtarget parenttask getowningtarget
ue setruntimeconfigurablewrapper parenttask getruntimeconfigurablewrapper
parenttask getruntimeconfigurablewrapper   setproxy ue
antxmlcontext pushwrapper parenttask getruntimeconfigurablewrapper
/**#
* gets the ant project in which the tasks are executed
* @return the project
*/
public project getproject
return project
/**
* @return factory method to create new project instances
*/
protected static project createproject
final project project   new project
final projecthelper helper   projecthelper getprojecthelper
project addreference projecthelper projecthelper_reference  helper
helper getimportstack   addelement        import checks that stack is not empty
final buildlogger logger   new nobannerlogger
logger setmessageoutputlevel org apache tools ant project msg_info
logger setoutputprintstream system out
logger seterrorprintstream system err
project addbuildlistener logger
project init
project getbasedir
return project
protected void setparent object parent  object child
/**
* we don't want to return the node as created in {@link #createnode(object, map, object)}
* but the one made ready by {@link #nodecompleted(object, object)}
* @see groovy.util.buildersupport#doinvokemethod(java.lang.string, java.lang.object, java.lang.object)
*/
protected object doinvokemethod string methodname  object name  object args
super doinvokemethod methodname  name  args
// return the completed node
return lastcompletednode
/**
* determines, when the ant task that is represented by the "node" should perform.
* node must be an ant task or no "perform" is called.
* if node is an ant task, it performs right after complete contstruction.
* if node is nested in a taskcontainer, calling "perform" is delegated to that
* taskcontainer.
* @param parent note: null when node is root
* @param node the node that now has all its children applied
*/
protected void nodecompleted final object parent  final object node
antelementhandler onendelement null  null  antxmlcontext
lastcompletednode   node
if  parent    null      parent instanceof target
log finest
return     parent will care about when children perform
// as in target.execute()
if  node instanceof task
object task   node
// "unwrap" the unknownelement to return the real task to the calling code
if  node instanceof unknownelement
final unknownelement unknownelement    unknownelement  node
unknownelement maybeconfigure
task   unknownelement getrealthing
lastcompletednode   task
// unknownelement may wrap everything: task, path, ...
if  task instanceof task
final string taskname     task  task  gettaskname
// save original streams
inputstream savedin   system in
inputstream savedprojectinputstream   project getdefaultinputstream
if    savedin instanceof demuxinputstream
project setdefaultinputstream savedin
system setin new demuxinputstream project
try
task  task  perform
finally
// restore original streams
project setdefaultinputstream savedprojectinputstream
system setin savedin
// restore dummy collector target
if    equals taskname
antxmlcontext setcurrenttarget collectortarget
else if  node instanceof target
// restore dummy collector target
antxmlcontext setcurrenttarget collectortarget
else
final runtimeconfigurable r    runtimeconfigurable  node
r maybeconfigure project
protected object createnode object tagname
return createnode tagname  collections empty_map
protected object createnode object name  object value
object task   createnode name
settext task  value tostring
return task
protected object createnode object name  map attributes  object value
object task   createnode name  attributes
settext task  value tostring
return task
/**
* builds an {@link attributes} from a {@link map}
*
* @param attributes the attributes to wrap
* @return the wrapped attributes
*/
protected static attributes buildattributes final map attributes
final attributesimpl attr   new attributesimpl
for  final iterator iter attributes entryset   iterator    iter hasnext
final map entry entry    map entry  iter next
final string attributename    string  entry getkey
final string attributevalue   string valueof entry getvalue
attr addattribute null  attributename  attributename     attributevalue
return attr
protected object createnode final object name  final map attributes
final attributes attrs   buildattributes attributes
string tagname   name tostring
string ns
if  name instanceof qname
qname q    qname name
tagname   q getlocalpart
ns   q getnamespaceuri
// import can be used only as top level element
if    equals name
antxmlcontext setcurrenttarget implicittarget
else if    equals name
return onstarttarget attrs  tagname  ns
try
antelementhandler onstartelement ns  tagname  tagname  attrs  antxmlcontext
catch  final saxparseexception e
log log level severe      e  e
final runtimeconfigurable wrapper    runtimeconfigurable  antxmlcontext getwrapperstack   lastelement
return wrapper getproxy
private target onstarttarget final attributes attrs  string tagname  string ns
final target target   new target
target setproject project
target setlocation new location antxmlcontext getlocator
try
anttargethandler onstartelement ns  tagname  tagname  attrs  antxmlcontext
final target newtarget    target  getproject   gettargets   get attrs getvalue
// execute dependencies (if any)
final vector targets   new vector
for  final enumeration deps newtarget getdependencies    deps hasmoreelements
final string targetname    string  deps nextelement
targets add project gettargets   get targetname
getproject   executesortedtargets targets
antxmlcontext setcurrenttarget newtarget
return newtarget
catch  final saxparseexception e
log log level severe      e  e
return null
protected void settext object task  string text
final char characters   text tochararray
try
antelementhandler characters characters  0  characters length  antxmlcontext
catch  final saxparseexception e
log log level warning      task       e  e
public project getantproject
return project
/**
* would be nice to retrieve location information (from ast?).
* in a first time, without info
*/
class antbuilderlocator implements locator
public int getcolumnnumber
return 0
public int getlinenumber
return 0
public string getpublicid
return
public string getsystemid
return