/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import java util iterator
import java util list
import org codehaus groovy ast astnode
import org codehaus groovy ast codevisitorsupport
import org codehaus groovy ast stmt forstatement
import org codehaus groovy ast expr binaryexpression
import org codehaus groovy ast expr expression
import org codehaus groovy ast expr listexpression
import org codehaus groovy ast expr mapentryexpression
import org codehaus groovy ast expr methodcallexpression
import org codehaus groovy ast expr propertyexpression
import org codehaus groovy ast expr fieldexpression
import org codehaus groovy ast expr variableexpression
import org codehaus groovy syntax runtimeparserexception
import org objectweb asm opcodes
/**
* verifies the method code
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class verifiercodevisitor extends codevisitorsupport implements opcodes
private verifier verifier
verifiercodevisitor verifier verifier
this verifier   verifier
}
public void visitmethodcallexpression methodcallexpression call
super visitmethodcallexpression call
}
public void visitforloop forstatement expression
assertvalididentifier expression getvariable   getname       expression
super visitforloop expression
}
public void visitpropertyexpression propertyexpression expression
// assertvalididentifier(expression.getproperty(), "property name", expression);  // this has been commented out to fix the issue groovy-843
super visitpropertyexpression expression
}
public void visitfieldexpression fieldexpression expression
if   expression getfield   issynthetic
assertvalididentifier expression getfieldname       expression
}
super visitfieldexpression expression
}
public void visitvariableexpression variableexpression expression
assertvalididentifier expression getname       expression
super visitvariableexpression expression
}
public void visitbinaryexpression binaryexpression expression
/*
if (verifier.getclassnode().isscript() && expression.getoperation().gettype() == token.equal) {
// lets turn variable assignments into property assignments
expression left = expression.getleftexpression();
if (left instanceof variableexpression) {
variableexpression varexp = (variableexpression) left;
//system.out.println("converting variable expression: " + varexp.getvariable());
propertyexpression propexp =
new propertyexpression(variableexpression.this_expression, varexp.getvariable());
expression.setleftexpression(propexp);
}
}
*/
super visitbinaryexpression expression
}
public static void assertvalididentifier string name  string message  astnode node
int size   name length
if  size <  0
throw new runtimeparserexception     message      node
}
char firstch   name charat 0
if   character isjavaidentifierstart firstch     firstch
throw new runtimeparserexception     message       name  node
}
for  int i   1  i < size  i
char ch   name charat i
if   character isjavaidentifierpart ch
throw new runtimeparserexception     message        i   1        ch       name  node
}
}
}
public void visitlistexpression listexpression expression
list expressions   expression getexpressions
for  iterator iter   expressions iterator    iter hasnext
object element   iter next
if  element instanceof mapentryexpression
throw new runtimeparserexception     expression  element
}
}
super visitlistexpression expression
}
}