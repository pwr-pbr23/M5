/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy antlr java
import java util stack
import org codehaus groovy antlr groovysourceast
import org codehaus groovy antlr treewalker visitoradapter
/** this class mutates the java ast, whilst it is still a java ast, in readiness for conversion to groovy, yippee-ky-a ! */
public class prejava2groovyconverter extends visitoradapter
private string tokennames
private stack stack
public prejava2groovyconverter string tokennames
this tokennames   tokennames
this stack   new stack
public void visitdefault groovysourceast t int visit
if  visit    opening_visit
if  t gettype      javatokentypes literal_do
visitjavaliteraldo t
else if  t gettype      javatokentypes array_init
visitjavaarrayinit t
private void visitjavaliteraldo groovysourceast t
// todo - incomplete, as body of do...while... should be executed at least once, which this doesn't provide.
swaptwochildren t
/**
* <pre>
* string[] myarray = new string[] {"a","b","c"};
*
* becomes
*
* string[] myarray = ["a", "b", "c"]
*
* ---
*
* to convert node (t) and surrounding nodes into the right structure for list constructor
*
* (a) java/expr
*  |
*  +- (b) java/new
*      |
*      + (t) java/array_init
*
*  becomes
*
* (a) groovy/list_constructor (via array_init as temporary marker type)
*  |
*  +- (t) groovy/elist
*
*  * note: node (b) is thrown away...
* </pre>
*/
private void visitjavaarrayinit groovysourceast t
// given that we might have a grandparent...
if  stack size   > 2
groovysourceast grandparent   getgrandparentnode
if  grandparent gettype      javatokentypes expr
grandparent settype javatokentypes array_init     set type as indicator for java2groovyconvertor to turn into list_constructor
grandparent setfirstchild t
t settype javatokentypes elist
/** to swap two children of node t...
*
*<pre>
*   (t)
*    |
*    |
*   (a) -- (b)
*
* t.down = firstnode
* a.right = b
* b.right = null
*</pre>
* becomes
*<pre>
*   (t)
*    |
*    |
*   (b) -- (a)
*
* t.down = b
* a.right = null
* b.right = a
*</pre>
*
* todo - build api of basic tree mutations like this method.
*/
public void swaptwochildren groovysourceast t
// this swaps the two child nodes, see javadoc above for explanation of implementation
groovysourceast a    groovysourceast  t getfirstchild
groovysourceast b    groovysourceast  a getnextsibling
t setfirstchild b
a setnextsibling null
b setnextsibling a
public void push groovysourceast t
stack push t
public groovysourceast pop
if   stack empty
return  groovysourceast  stack pop
return null
private groovysourceast getparentnode
object currentnode   stack pop
object parentnode   stack peek
stack push currentnode
return  groovysourceast  parentnode
private groovysourceast getgrandparentnode
object currentnode   stack pop
object parentnode   stack pop
object grandparentnode   stack peek
stack push parentnode
stack push currentnode
return  groovysourceast  grandparentnode