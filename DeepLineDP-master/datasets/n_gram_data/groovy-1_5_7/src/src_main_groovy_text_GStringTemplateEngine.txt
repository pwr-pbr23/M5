/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy text
import groovy lang
import java io ioexception
import java io reader
import java security accesscontroller
import java security privilegedaction
import java util map
import org codehaus groovy control compilationfailedexception
/**
* @author tug@wilson.co.uk
* @author paul king
*/
public class gstringtemplateengine extends templateengine
private final classloader parentloader
private static int counter   1
public gstringtemplateengine
this gstringtemplate class getclassloader
public gstringtemplateengine classloader parentloader
this parentloader   parentloader
/* (non-javadoc)
* @see groovy.text.templateengine#createtemplate(java.io.reader)
*/
public template createtemplate final reader reader  throws compilationfailedexception  classnotfoundexception  ioexception
return new gstringtemplate reader  parentloader
private static class gstringtemplate implements template
final closure template
/**
* turn the template into a writable closure
* when executed the closure evaluates all the code embedded in the
* template and then writes a gstring containing the fixed and variable items
* to the writer passed as a parameter
* <p/>
* for example:
* <p/>
* '<%= "test" %> of expr and <% test = 1 %>${test} script.'
* <p/>
* would compile into:
* <p/>
* { out -> out << "${"test"} of expr and "; test = 1 ; out << "${test} script."}.aswritable()
*
* @param reader
* @param parentloader
* @throws compilationfailedexception
* @throws classnotfoundexception
* @throws ioexception
*/
gstringtemplate final reader reader  final classloader parentloader  throws compilationfailedexception  classnotfoundexception  ioexception
final stringbuffer templateexpressions   new stringbuffer    "
boolean writingstring   true
while  true
int c   reader read
if  c     1  break
if  c
c   reader read
if  c
c   reader read
if  c
parseexpression reader  writingstring  templateexpressions
writingstring   true
continue
else
parsesection c  reader  writingstring  templateexpressions
writingstring   false
continue
else
appendcharacter    templateexpressions  writingstring
writingstring   true
else if  c
appendcharacter    templateexpressions  writingstring
writingstring   true
else if  c
appendcharacter    templateexpressions  writingstring
writingstring   true
c   reader read
if  c
appendcharacter    templateexpressions  writingstring
writingstring   true
parsegsstring reader  writingstring  templateexpressions
writingstring   true
continue
appendcharacter  char  c  templateexpressions  writingstring
writingstring   true
if  writingstring
templateexpressions append    "
templateexpressions append
final groovyclassloader loader
groovyclassloader  accesscontroller doprivileged new privilegedaction
public object run
return new groovyclassloader parentloader
final class groovyclass
try
groovyclass   loader parseclass new groovycodesource templateexpressions tostring        counter
catch  exception e
throw new groovyruntimeexception     e getmessage
try
final groovyobject object    groovyobject  groovyclass newinstance
this template    closure  object invokemethod    null
catch  instantiationexception e
throw new classnotfoundexception e getmessage
catch  illegalaccessexception e
throw new classnotfoundexception e getmessage
private static void appendcharacter final char c
final stringbuffer templateexpressions
final boolean writingstring
if   writingstring
templateexpressions append    "
templateexpressions append c
private void parsegsstring reader reader  boolean writingstring  stringbuffer templateexpressions  throws ioexception
if   writingstring
templateexpressions append      "
while  true
int c   reader read
if  c     1  break
templateexpressions append  char  c
if  c
break
/**
* parse a <% .... %> section
* if we are writing a gstring close and append ';'
* then write the section as a statement
*
* @param pendingc
* @param reader
* @param writingstring
* @param templateexpressions
* @throws ioexception
*/
private static void parsesection final int pendingc
final reader reader
final boolean writingstring
final stringbuffer templateexpressions
throws ioexception
if  writingstring
templateexpressions append      "
templateexpressions append  char  pendingc
while  true
int c   reader read
if  c     1  break
if  c
c   reader read
if  c       break
templateexpressions append
templateexpressions append  char  c
templateexpressions append
/**
* parse a <%= .... %> expression
*
* @param reader
* @param writingstring
* @param templateexpressions
* @throws ioexception
*/
private static void parseexpression final reader reader
final boolean writingstring
final stringbuffer templateexpressions
throws ioexception
if   writingstring
templateexpressions append    "
templateexpressions append
while  true
int c   reader read
if  c     1  break
if  c
c   reader read
if  c       break
templateexpressions append
templateexpressions append  char  c
templateexpressions append
public writable make
return make null
public writable make final map map
final closure template    closure  this template clone
template setdelegate map
return  writable  template