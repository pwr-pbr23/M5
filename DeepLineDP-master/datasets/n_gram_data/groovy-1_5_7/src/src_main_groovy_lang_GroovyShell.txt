/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import groovy ui groovymain
import org codehaus groovy control compilationfailedexception
import org codehaus groovy control compilerconfiguration
import org codehaus groovy runtime invokerhelper
import java io
import java lang reflect constructor
import java security accesscontroller
import java security privilegedaction
import java security privilegedactionexception
import java security privilegedexceptionaction
import java util list
import java util map
/**
* represents a groovy shell capable of running arbitrary groovy scripts
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author guillaume laforge
* @version $revision$
*/
public class groovyshell extends groovyobjectsupport
public static final string empty_args
private binding context
private int counter
private compilerconfiguration config
private groovyclassloader loader
public static void main string args
groovymain main args
public groovyshell
this null  new binding
public groovyshell binding binding
this null  binding
public groovyshell compilerconfiguration config
this new binding    config
public groovyshell binding binding  compilerconfiguration config
this null  binding  config
public groovyshell classloader parent  binding binding
this parent  binding  compilerconfiguration default
public groovyshell classloader parent
this parent  new binding    compilerconfiguration default
public groovyshell classloader parent  binding binding  final compilerconfiguration config
if  binding    null
throw new illegalargumentexception
if  config    null
throw new illegalargumentexception
final classloader parentloader    parent  null ?parent groovyshell class getclassloader
this loader    groovyclassloader  accesscontroller doprivileged new privilegedaction
public object run
return new groovyclassloader parentloader config
this context   binding
this config   config
public void initializebinding
map map   context getvariables
if  map get     null  map put   this
public void resetloadedclasses
loader clearcache
/**
* creates a child shell using a new classloader which uses the parent shell's
* class loader as its parent
*
* @param shell is the parent shell used for the variable bindings and the parent class loader
*/
public groovyshell groovyshell shell
this shell loader  shell context
public binding getcontext
return context
public groovyclassloader getclassloader
return loader
public object getproperty string property
object answer   getvariable property
if  answer    null
answer   super getproperty property
return answer
public void setproperty string property  object newvalue
setvariable property  newvalue
try
super setproperty property  newvalue
catch  groovyruntimeexception e
// ignore, was probably a dynamic property
/**
* a helper method which runs the given script file with the given command line arguments
*
* @param scriptfile the file of the script to run
* @param list       the command line arguments to pass in
*/
public object run file scriptfile  list list  throws compilationfailedexception  ioexception
string args   new string
return run scriptfile   string  list toarray args
/**
* a helper method which runs the given cl script with the given command line arguments
*
* @param scripttext is the text content of the script
* @param filename   is the logical file name of the script (which is used to create the class name of the script)
* @param list       the command line arguments to pass in
*/
public object run string scripttext  string filename  list list  throws compilationfailedexception
string args   new string
list toarray args
return run scripttext  filename  args
/**
* runs the given script file name with the given command line arguments
*
* @param scriptfile the file name of the script to run
* @param args       the command line arguments to pass in
*/
public object run final file scriptfile  string args  throws compilationfailedexception  ioexception
string scriptname   scriptfile getname
int p   scriptname lastindexof
if  p   >  0
if  scriptname substring p  equals
system err println     scriptname
throw new compilationfailedexception 0  null
// get the current context classloader and save it on the stack
final thread thread   thread currentthread
//classloader currentclassloader = thread.getcontextclassloader();
class dosetcontext implements privilegedaction
classloader classloader
public dosetcontext classloader loader
classloader   loader
public object run
thread setcontextclassloader classloader
return null
accesscontroller doprivileged new dosetcontext loader
// parse the script, generate the class, and invoke the main method.  this is a little looser than
// if you are compiling the script because the jvm isn't executing the main method.
class scriptclass
try
scriptclass    class  accesscontroller doprivileged new privilegedexceptionaction
public object run   throws compilationfailedexception  ioexception
return loader parseclass scriptfile
catch  privilegedactionexception pae
exception e   pae getexception
if  e instanceof compilationfailedexception
throw  compilationfailedexception  e
else if  e instanceof ioexception
throw  ioexception  e
else
throw  runtimeexception  pae getexception
return runmainortestorrunnable scriptclass  args
// set the context classloader back to what it was.
//accesscontroller.doprivileged(new dosetcontext(currentclassloader));
/**
* if (theclass has a main method) {
* run the main method
* } else if (theclass instanceof groovytestcase) {
* use the test runner to run it
* } else if (theclass implements runnable) {
* if (theclass has a constructor with string[] params)
* instanciate theclass with this constructor and run
* else if (theclass has a no-args constructor)
* instanciate theclass with the no-args constructor and run
* }
*/
private object runmainortestorrunnable class scriptclass  string args
if  scriptclass    null
return null
try
// let's find a main method
scriptclass getmethod    new class string class
// if that main method exist, invoke it
return invokerhelper invokemethod scriptclass     new object args
catch  nosuchmethodexception e
// if it implements runnable, try to instantiate it
if  runnable class isassignablefrom scriptclass
return runrunnable scriptclass  args
// if it's a junit 3.8.x test, run it with an appropriate runner
if  isjunit3test scriptclass
return runjunit3test scriptclass
// if it's a junit 4.x test, run it with an appropriate runner
if  isjunit4test scriptclass
return runjunit4test scriptclass
// if it's a testng tst, run it with an appropriate runner
if  istestngtest scriptclass
return runtestngtest scriptclass
throw new groovyruntimeexception
private object runrunnable class scriptclass  string args
constructor constructor   null
runnable runnable   null
throwable reason   null
try
// first, fetch the constructor taking string[] as parameter
constructor   scriptclass getconstructor new class  new string    getclass
try
// instantiate a runnable and run it
runnable    runnable  constructor newinstance new object args
catch  throwable t
reason   t
catch  nosuchmethodexception e1
try
// otherwise, find the default constructor
constructor   scriptclass getconstructor new class
try
// instantiate a runnable and run it
runnable    runnable  constructor newinstance new object
catch  throwable t
reason   t
catch  nosuchmethodexception nsme
reason   nsme
if  constructor    null    runnable    null
runnable run
else
throw new groovyruntimeexception    reason
return null
/**
* run the specified class extending testcase as a unit test.
* this is done through reflection, to avoid adding a dependency to the junit framework.
* otherwise, developers embedding groovy and using groovyshell to load/parse/compile
* groovy scripts and classes would have to add another dependency on their classpath.
*
* @param scriptclass the class to be run as a unit test
*/
private object runjunit3test class scriptclass
try
object testsuite   invokerhelper invokeconstructorof   new object scriptclass
return invokerhelper invokestaticmethod       new object testsuite
catch  classnotfoundexception e
throw new groovyruntimeexception
private object runjunit4test class scriptclass
try
return invokerhelper invokestaticmethod
new object scriptclass
catch  classnotfoundexception e
throw new groovyruntimeexception
private object runtestngtest class scriptclass
try
return invokerhelper invokestaticmethod
new object scriptclass
catch  classnotfoundexception e
throw new groovyruntimeexception
/**
* utility method to check through reflection if the class appears to be a
* junit 3.8.x test, i.e.&nsbp;checks if it extends junit 3.8.x's testcase.
*
* @param scriptclass the class we want to check
* @return true if the class appears to be a test
*/
private boolean isjunit3test class scriptclass
// check if the parsed class is a groovytestcase,
// so that it is possible to run it as a junit test
boolean isunittestcase   false
try
try
class testcaseclass   this loader loadclass
// if scriptclass extends testcaseclass
if  testcaseclass isassignablefrom scriptclass
isunittestcase   true
catch  classnotfoundexception e
// fall through
catch  throwable e
// fall through
return isunittestcase
/**
* utility method to check via reflection if the parsed class appears to be a junit4
* test, i.e.&nsbp;checks whether it appears to be using the relevant junit 4 annotations.
*
* @param scriptclass the class we want to check
* @return true if the class appears to be a test
*/
private boolean isjunit4test class scriptclass
// if we are running under java 1.4 don't bother trying to check
char version   system getproperty    charat 2
if  version <
return false
// check if there are appropriate class or method annotations
// that suggest we have a junit 4 test
boolean istest   false
try
if  invokerhelper invokestaticmethod
new object scriptclass  this loader      boolean true
istest   true
catch  classnotfoundexception e
throw new groovyruntimeexception
return istest
/**
* utility method to check via reflection if the parsed class appears to be a testng
* test, i.e.&nsbp;checks whether it appears to be using the relevant testng annotations.
*
* @param scriptclass the class we want to check
* @return true if the class appears to be a test
*/
private boolean istestngtest class scriptclass
char version   system getproperty    charat 2
if  version <
return false
// check if there are appropriate class or method annotations
// that suggest we have a testng test
boolean istest   false
try
if  invokerhelper invokestaticmethod
new object scriptclass  this loader      boolean true
istest   true
catch  classnotfoundexception e
throw new groovyruntimeexception
return istest
/**
* runs the given script text with command line arguments
*
* @param scripttext is the text content of the script
* @param filename   is the logical file name of the script (which is used to create the class name of the script)
* @param args       the command line arguments to pass in
*/
public object run string scripttext  string filename  string args  throws compilationfailedexception
try
return run new bytearrayinputstream scripttext getbytes config getsourceencoding      filename  args
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
/**
* runs the given script with command line arguments
*
* @param in       the stream reading the script
* @param filename is the logical file name of the script (which is used to create the class name of the script)
* @param args     the command line arguments to pass in
*/
public object run final inputstream in  final string filename  string args  throws compilationfailedexception
groovycodesource gcs    groovycodesource  accesscontroller doprivileged new privilegedaction
public object run
return new groovycodesource in  filename
class scriptclass   parseclass gcs
return runmainortestorrunnable scriptclass  args
public object getvariable string name
return context getvariables   get name
public void setvariable string name  object value
context setvariable name  value
/**
* evaluates some script against the current binding and returns the result
*
* @param codesource
* @throws compilationfailedexception
* @throws compilationfailedexception
*/
public object evaluate groovycodesource codesource  throws compilationfailedexception
script script   parse codesource
return script run
/**
* evaluates some script against the current binding and returns the result
*
* @param scripttext the text of the script
* @param filename   is the logical file name of the script (which is used to create the class name of the script)
*/
public object evaluate string scripttext  string filename  throws compilationfailedexception
try
return evaluate new bytearrayinputstream scripttext getbytes config getsourceencoding      filename
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
/**
* evaluates some script against the current binding and returns the result.
* the .class file created from the script is given the supplied codebase
*/
public object evaluate string scripttext  string filename  string codebase  throws compilationfailedexception
try
return evaluate new groovycodesource new bytearrayinputstream scripttext getbytes config getsourceencoding      filename  codebase
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
/**
* evaluates some script against the current binding and returns the result
*
* @param file is the file of the script (which is used to create the class name of the script)
*/
public object evaluate file file  throws compilationfailedexception  ioexception
return evaluate new groovycodesource file
/**
* evaluates some script against the current binding and returns the result
*
* @param scripttext the text of the script
*/
public object evaluate string scripttext  throws compilationfailedexception
try
return evaluate new bytearrayinputstream scripttext getbytes config getsourceencoding      generatescriptname
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
/**
* evaluates some script against the current binding and returns the result
*
* @param in the stream reading the script
*/
public object evaluate inputstream in  throws compilationfailedexception
return evaluate in  generatescriptname
/**
* evaluates some script against the current binding and returns the result
*
* @param in       the stream reading the script
* @param filename is the logical file name of the script (which is used to create the class name of the script)
*/
public object evaluate inputstream in  string filename  throws compilationfailedexception
script script   null
try
script   parse in  filename
return script run
finally
if  script    null
invokerhelper removeclass script getclass
/**
* parses the given script and returns it ready to be run
*
* @param in       the stream reading the script
* @param filename is the logical file name of the script (which is used to create the class name of the script)
* @return the parsed script which is ready to be run via @link script.run()
*/
public script parse final inputstream in  final string filename  throws compilationfailedexception
groovycodesource gcs    groovycodesource  accesscontroller doprivileged new privilegedaction
public object run
return new groovycodesource in  filename
return parse gcs
/**
* parses the groovy code contained in codesource and returns a java class.
*/
private class parseclass final groovycodesource codesource  throws compilationfailedexception
// don't cache scripts
return loader parseclass codesource  false
/**
* parses the given script and returns it ready to be run.  when running in a secure environment
* (-djava.security.manager) codesource.getcodesource() determines what policy grants should be
* given to the script.
*
* @param codesource
* @return ready to run script
*/
public script parse final groovycodesource codesource  throws compilationfailedexception
return invokerhelper createscript parseclass codesource   context
/**
* parses the given script and returns it ready to be run
*
* @param file is the file of the script (which is used to create the class name of the script)
*/
public script parse file file  throws compilationfailedexception  ioexception
return parse new groovycodesource file
/**
* parses the given script and returns it ready to be run
*
* @param scripttext the text of the script
*/
public script parse string scripttext  throws compilationfailedexception
try
return parse new bytearrayinputstream scripttext getbytes config getsourceencoding      generatescriptname
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
public script parse string scripttext  string filename  throws compilationfailedexception
try
return parse new bytearrayinputstream scripttext getbytes config getsourceencoding      filename
catch  unsupportedencodingexception e
throw new compilationfailedexception 0  null  e
/**
* parses the given script and returns it ready to be run
*
* @param in the stream reading the script
*/
public script parse inputstream in  throws compilationfailedexception
return parse in  generatescriptname
protected synchronized string generatescriptname
return        counter