/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy servlet
import groovy util resourceconnector
import groovy util resourceexception
import java io file
import java io ioexception
import java net url
import java net urlconnection
import java util regex matcher
import java util regex pattern
import javax servlet servletconfig
import javax servlet servletcontext
import javax servlet servletexception
import javax servlet http httpservlet
import javax servlet http httpservletrequest
/**
* a common ground dealing with the http servlet api wrinkles.
*
* <h4>resource name mangling (pattern replacement)</h4>
*
* <p>
* also implements groovy's {@link groovy.util.resourceconnector} in dynamic
* manner. it allows to modifiy the resource name that is searched for with a
* <i>replace all</i> operation. see {@link java.util.regex.pattern} and
* {@link java.util.regex.matcher} for details.
* the servlet init parameter names are:
* <pre>
* resource.name.regex = empty - defaults to null
* resource.name.replacement = empty - defaults to null
* resource.name.replace.all = true (default) | false means replacefirst()
* </pre>
* note: if you specify a regex, you have to specify a replacement string too!
* otherwise an exception gets raised.
*
* <h4>logging and bug-hunting options</h4>
*
* <p>
* this implementation provides a verbosity flag switching log statements.
* the servlet init parameter name is:
* <pre>
* verbose = false(default) | true
* </pre>
*
* <p>
* in order to support class-loading-troubles-debugging with tomcat 4 or
* higher, you can log the class loader responsible for loading some classes.
* see <a href="http://jira.codehaus.org/browse/groovy-861">groovy-861</a> for details.
* the servlet init parameter name is:
* <pre>
* log.groovy861 = false(default) | true
* </pre>
*
* <p>
* if you experience class-loading-troubles with tomcat 4 (or higher) or any
* other servlet container using custom class loader setups, you can fallback
* to use (slower) reflection in groovy's metaclass implementation. please
* contact the dev team with your problem! thanks.
* the servlet init parameter name is:
* <pre>
* reflection = false(default) | true
* </pre>
*
*
* @author christian stein
*/
public abstract class abstracthttpservlet extends httpservlet implements resourceconnector
/**
* content type of the http response.
*/
public static final string content_type_text_html
/**
* servlet api include key name: path_info
*/
public static final string inc_path_info
/* *** not used, yet. see comments in getscripturi(httpservletrequest). ***
* servlet api include key name: request_uri
*/
public static final string inc_request_uri
/**
* servlet api include key name: servlet_path
*/
public static final string inc_servlet_path
/**
* servlet (or the web application) context.
*/
protected servletcontext servletcontext
/**
* <b>null</b> or compiled pattern matcher read from "resource.name.regex"
*  and used in {@link abstracthttpservlet#getresourceconnection(string)}.
*/
protected matcher resourcenamematcher
/**
* the replacement used by the resource name matcher.
*/
protected string resourcenamereplacement
/**
* the replace method to use on the matcher.
* <pre>
* true - replaceall(resourcenamereplacement); (default)
* false - replacefirst(resourcenamereplacement);
* </pre>
*/
protected boolean resourcenamereplaceall
/**
* controls almost all log output.
*/
protected boolean verbose
/**
* encoding to use, becomes charset part of contenttype.
*/
protected string encoding
/**
* mirrors the static value of the reflection flag in metaclass.
* see abstracthttpservlet#loggroovy861
*/
protected boolean reflection
/**
* debug flag logging the class the class loader of the request.
*/
private boolean loggroovy861
/**
* initializes all fields with default values.
*/
public abstracthttpservlet
this servletcontext   null
this resourcenamematcher   null
this resourcenamereplacement   null
this resourcenamereplaceall   true
this verbose   false
this reflection   false
this loggroovy861   false
/**
* interface method for resourcecontainer. this is used by the groovyscriptengine.
*/
public urlconnection getresourceconnection string name  throws resourceexception
/*
* first, mangle resource name with the compiled pattern.
*/
matcher matcher   resourcenamematcher
if  matcher    null
matcher reset name
string replaced
if  resourcenamereplaceall
replaced   resourcenamematcher replaceall resourcenamereplacement
else
replaced   resourcenamematcher replacefirst resourcenamereplacement
if   name equals replaced
if  verbose
log
name   replaced
/*
* try to locate the resource and return an opened connection to it.
*/
try
url url   servletcontext getresource     name
if  url    null
url   servletcontext getresource     name
if  url    null
throw new resourceexception
return url openconnection
catch  ioexception e
throw new resourceexception       e
/**
* returns the include-aware uri of the script or template file.
*
* @param request
*  the http request to analyze
* @return the include-aware uri either parsed from request attributes or
*  hints provided by the servlet container
*/
protected string getscripturi httpservletrequest request
/*
* log some debug information for http://jira.codehaus.org/browse/groovy-861
*/
if  loggroovy861
log
log
log
log
/*
* keep logging, if we're verbose. else turn it off.
*/
loggroovy861   verbose
//
// note: this piece of code is heavily inspired by apaches jasper2!
//
// http://cvs.apache.org/viewcvs.cgi/jakarta-tomcat-jasper/jasper2/ \
//        src/share/org/apache/jasper/servlet/jspservlet.java?view=markup
//
// why doesn't it use request.getrequesturi() or inc_request_uri?
//
string uri   null
string info   null
//
// check to see if the requested script/template source file has been the
// target of a requestdispatcher.include().
//
uri    string  request getattribute inc_servlet_path
if  uri    null
//
// requested script/template file has been target of
// requestdispatcher.include(). its path is assembled from the relevant
// javax.servlet.include.* request attributes and returned!
//
info    string  request getattribute inc_path_info
if  info    null
uri    info
return uri
//
// requested script/template file has not been the target of a
// requestdispatcher.include(). reconstruct its path from the request's
// getservletpath() and getpathinfo() results.
//
uri   request getservletpath
info   request getpathinfo
if  info    null
uri    info
/*
* todo : enable auto ".groovy" extension replacing here!
* http://cvs.groovy.codehaus.org/viewrep/groovy/groovy/groovy-core/src/main/groovy/servlet/groovyservlet.java?r=1.10#l259
*/
return uri
/**
* parses the http request for the real script or template source file.
* @param request the http request to analyze
* @return a file object using an absolute file path name
*/
protected file getscripturiasfile httpservletrequest request
string uri   getscripturi request
string real   servletcontext getrealpath uri
file file   new file real  getabsolutefile
return file
/**
* overrides the generic init method to set some debug flags.
*
* @param config
*  the servlet coniguration provided by the container
* @throws servletexception if init() method defined in super class
*  javax.servlet.genericservlet throws it
*/
public void init servletconfig config  throws servletexception
/*
* never forget super.init()!
*/
super init config
/*
* grab the servlet context.
*/
this servletcontext   config getservletcontext
// get verbosity hint.
string value   config getinitparameter
if  value    null
this verbose   boolean valueof value  booleanvalue
// get encoding
value   config getinitparameter
if  value    null
this encoding   value
// and now the real init work...
if  verbose
log
string regex   config getinitparameter
if  regex    null
string replacement   config getinitparameter
if  replacement    null
exception npex   new nullpointerexception
string message
log message  npex
throw new servletexception message  npex
int flags   0     todo   parse pattern compile flags
this resourcenamematcher   pattern compile regex  flags  matcher
this resourcenamereplacement   replacement
string all   config getinitparameter
if  all    null
this resourcenamereplaceall   boolean valueof all  booleanvalue
value   config getinitparameter
if  value    null
this loggroovy861   boolean valueof value  booleanvalue
// nothing else to do here
/*
* if verbose, log the parameter values.
*/
if  verbose
log
log     verbose      this  is  verbose
log     reflection
log     loggroovy861
if  resourcenamematcher    null
log     resourcenamematcher pattern   pattern
else
log
log     resourcenamereplacement