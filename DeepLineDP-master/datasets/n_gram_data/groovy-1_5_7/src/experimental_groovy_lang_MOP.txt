/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
/**
* @author john wilson
*
*/
/**
* this inteface defines thew meta object protocol implemented by the metaclass
* note that this inteface is purely for documantation purposes
* an object implementing this interface is not neccesarily a vaild metaclass
* a metaclass needs to implement may more methods
*
*/
public interface mop
static final object not_called   new object
static final object no_property   new object
static final object no_attribute   new object
/**
* invoke a public method on an object.
* public methods are those declared public in the class and those added via mechanisms like defaultgroovymethods.
* if no suitable method is found a groovy.lang.missingmethodexception is thrown.
* @param object
* the object on which the call is to be made
* @param objecttype
* if objecttype is not null then method to be called is selected as though the object was cast to this type before making the call.
* @param methodname
* the name of the method to be called
* @param arguments
* the arguments to the call.
* if not_called is returned and there is a private or protected method which
* should be called then this array will contain the parameters to that method. the metaclass will have done any conversions
* (e.g. gstring to string) needed to allow the call to suceed.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @param argumenttypes
* this array must be the same length as the arguments arguments array.
* it contains the type of each parameter if known or null if unknown.
* the if there are multiple methods with the same name and number of parameters then this information
* contributes to the selection of the correct method to call.
* if not_called is returned and there is a private or protected method which
* should be called then this array will contain the classes which represent the types of the parameters to that method.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @return
* the result of calling the method (null is returned if the method returns void).
*/
object invokemethod  object object   class objecttype   string methodname   object arguments   class argumenttypes
object getproperty  object object   class objecttype   string property
void setproperty  object object   class objecttype   string property   object newvalue   class newvaluetype
object getattribute  object object   class objecttype   string attribute
void setattribute  object object   class objecttype   string attribute   object newvalue   class newvaluetype
/**
* invoke a public method on an object.
* these public methods are those declared public in the class and those added via mechanisms like defaultgroovymethods.
* if no public method can be found but there exists protected or private methods which would match the name, number and type
* of the parameters then the value not_called is returned.
* oherwise a groovy.lang.missingmethodexception is thrown.
* @param object
* the object on which the call is to be made
* @param thistype
* the type of the class in which this call was made. this must never be null.
* note this type value may not be the same as object.getclass() as it my be a superclass of that class.
* @param methodname
* the name of the method to be called
* @param arguments
* the arguments to the call.
* if not_called is returned and there is a private or protected method which
* should be called then this array will contain the parameters to that method. the metaclass will have done any conversions
* (e.g. gstring to string) needed to allow the call to succeed.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @param argumenttypes
* this array must be the same length as the arguments arguments array.
* it contains the type of each parameter if known or null if unknown.
* the if there are multiple methods with the same name and number of parameters then this information
* contributes to the selection of the correct method to call.
* if not_called is returned and there is a private or protected method which
* should be called then this array will contain the classes which represent the types of the parameters to that method.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @return
* either the result of calling the method (null is returned if the method returns void) or the value not_called.
* not_called is returned if a suitable method exists but the metaclass did not call it because it is not public.
* in this case the caller is free to try to invoke the method itself (e.g. by executing generated bytecode).
* if there are multiple methods with the same name and number of parameters then the values on the array passed
* as argumenttypes should be used to choose the correct one to call.
*/
object invokethismethod  object object   class thistype   string methodname   object arguments   class argumenttypes
object getthisproperty  object object   class thistype   string property
boolean setthisproperty  object object   class thistype   string property   object newvalue   class newvaluetype
object getthisattribute  object object   class thistype   string attribute
boolean setthisattribute  object object   class thistype   string attribute   object newvalue   class newvaluetype
/**
* invoke an added method on an object. methods are added via mechanisms like defaultgroovymethods.
* if no added method can be found but there exists public, protected or private methods on the specified superclass
* which would match the name, number and type of the parameters then the value not_called is returned.
* oherwise a groovy.lang.missingmethodexception is thrown.
* @param object
* the object on which the call is to be made
* @param superclasstype
* the type of the superclass. this must never be null.
* @param methodname
* the name of the method to be called
* @param arguments
* the arguments to the call.
* if not_called is returned and there is a private or protected method which
* should be called then this array will contain the parameters to that method. the metaclass will have done any conversions
* (e.g. gstring to string) needed to allow the call to succeed.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @param argumenttypes
* this array must be the same length as the arguments arguments array.
* it contains the type of each parameter if known or null if unknown.
* the if there are multiple methods with the same name and number of parameters then this information
* contributes to the selection of the correct method to call.
* if not_called is returned and there is a method which
* should be called then this array will contain the classes which represent the types of the parameters to that method.
* if any other value is returned then the values in this array are undefined. in this case the metaclass may or may not
* change these values. do not use these values unless not_called is returned.
* @return
* either the result of calling the method (null is returned if the method returns void) or the value not_called.
* not_called is returned if a suitable method exists but the metaclass did not call it because it is not added.
* in this case the caller is free to try to invoke the method itself (e.g. by executing generated bytecode).
* if there are multiple methods with the same name and number of parameters then the values on the array passed
* as argumenttypes should be used to choose the correct one to call.
*/
object invokesupermethod  object object   class superclasstype   string methodname   object arguments   class argumenttypes
object getsuperproperty  object object   class superclasstype   string property
boolean setsuperproperty  object object   class superclasstype   string property   object newvalue   class newvaluetype
object getsuperattribute  object object   class superclasstype   string attribute
boolean setsuperattribute  object object   class superclasstype   string attribute   object newvalue   class newvaluetype