/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy vmplugin v5
import java lang reflect
import org codehaus groovy groovybugerror
import org codehaus groovy vmplugin vmplugin
import org codehaus groovy ast
/**
* java 5 based functions
* @author jochen theodorou
*
*/
public class java5 implements vmplugin
private static class plugin_dgm  plugindefaultgroovymethods class
public void setgenericstypes classnode cn
typevariable tvs   cn gettypeclass   gettypeparameters
genericstype gts   configuretypevariable tvs
cn setgenericstypes gts
private genericstype configuretypevariable typevariable tvs
if  tvs length  0  return null
genericstype gts   new genericstype
for  int i   0  i < tvs length  i
gts   configuretypevariabledefintion tvs
return gts
private genericstype configuretypevariabledefintion typevariable tv
classnode base   configuretypevariablereference tv
classnode redirect   base redirect
base setredirect null
type tbounds   tv getbounds
genericstype gt
if  tbounds length  0
gt   new genericstype base
else
classnode cbounds   configuretypes tbounds
gt   new genericstype base cbounds null
gt setname base getname
gt setplaceholder true
base setredirect redirect
return gt
private classnode configuretypes type types
if  types length  0  return null
classnode nodes   new classnode
for  int i 0  i<types length  i
nodes   configuretype types
return nodes
private classnode configuretype type type
if  type instanceof wildcardtype
return configurewildcardtype  wildcardtype  type
else if  type instanceof parameterizedtype
return configureparameterizedtype  parameterizedtype  type
else if  type instanceof genericarraytype
return configuregenericarray  genericarraytype  type
else if  type instanceof typevariable
return configuretypevariablereference  typevariable  type
else if  type instanceof class
return configureclass  class  type
else
throw new groovybugerror     type       type getclass
private classnode configureclass class c
if  c isprimitive
return classhelper make c
else
return classhelper makewithoutcaching c  false
private classnode configuregenericarray genericarraytype genericarraytype
type component   genericarraytype getgenericcomponenttype
classnode node   configuretype component
return node makearray
private classnode configurewildcardtype wildcardtype wildcardtype
classnode base   classhelper makewithoutcaching
//todo: more than one lower bound for wildcards?
classnode lowers   configuretypes wildcardtype getlowerbounds
classnode lower null
if  lower  null  lower   lowers
classnode upper   configuretypes wildcardtype getupperbounds
genericstype t   new genericstype base upper lower
t setwildcard true
classnode ref   classhelper makewithoutcaching object class false
ref setgenericstypes new genericstype t
return ref
private classnode configureparameterizedtype parameterizedtype parameterizedtype
classnode base   configuretype parameterizedtype getrawtype
genericstype gts   configuretypearguments parameterizedtype getactualtypearguments
base setgenericstypes gts
return base
private classnode configuretypevariablereference typevariable tv
classnode cn   classhelper makewithoutcaching tv getname
cn setgenericsplaceholder true
classnode cn2   classhelper makewithoutcaching tv getname
genericstype gts   new genericstype new genericstype cn2
cn setgenericstypes gts
cn setredirect classhelper object_type
return cn
private genericstype configuretypearguments type ta
if  ta length  0  return null
genericstype gts   new genericstype
for  int i   0  i < ta length  i
gts   new genericstype configuretype ta
return gts
public class getplugindefaultgroovymethods
return plugin_dgm
public void configureclassnode compileunit compileunit  classnode classnode
class clazz   classnode gettypeclass
field fields   clazz getdeclaredfields
for  int i   0  i < fields length  i
field f   fields
classnode ret   makeclassnode compileunit f getgenerictype   f gettype
classnode addfield fields getname    fields getmodifiers    ret  null
method methods   clazz getdeclaredmethods
for  int i   0  i < methods length  i
method m   methods
classnode ret   makeclassnode compileunit m getgenericreturntype   m getreturntype
parameter params   makeparameters compileunit m getgenericparametertypes   m getparametertypes
classnode exceptions   makeclassnodes compileunit m getgenericexceptiontypes   m getexceptiontypes
methodnode mn   new methodnode m getname    m getmodifiers    ret  params  exceptions  null
classnode addmethod mn
constructor constructors   clazz getdeclaredconstructors
for  int i   0  i < constructors length  i
constructor ctor   constructors
parameter params   makeparameters compileunit ctor getgenericparametertypes    ctor getparametertypes
classnode exceptions   makeclassnodes compileunit ctor getgenericexceptiontypes   ctor getexceptiontypes
classnode addconstructor ctor getmodifiers    params  exceptions  null
class sc   clazz getsuperclass
if  sc    null  classnode setunresolvedsuperclass makeclassnode compileunit clazz getgenericsuperclass   sc
makeinterfacetypes compileunit classnode clazz
private void makeinterfacetypes compileunit cu  classnode classnode  class clazz
type interfacetypes   clazz getgenericinterfaces
if  interfacetypes length  0
classnode setinterfaces classnode empty_array
else
class interfaceclasses   clazz getinterfaces
classnode ret   new classnode
for  int i 0 i<interfacetypes length i
ret   makeclassnode cu  interfacetypes  interfaceclasses
classnode setinterfaces ret
private classnode makeclassnodes compileunit cu  type types  class cls
classnode nodes   new classnode
for  int i 0 i<nodes length i
nodes   makeclassnode cu  types cls
return nodes
private classnode makeclassnode compileunit cu  type t  class c
classnode back   null
if  cu  null    back   cu getclass c getname
if  back  null  back   classhelper make c
if    t instanceof class
classnode front   configuretype t
front setredirect back
return front
return back
private parameter makeparameters compileunit cu  type types  class cls
parameter params   parameter empty_array
if  types length>0
params   new parameter
for  int i 0 i<params length i
params   makeparameter cu types cls i
return params
private parameter makeparameter compileunit cu  type type  class cl int idx
classnode cn   makeclassnode cu type cl
return new parameter cn      idx