/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang delegatingmetaclass
import groovy lang groovysystem
import groovy lang metaclass
import groovy xml qname
import org codehaus groovy runtime invokerhelper
import java io printwriter
import java io serializable
import java util
/**
* represents an arbitrary tree node which can be used for structured metadata or any arbitrary xml-like tree.
* a node can have a name, a value and an optional map of attributes.
* typically the name is a string and a value is either a string or a list of other nodes,
* though the types are extensible to provide a flexible structure, e.g. you could use a
* qname as the name which includes a namespace uri and a local name. or a jmx objectname etc.
* so this class can represent metadata like <code>{foo a=1 b="abc"}</code> or nested
* metadata like <code>{foo a=1 b="123" { bar x=12 text="hello" }}</code>
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author paul king
* @version $revision$
*/
public class node implements serializable
static
// wrap the standard metaclass with the delegate
setmetaclass groovysystem getmetaclassregistry   getmetaclass node class
private static final long serialversionuid   4121134753270542643l
private node parent
private object name
private map attributes
private object value
public node node parent  object name
this parent  name  new nodelist
public node node parent  object name  object value
this parent  name  new hashmap    value
public node node parent  object name  map attributes
this parent  name  attributes  new nodelist
public node node parent  object name  map attributes  object value
this parent   parent
this name   name
this attributes   attributes
this value   value
if  parent    null
getparentlist parent  add this
private list getparentlist node parent
object parentvalue   parent value
list parentlist
if  parentvalue instanceof list
parentlist    list  parentvalue
else
parentlist   new nodelist
parentlist add parentvalue
parent setvalue parentlist
return parentlist
public boolean append node child
child parent   this
return getparentlist this  add child
public boolean remove node child
child parent   null
return getparentlist this  remove child
public node appendnode object name  map attributes
return new node this  name  attributes
public node appendnode object name
return new node this  name
public node appendnode object name  object value
return new node this  name  value
public node appendnode object name  map attributes  object value
return new node this  name  attributes  value
private static void setmetaclass final metaclass metaclass
final metaclass newmetaclass   new delegatingmetaclass metaclass
/* (non-javadoc)
* @see groovy.lang.delegatingmetaclass#getattribute(java.lang.object, java.lang.string)
*/
public object getattribute final object object  final string attribute
node n    node  object
return n get     attribute
/* (non-javadoc)
* @see groovy.lang.metaclass#setattribute(java.lang.object, java.lang.string, java.lang.object)
*/
public void setattribute final object object  final string attribute  final object newvalue
node n    node  object
n attributes   put attribute  newvalue
/* (non-javadoc)
* @see groovy.lang.metaclass#getproperty(java.lang.object, java.lang.string)
*/
public object getproperty object object  string property
if  object instanceof node
node n    node  object
return n get property
return super getproperty object  property
/* (non-javadoc)
* @see groovy.lang.metaclass#setproperty(java.lang.object, java.lang.string, java.lang.object)
*/
public void setproperty object object  string property  object newvalue
if  property startswith
string attribute   property substring 1
node n    node  object
n attributes   put attribute  newvalue
return
delegate setproperty object  property  newvalue
groovysystem getmetaclassregistry   setmetaclass node class  newmetaclass
public string text
if  value instanceof string
return  string  value
else if  value instanceof collection
collection coll    collection  value
string previoustext   null
stringbuffer buffer   null
for  iterator iter   coll iterator    iter hasnext
object child   iter next
if  child instanceof string
string childtext    string  child
if  previoustext    null
previoustext   childtext
else
if  buffer    null
buffer   new stringbuffer
buffer append previoustext
buffer append childtext
if  buffer    null
return buffer tostring
else
if  previoustext    null
return previoustext
return
public iterator iterator
return children   iterator
public list children
if  value    null
return new nodelist
if  value instanceof list
return  list  value
// we're probably just a string
list result   new nodelist
result add value
return result
public map attributes
return attributes
public object attribute object key
return  attributes    null  ? attributes get key    null
public object name
return name
public object value
return value
public void setvalue object value
this value   value
public node parent
return parent
/**
* provides lookup of elements by non-namespaced name
*
* @param key the name (or shortcut key) of the node(s) of interest
* @return the nodes which match key
*/
public object get string key
if  key    null    key charat 0
string attributename   key substring 1
return attributes   get attributename
if    equals key
return parent
if    equals key
return children
if    equals key
return depthfirst
return getbyname key
/**
* provides lookup of elements by qname.
*
* @param name the qname of interest
* @return the nodes matching name
*/
public nodelist getat qname name
nodelist answer   new nodelist
for  iterator iter   children   iterator    iter hasnext
object child   iter next
if  child instanceof node
node childnode    node  child
object childnodename   childnode name
if  name matches childnodename
answer add childnode
return answer
/**
* provides lookup of elements by name.
*
* @param name the name of interest
* @return the nodes matching name
*/
private nodelist getbyname string name
nodelist answer   new nodelist
for  iterator iter   children   iterator    iter hasnext
object child   iter next
if  child instanceof node
node childnode    node  child
object childnodename   childnode name
if  childnodename instanceof qname
qname qn    qname  childnodename
if  qn matches name
answer add childnode
else if  name equals childnodename
answer add childnode
return answer
/**
* provide a collection of all the nodes in the tree
* using a depth first traversal.
*
* @return the list of (depth-first) ordered nodes
*/
public list depthfirst
list answer   new nodelist
answer add this
answer addall depthfirstrest
return answer
private list depthfirstrest
list answer   new nodelist
for  iterator iter   invokerhelper asiterator value   iter hasnext
object child   iter next
if  child instanceof node
node childnode    node  child
list children   childnode depthfirstrest
answer add childnode
answer addall children
return answer
/**
* provide a collection of all the nodes in the tree
* using a breadth-first traversal.
*
* @return the list of (breadth-first) ordered nodes
*/
public list breadthfirst
list answer   new nodelist
answer add this
answer addall breadthfirstrest
return answer
private list breadthfirstrest
list answer   new nodelist
list nextlevelchildren   getdirectchildren
while   nextlevelchildren isempty
list working   new nodelist nextlevelchildren
nextlevelchildren   new nodelist
for  iterator iter   working iterator    iter hasnext
node childnode    node  iter next
answer add childnode
list children   childnode getdirectchildren
nextlevelchildren addall children
return answer
private list getdirectchildren
list answer   new nodelist
for  iterator iter   invokerhelper asiterator value   iter hasnext
object child   iter next
if  child instanceof node
node childnode    node  child
answer add childnode
return answer
public string tostring
return name       attributes       value
public void print printwriter out
new nodeprinter out  print this