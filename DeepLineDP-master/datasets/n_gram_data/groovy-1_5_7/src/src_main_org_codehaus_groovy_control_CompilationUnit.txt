/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import java io file
import java io fileoutputstream
import java io ioexception
import java io inputstream
import java net url
import java security codesource
import java util
import org codehaus groovy groovybugerror
import org codehaus groovy ast astnode
import org codehaus groovy ast classnode
import org codehaus groovy ast compileunit
import org codehaus groovy ast modulenode
import org codehaus groovy classgen asmclassgenerator
import org codehaus groovy classgen classcompletionverifier
import org codehaus groovy classgen classgenerator
import org codehaus groovy classgen enumvisitor
import org codehaus groovy classgen extendedverifier
import org codehaus groovy classgen generatorcontext
import org codehaus groovy classgen variablescopevisitor
import org codehaus groovy classgen verifier
import org codehaus groovy control io inputstreamreadersource
import org codehaus groovy control io readersource
import org codehaus groovy control messages exceptionmessage
import org codehaus groovy control messages message
import org codehaus groovy control messages simplemessage
import org codehaus groovy syntax syntaxexception
import org codehaus groovy tools groovyclass
import org objectweb asm classvisitor
import org objectweb asm classwriter
import groovy lang groovyclassloader
import groovy lang groovyruntimeexception
/**
* collects all compilation data as it is generated by the compiler system.
* allows additional source units to be added and compilation run again (to
* affect only the deltas).
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @version $id$
*/
public class compilationunit extends processingunit
//---------------------------------------------------------------------------
// construction and such
protected map sources        the sourceunits from which this unit is built
protected map summariesbysourcename          summary of each sourceunit
protected map summariesbypublicclassname           summary of each sourceunit
protected map classsourcesbypublicclassname        summary of each class
protected list names          names for each sourceunit in sources
protected linkedlist queuedsources
protected compileunit ast            the overall ast for this compilationunit
protected list generatedclasses        the classes generated during classgen
protected verifier verifier       for use by verify
protected boolean debug          controls behaviour of classgen   and other routines
protected boolean configured     set true after the first configure   operation
protected classgencallback classgencallback      a callback for use during classgen
protected progresscallback progresscallback      a callback for use during compile
protected resolvevisitor resolvevisitor
protected staticimportvisitor staticimportvisitor
linkedlist phaseoperations
/**
* initializes the compilationunit with defaults.
*/
public compilationunit
this null  null  null
/**
* initializes the compilationunit with defaults except for class loader.
*/
public compilationunit groovyclassloader loader
this null  null  loader
/**
* initializes the compilationunit with no security considerations.
*/
public compilationunit compilerconfiguration configuration
this configuration  null  null
/**
* initializes the compilationunit with a codesource for controlling
* security stuff and a class loader for loading classes.
*/
public compilationunit compilerconfiguration configuration  codesource security  groovyclassloader loader
super configuration  loader  null
this names   new arraylist
this queuedsources   new linkedlist
this sources   new hashmap
this summariesbysourcename   new hashmap
this summariesbypublicclassname   new hashmap
this classsourcesbypublicclassname   new hashmap
this ast   new compileunit this classloader  security  this configuration
this generatedclasses   new arraylist
this verifier   new verifier
this resolvevisitor   new resolvevisitor this
this staticimportvisitor   new staticimportvisitor this
phaseoperations   new linkedlist
for  int i   0  i < phaseoperations length  i
phaseoperations   new linkedlist
addphaseoperation new sourceunitoperation
public void call sourceunit source  throws compilationfailedexception
source parse
phases parsing
addphaseoperation convert  phases conversion
addphaseoperation new primaryclassnodeoperation
public void call sourceunit source  generatorcontext context
classnode classnode  throws compilationfailedexception
enumvisitor ev   new enumvisitor compilationunit this  source
ev visitclass classnode
phases conversion
addphaseoperation resolve  phases semantic_analysis
addphaseoperation staticimport  phases semantic_analysis
addphaseoperation compilecompletecheck  phases canonicalization
addphaseoperation classgen  phases class_generation
addphaseoperation output
this classgencallback   null
public void addphaseoperation sourceunitoperation op  int phase
if  phase < 0    phase > phases all  throw new illegalargumentexception     phase
phaseoperations add op
public void addphaseoperation primaryclassnodeoperation op  int phase
if  phase < 0    phase > phases all  throw new illegalargumentexception     phase
phaseoperations add op
public void addphaseoperation groovyclassoperation op
phaseoperations addfirst op
/**
* configures its debugging mode and classloader classpath from a given compiler configuration.
* this cannot be done more than once due to limitations in {@link java.net.urlclassloader urlclassloader}.
*/
public void configure compilerconfiguration configuration
super configure configuration
this debug   configuration getdebug
if   this configured    this classloader instanceof groovyclassloader
appendcompilerconfigurationclasspathtoclassloader configuration   groovyclassloader  this classloader
this configured   true
private void appendcompilerconfigurationclasspathtoclassloader compilerconfiguration configuration  groovyclassloader classloader
/*for (iterator iterator = configuration.getclasspath().iterator(); iterator.hasnext(); ) {
classloader.addclasspath((string) iterator.next());
}*/
/**
* returns the compileunit that roots our ast.
*/
public compileunit getast
return this ast
/**
* get the source summaries
*/
public map getsummariesbysourcename
return summariesbysourcename
public map getsummariesbypublicclassname
return summariesbypublicclassname
public map getclasssourcesbypublicclassname
return classsourcesbypublicclassname
public boolean ispublicclass string classname
return summariesbypublicclassname containskey classname
/**
* get the groovyclasses generated by compile().
*/
public list getclasses
return generatedclasses
/**
* convenience routine to get the first classnode, for
* when you are sure there is only one.
*/
public classnode getfirstclassnode
return  classnode    modulenode  this ast getmodules   get 0   getclasses   get 0
/**
* convenience routine to get the named classnode.
*/
public classnode getclassnode final string name
final classnode result   new classnode null
primaryclassnodeoperation handler   new primaryclassnodeoperation
public void call sourceunit source  generatorcontext context  classnode classnode
if  classnode getname   equals name
result   classnode
try
applytoprimaryclassnodes handler
catch  compilationfailedexception e
if  debug  e printstacktrace
return result
//---------------------------------------------------------------------------
// source creation
/**
* adds a set of file paths to the unit.
*/
public void addsources string paths
for  int i   0  i < paths length  i
file file   new file paths
addsource file
/**
* adds a set of source files to the unit.
*/
public void addsources file files
for  int i   0  i < files length  i
addsource files
/**
* adds a source file to the unit.
*/
public sourceunit addsource file file
return addsource new sourceunit file  configuration  classloader  geterrorcollector
/**
* adds a source file to the unit.
*/
public sourceunit addsource url url
return addsource new sourceunit url  configuration  classloader  geterrorcollector
/**
* adds a inputstream source to the unit.
*/
public sourceunit addsource string name  inputstream stream
readersource source   new inputstreamreadersource stream  configuration
return addsource new sourceunit name  source  configuration  classloader  geterrorcollector
/**
* adds a sourceunit to the unit.
*/
public sourceunit addsource sourceunit source
string name   source getname
source setclassloader this classloader
for  iterator iter   queuedsources iterator    iter hasnext
sourceunit su    sourceunit  iter next
if  name equals su getname     return su
queuedsources add source
return source
/**
* returns an iterator on the unit's sourceunits.
*/
public iterator iterator
return new iterator
iterator nameiterator   names iterator
public boolean hasnext
return nameiterator hasnext
public object next
string name    string  nameiterator next
return sources get name
public void remove
throw new unsupportedoperationexception
/**
* adds a classnode directly to the unit (ie. without source).
* warning: the source is needed for error reporting, using
* this method without setting a sourceunit will cause
* nullpinterexceptions
*/
public void addclassnode classnode node
modulenode module   new modulenode this ast
this ast addmodule module
module addclass node
//---------------------------------------------------------------------------
// external callbacks
/**
* a callback interface you can use to "accompany" the classgen()
* code as it traverses the classnode tree.  you will be called-back
* for each primary and inner class.  use setclassgencallback() before
* running compile() to set your callback.
*/
public abstract static class classgencallback
public abstract void call classvisitor writer  classnode node  throws compilationfailedexception
/**
* sets a classgencallback.  you can have only one, and setting
* it to null removes any existing setting.
*/
public void setclassgencallback classgencallback visitor
this classgencallback   visitor
/**
* a callback interface you can use to get a callback after every
* unit of the compile process.  you will be called-back with a
* processingunit and a phase indicator.  use setprogresscallback()
* before running compile() to set your callback.
*/
public abstract static class progresscallback
public abstract void call processingunit context  int phase  throws compilationfailedexception
/**
* sets a progresscallback.  you can have only one, and setting
* it to null removes any existing setting.
*/
public void setprogresscallback progresscallback callback
this progresscallback   callback
//---------------------------------------------------------------------------
// actions
/**
* synonym for compile(phases.all).
*/
public void compile   throws compilationfailedexception
compile phases all
/**
* compiles the compilation unit from sources.
*/
public void compile int throughphase  throws compilationfailedexception
//
// to support delta compilations, we always restart
// the compiler.  the individual passes are responsible
// for not reprocessing old code.
gotophase phases initialization
throughphase   math min throughphase  phases all
while  throughphase >  phase    phase <  phases all
for  iterator it   phaseoperations iterator    it hasnext
object operation   it next
if  operation instanceof primaryclassnodeoperation
applytoprimaryclassnodes  primaryclassnodeoperation  operation
else if  operation instanceof sourceunitoperation
applytosourceunits  sourceunitoperation  operation
else
applytogeneratedgroovyclasses  groovyclassoperation  operation
if  progresscallback    null  progresscallback call this  phase
completephase
applytosourceunits mark
if  dequeued    continue
gotophase phase   1
if  phase    phases class_generation
sortclasses
errorcollector failiferrors
private void sortclasses   throws compilationfailedexception
iterator modules   this ast getmodules   iterator
while  modules hasnext
modulenode module    modulenode  modules next
// before we actually do the sorting we should check
// for cyclic references
list classes   module getclasses
for  iterator iter   classes iterator    iter hasnext
classnode start    classnode  iter next
classnode cn   start
set parents   new hashset
do
if  parents contains cn getname
geterrorcollector   adderrorandcontinue
new simplemessage     cn getname         start getname    this
cn   null
else
parents add cn getname
cn   cn getsuperclass
while  cn    null
errorcollector failiferrors
module sortclasses
/**
* dequeues any source units add through addsource and resets the compiler phase
* to initialization.
* <p/>
* note: this does not mean a file is recompiled. if a soucreunit has already passed
* a phase it is skipped until a higher phase is reached.
*
* @return true if there was a queued source
* @throws compilationfailedexception
*/
protected boolean dequeued   throws compilationfailedexception
boolean dequeue    queuedsources isempty
while   queuedsources isempty
sourceunit su    sourceunit  queuedsources removefirst
string name   su getname
names add name
sources put name  su
if  dequeue
gotophase phases initialization
return dequeue
/**
* resolves all types
*/
private final sourceunitoperation resolve   new sourceunitoperation
public void call sourceunit source  throws compilationfailedexception
list classes   source ast getclasses
for  iterator it   classes iterator    it hasnext
classnode node    classnode  it next
variablescopevisitor scopevisitor   new variablescopevisitor source
scopevisitor visitclass node
resolvevisitor startresolving node  source
genericsvisitor genericsvisitor   new genericsvisitor source
genericsvisitor visitclass node
private primaryclassnodeoperation staticimport   new primaryclassnodeoperation
public void call sourceunit source  generatorcontext context  classnode classnode  throws compilationfailedexception
staticimportvisitor visitclass classnode  source
/**
* runs convert() on a single sourceunit.
*/
private sourceunitoperation convert   new sourceunitoperation
public void call sourceunit source  throws compilationfailedexception
source convert
compilationunit this ast addmodule source getast
if  compilationunit this progresscallback    null
compilationunit this progresscallback call source  compilationunit this phase
private groovyclassoperation output   new groovyclassoperation
public void call groovyclass gclass  throws compilationfailedexception
boolean failures   false
string name   gclass getname   replace    file separatorchar
file path   new file configuration gettargetdirectory    name
//
// ensure the path is ready for the file
//
file directory   path getparentfile
if  directory    null     directory exists
directory mkdirs
//
// create the file and write out the data
//
byte bytes   gclass getbytes
fileoutputstream stream   null
try
stream   new fileoutputstream path
stream write bytes  0  bytes length
catch  ioexception e
geterrorcollector   adderror message create e getmessage    compilationunit this
failures   true
finally
if  stream    null
try
stream close
catch  exception e
// ignore
/* checks if all needed classes are compiled before generating the bytecode */
private sourceunitoperation compilecompletecheck   new sourceunitoperation
public void call sourceunit source  throws compilationfailedexception
list classes   source ast getclasses
for  iterator it   classes iterator    it hasnext
classnode node    classnode  it next
compileunit cu   node getcompileunit
for  iterator iter   cu iterateclassnodetocompile    iter hasnext
string name    string  iter next
sourceunit su   ast getscriptsourcelocation name
list classesinsourceunit   su ast getclasses
stringbuffer message   new stringbuffer
message
append
append name
append
append su getname
if  classesinsourceunit isempty
message append
else
message append
boolean first   true
for  iterator suclassesiter   classesinsourceunit
iterator    suclassesiter hasnext
classnode cn    classnode  suclassesiter next
if   first
message append
else
first   false
message append cn getname
geterrorcollector   adderrorandcontinue
new simplemessage message tostring    compilationunit this
iter remove
/**
* runs classgen() on a single classnode.
*/
private primaryclassnodeoperation classgen   new primaryclassnodeoperation
public boolean needsortedinput
return true
public void call sourceunit source  generatorcontext context  classnode classnode  throws compilationfailedexception
//
// run the verifier on the outer class
//
try
verifier visitclass classnode
catch  groovyruntimeexception rpe
astnode node   rpe getnode
geterrorcollector   adderror
new syntaxexception rpe getmessage    null  node getlinenumber    node getcolumnnumber
source
labelverifier lv   new labelverifier source
lv visitclass classnode
classcompletionverifier completionverifier   new classcompletionverifier source
completionverifier visitclass classnode
extendedverifier xverifier   new extendedverifier source
xverifier visitclass classnode
// because the class may be generated even if a error was found
// and that class may have an invalid format we fail here if needed
geterrorcollector   failiferrors
//
// prep the generator machinery
//
classvisitor visitor   createclassvisitor
string sourcename    source    null ? classnode getmodule   getdescription     source getname
// only show the file name and its extension like javac does in its stacktraces rather than the full path
// also takes care of both \ and / depending on the host compiling environment
if  sourcename    null
sourcename   sourcename substring math max sourcename lastindexof     sourcename lastindexof       1
classgenerator generator   new asmclassgenerator context  visitor  classloader  sourcename
//
// run the generation and create the class (if required)
//
generator visitclass classnode
byte bytes     classwriter  visitor  tobytearray
generatedclasses add new groovyclass classnode getname    bytes
//
// handle any callback that's been set
//
if  compilationunit this classgencallback    null
classgencallback call visitor  classnode
//
// recurse for inner classes
//
linkedlist innerclasses   generator getinnerclasses
while   innerclasses isempty
classgen call source  context   classnode  innerclasses removefirst
protected classvisitor createclassvisitor
return new classwriter true
//---------------------------------------------------------------------------
// phase handling
/**
* updates the phase marker on all sources.
*/
protected void mark   throws compilationfailedexception
applytosourceunits mark
/**
* marks a single sourceunit with the current phase,
* if it isn't already there yet.
*/
private sourceunitoperation mark   new sourceunitoperation
public void call sourceunit source  throws compilationfailedexception
if  source phase < phase
source gotophase phase
if  source phase    phase    phasecomplete     source phasecomplete
source completephase
//---------------------------------------------------------------------------
// loop simplification for sourceunit operations
/**
* an callback interface for use in the applytosourceunits loop driver.
*/
public abstract static class sourceunitoperation
public abstract void call sourceunit source  throws compilationfailedexception
/**
* a loop driver for applying operations to all sourceunits.
* automatically skips units that have already been processed
* through the current phase.
*/
public void applytosourceunits sourceunitoperation body  throws compilationfailedexception
iterator keys   names iterator
while  keys hasnext
string name    string  keys next
sourceunit source    sourceunit  sources get name
if   source phase < phase      source phase    phase     source phasecomplete
try
body call source
catch  compilationfailedexception e
throw e
catch  exception e
groovybugerror gbe   new groovybugerror e
changebugtext gbe  source
throw gbe
catch  groovybugerror e
changebugtext e  source
throw e
geterrorcollector   failiferrors
//---------------------------------------------------------------------------
// loop simplification for primary classnode operations
/**
* an callback interface for use in the applytosourceunits loop driver.
*/
public abstract static class primaryclassnodeoperation
public abstract void call sourceunit source  generatorcontext context  classnode classnode  throws compilationfailedexception
public boolean needsortedinput
return false
public abstract static class groovyclassoperation
public abstract void call groovyclass gclass  throws compilationfailedexception
private list getprimaryclassnodes boolean sort
list unsorted   new arraylist
iterator modules   this ast getmodules   iterator
while  modules hasnext
modulenode module    modulenode  modules next
iterator classnodes   module getclasses   iterator
while  classnodes hasnext
classnode classnode    classnode  classnodes next
unsorted add classnode
if  sort    false  return unsorted
int indexclass   new int
int indexinterface   new int
int i   0
for  iterator iter   unsorted iterator    iter hasnext    i
classnode node    classnode  iter next
int count   0
classnode element   node
while  element    null
count
element   element getsuperclass
if  node isinterface
indexinterface   count
indexclass    1
else
indexclass   count
indexinterface    1
list sorted   getsorted indexinterface  unsorted
sorted addall getsorted indexclass  unsorted
return sorted
private list getsorted int index  list unsorted
list sorted   new arraylist unsorted size
int start   0
for  int i   0  i < unsorted size    i
int min    1
for  int j   0  j < unsorted size    j
if  index     1  continue
if  min     1
min   j
else if  index < index
min   j
if  min     1  break
sorted add unsorted get min
index    1
return sorted
/**
* a loop driver for applying operations to all primary classnodes in
* our ast.  automatically skips units that have already been processed
* through the current phase.
*/
public void applytoprimaryclassnodes primaryclassnodeoperation body  throws compilationfailedexception
iterator classnodes   getprimaryclassnodes body needsortedinput    iterator
while  classnodes hasnext
sourceunit context   null
try
classnode classnode    classnode  classnodes next
context   classnode getmodule   getcontext
if  context    null    context phase <  phase
body call context  new generatorcontext this ast   classnode
catch  compilationfailedexception e
// fall thorugh, geterrorreporter().failiferrors() will triger
catch  nullpointerexception npe
throw npe
catch  groovybugerror e
changebugtext e  context
throw e
catch  exception e
// check the exception for a nested compilation exception
errorcollector nestedcollector   null
for  throwable next   e getcause    next    e    next    null  next   next getcause
if    next instanceof multiplecompilationerrorsexception   continue
multiplecompilationerrorsexception mcee    multiplecompilationerrorsexception  next
nestedcollector   mcee collector
break
if  nestedcollector    null
geterrorcollector   addcollectorcontents nestedcollector
else
geterrorcollector   adderror new exceptionmessage e  configuration getdebug    this
geterrorcollector   failiferrors
public void applytogeneratedgroovyclasses groovyclassoperation body  throws compilationfailedexception
if  this phase    phases output      this phase    phases class_generation    this phasecomplete
throw new groovybugerror     getphasedescription
boolean failures   false
iterator iterator   this generatedclasses iterator
while  iterator hasnext
//
// get the class and calculate its filesystem name
//
groovyclass gclass    groovyclass  iterator next
try
body call gclass
catch  compilationfailedexception e
// fall thorugh, geterrorreporter().failiferrors() will triger
catch  nullpointerexception npe
throw npe
catch  groovybugerror e
changebugtext e  null
throw e
catch  exception e
groovybugerror gbe   new groovybugerror e
throw gbe
geterrorcollector   failiferrors
private void changebugtext groovybugerror e  sourceunit context
e setbugtext     getphasedescription           context    null  ? context getname              e getbugtext