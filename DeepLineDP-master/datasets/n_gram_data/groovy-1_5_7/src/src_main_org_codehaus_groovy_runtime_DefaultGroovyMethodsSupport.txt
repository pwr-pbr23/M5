/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime
import groovy lang intrange
import groovy lang emptyrange
import org codehaus groovy runtime typehandling defaulttypetransformation
import java util
/**
* support methods for defaultgroovymethods and plugindefaultmethods.
*/
public class defaultgroovymethodssupport
// helper method for getat and putat
protected static rangeinfo sublistborders int size  intrange range
int from   normaliseindex defaulttypetransformation intunbox range getfrom     size
int to   normaliseindex defaulttypetransformation intunbox range getto     size
boolean reverse   range isreverse
if  from > to
// support list[1..-1]
int tmp   to
to   from
from   tmp
reverse    reverse
return new rangeinfo from  to   1  reverse
// helper method for getat and putat
protected static rangeinfo sublistborders int size  emptyrange range
int from   normaliseindex defaulttypetransformation intunbox range getfrom     size
return new rangeinfo from  from  false
/**
* this converts a possibly negative index to a real index into the array.
*
* @param i    the unnormalised index
* @param size the array size
* @return the normalised index
*/
protected static int normaliseindex int i  int size
int temp   i
if  i < 0
i    size
if  i < 0
throw new arrayindexoutofboundsexception     temp       size
return i
protected static class rangeinfo
public int from  to
public boolean reverse
public rangeinfo int from  int to  boolean reverse
this from   from
this to   to
this reverse   reverse
protected static collection clonesimilarcollection collection left  int newcapacity
collection answer   createsimilarcollection left  newcapacity
answer addall left
return answer
protected static collection createsimilarordefaultcollection object object
if  object instanceof collection
return createsimilarcollection  collection  object
return new arraylist
protected static collection createsimilarcollection collection collection
return createsimilarcollection collection  collection size
protected static collection createsimilarcollection collection collection  int newcapacity
if  collection instanceof set
return createsimilarset  set  collection
if  collection instanceof list
return createsimilarlist  list  collection  newcapacity
return new arraylist newcapacity
protected static list createsimilarlist list left  int newcapacity
list answer
if  left instanceof linkedlist
answer   new linkedlist
else if  left instanceof vector
answer   new vector
else
answer   new arraylist newcapacity
return answer
protected static map clonesimilarmap map left
map map
if  left instanceof treemap
map   new treemap left
else if  left instanceof linkedhashmap
map   new linkedhashmap left
else if  left instanceof properties
map   new properties
map putall left
else if  left instanceof hashtable
map   new hashtable left
else
map   new hashmap left
return map
protected static set createsimilarset set self
final set ansset
if  self instanceof sortedset
ansset   new treeset
else if  self instanceof linkedhashset
ansset   new linkedhashset
else
ansset   new hashset
return ansset
/**
* determines if all items of this array are of the same type.
*
* @param cols an array of collections
* @return true if the collections are all of the same type
*/
protected static boolean sametype collection cols
list all   new linkedlist
for  int i   0  i < cols length  i
all addall cols
if  all size      0
return true
object first   all get 0
//trying to determine the base class of the collections
//special case for numbers
class baseclass
if  first instanceof number
baseclass   number class
else if  first    null
baseclass   nullobject class
else
baseclass   first getclass
for  int i   0  i < cols length  i
for  iterator iter   cols iterator    iter hasnext
if   baseclass isinstance iter next
return false
return true