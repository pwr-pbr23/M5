/*
* $id$
*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy text
import groovy lang
import java io bufferedreader
import java io ioexception
import java io printwriter
import java io reader
import java io stringwriter
import java io writer
import java util map
import org codehaus groovy control compilationfailedexception
import org codehaus groovy runtime invokerhelper
/**
* this simple template engine uses jsp <% %> script and <%= %> expression syntax.  it also lets you use normal groovy expressions in
* the template text much like the new jsp el functionality.  the variable 'out' is bound to the writer that the template is being written to.
*
* @author sam
* @author christian stein
* @author paul king
*/
public class simpletemplateengine extends templateengine
private boolean verbose
private static int counter   1
private groovyshell groovyshell
public simpletemplateengine
this groovyshell class getclassloader
public simpletemplateengine boolean verbose
this groovyshell class getclassloader
setverbose verbose
public simpletemplateengine classloader parentloader
this new groovyshell parentloader
public simpletemplateengine groovyshell groovyshell
this groovyshell   groovyshell
public template createtemplate reader reader  throws compilationfailedexception  ioexception
simpletemplate template   new simpletemplate
string script   template parse reader
if  verbose
system out println
system out print script
system out println
try
template script   groovyshell parse script      counter
catch  exception e
throw new groovyruntimeexception     e getmessage
return template
public void setverbose boolean verbose
this verbose   verbose
public boolean isverbose
return verbose
private static class simpletemplate implements template
protected script script
public writable make
return make null
public writable make final map map
return new writable
/**
* write the template document with the set binding applied to the writer.
*
* @see groovy.lang.writable#writeto(java.io.writer)
*/
public writer writeto writer writer
binding binding
if  map    null
binding   new binding
else
binding   new binding map
script scriptobject   invokerhelper createscript script getclass    binding
printwriter pw   new printwriter writer
scriptobject setproperty    pw
scriptobject run
pw flush
return writer
/**
* convert the template and binding into a result string.
*
* @see java.lang.object#tostring()
*/
public string tostring
stringwriter sw   new stringwriter
writeto sw
return sw tostring
/**
* parse the text document looking for <% or <%= and then call out to the appropriate handler, otherwise copy the text directly
* into the script while escaping quotes.
*
* @param reader a reader for the template text
* @return the parsed text
* @throws ioexception if something goes wrong
*/
protected string parse reader reader  throws ioexception
if   reader marksupported
reader   new bufferedreader reader
stringwriter sw   new stringwriter
startscript sw
int c
while   c   reader read        1
if  c
reader mark 1
c   reader read
if  c
sw write
reader reset
else
reader mark 1
c   reader read
if  c
groovyexpression reader  sw
else
reader reset
groovysection reader  sw
continue     at least   is consumed     read next chars
if  c
reader mark 1
c   reader read
if  c
sw write
reader reset
else
reader mark 1
sw write
processgsstring reader  sw
continue     at least   is consumed     read next chars
if  c
sw write
/*
* handle raw new line characters.
*/
if  c         c
if  c            on windows    is a new line
reader mark 1
c   reader read
if  c
reader reset
sw write     nout print
continue
sw write c
endscript sw
return sw tostring
private void startscript stringwriter sw
sw write
sw write  "
private void endscript stringwriter sw
sw write     n"
private void processgsstring reader reader  stringwriter sw  throws ioexception
int c
while   c   reader read        1
if  c         c
sw write c
if  c
break
/**
* closes the currently open write and writes out the following text as a gstring expression until it reaches an end %>.
*
* @param reader a reader for the template text
* @param sw     a stringwriter to write expression content
* @throws ioexception if something goes wrong
*/
private void groovyexpression reader reader  stringwriter sw  throws ioexception
sw write    out print
int c
while   c   reader read        1
if  c
c   reader read
if  c
sw write
else
break
if  c         c
sw write c
sw write     nout print
/**
* closes the currently open write and writes the following text as normal groovy script code until it reaches an end %>.
*
* @param reader a reader for the template text
* @param sw     a stringwriter to write expression content
* @throws ioexception if something goes wrong
*/
private void groovysection reader reader  stringwriter sw  throws ioexception
sw write    "
int c
while   c   reader read        1
if  c
c   reader read
if  c
sw write
else
break
/* don't eat eol chars in sections - as they are valid instruction separators.
* see http://jira.codehaus.org/browse/groovy-980
*/
// if (c != '\n' && c != '\r') {
sw write c
//}
sw write  "