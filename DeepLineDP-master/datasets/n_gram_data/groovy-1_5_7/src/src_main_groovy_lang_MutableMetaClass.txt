/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import java lang reflect method
/**
* <p>an interface that defines methods that implementors of mutable meta classes should specifiy. it provides operations to perform mutations
* on the metaclass instance.</p>
*
* <p>whether a metaclass allows mutation is up to the metaclass itself and considerations of thread safety
* need to be taken into account when making a metaclass mutable</p>
*
* <p>the default implementation allows mutation of metaclass instances before initialisation (before the initialize() method is called)
* but not after, thus ensuring thread safety once a metaclass has been constructed and placed in the registry</p>
*
*
* @see metaclassimpl
* @see metaclass
*
* @author graeme rocher
* @since 1.1
*
*        <p/>
*        created: feb 24, 2007
*        time: 4:05:44 pm
*/
public interface mutablemetaclass extends metaclass
/**
* return whether the metaclass has been modified or not
* @return true if it has
*/
boolean ismodified
/**
* adds a new instance method to this metaclass. instance
* methods are able to overwrite the original methods of the
* class. calling this method should not be done after
* initlise was called.
*
* @param method the method to be added
*/
void addnewinstancemethod method method
/**
* adds a new static method to this metaclass. this is only
* possible as long as initilise was not called.
*
* @param method the method to be added
*/
void addnewstaticmethod method method
/**
* adds a new metamethod to the metaclass
*
* @param metamethod the metamethod to add
*/
void addmetamethod metamethod metamethod
/**
* adds a new metabeanproperty to the metaclass
*
* @param metabeanproperty the metabeanproperty instance
*/
void addmetabeanproperty metabeanproperty metabeanproperty
// todo: add methods like addmetaconstructor, addmetaattribute, addmetaannotation etc.