/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import java util iterator
import java util list
import java util map
import org codehaus groovy ast expr
import org codehaus groovy ast stmt assertstatement
import org codehaus groovy ast stmt casestatement
import org codehaus groovy ast stmt dowhilestatement
import org codehaus groovy ast stmt expressionstatement
import org codehaus groovy ast stmt forstatement
import org codehaus groovy ast stmt ifstatement
import org codehaus groovy ast stmt returnstatement
import org codehaus groovy ast stmt statement
import org codehaus groovy ast stmt switchstatement
import org codehaus groovy ast stmt synchronizedstatement
import org codehaus groovy ast stmt throwstatement
import org codehaus groovy ast stmt whilestatement
/**
* visitor to transform expressions in a whole class.
* transformed expressions are usually not visited.
*
* @author jochen theodorou
*/
public abstract class classcodeexpressiontransformer extends classcodevisitorsupport implements expressiontransformer
protected void visitconstructorormethod methodnode node  boolean isconstructor
parameter paras   node getparameters
for  int i 0  i<paras length  i
parameter p   paras
if  p hasinitialexpression
expression init   p getinitialexpression
p setinitialexpression transform init
super visitconstructorormethod node isconstructor
public void visitswitch switchstatement statement
expression exp   statement getexpression
statement setexpression transform exp
list list   statement getcasestatements
for  iterator iter   list iterator    iter hasnext
casestatement casestatement    casestatement  iter next
casestatement visit this
statement getdefaultstatement   visit this
public void visitfield fieldnode node
visitannotations node
expression init   node getinitialexpression
node setinitialvalueexpression transform init
public void visitproperty propertynode node
visitannotations node
statement statement   node getgetterblock
visitclasscodecontainer statement
statement   node getsetterblock
visitclasscodecontainer statement
public void visitifelse ifstatement ifelse
ifelse setbooleanexpression  booleanexpression   transform ifelse getbooleanexpression
ifelse getifblock   visit this
ifelse getelseblock   visit this
public expression transform expression exp
if  exp  null  return null
return exp transformexpression this
public void visitannotations annotatednode node
map annotionmap   node getannotations
if  annotionmap isempty    return
iterator it   annotionmap values   iterator
while  it hasnext
annotationnode an    annotationnode  it next
//skip builtin properties
if  an isbuiltin    continue
for  iterator iter   an getmembers   entryset   iterator    iter hasnext
map entry member    map entry  iter next
expression membervalue    expression  member getvalue
member setvalue transform membervalue
public void visitreturnstatement returnstatement statement
statement setexpression transform statement getexpression
public void visitassertstatement assertstatement as
as setbooleanexpression  booleanexpression   transform as getbooleanexpression
as setmessageexpression transform as getmessageexpression
public void visitcasestatement casestatement statement
statement setexpression transform statement getexpression
statement getcode   visit this
public void visitdowhileloop dowhilestatement loop
loop setbooleanexpression  booleanexpression   transform loop getbooleanexpression
super visitdowhileloop loop
public void visitforloop forstatement forloop
forloop setcollectionexpression transform forloop getcollectionexpression
super visitforloop forloop
public void visitsynchronizedstatement synchronizedstatement sync
sync setexpression transform sync getexpression
super visitsynchronizedstatement sync
public void visitthrowstatement throwstatement ts
ts setexpression transform ts getexpression
public void visitwhileloop whilestatement loop
loop setbooleanexpression  booleanexpression  transform loop getbooleanexpression
super visitwhileloop loop
public void visitexpressionstatement expressionstatement es
es setexpression transform es getexpression