/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang groovyobjectsupport
import groovy lang groovyruntimeexception
import javax management
import java io ioexception
import java util
/**
* a groovyobject facade for an underlying mbean which acts like a normal
* groovy object but which is actually implemented via
* an underlying jmx mbean.
* properties and normal method invocations
* delegate to the mbeanserver to the actual mbean.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author steve button
* @author paul king
* @version $revision$
*/
public class groovymbean extends groovyobjectsupport
private final mbeanserverconnection server
private final objectname name
private mbeaninfo beaninfo
private final boolean ignoreerrors
private final map operations   new hashmap
public groovymbean mbeanserverconnection server  string objectname  throws jmexception  ioexception
this server  objectname  false
public groovymbean mbeanserverconnection server  string objectname  boolean ignoreerrors  throws jmexception  ioexception
this server  new objectname objectname   ignoreerrors
public groovymbean mbeanserverconnection server  objectname name  throws jmexception  ioexception
this server  name  false
public groovymbean mbeanserverconnection server  objectname name  boolean ignoreerrors  throws jmexception  ioexception
this server   server
this name   name
this ignoreerrors   ignoreerrors
this beaninfo   server getmbeaninfo name
mbeanoperationinfo operationinfos   beaninfo getoperations
for  int i   0  i < operationinfos length  i
mbeanoperationinfo info   operationinfos
string signature   createsignature info
// include a simple fix here to support overloaded operations on the mbean.
// construct a simple key for an operation by adding the number of parameters it uses
string operationkey   createoperationkey info getname    signature length
operations put operationkey  signature
public mbeanserverconnection server
return server
public objectname name
return name
public mbeaninfo info
return beaninfo
public object getproperty string property
try
return server getattribute name  property
catch  mbeanexception e
throwexceptionwithtarget     property      e
catch  exception e
if   ignoreerrors
throwexception     property      e
return null
public void setproperty string property  object value
try
server setattribute name  new attribute property  value
catch  mbeanexception e
throwexceptionwithtarget     property      e
catch  exception e
throwexception     property      e
public object invokemethod string method  object arguments
// moved this outside the try block so we can obtain the number of parameters
// specified in the arguments array, which is needed to find the correct method.
object argarray   null
if  arguments instanceof object
argarray    object  arguments
else
argarray   new object arguments
// locate the specific method based on the name and number of parameters
string operationkey   createoperationkey method  argarray length
string signature    string  operations get operationkey
if  signature    null
try
return server invoke name  method  argarray  signature
catch  mbeanexception e
throwexceptionwithtarget     method      e
catch  exception e
throwexception     method      e
return null
else
return super invokemethod method  arguments
protected string createsignature mbeanoperationinfo info
mbeanparameterinfo params   info getsignature
string answer   new string
for  int i   0  i < params length  i
answer   params gettype
return answer
/**
* construct a simple key based on the method name and the number of parameters
*
* @param operation - the mbean operation name
* @param params    - the number of parameters the operation supports
* @return simple unique identifier for a method
*/
protected string createoperationkey string operation  int params
// this could be changed to support some hash of the parameter types, etc.
return operation       params
/**
* list of the names of each of the attributes on the mbean
*
* @return list of attribute names
*/
public collection listattributenames
list list   new arraylist
try
mbeanattributeinfo attrs   beaninfo getattributes
for  int i   0  i < attrs length  i
mbeanattributeinfo attr   attrs
list add attr getname
catch  exception e
throwexception    e
return list
/**
* the values of each of the attributes on the mbean
*
* @return list of values of each attribute
*/
public list listattributevalues
list list   new arraylist
collection names   listattributenames
for  iterator iterator   names iterator    iterator hasnext
string name    string  iterator next
try
object val   this getproperty name
if  val    null
list add name       val tostring
catch  exception e
throwexception    e
return list
/**
* list of string representations of all of the attributes on the mbean.
*
* @return list of descriptions of each attribute on the mbean
*/
public collection listattributedescriptions
list list   new arraylist
try
mbeanattributeinfo attrs   beaninfo getattributes
for  int i   0  i < attrs length  i
mbeanattributeinfo attr   attrs
list add describeattribute attr
catch  exception e
throwexception    e
return list
/**
* description of the specified attribute name.
*
* @param attr - the attribute
* @return string the description
*/
protected string describeattribute mbeanattributeinfo attr
stringbuffer buf   new stringbuffer
buf append
if  attr isreadable
buf append
if  attr iswritable
buf append
buf append
append attr gettype
append
append attr getname
return buf tostring
/**
* description of the specified attribute name.
*
* @param attributename - stringified name of the attribute
* @return the description
*/
public string describeattribute string attributename
string ret
try
mbeanattributeinfo attributes   beaninfo getattributes
for  int i   0  i < attributes length  i
mbeanattributeinfo attribute   attributes
if  attribute getname   equals attributename
return describeattribute attribute
catch  exception e
throwexception     attributename      e
return ret
/**
* names of all the operations available on the mbean.
*
* @return all the operations on the mbean
*/
public collection listoperationnames
list list   new arraylist
try
mbeanoperationinfo operations   beaninfo getoperations
for  int i   0  i < operations length  i
mbeanoperationinfo operation   operations
list add operation getname
catch  exception e
throwexception    e
return list
/**
* description of all of the operations available on the mbean.
*
* @return full description of each operation on the mbean
*/
public collection listoperationdescriptions
list list   new arraylist
try
mbeanoperationinfo operations   beaninfo getoperations
for  int i   0  i < operations length  i
mbeanoperationinfo operation   operations
list add describeoperation operation
catch  exception e
throwexception    e
return list
/**
* get the description of the specified operation.  this returns a collection since
* operations can be overloaded and one operationname can have multiple forms.
*
* @param operationname the name of the operation to describe
* @return collection of operation description
*/
public list describeoperation string operationname
list list   new arraylist
try
mbeanoperationinfo operations   beaninfo getoperations
for  int i   0  i < operations length  i
mbeanoperationinfo operation   operations
if  operation getname   equals operationname
list add describeoperation operation
catch  exception e
throwexception     operationname      e
return list
/**
* description of the operation.
*
* @param operation the operation to describe
* @return pretty-printed description
*/
protected string describeoperation mbeanoperationinfo operation
stringbuffer buf   new stringbuffer
buf append operation getreturntype
append
append operation getname
append
mbeanparameterinfo params   operation getsignature
for  int j   0  j < params length  j
mbeanparameterinfo param   params
if  j    0
buf append
buf append param gettype
append
append param getname
buf append
return buf tostring
/**
* return an end user readable representation of the underlying mbean
*
* @return the user readable description
*/
public string tostring
stringbuffer buf   new stringbuffer
buf append
append
append name getcanonicalname
append
if   listattributedescriptions   isempty
buf append
for  iterator iterator   listattributedescriptions   iterator    iterator hasnext
buf append
append  string  iterator next
if   listoperationdescriptions   isempty
buf append
for  iterator iterator   listoperationdescriptions   iterator    iterator hasnext
buf append
append  string  iterator next
return buf tostring
private void throwexception string m  exception e
if   ignoreerrors
throw new groovyruntimeexception m   e  e
private void throwexceptionwithtarget string m  mbeanexception e
if   ignoreerrors
throw new groovyruntimeexception m   e  e gettargetexception