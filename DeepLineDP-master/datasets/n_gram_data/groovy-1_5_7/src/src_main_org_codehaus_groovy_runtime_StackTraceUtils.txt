/* copyright 2004-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without c;pwarranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime
import java io printwriter
import java util arraylist
import java util enumeration
import java util list
import java util logging level
import java util logging logmanager
import java util logging logger
/**
* originally was grails.utils.grailsutils, removed some grails specific stuff.
* utility methods removing internal lines from stack traces
*
* @author graeme rocher
* @since 0.2
*
* @version $revision: 5544 $
* first created: 02-jun-2006
* last updated: $date: 2007-09-21 13:53:07 -0500 (fri, 21 sep 2007) $
*/
public class stacktraceutils
public static final string stack_log_name
private static final logger stack_log
// set log to consume traces by default, end user can override later
static
outer  do
enumeration existinglogs   logmanager getlogmanager   getloggernames
while  existinglogs hasmoreelements
if  stack_log_name equals existinglogs nextelement
stack_log   logger getlogger stack_log_name
break outer
stack_log   logger getlogger stack_log_name
stack_log setuseparenthandlers false
while  false
private static final string groovy_packages
system getproperty
split
/**
* <p>remove all apparently groovy-internal trace entries from the exception instance<p>
* <p>this modifies the original instance and returns it, it does not clone</p>
* @param t
* @return the exception passed in, after cleaning the stack trace
*/
public static throwable sanitize throwable t
// note that this getboolean access may well be synced...
if   boolean getboolean
stacktraceelement trace   t getstacktrace
list newtrace   new arraylist
for  int i   0  i < trace length  i
stacktraceelement stacktraceelement   trace
if  isapplicationclass stacktraceelement getclassname
newtrace add  stacktraceelement
// we don't want to lose anything, so log it
stack_log log level warning     t
stacktraceelement clean   new stacktraceelement
newtrace toarray clean
t setstacktrace clean
return t
public static void printsanitizedstacktrace throwable t  printwriter p
t   stacktraceutils sanitize t
stacktraceelement trace   t getstacktrace
for  int i   0  i < trace length  i
stacktraceelement stacktraceelement   trace
p println     stacktraceelement getclassname
stacktraceelement getmethodname
stacktraceelement getlinenumber
public static void printsanitizedstacktrace throwable t
printsanitizedstacktrace t  new printwriter system err
public static boolean isapplicationclass string classname
for  int i   0  i < groovy_packages length  i
string groovypackage   groovy_packages
if  classname startswith groovypackage
return false
return true
/**
* <p>extracts the root cause of the exception, no matter how nested it is</p>
* @param t
* @return the deepest cause of the exception that can be found
*/
public static throwable extractrootcause throwable t
throwable result   t
while  result getcause      null
result   result getcause
return result
/**
* <p>get the root cause of an exception and sanitize it for display to the user</p>
* <p>this will modify the stacktrace of the root cause exception object and return it</p>
* @param t
* @return the root cause exception instance, with its stace trace modified to filter out groovy runtime classes
*/
public static throwable sanitizerootcause throwable t
return stacktraceutils sanitize stacktraceutils extractrootcause t
/**
* <p>sanitize the exception and all nested causes</p>
* <p>this will modify the stacktrace of the exception instance and all its causes irreversibly</p>
* @param t
* @return the root cause exception instances, with stack trace modified to filter out groovy runtime classes
*/
public static throwable deepsanitize throwable t
throwable current   t
while  current getcause      null
current   stacktraceutils sanitize current getcause
return stacktraceutils sanitize t