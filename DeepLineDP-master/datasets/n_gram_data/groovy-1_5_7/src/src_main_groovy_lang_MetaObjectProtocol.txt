/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import java util list
/**
* <p>an interface that defines the api usable by clients of groovy's meta object protocol (mop). these methods are
* implemented by the reference implementation of the @link groovy.lang.metaclass interface.</p>
*
* @see metaclassimpl
*
* @author john wilson
* @author graeme rocher
*/
public interface metaobjectprotocol
/**
* obtain a list of all meta properties available on this meta class
*
* @see groovy.lang.metabeanproperty
* @return a list of metabeanproperty instances
*/
list getproperties
/**
* obtain a list of all the meta methods available on this meta class
*
* @see groovy.lang.metamethod
* @return a list of metamethod instances
*/
list getmethods
/**
* <p>returns an object satisfying groovy truth if the implementing metaclass responds to
* a method with the given name and arguments types.
*
* <p>note that this method's return value is based on realised methods and does not take into account
* objects or classes that implement invokemethod or methodmissing
*
* <p>this method is "safe" in that it will always return a value and never throw an exception
*
* @param obj the object to inspect
* @param name the name of the method of interest
* @param argtypes the argument types to match against
* @return a list of metamethods matching the argument types which will be empty if no matching methods exist
*/
list respondsto object obj  string name  object argtypes
/**
* <p>returns an object satisfying groovy truth if the implementing metaclass responds to
* a method with the given name regardless of arguments. in other words this method will
* return for foo() and foo(string).
*
* <p>note that this method's return value is based on realised methods and does not take into account
* objects or classes that implement invokemethod or methodmissing
*
* <p>this method is "safe" in that it will always return a value and never throw an exception
*
* @param obj the object to inspect
* @param name the name of the method of interest
* @return a list of metamethods which will be empty if no methods with the given name exist
*/
list respondsto object obj  string name
/**
* <p>returns true of the implementing metaclass has a property of the given name
*
* <p>note that this method will only return true for realised properties and does not take into
* account implementation of getproperty or propertymissing
*
* @param obj the object to inspect
* @param name the name of the property
* @return the metaproperty or null if it doesn't exist
*/
metaproperty hasproperty object obj  string name
/**
* returns a metaproperty for the given name or null if it doesn't exist
*
* @param name the name of the metaproperty
* @return a metaproperty or null
*/
metaproperty getmetaproperty string name
/**
* retreives a static metamethod for the given name and argument values, using the types of the arguments
* to establish the chosen metamethod
*
* @param name the name of the metamethod
* @param args the argument types
* @return a metamethod or null if it doesn't exist
*/
metamethod getstaticmetamethod string name  object args
/**
* retrieves an instance metamethod for the given name and argument values, using the types of the
* argument values to establish the chosen metamethod
*
* @param name the name of the metamethod
* @param args the argument types
* @return a metamethod or null if it doesn't exist
*/
metamethod getmetamethod string name  object args
/**
* retrieves that java class that the attached meta behaviours apply to
*
* @return the java.lang.class instance
*/
class gettheclass
/**
* invokes a constructor for the given arguments. the metaclass will attempt to pick the best argument which
* matches the types of the objects passed within the arguments array
*
* @param arguments the arguments to the constructor
* @return an instance of the java.lang.class that this metaobjectprotocol object applies to
*/
object invokeconstructor object arguments
/**
* <p>invokes a method on the given object with the given name and arguments. the metaclass will attempt to pick
* the best method for the given name and arguments. if a method cannot be invoked a missingmethodexception will be
* thrown.</p>
*
*
* @see groovy.lang.missingmethodexception
*
* @param object the instance which the method is invoked on
* @param methodname the name of the method
* @param arguments the arguments to the method
* @return the return value of the method which is null if the return type is void
*/
object invokemethod object object  string methodname  object arguments
/**
* <p>invokes a method on the given object, with the given name and single argument.</p>
*
* @see #invokemethod(object, string, object[])
*
* @param object the object to invoke the method on
* @param methodname the name of the method
* @param arguments the argument to the method
* @return the return value of the method which is null if the return type is void
*/
object invokemethod object object  string methodname  object arguments
/**
* <p>invokes a static method on the given object with the given name and arguments.</p>
*
* <p> the object can either be an instance of the class that this
* metaobjectprotocol instance applies to or the java.lang.class instance itself. if a method cannot be invoked
* a missingmethodexception is will be thrown</p>
*
* @see groovy.lang.missingmethodexception
*
* @param object an instance of the class returned by the gettheclass() method or the class itself
* @param methodname the name of the method
* @param arguments the arguments to the method
* @return the return value of the method which is null if the return type is void
*/
object invokestaticmethod object object  string methodname  object arguments
/**
* <p>retrieves a property of an instance of the class returned by the gettheclass() method. </p>
*
* <p>what this means is largely down to the metaclass implementation, however the default case would result
* in an attempt to invoke a javabean getter, or if no such getter exists a public field of the instance.</p>
*
* @see metaclassimpl
*
* @param object an instance of the class returned by the gettheclass() method
* @param property the name of the property to retrieve the value for
* @return the properties value
*/
object getproperty object object  string property
/**
* <p>sets a property of an instance of the class returned by the gettheclass() method.</p>
*
* <p>what this means is largely down to the metaclass implementation, however the default case would result
* in an attempt to invoke a javabean setter, or if no such setter exists to set a public field of the instance.</p>
*
* @see metaclassimpl
*
* @param object an instance of the class returned by the gettheclass() method
* @param property the name of the property to set
* @param newvalue the new value of the property
*/
void setproperty object object  string property  object newvalue
/**
* <p>retrieves an attribute of an instance of the class returned by the gettheclass() method. </p>
*
* <p>what this means is largely down to the metaclass implementation, however the default case would result
* in attempt to read a field of the instance.</p>
*
* @see metaclassimpl
*
* @param object an instance of the class returned by the gettheclass() method
* @param attribute the name of the attribute to retrieve the value for
* @return the attribute value
*/
object getattribute object object  string attribute
/**
* <p>sets an attribute of an instance of the class returned by the gettheclass() method.</p>
*
* <p>what this means is largely down to the metaclass implementation, however the default case would result
* in an attempt to set a field of the instance.</p>
*
* @see metaclassimpl
*
* @param object an instance of the class returned by the gettheclass() method
* @param attribute the name of the attribute to set
* @param newvalue the new value of the attribute
*/
void setattribute object object  string attribute  object newvalue