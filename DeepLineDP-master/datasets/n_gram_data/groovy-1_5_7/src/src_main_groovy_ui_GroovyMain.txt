/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy ui
import groovy lang groovyshell
import groovy lang script
import java io
import java math biginteger
import java util iterator
import java util list
import org apache commons cli commandline
import org apache commons cli commandlineparser
import org apache commons cli helpformatter
import org apache commons cli optionbuilder
import org apache commons cli options
import org apache commons cli parseexception
import org apache commons cli posixparser
import org codehaus groovy control compilationfailedexception
import org codehaus groovy control compilerconfiguration
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime invokerinvocationexception
/**
* a command line to execute groovy.
*
* @author jeremy rayner
* @author yuri schimke
* @version $revision$
*/
public class groovymain
// arguments to the script
private list args
// is this a file on disk
private boolean isscriptfile
// filename or content of script
private string script
// process args as input files
private boolean processfiles
// edit input files in place
private boolean editfiles
// automatically output the result of each script
private boolean autooutput
// automatically split each line using the splitpattern
private boolean autosplit
// the pattern used to split the current line
private string splitpattern
// process sockets
private boolean processsockets
// port to listen on when processing sockets
private int port
// backup input files with extension
private string backupextension
// do you want full stack traces in script exceptions?
private boolean debug   false
// compiler configuration, used to set the encodings of the scripts/classes
private compilerconfiguration conf   new compilerconfiguration system getproperties
/**
* main cli interface.
*
* @param args all command line args.
*/
public static void main string args
processargs args  system out
// package-level visibility for testing purposes (just usage/errors at this stage)
// todo: should we have an 'err' printstream too for parseexception?
static void processargs string args  final printstream out
options options   buildoptions
try
commandline cmd   parsecommandline options  args
if  cmd hasoption
printhelp out  options
else if  cmd hasoption
string version   invokerhelper getversion
out println     version       system getproperty
else
// if we fail, then exit with an error so scripting frameworks can catch it
// todo: pass printstream(s) down through process
if   process cmd
system exit 1
catch  parseexception pe
out println     pe getmessage
printhelp out  options
private static void printhelp printstream out  options options
helpformatter formatter   new helpformatter
printwriter pw   new printwriter out
formatter printhelp
pw
80
options
2
4
null     footer
false
pw flush
/**
* parse the command line.
*
* @param options the options parser.
* @param args    the command line args.
* @return parsed command line.
* @throws parseexception if there was a problem.
*/
private static commandline parsecommandline options options  string args  throws parseexception
commandlineparser parser   new posixparser
return parser parse options  args  true
/**
* build the options parser.  has to be synchronized because of the way options are constructed.
*
* @return an options parser.
*/
private static synchronized options buildoptions
options options   new options
options addoption
optionbuilder withlongopt
withdescription
hasarg true
withargname
create
options addoption
optionbuilder hasarg false
withdescription
withlongopt
create
options addoption
optionbuilder hasarg false
withdescription
withlongopt
create
options addoption
optionbuilder hasarg false
withdescription
withlongopt
create
options addoption
optionbuilder withargname
hasarg
withdescription
withlongopt
create
options addoption
optionbuilder withargname
hasarg
withdescription
create
options addoption
optionbuilder withargname
hasoptionalarg
withdescription
create
options addoption
optionbuilder hasarg false
withdescription
create
options addoption
optionbuilder hasarg false
withdescription
create
options addoption
optionbuilder withargname
hasoptionalarg
withdescription
create
options addoption
optionbuilder withargname
hasoptionalarg
withdescription
withlongopt
create
return options
private static void setsystempropertyfrom final string namevalue
if namevalue  null  throw new illegalargumentexception
string name  value
int i   namevalue indexof
if  i     1
name   namevalue
value   boolean true tostring
else
name   namevalue substring 0  i
value   namevalue substring i   1  namevalue length
name   name trim
system setproperty name  value
/**
* process the users request.
*
* @param line the parsed command line.
* @throws parseexception if invalid options are chosen
*/
private static boolean process commandline line  throws parseexception
groovymain main   new groovymain
list args   line getarglist
if  line hasoption
string values   line getoptionvalues
for  int i 0  i<values length  i
setsystempropertyfrom values
// add the ability to parse scripts with a specified encoding
main conf setsourceencoding line getoptionvalue   main conf getsourceencoding
main isscriptfile    line hasoption
main debug   line hasoption
main conf setdebug main debug
main processfiles   line hasoption       line hasoption
main autooutput   line hasoption
main editfiles   line hasoption
if  main editfiles
main backupextension   line getoptionvalue
main autosplit   line hasoption
string sp   line getoptionvalue
if  sp    null
main splitpattern   sp
if  main isscriptfile
if  args isempty
throw new parseexception
main script    string  args remove 0
if  main script endswith
throw new parseexception     main script
else
main script   line getoptionvalue
main processsockets   line hasoption
if  main processsockets
string p   line getoptionvalue           default port to listen to
main port   integer parseint p
main args   args
return main run
/**
* run the script.
*/
private boolean run
try
if  processsockets
processsockets
else if  processfiles
processfiles
else
processonce
return true
catch  compilationfailedexception e
system err println e
return false
catch  throwable e
if  e instanceof invokerinvocationexception
invokerinvocationexception iie    invokerinvocationexception  e
e   iie getcause
system err println     e
if  debug
e printstacktrace
else
stacktraceelement stacktrace   e getstacktrace
for  int i   0  i < stacktrace length  i
stacktraceelement element   stacktrace
string filename   element getfilename
if  filename  null     filename endswith
system err println     element
return false
/**
* process sockets.
*/
private void processsockets   throws compilationfailedexception  ioexception
groovyshell groovy   new groovyshell conf
//check the script is currently valid before starting a server against the script
if  isscriptfile
groovy parse new fileinputstream huntforthescriptfile script
else
groovy parse script
new groovysocketserver groovy  isscriptfile  script  autooutput  port
/**
* hunt for the script file, doesn't bother if it is named precisely.
*
* tries in this order:
* - actual supplied name
* - name.groovy
* - name.gvy
* - name.gy
* - name.gsh
*/
public file huntforthescriptfile string input
string scriptfilename   input trim
file scriptfile   new file scriptfilename
string standardextensions
int i   0
while  i < standardextensions length     scriptfile exists
scriptfile   new file scriptfilename   standardextensions
i
// if we still haven't found the file, point back to the originally specified filename
if   scriptfile exists
scriptfile   new file scriptfilename
return scriptfile
/**
* process the input files.
*/
private void processfiles   throws compilationfailedexception  ioexception
groovyshell groovy   new groovyshell conf
script s
if  isscriptfile
s   groovy parse huntforthescriptfile script
else
s   groovy parse script
if  args isempty
bufferedreader reader   new bufferedreader new inputstreamreader system in
printwriter writer   new printwriter system out
try
processreader s  reader  writer
finally
reader close
writer close
else
iterator i   args iterator
while  i hasnext
string filename    string  i next
file file   huntforthescriptfile filename
processfile s  file
/**
* process a single input file.
*
* @param s    the script to execute.
* @param file the input file.
*/
private void processfile script s  file file  throws ioexception
if   file exists
throw new filenotfoundexception file getname
if   editfiles
bufferedreader reader   new bufferedreader new filereader file
try
printwriter writer   new printwriter system out
processreader s  reader  writer
writer flush
finally
reader close
else
file backup
if  backupextension    null
backup   file createtempfile
backup deleteonexit
else
backup   new file file getpath     backupextension
backup delete
if   file renameto backup
throw new ioexception     file       backup
bufferedreader reader   new bufferedreader new filereader backup
try
printwriter writer   new printwriter new filewriter file
try
processreader s  reader  writer
finally
writer close
finally
reader close
/**
* process a script against a single input file.
*
* @param s      script to execute.
* @param reader input file.
* @param pw     output sink.
*/
private void processreader script s  bufferedreader reader  printwriter pw  throws ioexception
string line
string linecountname
s setproperty linecountname  biginteger zero
string autosplitname
s setproperty    pw
while   line   reader readline       null
s setproperty    line
s setproperty linecountname    biginteger s getproperty linecountname   add biginteger one
if autosplit
s setproperty autosplitname  line split splitpattern
object o   s run
if  autooutput    o    null
pw println o
/**
* process the standard, single script with args.
*/
private void processonce   throws compilationfailedexception  ioexception
groovyshell groovy   new groovyshell conf
if  isscriptfile
groovy run huntforthescriptfile script   args
else
groovy run script     args