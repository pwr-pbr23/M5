/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import groovy lang groovyclassloader
/**
* a base class for data structures that can collect messages and errors
* during processing.
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @version $id$
*/
public abstract class processingunit
/**
* the current phase
*/
protected int phase
/**
* set true if phase is finished
*/
protected boolean phasecomplete
/**
* configuration and other settings that control processing
*/
protected compilerconfiguration configuration
/**
* the classloader to use during processing
*/
protected groovyclassloader classloader
/**
* a helper to share errors and report them
*/
protected errorcollector errorcollector
/**
* initialize the processingunit to the empty state.
*/
public processingunit compilerconfiguration configuration  groovyclassloader classloader  errorcollector er
this phase   phases initialization
this setclassloader classloader
configure  configuration    null ? new compilerconfiguration     configuration
if  er  null  er   new errorcollector getconfiguration
this errorcollector   er
/**
* reconfigures the processingunit.
*/
public void configure compilerconfiguration configuration
this configuration   configuration
public compilerconfiguration getconfiguration
return configuration
public void setconfiguration compilerconfiguration configuration
this configuration   configuration
/**
* returns the class loader in use by this processingunit.
*/
public groovyclassloader getclassloader
return classloader
/**
* sets the class loader for use by this processingunit.
*/
public void setclassloader groovyclassloader loader
classloader parent   thread currentthread   getcontextclassloader
if  parent    null  parent   processingunit class getclassloader
this classloader    loader    null ? new groovyclassloader parent  configuration    loader
/**
* returns the current phase.
*/
public int getphase
return this phase
/**
* returns the description for the current phase.
*/
public string getphasedescription
return phases getdescription this phase
public errorcollector geterrorcollector
return errorcollector
//---------------------------------------------------------------------------
// processing
/**
* marks the current phase complete and processes any
* errors.
*/
public void completephase   throws compilationfailedexception
errorcollector failiferrors
phasecomplete   true
/**
* a synonym for <code>gotophase( phase + 1 )</code>.
*/
public void nextphase   throws compilationfailedexception
gotophase this phase   1
/**
* wraps up any pending operations for the current phase
* and switches to the next phase.
*/
public void gotophase int phase  throws compilationfailedexception
if   this phasecomplete
completephase
this phase   phase
this phasecomplete   false