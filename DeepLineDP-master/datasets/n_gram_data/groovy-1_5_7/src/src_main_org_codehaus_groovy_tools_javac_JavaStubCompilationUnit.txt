/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy tools javac
import java io file
import java util iterator
import java util linkedlist
import java util list
import groovy lang groovyclassloader
import org codehaus groovy ast classnode
import org codehaus groovy classgen generatorcontext
import org codehaus groovy control compilationfailedexception
import org codehaus groovy control compilationunit
import org codehaus groovy control compilerconfiguration
import org codehaus groovy control phases
import org codehaus groovy control resolvevisitor
import org codehaus groovy control sourceunit
/**
* compilation unit to <em>only</em> generate java stubs for groovy sources.
*
* @version $id$
* @author <a href="mailto:jason@planet57.com">jason dillon</a>
*/
public class javastubcompilationunit
extends compilationunit
private final list javasources   new linkedlist
public javastubcompilationunit final compilerconfiguration config  final groovyclassloader classloader  final file outputdirectory
super config  null  classloader
addphaseoperation new javaresolveroperation    phases conversion
addphaseoperation new stubgeneratoroperation outputdirectory   phases conversion
public void gotophase final int phase  throws compilationfailedexception
super gotophase phase
if  phase    phases semantic_analysis
javasources clear
public void addsourcefile final file file
if  file getname   endswith
addjavasource file
else
addsource file
private void addjavasource final file file
//
// fixme: um... not really sure what this is doing...
//        so either document what its job is... or whack it ;-)
//
string path   file getabsolutepath
iterator iter   javasources iterator
while  iter hasnext
if  path equals iter next
return
javasources add path
private boolean havejavasources
return  javasources isempty
//
// custom operations
//
/**
* operation to resolve java sources.
*/
private class javaresolveroperation
extends primaryclassnodeoperation
public void call final sourceunit source  final generatorcontext context  final classnode node  throws compilationfailedexception
if  havejavasources
resolvevisitor v   new javaawareresolvevisitor javastubcompilationunit this
v startresolving node  source
/**
* operation to generate java stubs from groovy sources.
*/
private class stubgeneratoroperation
extends primaryclassnodeoperation
private final javastubgenerator generator
public stubgeneratoroperation final file outputdirectory
outputdirectory mkdirs
boolean java5   false
string target   javastubcompilationunit this getconfiguration   gettargetbytecode
// enable java5 mode if the configuration lets us
if  target    null    target trim   equals
java5   true
generator   new javastubgenerator outputdirectory  true  java5
public void call final sourceunit source  final generatorcontext context  final classnode node  throws compilationfailedexception
if  havejavasources
try
generator generateclass node
catch  exception e
source addexception e