/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import org codehaus groovy runtime typehandling defaulttypetransformation
import org codehaus groovy runtime scriptbytecodeadapter
import org codehaus groovy runtime defaultgroovymethods
import java util
/**
* a collections utility class
*
* @author paul king
*/
public class groovycollections
/**
* finds all combinations of items from an array of lists.
*
* @param lists an array of lists
* @return a list of the combinations found
* @see #combinations(collection)
*/
public static list combinations object lists
return combinations arrays aslist lists
/**
* finds all combinations of items from a collection of lists.
* so, <code>combinations([[true, false], [true, false]])</code>
* is <code>[[true, true], [false, true], [true, false], [false, false]]</code>
* and <code>combinations([['a', 'b'],[1, 2, 3]])</code>
* is <code>[['a', 1], ['b', 1], ['a', 2], ['b', 2], ['a', 3], ['b', 3]]</code>.
*
* @param lists a collection of lists
* @return a list of the combinations found
*/
public static list combinations collection lists
list combinations   new arraylist
for  iterator outer   lists iterator    outer hasnext
object candidatelist   outer next
list list    list  defaulttypetransformation casttotype candidatelist  list class
if  combinations isempty
for  int i   0  i < list size    i
list l   new arraylist
l add list get i
combinations add l
else
list savedcombinations   new arraylist combinations
list newcombinations   new arraylist
for  iterator inner   list iterator    inner hasnext
object value   inner next
for  iterator combos   savedcombinations iterator    combos hasnext
list oldlist   new arraylist  list  combos next
oldlist add value
newcombinations add oldlist
combinations   newcombinations
return combinations
/**
* transposes an array of lists.
*
* @param lists an array of lists
* @return a list of the transposed lists
* @see #transpose(collection)
*/
public static list transpose object lists
return transpose arrays aslist lists
/**
* transposes a collection of lists. so,
* <code>transpose([['a', 'b'], [1, 2]])</code>
* is <code>[['a', 1], ['b', 2]]</code> and.
* <code>transpose([['a', 'b', 'c']])</code>
* is <code>[['a'], ['b'], ['c']]</code> and.
*
* @param lists a collection of lists
* @return a list of the transposed lists
*/
public static list transpose collection lists
list result   new arraylist
if  lists isempty      lists size      0  return result
int minsize   integer max_value
for  iterator outer   lists iterator    outer hasnext
object candidatelist   outer next
list list    list  defaulttypetransformation casttotype candidatelist  list class
if  list size   < minsize  minsize   list size
if  minsize    0  return result
for  int i   0  i < minsize  i
result add new arraylist
for  iterator outer   lists iterator    outer hasnext
object candidatelist   outer next
list list    list  defaulttypetransformation casttotype candidatelist  list class
for  int i   0  i < minsize  i
list resultlist    list  result get i
resultlist add list get i
return result
/**
* selects the minimum value found in an array of items, so
* min([2, 4, 6] as object[]) == 2.
*
* @param items an array of items
* @return the minimum value
*/
public static object min object items
return min arrays aslist items
/**
* selects the minimum value found in a collection of items.
*
* @param items a collection
* @return the minimum value
*/
public static object min collection items
object answer   null
for  iterator iter   items iterator    iter hasnext
object value   iter next
if  value    null
if  answer    null    scriptbytecodeadapter comparelessthan value  answer
answer   value
return answer
/**
* selects the maximum value found in an array of items, so
* min([2, 4, 6] as object[]) == 6.
*
* @param items an array of items
* @return the maximum value
*/
public static object max object items
return max arrays aslist items
/**
* selects the maximum value found in a collection
*
* @param items a collection
* @return the maximum value
*/
public static object max collection items
object answer   null
for  iterator iter   items iterator    iter hasnext
object value   iter next
if  value    null
if  answer    null    scriptbytecodeadapter comparegreaterthan value  answer
answer   value
return answer
/**
* sums all the items from an array of items.
*
* @param items an array of items
* @return the sum of the items
*/
public static object sum object items
return defaultgroovymethods sum arrays aslist items
/**
* sums all the items from a collection of items.
*
* @param items a collection of items
* @return the sum of the items
*/
public static object sum collection items
return defaultgroovymethods sum items