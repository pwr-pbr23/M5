/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import groovy lang closure
import groovy lang gstring
import groovy lang metaclass
import groovy lang range
import groovy lang reference
import groovy lang script
import java math bigdecimal
import java math biginteger
import java util list
import java util map
import java util regex pattern
import org codehaus groovy runtime generatedclosure
import org codehaus groovy vmplugin vmpluginfactory
import org objectweb asm opcodes
/**
* this class is a helper for classnode and classes handling classnodes.
* it does contain a set of predefined classnodes for the most used
* types and some code for cached classnode creation and basic
* classnode handling
*
* @author jochen theodorou
*/
public class classhelper
private static final class classes   new class
object class  boolean type  character type  byte type  short type
integer type  long type  double type  float type  void type
closure class  gstring class  list class  map class  range class
pattern class  script class  string class   boolean class
character class  byte class  short class  integer class  long class
double class  float class  bigdecimal class  biginteger class  void class
reference class  class class  metaclass class
private static final string primitiveclassnames   new string
public static final classnode
dynamic_type   new classnode object class    object_type   dynamic_type
void_type   new classnode void type          closure_type   new classnode closure class
gstring_type   new classnode gstring class   list_type   makewithoutcaching list class
map_type   new classnode map class           range_type   new classnode range class
pattern_type   new classnode pattern class   string_type   new classnode string class
script_type   new classnode script class     reference_type   makewithoutcaching reference class
boolean_type   new classnode boolean class       char_type   new classnode char class
byte_type   new classnode byte class             int_type   new classnode int class
long_type   new classnode long class             short_type   new classnode short class
double_type   new classnode double class         float_type   new classnode float class
byte_type   new classnode byte class             short_type   new classnode short class
integer_type   new classnode integer class       long_type   new classnode long class
character_type   new classnode character class   float_type   new classnode float class
double_type   new classnode double class         boolean_type   new classnode boolean class
biginteger_type    new classnode java math biginteger class
bigdecimal_type   new classnode java math bigdecimal class
void_wrapper_type   new classnode void class
class_type   new classnode class class          metaclass_type   new classnode metaclass class
generated_closure_type   new classnode generatedclosure class
enum_type   new classnode   0 object_type
annotation_type   new classnode   0 object_type
static
enum_type isprimarynode   false
private static classnode types   new classnode
object_type
boolean_type  char_type  byte_type  short_type
int_type  long_type  double_type  float_type
void_type  closure_type  gstring_type
list_type  map_type  range_type  pattern_type
script_type  string_type  boolean_type  character_type
byte_type  short_type  integer_type  long_type
double_type  float_type  bigdecimal_type  biginteger_type
void_wrapper_type  reference_type  class_type  metaclass_type
generated_closure_type  enum_type
private static classnode numbers   new classnode
char_type  byte_type  short_type  int_type  long_type
double_type  float_type  short_type  byte_type  character_type
integer_type  float_type  long_type  double_type  biginteger_type
bigdecimal_type
protected static final classnode empty_type_array
public static final string object
/**
* creates an array of classnodes using an array of classes.
* for each of the given classes a new classnode will be
* created
* @see #make(class)
* @param classes an array of classes used to create the classnodes
* @return an array of classnodes
*/
public static classnode make class classes
classnode cns   new classnode
for  int i 0  i<cns length  i
cns   make classes
return cns
/**
* creates a classnode using a given class.
* a new classnode object is only created if the class
* is not one of the predefined ones
*
* @param c class used to created the classnode
* @return classnode instance created from the given class
*/
public static classnode make class c
return make c true
public static classnode make class c  boolean includegenerics
for  int i 0  i<classes length  i
if  c  classes  return types
if  c isarray
classnode cn   make c getcomponenttype   includegenerics
return cn makearray
return makewithoutcaching c includegenerics
public static classnode makewithoutcaching class c
return makewithoutcaching c true
public static classnode makewithoutcaching class c  boolean includegenerics
classnode t   new classnode c
if  includegenerics  vmpluginfactory getplugin   setgenericstypes t
return t
/**
* creates a classnode using a given class.
* unlike make(string) this method will not use the cache
* to create the classnode. this means the classnode created
* from this method using the same name will have a different
* references
*
* @see #make(string)
* @param name of the class the classnode is representing
*/
public static classnode makewithoutcaching string name
classnode cn   new classnode name opcodes acc_public object_type
cn isprimarynode   false
return cn
/**
* creates a classnode using a given class.
* if the name is one of the predefined classnodes then the
* corresponding classnode instance will be returned. if the
* is null of of length 0 the dynamic type is returned
*
* @param name of the class the classnode is representing
*/
public static classnode make string name
if  name    null    name length      0  return dynamic_type
for  int i 0  i<primitiveclassnames length  i
if  primitiveclassnames equals name   return types
for  int i 0  i<classes length  i
string cname   classes getname
if  name equals cname   return types
return makewithoutcaching name
/**
* creates a classnode containing the wrapper of a classnode
* of primitive type. any classnode representing a primitive
* type should be created using the predefined types used in
* class. the method will check the parameter for known
* references of classnode representing a primitive type. if
* reference is found, then a classnode will be contained that
* represents the wrapper class. for exmaple for boolean, the
* wrapper class is java.lang.boolean.
*
* if the parameter is no primitve type, the redirected
* classnode will be returned
*
* @see #make(class)
* @see #make(string)
* @param cn the classnode containing a possible primitive type
*/
public static classnode getwrapper classnode cn
cn   cn redirect
if   isprimitivetype cn   return cn
if  cn  boolean_type
return boolean_type
else if  cn  byte_type
return byte_type
else if  cn  char_type
return character_type
else if  cn  short_type
return short_type
else if  cn  int_type
return integer_type
else if  cn  long_type
return long_type
else if  cn  float_type
return float_type
else if  cn  double_type
return double_type
else if  cn  void_type
return void_wrapper_type
else
return cn
/**
* test to determine if a clasnode is a primitve type.
* note: this only works for classnodes created using a
* predefined classnode
*
* @see #make(class)
* @see #make(string)
* @param cn the classnode containing a possible primitive type
* @return true if the classnode is a primitve type
*/
public static boolean isprimitivetype classnode cn
return  cn    boolean_type
cn    char_type
cn    byte_type
cn    short_type
cn    int_type
cn    long_type
cn    float_type
cn    double_type
cn    void_type
public static classnode makereference
return make reference class
public static boolean isunresolvedenum classnode node
if  enum_type isresolved    return false
if  node isresolved    return false
classnode superclass   node getsuperclass
if  superclass  null  return false
return superclass redirect    enum_type
public static boolean iscachedtype classnode type
for  int i 0 i<types length  i
if  types    type  return true
return false