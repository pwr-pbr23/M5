/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import java util arraylist
import java util list
import org codehaus groovy ast classhelper
import org codehaus groovy ast groovycodevisitor
/**
* represents a map expression [1 : 2, "a" : "b", x : y] which creates a mutable map
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class mapexpression extends expression
private final list mapentryexpressions
public mapexpression
this new arraylist
public mapexpression list mapentryexpressions
this mapentryexpressions   mapentryexpressions
//todo: get the type's of the expressions to specify the
// map type to map<x> if possible.
settype classhelper map_type
public void addmapentryexpression mapentryexpression expression
mapentryexpressions add expression
public list getmapentryexpressions
return mapentryexpressions
public void visit groovycodevisitor visitor
visitor visitmapexpression this
public boolean isdynamic
return false
public expression transformexpression expressiontransformer transformer
expression ret   new mapexpression transformexpressions getmapentryexpressions    transformer
ret setsourceposition this
return ret
public string tostring
return super tostring     mapentryexpressions
public string gettext
stringbuffer sb   new stringbuffer 32
sb append
int size   mapentryexpressions size
mapentryexpression mapentryexpression   null
if  size > 0
mapentryexpression    mapentryexpression  mapentryexpressions get 0
sb append mapentryexpression getkeyexpression   gettext         mapentryexpression getvalueexpression   gettext
for  int i   1  i < size  i
mapentryexpression    mapentryexpression  mapentryexpressions get i
sb append     mapentryexpression getkeyexpression   gettext         mapentryexpression getvalueexpression   gettext
if  sb length   > 120    i < size   1
sb append
break
sb append
return sb tostring
public void addmapentryexpression expression keyexpression  expression valueexpression
addmapentryexpression new mapentryexpression keyexpression  valueexpression