/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import org codehaus groovy ast classhelper
import org codehaus groovy ast classnode
import org codehaus groovy ast groovycodevisitor
import org codehaus groovy ast variable
/**
* represents a local variable name, the simplest form of expression. e.g.&nbsp;"foo".
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class variableexpression extends expression implements variable
public static final variableexpression this_expression   new variableexpression    classhelper dynamic_type
public static final variableexpression super_expression   new variableexpression    classhelper dynamic_type
private string variable
private boolean instaticcontext
private boolean isdynamictyped false
private variable accessedvariable
boolean closureshare false
private classnode origintype
public variable getaccessedvariable
return accessedvariable
public void setaccessedvariable variable origin
this accessedvariable   origin
public variableexpression string variable  classnode type
this variable   variable
origintype   type
settype classhelper getwrapper type
public variableexpression string variable
this variable  classhelper dynamic_type
public variableexpression variable variable
this variable getname    variable getorigintype
setaccessedvariable variable
public void visit groovycodevisitor visitor
visitor visitvariableexpression this
public expression transformexpression expressiontransformer transformer
return this
public string gettext
return variable
public string getname
return variable
/**
* @return true if this variable is dynamically typed
*/
public string tostring
return super tostring         variable    this isdynamictyped   ?         gettype
public expression getinitialexpression
return null
public boolean hasinitialexpression
return false
public boolean isinstaticcontext
if  accessedvariable  null    accessedvariable  this  return accessedvariable isinstaticcontext
return instaticcontext
public void setinstaticcontext boolean instaticcontext
this instaticcontext   instaticcontext
public void settype classnode cn
super settype cn
isdynamictyped    classhelper dynamic_type  cn
public boolean isdynamictyped
return isdynamictyped
public boolean isclosuresharedvariable
if  accessedvariable  null    accessedvariable  this  return accessedvariable isclosuresharedvariable
return closureshare
public void setclosuresharedvariable boolean inclosure
closureshare   inclosure
public classnode gettype
if  accessedvariable  null    accessedvariable  this  return accessedvariable gettype
return super gettype
public classnode getorigintype
return origintype