/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy classgen bytecodehelper
import org codehaus groovy reflection cachedclass
import org codehaus groovy reflection parametertypes
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime metaclasshelper
import java lang reflect modifier
/**
* represents a method on a java object a little like {@link java.lang.reflect.method}
* except without using reflection to invoke the method
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author alex tkachman
* @version $revision$
*/
public abstract class metamethod extends parametertypes implements cloneable
private string signature
private string mopname
public metamethod
public metamethod class  pt
super  pt
public abstract int getmodifiers
public abstract string getname
public abstract class getreturntype
public abstract cachedclass getdeclaringclass
public abstract object invoke object object  object arguments
/**
* checks that the given parameters are valid to call this method
*
* @param arguments the arguments to check
* @throws illegalargumentexception if the parameters are not valid
*/
public void checkparameters class arguments
// lets check that the argument types are valid
if   metaclasshelper isvalidmethod getparametertypes    arguments
throw new illegalargumentexception
getname
invokerhelper tostring getparametertypes
invokerhelper tostring arguments
public boolean ismethod metamethod method
return getname   equals method getname
getmodifiers      method getmodifiers
getreturntype   equals method getreturntype
equal getparametertypes    method getparametertypes
protected static boolean equal cachedclass a  class b
if  a length    b length
for  int i   0  size   a length  i < size  i
if   a gettheclass   equals b
return false
return true
return false
protected static boolean equal cachedclass a  cachedclass b
if  a length    b length
for  int i   0  size   a length  i < size  i
if  a    b
return false
return true
return false
public string tostring
return super tostring
getname
invokerhelper tostring getparametertypes
getreturntype
getdeclaringclass
public object clone
try
return super clone
catch  clonenotsupportedexception e
throw new groovyruntimeexception    e
public boolean isstatic
return  getmodifiers     modifier static     0
public boolean isabstract
return  getmodifiers     modifier abstract     0
public final boolean isprivate
return  getmodifiers     modifier private     0
public final boolean isprotected
return  getmodifiers     modifier protected     0
public final boolean ispublic
return  getmodifiers     modifier public     0
/**
* @param method the method to compare against
* @return true if the given method has the same name, parameters, return type
* and modifiers but may be defined on another type
*/
public final boolean issame metamethod method
return getname   equals method getname
compatiblemodifiers getmodifiers    method getmodifiers
getreturntype   equals method getreturntype
equal getparametertypes    method getparametertypes
private static boolean compatiblemodifiers int modifiersa  int modifiersb
int mask   modifier private   modifier protected   modifier public   modifier static
return  modifiersa   mask      modifiersb   mask
public boolean iscacheable
return true
public string getdescriptor
return bytecodehelper getmethoddescriptor getreturntype    getnativeparametertypes
public synchronized string getsignature
if  signature    null
cachedclass  parameters   getparametertypes
final string name   getname
stringbuffer buf   new stringbuffer name length   parameters length 10
buf append getreturntype   getname
//
buf append
buf append name
buf append
for  int i   0  i < parameters length  i
if  i > 0
buf append
buf append parameters getname
buf append
signature   buf tostring
return signature
public string getmopname
if  mopname    null
string name   getname
cachedclass declaringclass   getdeclaringclass
if   getmodifiers      modifier public  modifier protected      0
mopname   new stringbuffer   append    append declaringclass getsuperclassdistance    append    append name  tostring
else
mopname   new stringbuffer   append    append declaringclass getsuperclassdistance    append    append name  tostring
return mopname
protected final runtimeexception processdomethodinvokeexception  exception e  object object  object  argumentarray
if  e instanceof illegalargumentexception
//todo: test if this is ok with new mop, should be changed!
// we don't want the exception being unwrapped if it is a illegalargumentexception
// but in the case it is for example a illegalthreadstateexception, we want the unwrapping
// from the runtime
//note: the reason we want unwrapping sometimes and sometimes not is that the method
// invokation tries to invoke the method with and then reacts with type transformation
// if the invokation failed here. this is ok for illegalargumentexception, but it is
// possible that a reflector will be used to execute the call and then an exception from inside
// the method is not wrapped in a invocationtargetexception and we will end here.
boolean setreason   e getclass      illegalargumentexception class
return metaclasshelper createexceptiontext    this  object  argumentarray  e  setreason
if  e instanceof runtimeexception
return  runtimeexception  e
return metaclasshelper createexceptiontext    this  object  argumentarray  e  true
public object domethodinvoke object object  object argumentarray
argumentarray   coerceargumentstoclasses argumentarray
try
return invoke object  argumentarray
catch  exception e
throw processdomethodinvokeexception e  object  argumentarray