/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy xml
import groovy util buildersupport
import groovy util indentprinter
import java io printwriter
import java io writer
import java util iterator
import java util map
/**
* a helper class for creating xml or html markup
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author stefan matthias aust
* @author <a href="mailto:scottstirling@rcn.com">scott stirling</a>
* @author paul king
* @version $revision$
*/
public class markupbuilder extends buildersupport
private indentprinter out
private boolean nospace
private int state
private boolean nodeisempty   true
private boolean usedoublequotes   false
private boolean omitnullattributes   false
private boolean omitemptyattributes   false
public markupbuilder
this new indentprinter
public markupbuilder printwriter writer
this new indentprinter writer
public markupbuilder writer writer
this new indentprinter new printwriter writer
public markupbuilder indentprinter out
this out   out
/**
* returns <code>true</code> if attribute values are output with
* double quotes; <code>false</code> if single quotes are used.
* by default, single quotes are used.
* @return true if double quotes are used for attributes
*/
public boolean getdoublequotes
return this usedoublequotes
/**
* sets whether the builder outputs attribute values in double
* quotes or single quotes.
* @param usedoublequotes if this parameter is <code>true</code>,
* double quotes are used; otherwise, single quotes are.
*/
public void setdoublequotes boolean usedoublequotes
this usedoublequotes   usedoublequotes
/**
* determine whether null attributes will appear in the produced markup.
*
* @return <code>true</code>, if null attributes will be
* removed from the resulting markup.
*/
public boolean isomitnullattributes
return omitnullattributes
/**
* allows null attributes to be removed the produced markup.
*
* @param omitnullattributes if <code>true</code>, null
* attributes will not be included in the resulting markup.
* if <code>false</code> null attributes will be included in the
* markup as empty strings regardless of the omitemptyattribute
* setting. defaults to <code>false</code>.
*/
public void setomitnullattributes boolean omitnullattributes
this omitnullattributes   omitnullattributes
/**
* determine whether empty attributes will appear in the produced markup.
*
* @return <code>true</code>, if empty attributes will be
* removed from the resulting markup.
*/
public boolean isomitemptyattributes
return omitemptyattributes
/**
* allows empty attributes to be removed the produced markup.
*
* @param omitemptyattributes if <code>true</code>, empty
* attributes will not be included in the resulting markup.
* defaults to <code>false</code>.
*/
public void setomitemptyattributes boolean omitemptyattributes
this omitemptyattributes   omitemptyattributes
protected indentprinter getprinter
return this out
protected void setparent object parent  object child
public object getmkp
return this
public void yield string value
yield value  true
public void yieldunescaped string value
yield value  false
private void yield string value  boolean escaping
if  state    1
state   2
this nodeisempty   false
out print
if  state    2    state    3
out print escaping ? escapeelementcontent value    value
protected object createnode object name
tostate 1  name
this nodeisempty   true
return name
protected object createnode object name  object value
if  value    null
return createnode name
else
tostate 2  name
this nodeisempty   false
out print
out print escapeelementcontent value tostring
return name
protected object createnode object name  map attributes  object value
tostate 1  name
for  iterator iter   attributes entryset   iterator    iter hasnext
map entry entry    map entry  iter next
object attributevalue   entry getvalue
boolean skipnull   attributevalue    null    omitnullattributes
boolean skipempty   attributevalue    null    omitemptyattributes
attributevalue tostring   length      0
if   skipnull     skipempty
out print
// output the attribute name,
print entry getkey   tostring
// output the attribute value within quotes. use whichever
// type of quotes are currently configured.
out print this usedoublequotes ?    '"
print attributevalue    null ?     escapeattributevalue attributevalue tostring
out print this usedoublequotes ?   '"
if  value    null
yield value tostring
else
nodeisempty   true
return name
protected object createnode object name  map attributes
return createnode name  attributes  null
protected void nodecompleted object parent  object node
tostate 3  node
out flush
protected void print object node
out print node    null ?     node tostring
protected object getname string methodname
return super getname methodname
/**
* returns a string with special xml characters escaped as entities so that
* output xml is valid. escapes the following characters as corresponding
* entities:
* <ul>
*   <li>\' as &amp;apos;</li>
*   <li>&amp; as &amp;amp;</li>
*   <li>&lt; as &amp;lt;</li>
*   <li>&gt; as &amp;gt;</li>
* </ul>
*
* @param value to be searched and replaced for xml special characters.
* @return value with xml characters escaped
* @deprecated
* @see #escapexmlvalue(string, boolean)
*/
protected string transformvalue string value
// & has to be checked and replaced before others
if  value matches
value   value replaceall
if  value matches
value   value replaceall
if  value matches
value   value replaceall
if  value matches
value   value replaceall
return value
/**
* escapes a string so that it can be used directly as an xml
* attribute value.
* @param value the string to escape.
* @return a new string in which all characters that require escaping
* have been replaced with the corresponding xml entities.
* @see #escapexmlvalue(string, boolean)
*/
private string escapeattributevalue string value
return escapexmlvalue value  true
/**
* escapes a string so that it can be used directly in xml element
* content.
* @param value the string to escape.
* @return a new string in which all characters that require escaping
* have been replaced with the corresponding xml entities.
* @see #escapexmlvalue(string, boolean)
*/
private string escapeelementcontent string value
return escapexmlvalue value  false
/**
* escapes a string so that it can be used in xml text successfully.
* it replaces the following characters with the corresponding xml
* entities:
* <ul>
*   <li>&amp; as &amp;amp;</li>
*   <li>&lt; as &amp;lt;</li>
*   <li>&gt; as &amp;gt;</li>
* </ul>
* if the string is to be added as an attribute value, these
* characters are also escaped:
* <ul>
*   <li>' as &amp;apos;</li>
* </ul>
* @param value the string to escape.
* @param isattrvalue <code>true</code> if the string is to be used
* as an attribute value, otherwise <code>false</code>.
* @return a new string in which all characters that require escaping
* have been replaced with the corresponding xml entities.
*/
private string escapexmlvalue string value  boolean isattrvalue
stringbuffer buffer   new stringbuffer value
for  int i   0  n   buffer length    i < n  i
switch  buffer charat i
case
buffer replace i  i   1
// we're replacing a single character by a string of
// length 5, so we need to update the index variable
// and the total length.
i    4
n    4
break
case
buffer replace i  i   1
// we're replacing a single character by a string of
// length 4, so we need to update the index variable
// and the total length.
i    3
n    3
break
case
buffer replace i  i   1
// we're replacing a single character by a string of
// length 4, so we need to update the index variable
// and the total length.
i    3
n    3
break
case
// the double quote is only escaped if the value is for
// an attribute and the builder is configured to output
// attribute values inside double quotes.
if  isattrvalue    this usedoublequotes
buffer replace i  i   1
// we're replacing a single character by a string of
// length 6, so we need to update the index variable
// and the total length.
i    5
n    5
break
case
// the apostrophe is only escaped if the value is for an
// attribute, as opposed to element content, and if the
// builder is configured to surround attribute values with
// single quotes.
if  isattrvalue     this usedoublequotes
buffer replace i  i   1
// we're replacing a single character by a string of
// length 6, so we need to update the index variable
// and the total length.
i    5
n    5
break
default
break
return buffer tostring
private void tostate int next  object name
switch  state
case 0
switch  next
case 1
case 2
out print
print name
break
case 3
throw new error
break
case 1
switch  next
case 1
case 2
out print
if  nospace
nospace   false
else
out println
out incrementindent
out printindent
out print
print name
break
case 3
if  nodeisempty
out print
break
break
case 2
switch  next
case 1
case 2
if   nodeisempty
out println
out incrementindent
out printindent
out print
print name
break
case 3
out print
print name
out print
break
break
case 3
switch  next
case 1
case 2
if  nospace
nospace   false
else
out println
out printindent
out print
print name
break
case 3
if  nospace
nospace   false
else
out println
out decrementindent
out printindent
out print
print name
out print
break
break
state   next