/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import groovy security groovycodesourcepermission
import java io bytearrayinputstream
import java io file
import java io fileinputstream
import java io filenotfoundexception
import java io ioexception
import java io inputstream
import java net malformedurlexception
import java net url
import java security accesscontroller
import java security codesource
import java security privilegedactionexception
import java security privilegedexceptionaction
import java security cert certificate
/**
* codesource wrapper class that allows specific security policies to be associated with a class
* compiled from groovy source.
*
* @author steve goetze
*/
public class groovycodesource
/**
* the codesource to be given the generated class.  this can be used by policy file
* grants to administer security.
*/
private codesource codesource
/** the name given to the generated class */
private string name
/** the groovy source to be compiled and turned into a class */
private inputstream inputstream
/** the certificates used to sign the items from the codesource */
certificate certs
private boolean cachable
private file file
public groovycodesource string script  string name  string codebase
this new bytearrayinputstream script getbytes     name  codebase
/**
* construct a groovycodesource for an inputstream of groovycode that has an
* unknown provenance -- meaning it didn't come from a file or a url (e.g.&nbsp;a string).
* the supplied codebase will be used to construct a file url that should match up
* with a java policy entry that determines the grants to be associated with the
* class that will be built from the inputstream.
*
* the permission groovy.security.groovycodesourcepermission will be used to determine if the given codebase
* may be specified.  that is, the current policy set must have a groovycodesourcepermission that implies
* the codebase, or an exception will be thrown.  this is to prevent callers from hijacking
* existing codebase policy entries unless explicitly authorized by the user.
*/
public groovycodesource inputstream inputstream  string name  string codebase
this inputstream   inputstream
this name   name
securitymanager sm   system getsecuritymanager
if  sm    null
sm checkpermission new groovycodesourcepermission codebase
try
this codesource   new codesource new url       codebase    java security cert certificate null
catch  malformedurlexception murle
throw new runtimeexception     codebase
public groovycodesource final file infile  throws ioexception
// avoid files which confuse us like ones with .. in path
final file file   new file infile getcanonicalpath
if   file exists
throw new filenotfoundexception file tostring         file getabsolutepath
if  file isdirectory
throw new illegalargumentexception file tostring         file getabsolutepath
try
if   file canread
throw new runtimeexception file tostring            file getabsolutepath
catch  securityexception e
throw e
//this.inputstream = new fileinputstream(file);
this file   file
this inputstream   null
this cachable   true
//the calls below require access to user.dir - allow here since getname() and getcodesource() are
//package private and used only by the groovyclassloader.
try
object info    object  accesscontroller doprivileged new privilegedexceptionaction
public object run   throws malformedurlexception
object info   new object
url url   file touri   tourl
info   url toexternalform
//touri().tourl() will encode, but tourl() will not.
info   new codesource url   certificate  null
return info
this name    string  info
this codesource    codesource  info
catch  privilegedactionexception pae
throw new runtimeexception     file
public groovycodesource url url  throws ioexception
if  url    null
throw new runtimeexception
this inputstream   url openstream
this name   url toexternalform
this codesource   new codesource url   java security cert certificate null
codesource getcodesource
return codesource
public inputstream getinputstream
if this inputstream    null
return this inputstream
else
try
if  file  null  return new fileinputstream file
catch  filenotfoundexception fnfe
// ignore
return inputstream
public string getname
return name
public file getfile
return file
public void setcachable boolean b
cachable   b
public boolean iscachable
return cachable