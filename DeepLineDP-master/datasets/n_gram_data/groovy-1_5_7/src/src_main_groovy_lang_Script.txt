/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy ast expr argumentlistexpression
import org codehaus groovy control compilationfailedexception
import org codehaus groovy runtime defaultgroovymethods
import org codehaus groovy runtime invokerhelper
import java io file
import java io ioexception
/**
* this object represents a groovy script
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author guillaume laforge
* @version $revision$
*/
public abstract class script extends groovyobjectsupport
private binding binding
protected script
this new binding
protected script binding binding
this binding   binding
public binding getbinding
return binding
public void setbinding binding binding
this binding   binding
public object getproperty string property
try
return binding getvariable property
catch  missingpropertyexception e
return super getproperty property
public void setproperty string property  object newvalue
if    equals property
setbinding  binding  newvalue
else if   equals property
setmetaclass  metaclass newvalue
else
binding setvariable property  newvalue
/**
* invoke a method (or closure in the binding) defined.
*
* @param name method to call
* @param args arguments to pass to the method
* @return value
*/
public object invokemethod string name  object args
try
return super invokemethod name  args
// if the method was not found in the current scope (the script's methods)
// let's try to see if there's a method closure with the same name in the binding
catch  missingmethodexception mme
try
if  name equals mme getmethod
object boundclosure   binding getvariable name
if  boundclosure    null    boundclosure instanceof closure
return   closure  boundclosure  call  object args
else
throw mme
else
throw mme
catch  missingpropertyexception mpe
throw mme
/**
* the main instance method of a script which has variables in scope
* as defined by the current {@link binding} instance.
*/
public abstract object run
// println helper methods
/**
* prints a newline to the current 'out' variable which should be a printwriter
* or at least have a println() method defined on it.
* if there is no 'out' property then print to standard out.
*/
public void println
object object
try
object   getproperty
catch  missingpropertyexception e
system out println
return
invokerhelper invokemethod object     argumentlistexpression empty_array
/**
* prints the value to the current 'out' variable which should be a printwriter
* or at least have a print() method defined on it.
* if there is no 'out' property then print to standard out.
*/
public void print object value
object object
try
object   getproperty
catch  missingpropertyexception e
defaultgroovymethods print system out value
return
invokerhelper invokemethod object     new object value
/**
* prints the value and a newline to the current 'out' variable which should be a printwriter
* or at least have a println() method defined on it.
* if there is no 'out' property then print to standard out.
*/
public void println object value
object object
try
object   getproperty
catch  missingpropertyexception e
defaultgroovymethods println system out value
return
invokerhelper invokemethod object     new object value
/**
* a helper method to allow the dynamic evaluation of groovy expressions using this
* scripts binding as the variable scope
*
* @param expression is the groovy script expression to evaluate
*/
public object evaluate string expression  throws compilationfailedexception
groovyshell shell   new groovyshell binding
return shell evaluate expression
/**
* a helper method to allow the dynamic evaluation of groovy expressions using this
* scripts binding as the variable scope
*
* @param file is the groovy script to evaluate
*/
public object evaluate file file  throws compilationfailedexception  ioexception
groovyshell shell   new groovyshell binding
return shell evaluate file
/**
* a helper method to allow scripts to be run taking command line arguments
*/
public void run file file  string arguments  throws compilationfailedexception  ioexception
groovyshell shell   new groovyshell binding
shell run file  arguments