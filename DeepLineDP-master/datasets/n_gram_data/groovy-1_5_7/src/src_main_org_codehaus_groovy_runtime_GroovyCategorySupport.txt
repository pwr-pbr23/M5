/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime
import groovy lang closure
import groovy lang metamethod
import org codehaus groovy reflection cachedclass
import org codehaus groovy reflection cachedmethod
import org codehaus groovy runtime metaclass newinstancemetamethod
import java lang reflect method
import java lang reflect modifier
import java util
/**
* @author sam
* @author paul king
*/
public class groovycategorysupport
private static int categoriesinuse   0
/**
* this method is used to pull all the new methods out of the local thread context with a particular name.
*
* @param categorizedclass a class subject to the category methods in the thread context
* @param name the method name of interest
* @return the list of methods
*/
public static list getcategorymethods class categorizedclass  string name
map properties   getproperties
list methodlist   new arraylist
for  iterator i   properties keyset   iterator    i hasnext
class current    class  i next
if  current isassignablefrom categorizedclass
map metamethodsmap    map  properties get current
list newmethodlist    list  metamethodsmap get name
if  newmethodlist    null
methodlist addall newmethodlist
if  methodlist isempty    return null
return methodlist
/**
* this method is used to pull all the new methods out of the local thread context.
*
* @param categorizedclass a class subject to the category methods in the thread context
* @return the list of methods
*/
public static list getcategorymethods class categorizedclass
map properties   getproperties
list methodlist   new arraylist
for  iterator i   properties keyset   iterator    i hasnext
class current    class  i next
if  current isassignablefrom categorizedclass
map metamethodsmap    map  properties get current
collection collection   metamethodsmap values
for  iterator iterator   collection iterator    iterator hasnext
list newmethodlist    list  iterator next
if  newmethodlist    null
methodlist addall newmethodlist
if  methodlist isempty    return null
return methodlist
public static object getclosestmatchingcategorymethod class sender  metamethod orig  metamethod element
// for now just compare metamethods
if  orig instanceof categorymethod    element instanceof categorymethod
categorymethod o    categorymethod  orig
categorymethod e    categorymethod  element
if  o compareto e  < 0
return orig
return element
private static class categorymethod extends newinstancemetamethod implements comparable
private final class metaclass
public categorymethod cachedmethod metamethod  class metaclass
super metamethod
this metaclass   metaclass
public boolean iscacheable     return false
/**
* sort by most specific to least specific.
*
* @param o the object to compare against
*/
public int compareto object o
categorymethod thatmethod    categorymethod  o
class thisclass   metaclass
class thatclass   thatmethod metaclass
if  thisclass    thatclass  return 0
if  ischildofparent thisclass  thatclass   return  1
if  ischildofparent thatclass  thisclass   return 1
return 0
private boolean ischildofparent class candidatechild  class candidateparent
class loop   candidatechild
while loop    null    loop    object class
loop   loop getsuperclass
if  loop    candidateparent
return true
return false
/**
* create a scope based on given categoryclass and invoke closure within that scope.
*
* @param categoryclass the class containing category methods
* @param closure the closure during which to make the category class methods available
* @return the value returned from the closure
*/
public static object use class categoryclass  closure closure
newscope
try
use categoryclass
return closure call
finally
endscope
/**
* create a scope based on given categoryclasses and invoke closure within that scope.
*
* @param categoryclasses the list of classes containing category methods
* @param closure the closure during which to make the category class methods available
* @return the value returned from the closure
*/
public static object use list categoryclasses  closure closure
newscope
try
for  iterator i   categoryclasses iterator    i hasnext
class clazz    class  i next
use clazz
return closure call
finally
endscope
/**
* delegated to from the global use(categoryclass) method.  it scans the category class for static methods
* that take 1 or more parameters.  the first parameter is the class you are adding the category method to,
* additional parameters are those parameters needed by that method.  a use statement cannot be undone and
* is valid only for the current thread.
*
* @param categoryclass the class containing category methods
*/
private static void use class categoryclass
map properties   getproperties
list stack    list  local get
linkedlist clonedlists   new linkedlist
method methods   categoryclass getmethods
for  int i   0  i < methods length  i
method method   methods
if  modifier isstatic method getmodifiers
final cachedmethod cachedmethod   cachedmethod find method
cachedclass paramtypes   cachedmethod getparametertypes
if  paramtypes length > 0
cachedclass metaclass   paramtypes
map metamethodsmap   getmetamethods properties  metaclass gettheclass
list methodlist   getmethodlist metamethodsmap  method getname
metamethod mmethod   new categorymethod cachedmethod  metaclass gettheclass
methodlist add mmethod
collections sort methodlist
private static final threadlocal local   new threadlocal
protected object initialvalue
list stack   new arraylist
stack add collections empty_map
return stack
private static synchronized void newscope
categoriesinuse
list stack    list  local get
map properties    map  stack get stack size     1
map newmap   new weakhashmap properties size
for  iterator iterator   properties entryset   iterator    iterator hasnext
map entry entry    map entry  iterator next
newmap put entry getkey    copymapoflist  map  entry getvalue
stack add newmap
private static synchronized void endscope
list stack    list  local get
stack remove stack size     1
categoriesinuse
private static map copymapoflist map m
map ret   new hashmap m size
for  iterator iterator   m entryset   iterator    iterator hasnext
map entry entry    map entry  iterator next
list l    list  entry getvalue
l   new arraylist l
ret put entry getkey    l
return ret
private static map getproperties
list stack    list  local get
return  map  stack get stack size     1
public static boolean hascategoryinanythread
return categoriesinuse  0
private static list getmethodlist map metamethodsmap  string name
list methodlist    list  metamethodsmap get name
if  methodlist    null
methodlist   new arraylist 1
metamethodsmap put name  methodlist
return methodlist
private static map getmetamethods map properties  class metaclass
map metamethodsmap    map  properties get metaclass
if  metamethodsmap    null
metamethodsmap   new hashmap
properties put metaclass  metamethodsmap
return metamethodsmap