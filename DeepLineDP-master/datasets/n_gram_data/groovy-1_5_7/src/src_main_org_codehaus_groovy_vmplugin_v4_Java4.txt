/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy vmplugin v4
import org codehaus groovy ast
import org codehaus groovy vmplugin vmplugin
import java lang reflect field
import java lang reflect method
import java lang reflect constructor
/**
* java 4 based functions
* @author jochen theodorou
*
*/
public class java4 implements vmplugin
private static class empty_class_array   new class
public void setgenericstypes classnode c
return
public class getplugindefaultgroovymethods
return empty_class_array
public void configureclassnode compileunit compileunit  classnode classnode
class clazz   classnode gettypeclass
field fields   clazz getdeclaredfields
for  int i   0  i < fields length  i
classnode addfield fields getname    fields getmodifiers    classnode  null
method methods   clazz getdeclaredmethods
for  int i   0  i < methods length  i
method m   methods
methodnode mn   new methodnode m getname    m getmodifiers    classhelper make m getreturntype     createparameters m getparametertypes     classhelper make m getexceptiontypes     null
classnode addmethod mn
constructor constructors   clazz getdeclaredconstructors
for  int i   0  i < constructors length  i
constructor ctor   constructors
classnode addconstructor ctor getmodifiers    createparameters ctor getparametertypes     classhelper make ctor getexceptiontypes     null
class sc   clazz getsuperclass
if  sc    null  classnode setunresolvedsuperclass getprimaryclassnode compileunit sc
buildinterfacetypes compileunit classnode clazz
private classnode getprimaryclassnode compileunit compileunit class clazz
// there might be a new super class from the compile unit,
// we want to use this instead of simply referencing the old
// class
classnode result   null
if  compileunit  null
result   compileunit getclass clazz getname
if  result  null  result   classhelper make clazz
return result
private void buildinterfacetypes compileunit compileunit  classnode classnode  class c
class interfaces   c getinterfaces
classnode ret   new classnode
for  int i 0 i<interfaces length i
ret   getprimaryclassnode compileunit  interfaces
classnode setinterfaces ret
private parameter createparameters class types
parameter parameters   parameter empty_array
int size   types length
if  size > 0
parameters   new parameter
for  int i   0  i < size  i
parameters   createparameter types  i
return parameters
private parameter createparameter class parametertype  int idx
return new parameter classhelper make parametertype       idx