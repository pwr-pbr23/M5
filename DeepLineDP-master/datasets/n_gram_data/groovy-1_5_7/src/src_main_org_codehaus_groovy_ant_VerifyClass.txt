/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ant
import org apache tools ant buildexception
import org apache tools ant taskdefs matchingtask
import org objectweb asm classreader
import org objectweb asm label
import org objectweb asm tree abstractinsnnode
import org objectweb asm tree classnode
import org objectweb asm tree methodnode
import org objectweb asm tree analysis analyzer
import org objectweb asm tree analysis frame
import org objectweb asm tree analysis simpleverifier
import org objectweb asm util checkclassadapter
import org objectweb asm util tracemethodvisitor
import java io file
import java io fileinputstream
import java io ioexception
import java util list
/**
* verify class files. this task can take the following
* arguments:
* <ul>
* <li>dir
* </ul>
* when this task executes, it will recursively scan the dir and
* look for class files to verify.
*/
public class verifyclass extends matchingtask
private string topdir   null
private boolean verbose   false
public verifyclass
public void execute   throws buildexception
if  topdir    null  throw new buildexception
file top   new file topdir
if   top exists    throw new buildexception     top
log     top
int fails   execute top
if  fails    0
log
else
log     fails
public void setdir string dir  throws buildexception
topdir   dir
public void setverbose boolean v
verbose   v
private int execute file dir
int fails   0
file files   dir listfiles
for  int i   0  i < files length  i
file f   files
if  f isdirectory
fails    execute f
else if  f getname   endswith
try
boolean ok   readclass f getcanonicalpath
if   ok  fails
catch  ioexception ioe
log ioe getmessage
throw new buildexception ioe
return fails
private boolean readclass string clazz  throws ioexception
classreader cr   new classreader new fileinputstream clazz
classnode ca   new classnode
public void visitend
//accept(cv);
cr accept new checkclassadapter ca   true
boolean failed   false
list methods   ca methods
for  int i   0  i < methods size      i
methodnode method    methodnode  methods get i
if  method instructions size   > 0
analyzer a   new analyzer new simpleverifier
try
a analyze ca name  method
continue
catch  exception e
e printstacktrace
final frame frames   a getframes
if   failed
failed   true
log     clazz
if  verbose  log method name   method desc
tracemethodvisitor mv   new tracemethodvisitor null
public void visitmaxs int maxstack  int maxlocals
stringbuffer buffer   new stringbuffer
for  int i   0  i < text size      i
string s   frames    null ?     frames tostring
while  s length   < maxstack   maxlocals   1
s
buffer append integer tostring i   100000  substring 1
buffer append
buffer append s
buffer append
buffer append text get i
if  verbose  log buffer tostring
for  int j   0  j < method instructions size      j
object insn   method instructions get j
if  insn instanceof abstractinsnnode
abstractinsnnode  insn  accept mv
else
mv visitlabel  label  insn
mv visitmaxs method maxstack  method maxlocals
return  failed