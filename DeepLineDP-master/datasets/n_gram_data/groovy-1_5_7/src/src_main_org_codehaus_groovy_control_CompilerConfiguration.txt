/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import org codehaus groovy control io nullwriter
import org codehaus groovy control messages warningmessage
import java io file
import java io printwriter
import java util hashmap
import java util linkedlist
import java util list
import java util map
import java util properties
import java util stringtokenizer
/**
* compilation control flags and coordination stuff.
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @author <a href="mailto:jim@pagesmiths.com">jim white</a>
* @version $id$
*/
public class compilerconfiguration
private static final string jdk5_classname_check
/** this (<code>"1.5"</code>) is the value for targetbytecode to compile for a jdk 1.5 or later jvm. **/
public static final string post_jdk5
/** this (<code>"1.4"<code/>) is the value for targetbytecode to compile for a jdk 1.4 jvm. **/
public static final string pre_jdk5
// just call getvmversion() once.
public static final string currentjvmversion   getvmversion
// static initializers are executed in text order,
// therefore we must do this one last!
/**
*  a convenience for getting a default configuration.  do not modify it!
*  see {@link #compilerconfiguration(properties)} for an example on how to
*  make a suitable copy to modify.  but if you're really starting from a
*  default context, then you probably just want <code>new compilerconfiguration()</code>.
*/
public static final compilerconfiguration default   new compilerconfiguration
/**
* see {@link warningmessage} for levels.
*/
private int warninglevel
/**
* encoding for source files
*/
private string sourceencoding
/**
* a <code>printwriter</code> for communicating with the user
*/
private printwriter output
/**
* directory into which to write classes
*/
private file targetdirectory
/**
* classpath for use during compilation
*/
private linkedlist classpath
/**
* if true, the compiler should produce action information
*/
private boolean verbose
/**
* if true, debugging code should be activated
*/
private boolean debug
/**
* the number of non-fatal errors to allow before bailing
*/
private int tolerance
/**
* base class name for scripts (must derive from script)
*/
private string scriptbaseclass
private parserpluginfactory pluginfactory
/**
* extension used to find a groovy file
*/
private string defaultscriptextension
/**
* if set to true recompilation is enabled
*/
private boolean recompilegroovysource
/**
* sets the minimum of time after a script can be recompiled.
*/
private int minimumrecompilationinterval
/**
* sets the bytecode version target
*/
private string targetbytecode
/**
* options for joint compilation (null by default == no joint compilation)
*/
private map jointcompilationoptions
/**
* sets the flags to defaults.
*/
public compilerconfiguration
//
// set in safe defaults
setwarninglevel warningmessage likely_errors
setoutput null
settargetdirectory  file  null
setclasspath
setverbose false
setdebug false
settolerance 10
setscriptbaseclass null
setrecompilegroovysource false
setminimumrecompilationinterval 100
settargetbytecode getvmversion
setdefaultscriptextension
//
// source file encoding
string encoding   null
try
encoding   system getproperty
catch  exception e
// ignore
try
encoding   system getproperty    encoding
catch  exception e
// ignore
setsourceencoding encoding
try
setoutput new printwriter system err
catch  exception e
// ignore
try
string target   system getproperty
if  target    null
settargetdirectory target
catch  exception e
// ignore
/**
* copy constructor.  use this if you have a mostly correct configuration
* for your compilation but you want to make a some changes programmatically.
* an important reason to prefer this approach is that your code will most
* likely be forward compatible with future changes to this configuration api.<br/>
* an example of this copy constructor at work:<br/>
* <pre>
*    // in all likelihood there is already a configuration in your code's context
*    // for you to copy, but for the sake of this example we'll use the global default.
*    compilerconfiguration myconfiguration = new compilerconfiguration(compilerconfiguration.default);
*    myconfiguration.setdebug(true);
*</pre>
* @param configuration the configuration to copy.
*/
public compilerconfiguration compilerconfiguration configuration
setwarninglevel configuration getwarninglevel
setoutput configuration getoutput
settargetdirectory configuration gettargetdirectory
setclasspathlist new linkedlist configuration getclasspath
setverbose configuration getverbose
setdebug configuration getdebug
settolerance configuration gettolerance
setscriptbaseclass configuration getscriptbaseclass
setrecompilegroovysource configuration getrecompilegroovysource
setminimumrecompilationinterval configuration getminimumrecompilationinterval
settargetbytecode configuration gettargetbytecode
setdefaultscriptextension configuration getdefaultscriptextension
setsourceencoding configuration getsourceencoding
setoutput configuration getoutput
settargetdirectory configuration gettargetdirectory
map jointcompilationoptions   configuration getjointcompilationoptions
if  jointcompilationoptions  null
jointcompilationoptions   new hashmap jointcompilationoptions
setjointcompilationoptions jointcompilationoptions
setpluginfactory configuration getpluginfactory
/**
* sets the flags to the specified configuration, with defaults
* for those not supplied.
* note that those "defaults" here do <em>not</em> include checking the
* settings in {@link system#getproperties()} in general, only file.encoding,
* groovy.target.directory and groovy.source.encoding are.<br/>
* if you want to set a few flags but keep groovy's default
* configuration behavior then be sure to make your settings in
* a properties that is backed by <code>system.getproperties()</code> (which
* is done using the {@link #compilerconfiguration(properties)} constructor).<br/>
*   that might be done like this:<br/>
* <pre>
*    properties myproperties = new properties(system.getproperties());
*    myproperties.setproperty("groovy.output.debug", "true");
*    myconfiguration = new compilerconfiguration(myproperties);
* </pre>
* and you also have to contend with a possible securityexception when
* getting the system properties (see {@link java.lang.system#getproperties()}).<br/>
* an safer method would be to copy a default
* compilerconfiguration and make your changes there using the
* setter.<br/>
* <pre>
*    // in all likelihood there is already a configuration for you to copy,
*    // but for the sake of this example we'll use the global default.
*    compilerconfiguration myconfiguration = new compilerconfiguration(compilerconfiguration.default);
*    myconfiguration.setdebug(true);
* </pre>
* another reason to use the copy constructor rather than this one is that you
* must call {@link #setoutput}.  calling <code>setoutput(null)</code> is valid and will
* set up a <code>printwriter</code> to a bit bucket.  the copy constructor will of course set
* the same one as the original.
*
*<table summary="groovy compiler configuration properties">
<tr>
<th>property key</th><th>get/set property name</th>
</tr>
<tr>
<td><code>"groovy.warnings"</code></td><td>{@link #getwarninglevel}</td></tr>
<tr><td><code>"groovy.source.encoding"</code></td><td>{@link #getsourceencoding}</td></tr>
<tr><td><code>"groovy.target.directory"</code></td><td>{@link #gettargetdirectory}</td></tr>
<tr><td><code>"groovy.target.bytecode"</code></td><td>{@link #gettargetbytecode}</td></tr>
<tr><td><code>"groovy.classpath"</code></td><td>{@link #getclasspath}</td></tr>
<tr><td><code>"groovy.output.verbose"</code></td><td>{@link #getverbose}</td></tr>
<tr><td><code>"groovy.output.debug"</code></td><td>{@link #getdebug}</td></tr>
<tr><td><code>"groovy.errors.tolerance"</code></td><td>{@link #gettolerance}</td></tr>
<tr><td><code>"groovy.script.extension"</code></td><td>{@link #getdefaultscriptextension}</td></tr>
<tr><td><code>"groovy.script.base"</code></td><td>{@link #getscriptbaseclass}</td></tr>
<tr><td><code>"groovy.recompile"</code></td><td>{@link #getrecompilegroovysource}</td></tr>
<tr><td><code>"groovy.recompile.minimuminterval"</code></td><td>{@link #getminimumrecompilationinterval}</td></tr>
<tr><td>
</tr>
</table>
<br/>
* @param configuration the properties to get flag values from.
*/
public compilerconfiguration properties configuration  throws configurationexception
this
configure configuration
/**
* method to configure a this compilerconfiguration by using properties.
* for a list of available properties look at {link {@link #compilerconfiguration(properties)}.
* @param configuration the properties to get flag values from.
*/
public void configure properties configuration  throws configurationexception
string text   null
int numeric   0
//
// warning level
numeric   getwarninglevel
try
text   configuration getproperty
numeric   integer parseint text
catch  numberformatexception e
text   text tolowercase
if  text equals
numeric   warningmessage none
else if  text startswith
numeric   warningmessage likely_errors
else if  text startswith
numeric   warningmessage possible_errors
else if  text startswith
numeric   warningmessage paranoia
else
throw new configurationexception     text
setwarninglevel numeric
//
// source file encoding
//
text   configuration getproperty
if  text    null  setsourceencoding text
//
// target directory for classes
//
text   configuration getproperty
if  text    null  settargetdirectory text
text   configuration getproperty
if  text    null  settargetbytecode text
//
// classpath
//
text   configuration getproperty
if  text    null  setclasspath text
//
// verbosity
//
text   configuration getproperty
if  text    null    text equalsignorecase     setverbose true
//
// debugging
//
text   configuration getproperty
if  text    null    text equalsignorecase     setdebug true
//
// tolerance
//
numeric   10
try
text   configuration getproperty
numeric   integer parseint text
catch  numberformatexception e
throw new configurationexception e
settolerance numeric
//
// script base class
//
text   configuration getproperty
if  text  null  setscriptbaseclass text
//
// recompilation options
//
text   configuration getproperty
if  text    null
setrecompilegroovysource text equalsignorecase
numeric   100
try
text   configuration getproperty
if  text  null  text   configuration getproperty
if  text  null
numeric   integer parseint text
else
numeric   100
catch  numberformatexception e
throw new configurationexception e
setminimumrecompilationinterval numeric
/**
* gets the currently configured warning level.  see warningmessage
* for level details.
*/
public int getwarninglevel
return this warninglevel
/**
* sets the warning level.  see warningmessage for level details.
*/
public void setwarninglevel int level
if  level < warningmessage none    level > warningmessage paranoia
this warninglevel   warningmessage likely_errors
else
this warninglevel   level
/**
* gets the currently configured source file encoding.
*/
public string getsourceencoding
return this sourceencoding
/**
* sets the encoding to be used when reading source files.
*/
public void setsourceencoding string encoding
if  encoding    null  encoding
this sourceencoding   encoding
/**
* gets the currently configured output writer.
*/
public printwriter getoutput
return this output
/**
* sets the output writer.
*/
public void setoutput printwriter output
if  output    null
this output   new printwriter nullwriter default
else
this output   output
/**
* gets the target directory for writing classes.
*/
public file gettargetdirectory
return this targetdirectory
/**
* sets the target directory.
*/
public void settargetdirectory string directory
if  directory    null    directory length   > 0
this targetdirectory   new file directory
else
this targetdirectory   null
/**
* sets the target directory.
*/
public void settargetdirectory file directory
this targetdirectory   directory
/**
* gets the classpath.
*/
public list getclasspath
return this classpath
/**
* sets the classpath.
*/
public void setclasspath string classpath
this classpath   new linkedlist
stringtokenizer tokenizer   new stringtokenizer classpath  file pathseparator
while  tokenizer hasmoretokens
this classpath add tokenizer nexttoken
/**
* sets the classpath using a list of strings
* @param l list of strings containg the classpathparts
*/
public void setclasspathlist list l
this classpath   new linkedlist l
/**
* returns true if verbose operation has been requested.
*/
public boolean getverbose
return this verbose
/**
* turns verbose operation on or off.
*/
public void setverbose boolean verbose
this verbose   verbose
/**
* returns true if debugging operation has been requested.
*/
public boolean getdebug
return this debug
/**
* turns debugging operation on or off.
*/
public void setdebug boolean debug
this debug   debug
/**
* returns the requested error tolerance.
*/
public int gettolerance
return this tolerance
/**
* sets the error tolerance, which is the number of
* non-fatal errors (per unit) that should be tolerated before
* compilation is aborted.
*/
public void settolerance int tolerance
this tolerance   tolerance
/**
* gets the name of the base class for scripts.  it must be a subclass
* of script.
*/
public string getscriptbaseclass
return this scriptbaseclass
/**
* sets the name of the base class for scripts.  it must be a subclass
* of script.
*/
public void setscriptbaseclass string scriptbaseclass
this scriptbaseclass   scriptbaseclass
public parserpluginfactory getpluginfactory
if  pluginfactory    null
pluginfactory   parserpluginfactory newinstance true
return pluginfactory
public void setpluginfactory parserpluginfactory pluginfactory
this pluginfactory   pluginfactory
public string getdefaultscriptextension
return defaultscriptextension
public void setdefaultscriptextension string defaultscriptextension
this defaultscriptextension   defaultscriptextension
public void setrecompilegroovysource boolean recompile
recompilegroovysource   recompile
public boolean getrecompilegroovysource
return recompilegroovysource
public void setminimumrecompilationinterval int time
minimumrecompilationinterval   math max 0 time
public int getminimumrecompilationinterval
return minimumrecompilationinterval
/**
* allow setting the bytecode compatibility. the parameter can take
* one of the values <tt>1.5</tt> or <tt>1.4</tt>. if wrong parameter
* then the value will default to vm determined version.
*
* @param version the bytecode compatibility mode
*/
public void settargetbytecode string version
if pre_jdk5 equals version     post_jdk5 equals version
this targetbytecode   version
/**
* retrieves the compiler bytecode compatibility mode.
*
* @return bytecode compatibity mode. can be either <tt>1.5</tt> or <tt>1.4</tt>.
*/
public string gettargetbytecode
return this targetbytecode
private static string getvmversion
try
class forname jdk5_classname_check
return post_jdk5
catch exception ex
// ignore
return pre_jdk5
/**
* gets the joint compilation options for this configuration.
* @return the options
*/
public map getjointcompilationoptions
return jointcompilationoptions
/**
* sets the joint compilation options for this configuration.
* using null will disable joint compilation.
* @param options the options
*/
public void setjointcompilationoptions map options
jointcompilationoptions   options