/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime
import java util collections
import java util iterator
import groovy lang groovyobjectsupport
public class nullobject extends groovyobjectsupport
private static final nullobject instance   new nullobject
/**
* private constructor
*/
private nullobject
/**
* get the nullobject reference
*
* @return the null object
*/
public static nullobject getnullobject
return instance
/**
* since this is implemented as a singleton, we should avoid the
* use of the clone method
*/
public object clone   throws clonenotsupportedexception
throw new clonenotsupportedexception
/**
* tries to get a property on null, which will always fail
*
* @param property - the property to get
* @return a npe
*/
public object getproperty string property
throw new nullpointerexception     property
/**
* tries to set a property on null, which will always fail
*
* @param property - the proprty to set
* @param newvalue - the new value of the property
*/
public void setproperty string property  object newvalue
throw new nullpointerexception     property
/**
* tries to invoke a method on null, which will always fail
*
* @param name the name of the method to invoke
* @param args - arguments to the method
* @return a npe
*/
public object invokemethod string name  object args
throw new nullpointerexception     name
/**
* null is only equal to null
*
* @param to - the reference object with which to compare
* @return - true if this object is the same as the to argument
*/
public boolean equals object to
return to    null
/**
* iterator() method to be able to iterate on null.
* note: this part is from invoker
*
* @return an iterator for an empty list
*/
public iterator iterator
return collections empty_list iterator
/**
* allows to add a string to null.
* the result is concatenated string of the result of calling
* tostring() on this object and the string in the parameter.
*
* @param s - the string to concatenate
* @return the concatenated string
*/
public object plus string s
return getmetaclass   invokemethod this     new object      s
/**
* the method "is" is used to test for equal references.
* this method will return true only if the given parameter
* is null
*
* @param other - the object to test
* @return true if other is null
*/
public boolean is object other
return other    null
/**
* type conversion method for null.
*
* @param c - the class to convert to
* @return always null
*/
public object astype class c
return null
public string tostring
return
public int hashcode
throw new nullpointerexception