/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime metaclass
import groovy lang
import org codehaus groovy reflection
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime metaclasshelper
import org codehaus groovy runtime wrappers wrapper
import java lang reflect constructor
import java lang reflect method
import java util
/**
* a metaclass for closures generated by the groovy compiler. these classes
* have special characteristics this metaclass uses. one of these is that a
* generated closure has only additional docall methods, all other methods
* are in the closure class as well. to use this fact this metaclass uses
* a metaclass for closure as static field and delegates calls to this
* metaclass if needed. this allows a lean implementation for this metaclass.
* multiple generated closures will then use the same metaclass for closure.
* for static dispatching this class uses the metaclass of class, again
* all isntances of this class will share that metaclass. the class metaclass
* is initialized lazy, because most operations do not need this metaclass.
* <p/>
* the closure and class metaclasses are not replaceable.
* <p/>
* this metaclass is for internal usage only!
*
* @author jochen theodorou
* @since 1.1
*/
public final class closuremetaclass extends metaclassimpl
private boolean initialized
private final fastarray closuremethods   new fastarray 3
private map attributes   new hashmap
private methodchooser chooser
private volatile boolean attributeinitdone   false
private static final metaclassimpl closure_metaclass
private static metaclassimpl classmetaclass
private static final object empty_arguments
private static final string closure_call_method
private static final string closure_do_call_method
private static final string closure_curry_method
static
closure_metaclass   new metaclassimpl closure class
closure_metaclass initialize
private static synchronized metaclass getstaticmetaclass
if  classmetaclass    null
//!fixme: it isn't the closuremetaclass.class that should be locked here.
// we should just be locking class.class.
classmetaclass   new metaclassimpl class class
classmetaclass initialize
return classmetaclass
private static interface methodchooser
object choosemethod class arguments  boolean coerce
private static class standardclosurechooser implements methodchooser
private final metamethod docall0
private final metamethod docall1
standardclosurechooser metamethod m0  metamethod m1
docall0   m0
docall1   m1
public object choosemethod class arguments  boolean coerce
if  arguments length    0  return docall0
if  arguments length    1  return docall1
return null
private static class normalmethodchooser implements methodchooser
private final fastarray methods
final class theclass
normalmethodchooser class theclass  fastarray methods
this theclass   theclass
this methods   methods
public object choosemethod class arguments  boolean coerce
if  arguments length    0
return metaclasshelper chooseemptymethodparams methods
else if  arguments length    1    arguments    null
return metaclasshelper choosemostgeneralmethodwith1nullparam methods
else
list matchingmethods   new arraylist
final int len   methods size
final object data   methods getarray
for  int i   0  i    len    i
object method   data
// making this false helps find matches
if  metaclasshelper isvalidmethod method  arguments
matchingmethods add method
if  matchingmethods isempty
return null
else if  matchingmethods size      1
return matchingmethods get 0
return choosemostspecificparams closure_do_call_method  matchingmethods  arguments
private object choosemostspecificparams string name  list matchingmethods  class arguments
long matchesdistance    1
linkedlist matches   new linkedlist
for  iterator iter   matchingmethods iterator    iter hasnext
object method   iter next
final parametertypes parametertypes   metaclasshelper getparametertypes method
class paramtypes   parametertypes getnativeparametertypes
if   metaclasshelper parametersarecompatible arguments  paramtypes   continue
long dist   metaclasshelper calculateparameterdistance arguments  parametertypes
if  dist    0  return method
if  matches isempty
matches add method
matchesdistance   dist
else if  dist < matchesdistance
matchesdistance   dist
matches clear
matches add method
else if  dist    matchesdistance
matches add method
if  matches size      1
return matches getfirst
if  matches isempty
return null
//more than one matching method found --> ambigous!
string msg
msg    theclass getname         name
msg
msg    invokerhelper tostring arguments
msg
for  iterator iter   matches iterator    iter hasnext
cachedclass types   metaclasshelper getparametertypes iter next    getparametertypes
msg        invokerhelper tostring types
throw new groovyruntimeexception msg
public closuremetaclass metaclassregistry registry  class theclass
super registry  theclass
public metaproperty getmetaproperty string name
return closure_metaclass getmetaproperty name
private void unwrap object arguments
for  int i   0  i    arguments length  i
if  arguments instanceof wrapper
arguments     wrapper  arguments  unwrap
private metamethod pickclosuremethod class argclasses
object answer   chooser choosemethod argclasses  false
return  metamethod  answer
private metamethod getdelegatemethod closure closure  object delegate  string methodname  class argclasses
if  delegate    closure    delegate    null  return null
metaclass delegatemetaclass
if  delegate instanceof class
delegatemetaclass   registry getmetaclass  class delegate
return delegatemetaclass getstaticmetamethod methodname  argclasses
else
delegatemetaclass   lookupobjectmetaclass delegate
return delegatemetaclass pickmethod methodname  argclasses
public object invokemethod class sender  object object  string methodname  object originalarguments  boolean iscalltosuper  boolean frominsideclass
checkinitalised
if  object    null
throw new nullpointerexception     methodname
final object arguments   makearguments originalarguments  methodname
final class argclasses   metaclasshelper converttotypearray arguments
unwrap arguments
metamethod method
final closure closure    closure  object
if  closure_do_call_method equals methodname     closure_call_method equals methodname
method   pickclosuremethod argclasses
if  method  null    arguments length  1    arguments instanceof list
object newarguments     list  arguments  toarray
class newargclasses   metaclasshelper converttotypearray newarguments
method   pickclosuremethod newargclasses
if  method  null
method   new transformmetamethod method
public object invoke object object  object arguments
object firstargument   arguments
list list    list  firstargument
arguments   list toarray
return super invoke object  arguments
if  method  null  throw new missingmethodexception methodname  theclass  arguments  false
else if  closure_curry_method equals methodname
return closure curry arguments
else
method   closure_metaclass pickmethod methodname  argclasses
if  method    null  return method domethodinvoke object  arguments
missingmethodexception last   null
object callobject   object
if  method    null
final object owner   closure getowner
final object delegate   closure getdelegate
final object thisobject   closure getthisobject
final int resolvestrategy   closure getresolvestrategy
boolean invokeondelegate   false
boolean invokeonowner   false
boolean ownerfirst   true
switch  resolvestrategy
case closure to_self
break
case closure delegate_only
method   getdelegatemethod closure  delegate  methodname  argclasses
callobject   delegate
if  method    null
invokeondelegate   delegate    closure     delegate instanceof groovyobject
break
case closure owner_only
method   getdelegatemethod closure  owner  methodname  argclasses
callobject   owner
if  method    null
invokeonowner   owner    closure     owner instanceof groovyobject
break
case closure delegate_first
method   getdelegatemethod closure  delegate  methodname  argclasses
callobject   delegate
if  method    null
method   getdelegatemethod closure  owner  methodname  argclasses
callobject   owner
if  method    null
invokeondelegate   delegate    closure     delegate instanceof groovyobject
invokeonowner   owner    closure     owner instanceof groovyobject
ownerfirst   false
break
default     owner first
// owner first means we start with the outer most owner that is not a generated closure
// this owner is equal to the this object, so we check that one first.
method   getdelegatemethod closure  thisobject  methodname  argclasses
callobject   thisobject
if  method    null
//try finding a delegate that has that method... we start from
// outside building a stack and try each delegate
linkedlist list   new linkedlist
for  object current   closure  current  thisobject
closure currentclosure    closure  current
if  currentclosure getdelegate    null  list add current
current currentclosure getowner
while   list isempty      method  null
closure closurewithdelegate    closure  list removelast
object currentdelegate   closurewithdelegate getdelegate
method   getdelegatemethod closurewithdelegate currentdelegate methodname argclasses
callobject   currentdelegate
if  method    null
invokeondelegate   delegate    closure     delegate instanceof groovyobject
invokeonowner   owner    closure     owner instanceof groovyobject
if  method    null     invokeonowner    invokeondelegate
try
if  ownerfirst
return invokeondelegationobjects invokeonowner  owner  invokeondelegate  delegate  methodname  arguments
else
return invokeondelegationobjects invokeondelegate  delegate  invokeonowner  owner  methodname  arguments
catch  missingmethodexception mme
last   mme
if  method    null
return method domethodinvoke callobject  arguments
else
// if no method was found, try to find a closure defined as a field of the class and run it
object value   null
try
value   this getproperty object  methodname
catch  missingpropertyexception mpe
// ignore
if  value instanceof closure        this test ensures that value    this if you ever change this ensure that value    this
closure cl    closure  value
metaclass delegatemetaclass   cl getmetaclass
return delegatemetaclass invokemethod cl getclass    closure  closure_do_call_method  originalarguments  false  frominsideclass
if  last    null  throw last
throw new missingmethodexception methodname  theclass  arguments  false
private object makearguments object arguments  string methodname
if  arguments    null  return empty_arguments
if  closure_call_method equals methodname
if  arguments length  1    arguments instanceof object
return  object  arguments
return arguments
private object invokeondelegationobjects
boolean invoke1  object o1
boolean invoke2  object o2
string methodname  object args
missingmethodexception first   null
if  invoke1
groovyobject go    groovyobject  o1
try
return go invokemethod methodname  args
catch  missingmethodexception mme
first   mme
if  invoke2
groovyobject go    groovyobject  o2
try
return go invokemethod methodname  args
catch  missingmethodexception mme
if  first    null  first   mme
throw first
private synchronized void initattributes
if   attributes isempty    return
attributes put    null      just a dummy for later
cachedfield fieldarray   thecachedclass getfields
for  int i   0  i < fieldarray length  i
attributes put fieldarray getname    fieldarray
attributeinitdone    attributes isempty
public synchronized void initialize
if   isinitialized
cachedmethod methodarray   thecachedclass getmethods
synchronized  thecachedclass
for  int i   0  i < methodarray length  i
final cachedmethod cachedmethod   methodarray
if   cachedmethod getname   equals closure_do_call_method   continue
metamethod method   cachedmethod
closuremethods add method
assignmethodchooser
initialized   true
private void assignmethodchooser
if  closuremethods size      1
final metamethod docall    metamethod  closuremethods get 0
final cachedclass c   docall getparametertypes
int length   c length
if  length    0
// no arg method
chooser   new methodchooser
public object choosemethod class arguments  boolean coerce
if  arguments length    0  return docall
return null
else
if  length    1    c gettheclass      object class
// object fits all, so simple dispatch rule here
chooser   new methodchooser
public object choosemethod class arguments  boolean coerce
// <2, because foo() is same as foo(null)
if  arguments length < 2  return docall
return null
else
boolean allobject   true
for  int i   0  i < c length   1  i
if  c gettheclass      object class
allobject   false
break
if  allobject    c gettheclass      object class
// all arguments are object, so test only if argument number is correct
chooser   new methodchooser
public object choosemethod class arguments  boolean coerce
if  arguments length    c length  return docall
return null
else
if  allobject    c gettheclass      object class
// all arguments are object but last, which is a vargs argument, that
// will fit all, so jsut test if the number of argument is equal or
// more than the parameters we have.
final int minimumlength   c length   2
chooser   new methodchooser
public object choosemethod class arguments  boolean coerce
if  arguments length > minimumlength  return docall
return null
else
// general case for single method
chooser   new methodchooser
public object choosemethod class arguments  boolean coerce
if  docall isvalidmethod arguments
return docall
return null
else if  closuremethods size      2
metamethod m0   null  m1   null
for  int i   0  i    closuremethods size      i
metamethod m    metamethod  closuremethods get i
cachedclass c   m getparametertypes
if  c length    0
m0   m
else
if  c length    1    c gettheclass      object class
m1   m
if  m0    null    m1    null
// standard closure (2 methods because "it" is with default null)
chooser   new standardclosurechooser m0  m1
if  chooser    null
// standard chooser for cases if it is not a single method and if it is
// not the standard closure.
chooser   new normalmethodchooser theclass  closuremethods
private void generatereflector
//        if (groovysystem.isusereflection())
//          return;
//
//        reflector = ((metaclassregistryimpl) registry).loadreflector(theclass, closuremethods);
//        if (reflector == null) {
//            throw new runtimeexception("should have a reflector for " + theclass.getname());
//        }
//        // lets set the reflector on all the methods
//        for (iterator iter = closuremethods.iterator(); iter.hasnext();) {
//            stdmetamethod metamethod = (stdmetamethod) iter.next();
//            metamethod.setreflector(reflector);
//        }
private metaclass lookupobjectmetaclass object object
if  object instanceof groovyobject
groovyobject go    groovyobject  object
return go getmetaclass
class ownerclass   object getclass
if  ownerclass    class class  ownerclass    class  object
metaclass metaclass   registry getmetaclass ownerclass
return metaclass
public list getmethods
list answer   closure_metaclass getmetamethods
answer addall closuremethods tolist
return answer
public list getmetamethods
return closure_metaclass getmetamethods
public list getproperties
return closure_metaclass getproperties
public metamethod pickmethod string name  class argtypes
if  argtypes    null  argtypes   empty_class_array
if  name equals closure_call_method     name equals closure_do_call_method
return pickclosuremethod argtypes
return closure_metaclass getmetamethod name  argtypes
public metamethod retrievestaticmethod string methodname  class arguments
return null
protected boolean isinitialized
return initialized
public metamethod getstaticmetamethod string name  object args
return closure_metaclass getstaticmetamethod name  args
public metamethod getstaticmetamethod string name  class argtypes
return closure_metaclass getstaticmetamethod name  argtypes
public object getproperty class sender  object object  string name  boolean usesuper  boolean frominsideclass
if  object instanceof class
return getstaticmetaclass   getproperty sender  object  name  usesuper  frominsideclass
else
return closure_metaclass getproperty sender  object  name  usesuper  frominsideclass
public object getattribute class sender  object object  string attribute  boolean usesuper  boolean frominsideclass
if  object instanceof class
return getstaticmetaclass   getattribute sender  object  attribute  usesuper
else
if   attributeinitdone  initattributes
cachedfield mfp    cachedfield  attributes get attribute
if  mfp    null
return closure_metaclass getattribute sender  object  attribute  usesuper
else
return mfp getproperty object
public void setattribute class sender  object object  string attribute
object newvalue  boolean usesuper  boolean frominsideclass
if  object instanceof class
getstaticmetaclass   setattribute sender  object  attribute  newvalue  usesuper  frominsideclass
else
if   attributeinitdone  initattributes
cachedfield mfp    cachedfield  attributes get attribute
if  mfp    null
closure_metaclass setattribute sender  object  attribute  newvalue  usesuper  frominsideclass
else
mfp setproperty object  newvalue
public object invokestaticmethod object object  string methodname  object arguments
return getstaticmetaclass   invokemethod class class  object  methodname  arguments  false  false
public void setproperty class sender  object object  string name  object newvalue  boolean usesuper  boolean frominsideclass
if  object instanceof class
getstaticmetaclass   setproperty sender  object  name  newvalue  usesuper  frominsideclass
else
closure_metaclass setproperty sender  object  name  newvalue  usesuper  frominsideclass
public metamethod getmethodwithoutcaching class sender  string methodname  class arguments  boolean iscalltosuper
throw new unsupportedoperationexception
public void setproperties object bean  map map
throw new unsupportedoperationexception
private object invokeconstructor class at  object arguments
throw new unsupportedoperationexception
public void addmetabeanproperty metabeanproperty mp
throw new unsupportedoperationexception
public void addmetamethod metamethod method
throw new unsupportedoperationexception
public void addnewinstancemethod method method
throw new unsupportedoperationexception
public void addnewstaticmethod method method
throw new unsupportedoperationexception
public constructor retrieveconstructor class arguments
throw new unsupportedoperationexception