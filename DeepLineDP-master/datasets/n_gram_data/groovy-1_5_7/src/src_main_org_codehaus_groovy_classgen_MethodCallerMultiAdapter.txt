/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy classgen
import org objectweb asm methodvisitor
public class methodcallermultiadapter
private methodcaller methods
boolean skipspreadsafeandsafe
public static final int max_args   0
public static methodcallermultiadapter newstatic class theclass  string basename  boolean createnargs  boolean skipspreadsafeandsafe
methodcallermultiadapter mcma   new methodcallermultiadapter
mcma skipspreadsafeandsafe   skipspreadsafeandsafe
if  createnargs
int numberofbasemethods   mcma numberofbasemethods
mcma methods   new methodcaller
for  int i   0  i <  max_args  i
mcma methods   methodcaller newstatic theclass  basename   i
if  skipspreadsafeandsafe  continue
mcma methods   methodcaller newstatic theclass  basename   i
mcma methods   methodcaller newstatic theclass  basename   i
mcma methods   methodcaller newstatic theclass  basename
if   skipspreadsafeandsafe
mcma methods   methodcaller newstatic theclass  basename
mcma methods   methodcaller newstatic theclass  basename
else if   skipspreadsafeandsafe
mcma methods   new methodcaller
methodcaller newstatic theclass  basename
methodcaller newstatic theclass  basename
methodcaller newstatic theclass  basename
else
mcma methods   new methodcaller
methodcaller newstatic theclass  basename
return mcma
/**
* @param methodvisitor
* @param numberofarguments a value >0 describing how many arguments are additionally used for the method call
* @param safe
* @param spreadsafe
*/
public void call methodvisitor methodvisitor  int numberofarguments  boolean safe  boolean spreadsafe
int offset   0
if  safe     skipspreadsafeandsafe  offset   1
if  spreadsafe     skipspreadsafeandsafe  offset   2
if  numberofarguments > max_args    numberofarguments < 0
offset     max_args   1    numberofbasemethods
else
offset    numberofarguments   numberofbasemethods
methods call methodvisitor
private int numberofbasemethods
if  skipspreadsafeandsafe  return 1
return 3