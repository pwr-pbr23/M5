/*
* copyright 2003-2008 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy runtime typehandling
import groovy lang gstring
import groovy lang groovyruntimeexception
import org codehaus groovy reflection reflectioncache
import org codehaus groovy runtime
import java io file
import java io ioexception
import java lang reflect array
import java lang reflect modifier
import java math bigdecimal
import java math biginteger
import java util
import java util regex matcher
public class defaulttypetransformation
protected static final object empty_arguments
protected static final biginteger one_neg   new biginteger
//  --------------------------------------------------------
//                  unboxing methods
//  --------------------------------------------------------
public static byte byteunbox object value
number n   casttonumber value
return n bytevalue
public static char charunbox object value
return casttochar value
public static short shortunbox object value
number n   casttonumber value
return n shortvalue
public static int intunbox object value
number n   casttonumber value
return n intvalue
public static boolean booleanunbox object value
return casttoboolean value
public static long longunbox object value
number n   casttonumber value
return n longvalue
public static float floatunbox object value
number n   casttonumber value
return n floatvalue
public static double doubleunbox object value
number n   casttonumber value
return n doublevalue
//  --------------------------------------------------------
//                  boxing methods
//  --------------------------------------------------------
public static object box boolean value
return value ? boolean true   boolean false
public static object box byte value
return new byte value
public static object box char value
return new character value
public static object box short value
return new short value
public static object box int value
return integercache integervalue value
public static object box long value
return new long value
public static object box float value
return new float value
public static object box double value
return new double value
public static number casttonumber object object
if  object instanceof number
return  number  object
if  object instanceof character
return new integer   character  object  charvalue
if  object instanceof string
string c    string  object
if  c length      1
return new integer c charat 0
else
throw new groovycastexception c integer class
throw new groovycastexception object number class
public static boolean casttoboolean object object
if  object    null
return false
if  object instanceof boolean
boolean booleanvalue    boolean  object
return booleanvalue booleanvalue
if  object instanceof matcher
matcher matcher    matcher  object
regexsupport setlastmatcher matcher
return matcher find
if  object instanceof collection
collection collection    collection  object
return  collection isempty
if  object instanceof map
map map    map  object
return  map isempty
if  object instanceof iterator
iterator iterator    iterator  object
return iterator hasnext
if  object instanceof enumeration
enumeration e    enumeration  object
return e hasmoreelements
if  object instanceof charsequence
charsequence string     charsequence  object
return string length   > 0
if  object instanceof object
object array     object  object
return array length > 0
if  object instanceof character
character c    character  object
return c charvalue      0
if  object instanceof number
number n    number  object
return n doublevalue      0
return true
public static char casttochar object object
if  object instanceof character
return   character  object  charvalue
else if  object instanceof number
number value    number  object
return  char  value intvalue
else
string text   object tostring
if  text length      1
return text charat 0
else
throw new groovycastexception text char class
public static object casttotype object object  class type
if  object    null
return null
if  type    object class
return object
final class aclass   object getclass
if  type    aclass  return object
// todo we should move these methods to groovy method, like g$astype() so that
// we can use operator overloading to customize on a per-type basis
if  reflectioncache isarray type
return asarray object  type
if  reflectioncache isassignablefrom type  aclass
return object
if  collection class isassignablefrom type
int modifiers   type getmodifiers
collection answer
if  object instanceof collection    type isassignablefrom hashset class
type    hashset class    modifier isabstract modifiers     modifier isinterface modifiers
return new hashset  collection object
if  aclass isarray
if  type isassignablefrom arraylist class      modifier isabstract modifiers     modifier isinterface modifiers
answer   new arraylist
else
// let's call the collections constructor
// passing in the list wrapper
try
answer    collection  type newinstance
catch  exception e
throw new groovycastexception     type getname         e
// we cannot just wrap in a list as we support primitive type arrays
int length   array getlength object
for  int i   0  i < length  i
object element   array get object  i
answer add element
return answer
if  type    string class
return object tostring
else if  type    character class
return box casttochar object
else if  type    boolean class
return box casttoboolean object
else if  type    class class
return casttoclass object
else if  number class isassignablefrom type
number n   casttonumber object
if  type    byte class
return new byte n bytevalue
else if  type    character class
return new character  char  n intvalue
else if  type    short class
return new short n shortvalue
else if  type    integer class
return new integer n intvalue
else if  type    long class
return new long n longvalue
else if  type    float class
return new float n floatvalue
else if  type    double class
double answer   new double n doublevalue
//throw a runtime exception if conversion would be out-of-range for the type.
if    n instanceof double      answer doublevalue      double negative_infinity
answer doublevalue      double positive_infinity
throw new groovyruntimeexception     n getclass   getname
n
return answer
else if  type    bigdecimal class
return new bigdecimal n tostring
else if  type    biginteger class
if  object instanceof float    object instanceof double
bigdecimal bd   new bigdecimal n doublevalue
return bd tobiginteger
else if  object instanceof bigdecimal
return   bigdecimal  object  tobiginteger
else
return new biginteger n tostring
else if  type isprimitive
if  type    boolean class
return box booleanunbox object
else if  type    byte class
return box byteunbox object
else if  type    char class
return box charunbox object
else if  type    short class
return box shortunbox object
else if  type    int class
return box intunbox object
else if  type    long class
return box longunbox object
else if  type    float class
return box floatunbox object
else if  type    double class
double answer   new double doubleunbox object
//throw a runtime exception if conversion would be out-of-range for the type.
if    object instanceof double      answer doublevalue      double negative_infinity
answer doublevalue      double positive_infinity
throw new groovyruntimeexception     aclass getname
object
return answer
object args   null
if  object instanceof collection
// let's try invoke the constructor with the list as arguments
// such as for creating a dimension, point, color etc.
collection collection    collection  object
args   collection toarray
else if  object instanceof object
args    object  object
else if  object instanceof map
// emulate named params constructor
args   new object
args   object
if  args    null
try
return invokerhelper invokeconstructorof type  args
catch  invokerinvocationexception iie
throw iie
catch  exception e
// let's ignore exception and return the original object
// as the caller has more context to be able to throw a more
// meaningful exception
throw new groovycastexception object type
private static class casttoclass object object
try
return class forname  object tostring
catch  exception e
throw new groovycastexception object class class
public static object asarray object object  class type
if  type isassignablefrom object getclass
return object
collection list   ascollection object
int size   list size
class elementtype   type getcomponenttype
object array   array newinstance elementtype  size
int idx   0
if  boolean class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setboolean array  idx  booleanunbox element
else if  byte class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setbyte array  idx  byteunbox element
else if  char class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setchar array  idx  charunbox element
else if  double class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setdouble array  idx  doubleunbox element
else if  float class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setfloat array  idx  floatunbox element
else if  int class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setint array  idx  intunbox element
else if  long class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setlong array  idx  longunbox element
else if  short class equals elementtype
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
array setshort array  idx  shortunbox element
else
for  iterator iter   list iterator    iter hasnext    idx
object element   iter next
object coercedelement   casttotype element  elementtype
array set array  idx  coercedelement
return array
public static collection ascollection object value
if  value    null
return collections empty_list
else if  value instanceof collection
return  collection  value
else if  value instanceof map
map map    map  value
return map entryset
else if  value getclass   isarray
return arrayascollection value
else if  value instanceof methodclosure
methodclosure method    methodclosure  value
iteratorclosureadapter adapter   new iteratorclosureadapter method getdelegate
method call adapter
return adapter aslist
else if  value instanceof string
return defaultgroovymethods tolist  string  value
else if  value instanceof gstring
return defaultgroovymethods tolist value tostring
else if  value instanceof file
try
return defaultgroovymethods readlines  file  value
catch  ioexception e
throw new groovyruntimeexception     value  e
else if  isenumsubclass value
object values    object invokerhelper invokemethod value     new object
return arrays aslist values
else
// let's assume it's a collection of 1
return collections singletonlist value
public static collection arrayascollection object value
if  value getclass   getcomponenttype   isprimitive
return primitivearraytolist value
return arrays aslist  object  value
/**
* determines whether the value object is a class object representing a
* subclass of java.lang.enum. uses class name check to avoid breaking on
* pre-java 5 jres.
*
* @param value an object
* @return true if the object is an enum
*/
public static boolean isenumsubclass object value
if  value instanceof class
class superclass     class value  getsuperclass
while  superclass    null
if  superclass getname   equals
return true
superclass   superclass getsuperclass
return false
/**
* allows conversion of arrays into a mutable list
*
* @param array an array
* @return the array as a list
*/
public static list primitivearraytolist object array
int size   array getlength array
list list   new arraylist size
for  int i   0  i < size  i
object item   array get array  i
if  item    null    item getclass   isarray      item getclass   getcomponenttype   isprimitive
item   primitivearraytolist item
list add item
return list
public static object primitivearraybox object array
int size   array getlength array
object ret    object  array newinstance reflectioncache autoboxtype array getclass   getcomponenttype     size
for  int i   0  i < size  i
ret array get array  i
return ret
/**
* compares the two objects handling nulls gracefully and performing numeric type coercion if required
*/
public static int compareto object left  object right
return comparetowithequalitycheck left  right  false
private static int comparetowithequalitycheck object left  object right  boolean equalitycheckonly
if  left    right
return 0
if  left    null
return  1
else if  right    null
return 1
if  left instanceof comparable
if  left instanceof number
if  isvalidcharacterstring right
return casttochar left    casttochar right
if  right instanceof character    right instanceof number
return defaultgroovymethods compareto  number  left  casttonumber right
else if  left instanceof character
if  isvalidcharacterstring right
return casttochar left    casttochar right
if  right instanceof number
return casttochar left    casttochar right
else if  right instanceof number
if  isvalidcharacterstring left
return casttochar left    casttochar right
else if  left instanceof string    right instanceof character
return   string  left  compareto right tostring
else if  left instanceof string    right instanceof gstring
return   string  left  compareto right tostring
if   equalitycheckonly    left getclass   isassignablefrom right getclass
right getclass   isassignablefrom left getclass
left instanceof gstring    right instanceof string
comparable comparable    comparable  left
return comparable compareto right
if  equalitycheckonly
return  1     anything other than 0
throw new groovyruntimeexception     left getclass   getname
left       right getclass   getname         right
public static boolean compareequal object left  object right
if  left    right  return true
if  left    null    right    null  return false
if  left instanceof comparable
return comparetowithequalitycheck left  right  true     0
// handle arrays on both sides as special case for efficiency
class leftclass   left getclass
class rightclass   right getclass
if  leftclass isarray      rightclass isarray
return comparearrayequal left  right
if  leftclass isarray      leftclass getcomponenttype   isprimitive
left   primitivearraytolist left
if  rightclass isarray      rightclass getcomponenttype   isprimitive
right   primitivearraytolist right
if  left instanceof object    right instanceof list
return defaultgroovymethods equals  object  left   list  right
if  left instanceof list    right instanceof object
return defaultgroovymethods equals  list  left   object  right
if  left instanceof list    right instanceof list
return defaultgroovymethods equals  list  left   list  right
return   boolean  invokerhelper invokemethod left     right   booleanvalue
public static boolean comparearrayequal object left  object right
if  left    null
return right    null
if  right    null
return false
if  array getlength left     array getlength right
return false
for  int i   0  i < array getlength left   i
object l   array get left  i
object r   array get right  i
if   compareequal l  r   return false
return true
/**
* @return true if the given value is a valid character string (i.e. has length of 1)
*/
private static boolean isvalidcharacterstring object value
if  value instanceof string
string s    string  value
if  s length      1
return true
return false
public static int converttointarray object a
int ans   null
// conservative coding
if  a getclass   getname   equals
ans    int  a
else
object ia    object  a
ans   new int
for  int i   0  i < ia length  i
if  ia    null
continue
ans     number  ia  intvalue
return ans
public static boolean converttobooleanarray object a
boolean ans   null
// conservative coding
if  a getclass   getname   equals
ans    boolean  a
else
object ia    object  a
ans   new boolean
for  int i   0  i < ia length  i
if  ia    null
continue
ans     boolean  ia  booleanvalue
return ans
public static byte converttobytearray object a
byte ans   null
// conservative coding
if  a getclass   getname   equals
ans    byte  a
else
object ia    object  a
ans   new byte
for  int i   0  i < ia length  i
if  ia    null
ans     number  ia  bytevalue
return ans
public static short converttoshortarray object a
short ans   null
// conservative coding
if  a getclass   getname   equals
ans    short  a
else
object ia    object  a
ans   new short
for  int i   0  i < ia length  i
ans     number  ia  shortvalue
return ans
public static char converttochararray object a
char ans   null
// conservative coding
if  a getclass   getname   equals
ans    char  a
else
object ia    object  a
ans   new char
for  int i   0  i < ia length  i
if  ia    null
continue
ans     character  ia  charvalue
return ans
public static long converttolongarray object a
long ans   null
// conservative coding
if  a getclass   getname   equals
ans    long  a
else
object ia    object  a
ans   new long
for  int i   0  i < ia length  i
if  ia    null
continue
ans     number  ia  longvalue
return ans
public static float converttofloatarray object a
float ans   null
// conservative coding
if  a getclass   getname   equals
ans    float  a
else
object ia    object  a
ans   new float
for  int i   0  i < ia length  i
if  ia    null
continue
ans     number  ia  floatvalue
return ans
public static double converttodoublearray object a
double ans   null
// conservative coding
if  a getclass   getname   equals
ans    double  a
else
object ia    object  a
ans   new double
for  int i   0  i < ia length  i
if  ia    null
continue
ans     number  ia  doublevalue
return ans
public static object converttoprimitivearray object a  class type
if  type    byte type
return converttobytearray a
if  type    boolean type
return converttobooleanarray a
if  type    short type
return converttoshortarray a
if  type    character type
return converttochararray a
if  type    integer type
return converttointarray a
if  type    long type
return converttolongarray a
if  type    float type
return converttofloatarray a
if  type    double type
return converttodoublearray a
else
return a