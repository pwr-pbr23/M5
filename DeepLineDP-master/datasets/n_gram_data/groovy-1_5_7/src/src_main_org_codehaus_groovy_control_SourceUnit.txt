/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy control
import groovy lang groovyclassloader
import java io file
import java io filewriter
import java io ioexception
import java io reader
import java net url
import java security accesscontroller
import java security privilegedaction
import org codehaus groovy groovybugerror
import org codehaus groovy ast modulenode
import org codehaus groovy control io filereadersource
import org codehaus groovy control io readersource
import org codehaus groovy control io stringreadersource
import org codehaus groovy control io urlreadersource
import org codehaus groovy control messages message
import org codehaus groovy control messages simplemessage
import org codehaus groovy control messages syntaxerrormessage
import org codehaus groovy syntax
import org codehaus groovy tools utilities
import antlr charscanner
import antlr mismatchedtokenexception
import antlr mismatchedcharexception
import antlr noviablealtexception
import antlr noviablealtforcharexception
import com thoughtworks xstream xstream
/**
* provides an anchor for a single source unit (usually a script file)
* as it passes through the compiler system.
*
* @author <a href="mailto:cpoirier@dreaming.org">chris poirier</a>
* @author <a href="mailto:b55r@sina.com">bing ran</a>
* @version $id$
*/
public class sourceunit extends processingunit
/**
* the pluggable parser used to generate the ast - we allow
* pluggability currently as we need to have classic and jsr support
*/
private parserplugin parserplugin
/**
* where we can get readers for our source unit
*/
protected readersource source
/**
* a descriptive name of the source unit. this name shouldn't
* be used for controlling the sourceunit, it is only for error
* messages
*/
protected string name
/**
* a concrete syntax tree of the source
*/
protected reduction cst
/**
* the root of the abstract syntax tree for the source
*/
protected modulenode ast
/**
* initializes the sourceunit from existing machinery.
*/
public sourceunit string name  readersource source  compilerconfiguration flags
groovyclassloader loader  errorcollector er
super flags  loader  er
this name   name
this source   source
/**
* initializes the sourceunit from the specified file.
*/
public sourceunit file source  compilerconfiguration configuration  groovyclassloader loader  errorcollector er
this source getpath    new filereadersource source  configuration   configuration  loader  er
/**
* initializes the sourceunit from the specified url.
*/
public sourceunit url source  compilerconfiguration configuration  groovyclassloader loader  errorcollector er
this source getpath    new urlreadersource source  configuration   configuration  loader  er
/**
* initializes the sourceunit for a string of source.
*/
public sourceunit string name  string source  compilerconfiguration configuration
groovyclassloader loader  errorcollector er
this name  new stringreadersource source  configuration   configuration  loader  er
/**
* returns the name for the sourceunit. this name shouldn't
* be used for controlling the sourceunit, it is only for error
* messages
*/
public string getname
return name
/**
* returns the concrete syntax tree produced during parse()ing.
*/
public reduction getcst
return this cst
/**
* returns the abstract syntax tree produced during convert()ing
* and expanded during later phases.
*/
public modulenode getast
return this ast
/**
* convenience routine, primarily for use by the interactiveshell,
* that returns true if parse() failed with an unexpected eof.
*/
public boolean failedwithunexpectedeof
// implementation note - there are several ways for the groovy compiler
// to report an unexpected eof. perhaps this implementation misses some.
// if you find another way, please add it.
if  geterrorcollector   haserrors
message last    message  geterrorcollector   getlasterror
throwable cause   null
if  last instanceof syntaxerrormessage
cause     syntaxerrormessage  last  getcause   getcause
if  cause    null
if  cause instanceof noviablealtexception
return iseoftoken   noviablealtexception  cause  token
else if  cause instanceof noviablealtforcharexception
char badchar     noviablealtforcharexception  cause  foundchar
return badchar    charscanner eof_char
else if  cause instanceof mismatchedcharexception
char badchar    char    mismatchedcharexception  cause  foundchar
return badchar    charscanner eof_char
else if  cause instanceof mismatchedtokenexception
return iseoftoken   mismatchedtokenexception  cause  token
return false
protected boolean iseoftoken antlr token token
return token gettype      antlr token eof_type
//---------------------------------------------------------------------------
// factories
/**
* a convenience routine to create a standalone sourceunit on a string
* with defaults for almost everything that is configurable.
*/
public static sourceunit create string name  string source
compilerconfiguration configuration   new compilerconfiguration
configuration settolerance 1
return new sourceunit name  source  configuration  null  new errorcollector configuration
/**
* a convenience routine to create a standalone sourceunit on a string
* with defaults for almost everything that is configurable.
*/
public static sourceunit create string name  string source  int tolerance
compilerconfiguration configuration   new compilerconfiguration
configuration settolerance tolerance
return new sourceunit name  source  configuration  null  new errorcollector configuration
//---------------------------------------------------------------------------
// processing
/**
* parses the source to a cst.  you can retrieve it with getcst().
*/
public void parse   throws compilationfailedexception
if  this phase > phases parsing
throw new groovybugerror
if  this phase    phases initialization
nextphase
//
// create a reader on the source and run the parser.
reader reader   null
try
reader   source getreader
// let's recreate the parser each time as it tends to keep around state
parserplugin   getconfiguration   getpluginfactory   createparserplugin
cst   parserplugin parsecst this  reader
reader close
catch  ioexception e
geterrorcollector   addfatalerror new simplemessage e getmessage   this
finally
if  reader    null
try
reader close
catch  ioexception e
// ignore
/**
* generates an ast from the cst.  you can retrieve it with getast().
*/
public void convert   throws compilationfailedexception
if  this phase    phases parsing    this phasecomplete
gotophase phases conversion
if  this phase    phases conversion
throw new groovybugerror
//
// build the ast
try
this ast   parserplugin buildast this  this classloader  this cst
this ast setdescription this name
catch  syntaxexception e
geterrorcollector   adderror new syntaxerrormessage e this
string property    string  accesscontroller doprivileged new privilegedaction
public object run
return system getproperty
if    equals property
saveasxml name ast
private void saveasxml string name  modulenode ast
xstream xstream   new xstream
try
xstream toxml ast new filewriter name
system out println     name
catch  exception e
system out println     name
e printstacktrace
//---------------------------------------------------------------------------    // source sampling
/**
* returns a sampling of the source at the specified line and column,
* of null if it is unavailable.
*/
public string getsample int line  int column  janitor janitor
string sample   null
string text   source getline line  janitor
if  text    null
if  column > 0
string marker   utilities repeatstring    column   1
if  column > 40
int start   column   30   1
int end    column   10 > text length   ? text length     column   10   1
sample       text substring start  end    utilities eol
marker substring start  marker length
else
sample       text   utilities eol         marker
else
sample   text
return sample
public void addexception exception e  throws compilationfailedexception
geterrorcollector   addexception e this
public void adderror syntaxexception se  throws compilationfailedexception
geterrorcollector   adderror se this