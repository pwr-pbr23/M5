/*
* copyright 2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy binding
import javax swing timer
import java awt event actionlistener
import java awt event actionevent
/**
* @author <a href="mailto:shemnon@yahoo.com">danno ferrin</a>
* @version $revision: 7797 $
* @since groovy 1.1
*/
public class swingtimertriggerbinding implements triggerbinding
public fullbinding createbinding sourcebinding source  targetbinding target
return new swingtimerfullbinding  closuresourcebinding  source  target
/**
* @author <a href="mailto:shemnon@yahoo.com">danno ferrin</a>
* @version $revision: 7797 $
* @since groovy 1.1
*/
class swingtimerfullbinding extends abstractfullbinding implements actionlistener
timer timer
long starttime
long duration
int stepsize
boolean reportsteps
boolean reportfraction
boolean reportelapsed
boolean repeat
boolean bound
swingtimerfullbinding closuresourcebinding source  targetbinding target
this source  target  50  1000
swingtimerfullbinding sourcebinding source  targetbinding target  int interval  int duration
setsourcebinding source
settargetbinding target
timer   new timer interval  this
timer setinitialdelay 0
timer setrepeats true
this duration   duration
void resettimer
timer stop
starttime   system currenttimemillis
timer start
public void bind
if   bound
resettimer
bound   true
public void unbind
if  bound
timer stop
bound   false
public void rebind
if  bound
resettimer
public void actionperformed actionevent e
long currenttime   system currenttimemillis
long elapsed   currenttime   starttime
if  elapsed >  duration
if  repeat
starttime   currenttime
else
timer stop
// no over-runs...
elapsed   duration
// calculate
if  reportsteps
closuresourcebinding sourcebinding  setclosureargument
new integer  int   elapsed   stepsize
//in groovy2.0 use valueof
else if  reportfraction
closuresourcebinding sourcebinding  setclosureargument
new float  float  elapsed    float  duration
//in groovy2.0 use valueof
else if  reportelapsed
closuresourcebinding sourcebinding  setclosureargument
new long elapsed
//in groovy2.0 use valueof
update
public long getduration
return duration
public void setduration long duration
this duration   duration
public int getinterval
return timer getdelay
public void setinterval int interval
timer setdelay interval
public int getstepsize
return stepsize
public void setstepsize int stepsize
this stepsize   stepsize
public boolean iscoalesce
return timer iscoalesce
public void setcoalesce boolean coalesce
timer setcoalesce coalesce
public boolean isreportsteps
return reportsteps
public void setreportsteps boolean reportsteps
this reportsteps   reportsteps
public boolean isreportfraction
return reportfraction
public void setreportfraction boolean reportfraction
this reportfraction   reportfraction
public boolean isreportelapsed
return reportelapsed
public void setreportelapsed boolean reportelapsed
this reportelapsed   reportelapsed
public boolean isrepeat
return repeat
public void setrepeat boolean repeat
this repeat   repeat