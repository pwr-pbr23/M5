/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ant
import org apache tools ant antclassloader
import org apache tools ant buildexception
import org apache tools ant project
import org apache tools ant taskdefs matchingtask
import org apache tools ant types path
import org apache tools ant types reference
import org codehaus groovy tools loaderconfiguration
import org codehaus groovy tools rootloader
/**
* sets the rootloader as reference.
* reexecution of this task will set a new instance of rootloader for
* the reference.
*
* arguments:
* <ul>
* <li>ref</li>
* <li>classpath</li>
* </ul>
*
* all arguments are requiered.
*
* as ant requieres an antclassloader as reference, this will create a rootloader
* and set an antclassloader as child and stored in the reference. the antclassloader
* instance will not have a classpath nor will it have access to the classpath somehow,
* all loading is done by the rootloader parent. to avoid problems with loading classes
* multiple times and using them at the same time, this task will filter out the ant jars
* and the commons-logging jars. this only works if the ant jars are starting with "ant-" and
* the logging jar starts with "commons-logging-".
*
* this was needed because if ant wants to access a task argument that uses for example a path
* it look for a matching method which includes a matching class. but two classes of the same name
* with different classloaders are different, so ant would not be able to find the method.
*
* @see org.codehaus.groovy.tools.rootloader
* @author jochen theodorou
* @version $revision$
*/
public class rootloaderref extends matchingtask
private string name
private path taskclasspath
/**
* sets the name of the reference which should store the loader
*/
public void setref string n
name   n
public void execute   throws buildexception
if  taskclasspath  null    taskclasspath size    0
throw new buildexception
project project   getproject
antclassloader loader   new antclassloader makeroot   true
project addreference name loader
private rootloader makeroot
string list   taskclasspath list
loaderconfiguration lc   new loaderconfiguration
for  int i 0  i<list length  i
if  list matches
continue
if  list matches
continue
if  list matches
continue
lc addfile list
return new rootloader lc
/**
* set the classpath to be used for this compilation.
*
* @param classpath an ant path object containing the compilation classpath.
*/
public void setclasspath path classpath
if  taskclasspath    null
taskclasspath   classpath
else
taskclasspath append classpath
/**
* adds a reference to a classpath defined elsewhere.
* @param r a reference to a classpath
*/
public void setclasspathref reference r
createclasspath   setrefid r
/**
* adds a path to the classpath.
* @return a class path to be configured
*/
public path createclasspath
if  taskclasspath    null
taskclasspath   new path getproject
return taskclasspath createpath