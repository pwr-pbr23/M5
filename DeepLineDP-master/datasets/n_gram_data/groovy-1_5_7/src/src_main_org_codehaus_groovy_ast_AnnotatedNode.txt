/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import java util
/**
* base class for any ast node which is capable of being annotated
*
* @author <a href="mailto:jstrachan@protique.com">james strachan</a>
* @version $revision$
*/
public class annotatednode extends astnode
private map annotations   collections empty_map
private map annotationclasses   collections empty_map
private boolean synthetic
classnode declaringclass
public annotatednode
public map getannotations
return annotations
public annotationnode getannotations string name
return annotations    collections empty_map ? null    annotationnode  annotations get name
public classnode getannotationclass string name
return annotationclasses    collections empty_map ? null    classnode  annotationclasses get name
public void addannotation string name  annotationnode value
checkinit
annotationclasses put name value getclassnode
annotationnode oldvalue    annotationnode  annotations get name
// todo can we support many annotations of the same name?
if  oldvalue    null
annotations put name  value
else
list list   null
if  oldvalue instanceof list
list    list  oldvalue
else
list   new arraylist
list add oldvalue
annotations put name  list
list add value
private void checkinit
if  annotations    collections empty_map
annotations   new hashmap
if  annotationclasses    collections empty_map
annotationclasses   new hashmap
public void addannotations list annotations
for  iterator iter   annotations iterator    iter hasnext
annotationnode node    annotationnode  iter next
addannotation node getclassnode   getname    node
public boolean issynthetic
return synthetic
public void setsynthetic boolean synthetic
this synthetic   synthetic
public classnode getdeclaringclass
return declaringclass
/**
* @param declaringclass the declaringclass to set.
*/
public void setdeclaringclass classnode declaringclass
this declaringclass   declaringclass