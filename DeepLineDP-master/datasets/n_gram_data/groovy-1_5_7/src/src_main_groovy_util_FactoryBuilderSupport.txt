/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang
import org codehaus groovy runtime invokerhelper
import java util
import java util logging level
import java util logging logger
/**
* mix of buildersupport and swingbuilder's factory support.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author andres almiray <aalmiray@users.sourceforge.com>
*/
public abstract class factorybuildersupport extends binding
public static final string current_factory
public static final string parent_factory
public static final string parent_node
public static final string current_node
public static final string parent_context
public static final string parent_name
public static final string current_name
public static final string owner
private static final logger log   logger getlogger  factorybuildersupport class getname
/**
* throws an exception if value is null.
*
* @param value the node's value
* @param name the node's name
*/
public static void checkvalueisnull  object value  object name
if  value    null
throw new runtimeexception      name
/**
* returns true if type is assignalbe to the value's class, false if value
* is null.<br>
*
* @param value the node's value
* @param name the node's name
* @param type a class that may be assignable to the value's class
*/
public static boolean checkvalueistype  object value  object name  class type
if  value    null
if  type isassignablefrom  value getclass
return true
else
throw new runtimeexception      name
type getname
else
return false
/**
* returns true if type is assignale to the value's class, false if value is
* null or a string.<br>
*
* @param value the node's value
* @param name the node's name
* @param type a class that may be assignable to the value's class
*/
public static boolean checkvalueistypenotstring  object value  object name  class type
if  value    null
if  type isassignablefrom  value getclass
return true
else if  value instanceof string
return false
else
throw new runtimeexception      name
type getname
else
return false
private linkedlist   <map<string object>>   contexts   new linkedlist   <map<string object>>
private linkedlist   <closure>   attributedelegates   new linkedlist   <closure>
private list   <closure>   disposalclosures   new arraylist   <closure>          because of reverse iteration use arraylist
private map   <string factory>   factories   new hashmap   <string factory>
private closure namemappingclosure
private factorybuildersupport proxybuilder
private linkedlist   <closure>   preinstantiatedelegates   new linkedlist   <closure>
private linkedlist   <closure>   postinstantiatedelegates   new linkedlist   <closure>
private linkedlist   <closure>   postnodecompletiondelegates   new linkedlist   <closure>
public factorybuildersupport
this proxybuilder   this
public factorybuildersupport  closure namemappingclosure
this namemappingclosure   namemappingclosure
this proxybuilder   this
/**
* returns the factory map (unmodifiable map).
*/
public map getfactories
return collections unmodifiablemap  proxybuilder factories
/**
* returns the context of the current node.
*/
public map getcontext
if   proxybuilder contexts isempty
return  map  proxybuilder contexts getfirst
return null
/**
* returns the current node being built.
*/
public object getcurrent
return getcontextattribute  current_node
/**
* returns the factory that built the current node.
*/
public factory getcurrentfactory
return  factory  getcontextattribute  current_factory
/**
* returns the current node's name.
*/
public string getcurrentname
return  string  getcontextattribute  current_name
/**
* returns the factory of the parent of the current node.
*/
public factory getparentfactory
return  factory  getcontextattribute  parent_factory
/**
* returns the parent of the current node.
*/
public object getparentnode
return getcontextattribute  parent_node
/**
* returns the parent's name of the current node.
*/
public string getparentname
return  string  getcontextattribute  parent_name
/**
* returns the context of the parent of the current node.
*/
public map getparentcontext
return  map  getcontextattribute  parent_context
private object getcontextattribute  string key
if   proxybuilder contexts isempty
map context    map  proxybuilder contexts getfirst
return context get  key
return null
/**
* convenience method when no arguments are required
*
* @return the result of the call
* @param methodname the name of the method to invoke
*/
public object invokemethod  string methodname
return proxybuilder invokemethod  methodname  null
public object invokemethod  string methodname  object args
object name   proxybuilder getname  methodname
object result   null
object previouscontext   proxybuilder getcontext
try
result   proxybuilder doinvokemethod  methodname  name  args
catch  runtimeexception e
// remove contexts created after we started
if  proxybuilder contexts contains previouscontext
while  proxybuilder getcontext      previouscontext
proxybuilder popcontext
throw e
return result
/**
* add an attribute delegate so it can intercept attributes being set.
* attribute delegates are fired in a filo pattern, so that nested delegates
* get first crack.
*
* @param attrdelegate
*/
public closure addattributedelegate  closure attrdelegate
proxybuilder attributedelegates addfirst  attrdelegate
return attrdelegate
/**
* remove the most recently added instance of the attribute delegate.
*
* @param attrdelegate
*/
public void removeattributedelegate  closure attrdelegate
proxybuilder attributedelegates remove  attrdelegate
/**
* add a preinstantiate delegate so it can intercept nodes before they are
* created. preinstantiate delegates are fired in a filo pattern, so that
* nested delegates get first crack.
*
* @param delegate
*/
public closure addpreinstantiatedelegate  closure delegate
proxybuilder preinstantiatedelegates addfirst  delegate
return delegate
/**
* remove the most recently added instance of the preinstantiate delegate.
*
* @param delegate
*/
public void removepreinstantiatedelegate  closure delegate
proxybuilder preinstantiatedelegates remove  delegate
/**
* add a postinstantiate delegate so it can intercept nodes after they are
* created. postinstantiate delegates are fired in a filo pattern, so that
* nested delegates get first crack.
*
* @param delegate
*/
public closure addpostinstantiatedelegate  closure delegate
proxybuilder postinstantiatedelegates addfirst  delegate
return delegate
/**
* remove the most recently added instance of the postinstantiate delegate.
*
* @param delegate
*/
public void removepostinstantiatedelegate  closure delegate
proxybuilder postinstantiatedelegates remove  delegate
/**
* add a nodecompletion delegate so it can intercept nodes after they done
* with building. nodecompletion delegates are fired in a filo pattern, so
* that nested delegates get first crack.
*
* @param delegate
*/
public closure addpostnodecompletiondelegate  closure delegate
proxybuilder postnodecompletiondelegates addfirst  delegate
return delegate
/**
* remove the most recently added instance of the nodecompletion delegate.
*
* @param delegate
*/
public void removepostnodecompletiondelegate  closure delegate
proxybuilder postnodecompletiondelegates remove  delegate
/**
* registers a factory for a javabean.<br>
* the javabean clas should have a no-args constructor.
*/
public void registerbeanfactory  string thename  final class beanclass
proxybuilder registerfactory  thename  new abstractfactory
public object newinstance  factorybuildersupport builder  object name  object value
map properties   throws instantiationexception  illegalaccessexception
if  checkvalueistypenotstring  value  name  beanclass
return value
else
return beanclass newinstance
/**
* registers a factory for a node name.
*/
public void registerfactory  string name  factory factory
proxybuilder factories put  name  factory
/**
* this method is responsible for instanciating a node and configure its
* properties.
*/
protected object createnode  object name  map attributes  object value
object node   null
factory factory   proxybuilder resolvefactory  name  attributes  value
if  factory    null
log log  level warning      name
return null
proxybuilder getcontext   put  current_factory  factory
proxybuilder getcontext   put  current_name  string valueof name
proxybuilder preinstantiate  name  attributes  value
try
node   factory newinstance  this  name  value  attributes
if  node    null
log log  level warning      name
return null
if  log isloggable  level fine
log fine      name       node
catch  exception e
throw new runtimeexception      name
e  e
proxybuilder postinstantiate  name  attributes  node
proxybuilder handlenodeattributes  node  attributes
return node
/**
* returns the factory associated with name.<br>
* this is a hook for subclasses to plugin a custom strategy for mapping
* names to factories.
*/
protected factory resolvefactory  object name  map attributes  object value
return  factory  proxybuilder factories get  name
/**
* this method is the workhorse of the builder.
*/
private object doinvokemethod  string methodname  object name  object args
object node   null
closure closure   null
list list   invokerhelper aslist  args
if  proxybuilder getcontexts   isempty
// should be called on first build method only
proxybuilder newcontext
switch  list size
case 0
node   proxybuilder createnode  name  collections empty_map  null
break
case 1
object object   list get  0
if  object instanceof map
node   proxybuilder createnode  name   map  object  null
else if  object instanceof closure
closure    closure  object
node   proxybuilder createnode  name  collections empty_map  null
else
node   proxybuilder createnode  name  collections empty_map  object
break
case 2
object object1   list get  0
object object2   list get  1
if  object1 instanceof map
if  object2 instanceof closure
closure    closure  object2
node   proxybuilder createnode  name   map  object1  null
else
node   proxybuilder createnode  name   map  object1  object2
else
if  object2 instanceof closure
closure    closure  object2
node   proxybuilder createnode  name  collections empty_map  object1
else if  object2 instanceof map
node   proxybuilder createnode  name   map  object2  object1
else
throw new missingmethodexception  name tostring    getclass
list toarray    false
break
case 3
object arg0   list get  0
object arg1   list get  1
object arg2   list get  2
if  arg0 instanceof map    arg2 instanceof closure
closure    closure  arg2
node   proxybuilder createnode  name   map  arg0  arg1
else if  arg1 instanceof map    arg2 instanceof closure
closure    closure  arg2
node   proxybuilder createnode  name   map  arg1  arg0
else
throw new missingmethodexception  name tostring    getclass    list toarray
false
break
default
throw new missingmethodexception  name tostring    getclass    list toarray
false
if  node    null
if  proxybuilder getcontexts   size      1
// pop the first context
proxybuilder popcontext
return node
object current   proxybuilder getcurrent
if  current    null
proxybuilder setparent  current  node
if  closure    null
if  proxybuilder getcurrentfactory   isleaf
throw new runtimeexception      name
// push new node on stack
object parentfactory   proxybuilder getcurrentfactory
string parentname   proxybuilder getcurrentname
map parentcontext   proxybuilder getcontext
proxybuilder newcontext
proxybuilder getcontext   put  owner  closure getowner
proxybuilder getcontext   put  current_node  node
proxybuilder getcontext   put  parent_factory  parentfactory
proxybuilder getcontext   put  parent_node  current
proxybuilder getcontext   put  parent_context  parentcontext
proxybuilder getcontext   put  parent_name  parentname
// lets register the builder as the delegate
proxybuilder setclosuredelegate  closure  node
closure call
proxybuilder popcontext
proxybuilder nodecompleted  current  node
node   proxybuilder postnodecompletion  current  node
if  proxybuilder getcontexts
size      1
// pop the first context
proxybuilder popcontext
return node
/**
* a hook to allow names to be converted into some other object such as a
* qname in xml or objectname in jmx.
*
* @param methodname the name of the desired method
* @return the object representing the name
*/
protected object getname  string methodname
if  proxybuilder namemappingclosure    null
return proxybuilder namemappingclosure call  methodname
return methodname
/**
* returns the current builder that serves as a proxy.<br>
* proxy builders are useful for changing the building context, thus
* enabling mix &amp; match builders.
*/
protected factorybuildersupport getproxybuilder
return proxybuilder
/**
* assigns any existing properties to the node.<br>
* it will call attributedelegates before passing control to the factory
* that built the node.
*/
protected void handlenodeattributes  object node  map attributes
// first, short circuit
if  node    null
return
for  iterator iter   proxybuilder attributedelegates iterator    iter hasnext
closure  iter next    call  new object   this  node  attributes
if  proxybuilder getcurrentfactory   onhandlenodeattributes  this  node  attributes
proxybuilder setnodeattributes  node  attributes
/**
* pushes a new context on the stack.
*/
protected void newcontext
proxybuilder contexts addfirst  new hashmap
/**
* a hook to allow nodes to be processed once they have had all of their
* children applied.
*
* @param node the current node being processed
* @param parent the parent of the node being processed
*/
protected void nodecompleted  object parent  object node
proxybuilder getcurrentfactory   onnodecompleted  this  parent  node
/**
* removes the last context from the stack.
*/
protected map popcontext
if   proxybuilder contexts isempty
return  map  proxybuilder contexts removefirst
return null
/**
* a hook after the factory creates the node and before attributes are set.<br>
* it will call any registered postinstantiatedelegates, if you override
* this method be sure to call this impl somewhere in your code.
*/
protected void postinstantiate  object name  map attributes  object node
for  iterator iter   proxybuilder postinstantiatedelegates iterator    iter hasnext
closure  iter next    call  new object   this  attributes  node
/**
* a hook to allow nodes to be processed once they have had all of their
* children applied and allows the actual node object that represents the
* markup element to be changed.<br>
* it will call any registered postnodecompletiondelegates, if you override
* this method be sure to call this impl at the end of your code.
*
* @param node the current node being processed
* @param parent the parent of the node being processed
* @return the node, possibly new, that represents the markup element
*/
protected object postnodecompletion  object parent  object node
for  iterator iter   proxybuilder postnodecompletiondelegates iterator    iter hasnext
closure  iter next    call  new object   this  parent  node
return node
/**
* a hook before the factory creates the node.<br>
* it will call any registered preinstantiatedelegates, if you override this
* method be sure to call this impl somewhere in your code.
*/
protected void preinstantiate  object name  map attributes  object value
for  iterator iter   proxybuilder preinstantiatedelegates iterator    iter hasnext
closure  iter next    call  new object   this  attributes  value
/**
* clears the context stack.
*/
protected void reset
proxybuilder contexts clear
/**
* a strategy method to allow derived builders to use builder-trees and
* switch in different kinds of builders. this method should call the
* setdelegate() method on the closure which by default passes in this but
* if node is-a builder we could pass that in instead (or do something wacky
* too)
*
* @param closure the closure on which to call setdelegate()
* @param node the node value that we've just created, which could be a
*        builder
*/
protected void setclosuredelegate  closure closure  object node
closure setdelegate  this
/**
* maps attributes key/values to properties on node.
*/
protected void setnodeattributes  object node  map attributes
// set the properties
for  iterator iter   attributes entryset
iterator    iter hasnext
map entry entry    map entry  iter next
string property   entry getkey   tostring
object value   entry getvalue
invokerhelper setproperty  node  property  value
/**
* strategy method to stablish parent/child relationships.
*/
protected void setparent  object parent  object child
proxybuilder getcurrentfactory   setparent  this  parent  child
factory parentfactory   proxybuilder getparentfactory
if  parentfactory    null
parentfactory setchild  this  parent  child
/**
* sets the builder to be used as a proxy.
*/
protected void setproxybuilder  factorybuildersupport proxybuilder
this proxybuilder   proxybuilder
/**
* returns the stack of available contexts.
*/
protected linkedlist getcontexts
return proxybuilder contexts
public object build class viewclass
if  script class isassignablefrom viewclass
script script   invokerhelper createscript viewclass  this
return build script
else
throw new runtimeexception
public object build script script
synchronized  script
metaclass scriptmetaclass   script getmetaclass
try
script setmetaclass new factoryinterceptormetaclass scriptmetaclass  this
script setbinding this
return script run
finally
script setmetaclass scriptmetaclass
public object build final string script  groovyclassloader loader
return build loader parseclass script
/**
* switches the builder's proxybuilder during the execution of a closure.<br>
* this is useful to temporary change the building context to another builder
* without the need for a contrived setup. it will also take care of restoring
* the previous proxybuilder when the execution finishes, even if an exception
* was thrown from inside the closure.
*
* @param builder the temporary builder to switch to as proxybuilder.
* @param closure the closure to be executed under the temporary builder.
*
* @throws runtimeexception - any exception the closure might have thrown during
* execution.
* @return the execution result of the closure.
*/
public object withbuilder  factorybuildersupport builder  closure closure
if  builder    null    closure    null
return null
object result   null
object previouscontext   proxybuilder getcontext
factorybuildersupport previousproxybuilder   proxybuilder
try
proxybuilder   builder
closure setdelegate  builder
result   closure call
catch  runtimeexception e
// remove contexts created after we started
proxybuilder   previousproxybuilder
if  proxybuilder contexts contains previouscontext
while  proxybuilder getcontext      previouscontext
proxybuilder popcontext
throw e
finally
proxybuilder   previousproxybuilder
return result
/**
* switches the builder's proxybuilder during the execution of a closure.<br>
* this is useful to temporary change the building context to another builder
* without the need for a contrived setup. it will also take care of restoring
* the previous proxybuilder when the execution finishes, even if an exception
* was thrown from inside the closure. additionally it will use the closure's
* result as the value for the node identified by 'name'.
*
* @param builder the temporary builder to switch to as proxybuilder.
* @param name the node to build on the 'parent' builder.
* @param closure the closure to be executed under the temporary builder.
*
* @throws runtimeexception - any exception the closure might have thrown during
* execution.
* @return a node that responds to value of name with the closure's result as its
* value.
*/
public object withbuilder  factorybuildersupport builder  string name  closure closure
if  name    null
return null
object result   proxybuilder withbuilder  builder  closure
return proxybuilder invokemethod  name  new object  result
/**
* switches the builder's proxybuilder during the execution of a closure.<br>
* this is useful to temporary change the building context to another builder
* without the need for a contrived setup. it will also take care of restoring
* the previous proxybuilder when the execution finishes, even if an exception
* was thrown from inside the closure. additionally it will use the closure's
* result as the value for the node identified by 'name' and assign any attributes
* that might have been set.
*
* @param attributes additional properties for the node on the parent builder.
* @param builder the temporary builder to switch to as proxybuilder.
* @param name the node to build on the 'parent' builder.
* @param closure the closure to be executed under the temporary builder.
*
* @throws runtimeexception - any exception the closure might have thrown during
* execution.
* @return a node that responds to value of name with the closure's result as its
* value.
*/
public object withbuilder  map attributes  factorybuildersupport builder  string name  closure closure
if  name    null
return null
object result   proxybuilder withbuilder  builder  closure
return proxybuilder invokemethod  name  new object  attributes  result
public void adddisposalclosure closure closure
disposalclosures add closure
public void dispose
for  int i   disposalclosures size     1  i >  0  i
closure disposalclosures get i   call
class factoryinterceptormetaclass extends delegatingmetaclass
factorybuildersupport factory
public factoryinterceptormetaclass metaclass delegate  factorybuildersupport factory
super delegate
this factory   factory
public object invokemethod object object  string methodname  object arguments
try
return delegate invokemethod object  methodname  arguments
catch  missingmethodexception mme
// attempt factory resolution
try
if  factory getmetaclass   respondsto factory  methodname  isempty
// dispatch to fectories if it is not a literal method
return factory invokemethod methodname  arguments
else
return invokerhelper invokemethod factory  methodname  arguments
catch  missingmethodexception mme2
// throw original
// should we chain in mme2 somehow?
throw mme
public object invokemethod object object  string methodname  object arguments
try
return delegate invokemethod object  methodname  arguments
catch  missingmethodexception mme
// attempt factory resolution
try
if  factory getmetaclass   respondsto factory  methodname  isempty
// dispatch to fectories if it is not a literal method
return factory invokemethod methodname  arguments
else
return invokerhelper invokemethod factory  methodname  arguments
catch  missingmethodexception mme2
// throw original
// should we chain in mme2 somehow?
throw mme