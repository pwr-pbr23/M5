/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast
import org codehaus groovy ast stmt blockstatement
import org codehaus groovy ast stmt statement
import org objectweb asm opcodes
import java util list
/**
* represents a method declaration
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class methodnode extends annotatednode implements opcodes
private final string name
private int modifiers
private classnode returntype
private parameter parameters
private boolean hasdefaultvalue   false
private statement code
private boolean dynamicreturntype
private variablescope variablescope
private final classnode exceptions
// type spec for generics
private genericstype genericstypes null
public methodnode string name  int modifiers  classnode returntype  parameter parameters  classnode exceptions  statement code
this name   name
this modifiers   modifiers
this code   code
setreturntype returntype
variablescope scope   new variablescope
setvariablescope scope
setparameters parameters
this exceptions   exceptions
/**
* the type descriptor for a method node is a string containing the name of the method, its return type,
* and its parameter types in a canonical form. for simplicity, i'm using the format of a java declaration
* without parameter names, and with $dynamic as the type for any dynamically typed values.
*/
// todo: add test case for type descriptor
public string gettypedescriptor
stringbuffer buf   new stringbuffer name length   parameters length 10
// buf.append(dynamicreturntype ? "$dynamic" : cleanuptypename(returntype));
//
buf append returntype getname        br  to replace the above  dynamic type returns object
//
buf append
buf append name
buf append
for  int i   0  i < parameters length  i
if  i > 0
buf append
parameter param   parameters
buf append param gettype   getname
buf append
return buf tostring
public boolean isvoidmethod
return returntype  classhelper void_type
public statement getcode
return code
public void setcode statement code
this code   code
public int getmodifiers
return modifiers
public void setmodifiers int modifiers
this modifiers   modifiers
public string getname
return name
public parameter getparameters
return parameters
public void setparameters parameter parameters
variablescope scope   new variablescope
this parameters   parameters
if  parameters    null    parameters length > 0
for  int i   0  i < parameters length  i
parameter para   parameters
if  para hasinitialexpression
this hasdefaultvalue   true
para setinstaticcontext isstatic
scope putdeclaredvariable para
setvariablescope scope
public classnode getreturntype
return returntype
public variablescope getvariablescope
return variablescope
public void setvariablescope variablescope variablescope
this variablescope   variablescope
variablescope setinstaticcontext isstatic
public boolean isdynamicreturntype
return dynamicreturntype
public boolean isabstract
return  modifiers   acc_abstract     0
public boolean isstatic
return  modifiers   acc_static     0
public boolean ispublic
return  modifiers   acc_public     0
public boolean isprotected
return  modifiers   acc_protected     0
public boolean hasdefaultvalue
return this hasdefaultvalue
public string tostring
return super tostring         name
public void setreturntype classnode returntype
dynamicreturntype    classhelper dynamic_type  returntype
this returntype   returntype
if  returntype  null  this returntype   classhelper object_type
public classnode getexceptions
return exceptions
public statement getfirststatement
if  code    null  return null
statement first   code
while  first instanceof blockstatement
list list     blockstatement  first  getstatements
if  list isempty
first null
else
first    statement  list get 0
return first
public genericstype getgenericstypes
return genericstypes
public void setgenericstypes genericstype genericstypes
this genericstypes   genericstypes