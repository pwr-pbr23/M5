/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org codehaus groovy ast expr
import org codehaus groovy ast groovycodevisitor
/**
* represents a short ternary expression x ?: y, which is equal
* to
* <pre>
* def truepart = x
* def booleanpart = truepart as boolean
* booleanpart? truepart : y
* </pre>
* even if x is no atomic expression, x will be evaluated only
* once. example:
* <pre>
* class foo {
*   def index=0
*   def getx(){ index++; return index }
* }
* def foo = new foo()
* def result = foo.x ?: "false case"
* assert foo.index == 1
* assert result == 1
* <pre>
*
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @since 1.1
*/
public class elvisoperatorexpression extends ternaryexpression
public elvisoperatorexpression expression base  expression falseexpression
super getbool base   base  falseexpression
private static booleanexpression getbool expression base
booleanexpression be   new booleanexpression base
be setsourceposition base
return be
public void visit groovycodevisitor visitor
visitor visitshortternaryexpression this
public expression transformexpression expressiontransformer transformer
expression ret   new elvisoperatorexpression
transformer transform gettrueexpression
transformer transform getfalseexpression
ret setsourceposition this
return ret