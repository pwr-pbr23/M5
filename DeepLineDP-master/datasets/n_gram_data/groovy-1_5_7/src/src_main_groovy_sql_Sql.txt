/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy sql
import groovy lang closure
import groovy lang gstring
import java security accesscontroller
import java security privilegedactionexception
import java security privilegedexceptionaction
import java sql callablestatement
import java sql connection
import java sql drivermanager
import java sql preparedstatement
import java sql resultset
import java sql resultsetmetadata
import java sql sqlexception
import java sql statement
import java sql types
import java util
import java util logging level
import java util logging logger
import java util regex matcher
import java util regex pattern
import javax sql datasource
import org codehaus groovy runtime defaultgroovymethods
/**
* represents an extent of objects
*
* @author chris stevenson
* @author <a href="mailto:james@coredevelopers.net">james strachan </a>
* @version $revision$
*/
public class sql
protected logger log   logger getlogger getclass   getname
private datasource datasource
private connection useconnection
private int resultsettype   resultset type_forward_only
private int resultsetconcurrency   resultset concur_read_only
private int resultsetholdability    1
/**
* let's only warn of using deprecated methods once
*/
private boolean warned
// store the last row count for executeupdate
int updatecount   0
/**
* allows a closure to be used to configure the statement before its use
*/
private closure configurestatement
/**
* creates a new sql instance given a jdbc connection url.
*
* @param url a database url of the form
*            <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @return a new sql instance with a connection
* @throws sqlexception if a database access error occurs
*/
public static sql newinstance string url  throws sqlexception
connection connection   drivermanager getconnection url
return new sql connection
/**
* creates a new sql instance given a jdbc connection url
* and some properties.
*
* @param url        a database url of the form
*                   <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @param properties a list of arbitrary string tag/value pairs
*                   as connection arguments; normally at least a "user" and
*                   "password" property should be included
* @return a new sql instance with a connection
* @throws sqlexception if a database access error occurs
*/
public static sql newinstance string url  properties properties  throws sqlexception
connection connection   drivermanager getconnection url  properties
return new sql connection
/**
* creates a new sql instance given a jdbc connection url,
* some properties and a driver class name.
*
* @param url             a database url of the form
*                        <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @param properties      a list of arbitrary string tag/value pairs
*                        as connection arguments; normally at least a "user" and
*                        "password" property should be included
* @param driverclassname the fully qualified class name of the driver class
* @return a new sql instance with a connection
* @throws sqlexception           if a database access error occurs
* @throws classnotfoundexception if the class cannot be found or loaded
*/
public static sql newinstance string url  properties properties  string driverclassname
throws sqlexception  classnotfoundexception
loaddriver driverclassname
return newinstance url  properties
/**
* creates a new sql instance given a jdbc connection url,
* a username and a password.
*
* @param url      a database url of the form
*                 <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @param user     the database user on whose behalf the connection
*                 is being made
* @param password the user's password
* @return a new sql instance with a connection
* @throws sqlexception if a database access error occurs
*/
public static sql newinstance string url  string user  string password  throws sqlexception
connection connection   drivermanager getconnection url  user  password
return new sql connection
/**
* creates a new sql instance given a jdbc connection url,
* a username, a password and a driver class name.
*
* @param url             a database url of the form
*                        <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @param user            the database user on whose behalf the connection
*                        is being made
* @param password        the user's password
* @param driverclassname the fully qualified class name of the driver class
* @return a new sql instance with a connection
* @throws sqlexception           if a database access error occurs
* @throws classnotfoundexception if the class cannot be found or loaded
*/
public static sql newinstance string url  string user  string password  string driverclassname  throws sqlexception
classnotfoundexception
loaddriver driverclassname
return newinstance url  user  password
/**
* creates a new sql instance given a jdbc connection url
* and a driver class name.
*
* @param url             a database url of the form
*                        <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
* @param driverclassname the fully qualified class name of the driver class
* @return a new sql instance with a connection
* @throws sqlexception           if a database access error occurs
* @throws classnotfoundexception if the class cannot be found or loaded
*/
public static sql newinstance string url  string driverclassname  throws sqlexception  classnotfoundexception
loaddriver driverclassname
return newinstance url
/**
* gets the resultsettype for statements created using the connection.
*
* @return the current resultsettype value
*/
public int getresultsettype
return resultsettype
/**
* sets the resultsettype for statements created using the connection.
* may cause sqlfeaturenotsupportedexception exceptions to occur if the
* underlying database doesn't support the requested type value.
*
* @param resultsettype one of the following <code>resultset</code>
*        constants:
*         <code>resultset.type_forward_only</code>,
*         <code>resultset.type_scroll_insensitive</code>, or
*         <code>resultset.type_scroll_sensitive</code>
*/
public void setresultsettype int resultsettype
this resultsettype   resultsettype
/**
* gets the resultsetconcurrency for statements created using the connection.
*
* @return the current resultsetconcurrency value
*/
public int getresultsetconcurrency
return resultsetconcurrency
/**
* sets the resultsetconcurrency for statements created using the connection.
* may cause sqlfeaturenotsupportedexception exceptions to occur if the
* underlying database doesn't support the requested concurrency value.
*
* @param resultsetconcurrency one of the following <code>resultset</code>
*        constants:
*         <code>resultset.concur_read_only</code> or
*         <code>resultset.concur_updatable</code>
*/
public void setresultsetconcurrency int resultsetconcurrency
this resultsetconcurrency   resultsetconcurrency
/**
* gets the resultsetholdability for statements created using the connection.
*
* @return the current resultsetholdability value or -1 if not set
*/
public int getresultsetholdability
return resultsetholdability
/**
* sets the resultsetholdability for statements created using the connection.
* may cause sqlfeaturenotsupportedexception exceptions to occur if the
* underlying database doesn't support the requested holdability value.
*
* @param resultsetholdability one of the following <code>resultset</code>
*        constants:
*         <code>resultset.hold_cursors_over_commit</code> or
*         <code>resultset.close_cursors_at_commit</code>
*/
public void setresultsetholdability int resultsetholdability
this resultsetholdability   resultsetholdability
/**
* attempts to load the jdbc driver on the thread, current or system class
* loaders
*
* @param driverclassname the fully qualified class name of the driver class
* @throws classnotfoundexception if the class cannot be found or loaded
*/
public static void loaddriver string driverclassname  throws classnotfoundexception
// let's try the thread context class loader first
// let's try to use the system class loader
try
class forname driverclassname
catch  classnotfoundexception e
try
thread currentthread   getcontextclassloader   loadclass driverclassname
catch  classnotfoundexception e2
// now let's try the classloader which loaded us
try
sql class getclassloader   loadclass driverclassname
catch  classnotfoundexception e3
throw e
public static final outparameter array           new outparameter    public int gettype     return types array
public static final outparameter bigint          new outparameter    public int gettype     return types bigint
public static final outparameter binary          new outparameter    public int gettype     return types binary
public static final outparameter bit             new outparameter    public int gettype     return types bit
public static final outparameter blob            new outparameter    public int gettype     return types blob
public static final outparameter boolean         new outparameter    public int gettype     return types boolean
public static final outparameter char            new outparameter    public int gettype     return types char
public static final outparameter clob            new outparameter    public int gettype     return types clob
public static final outparameter datalink        new outparameter    public int gettype     return types datalink
public static final outparameter date            new outparameter    public int gettype     return types date
public static final outparameter decimal         new outparameter    public int gettype     return types decimal
public static final outparameter distinct        new outparameter    public int gettype     return types distinct
public static final outparameter double          new outparameter    public int gettype     return types double
public static final outparameter float           new outparameter    public int gettype     return types float
public static final outparameter integer         new outparameter    public int gettype     return types integer
public static final outparameter java_object     new outparameter    public int gettype     return types java_object
public static final outparameter longvarbinary   new outparameter    public int gettype     return types longvarbinary
public static final outparameter longvarchar     new outparameter    public int gettype     return types longvarchar
public static final outparameter null            new outparameter    public int gettype     return types null
public static final outparameter numeric         new outparameter    public int gettype     return types numeric
public static final outparameter other           new outparameter    public int gettype     return types other
public static final outparameter real            new outparameter    public int gettype     return types real
public static final outparameter ref             new outparameter    public int gettype     return types ref
public static final outparameter smallint        new outparameter    public int gettype     return types smallint
public static final outparameter struct          new outparameter    public int gettype     return types struct
public static final outparameter time            new outparameter    public int gettype     return types time
public static final outparameter timestamp       new outparameter    public int gettype     return types timestamp
public static final outparameter tinyint         new outparameter    public int gettype     return types tinyint
public static final outparameter varbinary       new outparameter    public int gettype     return types varbinary
public static final outparameter varchar         new outparameter    public int gettype     return types varchar
public static inparameter array object value    return in types array  value
public static inparameter bigint object value    return in types bigint  value
public static inparameter binary object value    return in types binary  value
public static inparameter bit object value    return in types bit  value
public static inparameter blob object value    return in types blob  value
public static inparameter boolean object value    return in types boolean  value
public static inparameter char object value    return in types char  value
public static inparameter clob object value    return in types clob  value
public static inparameter datalink object value    return in types datalink  value
public static inparameter date object value    return in types date  value
public static inparameter decimal object value    return in types decimal  value
public static inparameter distinct object value    return in types distinct  value
public static inparameter double object value    return in types double  value
public static inparameter float object value    return in types float  value
public static inparameter integer object value    return in types integer  value
public static inparameter java_object object value    return in types java_object  value
public static inparameter longvarbinary object value    return in types longvarbinary  value
public static inparameter longvarchar object value    return in types longvarchar  value
public static inparameter null object value    return in types null  value
public static inparameter numeric object value    return in types numeric  value
public static inparameter other object value    return in types other  value
public static inparameter real object value    return in types real  value
public static inparameter ref object value    return in types ref  value
public static inparameter smallint object value    return in types smallint  value
public static inparameter struct object value    return in types struct  value
public static inparameter time object value    return in types time  value
public static inparameter timestamp object value    return in types timestamp  value
public static inparameter tinyint object value    return in types tinyint  value
public static inparameter varbinary object value    return in types varbinary  value
public static inparameter varchar object value    return in types varchar  value
/**
* create a new inparameter
*
* @param type  the jdbc data type
* @param value the object value
* @return an inparameter
*/
public static inparameter in final int type  final object value
return new inparameter
public int gettype
return type
public object getvalue
return value
/**
* create a new outparameter
*
* @param type the jdbc data type.
* @return an outparameter
*/
public static outparameter out final int type
return new outparameter
public int gettype
return type
/**
* create an inout parameter using this in parameter.
*
* @param in the inparameter of interest
* @return the resulting inoutparameter
*/
public static inoutparameter inout final inparameter in
return new inoutparameter
public int gettype
return in gettype
public object getvalue
return in getvalue
/**
* create a new resultsetoutparameter
*
* @param type the jdbc data type.
* @return a resultsetoutparameter
*/
public static resultsetoutparameter resultset final int type
return new resultsetoutparameter
public int gettype
return type
/**
* creates a variable to be expanded in the sql string rather
* than representing an sql parameter.
*
* @param object the object of interest
* @return the expanded variable
*/
public static expandedvariable expand final object object
return new expandedvariable
public object getobject
return object
/**
* constructs an sql instance using the given datasource. each operation
* will use a connection from the datasource pool and close it when the
* operation is completed putting it back into the pool.
*
* @param datasource the datasource to use
*/
public sql datasource datasource
this datasource   datasource
/**
* constructs an sql instance using the given connection. it is the caller's
* responsibility to close the connection after the sql instance has been
* used. you can do this on the connection object directly or by calling the
* {@link connection#close()}  method.
*
* @param connection the connection to use
*/
public sql connection connection
if  connection    null
throw new nullpointerexception
this useconnection   connection
public sql sql parent
this datasource   parent datasource
this useconnection   parent useconnection
public dataset dataset string table
return new dataset this  table
public dataset dataset class type
return new dataset this  type
/**
* performs the given sql query calling the closure with the result set.
*
* @param sql     the sql statement
* @param closure called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void query string sql  closure closure  throws sqlexception
connection connection   createconnection
statement statement   createconnection connection
configure statement
resultset results   null
try
log fine sql
results   statement executequery sql
closure call results
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  results
private statement createconnection connection connection  throws sqlexception
if  resultsetholdability     1
return connection createstatement resultsettype  resultsetconcurrency
return connection createstatement resultsettype  resultsetconcurrency  resultsetholdability
/**
* performs the given sql query with parameters calling the closure with the
* result set.
*
* @param sql     the sql statement
* @param params  a list of parameters
* @param closure called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void query string sql  list params  closure closure  throws sqlexception
connection connection   createconnection
preparedstatement statement   null
resultset results   null
try
log fine sql
statement   connection preparestatement sql
setparameters params  statement
configure statement
results   statement executequery
closure call results
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  results
/**
* performs the given sql query calling the closure with the result set.
*
* @param gstring a gstring containing the sql query with embedded params
* @param closure  called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void query gstring gstring  closure closure  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
query sql  params  closure
/**
* performs the given sql query calling the closure with each row of the
* result set.
*
* @param sql      the sql statement
* @param closure  called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void eachrow string sql  closure closure  throws sqlexception
eachrow sql   closure  null  closure
/**
* performs the given sql query calling closures for metadata and each row
*
* @param sql         the sql statement
* @param metaclosure called for meta data (only once after sql execution)
* @param rowclosure  called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void eachrow string sql  closure metaclosure  closure rowclosure  throws sqlexception
connection connection   createconnection
statement statement   createconnection connection
configure statement
resultset results   null
try
log fine sql
results   statement executequery sql
if  metaclosure    null  metaclosure call results getmetadata
groovyresultset groovyrs   new groovyresultsetproxy results  getimpl
while  groovyrs next
rowclosure call groovyrs
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  results
/**
* performs the given sql query calling the closure with the result set.
*
* @param sql     the sql statement
* @param params  a list of parameters
* @param closure called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void eachrow string sql  list params  closure closure  throws sqlexception
connection connection   createconnection
preparedstatement statement   null
resultset results   null
try
log fine sql
statement   connection preparestatement sql
setparameters params  statement
configure statement
results   statement executequery
groovyresultset groovyrs   new groovyresultsetproxy results  getimpl
while  groovyrs next
closure call groovyrs
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  results
/**
* performs the given sql query calling the closure with the result set.
*
* @param gstring a gstring containing the sql query with embedded params
* @param closure called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void eachrow gstring gstring  closure closure  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
eachrow sql  params  closure
/**
* @deprecated please use eachrow instead
*/
public void queryeach string sql  closure closure  throws sqlexception
warndeprecated
eachrow sql  closure
/**
* @deprecated please use eachrow instead
*/
public void queryeach string sql  list params  closure closure  throws sqlexception
warndeprecated
eachrow sql  params  closure
/**
* @deprecated please use eachrow instead
*/
public void queryeach gstring gstring  closure closure  throws sqlexception
warndeprecated
eachrow gstring  closure
/**
* performs the given sql query and return the rows of the result set.
*
* @param sql the sql statement
* @return a list of groovyrowresult objects
* @throws sqlexception if a database access error occurs
*/
public list rows string sql  throws sqlexception
return rows sql   closure  null
/**
* performs the given sql query and return the rows of the result set.
*
* @param gstring a gstring containing the sql query with embedded params
* @return a list of groovyrowresult objects
* @throws sqlexception if a database access error occurs
*/
public list rows gstring gstring  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
return rows sql  params
/**
* performs the given sql query and return the rows of the result set.
*
* @param sql         the sql statement
* @param metaclosure called with meta data of the resultset
* @return a list of groovyrowresult objects
* @throws sqlexception if a database access error occurs
*/
public list rows string sql  closure metaclosure  throws sqlexception
list results   new arraylist
connection connection   createconnection
statement statement   createconnection connection
configure statement
resultset rs   null
try
log fine sql
rs   statement executequery sql
if  metaclosure    null  metaclosure call rs getmetadata
while  rs next
results add defaultgroovymethods torowresult rs
return  results
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  rs
/**
* performs the given sql query with the list of params and return
* the rows of the result set.
*
* @param sql    the sql statement
* @param params a list of parameters
* @return a list of groovyrowresult objects
* @throws sqlexception if a database access error occurs
*/
public list rows string sql  list params  throws sqlexception
list results   new arraylist
connection connection   createconnection
preparedstatement statement   null
resultset rs   null
try
log fine sql
statement   connection preparestatement sql
setparameters params  statement
configure statement
rs   statement executequery
while  rs next
results add defaultgroovymethods torowresult rs
return  results
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement  rs
/**
* performs the given sql query and return the first row of the result set.
*
* @param sql the sql statement
* @return a groovyrowresult object
* @throws sqlexception if a database access error occurs
*/
public object firstrow string sql  throws sqlexception
list rows   rows sql
if  rows isempty    return null
return  rows get 0
/**
* performs the given sql query and return
* the first row of the result set.
*
* @param gstring a gstring containing the sql query with embedded params
* @return a groovyrowresult object
* @throws sqlexception if a database access error occurs
*/
public object firstrow gstring gstring  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
return firstrow sql  params
/**
* performs the given sql query with the list of params and return
* the first row of the result set.
*
* @param sql    the sql statement
* @param params a list of parameters
* @return a groovyrowresult object
* @throws sqlexception if a database access error occurs
*/
public object firstrow string sql  list params  throws sqlexception
list rows   rows sql  params
if  rows isempty    return null
return rows get 0
/**
* executes the given piece of sql.
*
* @param sql    the sql statement
* @return <code>true</code> if the first result is a <code>resultset</code>
*         object; <code>false</code> if it is an update count or there are
*         no results
* @throws sqlexception if a database access error occurs
*/
public boolean execute string sql  throws sqlexception
connection connection   createconnection
statement statement   null
try
log fine sql
statement   createconnection connection
configure statement
boolean isresultset   statement execute sql
this updatecount   statement getupdatecount
return isresultset
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* executes the given piece of sql with parameters.
*
* @param sql    the sql statement
* @param params a list of parameters
* @return <code>true</code> if the first result is a <code>resultset</code>
*         object; <code>false</code> if it is an update count or there are
*         no results
* @throws sqlexception if a database access error occurs
*/
public boolean execute string sql  list params  throws sqlexception
connection connection   createconnection
preparedstatement statement   null
try
log fine sql
statement   connection preparestatement sql
setparameters params  statement
configure statement
boolean isresultset   statement execute
this updatecount   statement getupdatecount
return isresultset
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* executes the given sql with embedded expressions inside.
*
* @param gstring a gstring containing the sql query with embedded params
* @return <code>true</code> if the first result is a <code>resultset</code>
*         object; <code>false</code> if it is an update count or there are
*         no results
* @throws sqlexception if a database access error occurs
*/
public boolean execute gstring gstring  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
return execute sql  params
/**
* executes the given sql statement. see {@link #executeinsert(gstring)}
* for more details.
*
* @param sql the sql statement to execute
* @return a list of the auto-generated column values for each
*         inserted row
* @throws sqlexception if a database access error occurs
*/
public list executeinsert string sql  throws sqlexception
connection connection   createconnection
statement statement   null
try
log fine sql
statement   createconnection connection
configure statement
boolean hasresultset   statement execute sql  statement return_generated_keys
// prepare a list to contain the auto-generated column
// values, and then fetch them from the statement.
list autokeys   new arraylist
resultset keys   statement getgeneratedkeys
int count   keys getmetadata   getcolumncount
// copy the column values into a list of a list.
while  keys next
list rowkeys   new arraylist count
for  int i   1  i <  count  i
rowkeys add keys getobject i
autokeys add rowkeys
// store the update count so that it can be retrieved by
// clients, and then return the list of auto-generated
// values.
this updatecount   statement getupdatecount
return autokeys
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* executes the given sql statement with a particular list of
* parameter values. see {@link #executeinsert(gstring)} for
* more details.
*
* @param sql    the sql statement to execute
* @param params the parameter values that will be substituted
*               into the sql statement's parameter slots
* @return a list of the auto-generated column values for each
*         inserted row
* @throws sqlexception if a database access error occurs
*/
public list executeinsert string sql  list params  throws sqlexception
// now send the sql to the database.
connection connection   createconnection
preparedstatement statement   null
try
log fine sql
// prepare a statement for the sql and then execute it.
statement   connection preparestatement sql  statement return_generated_keys
setparameters params  statement
configure statement
this updatecount   statement executeupdate
// prepare a list to contain the auto-generated column
// values, and then fetch them from the statement.
list autokeys   new arraylist
resultset keys   statement getgeneratedkeys
int count   keys getmetadata   getcolumncount
// copy the column values into a list of a list.
while  keys next
list rowkeys   new arraylist count
for  int i   1  i <  count  i
rowkeys add keys getobject i
autokeys add rowkeys
return autokeys
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* <p>executes the given sql with embedded expressions inside, and
* returns the values of any auto-generated colums, such as an
* autoincrement id field. these values can be accessed using
* array notation. for example, to return the second auto-generated
* column value of the third row, use <code>keys[3][1]</code>. the
* method is designed to be used with sql insert statements, but is
* not limited to them.</p>
* <p>the standard use for this method is when a table has an
* autoincrement id column and you want to know what the id is for
* a newly inserted row. in this example, we insert a single row
* into a table in which the first column contains the autoincrement
* id:</p>
* <pre>
*     def sql = sql.newinstance("jdbc:mysql://localhost:3306/groovy",
*                               "user",
*                               "password",
*                               "com.mysql.jdbc.driver")
* <p/>
*     def keys = sql.insert("insert into test_table (int_data, string_data) "
*                           + "values (1, 'key largo')")
* <p/>
*     def id = keys[0][0]
* <p/>
*     // 'id' now contains the value of the new row's id column.
*     // it can be used to update an object representation's
*     // id attribute for example.
*     ...
* </pre>
*
* @param gstring a gstring containing the sql query with embedded params
* @return a list of column values representing each row's
*         auto-generated keys
* @throws sqlexception if a database access error occurs
*/
public list executeinsert gstring gstring  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
return executeinsert sql  params
/**
* executes the given sql update.
*
* @param sql    the sql statement
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int executeupdate string sql  throws sqlexception
connection connection   createconnection
statement statement   null
try
log fine sql
statement   createconnection connection
configure statement
this updatecount   statement executeupdate sql
return this updatecount
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* executes the given sql update with parameters.
*
* @param sql    the sql statement
* @param params a list of parameters
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int executeupdate string sql  list params  throws sqlexception
connection connection   createconnection
preparedstatement statement   null
try
log fine sql
statement   connection preparestatement sql
setparameters params  statement
configure statement
this updatecount   statement executeupdate
return this updatecount
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* executes the given sql update with embedded expressions inside.
*
* @param gstring a gstring containing the sql query with embedded params
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int executeupdate gstring gstring  throws sqlexception
list params   getparameters gstring
string sql   assql gstring  params
return executeupdate sql  params
/**
* performs a stored procedure call.
*
* @param sql    the sql statement
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int call string sql  throws exception
return call sql  collections empty_list
/**
* performs a stored procedure call with the given parameters.
*
* @param sql    the sql statement
* @param params a list of parameters
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int call string sql  list params  throws exception
connection connection   createconnection
callablestatement statement   connection preparecall sql
try
log fine sql
setparameters params  statement
configure statement
return statement executeupdate
catch  sqlexception e
log log level fine      sql  e
throw e
finally
closeresources connection  statement
/**
* performs a stored procedure call with the given parameters.  the closure
* is called once with all the out parameters.
*
* @param sql     the sql statement
* @param params  a list of parameters
* @param closure called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void call string sql  list params  closure closure  throws exception
connection connection   createconnection
callablestatement statement   connection preparecall sql
try
log fine sql
setparameters params  statement
statement execute
list results   new arraylist
int indx   0
int inouts   0
for  iterator iter   params iterator    iter hasnext
object value   iter next
if  value instanceof outparameter
if  value instanceof resultsetoutparameter
results add callresultset getimpl statement  indx
else
object o   statement getobject indx   1
if  o instanceof resultset
results add new groovyresultsetproxy  resultset  o  getimpl
else
results add o
inouts
indx
closure call results toarray new object
catch  sqlexception e
log log level warning      sql  e
throw e
finally
closeresources connection  statement
/**
* performs a stored procedure call with the given parameters.
*
* @param gstring a gstring containing the sql query with embedded params
* @return the number of rows updated or 0 for sql statements that return nothing
* @throws sqlexception if a database access error occurs
*/
public int call gstring gstring  throws exception
list params   getparameters gstring
string sql   assql gstring  params
return call sql  params
/**
* performs a stored procedure call with the given parameters,
* calling the closure once with all result objects.
*
* @param gstring a gstring containing the sql query with embedded params
* @param closure  called for each row with a groovyresultset
* @throws sqlexception if a database access error occurs
*/
public void call gstring gstring  closure closure  throws exception
list params   getparameters gstring
string sql   assql gstring  params
call sql  params  closure
/**
* if this sql object was created with a connection then this method closes
* the connection. if this sql object was created from a datasource then
* this method does nothing.
*
* @throws sqlexception if a database access error occurs
*/
public void close   throws sqlexception
if  useconnection    null
useconnection close
public datasource getdatasource
return datasource
public void commit
try
this useconnection commit
catch  sqlexception e
log log level severe      e  e
public void rollback
try
this useconnection rollback
catch  sqlexception e
log log level severe      e  e
/**
* @return returns the updatecount.
*/
public int getupdatecount
return updatecount
/**
* if this instance was created with a single connection then the connection
* is returned. otherwise if this instance was created with a datasource
* then this method returns null
*
* @return the connection wired into this object, or null if this object
*         uses a datasource
*/
public connection getconnection
return useconnection
/**
* allows a closure to be passed in to configure the jdbc statements before they are executed
* to do things like set the query size etc.
*
* @param configurestatement the closure
*/
public void withstatement closure configurestatement
this configurestatement   configurestatement
// implementation methods
//-------------------------------------------------------------------------
/**
* @param gstring a gstring containing the sql query with embedded params
* @param values the values to embed
* @return the sql version of the given query using ? instead of any
*         parameter
*/
protected string assql gstring gstring  list values
string strings   gstring getstrings
if  strings length <  0
throw new illegalargumentexception     gstring
boolean nulls   false
stringbuffer buffer   new stringbuffer
boolean warned   false
iterator iter   values iterator
for  int i   0  i < strings length  i
string text   strings
if  text    null
buffer append text
if  iter hasnext
object value   iter next
if  value    null
if  value instanceof expandedvariable
buffer append   expandedvariable  value  getobject
iter remove
else
boolean validbinding   true
if  i < strings length   1
string nexttext   strings
if   text endswith
if   warned
log warning
buffer tostring         nexttext
warned   true
buffer append value
iter remove
validbinding   false
if  validbinding
buffer append
else
nulls   true
iter remove
buffer append  ?"      will replace these with nullish values
string sql   buffer tostring
if  nulls
sql   nullify sql
return sql
/**
* replace ?'"? references with nullish
*
* @param sql the sql statement
* @return the modified sql string
*/
protected string nullify string sql
/*
* some drivers (oracle classes12.zip) have difficulty resolving data
* type if setobject(null). we will modify the query to pass 'null', 'is
* null', and 'is not null'
*/
//could be more efficient by compiling expressions in advance.
int firstwhere   findwherekeyword sql
if  firstwhere >  0
pattern patterns    pattern compile     firstwhere      ?    "
pattern compile     firstwhere      ?    "
pattern compile     firstwhere      ?    "
string replacements
for  int i   0  i < patterns length  i
matcher matcher   patterns matcher sql
while  matcher matches
sql   matcher replaceall replacements
matcher   patterns matcher sql
return sql replaceall    ? null"
/**
* find the first 'where' keyword in the sql.
*
* @param sql the sql statement
* @return the index of the found keyword or -1 if not found
*/
protected int findwherekeyword string sql
char chars   sql tolowercase   tochararray
char wherechars     tochararray
int i   0
boolean instring   false    todo  cater for comments?
boolean nowhere   true
int inwhere   0
while  i < chars length    nowhere
switch  chars
case
instring    instring
break
default
if   instring    chars    wherechars
inwhere
if  inwhere    wherechars length
return i
i
return  1
/**
* @param gstring a gstring containing the sql query with embedded params
* @return extracts the parameters from the expression as a list
*/
protected list getparameters gstring gstring
return new arraylist arrays aslist gstring getvalues
/**
* appends the parameters to the given statement.
*
* @throws sqlexception if a database access error occurs
*/
protected void setparameters list params  preparedstatement statement  throws sqlexception
int i   1
for  iterator iter   params iterator    iter hasnext
object value   iter next
setobject statement  i    value
/**
* strategy method allowing derived classes to handle types differently
* such as for clobs etc.
*
* @throws sqlexception if a database access error occurs
*/
protected void setobject preparedstatement statement  int i  object value
throws sqlexception
if  value instanceof inparameter    value instanceof outparameter
if  value instanceof inparameter
inparameter in    inparameter  value
object val   in getvalue
if  null    val
statement setnull i  in gettype
else
statement setobject i  val  in gettype
if  value instanceof outparameter
try
outparameter out    outparameter  value
callablestatement  statement  registeroutparameter i  out gettype
catch  classcastexception e
throw new sqlexception
else
statement setobject i  value
protected connection createconnection   throws sqlexception
if  datasource    null
//use a doprivileged here as many different properties need to be
// read, and the policy
//shouldn't have to list them all.
connection con   null
try
con    connection  accesscontroller doprivileged new privilegedexceptionaction
public object run   throws sqlexception
return datasource getconnection
catch  privilegedactionexception pae
exception e   pae getexception
if  e instanceof sqlexception
throw  sqlexception  e
else
throw  runtimeexception  e
return con
else
return useconnection
protected void closeresources connection connection  statement statement  resultset results
if  results    null
try
results close
catch  sqlexception e
log log level severe      e  e
closeresources connection  statement
protected void closeresources connection connection  statement statement
if  statement    null
try
statement close
catch  sqlexception e
log log level severe      e  e
if  datasource    null
try
connection close
catch  sqlexception e
log log level severe      e  e
private void warndeprecated
if   warned
warned   true
log warning
/**
* provides a hook to be able to configure jdbc statements, such as to configure
*
* @param statement the statement to configure
*/
protected void configure statement statement
if  configurestatement    null
configurestatement call statement