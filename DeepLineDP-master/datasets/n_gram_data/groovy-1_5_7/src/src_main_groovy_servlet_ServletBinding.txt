/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy servlet
import groovy lang binding
import groovy xml markupbuilder
import java io ioexception
import java util enumeration
import java util hashmap
import java util map
import javax servlet servletcontext
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
/**
* servlet-specific binding extension to lazy load the writer or the output
* stream from the response.
*
* <p>
* <h3>default variables bound</h3>
* <ul>
* <li><tt>"request"</tt> : the httpservletrequest object</li>
* <li><tt>"response"</tt> : the httpservletresponse object</li>
* <li><tt>"context"</tt> : the servletcontext object </li>
* <li><tt>"application"</tt> : same as context</li>
* <li><tt>"session"</tt> : convenient for <code>request.getsession(<b>false</b>)</code> - can be null!</li>
* <li><tt>"params"</tt> : map of all form parameters - can be empty</li>
* <li><tt>"headers"</tt> : map of all <b>request</b> header fields</li>
* </ul>
*
* <p>
* <h3>implicite bound variables</h3>
* <ul>
* <li><tt>"out"</tt> : response.getwriter() </li>
* <li><tt>"sout"</tt> : response.getoutputstream() </li>
* <li><tt>"html"</tt> : new markupbuilder(response.getwriter()) </li>
* </ul>
* </p>
*
* @author guillaume laforge
* @author christian stein
*/
public class servletbinding extends binding
private final binding binding
private final servletcontext context
private final httpservletrequest request
private final httpservletresponse response
private markupbuilder html
/**
* initializes a servlet binding.
*/
public servletbinding httpservletrequest request  httpservletresponse response  servletcontext context
this binding   new binding
this request   request
this response   response
this context   context
/*
* bind the default variables.
*/
binding setvariable    request
binding setvariable    response
binding setvariable    context
binding setvariable    context
/*
* bind the http session object - if there is one.
* note: we don't create one here!
*/
binding setvariable    request getsession false
/*
* bind form parameter key-value hash map.
*
* if there are multiple, they are passed as an array.
*/
map params   new hashmap
for  enumeration names   request getparameternames    names hasmoreelements
string name    string  names nextelement
if   binding getvariables   containskey name
string values   request getparametervalues name
if  values length    1
params put name  values
else
params put name  values
binding setvariable    params
/*
* bind request header key-value hash map.
*/
map headers   new hashmap
for  enumeration names   request getheadernames    names hasmoreelements
string headername    string  names nextelement
string headervalue   request getheader headername
headers put headername  headervalue
binding setvariable    headers
public void setvariable string name  object value
/*
* check sanity.
*/
if  name    null
throw new illegalargumentexception
if  name length      0
throw new illegalargumentexception
/*
* check implicite key names. see getvariable(string)!
*/
if    equals name
throw new illegalargumentexception     name
if    equals name
throw new illegalargumentexception     name
if    equals name
throw new illegalargumentexception     name
/*
* todo check default key names. see constructor(s).
*/
/*
* all checks passed, set the variable.
*/
binding setvariable name  value
public map getvariables
return binding getvariables
/**
* @return a writer, an output stream, a markup builder or another requested object
*/
public object getvariable string name
/*
* check sanity.
*/
if  name    null
throw new illegalargumentexception
if  name length      0
throw new illegalargumentexception
/*
* check implicite key names. see setvariable(string, object)!
*/
try
if    equals name
return response getwriter
if    equals name
return response getoutputstream
if    equals name
if  html    null
html   new markupbuilder response getwriter
return html
catch  ioexception e
string message
context log message  e
throw new runtimeexception message  e
/*
* still here? delegate to the binding object.
*/
return binding getvariable name