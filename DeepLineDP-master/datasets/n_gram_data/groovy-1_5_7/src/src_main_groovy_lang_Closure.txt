/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy reflection cachedmethod
import org codehaus groovy reflection reflectioncache
import org codehaus groovy runtime curriedclosure
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime typehandling defaulttypetransformation
import java io ioexception
import java io stringwriter
import java io writer
/**
* represents any closure object in groovy.
* <p/>
* groovy allows instances of closures to be called in a
* short form. for example:
* <pre>
*   def a = 1
*   def c = {a}
*   assert c() == 1
* </pre>
* to be able to use a closure in this way with your own
* subclass, you need to provide a docall method with any
* signature you want to. this ensures that
* {@link #getmaximumnumberofparameters()} and
* {@link #getparametertypes()} will work too without any
* additional code. if no docall method is provided a
* closure must be used in its long form like
* <pre>
*   def a = 1
*   def c = {a}
*   assert c.call() == 1
* </pre>
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @author <a href="mailto:tug@wilson.co.uk">john wilson</a>
* @author <a href="mailto:blackdrag@gmx.org">jochen theodorou</a>
* @author graeme rocher
*
* @version $revision$
*/
public abstract class closure extends groovyobjectsupport implements cloneable  runnable
/**
* with this resolvestrategy set the closure will attempt to resolve property references to the
* owner first
*/
public static final int owner_first   0
/**
* with this resolvestrategy set the closure will attempt to resolve property references to the
* delegate first
*/
public static final int delegate_first   1
/**
* with this resolvestrategy set the closure will resolve property references to the owner only
* and not call the delegate at all
*/
public static final int owner_only   2
/**
* with this resolvestrategy set the closure will resolve property references to the delegate
* only and entirely bypass the owner
*/
public static final int delegate_only   3
/**
* with this resolvestrategy set the closure will resolve property references to itself and go
* through the usual metaclass look-up process. this allows the developer to override getproperty
* using expandometaclass of the closure itself
*/
public static final int to_self   4
private object delegate
private final object owner
protected class parametertypes
protected int maximumnumberofparameters
private final object thisobject
private int resolvestrategy   owner_first
private int directive
public static final int done   1  skip   2
private static final object empty_object_array
public closure object owner  object thisobject
this owner   owner
this delegate   owner
this thisobject   thisobject
final class clazz   this getclass
final cachedmethod methods   reflectioncache getcachedclass clazz  getmethods
// set it to -1 for starters so parametertypes will always get a type
maximumnumberofparameters    1
for  int j   0  j < methods length  j
if    equals methods getname
final class pt   methods getnativeparametertypes
if  pt length > maximumnumberofparameters
parametertypes   pt
maximumnumberofparameters   parametertypes length
// this line should be useless, but well, just in case
maximumnumberofparameters   math max maximumnumberofparameters 0
public closure object owner
this owner null
/**
* sets the strategy which the closure uses to resolve property references. the default is closure.owner_first
*
* @param resolvestrategy the resolve strategy to set
*
* @see groovy.lang.closure#delegate_first
* @see groovy.lang.closure#delegate_only
* @see groovy.lang.closure#owner_first
* @see groovy.lang.closure#owner_only
* @see groovy.lang.closure#to_self
*/
public void setresolvestrategy int resolvestrategy
this resolvestrategy   resolvestrategy
/**
* gets the strategy which the closure users to resolve methods and properties
*
* @return the resolve strategy
*
* @see groovy.lang.closure#delegate_first
* @see groovy.lang.closure#delegate_only
* @see groovy.lang.closure#owner_first
* @see groovy.lang.closure#owner_only
* @see groovy.lang.closure#to_self
*/
public int getresolvestrategy
return resolvestrategy
public object getthisobject
return thisobject
public object getproperty final string property
if    equals property
return getdelegate
else if    equals property
return getowner
else if    equals property
return new integer getmaximumnumberofparameters
else if    equals property
return getparametertypes
else if    equals property
return getmetaclass
else if    equals property
return getclass
else if    equals property
return new integer getdirective
else
switch resolvestrategy
case delegate_first
return getpropertydelegatefirst property
case delegate_only
return invokerhelper getproperty this delegate  property
case owner_only
return invokerhelper getproperty this owner  property
case to_self
return super getproperty property
default
return getpropertyownerfirst property
private object getpropertydelegatefirst string property
if delegate    null  return getpropertyownerfirst property
return getpropertytrythese property  this delegate  this owner
private object getpropertytrythese string property  object firsttry  object secondtry
try
// lets try getting the property on the owner
return invokerhelper getproperty firsttry  property
catch  missingpropertyexception e1
if  secondtry    null    firsttry    this    firsttry    secondtry
try
// lets try getting the property on the delegate
return invokerhelper getproperty secondtry  property
catch  groovyruntimeexception e2
// ignore, we'll throw e1
throw e1
private object getpropertyownerfirst string property
return getpropertytrythese property  this owner  this delegate
public void setproperty string property  object newvalue
if    equals property
setdelegate newvalue
else if    equals property
setmetaclass  metaclass  newvalue
else if    equals property
setresolvestrategy   number newvalue  intvalue
else
switch resolvestrategy
case delegate_first
setpropertydelegatefirst property  newvalue
break
case delegate_only
invokerhelper setproperty this delegate  property  newvalue
break
case owner_only
invokerhelper setproperty this owner  property  newvalue
break
case to_self
super setproperty property  newvalue
break
default
setpropertyownerfirst property  newvalue
private void setpropertydelegatefirst string property  object newvalue
if delegate    null  setpropertyownerfirst property  newvalue
else
setpropertytrythese property  newvalue  this delegate  this owner
private void setpropertytrythese string property  object newvalue  object firsttry  object secondtry
try
// lets try setting the property on the owner
invokerhelper setproperty firsttry  property  newvalue
catch  groovyruntimeexception e1
if  firsttry    null    firsttry    this    firsttry    secondtry
try
// lets try setting the property on the delegate
invokerhelper setproperty secondtry  property  newvalue
return
catch  groovyruntimeexception e2
// ignore, we'll throw e1
throw e1
private void setpropertyownerfirst string property  object newvalue
setpropertytrythese property  newvalue  this owner  this delegate
public boolean iscase object candidate
return defaulttypetransformation casttoboolean call candidate
/**
* invokes the closure without any parameters, returning any value if applicable.
*
* @return the value if applicable or null if there is no return statement in the closure
*/
public object call
final object noargs   empty_object_array
return call noargs
public object call object args
try
return getmetaclass   invokemethod this   args
catch  exception e
return throwruntimeexception e
/**
* invokes the closure, returning any value if applicable.
*
* @param arguments could be a single value or a list of values
* @return the value if applicable or null if there is no return statement in the closure
*/
public object call final object arguments
return call new object arguments
protected static object throwruntimeexception throwable throwable
if  throwable instanceof runtimeexception
throw  runtimeexception  throwable
else
throw new groovyruntimeexception throwable getmessage    throwable
/**
* @return the owner object to which method calls will go which is
*         typically the outer class when the closure is constructed
*/
public object getowner
return this owner
/**
* @return the delegate object to which method calls will go which is
*         typically the outer class when the closure is constructed
*/
public object getdelegate
return this delegate
/**
* allows the delegate to be changed such as when performing markup building
*
* @param delegate the new delegate
*/
public void setdelegate object delegate
this delegate   delegate
/**
* @return the parameter types of the longest docall method
* of this closure
*/
public class getparametertypes
return this parametertypes
/**
* @return the maximum number of parameters a docall methos
* of this closure can take
*/
public int getmaximumnumberofparameters
return this maximumnumberofparameters
/**
* @return a version of this closure which implements writable
*/
public closure aswritable
return new writableclosure
/* (non-javadoc)
* @see java.lang.runnable#run()
*/
public void run
call
/**
* support for closure currying
*
* @param arguments the arguments to bind
* @return the new closure with its arguments bound
*/
public closure curry final object arguments
return new curriedclosure this arguments
/* (non-javadoc)
* @see java.lang.object#clone()
*/
public object clone
try
return super clone
catch  final clonenotsupportedexception e
return null
/**
* implementation note:
*   this has to be an inner class!
*
* reason:
*   closure.this.call will call the outer call method, but
* with the inner class as executing object. this means any
* invokemethod or getproperty call will be called on this
* inner class instead of the outer!
*/
private class writableclosure extends closure implements writable
public writableclosure
super closure this
/* (non-javadoc)
* @see groovy.lang.writable#writeto(java.io.writer)
*/
public writer writeto writer out  throws ioexception
closure this call new object out
return out
/* (non-javadoc)
* @see groovy.lang.groovyobject#invokemethod(java.lang.string, java.lang.object)
*/
public object invokemethod string method  object arguments
if    equals method
return clone
else if    equals method
return curry  object  arguments
else if    equals method
return aswritable
else
return closure this invokemethod method  arguments
/* (non-javadoc)
* @see groovy.lang.groovyobject#getproperty(java.lang.string)
*/
public object getproperty string property
return closure this getproperty property
/* (non-javadoc)
* @see groovy.lang.groovyobject#setproperty(java.lang.string, java.lang.object)
*/
public void setproperty string property  object newvalue
closure this setproperty property  newvalue
/* (non-javadoc)
* @see groovy.lang.closure#call()
*/
public object call
return   closure  getowner    call
/* (non-javadoc)
* @see groovy.lang.closure#call(java.lang.object)
*/
public object call object arguments
return   closure  getowner    call arguments
public object call object args
return   closure  getowner    call args
public object docall object args
return call args
/* (non-javadoc)
* @see groovy.lang.closure#getdelegate()
*/
public object getdelegate
return closure this getdelegate
/* (non-javadoc)
* @see groovy.lang.closure#setdelegate(java.lang.object)
*/
public void setdelegate object delegate
closure this setdelegate delegate
/* (non-javadoc)
* @see groovy.lang.closure#getparametertypes()
*/
public class getparametertypes
return closure this getparametertypes
/* (non-javadoc)
* @see groovy.lang.closure#getparametertypes()
*/
public int getmaximumnumberofparameters
return closure this getmaximumnumberofparameters
/* (non-javadoc)
* @see groovy.lang.closure#aswritable()
*/
public closure aswritable
return this
/* (non-javadoc)
* @see java.lang.runnable#run()
*/
public void run
closure this run
/* (non-javadoc)
* @see java.lang.object#clone()
*/
public object clone
return   closure  closure this clone    aswritable
/* (non-javadoc)
* @see java.lang.object#hashcode()
*/
public int hashcode
return closure this hashcode
/* (non-javadoc)
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object arg0
return closure this equals arg0
/* (non-javadoc)
* @see java.lang.object#tostring()
*/
public string tostring
final stringwriter writer   new stringwriter
try
writeto writer
catch  ioexception e
return null
return writer tostring
public closure curry final object arguments
return  new curriedclosure this arguments   aswritable
public void setresolvestrategy int resolvestrategy
closure this setresolvestrategy resolvestrategy
public int getresolvestrategy
return closure this getresolvestrategy
/**
* @return returns the directive.
*/
public int getdirective
return directive
/**
* @param directive the directive to set.
*/
public void setdirective int directive
this directive   directive