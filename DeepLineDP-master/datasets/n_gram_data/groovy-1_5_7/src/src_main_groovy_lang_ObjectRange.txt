/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import org codehaus groovy runtime invokerhelper
import org codehaus groovy runtime iteratorclosureadapter
import org codehaus groovy runtime scriptbytecodeadapter
import org codehaus groovy runtime defaultgroovymethods
import org codehaus groovy runtime typehandling defaulttypetransformation
import java math bigdecimal
import java math biginteger
import java util abstractlist
import java util iterator
import java util list
/**
* represents an inclusive list of objects from a value to a value using
* comparators.
* <p/>
* this class is similar to {@link intrange}. if you make any changes to this
* class, you might consider making parallel changes to {@link intrange}.
*
* @author <a href="mailto:james@coredevelopers.net">james strachan</a>
* @version $revision$
*/
public class objectrange extends abstractlist implements range
/**
* the first value in the range.
*/
private comparable from
/**
* the last value in the range.
*/
private comparable to
/**
* the cached size, or -1 if not yet computed
*/
private int size    1
/**
* <code>true</code> if the range counts backwards from <code>to</code> to <code>from</code>.
*/
private final boolean reverse
/**
* creates a new {@link objectrange}. creates a reversed range if
* <code>from</code> < <code>to</code>.
*
* @param from the first value in the range.
* @param to   the last value in the range.
*/
public objectrange comparable from  comparable to
if  from    null
throw new illegalargumentexception
if  to    null
throw new illegalargumentexception
this reverse   scriptbytecodeadapter comparegreaterthan from  to
if  this reverse
constructorhelper to  from
else
constructorhelper from  to
public objectrange comparable from  comparable to  boolean reverse
constructorhelper from  to
this reverse   reverse
private void constructorhelper comparable from  comparable to
if  from instanceof short
from   new integer   short  from  intvalue
else if  from instanceof float
from   new double   float  from  doublevalue
if  to instanceof short
to   new integer   short  to  intvalue
else if  to instanceof float
to   new double   float  to  doublevalue
// todo: should we align to like types?
//        if (from instanceof integer && to instanceof long) {
//            from = long.valueof(((integer) from).longvalue());
//        } else if (to instanceof integer && from instanceof long) {
//            to = long.valueof(((integer) to).longvalue());
//        }
// todo: should we care about different types here?
if  from getclass      to getclass
this from   from
this to   to
else
this from   normalisestringtype from
this to   normalisestringtype to
if  from instanceof string    to instanceof string
// this test depends deeply on the string.next implementation
// 009.next is 00:, not 010
string start   from tostring
string end   to tostring
if  start length   > end length
throw new illegalargumentexception
int length   math min start length    end length
int i
for  i   0  i < length  i
if  start charat i     end charat i   break
if  i < length   1
throw new illegalargumentexception
/**
* {@inheritdoc}
*/
public boolean equals object that
return  that instanceof objectrange  ? equals  objectrange  that    super equals that
/**
* compares an {@link objectrange} to another {@link objectrange}.
*
* @param that the object to check equality with
* @return <code>true</code> if the ranges are equal
*/
public boolean equals objectrange that
return that    null
this reverse    that reverse
defaulttypetransformation compareequal this from  that from
defaulttypetransformation compareequal this to  that to
/**
* {@inheritdoc}
*/
public comparable getfrom
return from
/**
* {@inheritdoc}
*/
public comparable getto
return to
/**
* {@inheritdoc}
*/
public boolean isreverse
return reverse
/**
* {@inheritdoc}
*/
public object get int index
if  index < 0
throw new indexoutofboundsexception     index
if  index >  size
throw new indexoutofboundsexception     index       this
object value
if  reverse
value   to
for  int i   0  i < index  i
value   decrement value
else
value   from
for  int i   0  i < index  i
value   increment value
return value
/**
* {@inheritdoc}
*/
public iterator iterator
return new iterator
private int index
private object value   reverse ? to   from
public boolean hasnext
return index < size
public object next
if  index   > 0
if  index > size
value   null
else
if  reverse
value   decrement value
else
value   increment value
return value
public void remove
objectrange this remove index
/**
* checks whether a value is between the from and to values of a range
*
* @param value the value of interest
* @return true if the value is within the bounds
*/
public boolean containswithinbounds object value
if  value instanceof comparable
int result   compareto from   comparable  value
return result    0    result < 0    compareto to   comparable  value  >  0
return contains value
private int compareto comparable first  comparable second
return defaultgroovymethods numberawarecompareto first  second
/**
* {@inheritdoc}
*/
public int size
if  size     1
if   from instanceof integer    from instanceof long
to instanceof integer    to instanceof long
// let's fast calculate the size
long fromnum     number  from  longvalue
long tonum     number  to  longvalue
size    int  tonum   fromnum   1
else if  from instanceof character    to instanceof character
// let's fast calculate the size
char fromnum     character  from  charvalue
char tonum     character  to  charvalue
size   tonum   fromnum   1
else if  from instanceof bigdecimal    to instanceof bigdecimal
// let's fast calculate the size
bigdecimal fromnum   new bigdecimal     from
bigdecimal tonum   new bigdecimal     to
biginteger sizenum   tonum subtract fromnum  add new bigdecimal 1 0   tobiginteger
size   sizenum intvalue
else
// let's lazily calculate the size
size   0
comparable first   from
comparable value   from
while  compareto to  value  >  0
value    comparable  increment value
size
if  compareto first  value  >  0  break     handle back to beginning due to modulo incrementing
return size
/**
* {@inheritdoc}
*/
public list sublist int fromindex  int toindex
if  fromindex < 0
throw new indexoutofboundsexception     fromindex
if  toindex > size
throw new indexoutofboundsexception     toindex
if  fromindex > toindex
throw new illegalargumentexception     fromindex       toindex
if  fromindex    toindex
return new emptyrange from
return new objectrange  comparable  get fromindex    comparable  get   toindex   reverse
/**
* {@inheritdoc}
*/
public string tostring
return reverse ?     to       from       from       to
/**
* {@inheritdoc}
*/
public string inspect
string totext   invokerhelper inspect to
string fromtext   invokerhelper inspect from
return reverse ?     totext       fromtext       fromtext       totext
public boolean contains object value
iterator it   iterator
if  value    null  return false
while  it hasnext
try
if  defaulttypetransformation compareequal value  it next     return true
catch  classcastexception e
return false
return false
/**
* {@inheritdoc}
*/
public void step int step  closure closure
if  reverse
step    step
if  step >  0
comparable first   from
comparable value   from
while  compareto value  to  <  0
closure call value
for  int i   0  i < step  i
value    comparable  increment value
if  compareto value  first  <  0  return
else
step    step
comparable first   to
comparable value   to
while  compareto value  from  >  0
closure call value
for  int i   0  i < step  i
value    comparable  decrement value
if  compareto value  first  >  0  return
/**
* {@inheritdoc}
*/
public list step int step
iteratorclosureadapter adapter   new iteratorclosureadapter this
step step  adapter
return adapter aslist
/**
* increments by one
*
* @param value the value to increment
* @return the incremented value
*/
protected object increment object value
return invokerhelper invokemethod value     null
/**
* decrements by one
*
* @param value the value to decrement
* @return the decremented value
*/
protected object decrement object value
return invokerhelper invokemethod value     null
private static comparable normalisestringtype final comparable operand
if  operand instanceof character
return new integer   character  operand  charvalue
else if  operand instanceof string
final string string    string  operand
if  string length      1
return new integer string charat 0
else
return string
else
return operand