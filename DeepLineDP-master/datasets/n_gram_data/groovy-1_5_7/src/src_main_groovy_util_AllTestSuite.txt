/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy util
import groovy lang groovyclassloader
import groovy lang script
import junit framework test
import junit framework testsuite
import org codehaus groovy control compilationfailedexception
import org codehaus groovy runtime scripttestadapter
import java io file
import java io ioexception
import java util collection
import java util iterator
import java util logging logger
/**
* alltestsuite can be used in extension of groovytestsuite to execute testcases written in groovy
* from inside a java ide.
* alltestsuite collects all files below a given directory that comply to a given pattern.
* from these files, a testsuite is constructed that can be run via an ide graphical test runner.
* the files are assumed to be groovy source files and be either a testcase or a script that can
* be wrapped transparently into a testcase.
* the directory and the pattern can be set via system properties (see this classes' constants for details.)
*
* when setting the loglevel of this class to finest, all file loading will be logged.
*
* see also groovy.util.alltestsuitetest.groovy
* @author dierk koenig based on a prototype by andrew glover
* @author paul king
* todo: dk: make filenamefinder injectable
*/
public class alltestsuite extends testsuite
/** the system property to set as base directory for collection of test cases.
* the pattern will be used as an ant fileset include basedir.
* key is "groovy.test.dir".
* default value is "./test/".
*/
public static final string sysprop_test_dir
/** the system property to set as the filename pattern for collection of test cases.
* the pattern will be used as regular expression pattern applied with the find
* operator against each candidate file.path.
* key is "groovy.test.pattern".
* default value is "test.groovy".
*/
public static final string sysprop_test_pattern
/** the system property to set as a filename excludes pattern for collection of test cases.
* when non-empty, the pattern will be used as regular expression pattern applied with the
* find operator against each candidate file.path.
* key is "groovy.test.excludespattern".
* default value is "".
*/
public static final string sysprop_test_excludes_pattern
private static final logger log   logger getlogger alltestsuite class getname
private static final classloader java_loader   alltestsuite class getclassloader
private static final groovyclassloader groovy_loader   new groovyclassloader java_loader
private static final string empty_args   new string
private static ifilenamefinder finder   null
static      this is only needed since the groovy build compiles   groovy files after   java files
try
class finderclass   class forname
finder    ifilenamefinder  finderclass newinstance
catch  exception e
throw new runtimeexception    e
public static test suite
string basedir   system getproperty sysprop_test_dir
string pattern   system getproperty sysprop_test_pattern
string excludespattern   system getproperty sysprop_test_excludes_pattern
return suite basedir  pattern
public static test suite string basedir  string pattern
return suite basedir  pattern
public static test suite string basedir  string pattern  string excludespattern
alltestsuite suite   new alltestsuite
string filename
try
collection filenames   excludespattern length   > 0
? finder getfilenames basedir  pattern  excludespattern
finder getfilenames basedir  pattern
for  iterator iter   filenames iterator    iter hasnext
filename    string  iter next
log finest    filename
suite loadtest filename
catch  compilationfailedexception e1
e1 printstacktrace
throw new runtimeexception   filename  e1
catch  ioexception e2
throw new runtimeexception   filename  e2
return suite
protected void loadtest string filename  throws compilationfailedexception  ioexception
class type   compile filename
if   test class isassignablefrom type     script class isassignablefrom type
addtest new scripttestadapter type  empty_args
else
addtestsuite type
protected class compile string filename  throws compilationfailedexception  ioexception
return groovy_loader parseclass new file filename