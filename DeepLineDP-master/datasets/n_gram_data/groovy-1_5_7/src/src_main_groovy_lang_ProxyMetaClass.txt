/*
* copyright 2003-2007 the original author or authors.
*
* licensed under the apache license, version 2.0 (the "license");
* you may not use this file except in compliance with the license.
* you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package groovy lang
import java beans introspectionexception
/**
* as subclass of metaclass, proxymetaclass manages calls from groovy objects to pojos.
* it enriches metaclass with the feature of making method invokations interceptable by
* an interceptor. to this end, it acts as a decorator (decorator pattern) allowing
* to add or withdraw this feature at runtime.
* see groovy/lang/interceptortest.groovy for details.
* <p/>
* <p>warning: this implementation of proxymetaclass is not threadsafe and hence should only be used for
* as a per-instance metaclass running in a single thread. do not place this metaclass in the metaclassregistry
* as it will result in unpredictable behaviour
*
* @author dierk koenig
* @author graeme rocher
* @see groovy.lang.metaclassregistry
*/
public class proxymetaclass extends metaclassimpl implements adaptingmetaclass
protected metaclass adaptee   null
protected interceptor interceptor   null
/**
* convenience factory method for the most usual case.
*/
public static proxymetaclass getinstance class theclass  throws introspectionexception
metaclassregistry metaregistry   groovysystem getmetaclassregistry
metaclass meta   metaregistry getmetaclass theclass
return new proxymetaclass metaregistry  theclass  meta
/**
* @param adaptee the metaclass to decorate with interceptability
*/
public proxymetaclass metaclassregistry registry  class theclass  metaclass adaptee  throws introspectionexception
super registry  theclass
this adaptee   adaptee
if  null    adaptee  throw new illegalargumentexception
super initialize
public synchronized void initialize
this adaptee initialize
/**
* use the proxymetaclass for the given closure.
* cares for balanced register/unregister.
*
* @param closure piece of code to be executed with registered proxymetaclass
*/
public void use closure closure
// grab existing meta (usually adaptee but we may have nested use calls)
metaclass origmetaclass   registry getmetaclass theclass
registry setmetaclass theclass  this
try
closure call
finally
registry setmetaclass theclass  origmetaclass
/**
* use the proxymetaclass for the given closure.
* cares for balanced setting/unsetting proxymetaclass.
*
* @param closure piece of code to be executed with proxymetaclass
*/
public void use groovyobject object  closure closure
// grab existing meta (usually adaptee but we may have nested use calls)
metaclass origmetaclass   object getmetaclass
object setmetaclass this
try
closure call
finally
object setmetaclass origmetaclass
/**
* @return the interceptor in use or null if no interceptor is used
*/
public interceptor getinterceptor
return interceptor
/**
* @param interceptor may be null to reset any interception
*/
public void setinterceptor interceptor interceptor
this interceptor   interceptor
/**
* call invokemethod on adaptee with logic like in metaclass unless we have an interceptor.
* with interceptor the call is nested in its beforeinvoke and afterinvoke methods.
* the method call is suppressed if interceptor.doinvoke() returns false.
* see interceptor for details.
*/
public object invokemethod final object object  final string methodname  final object arguments
return docall object  methodname  arguments  interceptor  new callable
public object call
return adaptee invokemethod object  methodname  arguments
/**
* call invokestaticmethod on adaptee with logic like in metaclass unless we have an interceptor.
* with interceptor the call is nested in its beforeinvoke and afterinvoke methods.
* the method call is suppressed if interceptor.doinvoke() returns false.
* see interceptor for details.
*/
public object invokestaticmethod final object object  final string methodname  final object arguments
return docall object  methodname  arguments  interceptor  new callable
public object call
return adaptee invokestaticmethod object  methodname  arguments
/**
* call invokeconstructor on adaptee with logic like in metaclass unless we have an interceptor.
* with interceptor the call is nested in its beforeinvoke and afterinvoke methods.
* the method call is suppressed if interceptor.doinvoke() returns false.
* see interceptor for details.
*/
public object invokeconstructor final object arguments
return docall theclass     arguments  interceptor  new callable
public object call
return adaptee invokeconstructor arguments
/**
* interceptors the call to getproperty if a propertyaccessinterceptor is
* available
*
* @param object   the object to invoke the getter on
* @param property the property name
* @return the value of the property
*/
public object getproperty class aclass  object object  string property  boolean b  boolean b1
if  null    interceptor
return super getproperty aclass  object  property  b  b1
if  interceptor instanceof propertyaccessinterceptor
propertyaccessinterceptor pae    propertyaccessinterceptor  interceptor
object result   pae beforeget object  property
if  interceptor doinvoke
result   super getproperty aclass  object  property  b  b1
return result
return super getproperty aclass  object  property  b  b1
/**
* interceptors the call to a property setter if a propertyaccessinterceptor
* is available
*
* @param object   the object to invoke the setter on
* @param property the property name to set
* @param newvalue the new value of the property
*/
public void setproperty class aclass  object object  string property  object newvalue  boolean b  boolean b1
if  null    interceptor
super setproperty aclass  object  property  newvalue  b  b1
if  interceptor instanceof propertyaccessinterceptor
propertyaccessinterceptor pae    propertyaccessinterceptor  interceptor
pae beforeset object  property  newvalue
if  interceptor doinvoke
super setproperty aclass  object  property  newvalue  b  b1
else
super setproperty aclass  object  property  newvalue  b  b1
public metaclass getadaptee
return this adaptee
public void setadaptee metaclass metaclass
this adaptee   metaclass
// since java has no closures...
private interface callable
object call
private object docall object object  string methodname  object arguments  interceptor interceptor  callable howtoinvoke
if  null    interceptor
return howtoinvoke call
object result   interceptor beforeinvoke object  methodname  arguments
if  interceptor doinvoke
result   howtoinvoke call
result   interceptor afterinvoke object  methodname  arguments  result
return result