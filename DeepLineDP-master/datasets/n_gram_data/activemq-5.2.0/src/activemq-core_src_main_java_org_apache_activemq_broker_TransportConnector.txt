/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq broker
import java io ioexception
import java net uri
import java net urisyntaxexception
import java util iterator
import java util concurrent copyonwritearraylist
import javax management mbeanserver
import javax management objectname
import org apache activemq broker jmx managedtransportconnector
import org apache activemq broker region connectorstatistics
import org apache activemq command brokerinfo
import org apache activemq security messageauthorizationpolicy
import org apache activemq thread taskrunnerfactory
import org apache activemq transport transport
import org apache activemq transport transportacceptlistener
import org apache activemq transport transportfactory
import org apache activemq transport transportserver
import org apache activemq transport discovery discoveryagent
import org apache activemq transport discovery discoveryagentfactory
import org apache activemq util servicestopper
import org apache activemq util servicesupport
import org apache commons logging log
import org apache commons logging logfactory
/**
* @org.apache.xbean.xbean
* @version $revision: 1.6 $
*/
public class transportconnector implements connector  brokerserviceaware
private static final log log   logfactory getlog transportconnector class
protected copyonwritearraylist<transportconnection> connections   new copyonwritearraylist<transportconnection>
protected transportstatusdetector statusdector
private brokerservice brokerservice
private transportserver server
private uri uri
private brokerinfo brokerinfo   new brokerinfo
private taskrunnerfactory taskrunnerfactory
private messageauthorizationpolicy messageauthorizationpolicy
private discoveryagent discoveryagent
private connectorstatistics statistics   new connectorstatistics
private uri discoveryuri
private uri connecturi
private string name
private boolean disableasyncdispatch
private boolean enablestatusmonitor   false
private broker broker
public transportconnector
public transportconnector transportserver server
this
setserver server
if  server    null    server getconnecturi      null
uri uri   server getconnecturi
if  uri    null    uri getscheme   equals
setenablestatusmonitor false
/**
* @return returns the connections.
*/
public copyonwritearraylist<transportconnection> getconnections
return connections
/**
* factory method to create a jmx managed version of this transport
* connector
*/
public managedtransportconnector asmanagedconnector mbeanserver mbeanserver  objectname connectorname  throws ioexception  urisyntaxexception
managedtransportconnector rc   new managedtransportconnector mbeanserver  connectorname  getserver
rc setbrokerinfo getbrokerinfo
rc setconnecturi getconnecturi
rc setdisableasyncdispatch isdisableasyncdispatch
rc setdiscoveryagent getdiscoveryagent
rc setdiscoveryuri getdiscoveryuri
rc setenablestatusmonitor isenablestatusmonitor
rc setmessageauthorizationpolicy getmessageauthorizationpolicy
rc setname getname
rc settaskrunnerfactory gettaskrunnerfactory
rc seturi geturi
rc setbrokerservice brokerservice
return rc
public brokerinfo getbrokerinfo
return brokerinfo
public void setbrokerinfo brokerinfo brokerinfo
this brokerinfo   brokerinfo
/**
*
* @deprecated use the {@link #setbrokerservice(brokerservice)} method instead.
*/
@deprecated
public void setbrokername string name
if  this brokerinfo  null
this brokerinfo new brokerinfo
this brokerinfo setbrokername name
public transportserver getserver   throws ioexception  urisyntaxexception
if  server    null
setserver createtransportserver
return server
public void setserver transportserver server
this server   server
public uri geturi
if  uri    null
try
uri   getconnecturi
catch  throwable e
return uri
/**
* sets the server transport uri to use if there is not a
* {@link transportserver} configured via the
* {@link #setserver(transportserver)} method. this value is used to lazy
* create a {@link transportserver} instance
*
* @param uri
*/
public void seturi uri uri
this uri   uri
public taskrunnerfactory gettaskrunnerfactory
return taskrunnerfactory
public void settaskrunnerfactory taskrunnerfactory taskrunnerfactory
this taskrunnerfactory   taskrunnerfactory
/**
* @return the statistics for this connector
*/
public connectorstatistics getstatistics
return statistics
public messageauthorizationpolicy getmessageauthorizationpolicy
return messageauthorizationpolicy
/**
* sets the policy used to decide if the current connection is authorized to
* consume a given message
*/
public void setmessageauthorizationpolicy messageauthorizationpolicy messageauthorizationpolicy
this messageauthorizationpolicy   messageauthorizationpolicy
public void start   throws exception
transportserver server   getserver
broker   brokerservice getbroker
brokerinfo setbrokername broker getbrokername
brokerinfo setbrokerid broker getbrokerid
brokerinfo setpeerbrokerinfos broker getpeerbrokerinfos
brokerinfo setfaulttolerantconfiguration broker isfaulttolerantconfiguration
brokerinfo setbrokerurl server getconnecturi   tostring
server setacceptlistener new transportacceptlistener
public void onaccept final transport transport
try
// starting the connection could block due to
// wireformat negotiation, so start it in an async thread.
thread startthread   new thread     transport getremoteaddress
public void run
try
connection connection   createconnection transport
connection start
catch  exception e
servicesupport dispose transport
onaccepterror e
startthread setpriority 4
startthread start
catch  exception e
string remotehost   transport getremoteaddress
servicesupport dispose transport
onaccepterror e  remotehost
public void onaccepterror exception error
onaccepterror error  null
private void onaccepterror exception error  string remotehost
log error      remotehost    null ?         remotehost        error getmessage
log debug     error getmessage    error
server setbrokerinfo brokerinfo
server start
discoveryagent da   getdiscoveryagent
if  da    null
da registerservice getconnecturi   tostring
da start
if  enablestatusmonitor
this statusdector   new transportstatusdetector this
this statusdector start
log info     getname
public void stop   throws exception
servicestopper ss   new servicestopper
if  discoveryagent    null
ss stop discoveryagent
if  server    null
ss stop server
server   null
if  this statusdector    null
this statusdector stop
for  iterator<transportconnection> iter   connections iterator    iter hasnext
transportconnection c   iter next
ss stop c
ss throwfirstexception
log info     getname
// implementation methods
// -------------------------------------------------------------------------
protected connection createconnection transport transport  throws ioexception
transportconnection answer   new transportconnection this  transport  broker  disableasyncdispatch ? null   taskrunnerfactory
boolean statenabled   this getstatistics   isenabled
answer getstatistics   setenabled statenabled
answer setmessageauthorizationpolicy messageauthorizationpolicy
return answer
protected transportserver createtransportserver   throws ioexception  urisyntaxexception
if  uri    null
throw new illegalargumentexception
if  brokerservice    null
throw new illegalargumentexception
return transportfactory bind brokerservice  uri
public discoveryagent getdiscoveryagent   throws ioexception
if  discoveryagent    null
discoveryagent   creatediscoveryagent
return discoveryagent
protected discoveryagent creatediscoveryagent   throws ioexception
if  discoveryuri    null
return discoveryagentfactory creatediscoveryagent discoveryuri
return null
public void setdiscoveryagent discoveryagent discoveryagent
this discoveryagent   discoveryagent
public uri getdiscoveryuri
return discoveryuri
public void setdiscoveryuri uri discoveryuri
this discoveryuri   discoveryuri
public uri getconnecturi   throws ioexception  urisyntaxexception
if  connecturi    null
if  server    null
connecturi   server getconnecturi
return connecturi
public void setconnecturi uri transporturi
this connecturi   transporturi
public void onstarted transportconnection connection
connections add connection
public void onstopped transportconnection connection
connections remove connection
public string getname
if  name    null
uri   geturi
if  uri    null
name   uri tostring
return name
public void setname string name
this name   name
public string tostring
string rc   getname
if  rc    null
rc   super tostring
return rc
public boolean isdisableasyncdispatch
return disableasyncdispatch
public void setdisableasyncdispatch boolean disableasyncdispatch
this disableasyncdispatch   disableasyncdispatch
/**
* @return the enablestatusmonitor
*/
public boolean isenablestatusmonitor
return enablestatusmonitor
/**
* @param enablestatusmonitor the enablestatusmonitor to set
*/
public void setenablestatusmonitor boolean enablestatusmonitor
this enablestatusmonitor   enablestatusmonitor
/**
* this is called by the brokerservice right before it starts the transport.
*/
public void setbrokerservice brokerservice brokerservice
this brokerservice   brokerservice
public broker getbroker
return broker
public brokerservice getbrokerservice
return brokerservice