/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java net uri
import java util hashtable
import java util map
import java util random
import java util concurrent concurrenthashmap
import javax naming communicationexception
import javax naming context
import javax naming namingenumeration
import javax naming directory attributes
import javax naming directory dircontext
import javax naming directory initialdircontext
import javax naming directory searchcontrols
import javax naming directory searchresult
import javax naming event eventdircontext
import javax naming event namespacechangelistener
import javax naming event namingevent
import javax naming event namingexceptionevent
import javax naming event objectchangelistener
import org apache activemq util urisupport
import org apache activemq util urisupport compositedata
import org apache commons logging log
import org apache commons logging logfactory
/**
* class to create dynamic network connectors listed in an directory
* server using the ldap v3 protocol as defined in rfc 2251, the
* entries listed in the directory server must implement the iphost
* and ipservice objectclasses as defined in rfc 2307.
*
* @author trevor pounds
* @see <a href="http://www.faqs.org/rfcs/rfc2251.html">rfc 2251</a>
* @see <a href="http://www.faqs.org/rfcs/rfc2307.html">rfc 2307</a>
*
* @org.apache.xbean.xbean element="ldapnetworkconnector"
*/
public class      ldapnetworkconnector
extends    networkconnector
implements namespacechangelistener
objectchangelistener
private static final log log   logfactory getlog ldapnetworkconnector class
// force returned entries to implement the iphost and ipservice object classes (rfc 2307)
private static final string required_object_class_filter
// connection
private uri   availableuris        null
private int     availableurisindex   0
private string  base                 null
private boolean failover             false
private long    curreconnectdelay    1000      1 sec
private long    maxreconnectdelay    30000     30 sec
// authentication
private string  user                      null
private string  password                  null
private boolean anonymousauthentication   false
// search
private searchcontrols searchcontrols        new searchcontrols    onelevel_scope
private string         searchfilter          required_object_class_filter
private boolean        searcheventlistener   false
// connector management
private map<uri  networkconnector> connectormap   new concurrenthashmap
private map<uri  integer>          referencemap   new concurrenthashmap
private map<string  uri>           uuidmap        new concurrenthashmap
// local context
private dircontext context   null
//currently in use uri
private uri ldapuri   null
/**
* returns the next uri from the configured list
*
* @return random uri from the configured list
*/
public uri geturi
return availableuris
/**
* sets the ldap server uri
*
* @param _uri ldap server uri
*/
public void seturi uri _uri
throws exception
compositedata data   urisupport parsecomposite _uri
if data getscheme   equals
availableuris   data getcomponents
failover   true
else
availableuris   new uri  _uri
/**
* sets the base ldap dn used for lookup operations
*
* @param _base ldap base dn
*/
public void setbase string _base
base   _base
/**
* sets the ldap user for access credentials
*
* @param _user ldap dn of user
*/
public void setuser string _user
user   _user
/**
* sets the ldap password for access credentials
*
* @param _password user password
*/
public void setpassword string _password
password   _password
/**
* sets ldap anonymous authentication access credentials
*
* @param _anonymousauthentication set to true to use anonymous authentication
*/
public void setanonymousauthentication boolean _anonymousauthentication
anonymousauthentication   _anonymousauthentication
/**
* sets the ldap search scope
*
* @param _searchscope ldap jndi search scope
*/
public void setsearchscope string _searchscope
throws exception
int scope
if _searchscope equals
scope   searchcontrols object_scope
else if _searchscope equals
scope   searchcontrols onelevel_scope
else if _searchscope equals
scope   searchcontrols subtree_scope
else
throw new exception     _searchscope
searchcontrols setsearchscope scope
/**
* sets the ldap search filter as defined in rfc 2254
*
* @param _searchfilter ldap search filter
* @see <a href="http://www.faqs.org/rfcs/rfc2254.html">rfc 2254</a>
*/
public void setsearchfilter string _searchfilter
searchfilter       required_object_class_filter       _searchfilter
/**
* enables/disable a persistent search to the ldap server as defined
* in draft-ietf-ldapext-psearch-03.txt (2.16.840.1.113730.3.4.3)
*
* @param _searcheventlistener enable = true, disable = false (default)
* @see <a href="http://www.ietf.org/proceedings/01mar/i-d/draft-ietf-ldapext-psearch-03.txt">draft-ietf-ldapext-psearch-03.txt</a>
*/
public void setsearcheventlistener boolean _searcheventlistener
searcheventlistener   _searcheventlistener
/**
* start the connector
*/
public void start
throws exception
log info
hashtable<string  string> env   new hashtable
env put context initial_context_factory
this ldapuri   geturi
log debug     this ldapuri
env put context provider_url  this ldapuri tostring
if anonymousauthentication
log debug
env put context security_authentication
else
log debug     user
env put context security_principal    user
env put context security_credentials  password
boolean isconnected   false
while  isconnected
try
context   new initialdircontext env
isconnected   true
catch communicationexception err
if failover
this ldapuri   geturi
log error     env get context provider_url        this ldapuri tostring
env put context provider_url  this ldapuri tostring
thread sleep curreconnectdelay
curreconnectdelay   math min curreconnectdelay   2  maxreconnectdelay
else
throw err
// add connectors from search results
log info
log debug     base
log debug     searchfilter
log debug     searchcontrols getsearchscope
namingenumeration<searchresult> results   context search base  searchfilter  searchcontrols
while results hasmore
addconnector results next
// register persistent search event listener
if searcheventlistener
log info
eventdircontext eventcontext    eventdircontext context lookup
eventcontext addnaminglistener base  searchfilter  searchcontrols  this
else    otherwise close context  i e  connection as it is no longer needed
context close
/**
* stop the connector
*/
public void stop
throws exception
log info
for networkconnector connector   connectormap values
connector stop
connectormap clear
referencemap clear
uuidmap clear
context close
/**
* returns the name of the connector
*
* @return connector name
*/
public string getname
string name   super getname
if  name    null
name   this getclass   getname         ldapuri tostring
super setname name
return name
/**
* add connector of the given uri
*
* @param result
*            search result of connector to add
*/
protected synchronized void addconnector searchresult result
throws exception
string uuid   touuid result
if uuidmap containskey uuid
log warn     uuid
return
uri connectoruri   touri result
if connectormap containskey connectoruri
int referencecount   referencemap get connectoruri    1
log warn     connectoruri       uuid       referencecount
referencemap put connectoruri  referencecount
uuidmap put uuid  connectoruri
return
// fixme: disable jmx listing of ldap managed connectors, we will
//       want to map/manage these differently in the future
//      boolean usejmx = getbrokerservice().isusejmx();
//      getbrokerservice().setusejmx(false);
networkconnector connector   getbrokerservice   addnetworkconnector connectoruri
//      getbrokerservice().setusejmx(usejmx);
// propogate std connector properties that may have been set via xml
connector setdynamiconly isdynamiconly
connector setdecreasenetworkconsumerpriority isdecreasenetworkconsumerpriority
connector setnetworkttl getnetworkttl
connector setconduitsubscriptions isconduitsubscriptions
connector setexcludeddestinations getexcludeddestinations
connector setdynamicallyincludeddestinations getdynamicallyincludeddestinations
connector setduplex isduplex
// xxx: set in the brokerservice.startallconnectors method and is
//      required to prevent remote broker exceptions upon connection
connector setlocaluri getbrokerservice   getvmconnectoruri
connector setbrokername getbrokerservice   getbrokername
connector setdurabledestinations getbrokerservice   getbroker   getdurabledestinations
// start network connector
connectormap put connectoruri  connector
referencemap put connectoruri  1
uuidmap put uuid  connectoruri
connector start
log info     connectoruri
/**
* remove connector of the given uri
*
* @param result search result of connector to remove
*/
protected synchronized void removeconnector searchresult result
throws exception
string uuid   touuid result
if  uuidmap containskey uuid
log warn     uuid
return
uri connectoruri   uuidmap get uuid
if  connectormap containskey connectoruri
log warn     connectoruri
return
int referencecount   referencemap get connectoruri    1
referencemap put connectoruri  referencecount
uuidmap remove uuid
log debug     connectoruri       uuid       referencecount
if referencecount > 0
return
networkconnector connector   connectormap remove connectoruri
connector stop
log info     connectoruri
/**
* convert search result into uri
*
* @param result search result to convert to uri
*/
protected uri touri searchresult result
throws exception
attributes attributes   result getattributes
string address     string attributes get    get
string port        string attributes get    get
string protocol    string attributes get    get
uri connectoruri   new uri     protocol       address       port
log debug     connectoruri
return connectoruri
/**
* convert search result into uri
*
* @param result search result to convert to uri
*/
protected string touuid searchresult result
string uuid   result getnameinnamespace
log debug     uuid
return uuid
/**
* invoked when an entry has been added during a persistent search
*/
public void objectadded namingevent event
log debug
try
addconnector  searchresult event getnewbinding
catch exception err
log error    err
/**
* invoked when an entry has been removed during a persistent search
*/
public void objectremoved namingevent event
log debug
try
removeconnector  searchresult event getoldbinding
catch exception err
log error    err
/**
* invoked when an entry has been renamed during a persistent search
*/
public void objectrenamed namingevent event
log debug
// xxx: getnameinnamespace method does not seem to work properly,
//      but getname seems to provide the result we want
string uuidold   event getoldbinding   getname
string uuidnew   event getnewbinding   getname
uri connectoruri   uuidmap remove uuidold
uuidmap put uuidnew  connectoruri
log debug     connectoruri       uuidold       uuidnew
/**
* invoked when an entry has been changed during a persistent search
*/
public void objectchanged namingevent event
log debug
try
searchresult result    searchresult event getnewbinding
removeconnector result
addconnector result
catch exception err
log error    err
/**
* invoked when an exception has occurred during a persistent search
*/
public void namingexceptionthrown namingexceptionevent event
log error    event getexception