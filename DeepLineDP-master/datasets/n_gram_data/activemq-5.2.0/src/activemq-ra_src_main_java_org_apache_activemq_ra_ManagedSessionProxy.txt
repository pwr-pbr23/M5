/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq ra
import java io serializable
import javax jms bytesmessage
import javax jms destination
import javax jms illegalstateexception
import javax jms jmsexception
import javax jms mapmessage
import javax jms message
import javax jms messageconsumer
import javax jms messagelistener
import javax jms messageproducer
import javax jms objectmessage
import javax jms queue
import javax jms queuebrowser
import javax jms queuereceiver
import javax jms queuesender
import javax jms queuesession
import javax jms session
import javax jms streammessage
import javax jms temporaryqueue
import javax jms temporarytopic
import javax jms textmessage
import javax jms topic
import javax jms topicpublisher
import javax jms topicsession
import javax jms topicsubscriber
import org apache activemq activemqsession
/**
* acts as a pass through proxy for a jms session object. it intercepts events
* that are of interest of the activemqmanagedconnection.
*
* @version $revision$
*/
public class managedsessionproxy implements session  queuesession  topicsession
private final activemqsession session
private boolean closed
public managedsessionproxy activemqsession session
this session   session
public void setusesharedtxcontext boolean enable  throws jmsexception
if  session gettransactioncontext      null
managedtransactioncontext session gettransactioncontext    setusesharedtxcontext enable
/**
* @throws jmsexception
*/
public void close   throws jmsexception
cleanup
/**
* called by the activemqmanagedconnection to invalidate this proxy.
*
* @throws jmsexception
* @throws jmsexception
*/
public void cleanup   throws jmsexception
closed   true
session close
/**
*
*/
private session getsession   throws jmsexception
if  closed
throw new illegalstateexception
return session
/**
* @throws jmsexception
*/
public void commit   throws jmsexception
getsession   commit
/**
* @param queue
* @return
* @throws jmsexception
*/
public queuebrowser createbrowser queue queue  throws jmsexception
return getsession   createbrowser queue
/**
* @param queue
* @param messageselector
* @return
* @throws jmsexception
*/
public queuebrowser createbrowser queue queue  string messageselector  throws jmsexception
return getsession   createbrowser queue  messageselector
/**
* @return
* @throws jmsexception
*/
public bytesmessage createbytesmessage   throws jmsexception
return getsession   createbytesmessage
/**
* @param destination
* @return
* @throws jmsexception
*/
public messageconsumer createconsumer destination destination  throws jmsexception
return getsession   createconsumer destination
/**
* @param destination
* @param messageselector
* @return
* @throws jmsexception
*/
public messageconsumer createconsumer destination destination  string messageselector  throws jmsexception
return getsession   createconsumer destination  messageselector
/**
* @param destination
* @param messageselector
* @param nolocal
* @return
* @throws jmsexception
*/
public messageconsumer createconsumer destination destination  string messageselector  boolean nolocal  throws jmsexception
return getsession   createconsumer destination  messageselector  nolocal
/**
* @param topic
* @param name
* @return
* @throws jmsexception
*/
public topicsubscriber createdurablesubscriber topic topic  string name  throws jmsexception
return getsession   createdurablesubscriber topic  name
/**
* @param topic
* @param name
* @param messageselector
* @param nolocal
* @return
* @throws jmsexception
*/
public topicsubscriber createdurablesubscriber topic topic  string name  string messageselector  boolean nolocal  throws jmsexception
return getsession   createdurablesubscriber topic  name  messageselector  nolocal
/**
* @return
* @throws jmsexception
*/
public mapmessage createmapmessage   throws jmsexception
return getsession   createmapmessage
/**
* @return
* @throws jmsexception
*/
public message createmessage   throws jmsexception
return getsession   createmessage
/**
* @return
* @throws jmsexception
*/
public objectmessage createobjectmessage   throws jmsexception
return getsession   createobjectmessage
/**
* @param object
* @return
* @throws jmsexception
*/
public objectmessage createobjectmessage serializable object  throws jmsexception
return getsession   createobjectmessage object
/**
* @param destination
* @return
* @throws jmsexception
*/
public messageproducer createproducer destination destination  throws jmsexception
return getsession   createproducer destination
/**
* @param queuename
* @return
* @throws jmsexception
*/
public queue createqueue string queuename  throws jmsexception
return getsession   createqueue queuename
/**
* @return
* @throws jmsexception
*/
public streammessage createstreammessage   throws jmsexception
return getsession   createstreammessage
/**
* @return
* @throws jmsexception
*/
public temporaryqueue createtemporaryqueue   throws jmsexception
return getsession   createtemporaryqueue
/**
* @return
* @throws jmsexception
*/
public temporarytopic createtemporarytopic   throws jmsexception
return getsession   createtemporarytopic
/**
* @return
* @throws jmsexception
*/
public textmessage createtextmessage   throws jmsexception
return getsession   createtextmessage
/**
* @param text
* @return
* @throws jmsexception
*/
public textmessage createtextmessage string text  throws jmsexception
return getsession   createtextmessage text
/**
* @param topicname
* @return
* @throws jmsexception
*/
public topic createtopic string topicname  throws jmsexception
return getsession   createtopic topicname
/**
* @return
* @throws jmsexception
*/
public int getacknowledgemode   throws jmsexception
return getsession   getacknowledgemode
/**
* @return
* @throws jmsexception
*/
public messagelistener getmessagelistener   throws jmsexception
return getsession   getmessagelistener
/**
* @return
* @throws jmsexception
*/
public boolean gettransacted   throws jmsexception
return getsession   gettransacted
/**
* @throws jmsexception
*/
public void recover   throws jmsexception
getsession   recover
/**
* @throws jmsexception
*/
public void rollback   throws jmsexception
getsession   rollback
/**
* @param listener
* @throws jmsexception
*/
public void setmessagelistener messagelistener listener  throws jmsexception
getsession   setmessagelistener listener
/**
* @param name
* @throws jmsexception
*/
public void unsubscribe string name  throws jmsexception
getsession   unsubscribe name
/**
* @param queue
* @return
* @throws jmsexception
*/
public queuereceiver createreceiver queue queue  throws jmsexception
return   queuesession getsession    createreceiver queue
/**
* @param queue
* @param messageselector
* @return
* @throws jmsexception
*/
public queuereceiver createreceiver queue queue  string messageselector  throws jmsexception
return   queuesession getsession    createreceiver queue  messageselector
/**
* @param queue
* @return
* @throws jmsexception
*/
public queuesender createsender queue queue  throws jmsexception
return   queuesession getsession    createsender queue
/**
* @param topic
* @return
* @throws jmsexception
*/
public topicpublisher createpublisher topic topic  throws jmsexception
return   topicsession getsession    createpublisher topic
/**
* @param topic
* @return
* @throws jmsexception
*/
public topicsubscriber createsubscriber topic topic  throws jmsexception
return   topicsession getsession    createsubscriber topic
/**
* @param topic
* @param messageselector
* @param nolocal
* @return
* @throws jmsexception
*/
public topicsubscriber createsubscriber topic topic  string messageselector  boolean nolocal  throws jmsexception
return   topicsession getsession    createsubscriber topic  messageselector  nolocal
/**
* @see javax.jms.session#run()
*/
public void run
throw new runtimeexception
public string tostring
return     session