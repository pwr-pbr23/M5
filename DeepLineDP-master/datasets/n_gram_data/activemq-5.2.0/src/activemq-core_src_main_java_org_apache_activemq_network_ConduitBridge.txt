/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache activemq network
import java io ioexception
import java util arraylist
import java util iterator
import java util list
import org apache activemq command consumerid
import org apache activemq command consumerinfo
import org apache activemq filter destinationfilter
import org apache activemq transport transport
import org apache commons logging log
import org apache commons logging logfactory
/**
* consolidates subscriptions
*
* @version $revision: 1.1 $
*/
public class conduitbridge extends demandforwardingbridge
private static final log log   logfactory getlog conduitbridge class
/**
* constructor
*
* @param localbroker
* @param remotebroker
*/
public conduitbridge networkbridgeconfiguration configuration  transport localbroker  transport remotebroker
super configuration  localbroker  remotebroker
protected demandsubscription createdemandsubscription consumerinfo info  throws ioexception
if  addtoalreadyinterestedconsumers info
return null     don't want this subscription added
//add our original id to ourselves
info addnetworkconsumerid info getconsumerid
return docreatedemandsubscription info
protected boolean addtoalreadyinterestedconsumers consumerinfo info
// search through existing subscriptions and see if we have a match
boolean matched   false
destinationfilter filter   destinationfilter parsefilter info getdestination
for  iterator i   subscriptionmapbylocalid values   iterator    i hasnext
demandsubscription ds    demandsubscription i next
if  filter matches ds getlocalinfo   getdestination
// add the interest in the subscription
// ds.add(ds.getremoteinfo().getconsumerid());
ds add info getconsumerid
matched   true
// continue - we want interest to any existing
// demandsubscriptions
return matched
protected void removedemandsubscription consumerid id  throws ioexception
list<demandsubscription> tmplist   new arraylist<demandsubscription>
for  iterator i   subscriptionmapbylocalid values   iterator    i hasnext
demandsubscription ds    demandsubscription i next
ds remove id
if  ds isempty
tmplist add ds
for  iterator<demandsubscription> i   tmplist iterator    i hasnext
demandsubscription ds   i next
subscriptionmapbylocalid remove ds getremoteinfo   getconsumerid
removesubscription ds
if  log istraceenabled
log trace     localbroker       remotebrokername       ds getremoteinfo