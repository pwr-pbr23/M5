/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel bam model
import java util collection
import java util date
import java util hashset
import javax persistence cascadetype
import javax persistence entity
import javax persistence fetchtype
import javax persistence id
import javax persistence manytoone
import javax persistence onetomany
import javax persistence temporal
import javax persistence temporaltype
import javax persistence transient
import org apache camel bam rules activityrules
import org apache commons logging log
import org apache commons logging logfactory
/**
* represents a single business process
*
* @version $revision$
*/
@entity
public class processinstance
private static final transient log log   logfactory getlog processinstance class
private processdefinition processdefinition
private collection<activitystate> activitystates   new hashset<activitystate>
private string correlationkey
private date timestarted
private date timecompleted
public processinstance
settimestarted new date
public string tostring
return     getcorrelationkey
@id
public string getcorrelationkey
return correlationkey
public void setcorrelationkey string correlationkey
this correlationkey   correlationkey
@manytoone fetch   fetchtype lazy  cascade    cascadetype persist  cascadetype merge
public processdefinition getprocessdefinition
return processdefinition
public void setprocessdefinition processdefinition processdefinition
this processdefinition   processdefinition
@onetomany mappedby      fetch   fetchtype lazy  cascade    cascadetype all
public collection<activitystate> getactivitystates
return activitystates
public void setactivitystates collection<activitystate> activitystates
this activitystates   activitystates
@transient
public boolean isstarted
return timestarted    null
@transient
public boolean iscompleted
return timecompleted    null
@temporal temporaltype time
public date gettimestarted
return timestarted
public void settimestarted date timestarted
this timestarted   timestarted
@temporal temporaltype time
public date gettimecompleted
return timecompleted
public void settimecompleted date timecompleted
this timecompleted   timecompleted
helper methods
//-------------------------------------------------------------------------
/**
* returns the activity state for the given activity
*
* @param activityrules the activity to find the state for
* @return the activity state or null if no state could be found for the
*         given activity
*/
public activitystate getactivitystate activityrules activityrules
for  activitystate activitystate   getactivitystates
if  activitystate isactivity activityrules
return activitystate
return null
public activitystate getorcreateactivitystate activityrules activityrules
activitystate state   getactivitystate activityrules
if  state    null
state   createactivitystate
state setprocessinstance this
state setactivitydefinition activityrules getactivitydefinition
// we don't need to do: gettemplate().persist(state);
return state
protected activitystate createactivitystate
return new activitystate