/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import org apache camel expression
import org apache camel processor
import org apache camel processor deadletterchannel
import org apache camel processor errorhandlersupport
import org apache camel processor logger
import org apache camel processor logginglevel
import org apache camel processor recipientlist
import org apache camel processor redeliverypolicy
import org apache camel processor exceptionpolicy exceptionpolicystrategy
import org apache camel spi routecontext
import org apache commons logging log
import org apache commons logging logfactory
/**
* a builder of a <a
* href="http://activemq.apache.org/camel/dead-letter-channel.html">dead letter
* channel</a>
*
* @version $revision$
*/
public class deadletterchannelbuilder extends errorhandlerbuildersupport
private redeliverypolicy redeliverypolicy   new redeliverypolicy
private exceptionpolicystrategy exceptionpolicystrategy   errorhandlersupport createdefaultexceptionpolicystrategy
private processorfactory deadletterfactory
private processor defaultdeadletterendpoint
private expression defaultdeadletterendpointexpression
private string defaultdeadletterendpointuri
private logger logger   deadletterchannel createdefaultlogger
public deadletterchannelbuilder
public deadletterchannelbuilder processor processor
this new constantprocessorbuilder processor
public deadletterchannelbuilder processorfactory deadletterfactory
this deadletterfactory   deadletterfactory
public errorhandlerbuilder copy
deadletterchannelbuilder answer   new deadletterchannelbuilder deadletterfactory
answer setredeliverypolicy getredeliverypolicy   copy
return answer
public processor createerrorhandler routecontext routecontext  processor processor  throws exception
processor deadletter   getdeadletterfactory   createprocessor
deadletterchannel answer   new deadletterchannel processor  deadletter  getredeliverypolicy    getlogger    getexceptionpolicystrategy
configure answer
return answer
// builder methods
// -------------------------------------------------------------------------
public deadletterchannelbuilder backoffmultiplier double backoffmultiplier
getredeliverypolicy   backoffmultiplier backoffmultiplier
return this
public deadletterchannelbuilder collisionavoidancepercent short collisionavoidancepercent
getredeliverypolicy   collisionavoidancepercent collisionavoidancepercent
return this
public deadletterchannelbuilder initialredeliverydelay long initialredeliverydelay
getredeliverypolicy   initialredeliverydelay initialredeliverydelay
return this
public deadletterchannelbuilder maximumredeliveries int maximumredeliveries
getredeliverypolicy   maximumredeliveries maximumredeliveries
return this
public deadletterchannelbuilder maximumredeliverydelay long maximumredeliverydelay
getredeliverypolicy   maximumredeliverydelay maximumredeliverydelay
return this
public deadletterchannelbuilder usecollisionavoidance
getredeliverypolicy   usecollisionavoidance
return this
public deadletterchannelbuilder useexponentialbackoff
getredeliverypolicy   useexponentialbackoff
return this
/**
* sets the logger used for caught exceptions
*/
public deadletterchannelbuilder logger logger logger
setlogger logger
return this
/**
* sets the logging level of exceptions caught
*/
public deadletterchannelbuilder logginglevel logginglevel level
getlogger   setlevel level
return this
/**
* sets the log used for caught exceptions
*/
public deadletterchannelbuilder log log log
getlogger   setlog log
return this
/**
* sets the log used for caught exceptions
*/
public deadletterchannelbuilder log string log
return log logfactory getlog log
/**
* sets the log used for caught exceptions
*/
public deadletterchannelbuilder log class log
return log logfactory getlog log
/**
* sets the exception policy to use
*/
public errorhandlerbuildersupport exceptionpolicystrategy exceptionpolicystrategy exceptionpolicystrategy
setexceptionpolicystrategy exceptionpolicystrategy
return this
// properties
// -------------------------------------------------------------------------
public redeliverypolicy getredeliverypolicy
return redeliverypolicy
/**
* sets the redelivery policy
*/
public void setredeliverypolicy redeliverypolicy redeliverypolicy
this redeliverypolicy   redeliverypolicy
public processorfactory getdeadletterfactory
if  deadletterfactory    null
deadletterfactory   new processorfactory
public processor createprocessor
return getdefaultdeadletterendpoint
return deadletterfactory
/**
* sets the default dead letter queue factory
*/
public void setdeadletterfactory processorfactory deadletterfactory
this deadletterfactory   deadletterfactory
public processor getdefaultdeadletterendpoint
if  defaultdeadletterendpoint    null
defaultdeadletterendpoint   new recipientlist getdefaultdeadletterendpointexpression
return defaultdeadletterendpoint
/**
* sets the default dead letter endpoint used
*/
public void setdefaultdeadletterendpoint processor defaultdeadletterendpoint
this defaultdeadletterendpoint   defaultdeadletterendpoint
public expression getdefaultdeadletterendpointexpression
if  defaultdeadletterendpointexpression    null
defaultdeadletterendpointexpression   expressionbuilder
constantexpression getdefaultdeadletterendpointuri
return defaultdeadletterendpointexpression
/**
* sets the expression used to decide the dead letter channel endpoint for
* an exchange if no factory is provided via
* {@link #setdeadletterfactory(processorfactory)}
*/
public void setdefaultdeadletterendpointexpression expression defaultdeadletterendpointexpression
this defaultdeadletterendpointexpression   defaultdeadletterendpointexpression
public string getdefaultdeadletterendpointuri
return defaultdeadletterendpointuri
/**
* sets the default dead letter endpoint uri used if no factory is provided
* via {@link #setdeadletterfactory(processorfactory)} and no expression is
* provided via {@link #setdefaultdeadletterendpointexpression(expression)}
*
* @param defaultdeadletterendpointuri the default uri if no deadletter
*                factory or expression is provided
*/
public void setdefaultdeadletterendpointuri string defaultdeadletterendpointuri
this defaultdeadletterendpointuri   defaultdeadletterendpointuri
public logger getlogger
return logger
public void setlogger logger logger
this logger   logger
/**
* sets the exception policy strategy to use for resolving the {@link org.apache.camel.model.exceptiontype}
* to use for a given thrown exception
*/
public exceptionpolicystrategy getexceptionpolicystrategy
return exceptionpolicystrategy
public void setexceptionpolicystrategy exceptionpolicystrategy exceptionpolicystrategy
this exceptionpolicystrategy   exceptionpolicystrategy