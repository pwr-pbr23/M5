/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor resequencer
import java util queue
import java util timer
import org apache commons logging log
import org apache commons logging logfactory
/**
* resequences elements based on a given {@link sequenceelementcomparator}.
* this resequencer is designed for resequencing element streams. resequenced
* elements are added to an output {@link queue}. the resequencer is configured
* via the <code>timeout</code> and <code>capacity</code> properties.
*
* <ul>
* <li><code>timeout</code>. defines the timeout (in milliseconds) for a
* given element managed by this resequencer. an out-of-sequence element can
* only be marked as <i>ready-for-delivery</i> if it either times out or if it
* has an immediate predecessor (in that case it is in-sequence). if an
* immediate predecessor of a waiting element arrives the timeout task for the
* waiting element will be cancelled (which marks it as <i>ready-for-delivery</i>).
* <p>
* if the maximum out-of-sequence time between elements within a stream is
* known, the <code>timeout</code> value should be set to this value. in this
* case it is guaranteed that all elements of a stream will be delivered in
* sequence to the output queue. however, large <code>timeout</code> values
* might require a very high resequencer <code>capacity</code> which might be
* in conflict with available memory resources. the lower the
* <code>timeout</code> value is compared to the out-of-sequence time between
* elements within a stream the higher the probability is for out-of-sequence
* elements delivered by this resequencer.</li>
* <li><code>capacity</code>. the capacity of this resequencer.</li>
* </ul>
*
* whenever a timeout for a certain element occurs or an element has been added
* to this resequencer a delivery attempt is started. if a (sub)sequence of
* elements is <i>ready-for-delivery</i> then they are added to output queue.
* <p>
* the resequencer remembers the last-delivered element. if an element arrives
* which is the immediate successor of the last-delivered element it will be
* delivered immediately and the last-delivered element is adjusted accordingly.
* if the last-delivered element is <code>null</code> i.e. the resequencer was
* newly created the first arriving element will wait <code>timeout</code>
* milliseconds for being delivered to the output queue.
*
* @author martin krasser
*
* @version $revision
*/
public class resequencerengine<e> implements timeouthandler
private static final transient log log   logfactory getlog resequencerengine class
private long timeout
private int capacity
private queue<e> outqueue
private element<e> lastdelivered
/**
* a sequence of elements for sorting purposes.
*/
private sequence<element<e>> sequence
/**
* a timer for scheduling timeout notifications.
*/
private timer timer
/**
* creates a new resequencer instance with a default timeout of 2000
* milliseconds. the capacity is set to {@link integer#max_value}.
*
* @param comparator a sequence element comparator.
*/
public resequencerengine sequenceelementcomparator<e> comparator
this comparator  integer max_value
/**
* creates a new resequencer instance with a default timeout of 2000
* milliseconds.
*
* @param comparator a sequence element comparator.
* @param capacity the capacity of this resequencer.
*/
public resequencerengine sequenceelementcomparator<e> comparator  int capacity
this timer   new timer
this sequence   createsequence comparator
this capacity   capacity
this timeout   2000l
this lastdelivered   null
/**
* stops this resequencer (i.e. this resequencer's {@link timer} instance).
*/
public void stop
this timer cancel
/**
* returns the output queue.
*
* @return the output queue.
*/
public queue<e> getoutqueue
return outqueue
/**
* sets the output queue.
*
* @param outqueue output queue.
*/
public void setoutqueue queue<e> outqueue
this outqueue   outqueue
/**
* returns this resequencer's timeout value.
*
* @return the timeout in milliseconds.
*/
public long gettimeout
return timeout
/**
* sets this sequencer's timeout value.
*
* @param timeout the timeout in milliseconds.
*/
public void settimeout long timeout
this timeout   timeout
/**
* handles a timeout notification by starting a delivery attempt.
*
* @param timout timeout task that caused the notification.
*/
public synchronized void timeout timeout timout
try
while  deliver
// work done in deliver()
catch  runtimeexception e
log error    e
/**
* adds an element to this resequencer throwing an exception if the maximum
* capacity is reached.
*
* @param o element to be resequenced.
* @throws illegalstateexception if the element cannot be added at this time
*         due to capacity restrictions.
*/
public synchronized void add e o
if  sequence size   >  capacity
throw new illegalstateexception
insert o
/**
* adds an element to this resequencer waiting, if necessary, until capacity
* becomes available.
*
* @param o element to be resequenced.
* @throws interruptedexception if interrupted while waiting.
*/
public synchronized void put e o  throws interruptedexception
if  sequence size   >  capacity
wait
insert o
/**
* returns the last delivered element.
*
* @return the last delivered element or <code>null</code> if no delivery
*         has been made yet.
*/
e getlastdelivered
if  lastdelivered    null
return null
return lastdelivered getobject
/**
* sets the last delivered element. this is for testing purposes only.
*
* @param o an element.
*/
void setlastdelivered e o
lastdelivered   new element<e> o
/**
* inserts the given element into this resequencing queue (sequence). if the
* element is not ready for immediate delivery and has no immediate
* presecessor then it is scheduled for timing out. after being timed out it
* is ready for delivery.
*
* @param o an element.
*/
private void insert e o
// wrap object into internal element
element<e> element   new element<e> o
// add element to sequence in proper order
sequence add element
element<e> successor   sequence successor element
// check if there is an immediate successor and cancel
// timer task (no need to wait any more for timeout)
if  successor    null
successor cancel
// start delivery if current element is successor of last delivered element
if  successoroflastdelivered element
// nothing to schedule
else if  sequence predecessor element     null
// nothing to schedule
else
timeout t   definetimeout
element schedule t
// start delivery
while  deliver
// work done in deliver()
/**
* attempts to deliver a single element from the head of the resequencer
* queue (sequence). only elements which have not been scheduled for timing
* out or which already timed out can be delivered.
*
* @return <code>true</code> if the element has been delivered
*         <code>false</code> otherwise.
*/
private boolean deliver
if  sequence size      0
return false
// inspect element with lowest sequence value
element<e> element   sequence first
// if element is scheduled do not deliver and return
if  element scheduled
return false
// remove deliverable element from sequence
sequence remove element
// set the delivered element to last delivered element
lastdelivered   element
// notify a waiting thread that capacity is available
notify
// add element to output queue
outqueue add element getobject
// element has been delivered
return true
/**
* returns <code>true</code> if the given element is the immediate
* successor of the last delivered element.
*
* @param element an element.
* @return <code>true</code> if the given element is the immediate
*         successor of the last delivered element.
*/
private boolean successoroflastdelivered element<e> element
if  lastdelivered    null
return false
if  sequence comparator   successor element  lastdelivered
return true
return false
/**
* creates a timeout task based on the timeout setting of this resequencer.
*
* @return a new timeout task.
*/
private timeout definetimeout
timeout result   new timeout timer  timeout
result addtimeouthandler this
return result
private static <e> sequence<element<e>> createsequence sequenceelementcomparator<e> comparator
return new sequence<element<e>> new elementcomparator<e> comparator