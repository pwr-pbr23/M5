/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java net uri
import java util map
import java util concurrent scheduledexecutorservice
import java util concurrent scheduledthreadpoolexecutor
import java util concurrent threadfactory
import org apache camel camelcontext
import org apache camel component
import org apache camel endpoint
import org apache camel exchange
import org apache camel resolveendpointfailedexception
import org apache camel spi injector
import org apache camel spi registry
import org apache camel util camelcontexthelper
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util urisupport
import org apache camel util unsafeuricharactersencoder
import org apache commons logging log
import org apache commons logging logfactory
/**
* default component to use for base for components implementations.
*
* @version $revision$
*/
public abstract class defaultcomponent<e extends exchange> extends servicesupport implements component<e>
private static final transient log log   logfactory getlog defaultcomponent class
private int defaultthreadpoolsize   5
private camelcontext camelcontext
private scheduledexecutorservice executorservice
public defaultcomponent
public defaultcomponent camelcontext context
this camelcontext   context
public endpoint<e> createendpoint string uri  throws exception
objecthelper notnull getcamelcontext
//encode uri string to the unsafe uri characters
uri u   new uri unsafeuricharactersencoder encode uri
string path   u getschemespecificpart
// lets trim off any query arguments
if  path startswith
path   path substring 2
int idx   path indexof
if  idx > 0
path   path substring 0  idx
map parameters   urisupport parseparameters u
validateuri uri  path  parameters
if  log isdebugenabled
log debug     uri       path       parameters
endpoint<e> endpoint   createendpoint uri  path  parameters
if  endpoint    null
return null
if  parameters    null
endpoint configureproperties parameters
if  useintrospectiononendpoint
setproperties endpoint  parameters
// fail if there are parameters that could not be set, then they are probably miss spelt or not supported at all
if  parameters size   > 0
throw new resolveendpointfailedexception uri      parameters size
parameters
return endpoint
/**
* strategy for validation of the uri when creating the endpoint.
*
* @param uri        the uri - the uri the end user provided untouched
* @param path       the path - part after the scheme
* @param parameters the parameters, an empty map if no parameters given
* @throws resolveendpointfailedexception should be thrown if the uri validation failed
*/
protected void validateuri string uri  string path  map parameters  throws resolveendpointfailedexception
// check for uri containing & but no ? marker
if  uri contains        uri contains
throw new resolveendpointfailedexception uri
// check for uri containing double && markers
if  uri contains
throw new resolveendpointfailedexception uri
public camelcontext getcamelcontext
return camelcontext
public void setcamelcontext camelcontext context
this camelcontext   context
public scheduledexecutorservice getexecutorservice
if  executorservice    null
executorservice   createexecutorservice
return executorservice
public void setexecutorservice scheduledexecutorservice executorservice
this executorservice   executorservice
/**
* a factory method to create a default thread pool and executor
*/
protected scheduledexecutorservice createexecutorservice
return new scheduledthreadpoolexecutor defaultthreadpoolsize  new threadfactory
int counter
public synchronized thread newthread runnable runnable
thread thread   new thread runnable
thread setname        counter        defaultcomponent this tostring
return thread
protected void dostart   throws exception
protected void dostop   throws exception
if  executorservice    null
executorservice shutdown
/**
* a factory method allowing derived components to create a new endpoint
* from the given uri, remaining path and optional parameters
*
* @param uri the full uri of the endpoint
* @param remaining the remaining part of the uri without the query
*                parameters or component prefix
* @param parameters the optional parameters passed in
* @return a newly created endpoint or null if the endpoint cannot be
*         created based on the inputs
*/
protected abstract endpoint<e> createendpoint string uri  string remaining  map parameters
throws exception
/**
* sets the bean properties on the given bean
*/
protected void setproperties object bean  map parameters  throws exception
introspectionsupport setproperties getcamelcontext   gettypeconverter    bean  parameters
/**
* derived classes may wish to overload this to prevent the default introspection of uri parameters
* on the created endpoint instance
*/
protected boolean useintrospectiononendpoint
return true
// some helper methods
//-------------------------------------------------------------------------
/**
* converts the given value to the requested type
*/
public <t> t convertto class<t> type  object value
return camelcontexthelper convertto getcamelcontext    type  value
/**
* converts the given value to the specified type throwing an {@link illegalargumentexception}
* if the value could not be converted to a non null value
*/
public  <t> t mandatoryconvertto class<t> type  object value
return camelcontexthelper mandatoryconvertto getcamelcontext    type  value
/**
* creates a new instance of the given type using the {@link injector} on the given
* {@link camelcontext}
*/
public  <t> t newinstance class<t> beantype
return getcamelcontext   getinjector   newinstance beantype
/**
* look up the given named bean in the {@link registry} on the
* {@link camelcontext}
*/
public object lookup string name
return getcamelcontext   getregistry   lookup name
/**
* look up the given named bean of the given type in the {@link registry} on the
* {@link camelcontext}
*/
public <t> t lookup string name  class<t> beantype
return getcamelcontext   getregistry   lookup name  beantype
/**
* look up the given named bean in the {@link registry} on the
* {@link camelcontext} or throws
*/
public object mandatorylookup string name
return camelcontexthelper mandatorylookup getcamelcontext    name
/**
* look up the given named bean of the given type in the {@link registry} on the
* {@link camelcontext}
*/
public <t> t mandatorylookup string name  class<t> beantype
return camelcontexthelper mandatorylookup getcamelcontext    name  beantype
/**
* gets the parameter and remove it from the parameter map.
*
* @param parameters  the parameters
* @param key        the key
* @param type       the requested type to convert the value from the parameter
* @return  the converted value parameter, <tt>null</tt> if parameter does not exists.
*/
public <t> t getandremoveparameter map parameters  string key  class<t> type
return getandremoveparameter parameters  key  type  null
/**
* gets the parameter and remove it from the parameter map.
*
* @param parameters     the parameters
* @param key           the key
* @param type          the requested type to convert the value from the parameter
* @param defaultvalue  use this default value if the parameter does not contain the key
* @return  the converted value parameter
*/
public <t> t getandremoveparameter map parameters  string key  class<t> type  t defaultvalue
object value   parameters remove key
if  value    null
value   defaultvalue
if  value    null
return null
return convertto type  value