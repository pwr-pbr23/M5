/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf transport
import java io ioexception
import java io outputstream
import java util list
import java util map
import java util logging level
import java util logging logger
import org apache camel camelcontext
import org apache camel consumer
import org apache camel endpoint
import org apache camel exchange
import org apache camel processor
import org apache camel producertemplate
import org apache camel component cxf cxfconstants
import org apache camel component cxf cxfsoapbinding
import org apache camel impl defaultcamelcontext
import org apache cxf bus
import org apache cxf common logging logutils
import org apache cxf configuration configurable
import org apache cxf configuration configurer
import org apache cxf helpers castutils
import org apache cxf io cachedoutputstream
import org apache cxf message message
import org apache cxf message messageimpl
import org apache cxf service model endpointinfo
import org apache cxf transport abstractconduit
import org apache cxf transport abstractdestination
import org apache cxf transport conduit
import org apache cxf transport conduitinitiator
import org apache cxf transport messageobserver
import org apache cxf ws addressing endpointreferencetype
import org apache cxf wsdl endpointreferenceutils
/**
* @version $revision$
*/
public class cameldestination extends abstractdestination implements configurable
protected static final string base_bean_name_suffix
private static final logger log   logutils getl7dlogger cameldestination class
final conduitinitiator conduitinitiator
camelcontext camelcontext
consumer consumer
string cameldestinationuri
private producertemplate<exchange> cameltemplate
private endpoint distinationendpoint
public cameldestination camelcontext camelcontext  bus bus  conduitinitiator ci  endpointinfo info  throws ioexception
super bus  gettargetreference info  bus   info
this camelcontext   camelcontext
conduitinitiator   ci
cameldestinationuri   endpointinfo getaddress   substring cxfconstants camel_transport_prefix length
if  cameldestinationuri startswith
cameldestinationuri   cameldestinationuri substring 2
initconfig
protected logger getlogger
return log
/**
* @param inmessage the incoming message
* @return the inbuilt backchannel
*/
protected conduit getinbuiltbackchannel message inmessage
//we can pass the message back by looking up the camelexchange from inmessage
return new backchannelconduit inmessage
public void activate
getlogger   log level fine
try
getlogger   log level fine
distinationendpoint   camelcontext getendpoint cameldestinationuri
consumer   distinationendpoint createconsumer new consumerprocessor
consumer start
catch  exception ex
// todo: is it okay just to log severe errors such as this?
getlogger   log level severe     ex
public void deactivate
try
consumer stop
catch  exception e
// todo: is it okay just to log severe errors such as this?
getlogger   log level severe     e
public void shutdown
getlogger   log level fine
this deactivate
public producertemplate<exchange> getcameltemplate
if  cameltemplate    null
camelcontext ctx   camelcontext    null ? camelcontext   new defaultcamelcontext
cameltemplate   ctx createproducertemplate
return cameltemplate
public void setcameltemplate producertemplate<exchange> template
cameltemplate   template
public void setcamelcontext camelcontext context
camelcontext   context
public camelcontext getcamelcontext
return camelcontext
protected void incoming org apache camel exchange camelexchange
getlogger   log level fine     camelexchange
org apache cxf message message inmessage
cxfsoapbinding getcxfinmessage camelexchange  false
inmessage put cxfconstants camel_exchange  camelexchange
messageimpl inmessage  setdestination this
// handling the incoming message
// the response message will be send back by the outgoingchain
incomingobserver onmessage inmessage
public string getbeanname
if  endpointinfo    null    endpointinfo getname      null
return     base_bean_name_suffix
return endpointinfo getname   tostring     base_bean_name_suffix
private void initconfig
//we could configure the camel context here
if  bus    null
configurer configurer   bus getextension configurer class
if  null    configurer
configurer configurebean this
protected class consumerprocessor implements processor
public void process exchange exchange
try
incoming exchange
catch  throwable ex
getlogger   log level warning     ex
// this should deal with the cxf message
protected class backchannelconduit extends abstractconduit
protected message inmessage
exchange camelexchange
org apache cxf message exchange cxfexchange
backchannelconduit message message
super endpointreferenceutils getanonymousendpointreference
inmessage   message
cxfexchange   inmessage getexchange
camelexchange   cxfexchange get exchange class
/**
* register a message observer for incoming messages.
*
* @param observer the observer to notify on receipt of incoming
*/
public void setmessageobserver messageobserver observer
// shouldn't be called for a back channel conduit
/**
* send an outbound message, assumed to contain all the name-value
* mappings of the corresponding input message (if any).
*
* @param message the message to be sent.
*/
public void prepare message message  throws ioexception
message put cxfconstants camel_exchange  inmessage get cxfconstants camel_exchange
message setcontent outputstream class  new cameloutputstream message
protected logger getlogger
return log
/**
* mark message as a partial message.
*
* @param partialresponse the partial response message
* @param decoupledtarget the decoupled target
* @return <tt>true</tt> if partial responses is supported
*/
protected boolean markpartialresponse message partialresponse
endpointreferencetype decoupledtarget
return true
/**
* @return the associated conduit initiator
*/
protected conduitinitiator getconduitinitiator
return conduitinitiator
private class cameloutputstream extends cachedoutputstream
private message outmessage
public cameloutputstream message m
super
outmessage   m
// prepare the message and get the send out message
private void commitoutputmessage   throws ioexception
exchange camelexchange    exchange outmessage get cxfconstants camel_exchange
map<string  list<string>> protocolheader   castutils cast  map<?  ?> outmessage get message protocol_headers
cxfsoapbinding setprotocolheader camelexchange getout   getheaders    protocolheader
cachedoutputstream outputstream    cachedoutputstream outmessage getcontent outputstream class
camelexchange getout   setbody outputstream getbytes
getlogger   log level fine      outputstream
@override
protected void doflush   throws ioexception
// do nothing here
@override
protected void doclose   throws ioexception
commitoutputmessage
@override
protected void onwrite   throws ioexception
// do nothing here