/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf
import java util arraylist
import java util list
import javax xml ws webserviceprovider
import org apache camel processor
import org apache camel component cxf feature messagedataformatfeature
import org apache camel component cxf feature payloaddataformatfeature
import org apache camel component cxf spring cxfendpointbean
import org apache camel component cxf util cxfendpointutils
import org apache camel impl defaultconsumer
import org apache cxf bus
import org apache cxf busfactory
import org apache cxf bus spring springbusfactory
import org apache cxf common classloader classloaderutils
import org apache cxf endpoint server
import org apache cxf feature abstractfeature
import org apache cxf frontend serverfactorybean
/**
* a consumer of exchanges for a service in cxf
*
* @version $revision$
*/
public class cxfconsumer extends defaultconsumer<cxfexchange>
private cxfendpoint endpoint
private server server
public cxfconsumer cxfendpoint endpoint  processor processor  throws exception
super endpoint  processor
bus bus   null
this endpoint   endpoint
boolean iswebserviceprovider   false
if  endpoint getapplicationcontext      null
springbusfactory bf   new springbusfactory endpoint getapplicationcontext
bus   bf createbus
if  cxfendpointutils getsetdefaultbus endpoint
busfactory setdefaultbus bus
else
// now we just use the default bus here
bus   busfactory getdefaultbus
serverfactorybean svrbean   null
if  endpoint isspringcontextendpoint
cxfendpointbean endpointbean   endpoint getcxfendpointbean
svrbean   cxfendpointutils getserverfactorybean endpointbean getserviceclass
iswebserviceprovider   cxfendpointutils hasannotation endpointbean getserviceclass
webserviceprovider class
endpoint configure svrbean
else      setup the serverfactorybean with the uri parameters
class serviceclass   classloaderutils loadclass endpoint getserviceclass    this getclass
svrbean   cxfendpointutils getserverfactorybean serviceclass
iswebserviceprovider   cxfendpointutils hasannotation serviceclass  webserviceprovider class
svrbean setaddress endpoint getaddress
svrbean setserviceclass serviceclass
if  endpoint getservicename      null
svrbean setservicename cxfendpointutils getservicename endpoint
if  endpoint getportname      null
svrbean setendpointname cxfendpointutils getportname endpoint
if  endpoint getwsdlurl      null
svrbean setwsdlurl endpoint getwsdlurl
dataformat dataformat   cxfendpointutils getdataformat endpoint
svrbean setinvoker new camelinvoker this
// apply feature here
if   dataformat equals dataformat pojo      iswebserviceprovider
list<abstractfeature> features   new arraylist<abstractfeature>
if  dataformat equals dataformat payload
features add new payloaddataformatfeature
// adding the logging feature here for debug
//features.add(new loggingfeature());
else if  dataformat equals dataformat message
features add new messagedataformatfeature
//features.add(new loggingfeature());
svrbean setfeatures features
svrbean setbus bus
svrbean setstart false
server   svrbean create
@override
protected void dostart   throws exception
super dostart
server start
@override
protected void dostop   throws exception
server stop
super dostop
public cxfendpoint getendpoint
return endpoint