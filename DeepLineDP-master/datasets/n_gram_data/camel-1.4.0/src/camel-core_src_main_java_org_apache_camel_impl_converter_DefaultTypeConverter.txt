/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl converter
import java io ioexception
import java util arraylist
import java util hashmap
import java util list
import java util map
import java util set
import org apache camel runtimecamelexception
import org apache camel typeconverter
import org apache camel spi injector
import org apache camel spi typeconverteraware
import org apache camel util factoryfinder
import org apache camel util nofactoryavailableexception
import org apache camel util objecthelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* default implementation of a type converter registry used for
* <a href="http://activemq.apache.org/camel/type-converter.html">type converters</a> in camel.
*
* @version $revision$
*/
public class defaulttypeconverter implements typeconverter  typeconverterregistry
private static final transient log log   logfactory getlog defaulttypeconverter class
private final map<typemapping  typeconverter> typemappings   new hashmap<typemapping  typeconverter>
private injector injector
private list<typeconverterloader> typeconverterloaders   new arraylist<typeconverterloader>
private list<typeconverter> fallbackconverters   new arraylist<typeconverter>
private boolean loaded
public defaulttypeconverter injector injector
typeconverterloaders add new annotationtypeconverterloader
this injector   injector
addfallbackconverter new asyncprocessortypeconverter
addfallbackconverter new propertyeditortypeconverter
addfallbackconverter new tostringtypeconverter
addfallbackconverter new arraytypeconverter
addfallbackconverter new enumtypeconverter
public <t> t convertto class<t> totype  object value
if  totype isinstance value
return totype cast value
checkloaded
typeconverter converter   getorfindtypeconverter totype  value
if  converter    null
return converter convertto totype  value
for  typeconverter fallback   fallbackconverters
t rc   fallback convertto totype  value
if  rc    null
return rc
// lets avoid nullpointerexception when converting to boolean for null values
if  boolean class isassignablefrom totype
return  t  boolean false
if  totype isprimitive
class primitivetype   objecthelper convertprimitivetypetowrappertype totype
if  primitivetype    totype
return  t  convertto primitivetype  value
return null
public void addtypeconverter class totype  class fromtype  typeconverter typeconverter
typemapping key   new typemapping totype  fromtype
synchronized  typemappings
typeconverter converter   typemappings get key
if  converter    null
log warn     converter       typeconverter
typemappings put key  typeconverter
public void addfallbackconverter typeconverter converter
fallbackconverters add converter
if  converter instanceof typeconverteraware
typeconverteraware typeconverteraware    typeconverteraware converter
typeconverteraware settypeconverter this
public typeconverter gettypeconverter class totype  class fromtype
typemapping key   new typemapping totype  fromtype
synchronized  typemappings
return typemappings get key
public injector getinjector
return injector
public void setinjector injector injector
this injector   injector
protected <t> typeconverter getorfindtypeconverter class totype  object value
class fromtype   null
if  value    null
fromtype   value getclass
typemapping key   new typemapping totype  fromtype
typeconverter converter
synchronized  typemappings
converter   typemappings get key
if  converter    null
converter   findtypeconverter totype  fromtype  value
if  converter    null
typemappings put key  converter
return converter
/**
* tries to auto-discover any available type converters
*/
protected typeconverter findtypeconverter class totype  class fromtype  object value
// lets try the super classes of the from type
if  fromtype    null
class fromsuperclass   fromtype getsuperclass
if  fromsuperclass    null     fromsuperclass equals object class
typeconverter converter   gettypeconverter totype  fromsuperclass
if  converter    null
converter   findtypeconverter totype  fromsuperclass  value
if  converter    null
return converter
for  class type   fromtype getinterfaces
typeconverter converter   gettypeconverter totype  type
if  converter    null
return converter
// lets test for arrays
if  fromtype isarray       fromtype getcomponenttype   isprimitive
// todo can we try walking the inheritance-tree for the element types?
if   fromtype equals object class
fromsuperclass   object class
typeconverter converter   gettypeconverter totype  fromsuperclass
if  converter    null
converter   findtypeconverter totype  fromsuperclass  value
if  converter    null
return converter
// lets test for object based converters
if   fromtype equals object class
typeconverter converter   gettypeconverter totype  object class
if  converter    null
return converter
// lets try classes derived from this totype
if  fromtype    null
set<map entry<typemapping  typeconverter>> entries   typemappings entryset
for  map entry<typemapping  typeconverter> entry   entries
typemapping key   entry getkey
class atotype   key gettotype
if  totype isassignablefrom atotype
if  key getfromtype   isassignablefrom fromtype
return entry getvalue
// todo look at constructors of totype?
return null
/**
* checks if the registry is loaded and if not lazily load it
*/
protected synchronized void checkloaded
if   loaded
loaded   true
try
for  typeconverterloader typeconverterloader   typeconverterloaders
typeconverterloader load this
// lets try load any other fallback converters
try
loadfallbacktypeconverters
catch  nofactoryavailableexception e
// ignore its fine to have none
catch  exception e
throw new runtimecamelexception e
protected void loadfallbacktypeconverters   throws ioexception  classnotfoundexception
factoryfinder finder   new factoryfinder
list<typeconverter> converters   finder newinstances    getinjector
typeconverter class
for  typeconverter converter   converters
addfallbackconverter converter
/**
* represents a mapping from one type (which can be null) to another
*/
protected static class typemapping
class totype
class fromtype
public typemapping class totype  class fromtype
this totype   totype
this fromtype   fromtype
public class getfromtype
return fromtype
public class gettotype
return totype
@override
public boolean equals object object
if  object instanceof typemapping
typemapping that    typemapping object
return objecthelper equal this fromtype  that fromtype
objecthelper equal this totype  that totype
return false
@override
public int hashcode
int answer   totype hashcode
if  fromtype    null
answer    37   fromtype hashcode
return answer
@override
public string tostring
return     fromtype       totype