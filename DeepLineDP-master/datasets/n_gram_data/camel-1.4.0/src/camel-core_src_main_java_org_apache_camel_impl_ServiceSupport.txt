/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util arraylist
import java util collection
import java util concurrent atomic atomicboolean
import org apache camel service
import org apache camel util servicehelper
/**
* a useful base class which ensures that a service is only initialized once and
* provides some helper methods for enquiring of its status
*
* @version $revision$
*/
public abstract class servicesupport implements service
private static int threadcounter
private atomicboolean started   new atomicboolean false
private atomicboolean starting   new atomicboolean false
private atomicboolean stopping   new atomicboolean false
private atomicboolean stopped   new atomicboolean false
private collection childservices
public void start   throws exception
if  started compareandset false  true
starting set true
try
if  childservices    null
servicehelper startservices childservices
dostart
finally
starting set false
public void stop   throws exception
if  started get      stopping compareandset false  true
try
dostop
finally
if  childservices    null
servicehelper stopservices childservices
stopped set true
started set false
stopping set false
/**
* @return true if this service has been started
*/
public boolean isstarted
return started get
/**
* @return true if this service is
*/
public boolean isstarting
return starting get
/**
* @return true if this service is in the process of closing
*/
public boolean isstopping
return stopping get
/**
* helper methods so the service knows if it should keep running.
* returns false if the service is being stopped or is stopped.
*
* @return true if the service should continue to run.
*/
protected boolean isrunallowed
return   stopping get      stopped get
/**
* @return true if this service is closed
*/
public boolean isstopped
return stopped get
protected abstract void dostart   throws exception
protected abstract void dostop   throws exception
/**
* creates a new thread name with the given prefix
*/
protected string getthreadname string prefix
return prefix       nextthreadcounter
protected static synchronized int nextthreadcounter
return   threadcounter
protected void addchildservice object childservice
if  childservices    null
childservices   new arraylist
childservices add childservice
protected boolean removechildservice object childservice
if  childservices    null
return childservices remove childservice
else
return false