/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java util hashmap
import java util iterator
import java util map
import java util set
import java util sortedset
import java util treeset
import java util concurrent scheduledexecutorservice
import java util concurrent timeunit
import org apache commons logging log
import org apache commons logging logfactory
/**
* default implementation of the {@link timeoutmap}.
*
* @version $revision$
*/
public class defaulttimeoutmap implements timeoutmap  runnable
private static final transient log log   logfactory getlog defaulttimeoutmap class
private final map map   new hashmap
private sortedset index   new treeset
private scheduledexecutorservice executor
private long purgepolltime
public defaulttimeoutmap
this null  1000l
public defaulttimeoutmap scheduledexecutorservice executor  long requestmappolltimemillis
this executor   executor
this purgepolltime   requestmappolltimemillis
schedulepoll
public object get object key
timeoutmapentry entry   null
synchronized  map
entry    timeoutmapentry  map get key
if  entry    null
return null
index remove entry
updateexpiretime entry
index add entry
return entry getvalue
public void put object key  object value  long timeoutmillis
timeoutmapentry entry   new timeoutmapentry key  value  timeoutmillis
synchronized  map
object oldvalue   map put key  entry
if  oldvalue    null
index remove oldvalue
updateexpiretime entry
index add entry
public void remove object id
synchronized  map
timeoutmapentry entry    timeoutmapentry  map remove id
if  entry    null
index remove entry
public object getkeys
object keys   null
synchronized  map
set keyset   map keyset
keys   new object
keyset toarray keys
return keys
public int size
synchronized  map
return map size
/**
* the timer task which purges old requests and schedules another poll
*/
public void run
purge
schedulepoll
public void purge
long now   currenttime
synchronized  map
for  iterator iter   index iterator    iter hasnext
timeoutmapentry entry    timeoutmapentry  iter next
if  entry    null
break
if  entry getexpiretime   < now
if  isvalidforeviction entry
if  log isdebugenabled
log debug     entry
map remove entry getkey
iter remove
else
break
// properties
// -------------------------------------------------------------------------
public long getpurgepolltime
return purgepolltime
/**
* sets the next purge poll time in milliseconds
*/
public void setpurgepolltime long purgepolltime
this purgepolltime   purgepolltime
public scheduledexecutorservice getexecutor
return executor
/**
* sets the executor used to schedule purge events of inactive requests
*/
public void setexecutor scheduledexecutorservice executor
this executor   executor
// implementation methods
// -------------------------------------------------------------------------
/**
* lets schedule each time to allow folks to change the time at runtime
*/
protected void schedulepoll
if  executor    null
executor schedule this  purgepolltime  timeunit milliseconds
/**
* a hook to allow derivations to avoid evicting the current entry
*/
protected boolean isvalidforeviction timeoutmapentry entry
return true
protected void updateexpiretime timeoutmapentry entry
long now   currenttime
entry setexpiretime entry gettimeout     now
protected long currenttime
return system currenttimemillis