/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util map
/**
* an <a href="http://activemq.apache.org/camel/endpoint.html">endpoint</a>
* implements the <a
* href="http://activemq.apache.org/camel/message-endpoint.html">message
* endpoint</a> pattern and represents an endpoint that can send and receive
* message exchanges
*
* @see exchange
* @see message
* @version $revision$
*/
public interface endpoint<e extends exchange>
/**
* returns if the endpoint should be a camelcontext singleton. if the
* endpoint is a singleton, then a single endpoint instance will be shared
* by all routes with the same uri. because the endpoint is shared, it
* should be treated as an immutable.
*/
boolean issingleton
/**
* returns the string representation of the endpoint uri
*/
string getendpointuri
/**
* create a new exchange for communicating with this endpoint
*/
e createexchange
/**
* create a new exchange for communicating with this endpoint
* with the specified {@link exchangepattern} such as whether its going
* to be an {@link exchangepattern#inonly} or {@link exchangepattern#inout} exchange
*
* @param pattern the message exchange pattern for the exchange
*/
e createexchange exchangepattern pattern
/**
* creates a new exchange for communicating with this exchange using the
* given exchange to pre-populate the values of the headers and messages
*/
e createexchange exchange exchange
/**
* returns the context which created the endpoint
*
* @return the context which created the endpoint
*/
camelcontext getcamelcontext
/**
* creates a new producer which is used send messages into the endpoint
*
* @return a newly created producer
*/
producer<e> createproducer   throws exception
/**
* creates a new <a
* href="http://activemq.apache.org/camel/event-driven-consumer.html">event
* driven consumer</a> which consumes messages from the endpoint using the
* given processor
*
* @return a newly created consumer
*/
consumer<e> createconsumer processor processor  throws exception
/**
* creates a new <a
* href="http://activemq.apache.org/camel/polling-consumer.html">polling
* consumer</a> so that the caller can poll message exchanges from the
* consumer using {@link pollingconsumer#receive()},
* {@link pollingconsumer#receivenowait()} or
* {@link pollingconsumer#receive(long)} whenever it is ready to do so
* rather than using the <a
* href="http://activemq.apache.org/camel/event-driven-consumer.html">event
* based consumer</a> returned by {@link #createconsumer(processor)}
*
* @return a newly created pull consumer
* @throws exception if the pull consumer could not be created
*/
pollingconsumer<e> createpollingconsumer   throws exception
void configureproperties map options
void setcamelcontext camelcontext context
@deprecated
camelcontext getcontext
@deprecated
void setcontext camelcontext context