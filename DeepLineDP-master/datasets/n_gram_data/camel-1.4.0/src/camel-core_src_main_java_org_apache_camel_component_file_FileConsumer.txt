/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component file
import java io file
import java util concurrent concurrenthashmap
import org apache camel asynccallback
import org apache camel processor
import org apache camel impl scheduledpollconsumer
import org apache camel processor deadletterchannel
import org apache commons logging log
import org apache commons logging logfactory
/**
* for consuming files.
*
* @version $revision$
*/
public class fileconsumer extends scheduledpollconsumer<fileexchange>
private static final transient log log   logfactory getlog fileconsumer class
private fileendpoint endpoint
private concurrenthashmap<file  file> filesbeingprocessed   new concurrenthashmap<file  file>
private concurrenthashmap<file  long> filesizes   new concurrenthashmap<file  long>
private concurrenthashmap<file  long> noopmap   new concurrenthashmap<file  long>
private boolean generateemptyexchangewhenidle
private boolean recursive   true
private string regexpattern
private long lastpolltime
private int unchangeddelay
private boolean unchangedsize
public fileconsumer final fileendpoint endpoint  processor processor
super endpoint  processor
this endpoint   endpoint
protected synchronized void poll   throws exception
int rc   pollfileordirectory endpoint getfile    isrecursive
if  rc    0    generateemptyexchangewhenidle
final fileexchange exchange   endpoint createexchange  file null
getasyncprocessor   process exchange  new asynccallback
public void done boolean sync
lastpolltime   system currenttimemillis
/**
* pools the given file or directory for files to process.
*
* @param fileordirectory  file or directory
* @param processdir  recursive
* @return the number of files processed or being processed async.
*/
protected int pollfileordirectory file fileordirectory  boolean processdir
if   fileordirectory isdirectory
return pollfile fileordirectory      process the file
else if  processdir
int rc   0
if  isvalidfile fileordirectory
log debug     fileordirectory
file files   fileordirectory listfiles
for  file file   files
rc    pollfileordirectory file  isrecursive        self recursion
return rc
else
log debug     fileordirectory
return 0
/**
* polls the given file
*
* @param file  the file
* @return returns 1 if the file was processed, 0 otherwise.
*/
protected int pollfile final file file
if   file exists
return 0
if   isvalidfile file
return 0
// we only care about file modified times if we are not deleting/moving files
if   endpoint isnoop
if  filesbeingprocessed contains file
return 1
filesbeingprocessed put file  file
final fileprocessstrategy processstrategy   endpoint getfilestrategy
final fileexchange exchange   endpoint createexchange file
endpoint configuremessage file  exchange getin
try
if  log isdebugenabled
log debug     file       exchange
if  processstrategy begin endpoint  exchange  file
// use the async processor interface so that processing of
// the exchange can happen asynchronously
getasyncprocessor   process exchange  new asynccallback
public void done boolean sync
boolean failed   exchange isfailed
boolean handled   deadletterchannel isfailurehandled exchange
if  log isdebugenabled
log debug     file        failed ?     failed       handled
if   failed    handled
// commit the file strategy if there was no failure or already handled by the deadletterchannel
processstrategycommit processstrategy  exchange  file  handled
else if  failed     handled
// there was an exception but it was not handled by the deadletterchannel
handleexception exchange getexception
filesbeingprocessed remove file
else
if  log isdebugenabled
log debug endpoint       file
catch  throwable e
handleexception e
return 1
/**
* strategy when the file was processed and a commit should be executed.
*
* @param processstrategy   the strategy to perform the commit
* @param exchange          the exchange
* @param file              the file processed
* @param failurehandled    is <tt>false</tt> if the exchange was processed succesfully, <tt>true</tt> if
* an exception occured during processing but it was handled by the failure processor (usually the
* deadletterchannel).
*/
protected void processstrategycommit fileprocessstrategy processstrategy  fileexchange exchange
file file  boolean failurehandled
try
if  log isdebugenabled
log debug     processstrategy       file    failurehandled ?
processstrategy commit endpoint  exchange  file
catch  exception e
log warn     processstrategy  e
handleexception e
protected boolean isvalidfile file file
boolean result   false
if  file    null    file exists
// todo: maybe use a configurable strategy instead of the hardcoded one based on last file change
if  ismatched file     ischanged file
result   true
return result
protected boolean ischanged file file
if  file    null
// sanity check
return false
else if  file isdirectory
// allow recursive polling to descend into this directory
return true
else
boolean lastmodifiedcheck   false
long modifiedduration   0
if  getunchangeddelay   > 0
modifiedduration   system currenttimemillis     file lastmodified
lastmodifiedcheck   modifiedduration >  getunchangeddelay
long filemodified   file lastmodified
long previousmodified   noopmap get file
noopmap put file  filemodified
if  previousmodified    null    filemodified > previousmodified
lastmodifiedcheck   true
boolean sizecheck   false
long sizedifference   0
if  isunchangedsize
long value   filesizes get file
if  value    null
sizecheck   true
else
sizecheck   file length      value
boolean answer   lastmodifiedcheck    sizecheck
if  log isdebugenabled
log debug     file       answer           sizecheck
sizedifference           lastmodifiedcheck
modifiedduration
if  isunchangedsize
if  answer
filesizes put file  file length
else
filesizes remove file
return answer
protected boolean ismatched file file
string name   file getname
if  regexpattern    null    regexpattern length   > 0
if   name matches getregexpattern
return false
string prefixes   endpoint getexcludednameprefixes
if  prefixes    null
for  string prefix   prefixes
if  name startswith prefix
return false
string postfixes   endpoint getexcludednamepostfixes
if  postfixes    null
for  string postfix   postfixes
if  name endswith postfix
return false
return true
public boolean isrecursive
return this recursive
public void setrecursive boolean recursive
this recursive   recursive
public string getregexpattern
return this regexpattern
public void setregexpattern string regexpattern
this regexpattern   regexpattern
public boolean isgenerateemptyexchangewhenidle
return generateemptyexchangewhenidle
public void setgenerateemptyexchangewhenidle boolean generateemptyexchangewhenidle
this generateemptyexchangewhenidle   generateemptyexchangewhenidle
public int getunchangeddelay
return unchangeddelay
public void setunchangeddelay int unchangeddelay
this unchangeddelay   unchangeddelay
public boolean isunchangedsize
return unchangedsize
public void setunchangedsize boolean unchangedsize
this unchangedsize   unchangedsize