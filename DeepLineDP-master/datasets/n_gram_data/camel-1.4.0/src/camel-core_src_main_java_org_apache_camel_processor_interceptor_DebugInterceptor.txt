/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor interceptor
import java util list
import org apache camel exchange
import org apache camel message
import org apache camel predicate
import org apache camel processor
import org apache camel model processortype
import org apache camel processor delegateprocessor
/**
* an interceptor for debugging and tracing routes
*
* @version $revision$
*/
public class debuginterceptor extends delegateprocessor
private final processortype node
private final list<exchange> exchanges
private final list<exceptionevent> exceptions
private predicate tracefilter
private breakpoint breakpoint   new breakpoint
private boolean traceexceptions   true
public debuginterceptor processortype node  processor target  list<exchange> exchanges  list<exceptionevent> exceptions
super target
this node   node
this exchanges   exchanges
this exceptions   exceptions
@override
public string tostring
return     node
public void process exchange exchange  throws exception
checkforbreakpoint exchange
addtraceexchange exchange
try
super proceed exchange
catch  exception e
onexception exchange  e
throw e
catch  error e
onexception exchange  e
throw e
public processortype getnode
return node
public list<exchange> getexchanges
return exchanges
public list<exceptionevent> getexceptions
return exceptions
public breakpoint getbreakpoint
return breakpoint
public predicate gettracefilter
return tracefilter
public void settracefilter predicate tracefilter
this tracefilter   tracefilter
public boolean istraceexceptions
return traceexceptions
public void settraceexceptions boolean traceexceptions
this traceexceptions   traceexceptions
/**
* stategy method to wait for a breakpoint if one is set
*/
protected void checkforbreakpoint exchange exchange
breakpoint waitforbreakpoint exchange
/**
* fired when an exception is thrown when processing the underlying processor
*/
protected void onexception exchange exchange  throwable e
if  shouldtraceexceptionevents exchange  e
exceptions add new exceptionevent this  exchange  e
private boolean shouldtraceexceptionevents exchange exchange  throwable e
return istraceexceptions
/**
* strategy method to store the exchange in a trace log if it is enabled
*/
protected void addtraceexchange exchange exchange
if  shouldtraceexchange exchange
exchanges add copyexchange exchange
protected exchange copyexchange exchange previousexchange
exchange answer   previousexchange newinstance
answer getproperties   putall previousexchange getproperties
answer getin   copyfrom previousexchange getin
// only copy the out if its defined
message previousout   previousexchange getout false
if  previousout    null
answer getout   copyfrom previousout
return answer
/**
* returns true if the given exchange should be logged in the trace list
*/
protected boolean shouldtraceexchange exchange exchange
return tracefilter    null    tracefilter matches exchange