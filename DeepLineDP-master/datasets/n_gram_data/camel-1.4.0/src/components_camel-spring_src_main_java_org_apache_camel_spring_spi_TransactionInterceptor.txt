/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring spi
import org apache camel exchange
import org apache camel exchangeproperty
import org apache camel processor
import org apache camel runtimecamelexception
import org apache camel processor delegateprocessor
import org apache camel processor redeliverypolicy
import org apache commons logging log
import org apache commons logging logfactory
import org springframework transaction transactiondefinition
import org springframework transaction transactionstatus
import org springframework transaction support defaulttransactionstatus
import org springframework transaction support transactioncallbackwithoutresult
import org springframework transaction support transactionsynchronizationmanager
import org springframework transaction support transactiontemplate
/**
* the <a href="http://activemq.apache.org/camel/transactional-client.html">transactional client</a>
* eip pattern.
*
* @version $revision$
*/
public class transactioninterceptor extends delegateprocessor
public static final exchangeproperty<boolean> transacted
new exchangeproperty<boolean>       boolean class
private static final transient log log   logfactory getlog transactioninterceptor class
private final transactiontemplate transactiontemplate
private threadlocal<redeliverydata> previousrollback   new threadlocal<redeliverydata>
@override
protected redeliverydata initialvalue
return new redeliverydata
private redeliverypolicy redeliverypolicy
public transactioninterceptor transactiontemplate transactiontemplate
this transactiontemplate   transactiontemplate
public transactioninterceptor processor processor  transactiontemplate transactiontemplate
super processor
this transactiontemplate   transactiontemplate
public transactioninterceptor processor processor  transactiontemplate transactiontemplate  redeliverypolicy redeliverypolicy
this processor  transactiontemplate
this redeliverypolicy   redeliverypolicy
@override
public string tostring
return
propagationbehaviortostring transactiontemplate getpropagationbehavior
getprocessor
public void process final exchange exchange
log debug
final redeliverydata redeliverydata   previousrollback get
transactiontemplate execute new transactioncallbackwithoutresult
protected void dointransactionwithoutresult transactionstatus status
// todo: the delay is in some cases never triggered - see camel-663
if  redeliverypolicy    null    redeliverydata previousrollback
// lets delay
redeliverydata redeliverydelay   redeliverypolicy sleep redeliverydata redeliverydelay
// wrapper exception to throw if the exchange failed
// important: must be a runtime exception to let spring regard it as to do "rollback"
runtimecamelexception rce   null
boolean activetx   false
try
// find out if there is an actual transaction alive, and thus we are in transacted mode
activetx   transactionsynchronizationmanager isactualtransactionactive
if   activetx
activetx   status isnewtransaction       status iscompleted
if   activetx
if  defaulttransactionstatus class isassignablefrom status getclass
defaulttransactionstatus defstatus   defaulttransactionstatus class
cast status
activetx   defstatus hastransaction       status iscompleted
if  log isdebugenabled
log debug     activetx
// okay mark the exchange as transacted, then the deadletterchannel or others know
// its an transacted exchange
if  activetx
transacted set exchange  boolean true
// process the exchange
processnext exchange
// wrap if the exchange failed with an exception
if  exchange getexception      null
rce   new runtimecamelexception exchange getexception
catch  exception e
// wrap if the exchange threw an exception
rce   new runtimecamelexception e
// rehrow exception if the exchange failed
if  rce    null
redeliverydata previousrollback   true
if  activetx
status setrollbackonly
log debug
throw rce
redeliverydata previousrollback   false
redeliverydata redeliverydelay   0l
log debug
public redeliverypolicy getredeliverypolicy
return redeliverypolicy
public void setredeliverypolicy redeliverypolicy redeliverypolicy
this redeliverypolicy   redeliverypolicy
protected static class redeliverydata
boolean previousrollback
long redeliverydelay
protected string propagationbehaviortostring int propagationbehavior
string rc
switch  propagationbehavior
case transactiondefinition propagation_mandatory
rc
break
case transactiondefinition propagation_nested
rc
break
case transactiondefinition propagation_never
rc
break
case transactiondefinition propagation_not_supported
rc
break
case transactiondefinition propagation_required
rc
break
case transactiondefinition propagation_requires_new
rc
break
case transactiondefinition propagation_supports
rc
break
default
rc
return rc