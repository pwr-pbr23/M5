/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java io ioexception
import java net url
import java util enumeration
/**
* websphere specific resolver util to handle loading annotated resources in jar files.
*/
public class websphereresolverutil extends resolverutil
private string resourcepath
/**
* constructor.
*
* @param resourcepath  the fixed resource path to use for fetching camel jars in websphere.
*/
public websphereresolverutil string resourcepath
this resourcepath   resourcepath
/**
* is the classloader from ibm and thus the websphere platform?
*
* @param loader  the classloader
* @return  <tt>true</tt> if ibm classloader, <tt>false</tt> otherwise.
*/
public static boolean iswebsphereclassloader classloader loader
return loader getclass   getname   startswith
/**
* overloaded to handle specific problem with getting resources on the ibm websphere platform.
* <p/>
* websphere can <b>not</b> load resources if the resource to load is a folder name, such as a
* packagename, you have to explicit name a resource that is a file.
*
* @param loader  the classloader
* @param packagename   the packagename for the package to load
* @return  url's for the given package
* @throws ioexception is thrown by the classloader
*/
@override
protected enumeration<url> getresources classloader loader  string packagename  throws ioexception
// try super first, just in vase
enumeration<url> enumeration   super getresources loader  packagename
if   enumeration hasmoreelements
log trace
// special websphere trick to load a file that exists in the jar and then let it go from there.
// the trick is that we just need the url's for the .jars that contains the type
// converters that is annotated. so by searching for this resource websphere is able to find
// it and return the url to the .jar file with the resource. then the default resolverutil
// can take it from there and find the classes that are annotated.
enumeration   loader getresources resourcepath
return enumeration