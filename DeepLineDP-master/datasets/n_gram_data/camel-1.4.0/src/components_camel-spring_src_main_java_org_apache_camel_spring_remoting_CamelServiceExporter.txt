/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring remoting
import org apache camel camelcontext
import org apache camel camelcontextaware
import org apache camel consumer
import org apache camel endpoint
import org apache camel component bean beanprocessor
import org apache camel util camelcontexthelper
import org springframework beans beansexception
import org springframework beans factory disposablebean
import org springframework beans factory factorybean
import org springframework beans factory initializingbean
import org springframework context applicationcontext
import org springframework context applicationcontextaware
import org springframework remoting support remoteexporter
import static org apache camel util objecthelper notnull
/**
* a {@link factorybean} to create a proxy to a service exposing a given {@link #getserviceinterface()}
*
* @author chirino
*/
public class camelserviceexporter extends remoteexporter implements initializingbean  disposablebean  applicationcontextaware  camelcontextaware
private string uri
private camelcontext camelcontext
private consumer consumer
private string serviceref
private applicationcontext applicationcontext
public string geturi
return uri
public void seturi string uri
this uri   uri
public camelcontext getcamelcontext
return camelcontext
public void setcamelcontext camelcontext camelcontext
this camelcontext   camelcontext
public string getserviceref
return serviceref
public void setserviceref string serviceref
this serviceref   serviceref
public applicationcontext getapplicationcontext
return applicationcontext
public void setapplicationcontext applicationcontext applicationcontext  throws beansexception
this applicationcontext   applicationcontext
public void afterpropertiesset   throws exception
// lets bind the uri to a pojo
notnull uri
notnull camelcontext
if  serviceref    null    getservice      null    applicationcontext    null
setservice applicationcontext getbean serviceref
endpoint endpoint   camelcontexthelper getmandatoryendpoint camelcontext  uri
object proxy   getproxyforservice
consumer   endpoint createconsumer new beanprocessor proxy  camelcontext
consumer start
public void destroy   throws exception
if  consumer    null
consumer stop