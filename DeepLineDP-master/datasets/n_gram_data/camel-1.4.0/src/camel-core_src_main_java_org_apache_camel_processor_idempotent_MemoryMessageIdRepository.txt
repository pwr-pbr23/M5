/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor idempotent
import java util hashmap
import java util map
import org apache camel util lrucache
/**
* a memory based implementation of {@link messageidrepository}. care should be
* taken to use a suitable underlying {@link map} to avoid this class being a
* memory leak
*
* @version $revision$
*/
public class memorymessageidrepository implements messageidrepository
private final map cache
public memorymessageidrepository map set
this cache   set
/**
* creates a new memorymessageidrepository with a memory based repository.
* <b>warning</b> this method should only really be used for testing as it
* will involve keeping all message ids in ram.
*/
public static messageidrepository memorymessageidrepository
return memorymessageidrepository new hashmap
/**
* creates a new memorymessageidrepository with a memory based repository.
* <b>warning</b> this method should only really be used for testing as it
* will involve keeping all message ids in ram.
*/
public static messageidrepository memorymessageidrepository int cachesize
return memorymessageidrepository new lrucache cachesize
/**
* creates a new memorymessageidrepository using the given {@link map} to
* use to store the processed message id objects. warning be careful of the
* implementation of map you use as if you are not careful it could be a
* memory leak.
*/
public static messageidrepository memorymessageidrepository map cache
return new memorymessageidrepository cache
public boolean contains string messageid
synchronized  cache
if  cache containskey messageid
return true
else
cache put messageid  messageid
return false