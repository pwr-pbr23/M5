/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf invoker
import java util map
import java util logging level
import java util logging logger
import org apache cxf bus
import org apache cxf common logging logutils
import org apache cxf endpoint clientimpl
import org apache cxf endpoint endpoint
import org apache cxf message exchange
import org apache cxf message exchangeimpl
import org apache cxf message message
import org apache cxf phase phaseinterceptorchain
import org apache cxf service service
import org apache cxf service model bindinginfo
import org apache cxf service model bindingmessageinfo
import org apache cxf service model bindingoperationinfo
import org apache cxf service model operationinfo
import org apache cxf transport messageobserver
/**
* just deal with the payloadmessage and rawmessage
*
*/
public class cxfclient extends clientimpl
private static final logger log   logutils getl7dlogger cxfclient class
public cxfclient bus b  endpoint e
super b  e
public object dispatch map<class  object> params
map<string  object> context
exchange exchange  throws exception
object retval   null
invokingcontext invokingcontext   exchange get invokingcontext class
assert invokingcontext    null
// get inbound binding operation info from the exchange object
bindingoperationinfo inboundop   exchange get bindingoperationinfo class
bindingoperationinfo outboundop   null
if  inboundop    null
//get the bindingoperationinfo for the outbound binding.
bindinginfo bi   getendpoint   getendpointinfo   getbinding
outboundop   bi getoperation inboundop getoperationinfo   getname
if  outboundop    null
inboundop isunwrapped
outboundop   outboundop getunwrappedoperation
retval   invokewithmessagestream outboundop  params  context  invokingcontext
return retval
@suppresswarnings
public object invokewithmessagestream bindingoperationinfo bi
map<class  object> param
map<string  object> context
invokingcontext invokingcontext  throws exception
object retval   null
map<string  object> requestcontext   null
map<string  object> responsecontext   null
if  null    context
requestcontext    map<string  object>  context get request_context
responsecontext    map<string  object>  context get response_context
exchange exchange   new exchangeimpl
// put the message observer to call the cxfclient onmessage()
setexchangeproperties exchange  getendpoint    bi
exchange put invokingcontext class  invokingcontext
if  bi    null
//set the inputmessage
exchange put bindingmessageinfo class  bi getinput
exchange setoneway bi getoperationinfo   isoneway
message message   preparemessage exchange  requestcontext  param  invokingcontext
// add the invocation context
message put message invocation_context  context
// add the endpoint props to the message
endpoint ep   getendpoint
// the ep should not be null , just in case if it set to be null
if  ep    null
message putall ep
phaseinterceptorchain chain   setupinterceptorchain getendpoint
message setinterceptorchain chain
modifychain chain  requestcontext
chain setfaultobserver outfaultobserver
// setup conduit selector
prepareconduitselector message
modifychain chain  null
// execute chain
chain dointercept message
//it will close all the stream in the message, so we do not call it
//getconduitselector().complete(exchange);
// check to see if there is a fault from the outgoing chain
exception ex   message getcontent exception class
if  ex    null
if  log isloggable level fine
log fine     ex tostring
throw ex
if   exchange isoneway
synchronized  exchange
waitresponse exchange
ex   getexception exchange
if  ex    null
if  log isloggable level fine
log fine     ex tostring
throw ex
retval   invokingcontext getresponseobject exchange  responsecontext
return retval
private void waitresponse exchange exchange
int remaining   synchronoustimeout
while   boolean true equals exchange get finished      remaining > 0
long start   system currenttimemillis
try
exchange wait remaining
catch  interruptedexception ex
// ignore
long end   system currenttimemillis
remaining     int  end   start
if   boolean true equals exchange get finished
logutils log log  level warning
exchange get operationinfo class  getname   tostring
private message preparemessage exchange exchange  map<string  object> requestcontext
map<class  object> param  invokingcontext invokingcontext
message message   getendpoint   getbinding   createmessage
message put message requestor_role  boolean true
message put message inbound_message  boolean false
// setup the message context
if  requestcontext    null
message putall requestcontext
if  param    null
invokingcontext setrequestoutmessagecontent message  param
if  null    requestcontext
exchange putall requestcontext
exchange setoutmessage message
return message