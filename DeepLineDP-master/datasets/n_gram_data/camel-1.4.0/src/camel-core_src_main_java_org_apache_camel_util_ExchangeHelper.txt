/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java util hashmap
import java util map
import org apache camel endpoint
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel invalidpayloadexception
import org apache camel invalidtypeexception
import org apache camel message
import org apache camel nosuchbeanexception
import org apache camel nosuchendpointexception
import org apache camel nosuchheaderexception
import org apache camel nosuchpropertyexception
/**
* some helper methods for working with {@link exchange} objects
*
* @version $revision$
*/
public final class exchangehelper
/**
* utility classes should not have a public constructor.
*/
private exchangehelper
/**
* extracts the exchange property of the given name and type; if it is not present then the
* default value will be used
*
* @param exchange the message exchange
* @param propertyname the name of the property on the exchange
* @param type the expected type of the property
* @param defaultvalue the default value to be used if the property name does not exist or could not be
* converted to the given type
* @return the property value as the given type or the defaultvalue if it could not be found or converted
*/
public static <t> t getexchangeproperty exchange exchange  string propertyname  class<t> type  t defaultvalue
t answer   exchange getproperty propertyname  type
if  answer    null
return defaultvalue
return answer
/**
* attempts to resolve the endpoint for the given value
*
* @param exchange the message exchange being processed
* @param value the value which can be an {@link endpoint} or an object
*                which provides a string representation of an endpoint via
*                {@link #tostring()}
*
* @return the endpoint
* @throws nosuchendpointexception if the endpoint cannot be resolved
*/
@suppresswarnings
public static <e extends exchange> endpoint<e> resolveendpoint e exchange  object value
throws nosuchendpointexception
endpoint<e> endpoint
if  value instanceof endpoint
endpoint    endpoint<e> value
else
string uri   value tostring
endpoint   camelcontexthelper getmandatoryendpoint exchange getcontext    uri
return endpoint
public static <t> t getmandatoryproperty exchange exchange  string propertyname  class<t> type
throws nosuchpropertyexception
t answer   exchange getproperty propertyname  type
if  answer    null
throw new nosuchpropertyexception exchange  propertyname  type
return answer
public static <t> t getmandatoryheader exchange exchange  string propertyname  class<t> type
throws nosuchheaderexception
t answer   exchange getin   getheader propertyname  type
if  answer    null
throw new nosuchheaderexception exchange  propertyname  type
return answer
/**
* returns the mandatory inbound message body of the correct type or throws
* an exception if it is not present
*/
public static object getmandatoryinbody exchange exchange  throws invalidpayloadexception
object answer   exchange getin   getbody
if  answer    null
throw new invalidpayloadexception exchange  object class
return answer
/**
* returns the mandatory inbound message body of the correct type or throws
* an exception if it is not present
*/
public static <t> t getmandatoryinbody exchange exchange  class<t> type  throws invalidpayloadexception
t answer   exchange getin   getbody type
if  answer    null
throw new invalidpayloadexception exchange  type
return answer
/**
* returns the mandatory outbound message body of the correct type or throws
* an exception if it is not present
*/
public static object getmandatoryoutbody exchange exchange  throws invalidpayloadexception
message out   exchange getout
object answer   out getbody
if  answer    null
throw new invalidpayloadexception exchange  object class  out
return answer
/**
* returns the mandatory outbound message body of the correct type or throws
* an exception if it is not present
*/
public static <t> t getmandatoryoutbody exchange exchange  class<t> type  throws invalidpayloadexception
message out   exchange getout
t answer   out getbody type
if  answer    null
throw new invalidpayloadexception exchange  type  out
return answer
/**
* converts the value to the given expected type or throws an exception
*/
public static <t> t converttomandatorytype exchange exchange  class<t> type  object value
throws invalidtypeexception
t answer   converttotype exchange  type  value
if  answer    null
throw new invalidtypeexception exchange  value  type
return answer
/**
* converts the value to the given expected type returning null if it could
* not be converted
*/
public static <t> t converttotype exchange exchange  class<t> type  object value
return exchange getcontext   gettypeconverter   convertto type  value
/**
* copies the results of a message exchange from the source exchange to the result exchange
* which will copy the out and fault message contents and the exception
*
* @param result the result exchange which will have the output and error state added
* @param source the source exchange which is not modified
*/
public static void copyresults exchange result  exchange source
if  result    source
result setexception source getexception
message fault   source getfault false
if  fault    null
result getfault true  copyfrom fault
message out   source getout false
if  out    null
result getout true  copyfrom out
else
// no results so lets copy the last input
// as the final processor on a pipeline might not
// have created any out; such as a mock:endpoint
// so lets assume the last in is the out
result getout true  copyfrom source getin
result getproperties   clear
result getproperties   putall source getproperties
/**
* returns true if the given exchange pattern (if defined) can support in messagea
*
* @param exchange the exchange to interrogate
* @return true if the exchange is defined as an {@link exchangepattern} which supports
* in messages
*/
public static boolean isincapable exchange exchange
exchangepattern pattern   exchange getpattern
return pattern    null    pattern isincapable
/**
* returns true if the given exchange pattern (if defined) can support out messagea
*
* @param exchange the exchange to interrogate
* @return true if the exchange is defined as an {@link exchangepattern} which supports
* out messages
*/
public static boolean isoutcapable exchange exchange
exchangepattern pattern   exchange getpattern
return pattern    null    pattern isoutcapable
/**
* creates a new instance of the given type from the injector
*/
public static <t> t newinstance exchange exchange  class<t> type
return exchange getcontext   getinjector   newinstance type
/**
* creates a map of the variables which are made available to a script or template
*
* @param exchange the exchange to make available
* @return a map populated with the require dvariables
*/
public static map createvariablemap exchange exchange
map answer   new hashmap
populatevariablemap exchange  answer
return answer
/**
* populates the map with the variables which are made available to a script or template
*
* @param exchange the exchange to make available
* @param map      the map to populate
*/
public static void populatevariablemap exchange exchange  map map
map put    exchange
message in   exchange getin
map put    in
map put    in
map put    in getheaders
map put    in getbody
if  isoutcapable exchange
message out   exchange getout true
map put    out
map put    out
map put    exchange getcontext
/**
* returns the mime content type on the input message or null if one is not defined
*/
public static string getcontenttype exchange exchange
return exchange getin   getheader    string class
/**
* performs a lookup in the registry of the mandatory bean name and throws an exception if it could not be found
*/
public static object lookupmandatorybean exchange exchange  string name
object value   lookupbean exchange  name
if  value    null
throw new nosuchbeanexception name
return value
/**
* performs a lookup in the registry of the mandatory bean name and throws an exception if it could not be found
*/
public static <t> t lookupmandatorybean exchange exchange  string name  class<t> type
t value   lookupbean exchange  name  type
if  value    null
throw new nosuchbeanexception name
return value
/**
* performs a lookup in the registry of the bean name
*/
public static object lookupbean exchange exchange  string name
return exchange getcontext   getregistry   lookup name
/**
* performs a lookup in the registry of the bean name and type
*/
public static <t> t lookupbean exchange exchange  string name  class<t> type
return exchange getcontext   getregistry   lookup name  type