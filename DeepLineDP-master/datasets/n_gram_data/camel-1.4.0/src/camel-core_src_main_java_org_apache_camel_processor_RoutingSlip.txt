/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel endpoint
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel message
import org apache camel processor
import org apache camel producer
import org apache camel impl producercache
import org apache camel impl servicesupport
import org apache camel model routingsliptype
import org apache camel util collectionstringbuffer
import org apache camel util exchangehelper
import org apache commons logging log
import org apache commons logging logfactory
import static org apache camel util objecthelper notnull
/**
* implements a <a
* href="http://activemq.apache.org/camel/routing-slip.html">routing slip</a>
* pattern where the list of actual endpoints to send a message exchange to are
* dependent on the value of a message header.
*/
public class routingslip extends servicesupport implements processor
private static final transient log log   logfactory getlog routingslip class
private final string header
private final string uridelimiter
private producercache<exchange> producercache   new producercache<exchange>
public routingslip string header
this header  routingsliptype default_delimiter
public routingslip string header  string uridelimiter
notnull header
notnull uridelimiter
this header   header
this uridelimiter   uridelimiter
@override
public string tostring
return     header       uridelimiter
public void process exchange exchange  throws exception
message message   exchange getin
string recipients   recipients message
exchange current   exchange
for  string nextrecipient   recipients
endpoint<exchange> endpoint   resolveendpoint exchange  nextrecipient
producer<exchange> producer   producercache getproducer endpoint
exchange ex   endpoint createexchange exchangepattern inout
updateroutingslip current
copyouttoin ex  current
producer process ex
current   ex
exchangehelper copyresults exchange  current
protected endpoint<exchange> resolveendpoint exchange exchange  object recipient
return exchangehelper resolveendpoint exchange  recipient
protected void dostop   throws exception
producercache stop
protected void dostart   throws exception
private void updateroutingslip exchange current
message message   getresultmessage current
message setheader header  removefirstelement recipients message
/**
* returns the outbound message if available. otherwise return the inbound
* message.
*/
private message getresultmessage exchange exchange
message message   exchange getout false
// if this endpoint had no out (like a mock endpoint)
// just take the in
if  message    null
message   exchange getin
return message
/**
* return the list of recipients defined in the routing slip in the
* specified message.
*/
private string recipients message message
object headervalue   message getheader header
if  headervalue    null     headervalue equals
return headervalue tostring   split uridelimiter
return new string
/**
* return a string representation of the element list with the first element
* removed.
*/
private string removefirstelement string elements
collectionstringbuffer updatedelements   new collectionstringbuffer uridelimiter
for  int i   1  i < elements length  i
updatedelements append elements
return updatedelements tostring
/**
* copy the outbound data in 'source' to the inbound data in 'result'.
*/
private void copyouttoin exchange result  exchange source
result setexception source getexception
message fault   source getfault false
if  fault    null
result getfault true  copyfrom fault
result setin getresultmessage source
result getproperties   clear
result getproperties   putall source getproperties