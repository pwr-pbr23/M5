/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model language
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import org apache camel exchange
import org apache camel expression
import org apache camel predicate
import org apache camel language bean beanexpression
import org apache camel spi routecontext
/**
* for expresions and predicates using the
* <a href="http://activemq.apache.org/camel/bean-language.html">bean language</a>
*
* @version $revision$
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class methodcallexpression extends expressiontype
@xmlattribute required   false
private string bean
@xmlattribute required   false
private string method
public methodcallexpression
public methodcallexpression string beanname
super beanname
public methodcallexpression string beanname  string method
super beanname
this method   method
public string getlanguage
return
public string getmethod
return method
public void setmethod string method
this method   method
@override
public expression createexpression routecontext routecontext
return new beanexpression beanname    getmethod
@override
public predicate<exchange> createpredicate routecontext routecontext
return new beanexpression<exchange> beanname    getmethod
protected string beanname
if  bean    null
return bean
return getexpression