/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel example cxf provider
import java util list
import javax xml namespace qname
import javax xml soap messagefactory
import javax xml soap soapbody
import javax xml soap soapbodyelement
import javax xml soap soapelement
import javax xml soap soapenvelope
import javax xml soap soapexception
import javax xml soap soapmessage
import javax xml soap soappart
import org apache camel exchange
/**
* a simple bean demonstrating the processing of a soapmessage routed by camel
*
*/
//start snippet: e1
public class testerbean
public soapmessage processsoap exchange exchange
// since the camel-cxf endpoint uses a list to store the parameters
// and bean component uses the bodyas expression to get the value
// we'll need to deal with the parameters ourself
soapmessage soapmessage    soapmessage exchange getin   getbody list class  get 0
if  soapmessage    null
system out println
return createdefaultsoapmessage
try
soappart sp   soapmessage getsoappart
soapenvelope se   sp getenvelope
soapbody sb   se getbody
string requesttext   sb getfirstchild   gettextcontent
system out println requesttext
return createdefaultsoapmessage    requesttext
catch  exception e
e printstacktrace
return createdefaultsoapmessage    e getclass   getname
public static soapmessage createdefaultsoapmessage string responsemessage  string requestmessage
try
soapmessage soapmessage   messagefactory newinstance   createmessage
soapbody body   soapmessage getsoappart   getenvelope   getbody
qname payloadname   new qname
soapbodyelement payload   body addbodyelement payloadname
soapelement message   payload addchildelement
message addtextnode responsemessage       requestmessage
return soapmessage
catch  soapexception e
e printstacktrace
throw new runtimeexception e
//end snippet: e1