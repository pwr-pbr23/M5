/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import org apache camel asyncprocessor
import org apache camel consumer
import org apache camel endpoint
import org apache camel exchange
import org apache camel processor
import org apache camel impl converter asyncprocessortypeconverter
import org apache camel spi exceptionhandler
import org apache camel util servicehelper
/**
* a default consumer useful for implementation inheritance.
*
* @version $revision$
*/
public class defaultconsumer<e extends exchange> extends servicesupport implements consumer<e>
private endpoint<e> endpoint
private processor processor
private asyncprocessor asyncprocessor
private exceptionhandler exceptionhandler
public defaultconsumer endpoint<e> endpoint  processor processor
this endpoint   endpoint
this processor   processor
@override
public string tostring
return     endpoint
public endpoint<e> getendpoint
return endpoint
public processor getprocessor
return processor
/**
* provides an {@link asyncprocessor} interface to the configured
* processor on the consumer.  if the processor does not implement
* the interface, it will be adapted so that it does.
*/
public asyncprocessor getasyncprocessor
if  asyncprocessor    null
asyncprocessor   asyncprocessortypeconverter convert processor
return asyncprocessor
public exceptionhandler getexceptionhandler
if  exceptionhandler    null
exceptionhandler   new loggingexceptionhandler getclass
return exceptionhandler
public void setexceptionhandler exceptionhandler exceptionhandler
this exceptionhandler   exceptionhandler
protected void dostop   throws exception
servicehelper stopservices processor
protected void dostart   throws exception
servicehelper startservices processor
/**
* handles the given exception using the {@link #getexceptionhandler()}
*
* @param t the exception to handle
*/
protected void handleexception throwable t
getexceptionhandler   handleexception t