/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel bam model
import java util date
import javax persistence cascadetype
import javax persistence entity
import javax persistence fetchtype
import javax persistence generatedvalue
import javax persistence id
import javax persistence manytoone
import javax persistence temporal
import javax persistence temporaltype
import javax persistence transient
import org apache camel bam processor processcontext
import org apache camel bam rules activityrules
import org apache camel util objecthelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* the default state for a specific activity within a process
*
* @version $revision$
*/
@entity
public class activitystate extends temporalentity
private static final transient log log   logfactory getlog activitystate class
private processinstance processinstance
private integer receivedmessagecount   0
private activitydefinition activitydefinition
private date timeexpected
@temporal temporaltype time
private date timeoverdue
private integer escalationlevel   0
// this crap is required to work around a bug in hibernate
@override
@id
@generatedvalue
public long getid
return super getid
@override
public string tostring
return     getid         getprocessinstance         getactivitydefinition
public synchronized void processexchange activityrules activityrules  processcontext context  throws exception
int messagecount   0
integer count   getreceivedmessagecount
if  count    null
messagecount   count intvalue
setreceivedmessagecount   messagecount
if  messagecount    1
onfirstmessage context
int expectedmessages   activityrules getexpectedmessages
if  messagecount    expectedmessages
onexpectedmessage context
else if  messagecount > expectedmessages
onexcessmessage context
/**
* returns true if this state is for the given activity
*/
public boolean isactivity activityrules activityrules
return objecthelper equal getactivitydefinition    activityrules getactivitydefinition
// properties
// -----------------------------------------------------------------------
@manytoone fetch   fetchtype lazy  cascade    cascadetype persist  cascadetype merge
public processinstance getprocessinstance
return processinstance
public void setprocessinstance processinstance processinstance
this processinstance   processinstance
processinstance getactivitystates   add this
@manytoone fetch   fetchtype lazy  cascade    cascadetype persist  cascadetype merge
public activitydefinition getactivitydefinition
return activitydefinition
public void setactivitydefinition activitydefinition activitydefinition
this activitydefinition   activitydefinition
public integer getescalationlevel
return escalationlevel
public void setescalationlevel integer escalationlevel
this escalationlevel   escalationlevel
public integer getreceivedmessagecount
return receivedmessagecount
public void setreceivedmessagecount integer receivedmessagecount
this receivedmessagecount   receivedmessagecount
@temporal temporaltype time
public date gettimeexpected
return timeexpected
public void settimeexpected date timeexpected
this timeexpected   timeexpected
@temporal temporaltype time
public date gettimeoverdue
return timeoverdue
public void settimeoverdue date timeoverdue
this timeoverdue   timeoverdue
public void settimecompleted date timecompleted
super settimecompleted timecompleted
if  timecompleted    null
setescalationlevel  1
@transient
public string getcorrelationkey
processinstance pi   getprocessinstance
if  pi    null
return null
return pi getcorrelationkey
// implementation methods
// -----------------------------------------------------------------------
/**
* called when the first message is reached
*/
protected void onfirstmessage processcontext context
if   isstarted
settimestarted currenttime
context onstarted this
if  log isdebugenabled
log debug     this
/**
* called when the expected number of messages are is reached
*/
protected void onexpectedmessage processcontext context
if   iscompleted
settimecompleted currenttime
// must also clear overdue otherwise we will get failures
settimeoverdue null
context oncompleted this
if  log isdebugenabled
log debug     this
/**
* called when an excess message (after the expected number of messages) are
* received
*/
protected void onexcessmessage processcontext context
// todo
protected date currenttime
return new date