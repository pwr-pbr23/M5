/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor resequencer
/**
* a container for objects to be resequenced. this container can be scheduled
* for timing out. non-scheduled objects or already timed-out objects are ready
* for being released by the {@link resequencerengine}.
*
* @author martin krasser
*
* @version $revision
*/
class element<e> implements timeouthandler
/**
* the contained object.
*/
private e object
/**
* not <code>null</code> if this element is currently beeing scheduled for
* timing out.
*/
private timeout timeout
/**
* creates a new container instance.
*
* @param object contained object.
*/
public element e object
this object   object
/**
* returns the contained object.
*
* @return the contained object.
*/
public e getobject
return object
/**
* returns <code>true</code> if this element is currently scheduled for
* timing out.
*
* @return <code>true</code> if scheduled or <code>false</code> if not
*         scheduled or already timed-out.
*/
public synchronized boolean scheduled
return timeout    null
/**
* schedules the given timeout task. before this methods calls the
* {@link timeout#schedule()} method it adds this element as timeout
* listener.
*
* @param t a timeout task.
*/
public synchronized void schedule timeout t
this timeout   t
this timeout addtimeouthandlerfirst this
this timeout schedule
/**
* cancels the scheduled timeout for this element. if this element is not
* scheduled or has already timed-out this method has no effect.
*/
public synchronized void cancel
if  timeout    null
timeout cancel
timeout null
/**
* marks this element as timed-out.
*
* @param t timeout task that caused the notification.
*/
public synchronized void timeout timeout t
this timeout   null