/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel management
import java io ioexception
import java lang management managementfactory
import java net inetaddress
import java net unknownhostexception
import java rmi remoteexception
import java rmi registry locateregistry
import java util hashset
import java util list
import java util set
import javax management instancealreadyexistsexception
import javax management jmexception
import javax management mbeanserver
import javax management mbeanserverfactory
import javax management notcompliantmbeanexception
import javax management objectinstance
import javax management objectname
import javax management modelmbean invalidtargetobjecttypeexception
import javax management modelmbean modelmbeaninfo
import javax management modelmbean requiredmodelmbean
import javax management remote jmxconnectorserver
import javax management remote jmxconnectorserverfactory
import javax management remote jmxserviceurl
import org apache camel impl servicesupport
import org apache camel spi instrumentationagent
import org apache commons logging log
import org apache commons logging logfactory
import org springframework jmx export annotation annotationjmxattributesource
import org springframework jmx export assembler metadatambeaninfoassembler
/**
* default implementation of the camel jmx service agent
*/
public class defaultinstrumentationagent extends servicesupport implements instrumentationagent
public static final string default_domain
public static final string default_host
public static final int default_registry_port   1099
public static final int default_connection_port    1
public static final string default_service_url_path
private static final transient log log   logfactory getlog defaultinstrumentationagent class
private mbeanserver server
private set<objectname> mbeans   new hashset<objectname>
private metadatambeaninfoassembler assembler
private jmxconnectorserver cs
private integer registryport
private integer connectorport
private string mbeanserverdefaultdomain
private string mbeanobjectdomainname
private string serviceurlpath
private boolean useplatformmbeanserver
private boolean createconnector
protected void finalizesettings
if  registryport    null
registryport   integer getinteger jmxsystempropertykeys registry_port
default_registry_port
if  connectorport    null
connectorport   integer getinteger jmxsystempropertykeys connector_port
default_connection_port
if  mbeanserverdefaultdomain    null
mbeanserverdefaultdomain
system getproperty jmxsystempropertykeys domain  default_domain
if  mbeanobjectdomainname    null
mbeanobjectdomainname
system getproperty jmxsystempropertykeys mbean_domain  default_domain
if  serviceurlpath    null
serviceurlpath
system getproperty jmxsystempropertykeys service_url_path
default_service_url_path
if  createconnector    null
createconnector   boolean getboolean jmxsystempropertykeys create_connector
if  useplatformmbeanserver    null
useplatformmbeanserver
boolean getboolean jmxsystempropertykeys use_platform_mbs
public void setregistryport integer value
registryport   value
public void setconnectorport integer value
connectorport   value
public void setmbeanserverdefaultdomain string value
mbeanserverdefaultdomain   value
public void setmbeanobjectdomainname string value
mbeanobjectdomainname   value
public void setserviceurlpath string value
serviceurlpath   value
public void setcreateconnector boolean flag
createconnector   flag
public void setuseplatformmbeanserver boolean flag
useplatformmbeanserver   flag
public mbeanserver getmbeanserver
return server
public void register object obj  objectname name  throws jmexception
register obj  name  false
public void register object obj  objectname name  boolean forceregistration  throws jmexception
try
registermbeanwithserver obj  name  forceregistration
catch  notcompliantmbeanexception e
// if this is not a "normal" mbean, then try to deploy it using jmx
// annotations
modelmbeaninfo mbi   null
mbi   assembler getmbeaninfo obj  name tostring
requiredmodelmbean mbean    requiredmodelmbean server instantiate requiredmodelmbean class
getname
mbean setmodelmbeaninfo mbi
try
mbean setmanagedresource obj
catch  invalidtargetobjecttypeexception itotex
throw new jmexception itotex getmessage
registermbeanwithserver mbean  name  forceregistration
public void unregister objectname name  throws jmexception
server unregistermbean name
protected void dostart   throws exception
assembler   new metadatambeaninfoassembler
assembler setattributesource new annotationjmxattributesource
// create mbean server if is has not be injected.
if  server    null
finalizesettings
creatembeanserver
if  log isdebugenabled
log debug     getmbeanserver
protected void dostop   throws exception
// close jmx connector
if  cs    null
try
cs stop
catch  ioexception e
// ignore
cs   null
// using the array to hold the busmbeans to avoid the
// currentmodificationexception
object mbeans   mbeans toarray
int caught   0
for  object name   mbeans
mbeans remove  objectname name
try
unregister  objectname name
catch  jmexception jmex
log info    jmex
caught
if  caught > 0
log warn     caught
private void registermbeanwithserver object obj  objectname name  boolean forceregistration
throws jmexception
// have we already registered the bean, there can be shared instances in the camel routes
boolean exists   server isregistered name
if  exists
if  forceregistration
log info
server unregistermbean name
else
// okay ignore we do not want to force it and it could be a shared instance
if  log isdebugenabled
log debug     name
// register bean if by force or not exsists
objectinstance instance   null
if  forceregistration     exists
if  log istraceenabled
log trace     name
instance   server registermbean obj  name
if  instance    null
objectname registeredname   instance getobjectname
if  log isdebugenabled
log debug     registeredname
mbeans add registeredname
protected void creatembeanserver
string hostname   default_host
boolean canaccesssystemprops   true
try
// we'll do it this way mostly to determine if we should lookup the
// hostname
securitymanager sm   system getsecuritymanager
if  sm    null
sm checkpropertiesaccess
catch  securityexception se
canaccesssystemprops   false
if  canaccesssystemprops
try
hostname   inetaddress getlocalhost   gethostname
catch  unknownhostexception uhe
log info
default_registry_port  uhe
hostname   default_host
else
hostname   default_host
server   findorcreatembeanserver
try
// create the connector if we need
if  createconnector
createjmxconnector hostname
catch  ioexception ioe
log warn    ioe
@suppresswarnings
protected mbeanserver findorcreatembeanserver
// return platform mbean server if the option is specified.
if  boolean getboolean jmxsystempropertykeys use_platform_mbs     useplatformmbeanserver
return managementfactory getplatformmbeanserver
// look for the first mbean server that has match default domain name
list<mbeanserver> servers
list<mbeanserver> mbeanserverfactory findmbeanserver null
for  mbeanserver server   servers
if  log isdebugenabled
log debug     server getdefaultdomain
if  mbeanserverdefaultdomain equals server getdefaultdomain
return server
// create a mbean server with the given default domain name
return mbeanserverfactory creatembeanserver mbeanserverdefaultdomain
protected void createjmxconnector string host  throws ioexception
try
locateregistry createregistry registryport
if  log isdebugenabled
log debug     registryport
catch  remoteexception ex
// the registry may had been created, we could get the registry instead
// create an rmi connector and start it
jmxserviceurl url
if  connectorport > 0
url   new jmxserviceurl     host       connectorport       host
registryport   serviceurlpath
else
url   new jmxserviceurl     host       registryport
serviceurlpath
cs   jmxconnectorserverfactory newjmxconnectorserver url  null  server
// start the connector server asynchronously (in a separate thread).
thread connectorthread   new thread
public void run
try
cs start
catch  ioexception ioe
log warn    ioe
connectorthread setname     url
connectorthread start
log info     url
public string getmbeanobjectdomainname
return mbeanobjectdomainname
public void setserver mbeanserver value
server   value