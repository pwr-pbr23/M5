/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel language juel
import java lang reflect method
import java lang reflect modifier
import java util arraylist
import java util list
import javax el beanelresolver
import javax el elcontext
import javax el propertynotfoundexception
/**
* an extension of the juel {@link beanelresolver} which also supports the resolving of methods
*
* @version $revision$
*/
public class beanandmethodelresolver extends beanelresolver
public beanandmethodelresolver
super false
@override
public object getvalue elcontext elcontext  object base  object property
try
return super getvalue elcontext  base  property
catch  propertynotfoundexception e
// lets see if its a method call...
method method   findmethod elcontext  base  property
if  method    null
elcontext setpropertyresolved true
return method
else
throw e
protected method findmethod elcontext elcontext  object base  object property
if  base    null    property instanceof string
method methods   base getclass   getmethods
list<method> matching   new arraylist<method>
for  method method   methods
if  method getname   equals property     modifier ispublic method getmodifiers
matching add method
int size   matching size
if  size > 0
if  size > 1
// todo there's currently no way for juel to tell us how many parameters there are
// so lets just pick the first one that has a single param by default
for  method method   matching
class<?> paramtypes   method getparametertypes
if  paramtypes length    1
return method
// lets default to the first one
return matching get 0
return null