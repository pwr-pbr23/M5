/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util concurrent blockingqueue
import java util concurrent linkedblockingqueue
import org apache camel exchange
import org apache camel processor
import org apache camel processor resequencer resequencerengine
import org apache camel processor resequencer sequenceelementcomparator
import org apache camel processor resequencer sequencesender
/**
* a resequencer that re-orders a (continuous) stream of {@link exchange}s. the
* algorithm implemented by {@link resequencerengine} is based on the detection
* of gaps in a message stream rather than on a fixed batch size. gap detection
* in combination with timeouts removes the constraint of having to know the
* number of messages of a sequence (i.e. the batch size) in advance.
* <p>
* messages must contain a unique sequence number for which a predecessor and a
* successor is known. for example a message with the sequence number 3 has a
* predecessor message with the sequence number 2 and a successor message with
* the sequence number 4. the message sequence 2,3,5 has a gap because the
* sucessor of 3 is missing. the resequencer therefore has to retain message 5
* until message 4 arrives (or a timeout occurs).
*
* @author martin krasser
*
* @version $revision$
*/
public class streamresequencer extends delegateprocessor implements processor
private resequencerengine<exchange> reseq
private blockingqueue<exchange> queue
private sequencesender sender
/**
* creates a new {@link streamresequencer} instance.
*
* @param processor
*            the next processor that processes the re-ordered exchanges.
* @param comparator
*            a {@link sequenceelementcomparator} for comparing sequence
*            number contained in {@link exchange}s.
* @param capacity
*            the capacity of the inbound queue.
*/
public streamresequencer processor processor  sequenceelementcomparator<exchange> comparator  int capacity
super processor
queue   new linkedblockingqueue<exchange>
reseq   new resequencerengine<exchange> comparator  capacity
reseq setoutqueue queue
@override
protected void dostart   throws exception
super dostart
sender   new sequencesender getprocessor
sender setqueue queue
sender start
@override
protected void dostop   throws exception
reseq stop
sender cancel
super dostop
@override
public void process exchange exchange  throws exception
reseq put exchange
public long gettimeout
return reseq gettimeout
public void settimeout long timeout
reseq settimeout timeout
@override
public string tostring
return     getprocessor