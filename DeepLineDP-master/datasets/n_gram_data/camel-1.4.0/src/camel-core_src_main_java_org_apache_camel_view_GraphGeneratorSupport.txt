/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel view
import java io file
import java io filewriter
import java io ioexception
import java io printwriter
import java util arraylist
import java util hashmap
import java util list
import java util map
import java util set
import org apache camel camelcontext
import org apache camel model choicetype
import org apache camel model fromtype
import org apache camel model multicasttype
import org apache camel model processortype
import org apache camel model routetype
import org apache camel model totype
import org apache camel model language expressiontype
import org apache camel util collectionstringbuffer
import org apache commons logging log
import org apache commons logging logfactory
/**
* @version $revision$
*/
public abstract class graphgeneratorsupport
private static final transient log log   logfactory getlog routedotgenerator class
protected string dir
protected int clustercounter
protected string extension
//private string imageprefix = "http://www.enterpriseintegrationpatterns.com/img/";
private string imageprefix
private map<object  nodedata> nodemap   new hashmap<object  nodedata>
private boolean makeparentdirs   true
private map<string  list<routetype>> routegroupmap
protected graphgeneratorsupport string dir  string extension
this dir   dir
this extension   extension
public string getdir
return dir
/**
* sets the destination directory in which to create the diagrams
*/
public void setdir string dir
this dir   dir
public void drawroutes camelcontext context  throws ioexception
file parent   new file dir
if  makeparentdirs
parent mkdirs
list<routetype> routes   context getroutedefinitions
routegroupmap   createroutegroupmap routes
// generate the global file
generatefile parent      extension  routegroupmap
if  routegroupmap size   >  1
set<map entry<string  list<routetype>>> entries   routegroupmap entryset
for  map entry<string  list<routetype>> entry   entries
map<string  list<routetype>> map   new hashmap<string  list<routetype>>
string group   entry getkey
map put group  entry getvalue
// generate the file containing just the routes in this group
generatefile parent  group   extension  map
private void generatefile file parent  string filename  map<string  list<routetype>> map  throws ioexception
nodemap clear
clustercounter   0
printwriter writer   new printwriter new filewriter new file parent  filename
try
generatefile writer  map
finally
writer close
protected abstract void generatefile printwriter writer  map<string  list<routetype>> map
protected boolean ismulticastnode processortype node
return node instanceof multicasttype    node instanceof choicetype
protected string getlabel list<expressiontype> expressions
collectionstringbuffer buffer   new collectionstringbuffer
for  expressiontype expression   expressions
buffer append getlabel expression
return buffer tostring
protected string getlabel expressiontype expression
if  expression    null
return expression getlabel
return
protected nodedata getnodedata object node
object key   node
if  node instanceof fromtype
fromtype fromtype    fromtype node
key   fromtype geturiorref
else if  node instanceof totype
totype totype    totype node
key   totype geturiorref
nodedata answer   nodemap get key
if  answer    null
string id        nodemap size     1
answer   new nodedata id  node  imageprefix
nodemap put key  answer
return answer
protected map<string  list<routetype>> createroutegroupmap list<routetype> routes
map<string  list<routetype>> map   new hashmap<string  list<routetype>>
for  routetype route   routes
string group   route getgroup
if  group    null
group
list<routetype> list   map get group
if  list    null
list   new arraylist<routetype>
map put group  list
list add route
return map