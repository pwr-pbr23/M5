/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf
import java io inputstream
import java util hashmap
import java util list
import java util map
import java util set
import org apache cxf endpoint client
import org apache cxf helpers castutils
import org apache cxf jaxws support contextpropertiesmapping
import org apache cxf message message
/**
* the binding/mapping of camel messages to apache cxf and back again
*
* @version $revision$
*/
public final class cxfbinding
private cxfbinding
// helper class
public static object extractbodyfromcxf cxfexchange exchange  message message
// todo how do we choose a format?
return getbody message
protected static object getbody message message
set<class<?>> contentformats   message getcontentformats
if  contentformats    null
for  class<?> contentformat   contentformats
object answer   message getcontent contentformat
if  answer    null
return answer
return null
public static message createcxfmessage cxfexchange exchange
message answer   exchange getinmessage
cxfmessage in   exchange getin
// check the body if the pojo parameter list first
object body   in getbody list class
if  body instanceof list
// just set the operation's parameter
answer setcontent list class  body
// just set the method name
answer put cxfconstants operation_name   string in getheader cxfconstants operation_name
answer put cxfconstants operation_namespace   string in getheader cxfconstants operation_namespace
else
// cxf uses stax which is based on the stream api to parse the xml,
// so the cxf transport is also based on the stream api.
// and the interceptors are also based on the stream api,
// so let's use an inputstream to host the cxf on wire message.
body   in getbody inputstream class
if  body instanceof inputstream
answer setcontent inputstream class  body
return answer
// store
public static void storecxfresponse cxfexchange exchange  message response
// no need to process headers as we use the cxf message
cxfmessage out   exchange getout
if  response    null
out setmessage response
dataformat dataformat    dataformat  exchange getproperty cxfexchange data_format
if  dataformat equals dataformat message
out setbody response getcontent inputstream class
if  dataformat equals dataformat payload
out setbody response
// copy the camel message to cxf message
public static void copymessage org apache camel message camelmessage  org apache cxf message message cxfmessage
inputstream is   camelmessage getbody inputstream class
if  is    null
cxfmessage setcontent inputstream class  is
else
object result   camelmessage getbody
if  result    null
if  result instanceof inputstream
cxfmessage setcontent inputstream class  result
else
cxfmessage setcontent result getclass    result
public static void storecxfresponsecontext message response  map<string  object> context
if  context    null
contextpropertiesmapping mapresponsefromcxf2jaxws context
response put client response_context  context
public static void storecxfresponse cxfexchange exchange  object response
cxfmessage out   exchange getout
if  response    null
out setbody response
public static void storecxffault cxfexchange exchange  message message
cxfmessage fault   exchange getfault
if  fault    null
fault setbody getbody message
public static map<string  object> propogatecontext message message  map<string  object> context
map<string  object> requestcontext   castutils cast  map message get client request_context
map<string  object> responsecontext   castutils cast  map message get client response_context
// todo map the jaxws properties to cxf
if  requestcontext    null
contextpropertiesmapping maprequestfromjaxws2cxf requestcontext
if  responsecontext    null
responsecontext   new hashmap<string  object>
else
// clear the response context
responsecontext clear
context put client request_context  requestcontext
context put client response_context  responsecontext
return responsecontext