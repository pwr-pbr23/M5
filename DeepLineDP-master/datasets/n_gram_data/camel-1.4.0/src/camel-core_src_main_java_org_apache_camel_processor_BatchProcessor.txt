/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util collection
import java util iterator
import org apache camel endpoint
import org apache camel exchange
import org apache camel pollingconsumer
import org apache camel processor
import org apache camel impl loggingexceptionhandler
import org apache camel impl servicesupport
import org apache camel spi exceptionhandler
import org apache camel util servicehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* a base class for any kind of {@link processor} which implements some kind of
* batch processing.
*
* @version $revision$
*/
public class batchprocessor extends servicesupport implements runnable  processor
public static final long default_batch_timeout   1000l
public static final int default_batch_size   100
private static final transient log log   logfactory getlog batchprocessor class
private endpoint endpoint
private processor processor
private collection<exchange> collection
private long batchtimeout   default_batch_timeout
private int batchsize   default_batch_size
private pollingconsumer consumer
private exceptionhandler exceptionhandler
public batchprocessor endpoint endpoint  processor processor  collection<exchange> collection
this endpoint   endpoint
this processor   processor
this collection   collection
@override
public string tostring
return     processor
public void run
log debug     this
while  isrunallowed
try
processbatch
catch  exception e
getexceptionhandler   handleexception e
collection clear
// properties
// -------------------------------------------------------------------------
public exceptionhandler getexceptionhandler
if  exceptionhandler    null
exceptionhandler   new loggingexceptionhandler getclass
return exceptionhandler
public void setexceptionhandler exceptionhandler exceptionhandler
this exceptionhandler   exceptionhandler
public int getbatchsize
return batchsize
public void setbatchsize int batchsize
this batchsize   batchsize
public long getbatchtimeout
return batchtimeout
public void setbatchtimeout long batchtimeout
this batchtimeout   batchtimeout
public endpoint getendpoint
return endpoint
public processor getprocessor
return processor
/**
* a transactional method to process a batch of messages up to a timeout
* period or number of messages reached.
*/
protected synchronized void processbatch   throws exception
long start   system currenttimemillis
long end   start   batchtimeout
for  int i   0   isbatchcompleted i   i
long timeout   end   system currenttimemillis
if  timeout < 0l
log debug      i
break
exchange exchange   consumer receive timeout
if  exchange    null
log debug     timeout        i
break
collection add exchange
if  log isdebugenabled
log debug     batchsize       batchtimeout
collection
// lets send the batch
iterator<exchange> iter   collection iterator
while  iter hasnext
exchange exchange   iter next
iter remove
processexchange exchange
/**
* a strategy method to decide if the batch is completed the resulting exchanges should be sent
*/
protected boolean isbatchcompleted int index
return index >  batchsize
/**
* strategy method to process an exchange in the batch. this method allows
* derived classes to perform custom processing before or after an
* individual exchange is processed
*/
protected void processexchange exchange exchange  throws exception
processor process exchange
protected void dostart   throws exception
consumer   endpoint createpollingconsumer
servicehelper startservices processor  consumer
thread thread   new thread this  this
thread start
protected void dostop   throws exception
servicehelper stopservices consumer  processor
collection clear
protected collection<exchange> getcollection
return collection
public void process exchange exchange  throws exception
// empty since exchanges come from endpoint's polling consumer