/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor resequencer
import java util list
import org apache camel exchange
import org apache camel expression
/**
* compares elements of an {@link exchange} sequence by comparing
* <code>long</code> values returned by this comaprator's
* <code>expression</code>. the expression is set during route definition
* e.g.
*
* <pre>
*    ...resequencer(header(&quot;seqnum&quot;)).stream()...
* </pre>
*
* @author martin krasser
*
* @version $revision$
*/
public class defaultexchangecomparator implements expressionresultcomparator<exchange>
private expression<exchange> expression
public expression<exchange> getexpression
return expression
public void setexpression expression<exchange> expression
this expression   expression
@suppresswarnings
public void setexpressions list<expression> expressions
if  expressions isempty
throw new illegalargumentexception
else if  expressions size   > 1
throw new illegalargumentexception
expression   expressions get 0
public boolean predecessor exchange o1  exchange o2
long n1   getsequencenumber o1
long n2   getsequencenumber o2
return n1     n2   1l
public boolean successor exchange o1  exchange o2
long n1   getsequencenumber o1
long n2   getsequencenumber o2
return n2     n1   1l
public int compare exchange o1  exchange o2
long n1   getsequencenumber o1
long n2   getsequencenumber o2
return n1 compareto n2
private long getsequencenumber exchange exchange
return  long expression evaluate exchange