/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util map
/**
* template (named like spring's transactiontemplate & jmstemplate
* et al) for working with camel and sending {@link message} instances in an
* {@link exchange} to an {@link endpoint}.
*
* @version $revision$
*/
public interface producertemplate<e extends exchange> extends service
/**
* sends the exchange to the default endpoint
*
* @param exchange the exchange to send
*/
e send e exchange
/**
* sends an exchange to the default endpoint using a supplied
*
* @param processor the transformer used to populate the new exchange
* {@link processor} to populate the exchange
*/
e send processor processor
/**
* sends the body to the default endpoint and returns the result content
*
* @param body the body to send
* @return the returned message body
*/
object sendbody object body
/**
* sends the body to the default endpoint with a specified header and header
* value
*
* @param body        the payload send
* @param header      the header name
* @param headervalue the header value
* @return the result
*/
object sendbodyandheader object body  string header  object headervalue
/**
* sends the body to the default endpoint with the specified headers and
* header values
*
* @param body the payload send
* @return the result
*/
object sendbodyandheaders object body  map<string  object> headers
// allow sending to arbitrary endpoints
// -----------------------------------------------------------------------
/**
* sends the exchange to the given endpoint
*
* @param endpointuri the endpoint uri to send the exchange to
* @param exchange    the exchange to send
*/
e send string endpointuri  e exchange
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpointuri the endpoint uri to send the exchange to
* @param processor   the transformer used to populate the new exchange
* {@link processor} to populate the exchange
*/
e send string endpointuri  processor processor
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpointuri the endpoint uri to send the exchange to
* @param pattern     the message {@link exchangepattern} such as
*                    {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param processor   the transformer used to populate the new exchange
* {@link processor} to populate the exchange
*/
e send string endpointuri  exchangepattern pattern  processor processor
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpointuri the endpoint uri to send the exchange to
* @param processor   the transformer used to populate the new exchange
* {@link processor} to populate the exchange.
* @param callback    the callback will be called when the exchange is completed.
*/
e send string endpointuri  processor processor  asynccallback callback
/**
* sends the exchange to the given endpoint
*
* @param endpoint the endpoint to send the exchange to
* @param exchange the exchange to send
*/
e send endpoint<e> endpoint  e exchange
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpoint  the endpoint to send the exchange to
* @param processor the transformer used to populate the new exchange
* {@link processor} to populate the exchange
*/
e send endpoint<e> endpoint  processor processor
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpoint  the endpoint to send the exchange to
* @param pattern   the message {@link exchangepattern} such as
*                  {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param processor the transformer used to populate the new exchange
* {@link processor} to populate the exchange
*/
e send endpoint<e> endpoint  exchangepattern pattern  processor processor
/**
* sends an exchange to an endpoint using a supplied processor
*
* @param endpoint  the endpoint to send the exchange to
* @param processor the transformer used to populate the new exchange
* {@link processor} to populate the exchange.
* @param callback  the callback will be called when the exchange is completed.
*/
e send endpoint<e> endpoint  processor processor  asynccallback callback
/**
* send the body to an endpoint returning any result output body
*
* @param endpoint   the endpoint to send the exchange to
* @param body       the payload
* @return the result
*/
object sendbody endpoint<e> endpoint  object body
/**
* send the body to an endpoint returning any result output body
*
* @param endpointuri   the endpoint uri to send the exchange to
* @param body          the payload
* @return the result
*/
object sendbody string endpointuri  object body
/**
* send the body to an endpoint with the given {@link exchangepattern}
* returning any result output body
*
* @param endpoint      the endpoint to send the exchange to
* @param body          the payload
* @param pattern       the message {@link exchangepattern} such as
*   {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @return the result
*/
object sendbody endpoint<e> endpoint  exchangepattern pattern  object body
/**
* send the body to an endpoint returning any result output body
*
* @param endpointuri   the endpoint uri to send the exchange to
* @param pattern       the message {@link exchangepattern} such as
*   {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param body          the payload
* @return the result
*/
object sendbody string endpointuri  exchangepattern pattern  object body
/**
* sends the body to an endpoint with a specified header and header value
*
* @param endpointuri the endpoint uri to send to
* @param body the payload send
* @param header the header name
* @param headervalue the header value
* @return the result
*/
object sendbodyandheader string endpointuri  object body  string header
object headervalue
/**
* sends the body to an endpoint with a specified header and header value
*
* @param endpoint the endpoint to send to
* @param body the payload send
* @param header the header name
* @param headervalue the header value
* @return the result
*/
object sendbodyandheader endpoint endpoint  object body  string header
object headervalue
/**
* sends the body to an endpoint with a specified header and header value
*
* @param endpoint the endpoint to send to
* @param pattern the message {@link exchangepattern} such as
*   {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param body the payload send
* @param header the header name
* @param headervalue the header value
* @return the result
*/
object sendbodyandheader endpoint endpoint  exchangepattern pattern  object body  string header
object headervalue
/**
* sends the body to an endpoint with a specified header and header value
*
* @param endpoint the endpoint uri to send to
* @param pattern the message {@link exchangepattern} such as
*   {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param body the payload send
* @param header the header name
* @param headervalue the header value
* @return the result
*/
object sendbodyandheader string endpoint  exchangepattern pattern  object body  string header
object headervalue
/**
* sends the body to an endpoint with the specified headers and header
* values
*
* @param endpointuri the endpoint uri to send to
* @param body the payload send
* @return the result
*/
object sendbodyandheaders string endpointuri  object body  map<string  object> headers
/**
* sends the body to an endpoint with the specified headers and header
* values
*
* @param endpoint the endpoint uri to send to
* @param body the payload send
* @return the result
*/
object sendbodyandheaders endpoint endpoint  object body  map<string  object> headers
// methods using an inout exchangepattern
// -----------------------------------------------------------------------
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpoint  the endpoint to send to
* @param processor the processor which will populate the exchange before sending
* @return the result
*/
e request endpoint<e> endpoint  processor processor
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpoint the endpoint to send to
* @param body     the payload
* @return the result
*/
object requestbody endpoint<e> endpoint  object body
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpoint    the endpoint to send to
* @param body        the payload
* @param header      the header name
* @param headervalue the header value
* @return the result
*/
object requestbodyandheader endpoint<e> endpoint  object body  string header  object headervalue
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpointuri the endpoint uri to send to
* @param processor the processor which will populate the exchange before sending
* @return the result
*/
e request string endpointuri  processor processor
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpointuri the endpoint uri to send to
* @param body        the payload
* @return the result
*/
object requestbody string endpointuri  object body
/**
* send the body to an endpoint returning any result output body.
* uses an {@link exchangepattern#inout} message exchange pattern.
*
* @param endpointuri the endpoint uri to send to
* @param body        the payload
* @param header      the header name
* @param headervalue the header value
* @return the result
*/
object requestbodyandheader string endpointuri  object body  string header  object headervalue