/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util arraylist
import java util hashmap
import java util list
import java util map
/**
* represents an instance and a type safe registry of well known camel exchange properties.
* <p/>
* <b>usage pattern:</b>
* <br/>in your code register a property that you wish to pass via camel exchange:
* <pre>
*      public static final exchangeproperty<boolean> myproperty =
*            new exchangeproperty<boolean>("myproperty", "org.apache.myproject.mypackage.myproperty", boolean.class);
*
*  then in your code set this property's value:
*      myproperty.set(exchange, boolean.true);
*
*  check the value of this property where required:
*      exchangeproperty<?> property = exchangeproperty.get("myproperty");
*      if (property != null && property.get(exchange) == boolean.true) {
*           // do your thing ...
*       }
*  or
*      boolean value = myproperty.get(exchange);
*      if (value == boolean.true) {
*          // do your thing
*      }
*
*  when your code no longer requires this property then deregister it:
*      exchangeproperty.deregister(myproperty);
*  or
*      exchangeproperty.deregister("myproperty");
*  </pre>
*
*  <b>note:</b> that if exchangeproperty instance get or set methods are used then type checks
*  of property's value are performed and a runtime exception can be thrown if type
*  safety is violated.
*/
public class exchangeproperty<t>
private static final list<exchangeproperty<?>> values
new arraylist<exchangeproperty<?>>
private static final map<string  exchangeproperty<?>> literal_map
new hashmap<string  exchangeproperty<?>>
private static final map<string  exchangeproperty<?>> name_map
new hashmap<string  exchangeproperty<?>>
private final string literal
private final string name
private final class<t> type
public exchangeproperty string literal  string name  class<t> type
this literal   literal
this name   name
this type   type
register this
public string literal
return literal
public string name
return name
public class<t> type
return type
public t get exchange exchange
return exchange getproperty name  type
public static exchangeproperty<?> get string literal
return literal_map get literal
public static exchangeproperty<?> getbyname string name
return name_map get name
public t set exchange exchange  t value
t oldvalue   get exchange
exchange setproperty name  value
return oldvalue
public t remove exchange exchange
t oldvalue   get exchange
exchange removeproperty name
return oldvalue
@override
public string tostring
return type   getcanonicalname         name       literal
public static synchronized void register exchangeproperty<?> property
exchangeproperty<?> existingproperty   literal_map get property literal
if  existingproperty    null    existingproperty    property
throw new runtimecamelexception     property literal
existingproperty tostring
values add property
literal_map put property literal    property
name_map put property name    property
public static synchronized void deregister exchangeproperty<?> property
if  property    null
values remove property
literal_map remove property literal
name_map put property name    property
public static synchronized void deregister string literal
exchangeproperty<?> property   literal_map get literal
if  property    null
values remove property
literal_map remove property literal
name_map put property name    property
public static synchronized exchangeproperty<?> values
return values toarray new exchangeproperty