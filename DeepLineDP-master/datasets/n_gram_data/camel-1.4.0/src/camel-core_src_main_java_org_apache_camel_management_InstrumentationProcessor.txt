/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel management
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel processor delegateprocessor
import org apache camel util asyncprocessorhelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* jmx enabled processor that uses the {@link counter} for instrumenting
* processing of exchanges.
*
* @version $revision$
*/
public class instrumentationprocessor extends delegateprocessor implements asyncprocessor
private static final transient log log   logfactory getlog instrumentationprocessor class
private performancecounter counter
public instrumentationprocessor performancecounter counter
this counter   counter
public instrumentationprocessor
public void setcounter performancecounter counter
this counter   counter
public void process exchange exchange  throws exception
asyncprocessorhelper process this  exchange
public boolean process final exchange exchange  final asynccallback callback
final long starttime   system nanotime
if  processor instanceof asyncprocessor
return   asyncprocessor processor  process exchange  new asynccallback
public void done boolean donesynchronously
if  counter    null
// convert nanoseconds to milliseconds
recordtime exchange   system nanotime     starttime    1000000 0
callback done donesynchronously
try
processor process exchange
catch  exception e
exchange setexception e
if  counter    null
// convert nanoseconds to milliseconds
recordtime exchange   system nanotime     starttime    1000000 0
callback done true
return true
protected void recordtime exchange exchange  double duration
if  log istraceenabled
log trace     duration       exchange
if   exchange isfailed      exchange getexception      null
counter completedexchange duration
else
counter failedexchange