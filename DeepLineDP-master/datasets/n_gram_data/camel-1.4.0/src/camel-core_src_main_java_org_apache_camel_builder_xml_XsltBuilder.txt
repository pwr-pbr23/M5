/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder xml
import java io file
import java io ioexception
import java io inputstream
import java net url
import java util hashmap
import java util map
import java util set
import javax xml parsers parserconfigurationexception
import javax xml transform result
import javax xml transform source
import javax xml transform templates
import javax xml transform transformer
import javax xml transform transformerconfigurationexception
import javax xml transform stream streamsource
import org apache camel exchange
import org apache camel expectedbodytypeexception
import org apache camel message
import org apache camel processor
import org apache camel runtimetransformexception
import org apache camel converter jaxp xmlconverter
import static org apache camel util objecthelper notnull
/**
* creates a <a href="http://activemq.apache.org/camel/processor.html">processor</a>
* which performs an xslt transformation of the in message body
*
* @version $revision$
*/
public class xsltbuilder implements processor
private map<string  object> parameters   new hashmap<string  object>
private xmlconverter converter   new xmlconverter
private templates template
private resulthandlerfactory resulthandlerfactory   new stringresulthandlerfactory
private boolean failonnullbody   true
public xsltbuilder
public xsltbuilder templates templates
this template   templates
@override
public string tostring
return     template
public void process exchange exchange  throws exception
if  gettemplate      null
throw new illegalargumentexception
transformer transformer   gettemplate   newtransformer
configuretransformer transformer  exchange
source source   getsource exchange
resulthandler resulthandler   resulthandlerfactory createresult
result result   resulthandler getresult
// lets copy the headers before we invoke the transform in case they modify them
message out   exchange getout true
out copyfrom exchange getin
transformer transform source  result
resulthandler setbody out
// builder methods
// -------------------------------------------------------------------------
/**
* creates an xslt processor using the given templates instance
*/
public static xsltbuilder xslt templates templates
return new xsltbuilder templates
/**
* creates an xslt processor using the given xslt source
*/
public static xsltbuilder xslt source xslt  throws transformerconfigurationexception
notnull xslt
xsltbuilder answer   new xsltbuilder
answer settransformersource xslt
return answer
/**
* creates an xslt processor using the given xslt source
*/
public static xsltbuilder xslt file xslt  throws transformerconfigurationexception
notnull xslt
return xslt new streamsource xslt
/**
* creates an xslt processor using the given xslt source
*/
public static xsltbuilder xslt url xslt  throws transformerconfigurationexception  ioexception
notnull xslt
return xslt xslt openstream
/**
* creates an xslt processor using the given xslt source
*/
public static xsltbuilder xslt inputstream xslt  throws transformerconfigurationexception  ioexception
notnull xslt
return xslt new streamsource xslt
/**
* sets the output as being a byte[]
*/
public xsltbuilder outputbytes
setresulthandlerfactory new streamresulthandlerfactory
return this
/**
* sets the output as being a string
*/
public xsltbuilder outputstring
setresulthandlerfactory new stringresulthandlerfactory
return this
/**
* sets the output as being a dom
*/
public xsltbuilder outputdom
setresulthandlerfactory new domresulthandlerfactory
return this
public xsltbuilder parameter string name  object value
parameters put name  value
return this
// properties
// -------------------------------------------------------------------------
public map<string  object> getparameters
return parameters
public void setparameters map<string  object> parameters
this parameters   parameters
public void settemplate templates template
this template   template
public templates gettemplate
return template
public boolean isfailonnullbody
return failonnullbody
public void setfailonnullbody boolean failonnullbody
this failonnullbody   failonnullbody
public resulthandlerfactory getresulthandlerfactory
return resulthandlerfactory
public void setresulthandlerfactory resulthandlerfactory resulthandlerfactory
this resulthandlerfactory   resulthandlerfactory
/**
* sets the xslt transformer from a source
*
* @param source  the source
* @throws transformerconfigurationexception is thrown if creating a xslt transformer failed.
*/
public void settransformersource source source  throws transformerconfigurationexception
// check that the call to newtemplates() returns a valid template instance.
// in case of an xslt parse error, it will return null and we should stop the
// deployment and raise an exception as the route will not be setup properly.
templates templates   converter gettransformerfactory   newtemplates source
if  templates    null
settemplate templates
else
throw new transformerconfigurationexception
/**
* sets the xslt transformer from a file
*/
public void settransformerfile file xslt  throws transformerconfigurationexception
settransformersource new streamsource xslt
/**
* sets the xslt transformer from a url
*/
public void settransformerurl url url  throws transformerconfigurationexception  ioexception
notnull url
settransformerinputstream url openstream
/**
* sets the xslt transformer from the given input stream
*/
public void settransformerinputstream inputstream in  throws transformerconfigurationexception  ioexception
notnull in
settransformersource new streamsource in
public xmlconverter getconverter
return converter
public void setconverter xmlconverter converter
this converter   converter
// implementation methods
// -------------------------------------------------------------------------
/**
* converts the inbound body to a {@link source}
*/
protected source getsource exchange exchange
message in   exchange getin
source source   in getbody source class
if  source    null
if  isfailonnullbody
throw new expectedbodytypeexception exchange  source class
else
try
source   converter tosource converter createdocument
catch  parserconfigurationexception e
throw new runtimetransformexception e
return source
/**
* configures the transformer with exchange specific parameters
*/
protected void configuretransformer transformer transformer  exchange exchange
transformer clearparameters
addparameters transformer  exchange getproperties
addparameters transformer  exchange getin   getheaders
addparameters transformer  getparameters
transformer setparameter    exchange
transformer setparameter    exchange getin
transformer setparameter    exchange getout
protected void addparameters transformer transformer  map<string  object> map
set<map entry<string  object>> propertyentries   map entryset
for  map entry<string  object> entry   propertyentries
string key   entry getkey
object value   entry getvalue
if  value    null
transformer setparameter key  value