/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel maven
import java io bufferedreader
import java io closeable
import java io file
import java io filereader
import java io filewriter
import java io ioexception
import java io printwriter
import java io stringwriter
import java util arraylist
import java util hashset
import java util list
import java util locale
import java util resourcebundle
import java util set
import org apache maven artifact dependencyresolutionrequiredexception
import org apache maven doxia sink sink
import org apache maven doxia siterenderer renderer
import org apache maven plugin mojoexecutionexception
import org apache maven plugin logging log
import org apache maven project mavenproject
import org apache maven reporting abstractmavenreport
import org apache maven reporting mavenreportexception
import org codehaus plexus util cli commandlineexception
import org codehaus plexus util cli commandlineutils
import org codehaus plexus util cli commandline
/**
* runs camel embedded with meta-inf/services/*.xml spring files to try create
* dot files for the routing rules, then converts the dot files into another
* format such as png
*
* @version $revision$
* @goal dot
* @requiresdependencyresolution runtime
* @phase prepare-package
* @execute phase="test-compile"
* @see <a href="http://www.graphviz.org/">graphviz</a>
*/
public class dotmojo extends abstractmavenreport
public static final string default_graphviz_output_types
/**
* subdirectory for report.
*/
protected static final string subdirectory
//
// for running camel embedded
// -------------------------------------------------------------------------
//
/**
* the duration to run the application for which by default is in
* milliseconds. a value <= 0 will run forever.
* adding a s indicates seconds - eg "5s" means 5 seconds.
*
* @parameter expression="2s"
*/
protected string duration
/**
* whether we should boot up camel with the meta-inf/services/*.xml to
* generate the dot file
*
* @parameter expression="true"
*/
protected boolean runcamel
/**
* should we try run the dot executable on the generated .dot file to
* generate images
*
* @parameter expression="true"
*/
protected boolean usedot
/**
* reference to maven 2 project.
*
* @parameter expression="${project}"
* @required
* @readonly
*/
private mavenproject project
/**
* base output directory.
*
* @parameter expression="${project.build.directory}"
* @required
*/
private file builddirectory
/**
* base output directory for reports.
*
* @parameter default-value="${project.build.directory}/site/cameldoc"
* @required
*/
private file outputdirectory
/**
* in the case of multiple camel contexts, setting aggregate == true will
* aggregate all into a monolithic context, otherwise they will be processed
* independently.
*
* @parameter
*/
private string aggregate
/**
* graphviz executable location; visualization (images) will be generated
* only if you install this program and set this property to the executable
* dot (dot.exe on win).
*
* @parameter expression="dot"
*/
private string executable
/**
* graphviz output types. default is png. possible values: png, jpg, gif,
* svg.
*
* @required
*/
private string graphvizoutputtype
/**
* graphviz output types. possible values: png, jpg, gif, svg.
*
* @parameter
*/
private string graphvizoutputtypes
/**
* doxia siterender.
*
* @component
*/
private renderer renderer
private string indexhtmlcontent
/**
* @param locale report locale.
* @return report description.
* @see org.apache.maven.reporting.mavenreport#getdescription(locale)
*/
public string getdescription final locale locale
return getbundle locale  getstring
}
/**
* @see org.apache.maven.reporting.mavenreport#getname(locale)
*/
public string getname final locale locale
return getbundle locale  getstring
}
public string getoutputname
return subdirectory
}
public string getaggregate
return aggregate
}
public void setaggregate string aggregate
this aggregate   aggregate
}
public boolean isusedot
return usedot
}
public void setusedot boolean usedot
this usedot   usedot
}
public void execute   throws mojoexecutionexception
this execute this builddirectory  locale getdefault
try {
writeindexhtmlfile outputdirectory     indexhtmlcontent
} catch (ioexception e) {
throw new mojoexecutionexception("failed: " + e, e);
}
}
protected void executereport final locale locale  throws mavenreportexception
try {
this execute this outputdirectory  locale
sink kitchensink   getsink
if  kitchensink    null
kitchensink rawtext indexhtmlcontent
} else {
writeindexhtmlfile outputdirectory     indexhtmlcontent
}
} catch (exception e) {
final mavenreportexception ex   new mavenreportexception e getmessage
ex initcause e getcause
throw ex
}
}
/**
* executes dot generator.
*
* @param outputdir report output directory.
* @param locale report locale.
* @throws mojoexecutionexception if there were any execution errors.
*/
protected void execute final file outputdir  final locale locale  throws mojoexecutionexception
try {
runcamelembedded outputdir
catch  dependencyresolutionrequiredexception e
throw new mojoexecutionexception("failed: " + e, e);
}
outputdir mkdirs
list<file> files   new arraylist<file>
appendfiles files  outputdirectory
if  graphvizoutputtypes    null
if  graphvizoutputtype    null
graphvizoutputtypes   default_graphviz_output_types
} else {
graphvizoutputtypes   new string  graphvizoutputtype
}
}
try {
set<string> contextnames   new hashset<string>
for (file file : files) {
string contextname   file getparentfile   getname
contextnames add contextname
}
boolean multiplecamelcontexts   contextnames size   > 1
int size   files size
for  int i   0  i < size  i
file file   files get i
string contextname   null
if  multiplecamelcontexts
contextname   file getparentfile   getname
}
getlog   info     contextname       file
generate i  file  contextname
}
if  multiplecamelcontexts
// lets generate an index page which lists each indiviual
// camelcontext file
stringwriter buffer   new stringwriter
printwriter out   new printwriter buffer
out println
out.println();
out println
for  string contextname   contextnames
out print
out print contextname
out print
out print contextname
out println
}
out println
indexhtmlcontent   buffer tostring
}
catch  commandlineexception e
throw new mojoexecutionexception("failed: " + e, e);
} catch (ioexception e) {
throw new mojoexecutionexception("failed: " + e, e);
}
}
private void generate int index  file file  string contextname  throws commandlineexception
mojoexecutionexception  ioexception
stringwriter buffer   new stringwriter
printwriter out   new printwriter buffer
printhtmlheader out  contextname
printhtmlfileheader out  file
for  int j   0  j < graphvizoutputtypes length  j
string format   graphvizoutputtypes
string generated   convertfile file  format
if  format equals       generated    null
// lets include the generated file inside the html
addfiletobuffer out  new file generated
}
}
printhtmlfilefooter out  file
printhtmlfooter out
string content   buffer tostring
string name   file getname
if  name equalsignorecase       index    0
indexhtmlcontent   content
}
int idx = name.lastindexof(".");
if  idx >  0
name   name substring 0  idx
name
}
writeindexhtmlfile file getparentfile    name  content
}
protected void runcamelembedded file outputdir  throws dependencyresolutionrequiredexception
if  runcamel
getlog   info
list list = project.gettestclasspathelements();
getlog().debug("using classpath: " + list);
embeddedmojo mojo = new embeddedmojo();
mojo.setclasspathelements(list);
mojo.setdotenabled(true);
if ("true".equals(getaggregate())) {
mojo.setdotaggregationenabled(true);
}
mojo.setoutputdirectory(outputdirectory.getabsolutepath());
mojo.setduration(duration);
mojo.setlog(getlog());
mojo.setplugincontext(getplugincontext());
try {
mojo.executewithoutwrapping();
} catch (exception e) {
getlog().error("failed to run camel embedded: " + e, e);
}
}
}
protected void writeindexhtmlfile(file dir, string filename, string content) throws ioexception {
// file dir = outputdirectory;
dir.mkdirs();
file html = new file(dir, filename);
printwriter out = null;
try {
out = new printwriter(new filewriter(html));
out.println("<html>");
out.println("<head>");
out.println("</head>");
out.println("<body>");
out.println();
if (content == null) {
out.write("<p>no eip diagrams available</p>");
} else {
out.write(content);
}
out.println("</body>");
out.println("</html>");
} finally {
string description = "failed to close html output file";
close(out, description);
}
}
protected void printhtmlheader(printwriter out, string contextname) {
if (contextname != null) {
out.println("<h1>eip patterns for camelcontext: " + contextname + "</h1>");
} else {
out.println("<h1>camel eip patterns</h1>");
}
out.println();
}
protected void printhtmlfileheader(printwriter out, file file) {
out.println("<p>");
out.println("  <img src='" + removefileextension(file.getname()) + ".png' usemap='#camelroutes'>");
}
protected void printhtmlfilefooter(printwriter out, file file) {
out.println("  </img>");
out.println("</p>");
out.println();
}
protected void printhtmlfooter(printwriter out) {
out.println();
}
protected void close(closeable closeable, string description) {
if (closeable != null) {
try {
closeable.close();
} catch (ioexception e) {
getlog().warn(description + ": " + e);
}
}
}
protected string convertfile(file file, string format) throws commandlineexception {
log log = getlog();
if (!usedot) {
log.info("dot generation disabled");
return null;
}
if (this.executable == null || this.executable.length() == 0) {
log.warn("parameter <executable/> was not set in the pom.xml.  skipping conversion.");
return null;
}
string generatedfilename = removefileextension(file.getabsolutepath()) + "." + format;
commandline cl = new commandline();
cl.setexecutable(executable);
cl.createargument().setvalue("-t" + format);
cl.createargument().setvalue("-o");
cl.createargument().setvalue(generatedfilename);
cl.createargument().setvalue(file.getabsolutepath());
log.debug("executing: " + cl.tostring());
commandlineutils.stringstreamconsumer stdout = new commandlineutils.stringstreamconsumer();
commandlineutils.stringstreamconsumer stderr = new commandlineutils.stringstreamconsumer();
int exitcode = commandlineutils.executecommandline(cl, stdout, stderr);
string output = stdout.getoutput();
if (output.length() > 0) {
log.debug(output);
}
string erroutput = stderr.getoutput();
if (erroutput.length() > 0) {
log.warn(erroutput);
}
return generatedfilename;
}
protected string removefileextension(string name) {
int idx = name.lastindexof(".");
if (idx > 0) {
return name.substring(0, idx);
} else {
return name;
}
}
private void appendfiles(list<file> output, file file) {
if (file.isdirectory()) {
appenddirectory(output, file);
} else {
if (isvalid(file)) {
output.add(file);
}
}
}
private void appenddirectory(list<file> output, file dir) {
file[] files = dir.listfiles();
for (file file : files) {
appendfiles(output, file);
}
}
private boolean isvalid(file file) {
string name = file.getname().tolowercase();
return name.endswith(".dot");
}
private void addfiletobuffer(printwriter out, file file) throws mojoexecutionexception {
bufferedreader reader = null;
try {
reader = new bufferedreader(new filereader(file));
while (true) {
string line = reader.readline();
if (line == null) {
break;
} else {
out.println(line);
}
}
} catch (ioexception e) {
throw new mojoexecutionexception("failed: " + e, e);
} finally {
close(reader, "cmapx file");
}
}
/**
* gets resource bundle for given locale.
*
* @param locale locale
* @return resource bundle
*/
protected resourcebundle getbundle final locale locale
return resourcebundle getbundle    locale  this getclass   getclassloader
}
protected renderer getsiterenderer
return this renderer
}
protected string getoutputdirectory
return this outputdirectory getabsolutepath
}
protected mavenproject getproject
return this project
}
}