/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel example cxf
import org apache camel camelcontext
import org apache camel cameltemplate
import org apache camel exchange
import org apache camel processor
import org apache camel builder routebuilder
import org apache camel example jms jmsbroker
import org apache camel impl defaultcamelcontext
/**
* an example for demonstrating how camel works as a router.
* this example shows how camel can route a soap client's http request
* to a soap over jms service.
*
*/
public final class camelcxfexample
private static final string router_address
private static final string service_address
private static final string service_class
private static final string wsdl_location
private static final string service_name
private static final string soap_over_http_router
private static final string soap_over_jms
private static final string router_endpoint_uri       router_address       service_class
wsdl_location       service_name       soap_over_http_router
private static final string service_endpoint_uri       service_address       service_class
wsdl_location       service_name       soap_over_jms
private camelcxfexample
public static void main string args  throws exception
// start snippet: e1
camelcontext context   new defaultcamelcontext
// end snippet: e1
// set up the jms broker and the cxf soap over jms server
// start snippet: e2
jmsbroker broker   new jmsbroker
server server   new server
try
broker start
server start
// end snippet: e2
// add some configuration by hand ...
// start snippet: e3
context addroutes new routebuilder
public void configure
from router_endpoint_uri  to service_endpoint_uri
// end snippet: e3
// starting the routing context
// using the cxf client to kick off the invocations
// start snippet: e4
context start
client client   new client router_address
// end snippet: e4
// now everything is set up - let's start the context
client invoke
thread sleep 1000
context stop
catch  exception ex
ex printstacktrace
finally
server stop
broker stop
system exit 0