/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf transport
import java io ioexception
import java io outputstream
import java util list
import java util map
import java util logging level
import java util logging logger
import org apache camel camelcontext
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel processor
import org apache camel producertemplate
import org apache camel component cxf cxfconstants
import org apache camel component cxf cxfsoapbinding
import org apache camel impl defaultcamelcontext
import org apache cxf bus
import org apache cxf common logging logutils
import org apache cxf configuration configurable
import org apache cxf configuration configurer
import org apache cxf helpers castutils
import org apache cxf io cachedoutputstream
import org apache cxf message message
import org apache cxf service service
import org apache cxf service model endpointinfo
import org apache cxf transport abstractconduit
import org apache cxf transport conduit
import org apache cxf transport destination
import org apache cxf transport messageobserver
import org apache cxf ws addressing endpointreferencetype
/**
* @version $revision$
*/
public class camelconduit extends abstractconduit implements configurable
protected static final string base_bean_name_suffix
private static final logger log   logutils getl7dlogger camelconduit class
private camelcontext camelcontext
private endpointinfo endpointinfo
private string targetcamelendpointuri
private producertemplate<exchange> cameltemplate
private bus bus
public camelconduit camelcontext context  bus b  endpointinfo endpointinfo
this context  b  endpointinfo  null
public camelconduit camelcontext context  bus b  endpointinfo epinfo  endpointreferencetype targetreference
super targetreference
string address   epinfo getaddress
if  address    null
targetcamelendpointuri   address substring cxfconstants camel_transport_prefix length
if  targetcamelendpointuri startswith
targetcamelendpointuri   targetcamelendpointuri substring 2
camelcontext   context
endpointinfo   epinfo
bus   b
initconfig
public void setcamelcontext camelcontext context
camelcontext   context
public camelcontext getcamelcontext
return camelcontext
// prepare the message for send out , not actually send out the message
public void prepare message message  throws ioexception
getlogger   log level fine
message setcontent outputstream class  new cameloutputstream message
public void close
getlogger   log level fine
protected logger getlogger
return log
public string getbeanname
if  endpointinfo    null    endpointinfo getname      null
return     base_bean_name_suffix
return endpointinfo getname   tostring     base_bean_name_suffix
private void initconfig
// we could configure the camel context here
if  bus    null
configurer configurer   bus getextension configurer class
if  null    configurer
configurer configurebean this
public producertemplate<exchange> getcameltemplate
if  cameltemplate    null
camelcontext ctx   camelcontext    null ? camelcontext   new defaultcamelcontext
cameltemplate   ctx createproducertemplate
return cameltemplate
public void setcameltemplate producertemplate<exchange> template
cameltemplate   template
private class cameloutputstream extends cachedoutputstream
private message outmessage
private boolean isoneway
public cameloutputstream message m
outmessage   m
protected void doflush   throws ioexception
// do nothing here
protected void doclose   throws ioexception
isoneway   outmessage getexchange   isoneway
commitoutputmessage
protected void onwrite   throws ioexception
// do nothing here
private void commitoutputmessage
exchangepattern pattern
if  isoneway
pattern   exchangepattern inonly
else
pattern   exchangepattern inout
getlogger   log level fine      targetcamelendpointuri
// we could wait for the rely asynchronously
org apache camel exchange exchange   getcameltemplate   send targetcamelendpointuri  pattern  new processor
public void process org apache camel exchange ex  throws ioexception
cachedoutputstream outputstream    cachedoutputstream outmessage getcontent outputstream class
// send out the request message here, copy the protocolheader back
map<string  list<string>> protocolheader   castutils cast  map<?  ?> outmessage get message protocol_headers
cxfsoapbinding setprotocolheader ex getin   getheaders    protocolheader
ex getin   setbody outputstream getbytes
getlogger   log level fine     ex getin
exchange setproperty cxfconstants cxf_exchange  outmessage getexchange
if   isoneway
handleresponse exchange
private void handleresponse org apache camel exchange exchange
org apache cxf message message inmessage   cxfsoapbinding getcxfinmessage exchange  true
incomingobserver onmessage inmessage
/**
* represented decoupled response endpoint.
*/
protected class decoupleddestination implements destination
protected messageobserver decoupledmessageobserver
private endpointreferencetype address
decoupleddestination endpointreferencetype ref  messageobserver incomingobserver
address   ref
decoupledmessageobserver   incomingobserver
public endpointreferencetype getaddress
return address
public conduit getbackchannel message inmessage  message partialresponse  endpointreferencetype addr  throws ioexception
// shouldn't be called on decoupled endpoint
return null
public void shutdown
public synchronized void setmessageobserver messageobserver observer
decoupledmessageobserver   observer
public synchronized messageobserver getmessageobserver
return decoupledmessageobserver