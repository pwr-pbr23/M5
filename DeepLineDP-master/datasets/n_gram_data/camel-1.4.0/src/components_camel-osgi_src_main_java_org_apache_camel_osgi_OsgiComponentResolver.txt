/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel osgi
import java io bufferedinputstream
import java net url
import java util enumeration
import java util hashmap
import java util map
import java util properties
import org apache camel camelcontext
import org apache camel component
import org apache camel spi componentresolver
import org apache commons logging log
import org apache commons logging logfactory
import org osgi framework bundle
import org osgi framework bundlecontext
import org osgi framework bundleevent
import org osgi framework synchronousbundlelistener
import org springframework osgi util bundledelegatingclassloader
public class osgicomponentresolver implements componentresolver
private static final transient log log   logfactory getlog osgicomponentresolver class
private bundlecontext bundlecontext
private map<string  componententry> components
private class bundlelistener implements synchronousbundlelistener
public void bundlechanged bundleevent event
try
bundle bundle   event getbundle
if  event gettype      bundleevent resolved
if  log isdebugenabled
log debug     bundle getsymbolicname
maybeaddcomponentfor bundle
else if  event gettype      bundleevent unresolved
if  log isdebugenabled
log debug     bundle getsymbolicname
mayberemovecomponentfor bundle
catch  throwable e
log fatal    e
private class componententry
bundle bundle
string path
string name
class type
public osgicomponentresolver bundlecontext bundlecontext
this bundlecontext   bundlecontext
protected void init
if  components    null
return
log debug
components   new hashmap<string  componententry>
bundlecontext addbundlelistener new bundlelistener
bundle previousbundles   bundlecontext getbundles
for  int i   0  i < previousbundles length  i
int state   previousbundles getstate
if  state    bundle resolved    state    bundle active
try
maybeaddcomponentfor previousbundles
catch  exception e
log error     previousbundles       e tostring    e
protected synchronized void maybeaddcomponentfor bundle bundle
enumeration e   bundle getentrypaths
if  e    null
while  e hasmoreelements
string path    string e nextelement
if  log isdebugenabled
log debug     path       bundle getsymbolicname
componententry entry   new componententry
entry bundle   bundle
entry path   path
entry name   path substring path lastindexof      1
components put entry name  entry
protected synchronized void mayberemovecomponentfor bundle bundle
for  componententry entry   components values
if  entry bundle    bundle
if  log isdebugenabled
log debug     entry path       bundle getsymbolicname
components remove entry name
protected synchronized class getcomponent string name  throws exception
componententry entry   components get name
if  entry    null
return null
if  entry type    null
url url   entry bundle getentry entry path
// lets load the file
properties properties   new properties
bufferedinputstream reader   null
try
reader   new bufferedinputstream url openstream
properties load reader
finally
try
reader close
catch  exception ignore
string classname    string properties get
classloader loader   bundledelegatingclassloader createbundleclassloaderfor entry bundle
entry type   loader loadclass classname
if  log isdebugenabled
log debug     name       entry type getname
return entry type
public component resolvecomponent string name  camelcontext context  throws exception
object bean   null
try
bean   context getregistry   lookup name
if  bean    null    log isdebugenabled
log debug     name       bean
catch  exception e
log debug     name       e
if  bean    null
if  bean instanceof component
return  component bean
// we do not throw the exception here and try to auto create a component
// check in osgi bundles
init
class type   null
try
type   getcomponent name
catch  throwable e
throw new illegalargumentexception     name  e
if  type    null
return null
if  component class isassignablefrom type
return  component context getinjector   newinstance type
else
throw new illegalargumentexception
type getname