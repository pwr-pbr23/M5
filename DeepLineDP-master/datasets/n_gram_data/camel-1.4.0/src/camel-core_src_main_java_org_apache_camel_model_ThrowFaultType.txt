/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util collections
import java util list
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel camelexception
import org apache camel processor
import org apache camel processor throwfaultprocessor
import org apache camel spi routecontext
/**
* represents an xml &lt;throwfault/&gt; element
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class throwfaulttype extends processortype<throwfaulttype>
@xmltransient
private throwable fault
@xmltransient
private processor processor
@xmlattribute  required   true
private string faultref
public throwfaulttype
@override
public string getshortname
return
public void setfault throwable fault
this fault   fault
public throwable getfault
return fault
public void setfaultref string ref
this faultref   ref
public string getfaultref
return faultref
@override
public processor createprocessor routecontext routecontext
if  processor    null
if  fault    null
fault   routecontext lookup faultref  throwable class
if  fault    null
// can't find the fault instance, create a new one
fault   new camelexception faultref
processor   new throwfaultprocessor fault
return processor
@override
public list<processortype<?>> getoutputs
return collections empty_list