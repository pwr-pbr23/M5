/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf
import java lang reflect method
import java util iterator
import java util list
import java util map
import java util logging level
import java util logging logger
import org apache camel exchangepattern
import org apache cxf common logging logutils
import org apache cxf endpoint endpoint
import org apache cxf frontend methoddispatcher
import org apache cxf helpers castutils
import org apache cxf interceptor fault
import org apache cxf message exchange
import org apache cxf message message
import org apache cxf message messagecontentslist
import org apache cxf service service
import org apache cxf service invoker invoker
import org apache cxf service model bindingmessageinfo
import org apache cxf service model bindingoperationinfo
public class camelinvoker implements invoker  messageinvoker
private static final logger log   logutils getl7dlogger camelinvoker class
private cxfconsumer cxfconsumer
public camelinvoker cxfconsumer consumer
cxfconsumer   consumer
/**
* this method is called when the incoming message is to
* be passed into the camel processor. the return value is the response
* from the processor
*/
public void invoke exchange exchange
message inmessage   exchange getinmessage
//todo set the request context here
cxfendpoint endpoint   cxfconsumer getendpoint
cxfexchange cxfexchange   endpoint createexchange inmessage
bindingoperationinfo bop   exchange get bindingoperationinfo class
if  bop    null    bop getoperationinfo   isoneway
cxfexchange setpattern exchangepattern inonly
else
cxfexchange setpattern exchangepattern inout
try
cxfconsumer getprocessor   process cxfexchange
catch  exception ex
// catch the exception and send back to cxf client
throw new fault ex
// make sure the client has returned back the message
copybackexchange cxfexchange  exchange
message outmessage   exchange getoutmessage
// update the outmessagecontext
outmessage put message inbound_message  boolean false
bindingoperationinfo boi   exchange get bindingoperationinfo class
if  boi    null
exchange put bindingmessageinfo class  boi getoutput
public void copybackexchange cxfexchange result  exchange exchange
final endpoint endpoint   exchange get endpoint class
message outmessage   null
if  result isfailed
cxfmessage fault   result getfault
outmessage   exchange getinfaultmessage
if  outmessage    null
outmessage   endpoint getbinding   createmessage
outmessage setexchange exchange
exchange setinfaultmessage outmessage
exception ex    exception  fault getbody
outmessage setcontent exception class  ex
else
outmessage   result getoutmessage
if  log isloggable level finest
log finest     outmessage
// copy the outmessage back if we set the out's body
org apache camel message camelmessage   result getout
cxfbinding copymessage camelmessage  outmessage
// set the cxf outmessage back to the exchange
exchange setoutmessage outmessage
@suppresswarnings
public void updatecontext map<string  object> from  map<string  object> to
if  to    null    from    null
for  iterator iter   from entryset   iterator    iter hasnext
map entry entry    map entry  iter next
string key    string entry getkey
//requires deep copy.
if    message inbound_message equals key
message requestor_role equals key
message protocol_headers equals key
to put key  entry getvalue
/**
* this method is called when the incoming pojo or webserviceprovider invocation is called
* from the service invocation interceptor. the return value is the response
* from the processor
*/
public object invoke exchange exchange  object o
cxfendpoint endpoint   cxfconsumer getendpoint
object params   null
if  o instanceof list
params   castutils cast  list<?> o
else if  o    null
params   new messagecontentslist o
cxfexchange cxfexchange   endpoint createexchange exchange getinmessage
bindingoperationinfo bop   exchange get bindingoperationinfo class
methoddispatcher md    methoddispatcher
exchange get service class  get methoddispatcher class getname
method m   md getmethod bop
// the sei could be the provider class which will not have the bop information.
if  bop    null    bop getoperationinfo   isoneway
cxfexchange setpattern exchangepattern inonly
else
cxfexchange setpattern exchangepattern inout
if  bop    null    bop getname      null
cxfexchange getin   setheader cxfconstants operation_namespace  bop getname   getnamespaceuri
cxfexchange getin   setheader cxfconstants operation_name  bop getname   getlocalpart
else
cxfexchange getin   setheader cxfconstants operation_name  m getname
cxfexchange getin   setbody params
try
cxfconsumer getprocessor   process cxfexchange
catch  exception ex
// catch the exception and send back to cxf client
throw new fault ex
object result   null
if  cxfexchange isfailed
exception ex    exception cxfexchange getfault   getbody
if  ex instanceof fault
throw  fault ex
else
throw new fault ex
else
result   cxfexchange getout   getbody
if  result    null
if  result instanceof messagecontentslist    result instanceof list    result getclass   isarray
return result
else      if the result is the single object
messagecontentslist reslist   new messagecontentslist
reslist add result
return reslist
return result