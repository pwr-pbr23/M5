/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util comparator
import java util list
import java util set
import java util treeset
import org apache camel endpoint
import org apache camel exchange
import org apache camel expression
import org apache camel processor
import org apache camel util expressioncomparator
import org apache camel util expressionlistcomparator
/**
* an implementation of the <a href="http://activemq.apache.org/camel/resequencer.html">resequencer</a>
* which can reorder messages within a batch.
*
* @version $revision$
*/
public class resequencer extends batchprocessor
public resequencer endpoint endpoint  processor processor  expression<exchange> expression
this endpoint  processor  createset expression
public resequencer endpoint endpoint  processor processor  list<expression> expressions
this endpoint  processor  createset expressions
public resequencer endpoint endpoint  processor processor  set<exchange> collection
super endpoint  processor  collection
@override
public string tostring
return     getprocessor
// implementation methods
//-------------------------------------------------------------------------
protected static set<exchange> createset expression<exchange> expression
return createset new expressioncomparator<exchange> expression
protected static set<exchange> createset list<expression> expressions
if  expressions size      1
return createset expressions get 0
return createset new expressionlistcomparator expressions
protected static set<exchange> createset comparator<? super exchange> comparator
return new treeset<exchange> comparator