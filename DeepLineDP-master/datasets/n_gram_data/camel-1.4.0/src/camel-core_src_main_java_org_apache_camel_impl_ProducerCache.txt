/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util hashmap
import java util map
import org apache camel asynccallback
import org apache camel endpoint
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel failedtocreateproducerexception
import org apache camel processor
import org apache camel producer
import org apache camel runtimecamelexception
import org apache camel impl converter asyncprocessortypeconverter
import org apache camel util servicehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* cache containing created {@link producer}.
*
* @version $revision$
*/
public class producercache<e extends exchange> extends servicesupport
private static final transient log log   logfactory getlog producercache class
private map<string  producer<e>> producers   new hashmap<string  producer<e>>
public synchronized producer<e> getproducer endpoint<e> endpoint
string key   endpoint getendpointuri
producer<e> answer   producers get key
if  answer    null
try
answer   endpoint createproducer
answer start
catch  exception e
throw new failedtocreateproducerexception endpoint  e
producers put key  answer
return answer
/**
* sends the exchange to the given endpoint
*
* @param endpoint the endpoint to send the exchange to
* @param exchange the exchange to send
*/
public void send endpoint<e> endpoint  e exchange
try
producer<e> producer   getproducer endpoint
producer process exchange
catch  exception e
throw new runtimecamelexception e
/**
* sends an exchange to an endpoint using a supplied
* {@link processor} to populate the exchange
*
* @param endpoint the endpoint to send the exchange to
* @param processor the transformer used to populate the new exchange
*/
public e send endpoint<e> endpoint  processor processor
try
producer<e> producer   getproducer endpoint
e exchange   producer createexchange
return sendexchange endpoint  producer  processor  exchange
catch  exception e
throw new runtimecamelexception e
/**
* sends an exchange to an endpoint using a supplied
* {@link processor} to populate the exchange.  the callback
* will be called when the exchange is completed.
*
* @param endpoint the endpoint to send the exchange to
* @param processor the transformer used to populate the new exchange
*/
public e send endpoint<e> endpoint  processor processor  asynccallback callback
try
producer<e> producer   getproducer endpoint
e exchange   producer createexchange
boolean sync   sendexchange endpoint  producer  processor  exchange  callback
setprocessedsync exchange  sync
return exchange
catch  exception e
throw new runtimecamelexception e
public static boolean isprocessedsync exchange exchange
boolean rc   exchange getproperty producercache class getname        boolean class
return rc    null ? false   rc
public static void setprocessedsync exchange exchange  boolean b
exchange setproperty producercache class getname        b ? boolean true   boolean false
/**
* sends an exchange to an endpoint using a supplied
* {@link processor} to populate the exchange
*
* @param endpoint the endpoint to send the exchange to
* @param pattern the message {@link exchangepattern} such as
*   {@link exchangepattern#inonly} or {@link exchangepattern#inout}
* @param processor the transformer used to populate the new exchange
*/
public e send endpoint<e> endpoint  exchangepattern pattern  processor processor
try
producer<e> producer   getproducer endpoint
e exchange   producer createexchange pattern
return sendexchange endpoint  producer  processor  exchange
catch  exception e
throw new runtimecamelexception e
protected e sendexchange endpoint<e> endpoint  producer<e> producer  processor processor  e exchange  throws exception
// lets populate using the processor callback
processor process exchange
// now lets dispatch
if  log isdebugenabled
log debug     endpoint       exchange
producer process exchange
return exchange
protected boolean sendexchange endpoint<e> endpoint  producer<e> producer  processor processor  e exchange  asynccallback callback  throws exception
// lets populate using the processor callback
processor process exchange
// now lets dispatch
if  log isdebugenabled
log debug     endpoint       exchange
return asyncprocessortypeconverter convert producer  process exchange  callback
protected void dostop   throws exception
servicehelper stopservices producers values
producers clear
protected void dostart   throws exception