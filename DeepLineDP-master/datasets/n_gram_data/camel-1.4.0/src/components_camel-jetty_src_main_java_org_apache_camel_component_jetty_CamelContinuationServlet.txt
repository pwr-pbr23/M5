/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component jetty
import java io ioexception
import javax servlet servletexception
import javax servlet http httpservletrequest
import javax servlet http httpservletresponse
import org apache camel asynccallback
import org apache camel component http camelservlet
import org apache camel component http httpconsumer
import org apache camel component http httpexchange
import org mortbay util ajax continuation
import org mortbay util ajax continuationsupport
/**
* @version $revision$
*/
public class camelcontinuationservlet extends camelservlet
// private static final string exchange_attribute =
// camelcontinuationservlet.class.getname()+".exchange_attribute";
@override
protected void service httpservletrequest request  httpservletresponse response  throws servletexception  ioexception
try
// is there a consumer registered for the request.
httpconsumer consumer   resolve request
if  consumer    null
response senderror httpservletresponse sc_not_found
return
// httpexchange exchange =
// (httpexchange)request.getattribute(exchange_attribute);
// if( exchange == null ) {
// exchange = new httpexchange(consumer.getendpoint(), request,
// response);
// }
// continuation continuation =
// continuationsupport.getcontinuation(request, exchange);
final continuation continuation   continuationsupport getcontinuation request  null
if  continuation isnew
// have the camel process the http exchange.
final httpexchange exchange   new httpexchange consumer getendpoint    request  response
boolean sync   consumer getasyncprocessor   process exchange  new asynccallback
public void done boolean sync
if  sync
return
continuation setobject exchange
continuation resume
if   sync
// wait for the exchange to get processed.
// this might block until it completes or it might return via an exception and
// then this method is re-invoked once the the exchange has finished processing
continuation suspend 0
// hc: the getbinding() is interesting because it illustrates the
// impedance miss-match between
// http's stream oriented protocol, and camels more message oriented
// protocol exchanges.
// now lets output to the response
consumer getbinding   writeresponse exchange  response
return
if  continuation isresumed
httpexchange exchange    httpexchange continuation getobject
// now lets output to the response
consumer getbinding   writeresponse exchange  response
return
catch  exception e
throw new servletexception e