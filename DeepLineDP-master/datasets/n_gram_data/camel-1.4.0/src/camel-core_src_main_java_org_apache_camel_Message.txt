/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util map
import java util set
import javax activation datahandler
/**
* implements the <a
* href="http://activemq.apache.org/camel/message.html">message</a> pattern and
* represents an inbound or outbound message as part of an {@link exchange}
*
* @version $revision$
*/
public interface message
/**
* returns the id of the message
*
* @return the id of the message
*/
string getmessageid
/**
* sets the id of the message
*
* @param messageid
*/
void setmessageid string messageid
/**
* returns the exchange this message is related to
*/
exchange getexchange
/**
* accesses a specific header
*
* @param name  name of header
* @return object header associated with the name
*/
object getheader string name
/**
* returns a header associated with this message by name and specifying the
* type required
*
* @param name the name of the header
* @param type the type of the header
* @return the value of the given header or null if there is no property for
*         the given name or it cannot be converted to the given type
*/
<t> t getheader string name  class<t> type
/**
* sets a header on the message
*
* @param name of the header
* @param value to associate with the name
*/
void setheader string name  object value
/**
* removes the named header from this message
*
* @param name
* @return the old value of the header
*/
object removeheader string name
/**
* returns all of the headers associated with the message
*
* @return all the headers in a map
*/
map<string  object> getheaders
/**
* set all the headers associated with this message
*
* @param headers
*/
void setheaders map<string  object> headers
/**
* returns the body of the message as a pojo
*
* @return the body of the message
*/
object getbody
/**
* returns the body as the specified type
*
* @param type the type that the body
* @return the body of the message as the specified type
*/
<t> t getbody class<t> type
/**
* sets the body of the message
*/
void setbody object body
/**
* sets the body of the message as a specific type
*/
<t> void setbody object body  class<t> type
/**
* creates a copy of this message so that it can be used and possibly
* modified further in another exchange
*
* @return a new message instance copied from this message
*/
message copy
/**
* copies the contents of the other message into this message
*/
void copyfrom message message
/**
* returns the attachment specified by the id
*
* @param id        the id under which the attachment is stored
* @return          the data handler for this attachment or null
*/
datahandler getattachment string id
/**
* returns a set of attachment names of the message
*
* @return  a set of attachment names
*/
set<string> getattachmentnames
/**
* removes the attachment specified by the id
*
* @param id        the id of the attachment to remove
*/
void removeattachment string id
/**
* adds an attachment to the message using the id
*
* @param id        the id to store the attachment under
* @param content   the data handler for the attachment
*/
void addattachment string id  datahandler content
/**
* returns all attachments of the message
*
* @return  the attachments in a map or null
*/
map<string  datahandler> getattachments
/**
* set all the attachments associated with this message
*
* @param attachments
*/
void setattachments map<string  datahandler> attachments
/**
* returns <tt>true</tt> if this message has any attachments.
*/
boolean hasattachments