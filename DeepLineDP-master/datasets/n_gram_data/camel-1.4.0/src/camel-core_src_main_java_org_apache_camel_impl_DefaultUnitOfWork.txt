/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util arraylist
import java util list
import java util concurrent countdownlatch
import org apache camel asynccallback
import org apache camel exchange
import org apache camel spi synchronization
import org apache camel spi unitofwork
import org apache camel util uuidgenerator
/**
* the default implementation of {@link unitofwork}
*
* @version $revision$
*/
public class defaultunitofwork implements unitofwork
private static final uuidgenerator default_id_generator   new uuidgenerator
private string id
private list<synchronization> synchronizations
private list<asynccallback> asynccallbacks
private countdownlatch latch
public defaultunitofwork
}
public synchronized void addsynchronization synchronization synchronization
if  synchronizations    null
synchronizations   new arraylist<synchronization>
}
synchronizations add synchronization
}
public synchronized void removesynchronization synchronization synchronization
if  synchronizations    null
synchronizations remove synchronization
}
}
public void reset
}
public void done exchange exchange
if  synchronizations    null
boolean failed   exchange isfailed
for  synchronization synchronization   synchronizations
if  failed
synchronization onfailure exchange
else
synchronization oncomplete exchange
}
}
}
}
public boolean issynchronous
return asynccallbacks    null    asynccallbacks isempty
}
/**
* returns the unique id of this unit of work, lazily creating one if it does not yet have one
*
* @return
*/
public string getid
if  id    null
id   default_id_generator generateid
}
return id
}
/**
* register some asynchronous processing step
*/
/*
public synchronized asynccallback addasyncstep() {
asynccallback answer = new asynccallback() {
public void done(boolean donesynchronously) {
latch.countdown();
}
};
if (latch == null) {
latch = new countdownlatch(1);
}
else {
// todo increment latch!
}
if (asynccallbacks == null) {
asynccallbacks = new arraylist<asynccallback>();
}
asynccallbacks.add(answer);
return answer;
}
*/
}