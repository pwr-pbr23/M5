/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import org apache camel camelcontext
import org apache camel exchange
import org apache camel message
import org apache camel typeconverter
import org apache camel util uuidgenerator
/**
* a base class for implementation inheritence providing the core
* {@link message} body handling features but letting the derived class deal
* with headers.
*
* unless a specific provider wishes to do something particularly clever with
* headers you probably want to just derive from {@link defaultmessage}
*
* @version $revision$
*/
public abstract class messagesupport implements message
private static final uuidgenerator defalt_id_generator   new uuidgenerator
private exchange exchange
private object body
private string messageid
public object getbody
if  body    null
body   createbody
return body
@suppresswarnings
public <t> t getbody class<t> type
return getbody type  getbody
protected <t> t getbody class<t> type  object body
exchange e   getexchange
if  e    null
camelcontext camelcontext   e getcontext
if  camelcontext    null
typeconverter converter   camelcontext gettypeconverter
t answer   converter convertto type  body
if  answer    null
// lets first try converting the message itself first
// as for some types like inputstream v reader its more efficient to do the transformation
// from the message itself as its got efficient implementations of them, before trying the
// payload
answer   converter convertto type  this
return answer
return  t getbody
public void setbody object body
this body   body
public <t> void setbody object value  class<t> type
exchange e   getexchange
if  e    null
t v   e getcontext   gettypeconverter   convertto type  value
if  v    null
value   v
setbody value
public message copy
message answer   newinstance
answer copyfrom this
return answer
public void copyfrom message that
setmessageid that getmessageid
setbody that getbody
getheaders   putall that getheaders
getattachments   putall that getattachments
public exchange getexchange
return exchange
public void setexchange exchange exchange
this exchange   exchange
/**
* returns a new instance
*/
public abstract message newinstance
/**
* a factory method to allow a provider to lazily create the message body
* for inbound messages from other sources
*
* @return the value of the message body or null if there is no value
*         available
*/
protected object createbody
return null
public string getmessageid
if  messageid    null
messageid   createmessageid
return this messageid
public void setmessageid string messageid
this messageid   messageid
/**
* lets allow implementations to auto-create a messageid
*/
protected string createmessageid
return defalt_id_generator generateid