/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor interceptor
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache camel camelcontext
import org apache camel exchange
import org apache camel processor
import org apache camel impl defaultcamelcontext
import org apache camel model processortype
import org apache camel spi interceptstrategy
import org apache commons logging log
import org apache commons logging logfactory
/**
* an interceptor strategy for debugging and tracing routes
*
* @version $revision$
*/
public class debugger implements interceptstrategy
private static final transient log log   logfactory getlog debugger class
private int exchangebuffersize    1
private map<string  debuginterceptor> interceptors   new hashmap<string  debuginterceptor>
private boolean logexchanges   true
private traceformatter formatter   new traceformatter
/**
* a helper method to return the debugger instance for a given {@link camelcontext} if one is enabled
*
* @param context the camel context the debugger is connected to
* @return the debugger or null if none can be found
*/
public static debugger getdebugger camelcontext context
if  context instanceof defaultcamelcontext
defaultcamelcontext defaultcamelcontext    defaultcamelcontext  context
list<interceptstrategy> list   defaultcamelcontext getinterceptstrategies
for  interceptstrategy interceptstrategy   list
if  interceptstrategy instanceof debugger
return  debugger interceptstrategy
return null
public debuginterceptor getinterceptor string id
return interceptors get id
/**
* returns the list of exchanges sent to the given node in the dsl
*/
public list<exchange> getexchanges string id
debuginterceptor interceptor   getinterceptor id
if  interceptor    null
return null
else
return interceptor getexchanges
/**
* returns the breakpoint object for the given node in the dsl
*/
public breakpoint getbreakpoint string id
debuginterceptor interceptor   getinterceptor id
if  interceptor    null
return null
else
return interceptor getbreakpoint
public processor wrapprocessorininterceptors processortype processortype  processor target  throws exception
string id   processortype idorcreate
if  logexchanges
target   new traceinterceptor processortype  target  formatter
debuginterceptor interceptor   new debuginterceptor processortype  target  createexchangelist    createexceptionslist
interceptors put id  interceptor
if  log isdebugenabled
log debug     id       interceptor
return interceptor
protected list<exchange> createexchangelist
if  exchangebuffersize    0
return null
else if  exchangebuffersize > 0
// todo lets create a non blocking fixed size queue
return new arraylist<exchange>
else
return new arraylist<exchange>
protected list<exceptionevent> createexceptionslist
// todo allow some kinda lru based fixed size list to be used?
return new arraylist<exceptionevent>