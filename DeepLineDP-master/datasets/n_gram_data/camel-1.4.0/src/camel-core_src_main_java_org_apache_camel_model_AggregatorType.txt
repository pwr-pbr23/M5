/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util collection
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel endpoint
import org apache camel exchange
import org apache camel expression
import org apache camel predicate
import org apache camel processor
import org apache camel route
import org apache camel builder expressionclause
import org apache camel model language expressiontype
import org apache camel processor aggregator
import org apache camel processor aggregate aggregationcollection
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor aggregate uselatestaggregationstrategy
import org apache camel spi routecontext
/**
* represents an xml &lt;aggregator/&gt; element
*
* @version $revision$
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class aggregatortype extends expressionnode
@xmltransient
private aggregationstrategy aggregationstrategy
@xmltransient
private aggregationcollection aggregationcollection
@xmlattribute required   false
private integer batchsize
@xmlattribute required   false
private long batchtimeout
@xmlattribute required   false
private string strategyref
@xmlelement name      required   false
private completedpredicate completedpredicate
public aggregatortype
public aggregatortype expression correlationexpression
super correlationexpression
public aggregatortype expressiontype correlationexpression
super correlationexpression
public aggregatortype expression correlationexpression  aggregationstrategy aggregationstrategy
super correlationexpression
this aggregationstrategy   aggregationstrategy
@override
public string tostring
return     getexpression         getoutputs
@override
public string getshortname
return
@suppresswarnings
@override
public void addroutes routecontext routecontext  collection<route> routes  throws exception
final aggregator aggregator   createaggregator routecontext
doaddroute routecontext  routes  aggregator
private void doaddroute routecontext routecontext  collection<route> routes  final aggregator aggregator
throws exception
route route   new route<exchange> aggregator getendpoint    aggregator
@override
public string tostring
return     getendpoint         aggregator getprocessor
routes add route
@override
public processor createprocessor routecontext routecontext  throws exception
final aggregator aggregator   createaggregator routecontext
doaddroute routecontext  routecontext getcamelcontext   getroutes    aggregator
routecontext setisrouteadded true
return aggregator
protected aggregator createaggregator routecontext routecontext  throws exception
endpoint from   routecontext getendpoint
final processor processor   routecontext createprocessor this
final aggregator aggregator
if  aggregationcollection    null
aggregator   new aggregator from  processor  aggregationcollection
else
aggregationstrategy strategy   getaggregationstrategy
if  strategy    null    strategyref    null
strategy   routecontext lookup strategyref  aggregationstrategy class
if  strategy    null
strategy   new uselatestaggregationstrategy
expression aggregateexpression   getexpression   createexpression routecontext
predicate predicate   null
if  completedpredicate    null
predicate   completedpredicate createpredicate routecontext
if  predicate    null
aggregator   new aggregator from  processor  aggregateexpression  strategy  predicate
else
aggregator   new aggregator from  processor  aggregateexpression  strategy
if  batchsize    null
aggregator setbatchsize batchsize
if  batchtimeout    null
aggregator setbatchtimeout batchtimeout
return aggregator
public aggregationcollection getaggregationcollection
return aggregationcollection
public void setaggregationcollection aggregationcollection aggregationcollection
this aggregationcollection   aggregationcollection
public aggregationstrategy getaggregationstrategy
return aggregationstrategy
public void setaggregationstrategy aggregationstrategy aggregationstrategy
this aggregationstrategy   aggregationstrategy
public integer getbatchsize
return batchsize
public void setbatchsize integer batchsize
this batchsize   batchsize
public long getbatchtimeout
return batchtimeout
public void setbatchtimeout long batchtimeout
this batchtimeout   batchtimeout
public string getstrategyref
return strategyref
public void setstrategyref string strategyref
this strategyref   strategyref
public completedpredicate getcompletepredicate
return completedpredicate
public void setcompletepredicate completedpredicate completedpredicate
this completedpredicate   completedpredicate
// fluent api
//-------------------------------------------------------------------------
public aggregatortype batchsize int batchsize
setbatchsize batchsize
return this
public aggregatortype batchtimeout long batchtimeout
setbatchtimeout batchtimeout
return this
/**
* sets the predicate used to determine if the aggregation is completed
*
* @return the clause used to create the predicate
*/
public expressionclause<aggregatortype> completedpredicate
checknocompletedpredicate
expressionclause<aggregatortype> clause   new expressionclause<aggregatortype> this
completedpredicate   new completedpredicate clause
return clause
/**
* sets the predicate used to determine if the aggregation is completed
*/
public aggregatortype completedpredicate predicate predicate
checknocompletedpredicate
completedpredicate   new completedpredicate predicate
return this
protected void checknocompletedpredicate
if  completedpredicate    null
throw new illegalargumentexception     this