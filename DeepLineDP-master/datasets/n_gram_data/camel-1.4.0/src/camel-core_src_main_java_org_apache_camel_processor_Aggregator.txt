/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel endpoint
import org apache camel expression
import org apache camel predicate
import org apache camel processor
import org apache camel processor aggregate aggregationcollection
import org apache camel processor aggregate aggregationstrategy
import org apache camel processor aggregate predicateaggregationcollection
/**
* an implementation of the <a
* href="http://activemq.apache.org/camel/aggregator.html">aggregator</a>
* pattern where a batch of messages are processed (up to a maximum amount or
* until some timeout is reached) and messages for the same correlation key are
* combined together using some kind of {@link aggregationstrategy}
* (by default the latest message is used) to compress many message exchanges
* into a smaller number of exchanges.
* <p/>
* a good example of this is stock market data; you may be receiving 30,000
* messages/second and you may want to throttle it right down so that multiple
* messages for the same stock are combined (or just the latest message is used
* and older prices are discarded). another idea is to combine line item messages
* together into a single invoice message.
*
* @version $revision$
*/
public class aggregator extends batchprocessor
private predicate aggregationcompletedpredicate
public aggregator endpoint endpoint  processor processor  expression correlationexpression
aggregationstrategy aggregationstrategy
this endpoint  processor  new aggregationcollection correlationexpression  aggregationstrategy
public aggregator endpoint endpoint  processor processor  expression correlationexpression
aggregationstrategy aggregationstrategy  predicate aggregationcompletedpredicate
this endpoint  processor  new predicateaggregationcollection correlationexpression  aggregationstrategy  aggregationcompletedpredicate
this aggregationcompletedpredicate   aggregationcompletedpredicate
public aggregator endpoint endpoint  processor processor  aggregationcollection collection
super endpoint  processor  collection
@override
public string tostring
return     getprocessor
@override
protected boolean isbatchcompleted int index
if  aggregationcompletedpredicate    null
if  getcollection   size   > 0
return true
return super isbatchcompleted index