/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor exceptionpolicy
import java util map
import java util set
import org apache camel exchange
import org apache camel model exceptiontype
import org apache commons logging log
import org apache commons logging logfactory
/**
* the default strategy used in camel to resolve the {@link org.apache.camel.model.exceptiontype} that should
* handle the thrown exception.
* <p/>
* this strategy applies the following rules:
* <ul>
*   <li>the exception type must be configured with an exception that is an instance of the thrown exception</li>
*   <li>if the exception type has exactly the thrown exception then its selected</li>
*   <li>otherwise the type that has an exception that is super of the thrown exception is selected
*       (recurring up the exception hierarchy)
*  </ul>
*/
public class defaultexceptionpolicystrategy implements exceptionpolicystrategy
private static final transient log log   logfactory getlog defaultexceptionpolicystrategy class
public exceptiontype getexceptionpolicy map<class  exceptiontype> exceptionpolicices  exchange exchange
throwable exception
if  log isdebugenabled
log debug     exception getclass   getname
// the goal is to find the exception with the same/closet inheritance level as the target exception being thrown
int targetlevel   getinheritancelevel exception getclass
// candidate is the best candidate found so far to return
exceptiontype candidate   null
// difference in inheritance level between the current candidate and the thrown exception (target level)
int candidatediff   integer max_value
// loop through all the entries and find the best candidates to use
set<map entry<class  exceptiontype>> entries   exceptionpolicices entryset
for  map entry<class  exceptiontype> entry   entries
class clazz   entry getkey
exceptiontype type   entry getvalue
// must be instance of check to ensure that the clazz is one type of the thrown exception
if  clazz isinstance exception
// exact match
if  clazz equals exception getclass
candidate   type
break
// not an exact match so find the best candidate
int level   getinheritancelevel clazz
int diff   targetlevel   level
if  diff < candidatediff
// replace with a much better candidate
candidate   type
candidatediff   diff
if  log isdebugenabled
if  candidate    null
log debug     candidate
else
log debug
return candidate
private static int getinheritancelevel class clazz
if  clazz    null      equals clazz getname
return 0
return 1   getinheritancelevel clazz getsuperclass