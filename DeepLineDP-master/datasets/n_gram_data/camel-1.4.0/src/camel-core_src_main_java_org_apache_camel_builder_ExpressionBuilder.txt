/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import java util arraylist
import java util arrays
import java util collection
import java util list
import java util stringtokenizer
import java util regex pattern
import org apache camel exchange
import org apache camel expression
import org apache camel message
/**
* a helper class for working with <a href="http://activemq.apache.org/camel/expression.html">expressions</a>.
*
* @version $revision$
*/
public final class expressionbuilder
/**
* utility classes should not have a public constructor.
*/
private expressionbuilder
/**
* returns an expression for the header value with the given name
*
* @param headername the name of the header the expression will return
* @return an expression object which will return the header value
*/
public static <e extends exchange> expression<e> headerexpression final string headername
return new expression<e>
public object evaluate e exchange
object header   exchange getin   getheader headername
if  header    null
// lets try the exchange header
header   exchange getproperty headername
return header
@override
public string tostring
return     headername
/**
* returns an expression for the inbound message headers
*
* @see message#getheaders()
* @return an expression object which will return the inbound headers
*/
public static <e extends exchange> expression<e> headersexpression
return new expression<e>
public object evaluate e exchange
return exchange getin   getheaders
@override
public string tostring
return
/**
* returns an expression for the out header value with the given name
*
* @param headername the name of the header the expression will return
* @return an expression object which will return the header value
*/
public static <e extends exchange> expression<e> outheaderexpression final string headername
return new expression<e>
public object evaluate e exchange
message out   exchange getout false
if  out    null
return null
object header   out getheader headername
if  header    null
// lets try the exchange header
header   exchange getproperty headername
return header
@override
public string tostring
return     headername
/**
* returns an expression for the outbound message headers
*
* @see message#getheaders()
* @return an expression object which will return the inbound headers
*/
public static <e extends exchange> expression<e> outheadersexpression
return new expression<e>
public object evaluate e exchange
return exchange getout   getheaders
@override
public string tostring
return
/**
* returns an expression for the property value with the given name
*
* @see exchange#getproperty(string)
* @param propertyname the name of the property the expression will return
* @return an expression object which will return the property value
*/
public static <e extends exchange> expression<e> propertyexpression final string propertyname
return new expression<e>
public object evaluate e exchange
return exchange getproperty propertyname
@override
public string tostring
return     propertyname
/**
* returns an expression for the property value with the given name
*
* @see exchange#getproperties()
* @return an expression object which will return the properties
*/
public static <e extends exchange> expression<e> propertiesexpression
return new expression<e>
public object evaluate e exchange
return exchange getproperties
@override
public string tostring
return
/**
* returns an expression for a system property value with the given name
*
* @param propertyname the name of the system property the expression will
*                return
* @return an expression object which will return the system property value
*/
public static <e extends exchange> expression<e> systempropertyexpression final string propertyname
return systempropertyexpression propertyname  null
/**
* returns an expression for a system property value with the given name
*
* @param propertyname the name of the system property the expression will
*                return
* @return an expression object which will return the system property value
*/
public static <e extends exchange> expression<e> systempropertyexpression final string propertyname
final string defaultvalue
return new expression<e>
public object evaluate e exchange
return system getproperty propertyname  defaultvalue
@override
public string tostring
return     propertyname
/**
* returns an expression for the constant value
*
* @param value the value the expression will return
* @return an expression object which will return the constant value
*/
public static <e extends exchange> expression<e> constantexpression final object value
return new expression<e>
public object evaluate e exchange
return value
@override
public string tostring
return     value
/**
* returns the expression for the exchanges inbound message body
*/
public static <e extends exchange> expression<e> bodyexpression
return new expression<e>
public object evaluate e exchange
return exchange getin   getbody
@override
public string tostring
return
/**
* returns the expression for the exchanges inbound message body converted
* to the given type
*/
public static <e extends exchange  t> expression<e> bodyexpression final class<t> type
return new expression<e>
public object evaluate e exchange
return exchange getin   getbody type
@override
public string tostring
return     type getname
/**
* returns the expression for the out messages body
*/
public static <e extends exchange> expression<e> outbodyexpression
return new expression<e>
public object evaluate e exchange
message out   exchange getout false
if  out    null
return null
return out getbody
@override
public string tostring
return
/**
* returns the expression for the exchanges outbound message body converted
* to the given type
*/
public static <e extends exchange  t> expression<e> outbodyexpression final class<t> type
return new expression<e>
public object evaluate e exchange
message out   exchange getout false
if  out    null
return null
return out getbody type
@override
public string tostring
return     type getname
/**
* returns the expression for the fault messages body
*/
public static <e extends exchange> expression<e> faultbodyexpression
return new expression<e>
public object evaluate e exchange
return exchange getfault   getbody
@override
public string tostring
return
/**
* returns the expression for the exchanges fault message body converted
* to the given type
*/
public static <e extends exchange  t> expression<e> faultbodyexpression final class<t> type
return new expression<e>
public object evaluate e exchange
return exchange getfault   getbody type
@override
public string tostring
return     type getname
/**
* returns the expression for the exchange
*/
public static <e extends exchange> expression<e> exchangeexpression
return new expression<e>
public object evaluate e exchange
return exchange
@override
public string tostring
return
/**
* returns the expression for the in message
*/
public static <e extends exchange> expression<e> inmessageexpression
return new expression<e>
public object evaluate e exchange
return exchange getin
@override
public string tostring
return
/**
* returns the expression for the out message
*/
public static <e extends exchange> expression<e> outmessageexpression
return new expression<e>
public object evaluate e exchange
return exchange getout
@override
public string tostring
return
/**
* returns an expression which converts the given expression to the given
* type
*/
public static <e extends exchange> expression<e> convertto final expression expression  final class type
return new expression<e>
public object evaluate e exchange
object value   expression evaluate exchange
return exchange getcontext   gettypeconverter   convertto type  value
@override
public string tostring
return     expression       type getname
/**
* returns a tokenize expression which will tokenize the string with the
* given token
*/
public static <e extends exchange> expression<e> tokenizeexpression final expression<e> expression
final string token
return new expression<e>
public object evaluate e exchange
string text   evaluatestringexpression expression  exchange
if  text    null
return null
stringtokenizer iter   new stringtokenizer text  token
list<string> answer   new arraylist<string>
while  iter hasmoretokens
answer add iter nexttoken
return answer
@override
public string tostring
return     expression       token
/**
* returns a tokenize expression which will tokenize the string with the
* given regex
*/
public static <e extends exchange> expression<e> regextokenize final expression<e> expression
string regextokenizer
final pattern pattern   pattern compile regextokenizer
return new expression<e>
public object evaluate e exchange
string text   evaluatestringexpression expression  exchange
if  text    null
return null
return arrays aslist pattern split text
@override
public string tostring
return     expression       pattern pattern
/**
* transforms the expression into a string then performs the regex
* replaceall to transform the string and return the result
*/
public static <e extends exchange> expression<e> regexreplaceall final expression<e> expression
string regex  final string replacement
final pattern pattern   pattern compile regex
return new expression<e>
public object evaluate e exchange
string text   evaluatestringexpression expression  exchange
if  text    null
return null
return pattern matcher text  replaceall replacement
@override
public string tostring
return     expression       pattern pattern
/**
* transforms the expression into a string then performs the regex
* replaceall to transform the string and return the result
*/
public static <e extends exchange> expression<e> regexreplaceall final expression<e> expression
string regex
final expression<e> replacementexpression
final pattern pattern   pattern compile regex
return new expression<e>
public object evaluate e exchange
string text   evaluatestringexpression expression  exchange
string replacement   evaluatestringexpression replacementexpression  exchange
if  text    null    replacement    null
return null
return pattern matcher text  replaceall replacement
@override
public string tostring
return     expression       pattern pattern
/**
* appends the string evaluations of the two expressions together
*/
public static <e extends exchange> expression<e> append final expression<e> left
final expression<e> right
return new expression<e>
public object evaluate e exchange
return evaluatestringexpression left  exchange    evaluatestringexpression right  exchange
@override
public string tostring
return     left       right
/**
* evaluates the expression on the given exchange and returns the string
* representation
*
* @param expression the expression to evaluate
* @param exchange the exchange to use to evaluate the expression
* @return the string representation of the expression or null if it could
*         not be evaluated
*/
public static <e extends exchange> string evaluatestringexpression expression<e> expression  e exchange
object value   expression evaluate exchange
return exchange getcontext   gettypeconverter   convertto string class  value
/**
* returns an expression for the given system property
*/
public static <e extends exchange> expression<e> systemproperty final string name
return systemproperty name  null
/**
* returns an expression for the given system property
*/
public static <e extends exchange> expression<e> systemproperty final string name
final string defaultvalue
return new expression<e>
public object evaluate e exchange
return system getproperty name  defaultvalue
/**
* returns an expression which returns the string concatenation value of the various
* expressions
*
* @param expressions the expression to be concatenated dynamically
* @return an expression which when evaluated will return the concatenated values
*/
public static <e extends exchange> expression<e> concatexpression final collection<expression> expressions
return concatexpression expressions  null
/**
* returns an expression which returns the string concatenation value of the various
* expressions
*
* @param expressions the expression to be concatenated dynamically
* @param expression the text description of the expression
* @return an expression which when evaluated will return the concatenated values
*/
public static <e extends exchange> expression<e> concatexpression final collection<expression> expressions  final string expression
return new expression<e>
public object evaluate e exchange
stringbuffer buffer   new stringbuffer
for  expression<e> expression   expressions
string text   evaluatestringexpression expression  exchange
if  text    null
buffer append text
return buffer tostring
@override
public string tostring
if  expression    null
return expression
else
return     expressions