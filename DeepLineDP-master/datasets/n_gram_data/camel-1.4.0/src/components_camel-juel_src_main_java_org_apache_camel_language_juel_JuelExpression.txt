/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel language juel
import java util properties
import javax el arrayelresolver
import javax el compositeelresolver
import javax el elcontext
import javax el elresolver
import javax el expressionfactory
import javax el listelresolver
import javax el mapelresolver
import javax el resourcebundleelresolver
import javax el valueexpression
import de odysseus el util simplecontext
import org apache camel exchange
import org apache camel message
import org apache camel impl expressionsupport
/**
* the <a href="http://activemq.apache.org/camel/el.html">el language from jsp and jsf</a>
* using the <a href="http://activemq.apache.org/camel/juel.html">juel library</a>
*
* @version $revision$
*/
public class juelexpression extends expressionsupport<exchange>
private final string expression
private final class<?> type
private expressionfactory expressionfactory
private properties expressionfactoryproperties
public juelexpression string expression  class<?> type
this expression   expression
this type   type
public static juelexpression el string expression
return new juelexpression expression  object class
public object evaluate exchange exchange
// todo we could use caching here but then we'd have possible concurrency issues
// so lets assume that the provider caches
elcontext context   populatecontext createcontext    exchange
valueexpression valueexpression   getexpressionfactory   createvalueexpression context  expression  type
return valueexpression getvalue context
public expressionfactory getexpressionfactory
if  expressionfactory    null
properties properties   getexpressionfactoryproperties
expressionfactory   expressionfactory newinstance properties
return expressionfactory
public void setexpressionfactory expressionfactory expressionfactory
this expressionfactory   expressionfactory
public properties getexpressionfactoryproperties
if  expressionfactoryproperties    null
expressionfactoryproperties   new properties
populatedefaultexpressionproperties expressionfactoryproperties
return expressionfactoryproperties
public void setexpressionfactoryproperties properties expressionfactoryproperties
this expressionfactoryproperties   expressionfactoryproperties
protected elcontext populatecontext elcontext context  exchange exchange
setvariable context     exchange  exchange class
setvariable context     exchange getin    message class
message out   exchange getout false
setvariable context     out  message class
return context
/**
* a strategy method to populate the default properties used to create the expression factory
*/
protected void populatedefaultexpressionproperties properties properties
// lets enable method invocations
properties setproperty
protected void setvariable elcontext context  string name  object value  class<?> type
valueexpression valueexpression   getexpressionfactory   createvalueexpression value  type
simplecontext simplecontext    simplecontext  context
simplecontext setvariable name  valueexpression
/**
* factory method to create the el context
*/
protected elcontext createcontext
elresolver resolver   new compositeelresolver
//add(methodresolver);
add new arrayelresolver false
add new listelresolver false
add new mapelresolver false
add new resourcebundleelresolver
add new beanandmethodelresolver
return new simplecontext resolver
protected string assertionfailuremessage exchange exchange
return expression