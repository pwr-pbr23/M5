/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util concurrent rejectedexecutionexception
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel exchangeproperty
import org apache camel message
import org apache camel processor
import org apache camel impl converter asyncprocessortypeconverter
import org apache camel model exceptiontype
import org apache camel processor exceptionpolicy exceptionpolicystrategy
import org apache camel util asyncprocessorhelper
import org apache camel util servicehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* implements a <a
* href="http://activemq.apache.org/camel/dead-letter-channel.html">dead letter
* channel</a> after attempting to redeliver the message using the
* {@link redeliverypolicy}
*
* @version $revision$
*/
public class deadletterchannel extends errorhandlersupport implements asyncprocessor
public static final string redelivery_counter
public static final string redelivered
public static final string exception_cause_property
private class redeliverydata
int redeliverycounter
long redeliverydelay
boolean sync   true
// default behaviour which can be overloaded on a per exception basis
redeliverypolicy currentredeliverypolicy   redeliverypolicy
processor failureprocessor   deadletter
private static final transient log log   logfactory getlog deadletterchannel class
private static final string failure_handled_property   deadletterchannel class getname
private processor output
private processor deadletter
private asyncprocessor outputasync
private redeliverypolicy redeliverypolicy
private logger logger
public deadletterchannel processor output  processor deadletter
this output  deadletter  new redeliverypolicy    deadletterchannel createdefaultlogger
errorhandlersupport createdefaultexceptionpolicystrategy
public deadletterchannel processor output  processor deadletter  redeliverypolicy redeliverypolicy  logger logger  exceptionpolicystrategy exceptionpolicystrategy
this deadletter   deadletter
this output   output
this outputasync   asyncprocessortypeconverter convert output
this redeliverypolicy   redeliverypolicy
this logger   logger
setexceptionpolicy exceptionpolicystrategy
public static <e extends exchange> logger createdefaultlogger
return new logger log  logginglevel error
@override
public string tostring
return     output       deadletter       redeliverypolicy
public boolean process exchange exchange  final asynccallback callback
return process exchange  callback  new redeliverydata
public boolean process final exchange exchange  final asynccallback callback  final redeliverydata data
while  true
// we can't keep retrying if the route is being shutdown.
if   isrunallowed
if  exchange getexception      null
exchange setexception new rejectedexecutionexception
callback done data sync
return data sync
// if the exchange is transacted then let the underlysing system handle the redelivery etc.
// this deadletterchannel is only for non transacted exchanges
if  exchange istransacted      exchange getexception      null
if  log isdebugenabled
log debug     exchange
return data sync
if  exchange getexception      null
throwable e   exchange getexception
exchange setexception null      reset it since we are handling it
logger log     exchange getexchangeid         data redeliverycounter       e  e
data redeliverycounter   incrementredeliverycounter exchange  e
exceptiontype exceptionpolicy   getexceptionpolicy exchange  e
if  exceptionpolicy    null
data currentredeliverypolicy   exceptionpolicy createredeliverypolicy data currentredeliverypolicy
processor processor   exceptionpolicy geterrorhandler
if  processor    null
data failureprocessor   processor
if   data currentredeliverypolicy shouldredeliver data redeliverycounter
setfailurehandled exchange  true
asyncprocessor afp   asyncprocessortypeconverter convert data failureprocessor
boolean sync   afp process exchange  new asynccallback
public void done boolean sync
restoreexceptiononexchange exchange
callback done data sync
restoreexceptiononexchange exchange
logger log     exchange getexchangeid         data failureprocessor
return sync
if  data redeliverycounter > 0
// figure out how long we should wait to resend this message.
data redeliverydelay   data currentredeliverypolicy sleep data redeliverydelay
exchange setproperty exception_cause_property  exchange getexception
exchange setexception null
boolean sync   outputasync process exchange  new asynccallback
public void done boolean sync
// only handle the async case...
if  sync
return
data sync   false
if  exchange getexception      null
process exchange  callback  data
else
callback done sync
if   sync
// it is going to be processed async..
return false
if  exchange getexception      null    isfailurehandled exchange
// if everything went well.. then we exit here..
callback done true
return true
// error occurred so loop back around.....
public static boolean isfailurehandled exchange exchange
return exchange getproperty failure_handled_property     null
public static void setfailurehandled exchange exchange  boolean ishandled
if  ishandled
exchange setproperty failure_handled_property  exchange getexception
exchange setexception null
else
exchange setexception exchange getproperty failure_handled_property  throwable class
exchange removeproperty failure_handled_property
public static void restoreexceptiononexchange exchange exchange
exchange setexception exchange getproperty failure_handled_property  throwable class
public void process exchange exchange  throws exception
asyncprocessorhelper process this  exchange
// properties
// -------------------------------------------------------------------------
/**
* returns the output processor
*/
public processor getoutput
return output
/**
* returns the dead letter that message exchanges will be sent to if the
* redelivery attempts fail
*/
public processor getdeadletter
return deadletter
public redeliverypolicy getredeliverypolicy
return redeliverypolicy
/**
* sets the redelivery policy
*/
public void setredeliverypolicy redeliverypolicy redeliverypolicy
this redeliverypolicy   redeliverypolicy
public logger getlogger
return logger
/**
* sets the logger strategy; which {@link log} to use and which
* {@link logginglevel} to use
*/
public void setlogger logger logger
this logger   logger
// implementation methods
// -------------------------------------------------------------------------
/**
* increments the redelivery counter and adds the redelivered flag if the
* message has been redelivered
*/
protected int incrementredeliverycounter exchange exchange  throwable e
message in   exchange getin
integer counter   in getheader redelivery_counter  integer class
int next   1
if  counter    null
next   counter   1
in setheader redelivery_counter  next
in setheader redelivered  boolean true
exchange setexception e
return next
@override
protected void dostart   throws exception
servicehelper startservices output  deadletter
@override
protected void dostop   throws exception
servicehelper stopservices deadletter  output