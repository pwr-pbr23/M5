/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spi
import java util list
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel exchange
import org apache camel intercept
import org apache camel processor
import org apache camel model fromtype
import org apache camel model processortype
import org apache camel model routetype
/**
* the context used to activate new routing rules
*
* @version $revision$
*/
public interface routecontext
endpoint<? extends exchange> getendpoint
fromtype getfrom
routetype getroute
/**
* gets the camelcontext
*/
camelcontext getcamelcontext
processor createprocessor processortype node  throws exception
/**
* resolves an endpoint from the uri
*/
endpoint<? extends exchange> resolveendpoint string uri
/**
* resolves an endpoint from either a uri or a named reference
*/
endpoint<? extends exchange> resolveendpoint string uri  string ref
/**
* lookup an object by name and type
*/
<t> t lookup string name  class<t> type
/**
* lets complete the route creation, creating a single event driven route
* for the current from endpoint with any processors required
*/
void commit
void addeventdrivenprocessor processor processor
void intercept intercept interceptor
processor createproceedprocessor
/**
* this method retrieves the interceptstrategy instances this route context.
*
* @return interceptstrategy
*/
list<interceptstrategy> getinterceptstrategies
/**
* this method sets the interceptstrategy instances on this route context.
*
* @param interceptstrategies
*/
void setinterceptstrategies list<interceptstrategy> interceptstrategies
void addinterceptstrategy interceptstrategy interceptstrategy
/**
* this method retrieves the errorhandlerwrappingstrategy.
*
* @return errorhandlerwrappingstrategy
*/
errorhandlerwrappingstrategy geterrorhandlerwrappingstrategy
/**
* this method sets the errorhandlerwrappingstrategy.
*
*/
void seterrorhandlerwrappingstrategy errorhandlerwrappingstrategy strategy
/**
* if this flag is true, {@link processortype#addroutes(routecontext, java.util.collection)
* will not add processor to addeventdrivenprocessor to the routecontext and it
* will prevent from adding an eventdrivenroute.
*
*/
void setisrouteadded boolean value
/**
* @see {@link #setisrouteadded(boolean)}
*
*/
boolean isrouteadded