/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component direct
import java util list
import java util concurrent copyonwritearraylist
import org apache camel consumer
import org apache camel exchange
import org apache camel processor
import org apache camel producer
import org apache camel impl defaultconsumer
import org apache camel impl defaultendpoint
import org apache commons logging log
import org apache commons logging logfactory
/**
* represents a direct endpoint that synchronously invokes the consumers of the
* endpoint when a producer sends a message to it.
*
* @version $revision$
*/
public class directendpoint<e extends exchange> extends defaultendpoint<e>
private static final transient log log   logfactory getlog directendpoint class
private boolean allowmultipleconsumers   true
private final copyonwritearraylist<defaultconsumer<e>> consumers   new copyonwritearraylist<defaultconsumer<e>>
public directendpoint string uri  directcomponent<e> component
super uri  component
public directendpoint string endpointuri
super endpointuri
public producer createproducer   throws exception
return new directproducer<e> this
public consumer<e> createconsumer processor processor  throws exception
return new defaultconsumer<e> this  processor
@override
public void start   throws exception
if   allowmultipleconsumers     consumers isempty
throw new illegalstateexception     getendpointuri
consumers add this
super start
@override
public void stop   throws exception
super stop
consumers remove this
public boolean isallowmultipleconsumers
return allowmultipleconsumers
public void setallowmultipleconsumers boolean allowmutlipleconsumers
this allowmultipleconsumers   allowmutlipleconsumers
public boolean issingleton
return true
public list<defaultconsumer<e>> getconsumers
return consumers