/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util arraylist
import java util list
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel processor
import org apache camel processor catchprocessor
import org apache camel processor tryprocessor
import org apache camel spi routecontext
/**
* represents an xml &lt;try/&gt; element
*
* @version $revision$
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class trytype extends outputtype<trytype>
@xmltransient
private list<catchtype> catchclauses
@xmltransient
private finallytype finallyclause
@xmltransient
private boolean initialized
@xmltransient
private list<processortype<?>> outputswithoutcatches
@override
public string tostring
return     getoutputs
@override
public string getshortname
return
@override
public processor createprocessor routecontext routecontext  throws exception
processor tryprocessor   createoutputsprocessor routecontext  getoutputswithoutcatches
processor finallyprocessor   null
if  finallyclause    null
finallyprocessor   finallyclause createprocessor routecontext
list<catchprocessor> catchprocessors   new arraylist<catchprocessor>
if  catchclauses    null
for  catchtype catchclause   catchclauses
catchprocessors add catchclause createprocessor routecontext
return new tryprocessor tryprocessor  catchprocessors  finallyprocessor
// fluent api
// -------------------------------------------------------------------------
public trytype handle class<?> exceptiontype
popblock
catchtype answer   new catchtype exceptiontype
addoutput answer
pushblock answer
return this
/**
* @deprecated use {@link #finallyblock()} instead, as the name
* is better. current name sugests that it handles exception,
* while it mimics java finally keyword. will be removed in camel 2.0.
*/
@deprecated
public trytype handleall
return finallyblock
public trytype finallyblock
popblock
finallytype answer   new finallytype
addoutput answer
pushblock answer
return this
@override
public processortype<? extends processortype> end
popblock
return super end
// properties
// -------------------------------------------------------------------------
public list<catchtype> getcatchclauses
if  catchclauses    null
checkinitialized
return catchclauses
public finallytype getfinallyclause
if  finallyclause    null
checkinitialized
return finallyclause
public list<processortype<?>> getoutputswithoutcatches
if  outputswithoutcatches    null
checkinitialized
return outputswithoutcatches
public void setoutputs list<processortype<?>> outputs
initialized   false
super setoutputs outputs
@override
public void addoutput processortype output
initialized   false
super addoutput output
/**
* checks whether or not this object has been initialized
*/
protected void checkinitialized
if   initialized
initialized   true
outputswithoutcatches   new arraylist<processortype<?>>
catchclauses   new arraylist<catchtype>
finallyclause   null
for  processortype output   outputs
if  output instanceof catchtype
catchclauses add  catchtype output
else if  output instanceof finallytype
if  finallyclause    null
throw new illegalargumentexception     finallyclause
output
else
finallyclause    finallytype output
else
outputswithoutcatches add output