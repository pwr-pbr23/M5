/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util collection
import java util iterator
import java util list
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel message
import org apache camel processor
import org apache camel impl converter asyncprocessortypeconverter
import org apache camel util asyncprocessorhelper
import org apache camel util exchangehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* creates a pipeline pattern where the output of the previous step is sent as
* input to the next step, reusing the same message exchanges
*
* @version $revision$
*/
public class pipeline extends multicastprocessor implements asyncprocessor
private static final transient log log   logfactory getlog pipeline class
public pipeline collection<processor> processors
super processors
public static processor newinstance list<processor> processors
if  processors isempty
return null
else if  processors size      1
return processors get 0
return new pipeline processors
public void process exchange exchange  throws exception
asyncprocessorhelper process this  exchange
public boolean process exchange original  asynccallback callback
iterator<processor> processors   getprocessors   iterator
exchange nextexchange   original
boolean first   true
while  true
if  nextexchange isfailed
if  log isdebugenabled
log debug     nextexchange
nextexchange getexception
nextexchange getfault false
break
if   processors hasnext
break
asyncprocessor processor   asyncprocessortypeconverter convert processors next
if  first
first   false
else
nextexchange   createnextexchange processor  nextexchange
boolean sync   process original  nextexchange  callback  processors  processor
// continue processing the pipeline synchronously ...
if   sync
// the pipeline will be completed async...
return false
// if we get here then the pipeline was processed entirely
// synchronously.
exchangehelper copyresults original  nextexchange
callback done true
return true
private boolean process final exchange original  final exchange exchange  final asynccallback callback  final iterator<processor> processors  asyncprocessor processor
return processor process exchange  new asynccallback
public void done boolean sync
// we only have to handle async completion of
// the pipeline..
if  sync
return
// continue processing the pipeline...
exchange nextexchange   exchange
while  processors hasnext
asyncprocessor processor   asyncprocessortypeconverter convert processors next
if  nextexchange isfailed
if  log isdebugenabled
log debug     nextexchange       nextexchange getexception
nextexchange getfault false
break
nextexchange   createnextexchange processor  nextexchange
sync   process original  nextexchange  callback  processors  processor
if   sync
return
exchangehelper copyresults original  nextexchange
callback done false
/**
* strategy method to create the next exchange from the previous exchange.
*
* @param producer         the producer used to send to the endpoint
* @param previousexchange the previous exchange
* @return a new exchange
*/
protected exchange createnextexchange processor producer  exchange previousexchange
exchange answer   previousexchange newinstance
answer getproperties   putall previousexchange getproperties
// now lets set the input of the next exchange to the output of the
// previous message if it is not null
message previousout   previousexchange getout false
message in   answer getin
if  previousout    null
in copyfrom previousout
else
in copyfrom previousexchange getin
return answer
@override
public string tostring
return     getprocessors