/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import java util arraylist
import java util list
import java util concurrent atomic atomicboolean
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel predicate
import org apache camel route
import org apache camel routes
import org apache camel impl defaultcamelcontext
import org apache camel model choicetype
import org apache camel model exceptiontype
import org apache camel model intercepttype
import org apache camel model processortype
import org apache camel model routetype
import org apache camel model routestype
import org apache camel processor delegateprocessor
import org apache camel processor interceptor streamcachinginterceptor
/**
* a <a href="http://activemq.apache.org/camel/dsl.html">java dsl</a> which is
* used to build {@link route} instances in a {@link camelcontext} for smart routing.
*
* @version $revision$
*/
public abstract class routebuilder extends buildersupport implements routes
private atomicboolean initialized   new atomicboolean false
private routestype routecollection   new routestype
private list<route> routes   new arraylist<route>
public routebuilder
this null
public routebuilder camelcontext context
super context
@override
public string tostring
return routecollection tostring
/**
* called on initialization to to build the required destinationbuilders
*/
public abstract void configure   throws exception
/**
* creates a new route from the given uri input
*/
public routetype from string uri
routetype answer   routecollection from uri
configureroute answer
return answer
/**
* creates a new route from the given endpoint
*/
public routetype from endpoint endpoint
routetype answer   routecollection from endpoint
configureroute answer
return answer
/**
* installs the given error handler builder
*
* @param errorhandlerbuilder the error handler to be used by default for
*                all child routes
* @return the current builder with the error handler configured
*/
public routebuilder errorhandler errorhandlerbuilder errorhandlerbuilder
seterrorhandlerbuilder errorhandlerbuilder
return this
/**
* configures whether or not the error handler is inherited by every
* processing node (or just the top most one)
*
* @param value the flag as to whether error handlers should be inherited or not
* @return the current builder
*/
public routebuilder inheriterrorhandler boolean value
routecollection setinheriterrorhandlerflag value
return this
/**
* adds the given interceptor to this route
*/
public routebuilder intercept delegateprocessor interceptor
routecollection intercept interceptor
return this
/**
* adds a route for an interceptor; use the {@link processortype#proceed()} method
* to continue processing the underlying route being intercepted.
*/
public intercepttype intercept
return routecollection intercept
/**
* applies a route for an interceptor if the given predicate is true
* otherwise the interceptor route is not applied
*/
public choicetype intercept predicate predicate
return routecollection intercept predicate
/**
* adds an exception handler route for the given exception type
*/
public exceptiontype exception class exceptiontype
return routecollection exception exceptiontype
// properties
// -----------------------------------------------------------------------
public camelcontext getcontext
camelcontext context   super getcontext
if  context    null
context   createcontainer
setcontext context
return context
/**
* returns the routing map from inbound endpoints to processors
*/
public list<route> getroutelist   throws exception
checkinitialized
return routes
@override
public void setinheriterrorhandler boolean inheriterrorhandler
super setinheriterrorhandler inheriterrorhandler
routecollection setinheriterrorhandlerflag inheriterrorhandler
@override
public void seterrorhandlerbuilder errorhandlerbuilder errorhandlerbuilder
super seterrorhandlerbuilder errorhandlerbuilder
routecollection seterrorhandlerbuilder geterrorhandlerbuilder
// implementation methods
// -----------------------------------------------------------------------
protected void checkinitialized   throws exception
if  initialized compareandset false  true
configure
populateroutes routes
protected void populateroutes list<route> routes  throws exception
camelcontext camelcontext   getcontext
if  camelcontext    null
throw new illegalargumentexception
routecollection setcamelcontext camelcontext
camelcontext addroutedefinitions routecollection getroutes
public void setroutecollection routestype routecollection
this routecollection   routecollection
public routestype getroutecollection
return this routecollection
/**
* completely disable stream caching for all routes being defined in the same routebuilder after this.
*/
public void nostreamcaching
streamcachinginterceptor nostreamcaching routecollection getinterceptors
/**
* enable stream caching for all routes being defined in the same routebuilder after this call.
*/
public void streamcaching
routecollection intercept new streamcachinginterceptor
/**
* factory method
*/
protected camelcontext createcontainer
return new defaultcamelcontext
protected void configureroute routetype route
route setgroup getclass   getname