/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util concurrent arrayblockingqueue
import java util concurrent blockingqueue
import java util concurrent rejectedexecutionexception
import java util concurrent threadfactory
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel service
import org apache camel util asyncprocessorhelper
/**
* a processor that forces async processing of the exchange using a thread pool.
*
* @version $revision$
*/
public class threadprocessor implements asyncprocessor  service
private threadpoolexecutor executor
private long stacksize
private threadgroup threadgroup
private int priority   thread norm_priority
private boolean daemon   true
private string name
private blockingqueue<runnable> taskqueue
private long keepalivetime
private int maxsize   1
private int coresize   1
private final atomicboolean shutdown   new atomicboolean true
private boolean callerrunswhenrejected   true
class processcall implements runnable
private final exchange exchange
private final asynccallback callback
public processcall exchange exchange  asynccallback callback
this exchange   exchange
this callback   callback
public void run
if  shutdown get
exchange setexception new rejectedexecutionexception
callback done false
public void process exchange exchange  throws exception
asyncprocessorhelper process this  exchange
public boolean process final exchange exchange  final asynccallback callback
if  shutdown get
throw new illegalstateexception
processcall call   new processcall exchange  callback
try
executor execute call
return false
catch  rejectedexecutionexception e
if  callerrunswhenrejected
if  shutdown get
exchange setexception new rejectedexecutionexception
else
callback done true
else
exchange setexception e
return true
public void start   throws exception
shutdown set false
getexecutor
public void stop   throws exception
shutdown set true
executor shutdown
executor awaittermination 0  timeunit seconds
public long getstacksize
return stacksize
public void setstacksize long stacksize
this stacksize   stacksize
public threadgroup getthreadgroup
return threadgroup
public void setthreadgroup threadgroup threadgroup
this threadgroup   threadgroup
public int getpriority
return priority
public void setpriority int priority
this priority   priority
public boolean isdaemon
return daemon
public void setdaemon boolean daemon
this daemon   daemon
public string getname
return name
public void setname string name
this name   name
public long getkeepalivetime
return keepalivetime
public void setkeepalivetime long keepalivetime
this keepalivetime   keepalivetime
public int getmaxsize
return maxsize
public void setmaxsize int maxsize
this maxsize   maxsize
public int getcoresize
return coresize
public void setcoresize int coresize
this coresize   coresize
public blockingqueue<runnable> gettaskqueue
if  taskqueue    null
taskqueue   new arrayblockingqueue<runnable> 1000
return taskqueue
public void settaskqueue blockingqueue<runnable> taskqueue
this taskqueue   taskqueue
public threadpoolexecutor getexecutor
if  executor    null
executor   new threadpoolexecutor getcoresize    getmaxsize    getkeepalivetime    timeunit milliseconds  gettaskqueue    new threadfactory
public thread newthread runnable runnable
thread thread
if  getstacksize   > 0
thread   new thread getthreadgroup    runnable  getname    getstacksize
else
thread   new thread getthreadgroup    runnable  getname
thread setdaemon isdaemon
thread setpriority getpriority
return thread
return executor
public void setexecutor threadpoolexecutor executor
this executor   executor
public boolean iscallerrunswhenrejected
return callerrunswhenrejected
public void setcallerrunswhenrejected boolean callerrunswhenrejected
this callerrunswhenrejected   callerrunswhenrejected