/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring
import java util arraylist
import java util list
import java util map
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlattribute
import javax xml bind annotation xmlelement
import javax xml bind annotation xmlelementref
import javax xml bind annotation xmlelements
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel runtimecamelexception
import org apache camel builder errorhandlerbuilder
import org apache camel builder routebuilder
import org apache camel impl defaultlifecyclestrategy
import org apache camel management defaultinstrumentationagent
import org apache camel management instrumentationlifecyclestrategy
import org apache camel model identifiedtype
import org apache camel model routebuilderref
import org apache camel model routecontainer
import org apache camel model routetype
import org apache camel model dataformat dataformattype
import org apache camel processor interceptor debugger
import org apache camel processor interceptor tracer
import org apache camel spi lifecyclestrategy
import org apache camel spi registry
import org apache commons logging log
import org apache commons logging logfactory
import org springframework beans factory disposablebean
import org springframework beans factory factorybean
import org springframework beans factory initializingbean
import org springframework beans factory config beanpostprocessor
import org springframework context applicationcontext
import org springframework context applicationcontextaware
import org springframework context applicationevent
import org springframework context applicationlistener
import org springframework context event contextrefreshedevent
/**
* a spring {@link factorybean} to create and initialize a
* {@link springcamelcontext} and install routes either explicitly configured in
* spring xml or found by searching the classpath for java classes which extend
* {@link routebuilder} using the nested {@link #setpackages(string[])}.
*
* @version $revision$
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class camelcontextfactorybean extends identifiedtype implements routecontainer  factorybean  initializingbean  disposablebean  applicationcontextaware  applicationlistener
private static final log log   logfactory getlog camelcontextfactorybean class
@xmlattribute required   false
private boolean usejmx   boolean true
@xmlattribute required   false
private boolean autowireroutebuilders   boolean true
@xmlattribute required   false
private boolean trace
@xmlattribute required   false
private string errorhandlerref
@xmlelement name      required   false
private string packages
@xmlelement name      type   cameljmxagenttype class  required   false
private cameljmxagenttype cameljmxagent
@xmlelements
@xmlelement name      type   camelbeanpostprocessor class  required   false
@xmlelement name      type   cameltemplatefactorybean class  required   false
@xmlelement name      type   camelproxyfactorytype class  required   false
@xmlelement name      type   camelserviceexportertype class  required   false
private list beans
@xmlelement name      required   false
private list<routebuilderref> builderrefs   new arraylist<routebuilderref>
@xmlelement name      required   false
private list<endpointfactorybean> endpoints
@xmlelementref
private list<dataformattype> dataformats
@xmlelement name      required   false
private list<routetype> routes   new arraylist<routetype>
@xmltransient
private springcamelcontext context
@xmltransient
private routebuilder routebuilder
@xmltransient
private list<routebuilder> additionalbuilders   new arraylist<routebuilder>
@xmltransient
private applicationcontext applicationcontext
@xmltransient
private classloader contextclassloaderonstart
@xmltransient
private beanpostprocessor beanpostprocessor
public camelcontextfactorybean
// lets keep track of the class loader for when we actually do start things up
contextclassloaderonstart   thread currentthread   getcontextclassloader
public object getobject   throws exception
return getcontext
public class getobjecttype
return springcamelcontext class
public boolean issingleton
return true
public void afterpropertiesset   throws exception
// lets see if we can find a debugger to add
// todo there should be a neater way to do this!
debugger debugger   getbeanfortype debugger class
if  debugger    null
getcontext   addinterceptstrategy debugger
tracer tracer   getbeanfortype tracer class
if  tracer    null
getcontext   addinterceptstrategy tracer
// set the lifecycle strategy if defined
lifecyclestrategy lifecyclestrategy   getbeanfortype lifecyclestrategy class
if  lifecyclestrategy    null
getcontext   setlifecyclestrategy lifecyclestrategy
// set the strategy if defined
registry registry   getbeanfortype registry class
if  registry    null
getcontext   setregistry registry
// set the application context and camelcontext for the beanpostprocessor
if  beanpostprocessor    null
if  beanpostprocessor instanceof applicationcontextaware
applicationcontextaware beanpostprocessor  setapplicationcontext applicationcontext
if  beanpostprocessor instanceof camelbeanpostprocessor
camelbeanpostprocessor beanpostprocessor  setcamelcontext getcontext
// lets force any lazy creation
getcontext   addroutedefinitions routes
if   isjmxenabled
cameljmxagent    null    cameljmxagent isdisabled      null    cameljmxagent isdisabled
log debug
getcontext   setlifecyclestrategy new defaultlifecyclestrategy
else if  cameljmxagent    null
log debug
if  lifecyclestrategy    null
log warn
defaultinstrumentationagent agent   new defaultinstrumentationagent
agent setconnectorport cameljmxagent getconnectorport
agent setcreateconnector cameljmxagent iscreateconnector
agent setmbeanobjectdomainname cameljmxagent getmbeanobjectdomainname
agent setmbeanserverdefaultdomain cameljmxagent getmbeanserverdefaultdomain
agent setregistryport cameljmxagent getregistryport
agent setserviceurlpath cameljmxagent getserviceurlpath
agent setuseplatformmbeanserver cameljmxagent isuseplatformmbeanserver
getcontext   setlifecyclestrategy new instrumentationlifecyclestrategy agent
if  log isdebugenabled
log debug     getroutes
findroutebuiders
installroutes
private <t> t getbeanfortype class<t> clazz
t bean   null
string names   getapplicationcontext   getbeannamesfortype clazz  true  true
if  names length    1
bean    t  getapplicationcontext   getbean names  clazz
if  bean    null
applicationcontext parentcontext   getapplicationcontext   getparent
if  parentcontext    null
names   parentcontext getbeannamesfortype clazz  true  true
if  names length    1
bean    t  parentcontext getbean names  clazz
return bean
public void destroy   throws exception
getcontext   stop
public void onapplicationevent applicationevent event
if  log isdebugenabled
log debug     event
if  event instanceof contextrefreshedevent
// now lets start the camelcontext so that all its possible
// dependencies are initailized
try
log debug
getcontext   start
catch  exception e
throw new runtimecamelexception e
/*
* if (context != null) { context.onapplicationevent(event); }
*/
// properties
// -------------------------------------------------------------------------
public springcamelcontext getcontext   throws exception
if  context    null
context   createcontext
return context
public void setcontext springcamelcontext context
this context   context
public list<routetype> getroutes
return routes
public void setroutes list<routetype> routes
this routes   routes
public routebuilder getroutebuilder
return routebuilder
/**
* set a single {@link routebuilder} to be used to create the default routes
* on startup
*/
public void setroutebuilder routebuilder routebuilder
this routebuilder   routebuilder
/**
* set a collection of {@link routebuilder} instances to be used to create
* the default routes on startup
*/
public void setroutebuilders routebuilder builders
for  routebuilder builder   builders
additionalbuilders add builder
public applicationcontext getapplicationcontext
if  applicationcontext    null
throw new illegalargumentexception
return applicationcontext
public void setapplicationcontext applicationcontext applicationcontext
this applicationcontext   applicationcontext
public string getpackages
return packages
/**
* sets the package names to be recursively searched for java classes which
* extend {@link routebuilder} to be auto-wired up to the
* {@link springcamelcontext} as a route. note that classes are excluded if
* they are specifically configured in the spring.xml
*
* @param packages the package names which are recursively searched
*/
public void setpackages string packages
this packages   packages
public void setbeanpostprocessor beanpostprocessor postprocessor
this beanpostprocessor   postprocessor
public beanpostprocessor getbeanpostprocessor
return beanpostprocessor
/**
* this method merely retrieves the value of the "usejmx" attribute and does
* not consider the "disabled" flag in jmxagent element.  the usejmx
* attribute will be removed in 2.0.  please the jmxagent element instead.
*
* @deprecated please the jmxagent element instead. will be removed in camel 2.0.
*/
public boolean isjmxenabled
return usejmx booleanvalue
public boolean getusejmx
return usejmx
/**
* @deprecated please the jmxagent element instead. will be removed in camel 2.0.
*/
public void setusejmx boolean usejmx
this usejmx   usejmx
public void setcameljmxagent cameljmxagenttype agent
cameljmxagent   agent
public boolean gettrace
return trace
public void settrace boolean trace
this trace   trace
public cameljmxagenttype getcameljmxagent
return cameljmxagent
public list<routebuilderref> getbuilderrefs
return builderrefs
public void setbuilderrefs list<routebuilderref> builderrefs
this builderrefs   builderrefs
/**
* if enabled this will force all {@link routebuilder} classes configured in the spring
* {@link applicationcontext} to be registered automatically with this camelcontext.
*/
public void setautowireroutebuilders boolean autowireroutebuilders
this autowireroutebuilders   autowireroutebuilders
public string geterrorhandlerref
return errorhandlerref
/**
* sets the name of the error handler object used to default the error handling strategy
*
* @param errorhandlerref the spring bean ref of the error handler
*/
public void seterrorhandlerref string errorhandlerref
this errorhandlerref   errorhandlerref
// implementation methods
// -------------------------------------------------------------------------
/**
* create the context
*/
protected springcamelcontext createcontext
springcamelcontext ctx   new springcamelcontext getapplicationcontext
ctx setname getid
if  trace    null
ctx settrace trace
if  errorhandlerref    null
errorhandlerbuilder errorhandlerbuilder    errorhandlerbuilder  getapplicationcontext   getbean errorhandlerref  errorhandlerbuilder class
if  errorhandlerbuilder    null
throw new illegalargumentexception     errorhandlerref
ctx seterrorhandlerbuilder errorhandlerbuilder
return ctx
/**
* strategy to install all available routes into the context
*/
protected void installroutes   throws exception
if  autowireroutebuilders    null    autowireroutebuilders booleanvalue
map builders   getapplicationcontext   getbeansoftype routebuilder class  true  true
if  builders    null
for  object builder   builders values
getcontext   addroutes  routebuilder  builder
for  routebuilder routebuilder   additionalbuilders
getcontext   addroutes routebuilder
if  routebuilder    null
getcontext   addroutes routebuilder
// lets add route builders added from references
if  builderrefs    null
for  routebuilderref builderref   builderrefs
routebuilder builder   builderref createroutebuilder getcontext
getcontext   addroutes builder
/**
* strategy method to try find {@link routebuilder} instances on the
* classpath
*/
protected void findroutebuiders   throws exception  instantiationexception
if  packages    null    packages length > 0
routebuilderfinder finder   new routebuilderfinder getcontext    packages  contextclassloaderonstart  getbeanpostprocessor
finder appendbuilders additionalbuilders