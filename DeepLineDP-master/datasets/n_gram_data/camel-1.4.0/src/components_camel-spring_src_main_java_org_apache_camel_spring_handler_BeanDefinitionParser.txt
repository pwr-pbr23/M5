/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring handler
import org w3c dom attr
import org w3c dom element
import org w3c dom namednodemap
import org springframework beans factory support beandefinitionbuilder
import org springframework beans factory xml abstractsinglebeandefinitionparser
import org springframework core conventions
import org springframework util assert
import org springframework util stringutils
/**
* a base class for a parser for a bean.
*
* @version $revision$
*/
// todo cannot use abstractsimplebeandefinitionparser
// as doparse() is final and iseligableattribute does not allow us to filter out attributes
// with the name "xmlns:"
public class beandefinitionparser extends abstractsinglebeandefinitionparser
private class type
protected beandefinitionparser
public beandefinitionparser class type
this type   type
protected class getbeanclass element element
if  type    null
type   loadtype
return type
protected class loadtype
throw new illegalargumentexception
protected boolean iseligibleattribute string attributename
return attributename    null     id_attribute equals attributename
attributename equals        attributename startswith
// todo the following code is copied from abstractsimplebeandefinitionparser
// it can be removed if ever the doparse() method is not final!
// or the spring bug http://jira.springframework.org/browse/spr-4599 is resolved
/**
* parse the supplied {@link element} and populate the supplied
* {@link beandefinitionbuilder} as required.
* <p>this implementation maps any attributes present on the
* supplied element to {@link org.springframework.beans.propertyvalue}
* instances, and
* {@link beandefinitionbuilder#addpropertyvalue(string, object) adds them}
* to the
* {@link org.springframework.beans.factory.config.beandefinition builder}.
* <p>the {@link #extractpropertyname(string)} method is used to
* reconcile the name of an attribute with the name of a javabean
* property.
*
* @param element the xml element being parsed
* @param builder used to define the <code>beandefinition</code>
* @see #extractpropertyname(string)
*/
protected final void doparse element element  beandefinitionbuilder builder
namednodemap attributes   element getattributes
for  int x   0  x < attributes getlength    x
attr attribute    attr  attributes item x
string name   attribute getlocalname
string fullname   attribute getname
if   fullname startswith        fullname equals       iseligibleattribute name
string propertyname   extractpropertyname name
assert state stringutils hastext propertyname
builder addpropertyvalue propertyname  attribute getvalue
postprocess builder  element
/**
* extract a javabean property name from the supplied attribute name.
* <p>the default implementation uses the
* {@link conventions#attributenametopropertyname(string)}
* method to perform the extraction.
* <p>the name returned must obey the standard javabean property name
* conventions. for example for a class with a setter method
* '<code>setbingohallfavourite(string)</code>', the name returned had
* better be '<code>bingohallfavourite</code>' (with that exact casing).
*
* @param attributename the attribute name taken straight from the
*                      xml element being parsed (never <code>null</code>)
* @return the extracted javabean property name (must never be <code>null</code>)
*/
protected string extractpropertyname string attributename
return conventions attributenametopropertyname attributename
/**
* hook method that derived classes can implement to inspect/change a
* bean definition after parsing is complete.
* <p>the default implementation does nothing.
*
* @param beandefinition the parsed (and probably totally defined) bean definition being built
* @param element        the xml element that was the source of the bean definition's metadata
*/
protected void postprocess beandefinitionbuilder beandefinition  element element