/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util concurrent scheduledexecutorservice
import java util concurrent scheduledfuture
import java util concurrent timeunit
import org apache camel endpoint
import org apache camel exchange
import org apache camel processor
import org apache commons logging log
import org apache commons logging logfactory
/**
* a useful base class for any consumer which is polling based
*
* @version $revision$
*/
public abstract class scheduledpollconsumer<e extends exchange> extends defaultconsumer<e> implements
runnable
private static final transient log log   logfactory getlog scheduledpollconsumer class
private final scheduledexecutorservice executor
private long initialdelay   1000
private long delay   500
private timeunit timeunit   timeunit milliseconds
private boolean usefixeddelay
private scheduledfuture<?> future
public scheduledpollconsumer defaultendpoint<e> endpoint  processor processor
this endpoint  processor  endpoint getexecutorservice
public scheduledpollconsumer endpoint<e> endpoint  processor processor  scheduledexecutorservice executor
super endpoint  processor
this executor   executor
if  executor    null
throw new illegalargumentexception
/**
* invoked whenever we should be polled
*/
public void run
if  log isdebugenabled
log debug     this getendpoint
try
poll
catch  exception e
// todo: we should not swallow this but handle it better. see camel-501
log warn     this getendpoint         e getmessage    e
// properties
// -------------------------------------------------------------------------
public long getinitialdelay
return initialdelay
public void setinitialdelay long initialdelay
this initialdelay   initialdelay
public long getdelay
return delay
public void setdelay long delay
this delay   delay
public timeunit gettimeunit
return timeunit
public void settimeunit timeunit timeunit
this timeunit   timeunit
public boolean isusefixeddelay
return usefixeddelay
public void setusefixeddelay boolean usefixeddelay
this usefixeddelay   usefixeddelay
// implementation methods
// -------------------------------------------------------------------------
/**
* the polling method which is invoked periodically to poll this consumer
*
* @throws exception can be thrown if an exception occured during polling
*/
protected abstract void poll   throws exception
@override
protected void dostart   throws exception
super dostart
if  isusefixeddelay
future   executor schedulewithfixeddelay this  getinitialdelay    getdelay    gettimeunit
else
future   executor scheduleatfixedrate this  getinitialdelay    getdelay    gettimeunit
@override
protected void dostop   throws exception
if  future    null
future cancel false
super dostop