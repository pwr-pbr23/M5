/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util collection
import java util list
import java util concurrent callable
import org apache camel model routetype
import org apache camel spi exchangeconverter
import org apache camel spi injector
import org apache camel spi interceptstrategy
import org apache camel spi language
import org apache camel spi lifecyclestrategy
import org apache camel spi registry
/**
* interface used to represent the context used to configure routes and the
* policies to use during message exchanges between endpoints.
*
* @version $revision$
*/
public interface camelcontext extends service
/**
* gets the name of the this context.
*/
string getname
// component management methods
//-----------------------------------------------------------------------
/**
* adds a component to the context.
*/
void addcomponent string componentname  component component
/**
* gets a component from the context by name.
*/
component getcomponent string componentname
/**
* gets a component from the context by name and specifying the expected type of component.
*/
<t extends component> t getcomponent string name  class<t> componenttype
/**
* removes a previously added component.
*
* @param componentname
* @return the previously added component or null if it had not been previously added.
*/
component removecomponent string componentname
/**
* gets the a previously added component by name or lazily creates the component
* using the factory callback.
*
* @param componentname the name of the component
* @param factory       used to create a new component instance if the component was not previously added.
* @return the component
*/
component getorcreatecomponent string componentname  callable<component> factory
// endpoint management methods
//-----------------------------------------------------------------------
/**
* resolves the given uri to an {@link endpoint}.  if the uri has a singleton endpoint
* registered, then the singleton is returned.  otherwise, a new {@link endpoint} is created
* and if the endpoint is a singleton it is registered as a singleton endpoint.
*/
endpoint getendpoint string uri
/**
* resolves the given uri to an {@link endpoint} of the specified type.
* if the uri has a singleton endpoint registered, then the singleton is returned.
* otherwise, a new {@link endpoint} is created and if the endpoint is a
* singleton it is registered as a singleton endpoint.
*/
<t extends endpoint> t getendpoint string name  class<t> endpointtype
/**
* returns the collection of all registered singleton endpoints.
*/
collection<endpoint> getsingletonendpoints
/**
* adds the endpoint to the context using the given uri.  the endpoint will be registered as a singleton.
*
* @param uri the uri to be used to resolve this endpoint
* @param endpoint the endpoint to be added to the context
* @return the old endpoint that was previously registered to the context if there was
* already an endpoint for that uri
* @throws exception if the new endpoint could not be started or the old endpoint could not be stopped
*/
endpoint addsingletonendpoint string uri  endpoint endpoint  throws exception
/**
* removes the singleton endpoint with the given uri
*
* @param uri the uri to be used to remove
* @return the endpoint that was removed or null if there is no endpoint for this uri
* @throws exception if endpoint could not be stopped
*/
endpoint removesingletonendpoint string uri  throws exception
// route management methods
//-----------------------------------------------------------------------
/**
* returns a list of the current route definitions
*/
list<routetype> getroutedefinitions
/**
* returns the current routes in this context
*/
list<route> getroutes
/**
* sets the routes for this context, replacing any current routes
*
* @param routes the new routes to use
*/
void setroutes list<route> routes
/**
* adds a collection of routes to this context
*
* @param routes the routes to add
*/
void addroutes collection<route> routes  throws exception
/**
* adds a collection of routes to this context using the given builder
* to build them
*
* @param builder the builder which will create the routes and add them to this context
* @throws exception if the routes could not be created for whatever reason
*/
void addroutes routes builder  throws exception
/**
* adds a collection of route definitions to the context
*/
void addroutedefinitions collection<routetype> routedefinitions  throws exception
// properties
//-----------------------------------------------------------------------
/**
* returns the converter of exchanges from one type to another
*/
exchangeconverter getexchangeconverter
/**
* returns the type converter used to coerce types from one type to another
*/
typeconverter gettypeconverter
/**
* returns the registry used to lookup components by name and type such as the spring applicationcontext,
* jndi or the osgi service registry
*/
registry getregistry
/**
* returns the injector used to instantiate objects by type
*/
injector getinjector
/**
* returns the lifecycle strategy used to handle lifecycle notification
*/
lifecyclestrategy getlifecyclestrategy
/**
* resolves a language for creating expressions
*/
language resolvelanguage string language
/**
* creates a new producertemplate
*/
<e extends exchange> producertemplate<e> createproducertemplate
void addinterceptstrategy interceptstrategy interceptstrategy