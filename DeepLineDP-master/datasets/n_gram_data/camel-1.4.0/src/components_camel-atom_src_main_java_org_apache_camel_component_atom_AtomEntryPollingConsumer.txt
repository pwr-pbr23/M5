/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component atom
import java io ioexception
import java util date
import java util list
import org apache abdera model document
import org apache abdera model entry
import org apache abdera model feed
import org apache abdera parser parseexception
import org apache camel exchange
import org apache camel processor
/**
* consumer to poll atom feeds and return each entry from the feed step by step.
*
* @version $revision$
*/
public class atomentrypollingconsumer extends atompollingconsumer
private document<feed> document
private int entryindex
private entryfilter entryfilter
private list<entry> list
public atomentrypollingconsumer atomendpoint endpoint  processor processor  boolean filter
date lastupdate
super endpoint  processor
if  filter
entryfilter   new updateddatefilter lastupdate
public void poll   throws exception
getdocument
feed feed   document getroot
while  hasnextentry
entry entry   list get entryindex
boolean valid   true
if  entryfilter    null
valid   entryfilter isvalidentry endpoint  document  entry
if  valid
exchange exchange   endpoint createexchange feed  entry
getprocessor   process exchange
// return and wait for the next poll to continue from last time (this consumer is stateful)
return
// reset document to be able to poll again
document   null
private document<feed> getdocument   throws ioexception  parseexception
if  document    null
document   atomutils parsedocument endpoint getatomuri
list   document getroot   getentries
entryindex   list size     1
return document
private boolean hasnextentry
return entryindex >  0