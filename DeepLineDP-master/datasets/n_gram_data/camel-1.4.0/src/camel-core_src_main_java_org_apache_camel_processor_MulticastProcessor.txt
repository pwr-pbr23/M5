/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util arraylist
import java util collection
import java util list
import java util concurrent arrayblockingqueue
import java util concurrent countdownlatch
import java util concurrent rejectedexecutionexception
import java util concurrent rejectedexecutionhandler
import java util concurrent threadpoolexecutor
import java util concurrent timeunit
import java util concurrent atomic atomicboolean
import org apache camel asynccallback
import org apache camel endpoint
import org apache camel exchange
import org apache camel processor
import org apache camel impl servicesupport
import org apache camel processor aggregate aggregationstrategy
import org apache camel util exchangehelper
import org apache camel util servicehelper
import static org apache camel util objecthelper notnull
/**
* implements the multicast pattern to send a message exchange to a number of
* endpoints, each endpoint receiving a copy of the message exchange.
*
* @see pipeline
* @version $revision$
*/
public class multicastprocessor extends servicesupport implements processor
static class processorexchangepair
private final processor processor
private final exchange exchange
public processorexchangepair processor processor  exchange exchange
this processor   processor
this exchange   exchange
public processor getprocessor
return processor
public exchange getexchange
return exchange
private collection<processor> processors
private aggregationstrategy aggregationstrategy
private boolean isparallelprocessing
private threadpoolexecutor executor
private final atomicboolean shutdown   new atomicboolean true
public multicastprocessor collection<processor> processors
this processors  null
public multicastprocessor collection<processor> processors  aggregationstrategy aggregationstrategy
this processors  aggregationstrategy  false  null
public multicastprocessor collection<processor> processors  aggregationstrategy aggregationstrategy  boolean parallelprocessing  threadpoolexecutor executor
notnull processors
this processors   processors
this aggregationstrategy   aggregationstrategy
this isparallelprocessing   parallelprocessing
if  isparallelprocessing
if  executor    null
this executor   executor
else      setup default executor
this executor   new threadpoolexecutor processors size    processors size    0  timeunit milliseconds  new arrayblockingqueue<runnable> processors size
/**
* a helper method to convert a list of endpoints into a list of processors
*/
public static <e extends exchange> collection<processor> toproducers collection<endpoint> endpoints
throws exception
collection<processor> answer   new arraylist<processor>
for  endpoint endpoint   endpoints
answer add endpoint createproducer
return answer
@override
public string tostring
return     getprocessors
class processcall implements runnable
private final exchange exchange
private final asynccallback callback
private final processor processor
public processcall exchange exchange  processor processor  asynccallback callback
this exchange   exchange
this callback   callback
this processor   processor
public void run
if  shutdown get
exchange setexception new rejectedexecutionexception
callback done false
else
try
processor process exchange
catch  exception ex
exchange setexception ex
callback done false
public void process exchange exchange  throws exception
exchange result   null
list<processorexchangepair> pairs   createprocessorexchangepairs exchange
// parallel processing the producer
if  isparallelprocessing
exchange exchanges   new exchange
final countdownlatch completedexchanges   new countdownlatch pairs size
int i   0
for  processorexchangepair pair   pairs
processor producer   pair getprocessor
exchanges   pair getexchange
updatenewexchange exchanges  i  pairs
processcall call   new processcall exchanges  producer  new asynccallback
public void done boolean donesynchronously
completedexchanges countdown
executor execute call
i
completedexchanges await
if  aggregationstrategy    null
for  exchange resultexchange   exchanges
if  result    null
result   resultexchange
else
result   aggregationstrategy aggregate result  resultexchange
else
// we call the producer one by one sequentially
int i   0
for  processorexchangepair pair   pairs
processor producer   pair getprocessor
exchange subexchange   pair getexchange
updatenewexchange subexchange  i  pairs
producer process subexchange
if  aggregationstrategy    null
if  result    null
result   subexchange
else
result   aggregationstrategy aggregate result  subexchange
i
if  result    null
exchangehelper copyresults exchange  result
protected void updatenewexchange exchange exchange  int i  list<processorexchangepair> allpairs
// no updates needed
protected list<processorexchangepair> createprocessorexchangepairs
exchange exchange
list<processorexchangepair> result   new arraylist<processorexchangepair> processors size
processor processorsarray   processors toarray new processor
for  int i   0  i < processorsarray length  i
result add new processorexchangepair processorsarray  exchange copy
return result
protected void dostop   throws exception
shutdown set true
if  executor    null
executor shutdown
executor awaittermination 0  timeunit seconds
servicehelper stopservices processors
protected void dostart   throws exception
shutdown set false
if  executor    null
executor setrejectedexecutionhandler new rejectedexecutionhandler
public void rejectedexecution runnable runnable  threadpoolexecutor executor
processcall call    processcall runnable
call exchange setexception new rejectedexecutionexception
call callback done false
servicehelper startservices processors
/**
* returns the producers to multicast to
*/
public collection<processor> getprocessors
return processors
public aggregationstrategy getaggregationstrategy
return aggregationstrategy