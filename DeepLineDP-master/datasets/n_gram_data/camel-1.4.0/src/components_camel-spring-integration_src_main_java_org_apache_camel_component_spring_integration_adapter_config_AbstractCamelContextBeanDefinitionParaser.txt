/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component spring integration adapter config
import org w3c dom attr
import org w3c dom element
import org w3c dom namednodemap
import org w3c dom node
import org w3c dom nodelist
import org apache camel util objecthelper
import org springframework beans factory config beandefinition
import org springframework beans factory config runtimebeanreference
import org springframework beans factory support beandefinitionbuilder
import org springframework beans factory xml abstractsinglebeandefinitionparser
import org springframework beans factory xml parsercontext
import org springframework util stringutils
/**
* this beandefinition paraser help to inject the camel context into the beans
*
* @author willem jiang
*
* @version $revision$
*/
public class abstractcamelcontextbeandefinitionparaser extends abstractsinglebeandefinitionparser
private static final string default_camel_context_name
private string getcontextid string contextid
if  objecthelper isnullorblank contextid
//set the contextid default value here
return default_camel_context_name
else
return contextid
protected void maptoproperty beandefinitionbuilder bean  string propertyname  string val
if  id_attribute equals propertyname
return
if  stringutils hastext val
if  val startswith
bean addpropertyreference propertyname  val substring 1
else
bean addpropertyvalue propertyname  val
protected void wirecamelcontext beandefinitionbuilder bean  string camelcontextid
bean addpropertyreference    camelcontextid
protected void parseattributes element element  parsercontext ctx  beandefinitionbuilder bean
namednodemap atts   element getattributes
for  int i   0  i < atts getlength    i
attr node    attr  atts item i
string val   node getvalue
string name   node getlocalname
if  name equals       name equals
bean addpropertyreference name  val
else
maptoproperty bean  name  val
protected void parsecamelcontext element element  parsercontext ctx  beandefinitionbuilder bean
nodelist children   element getchildnodes
for  int i   0  i < children getlength    i
node n   children item i
if  n getnodetype      node element_node
string name   n getlocalname
if    equals name
// parser the camel context
beandefinition bd   ctx getdelegate   parsecustomelement  element n
// get the inner camel context id
string contextid    string bd getpropertyvalues   getpropertyvalue    getvalue
wirecamelcontext bean  getcontextid contextid
else if    equals name
string contextid   n gettextcontent
wirecamelcontext bean  getcontextid contextid
protected void doparse element element  parsercontext ctx  beandefinitionbuilder bean
parseattributes element  ctx  bean
parsecamelcontext element  ctx  bean