/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util jndi
import java io serializable
import java util hashmap
import java util hashtable
import java util iterator
import java util map
import javax naming binding
import javax naming compositename
import javax naming context
import javax naming linkref
import javax naming name
import javax naming nameclasspair
import javax naming namenotfoundexception
import javax naming nameparser
import javax naming namingenumeration
import javax naming namingexception
import javax naming notcontextexception
import javax naming operationnotsupportedexception
import javax naming reference
import javax naming spi namingmanager
import org apache camel spi injector
import org apache camel util introspectionsupport
import org apache camel util objecthelper
import org apache camel util reflectioninjector
/**
* a default jndi context
*
* @version $revision$ $date$
*/
public class jndicontext implements context  serializable
public static final string separator
protected static final nameparser name_parser   new nameparser
public name parse string name  throws namingexception
return new compositename name
protected static final injector injetor   new reflectioninjector
private static final long serialversionuid    5754338187296859149l
private final hashtable environment     environment for this context
private final map bindings     bindings at my level
private final map treebindings     all bindings under me
private boolean frozen
private string nameinnamespace
public jndicontext   throws exception
this new hashtable
public jndicontext hashtable env  throws exception
this env  createbindingsmapfromenvironment env
public jndicontext hashtable environment  map bindings
if  environment    null
this environment   new hashtable
else
this environment   new hashtable environment
this bindings   bindings
treebindings   new hashmap
public jndicontext hashtable environment  map bindings  string nameinnamespace
this environment  bindings
this nameinnamespace   nameinnamespace
protected jndicontext jndicontext clone  hashtable env
this bindings   clone bindings
this treebindings   clone treebindings
this environment   new hashtable env
protected jndicontext jndicontext clone  hashtable env  string nameinnamespace
this clone  env
this nameinnamespace   nameinnamespace
/**
* a helper method to create the jndi bindings from the input environment
* properties using $foo.class to point to a class name with $foo.* being
* properties set on the injected bean
*/
public static map createbindingsmapfromenvironment hashtable env  throws exception
map answer   new hashmap env
for  object object   env entryset
map entry entry    map entry object
object key   entry getkey
object value   entry getvalue
if  key instanceof string    value instanceof string
string keytext    string key
string valuetext    string value
if  keytext endswith
class<?> type   objecthelper loadclass valuetext
if  type    null
string newentry   keytext substring 0  keytext length       length
object bean   createbean type  answer  newentry
if  bean    null
answer put newentry  bean
return answer
public void freeze
frozen   true
boolean isfrozen
return frozen
/**
* internalbind is intended for use only during setup or possibly by
* suitably synchronized superclasses. it binds every possible lookup into a
* map in each context. to do this, each context strips off one name segment
* and if necessary creates a new context for it. then it asks that context
* to bind the remaining name. it returns a map containing all the bindings
* from the next context, plus the context it just created (if it in fact
* created it). (the names are suitably extended by the segment originally
* lopped off).
*/
protected map internalbind string name  object value  throws namingexception
assert name    null    name length   > 0
assert  frozen
map newbindings   new hashmap
int pos   name indexof
if  pos     1
if  treebindings put name  value     null
throw new namingexception     name
bindings put name  value
newbindings put name  value
else
string segment   name substring 0  pos
assert segment    null
assert  segment equals
object o   treebindings get segment
if  o    null
o   newcontext
treebindings put segment  o
bindings put segment  o
newbindings put segment  o
else if    o instanceof jndicontext
throw new namingexception
jndicontext defaultcontext    jndicontext o
string remainder   name substring pos   1
map subbindings   defaultcontext internalbind remainder  value
for  iterator iterator   subbindings entryset   iterator    iterator hasnext
map entry entry    map entry iterator next
string subname   segment        string entry getkey
object bound   entry getvalue
treebindings put subname  bound
newbindings put subname  bound
return newbindings
protected jndicontext newcontext
try
return new jndicontext
catch  exception e
throw new illegalargumentexception e
public object addtoenvironment string propname  object propval  throws namingexception
return environment put propname  propval
public hashtable getenvironment   throws namingexception
return  hashtable environment clone
public object removefromenvironment string propname  throws namingexception
return environment remove propname
public object lookup string name  throws namingexception
if  name length      0
return this
object result   treebindings get name
if  result    null
result   bindings get name
if  result    null
int pos   name indexof
if  pos > 0
string scheme   name substring 0  pos
context ctx   namingmanager geturlcontext scheme  environment
if  ctx    null
throw new namingexception     scheme
return ctx lookup name
else
// split out the first name of the path
// and look for it in the bindings map.
compositename path   new compositename name
if  path size      0
return this
else
string first   path get 0
object value   bindings get first
if  value    null
throw new namenotfoundexception name
else if  value instanceof context    path size   > 1
context subcontext    context value
value   subcontext lookup path getsuffix 1
return value
if  result instanceof linkref
linkref ref    linkref result
result   lookup ref getlinkname
if  result instanceof reference
try
result   namingmanager getobjectinstance result  null  null  this environment
catch  namingexception e
throw e
catch  exception e
throw  namingexception new namingexception     name  initcause e
if  result instanceof jndicontext
string prefix   getnameinnamespace
if  prefix length   > 0
prefix   prefix   separator
result   new jndicontext  jndicontext result  environment  prefix   name
return result
public object lookup name name  throws namingexception
return lookup name tostring
public object lookuplink string name  throws namingexception
return lookup name
public name composename name name  name prefix  throws namingexception
name result    name prefix clone
result addall name
return result
public string composename string name  string prefix  throws namingexception
compositename result   new compositename prefix
result addall new compositename name
return result tostring
public namingenumeration list string name  throws namingexception
object o   lookup name
if  o    this
return new listenumeration
else if  o instanceof context
return   context o  list
else
throw new notcontextexception
public namingenumeration listbindings string name  throws namingexception
object o   lookup name
if  o    this
return new listbindingenumeration
else if  o instanceof context
return   context o  listbindings
else
throw new notcontextexception
public object lookuplink name name  throws namingexception
return lookuplink name tostring
public namingenumeration list name name  throws namingexception
return list name tostring
public namingenumeration listbindings name name  throws namingexception
return listbindings name tostring
public void bind name name  object value  throws namingexception
bind name tostring    value
public void bind string name  object value  throws namingexception
if  isfrozen
throw new operationnotsupportedexception
else
internalbind name  value
public void close   throws namingexception
// ignore
public context createsubcontext name name  throws namingexception
throw new operationnotsupportedexception
public context createsubcontext string name  throws namingexception
throw new operationnotsupportedexception
public void destroysubcontext name name  throws namingexception
throw new operationnotsupportedexception
public void destroysubcontext string name  throws namingexception
throw new operationnotsupportedexception
public string getnameinnamespace   throws namingexception
return nameinnamespace
public nameparser getnameparser name name  throws namingexception
return name_parser
public nameparser getnameparser string name  throws namingexception
return name_parser
public void rebind name name  object value  throws namingexception
bind name  value
public void rebind string name  object value  throws namingexception
bind name  value
public void rename name oldname  name newname  throws namingexception
throw new operationnotsupportedexception
public void rename string oldname  string newname  throws namingexception
throw new operationnotsupportedexception
public void unbind name name  throws namingexception
throw new operationnotsupportedexception
public void unbind string name  throws namingexception
bindings remove name
treebindings remove name
private abstract class localnamingenumeration implements namingenumeration
private iterator i   bindings entryset   iterator
public boolean hasmore   throws namingexception
return i hasnext
public boolean hasmoreelements
return i hasnext
protected map entry getnext
return  map entry i next
public void close   throws namingexception
private class listenumeration extends localnamingenumeration
listenumeration
public object next   throws namingexception
return nextelement
public object nextelement
map entry entry   getnext
return new nameclasspair  string entry getkey    entry getvalue   getclass   getname
private class listbindingenumeration extends localnamingenumeration
listbindingenumeration
public object next   throws namingexception
return nextelement
public object nextelement
map entry entry   getnext
return new binding  string entry getkey    entry getvalue
protected static object createbean class<?> type  map properties  string prefix  throws exception
object value   injetor newinstance type
introspectionsupport setproperties value  properties  prefix
return value