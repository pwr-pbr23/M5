/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel example jmstofile
import javax jms connectionfactory
import org apache activemq activemqconnectionfactory
import org apache camel camelcontext
import org apache camel exchange
import org apache camel processor
import org apache camel producertemplate
import org apache camel builder routebuilder
import org apache camel component jms jmscomponent
import org apache camel impl defaultcamelcontext
/**
* an example class for demonstrating some of the basics behind camel. this
* example sends some text messages on to a jms queue, consumes them and
* persists them to disk
*
* @version $revision$
*/
public final class cameljmstofileexample
private cameljmstofileexample
public static void main string args  throws exception
// start snippet: e1
camelcontext context   new defaultcamelcontext
// end snippet: e1
// set up the activemq jms components
// start snippet: e2
connectionfactory connectionfactory   new activemqconnectionfactory
// note we can explicity name the component
context addcomponent    jmscomponent jmscomponentautoacknowledge connectionfactory
// end snippet: e2
// add some configuration by hand ...
// start snippet: e3
context addroutes new routebuilder
public void configure
from    to
// set up a listener on the file component
from    process new processor
public void process exchange e
system out println     e getin
// end snippet: e3
// camel template - a handy class for kicking off exchanges
// start snippet: e4
producertemplate template   context createproducertemplate
// end snippet: e4
// now everything is set up - lets start the context
context start
// now send some test text to a component - for this case a jms queue
// the text get converted to jms messages - and sent to the queue
// test.queue
// the file component is listening for messages from the queue
// test.queue, consumes
// them and stores them to disk. the content of each file will be the
// test we sent here.
// the listener on the file component gets notified when new files are
// found ... that's it!
// start snippet: e5
for  int i   0  i < 10  i
template sendbody        i
// end snippet: e5
thread sleep 1000
context stop