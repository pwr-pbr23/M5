/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util concurrent countdownlatch
import java util concurrent timeunit
import org apache camel alreadystoppedexception
import org apache camel exchange
import org apache camel processor
import org apache commons logging log
import org apache commons logging logfactory
/**
* a useful base class for any processor which provides some kind of throttling
* or delayed processing
*
* @version $revision$
*/
public abstract class delayprocessorsupport extends delegateprocessor
private static final transient log log   logfactory getlog delayer class
private countdownlatch stoppedlatch   new countdownlatch 1
private boolean faststop   true
public delayprocessorsupport processor processor
super processor
public void process exchange exchange  throws exception
delay exchange
super process exchange
public boolean isfaststop
return faststop
/**
* enables & disables a fast stop; basically to avoid waiting a possibly
* long time for delays to complete before the context shuts down; instead
* the current processing method throws
* {@link org.apache.camel.alreadystoppedexception} to terminate processing.
*/
public void setfaststop boolean faststop
this faststop   faststop
protected void dostop   throws exception
stoppedlatch countdown
super dostop
protected abstract void delay exchange exchange  throws exception
/**
* wait until the given system time before continuing
*
* @param time the system time to wait for
* @param exchange the exchange being processed
*/
protected void waituntil long time  exchange exchange  throws exception
while  true
long delay   time   currentsystemtime
if  delay < 0
return
else
if  isfaststop       isrunallowed
throw new alreadystoppedexception
try
sleep delay
catch  interruptedexception e
handlesleepinteruptedexception e
protected void sleep long delay  throws interruptedexception
if  delay <  0
return
if  log isdebugenabled
log debug     delay
if  isfaststop
stoppedlatch await delay  timeunit milliseconds
else
thread sleep delay
/**
* called when a sleep is interupted; allows derived classes to handle this
* case differently
*/
protected void handlesleepinteruptedexception interruptedexception e
log debug     e  e
protected long currentsystemtime
return system currenttimemillis