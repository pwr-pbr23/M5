/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import org apache camel exchange
import org apache camel expression
import org apache camel predicate
/**
* a builder of expressions or predicates based on values.
*
* @version $revision$
*/
public class valuebuilder<e extends exchange> implements expression<e>
private expression<e> expression
public valuebuilder expression<e> expression
this expression   expression
public object evaluate e exchange
return expression evaluate exchange
public expression<e> getexpression
return expression
@override
public string tostring
return expression tostring
// predicate builders
// -------------------------------------------------------------------------
public predicate<e> isnotequalto object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder isnotequalto expression  right
public predicate<e> isequalto object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder isequalto expression  right
public predicate<e> islessthan object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder islessthan expression  right
public predicate<e> islessthanorequalto object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder islessthanorequalto expression  right
public predicate<e> isgreaterthan object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder isgreaterthan expression  right
public predicate<e> isgreaterthanorequalto object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder isgreaterthanorequalto expression  right
public predicate<e> isinstanceof class type
return onnewpredicate predicatebuilder isinstanceof expression  type
public predicate<e> matchesregex string regex
return onnewpredicate predicatebuilder regex expression  regex
public predicate<e> isnull
return onnewpredicate predicatebuilder isnull expression
public predicate<e> isnotnull
return onnewpredicate predicatebuilder isnotnull expression
/**
* create a predicate that the left hand expression contains the value of
* the right hand expression
*
* @param value the element which is compared to be contained within this
*                expression
* @return a predicate which evaluates to true if the given value expression
*         is contained within this expression value
*/
public predicate<e> contains object value
expression<e> right   asexpression value
return onnewpredicate predicatebuilder contains expression  right
/**
* creates a predicate which is true if this expression matches the given
* regular expression
*
* @param regex the regular expression to match
* @return a predicate which evaluates to true if the expression matches the
*         regex
*/
public predicate<e> regex string regex
return onnewpredicate predicatebuilder regex expression  regex
// expression builders
// -------------------------------------------------------------------------
public valuebuilder<e> tokenize
return tokenize
public valuebuilder<e> tokenize string token
expression<e> newexp   expressionbuilder tokenizeexpression expression  token
return new valuebuilder<e> newexp
/**
* tokenizes the string conversion of this expression using the given
* regular expression
*/
public valuebuilder<e> regextokenize string regex
expression<e> newexp   expressionbuilder regextokenize expression  regex
return new valuebuilder<e> newexp
/**
* replaces all occurrencies of the regular expression with the given
* replacement
*/
public valuebuilder<e> regexreplaceall string regex  string replacement
expression<e> newexp   expressionbuilder regexreplaceall expression  regex  replacement
return new valuebuilder<e> newexp
/**
* replaces all occurrencies of the regular expression with the given
* replacement
*/
public valuebuilder<e> regexreplaceall string regex  expression<e> replacement
expression<e> newexp   expressionbuilder regexreplaceall expression  regex  replacement
return new valuebuilder<e> newexp
/**
* converts the current value to the given type using the registered type
* converters
*
* @param type the type to convert the value to
* @return the current builder
*/
public valuebuilder<e> convertto class type
expression<e> newexp   expressionbuilder convertto expression  type
return new valuebuilder<e> newexp
/**
* converts the current value a string using the registered type converters
*
* @return the current builder
*/
public valuebuilder<e> converttostring
return convertto string class
/**
* appends the string evaluation of this expression with the given value
*
* @param value the value or expression to append
* @return the current builder
*/
public valuebuilder<e> append object value
return new valuebuilder<e> expressionbuilder append expression  asexpression value
// implementation methods
// -------------------------------------------------------------------------
/**
* a stategy method to allow derived classes to deal with the newly created
* predicate in different ways
*/
protected predicate<e> onnewpredicate predicate<e> predicate
return predicate
protected expression<e> asexpression object value
if  value instanceof expression
return  expression<e> value
else
return expressionbuilder constantexpression value