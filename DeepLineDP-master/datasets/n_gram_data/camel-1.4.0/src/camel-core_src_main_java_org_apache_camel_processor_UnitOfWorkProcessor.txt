/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel exchange
import org apache camel impl defaultunitofwork
/**
* handles calling the unitofwork.done() method when processing of an exchange
* is complete.
*/
public final class unitofworkprocessor extends delegateasyncprocessor
public unitofworkprocessor asyncprocessor processor
super processor
public boolean process final exchange exchange  final asynccallback callback
if  exchange getunitofwork      null
// if there is no existing uow, then we should start one and
// terminate it once processing is completed for the exchange.
exchange setunitofwork new defaultunitofwork
return processor process exchange  new asynccallback
public void done boolean sync
// order here matters. we need to complete the callbacks
// since they will likely update the exchange with
// some final results.
callback done sync
exchange getunitofwork   done exchange
exchange setunitofwork null
else
// there was an existing uow, so we should just pass through..
// so that the guy the initiated the uow can terminate it.
return processor process exchange  callback