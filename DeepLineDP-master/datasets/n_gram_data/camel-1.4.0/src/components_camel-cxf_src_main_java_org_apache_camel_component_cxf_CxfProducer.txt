/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf
import java util arraylist
import java util hashmap
import java util list
import java util map
import javax xml namespace qname
import org apache camel camelexception
import org apache camel exchange
import org apache camel runtimecamelexception
import org apache camel component cxf feature messagedataformatfeature
import org apache camel component cxf feature payloaddataformatfeature
import org apache camel component cxf invoker cxfclient
import org apache camel component cxf invoker cxfclientfactorybean
import org apache camel component cxf invoker invokingcontext
import org apache camel component cxf invoker invokingcontextfactory
import org apache camel component cxf spring cxfendpointbean
import org apache camel component cxf util cxfendpointutils
import org apache camel impl defaultproducer
import org apache camel util objecthelper
import org apache cxf bus
import org apache cxf busfactory
import org apache cxf bus spring springbusfactory
import org apache cxf common classloader classloaderutils
import org apache cxf endpoint client
import org apache cxf endpoint endpoint
import org apache cxf feature abstractfeature
import org apache cxf frontend clientfactorybean
import org apache cxf message exchangeimpl
import org apache cxf message message
import org apache cxf message messageimpl
import org apache cxf service model bindingoperationinfo
/**
* sends messages from camel into the cxf endpoint
*
* @version $revision$
*/
public class cxfproducer extends defaultproducer<cxfexchange>
private cxfendpoint endpoint
private client client
private dataformat dataformat
public cxfproducer cxfendpoint endpoint  throws camelexception
super endpoint
this endpoint   endpoint
dataformat   cxfendpointutils getdataformat endpoint
if  dataformat equals dataformat pojo
client   createclientfromclientfactorybean null
else
// create cxfclient for message or payload type
client   createclientforstreammessage
private client createclientforstreammessage   throws camelexception
cxfclientfactorybean cfb   new cxfclientfactorybean
class serviceclass   null
if  endpoint isspringcontextendpoint
cxfendpointbean cxfendpointbean   endpoint getcxfendpointbean
serviceclass   cxfendpointbean getserviceclass
else
if  endpoint getserviceclass      null
throw new camelexception
try
serviceclass   classloaderutils loadclass endpoint getserviceclass    this getclass
catch  classnotfoundexception e
throw new camelexception e
boolean jsr181enabled   cxfendpointutils haswebserviceannotation serviceclass
cfb setjsr181enabled jsr181enabled
dataformat   cxfendpointutils getdataformat endpoint
list<abstractfeature> features   new arraylist<abstractfeature>
if  dataformat equals dataformat message
features add new messagedataformatfeature
// features.add(new loggingfeature());
else if  dataformat equals dataformat payload
features add new payloaddataformatfeature
// features.add(new loggingfeature());
cfb setfeatures features
return createclientfromclientfactorybean cfb
// if cfb is null, we will try to find the right cfb to use.
private client createclientfromclientfactorybean clientfactorybean cfb  throws camelexception
bus bus   null
if  endpoint getapplicationcontext      null
springbusfactory bf   new springbusfactory endpoint getapplicationcontext
bus   bf createbus
if  cxfendpointutils getsetdefaultbus endpoint
busfactory setdefaultbus bus
else
// now we just use the default bus here
bus   busfactory getdefaultbus
if  endpoint isspringcontextendpoint
cxfendpointbean cxfendpointbean   endpoint getcxfendpointbean
if  cfb    null
cfb   cxfendpointutils getclientfactorybean cxfendpointbean getserviceclass
endpoint configure cfb
else      set up the clientfactorybean by using uri information
if  null    endpoint getserviceclass
try
// we need to choose the right front end to create the
// clientfactorybean
class serviceclass   classloaderutils loadclass endpoint getserviceclass    this
getclass
if  cfb    null
cfb   cxfendpointutils getclientfactorybean serviceclass
cfb setaddress endpoint getaddress
if  null    endpoint getserviceclass
cfb setserviceclass objecthelper loadclass endpoint getserviceclass
if  null    endpoint getwsdlurl
cfb setwsdlurl endpoint getwsdlurl
catch  classnotfoundexception e
throw new camelexception e
else      we can't see any service class from the endpoint
if  cfb    null
cfb   new clientfactorybean
if  null    endpoint getwsdlurl
cfb setwsdlurl endpoint getwsdlurl
else
// throw an exception indicating insufficient endpoint info
throw new camelexception
if  endpoint getservicename      null
cfb setservicename cxfendpointutils getservicename endpoint
if  endpoint getportname      null
cfb setendpointname cxfendpointutils getportname endpoint
if  endpoint getwsdlurl      null
cfb setwsdlurl endpoint getwsdlurl
cfb setbus bus
return cfb create
public void process exchange exchange
cxfexchange cxfexchange   endpoint createexchange exchange
process cxfexchange
exchange copyfrom cxfexchange
public void process cxfexchange exchange
message inmessage   cxfbinding createcxfmessage exchange
exchange setproperty cxfexchange data_format  dataformat
try
if  dataformat equals dataformat pojo
// inputstream is = m.getcontent(inputstream.class);
// now we just deal with the pojo invocations
list parameters   inmessage getcontent list class
if  parameters    null
parameters   new arraylist
string operationname    string inmessage get cxfconstants operation_name
string operationnamespace    string inmessage get cxfconstants operation_namespace
// get context from message
map<string  object> context   new hashmap<string  object>
map<string  object> responsecontext   cxfbinding propogatecontext inmessage  context
message response   new messageimpl
if  operationname    null
// we need to check out the operation namespace
try
object result   null
// call for the client with the parameters
result   invokeclient operationnamespace  operationname  parameters  context
response setcontent object class  result
// copy the response context to the response
cxfbinding storecxfresponsecontext response  responsecontext
cxfbinding storecxfresponse exchange  response
catch  exception ex
response setcontent exception class  ex
cxfbinding storecxffault exchange  response
else
throw new runtimecamelexception
else
// get the invocation context
org apache cxf message exchange ex   exchange getexchange
if  ex    null
ex    org apache cxf message exchange exchange getproperty cxfconstants cxf_exchange
exchange setexchange ex
if  ex    null
ex   new exchangeimpl
exchange setexchange ex
assert ex    null
invokingcontext invokingcontext   ex get invokingcontext class
if  invokingcontext    null
invokingcontext   invokingcontextfactory createcontext dataformat
ex put invokingcontext class  invokingcontext
map<class  object> params   invokingcontext getrequestcontent inmessage
// invoke the stream message with the exchange context
cxfclient cxfclient    cxfclient client
// need to get the binding object to create the message
bindingoperationinfo boi   ex get bindingoperationinfo class
message response   null
if  boi    null
// it should be the raw message
response   new messageimpl
else
// create the message here
endpoint ep   ex get endpoint class
response   ep getbinding   createmessage
response setexchange ex
// invoke the message prepare the context
map<string  object> context   new hashmap<string  object>
map<string  object> responsecontext   cxfbinding propogatecontext inmessage  context
try
object result   cxfclient dispatch params  context  ex
ex setoutmessage response
invokingcontext setresponsecontent response  result
// copy the response context to the response
cxfbinding storecxfresponsecontext response  responsecontext
cxfbinding storecxfresponse exchange  response
catch  exception e
response setcontent exception class  e
cxfbinding storecxffault exchange  response
catch  exception e
// todo add the fault message handling work
throw new runtimecamelexception e
@override
protected void dostart   throws exception
super dostart
@override
protected void dostop   throws exception
super dostop
private object invokeclient string operationnamespace  string operationname  list parameters  map<string  object> context  throws exception
qname operationqname   null
if  operationnamespace    null
operationqname   new qname client getendpoint   getservice   getname   getnamespaceuri    operationname
else
operationqname   new qname operationnamespace  operationname
bindingoperationinfo op   client getendpoint   getendpointinfo   getbinding   getoperation operationqname
if  op    null
throw new runtimecamelexception     operationqname
if   endpoint iswrapped
if  op isunwrappedcapable
op   op getunwrappedoperation
object result   client invoke op  parameters toarray    context
return result