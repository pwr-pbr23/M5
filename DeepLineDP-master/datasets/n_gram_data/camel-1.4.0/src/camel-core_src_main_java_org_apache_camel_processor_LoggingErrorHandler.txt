/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel exchange
import org apache camel processor
import org apache camel util servicehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* an {@link errorhandler} which uses commons-logging to dump the error
*
* @version $revision$
*/
public class loggingerrorhandler extends errorhandlersupport
private processor output
private log log
private logginglevel level
public loggingerrorhandler processor output
this output  logfactory getlog loggingerrorhandler class   logginglevel info
public loggingerrorhandler processor output  log log  logginglevel level
this output   output
this log   log
this level   level
@override
public string tostring
return     output
public void process exchange exchange  throws exception
try
output process exchange
catch  throwable e
if   customprocessorforexception exchange  e
logerror exchange  e
// properties
// -------------------------------------------------------------------------
/**
* returns the output processor
*/
public processor getoutput
return output
public logginglevel getlevel
return level
public void setlevel logginglevel level
this level   level
public log getlog
return log
public void setlog log log
this log   log
// implementation methods
// -------------------------------------------------------------------------
protected void logerror exchange exchange  throwable e
switch  level
case debug
if  log isdebugenabled
log debug logmessage exchange  e   e
break
case error
if  log iserrorenabled
log error logmessage exchange  e   e
break
case fatal
if  log isfatalenabled
log fatal logmessage exchange  e   e
break
case info
if  log isinfoenabled
log debug logmessage exchange  e   e
break
case trace
if  log istraceenabled
log trace logmessage exchange  e   e
break
case warn
if  log iswarnenabled
log warn logmessage exchange  e   e
break
default
log error     level       logmessage exchange  e
e
protected object logmessage exchange exchange  throwable e
return e       exchange
protected void dostart   throws exception
servicehelper startservices output
protected void dostop   throws exception
servicehelper stopservices output