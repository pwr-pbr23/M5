/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor aggregate
import java util arraylist
import java util iterator
import java util list
import org apache camel exchange
import org apache camel expression
import org apache camel predicate
/**
* an aggregator collection which uses a predicate to decide when an aggregation is completed for
* a particular correlation key
*
* @version $revision$
*/
public class predicateaggregationcollection extends aggregationcollection
private predicate aggregationcompletedpredicate
private list<exchange> collection   new arraylist<exchange>
public predicateaggregationcollection expression<exchange> correlationexpression  aggregationstrategy aggregationstrategy  predicate aggregationcompletedpredicate
super correlationexpression  aggregationstrategy
this aggregationcompletedpredicate   aggregationcompletedpredicate
@override
protected void onaggregation object correlationkey  exchange newexchange
if  aggregationcompletedpredicate matches newexchange
// this exchange has now aggregated so lets add it to the collection of things
// to send
super getmap   remove correlationkey
collection add newexchange
@override
public iterator<exchange> iterator
return collection iterator
@override
public int size
return collection size
@override
public void clear
collection clear
super clear