/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util list
import org apache camel exchange
import org apache camel processor
import org apache camel runtimecamelexception
import org apache camel impl servicesupport
import org apache camel util exchangehelper
import org apache camel util servicehelper
import org apache commons logging log
import org apache commons logging logfactory
/**
* implements try/catch/finally type processing
*
* @version $revision$
*/
public class tryprocessor extends servicesupport implements processor
private static final transient log log   logfactory getlog tryprocessor class
private final processor tryprocessor
private final list<catchprocessor> catchclauses
private final processor finallyprocessor
public tryprocessor processor tryprocessor  list<catchprocessor> catchclauses  processor finallyprocessor
this tryprocessor   tryprocessor
this catchclauses   catchclauses
this finallyprocessor   finallyprocessor
public string tostring
string finallytext    finallyprocessor    null  ?         finallyprocessor
return     tryprocessor       catchclauses   finallytext
public void process exchange exchange  throws exception
throwable e   null
try
tryprocessor process exchange
e   exchange getexception
// ignore it if it was handled by the dead letter channel.
if  e    null    deadletterchannel isfailurehandled exchange
e   null
catch  throwable ex
e   ex
exchange setexception e
exception unexpected   null
try
if  e    null
log info    e
handleexception exchange  e
catch  exception ex
unexpected   ex
catch  throwable ex
unexpected   new runtimecamelexception ex
finally
try
processfinally exchange
catch  exception ex
unexpected   ex
catch  throwable ex
unexpected   new runtimecamelexception ex
if  unexpected    null
log warn    unexpected
throw unexpected
if  unexpected    null
log warn    unexpected
throw unexpected
protected void dostart   throws exception
servicehelper startservices tryprocessor  catchclauses  finallyprocessor
protected void dostop   throws exception
servicehelper stopservices tryprocessor  catchclauses  finallyprocessor
protected void handleexception exchange exchange  throwable e  throws throwable
for  catchprocessor catchclause   catchclauses
if  catchclause catches e
// lets attach the exception to the exchange
exchange localexchange   exchange copy
localexchange getin   setheader    e
// give the rest of the pipeline another chance
localexchange setexception null
// do not catch any exception here, let it propagate up
catchclause process localexchange
localexchange getin   removeheader
exchangehelper copyresults exchange  localexchange
return
protected void processfinally exchange exchange  throws throwable
if  finallyprocessor    null
throwable lastexception   exchange getexception
exchange setexception null
// do not catch any exception here, let it propagate up
finallyprocessor process exchange
if  exchange getexception      null
exchange setexception lastexception