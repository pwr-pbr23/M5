/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel management
import java util arraylist
import java util collection
import java util hashmap
import java util list
import java util map
import javax management jmexception
import javax management malformedobjectnameexception
import javax management objectname
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel exchange
import org apache camel route
import org apache camel service
import org apache camel impl defaultcamelcontext
import org apache camel impl servicesupport
import org apache camel model exceptiontype
import org apache camel model processortype
import org apache camel model routetype
import org apache camel spi instrumentationagent
import org apache camel spi lifecyclestrategy
import org apache camel spi routecontext
import org apache commons logging log
import org apache commons logging logfactory
/**
* jmx agent that registeres camel lifecycle events in jmx.
*
* @version $revision$
*
*/
public class instrumentationlifecyclestrategy implements lifecyclestrategy
private static final transient log log   logfactory getlog instrumentationprocessor class
private instrumentationagent agent
private camelnamingstrategy namingstrategy
private boolean initialized
// a map (endpoint -> instrumentationprocessor) to facilitate
// adding per-route interceptor and registering managedroute mbean
private map<endpoint  instrumentationprocessor> interceptormap
new hashmap<endpoint  instrumentationprocessor>
public instrumentationlifecyclestrategy
this new defaultinstrumentationagent
public instrumentationlifecyclestrategy instrumentationagent agent
this agent   agent
/**
* constructor for camel context that has been started.
*
* @param agent
* @param context
*/
public instrumentationlifecyclestrategy instrumentationagent agent
camelcontext context
this agent   agent
oncontextstart context
public void oncontextstart camelcontext context
if  context instanceof defaultcamelcontext
try
initialized   true
defaultcamelcontext dc    defaultcamelcontext context
// call addservice so that context will start and stop the agent
dc addservice agent
namingstrategy   new camelnamingstrategy agent getmbeanobjectdomainname
managedservice ms   new managedservice dc
agent register ms  getnamingstrategy   getobjectname dc
catch  exception e
log warn    e
public void onendpointadd endpoint<? extends exchange> endpoint
// the agent hasn't been started
if   initialized
return
try
managedendpoint me   new managedendpoint endpoint
agent register me  getnamingstrategy   getobjectname me
catch  jmexception e
log warn    e
public void onroutesadd collection<route> routes
// the agent hasn't been started
if   initialized
return
for  route route   routes
try
managedroute mr   new managedroute route
// retrieve the per-route intercept for this route
instrumentationprocessor interceptor   interceptormap get route getendpoint
if  interceptor    null
log warn
route getendpoint
else
interceptor setcounter mr
agent register mr  getnamingstrategy   getobjectname mr
catch  jmexception e
log warn    e
public void onserviceadd camelcontext context  service service
// the agent hasn't been started
if   initialized
return
if  service instanceof servicesupport
try
managedservice ms   new managedservice  servicesupport service
agent register ms  getnamingstrategy   getobjectname context  ms
catch  jmexception e
log warn    e
public void onroutecontextcreate routecontext routecontext
// the agent hasn't been started
if   initialized
return
// create a map (processortype -> performancecounter)
// to be passed to instrumentationinterceptstrategy.
map<processortype  performancecounter> countermap
new hashmap<processortype  performancecounter>
// each processor in a route will have its own performance counter
// the performance counter are mbeans that we register with mbeanserver.
// these performance counter will be embedded
// to instrumentationprocessor and wrap the appropriate processor
// by instrumentationinterceptstrategy.
routetype route   routecontext getroute
for  processortype processor   route getoutputs
objectname name   null
try
// get the mbean name
name   getnamingstrategy   getobjectname routecontext  processor
// register mbean wrapped in the performance counter mbean
performancecounter pc   new performancecounter
agent register pc  name
// add to map now that it has ben registered
countermap put processor  pc
catch  malformedobjectnameexception e
log warn     name  e
catch  jmexception e
log warn     name  e
routecontext addinterceptstrategy new instrumentationinterceptstrategy countermap
routecontext seterrorhandlerwrappingstrategy
new instrumentationerrorhandlerwrappingstrategy countermap
// add an instrumentationprocessor at the beginning of each route and
// set up the interceptormap for onroutesadd() method to register the
// managedroute mbeans.
routetype routetype   routecontext getroute
if  routetype getinputs      null     routetype getinputs   isempty
if  routetype getinputs   size   > 1
log warn
endpoint endpoint    routetype getinputs   get 0  getendpoint
list<processortype<?>> exceptionhandlers   new arraylist<processortype<?>>
list<processortype<?>> outputs   new arraylist<processortype<?>>
// separate out the exception handers in the outputs
for  processortype output   routetype getoutputs
if  output instanceof exceptiontype
exceptionhandlers add output
else
outputs add output
// clearing the outputs
routetype clearoutput
// add exception handlers as top children
routetype getoutputs   addall exceptionhandlers
// add an interceptor
instrumentationprocessor processor   new instrumentationprocessor
routetype intercept processor
// add the output
for  processortype<?> processortype   outputs
routetype addoutput processortype
interceptormap put endpoint  processor
public camelnamingstrategy getnamingstrategy
return namingstrategy
public void setnamingstrategy camelnamingstrategy strategy
this namingstrategy   strategy
public void setagent instrumentationagent agent
this agent   agent