/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import java util concurrent arrayblockingqueue
import java util concurrent blockingqueue
import java util concurrent timeunit
import org apache camel consumer
import org apache camel endpoint
import org apache camel exchange
import org apache camel pollingconsumer
import org apache camel processor
import org apache camel processor logger
import org apache camel spi exceptionhandler
import org apache commons logging log
import org apache commons logging logfactory
/**
* a default implementation of the {@link pollingconsumer} which uses the normal
* asynchronous consumer mechanism along with a {@link blockingqueue} to allow
* the caller to pull messages on demand.
*
* @version $revision$
*/
public class eventdrivenpollingconsumer<e extends exchange> extends pollingconsumersupport<e> implements
processor
private static final transient log log   logfactory getlog eventdrivenpollingconsumer class
private blockingqueue<e> queue
private exceptionhandler interuptedexceptionhandler   new loggingexceptionhandler new logger log
private consumer<e> consumer
public eventdrivenpollingconsumer endpoint<e> endpoint
this endpoint  new arrayblockingqueue<e> 1000
public eventdrivenpollingconsumer endpoint<e> endpoint  blockingqueue<e> queue
super endpoint
this queue   queue
public e receivenowait
return receive 0
public e receive
while  isrunallowed
try
return queue take
catch  interruptedexception e
handleinteruptedexception e
return null
public e receive long timeout
try
return queue poll timeout  timeunit milliseconds
catch  interruptedexception e
handleinteruptedexception e
return null
public void process exchange exchange  throws exception
queue offer  e exchange
public exceptionhandler getinteruptedexceptionhandler
return interuptedexceptionhandler
public void setinteruptedexceptionhandler exceptionhandler interuptedexceptionhandler
this interuptedexceptionhandler   interuptedexceptionhandler
protected void handleinteruptedexception interruptedexception e
getinteruptedexceptionhandler   handleexception e
protected void dostart   throws exception
// lets add ourselves as a consumer
consumer   getendpoint   createconsumer this
consumer start
protected void dostop   throws exception
if  consumer    null
try
consumer stop
finally
consumer   null