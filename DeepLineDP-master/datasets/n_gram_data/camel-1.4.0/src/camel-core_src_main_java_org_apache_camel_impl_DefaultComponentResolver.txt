/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel impl
import org apache camel camelcontext
import org apache camel component
import org apache camel exchange
import org apache camel spi componentresolver
import org apache camel util factoryfinder
import org apache camel util nofactoryavailableexception
import org apache commons logging log
import org apache commons logging logfactory
/**
* the default implementation of {@link componentresolver} which tries to find
* components by using the uri scheme prefix and searching for a file of the uri
* scheme name in the <b>meta-inf/services/org/apache/camel/component/</b>
* directory on the classpath.
*
* @version $revision$
*/
public class defaultcomponentresolver<e extends exchange> implements componentresolver<e>
protected static final factoryfinder component_factory
new factoryfinder
private static final transient log log   logfactory getlog defaultcomponentresolver class
public component<e> resolvecomponent string name  camelcontext context
object bean   null
try
bean   context getregistry   lookup name
if  bean    null    log isdebugenabled
log debug     name       bean
catch  exception e
log debug     name       e
if  bean    null
if  bean instanceof component
return  component  bean
// we do not throw the exception here and try to auto create a component
class type
try
type   component_factory findclass name
catch  nofactoryavailableexception e
return null
catch  throwable e
throw new illegalargumentexception
name  e
if  log isdebugenabled
log debug     name       type getname         component_factory getpath     name
if  type    null
return null
if  component class isassignablefrom type
return  component<e>  context getinjector   newinstance type
else
throw new illegalargumentexception
type getname