/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import org apache commons logging log
import org apache commons logging logfactory
/**
* some helper methods for working with java packages and versioning.
*
* @version $revision$
*/
public final class packagehelper
private static final transient log log   logfactory getlog packagehelper class
private packagehelper
// utility class
/**
* returns true if the version number of the given package name can be found and is greater than or equal to the minimum version.
*
* for package names which include multiple dots, the dots are removed. so for example a spring version of 2.5.1 is converted to
* 2.51 so you can assert that its >= 2.51 (so above 2.50 and less than 2.52 etc).
*
* @param packagename the java package name to compare
* @param minimumversion the minimum version number
* @return true if the package name can be determined and if its greater than or equal to the minimum value
*/
public static boolean isvalidversion string packagename  double minimumversion
try
package spring   package getpackage packagename
string value   spring getimplementationversion
if  value    null
// lets remove any extra dots in the string...
int idx   value indexof
if  idx >  0
stringbuffer buffer   new stringbuffer value substring 0    idx
int i   idx
for  int size   value length    i < size  i
char ch   value charat i
if  character isdigit ch
buffer append ch
value   buffer tostring
double number   double parsedouble value
return number >  minimumversion
catch  exception e
log debug     packagename       e  e
return true