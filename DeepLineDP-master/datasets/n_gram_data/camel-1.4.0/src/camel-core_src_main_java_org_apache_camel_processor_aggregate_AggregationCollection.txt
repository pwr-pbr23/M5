/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor aggregate
import java util abstractcollection
import java util collection
import java util iterator
import java util linkedhashmap
import java util map
import org apache camel exchange
import org apache camel expression
import org apache commons logging log
import org apache commons logging logfactory
/**
* a {@link collection} which aggregates exchanges together using a correlation
* expression so that there is only a single message exchange sent for a single
* correlation key.
*
* @version $revision$
*/
public class aggregationcollection extends abstractcollection<exchange>
private static final transient log log   logfactory getlog aggregationcollection class
private final expression<exchange> correlationexpression
private final aggregationstrategy aggregationstrategy
private map<object  exchange> map   new linkedhashmap<object  exchange>
public aggregationcollection expression<exchange> correlationexpression
aggregationstrategy aggregationstrategy
this correlationexpression   correlationexpression
this aggregationstrategy   aggregationstrategy
protected map<object  exchange> getmap
return map
@override
public boolean add exchange exchange
object correlationkey   correlationexpression evaluate exchange
exchange oldexchange   map get correlationkey
exchange newexchange   exchange
if  oldexchange    null
newexchange   aggregationstrategy aggregate oldexchange  newexchange
// the strategy may just update the old exchange and return it
if  newexchange    oldexchange
log debug     newexchange        correlationkey
map put correlationkey  newexchange
onaggregation correlationkey  newexchange
return true
public iterator<exchange> iterator
return map values   iterator
public int size
return map size
@override
public void clear
map clear
/**
* a strategy method allowing derived classes such as {@link predicateaggregationcollection}
* to check to see if the aggregation has completed
*/
protected void onaggregation object correlationkey  exchange newexchange