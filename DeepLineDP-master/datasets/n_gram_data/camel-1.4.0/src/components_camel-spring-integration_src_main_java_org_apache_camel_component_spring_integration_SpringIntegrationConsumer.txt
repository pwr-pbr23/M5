/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component spring integration
import org apache camel exchangepattern
import org apache camel processor
import org apache camel runtimecamelexception
import org apache camel impl scheduledpollconsumer
import org apache camel spring springcamelcontext
import org apache camel util objecthelper
import org springframework integration channel channelregistry
import org springframework integration channel messagechannel
import org springframework integration config messagebusparser
/**
* a consumer of exchanges for the spring integration
* please specify the inputchannel in the endpoint url for this consumer.
* if the message pattern is inout, the outputchannel property
* should be set for the outgoing message.
*
* @version $revision$
*/
public class springintegrationconsumer  extends scheduledpollconsumer<springintegrationexchange>
private springcamelcontext context
private messagechannel inputchannel
private messagechannel outputchannel
private string inputchannelname
private channelregistry channelregistry
private springintegrationendpoint endpoint
public springintegrationconsumer springintegrationendpoint endpoint  processor processor
super endpoint  processor
this endpoint   endpoint
context    springcamelcontext  endpoint getcamelcontext
if  context    null    endpoint getmessagechannel      null
channelregistry    channelregistry  context getapplicationcontext   getbean messagebusparser message_bus_bean_name
inputchannelname   endpoint getdefaultchannel
if  objecthelper isnullorblank inputchannelname
inputchannelname   endpoint getinputchannel
if   objecthelper isnullorblank inputchannelname
inputchannel    messagechannel  channelregistry lookupchannel inputchannelname
objecthelper notnull inputchannel      inputchannelname
else
throw new runtimecamelexception
else
if  endpoint getmessagechannel      null
inputchannel   endpoint getmessagechannel
else
throw new runtimecamelexception
if  endpoint isinout
endpoint setexchangepattern exchangepattern inout
@override
protected void poll   throws exception
org springframework integration message message siinmessage   inputchannel receive this getdelay
springintegrationexchange  exchange   getendpoint   createexchange
exchange setin new springintegrationmessage siinmessage
getprocessor   process exchange
if  endpoint isinout
// get the output channel from message header
object returnaddress   siinmessage getheader   getreturnaddress
messagechannel reply   null
if  returnaddress    null
if  returnaddress instanceof string
reply    messagechannel context getapplicationcontext   getbean  string returnaddress
else if  returnaddress instanceof messagechannel
reply    messagechannel  returnaddress
else
if  outputchannel    null
// using the outputchannel
reply   outputchannel
else
if  objecthelper isnullorblank endpoint getoutputchannel
outputchannel    messagechannel  channelregistry lookupchannel endpoint getoutputchannel
objecthelper notnull inputchannel      endpoint getoutputchannel
reply   outputchannel
else
throw new runtimecamelexception
// put the message back the outputchannel if we need
org springframework integration message message sioutmessage
springintegrationbinding storetospringintegrationmessage exchange getout
reply send sioutmessage
//todo we need to clean the channel when shutdown the endpoint