/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel example client
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel exchange
import org apache camel exchangepattern
import org apache camel producer
import org springframework context applicationcontext
import org springframework context support classpathxmlapplicationcontext
/**
* client that uses the <a href="http://activemq.apache.org/camel/message-endpoint.html">mesage endpoint</a>
* pattern to easily exchange messages with the server.
* <p/>
* notice this very same api can use for all components in camel, so if we were using tcp communication instead
* of jms messaging we could just use <code>camel.getendpoint("mina:tcp://someserver:port")</code>.
* <p/>
* requires that the jms broker is running, as well as camelserver
*/
public final class camelclientendpoint
private camelclientendpoint
//helper class
// start snippet: e1
public static void main final string args  throws exception
system out println
applicationcontext context   new classpathxmlapplicationcontext
camelcontext camel    camelcontext  context getbean
// get the endpoint from the camel context
endpoint endpoint   camel getendpoint
// create the exchange used for the communication
// we use the in out pattern for a synchronized exchange where we expect a response
exchange exchange   endpoint createexchange exchangepattern inout
// set the input on the in body
// must you correct type to match the expected type of an integer object
exchange getin   setbody 11
// to send the exchange we need an producer to do it for us
producer producer   endpoint createproducer
// start the producer so it can operate
producer start
// let the producer process the exchange where it does all the work in this oneline of code
system out println
producer process exchange
// get the response from the out body and cast it to an integer
int response   exchange getout   getbody integer class
system out println     response
// stop and exit the client
producer stop
system exit 0
// end snippet: e1