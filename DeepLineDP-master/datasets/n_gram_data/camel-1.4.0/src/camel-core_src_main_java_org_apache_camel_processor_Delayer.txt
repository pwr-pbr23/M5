/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel exchange
import org apache camel expression
import org apache camel processor
import org apache camel util expressionhelper
/**
* a <a href="http://activemq.apache.org/camel/delayer.html">delayer</a> which
* delays processing the exchange until the correct amount of time has elapsed
* using an expression to determine the delivery time. <p/> for example if you
* wish to delay jms messages by 25 seconds from their publish time you could
* create an instance of this class with the expression
* <code>header("jmstimestamp")</code> and a delay value of 25000l.
*
* @version $revision$
*/
public class delayer extends delayprocessorsupport
private expression<exchange> timeexpression
private long delay
public delayer processor processor  expression<exchange> timeexpression  long delay
super processor
this timeexpression   timeexpression
this delay   delay
@override
public string tostring
return     timeexpression       delay       getprocessor
// properties
// -------------------------------------------------------------------------
public long getdelay
return delay
/**
* sets the delay from the publish time; which is typically the time from
* the expression or the current system time if none is available
*/
public void setdelay long delay
this delay   delay
// implementation methods
// -------------------------------------------------------------------------
/**
* waits for an optional time period before continuing to process the
* exchange
*/
protected void delay exchange exchange  throws exception
long time   0
if  timeexpression    null
long longvalue   expressionhelper evaluateastype timeexpression  exchange  long class
if  longvalue    null
time   longvalue longvalue
if  time <  0
time   defaultprocesstime exchange
time    delay
waituntil time  exchange
/**
* a strategy method to allow derived implementations to decide the current
* system time or some other default exchange property
*
* @param exchange
*/
protected long defaultprocesstime exchange exchange
return currentsystemtime