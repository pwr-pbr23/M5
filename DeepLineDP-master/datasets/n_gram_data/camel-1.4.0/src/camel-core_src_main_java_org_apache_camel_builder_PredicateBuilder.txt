/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder
import java util regex matcher
import java util regex pattern
import org apache camel exchange
import org apache camel expression
import org apache camel predicate
import org apache camel util objecthelper
import static org apache camel util objecthelper compare
import static org apache camel util objecthelper notnull
/**
* a helper class for working with predicates
*
* @version $revision$
*/
public final class predicatebuilder
/**
* utility classes should not have a public constructor.
*/
private predicatebuilder
/**
* converts the given expression into an {@link predicate}
*/
public static <e extends exchange> predicate<e> topredicate final expression<e> expression
return new predicatesupport<e>
public boolean matches e exchange
object value   expression evaluate exchange
return objecthelper evaluatevaluepredicate value
@override
public string tostring
return expression tostring
/**
* a helper method to return the logical not of the given predicate
*/
public static <e extends exchange> predicate<e> not final predicate<e> predicate
notnull predicate
return new predicatesupport<e>
public boolean matches e exchange
return  predicate matches exchange
@override
public string tostring
return     predicate
/**
* a helper method to combine multiple predicates by a logical and
*/
public static <e extends exchange> predicate<e> and final predicate<e> left  final predicate<e> right
notnull left
notnull right
return new predicatesupport<e>
public boolean matches e exchange
return left matches exchange     right matches exchange
@override
public string tostring
return     left       right
/**
* a helper method to combine multiple predicates by a logical or
*/
public static <e extends exchange> predicate<e> or final predicate<e> left  final predicate<e> right
notnull left
notnull right
return new predicatesupport<e>
public boolean matches e exchange
return left matches exchange     right matches exchange
@override
public string tostring
return     left       right
public static <e extends exchange> predicate<e> isequalto final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return objecthelper equal leftvalue  rightvalue
protected string getoperationtext
return
public static <e extends exchange> predicate<e> isnotequalto final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return  objecthelper equal leftvalue  rightvalue
protected string getoperationtext
return
public static <e extends exchange> predicate<e> islessthan final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return compare leftvalue  rightvalue  < 0
protected string getoperationtext
return
public static <e extends exchange> predicate<e> islessthanorequalto final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return compare leftvalue  rightvalue  <  0
protected string getoperationtext
return
public static <e extends exchange> predicate<e> isgreaterthan final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return compare leftvalue  rightvalue  > 0
protected string getoperationtext
return
public static <e extends exchange> predicate<e> isgreaterthanorequalto final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return compare leftvalue  rightvalue  >  0
protected string getoperationtext
return
public static <e extends exchange> predicate<e> contains final expression<e> left
final expression<e> right
return new binarypredicatesupport<e> left  right
protected boolean matches e exchange  object leftvalue  object rightvalue
return objecthelper contains leftvalue  rightvalue
protected string getoperationtext
return
public static <e extends exchange> predicate<e> isnull final expression<e> expression
return isequalto expression  expressionbuilder <e> constantexpression null
public static <e extends exchange> predicate<e> isnotnull final expression<e> expression
return isnotequalto expression  expressionbuilder <e> constantexpression null
public static <e extends exchange> predicate<e> isinstanceof final expression<e> expression
final class type
notnull expression
notnull type
return new predicatesupport<e>
public boolean matches e exchange
object value   expression evaluate exchange
return type isinstance value
@override
public string tostring
return expression       type getname
@override
protected string assertionfailuremessage e exchange
return super assertionfailuremessage exchange        expression evaluate exchange
/**
* returns a predicate which is true if the expression matches the given
* regular expression
*
* @param expression the expression to evaluate
* @param regex the regular expression to match against
* @return a new predicate
*/
public static <e extends exchange> predicate<e> regex final expression<e> expression  final string regex
return regex expression  pattern compile regex
/**
* returns a predicate which is true if the expression matches the given
* regular expression
*
* @param expression the expression to evaluate
* @param pattern the regular expression to match against
* @return a new predicate
*/
public static <e extends exchange> predicate<e> regex final expression<e> expression
final pattern pattern
notnull expression
notnull pattern
return new predicatesupport<e>
public boolean matches e exchange
object value   expression evaluate exchange
if  value    null
matcher matcher   pattern matcher value tostring
return matcher matches
return false
@override
public string tostring
return expression       pattern
@override
protected string assertionfailuremessage e exchange
return super assertionfailuremessage exchange        expression evaluate exchange