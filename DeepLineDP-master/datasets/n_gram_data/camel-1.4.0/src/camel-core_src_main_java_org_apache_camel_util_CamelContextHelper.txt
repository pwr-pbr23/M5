/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java util arraylist
import java util collection
import java util list
import org apache camel camelcontext
import org apache camel endpoint
import org apache camel exchange
import org apache camel expression
import org apache camel nosuchendpointexception
import org apache camel spi injector
import org apache camel spi language
import org apache camel spi registry
import static org apache camel util objecthelper notnull
/**
* a number of helper methods
*
* @version $revision$
*/
public final class camelcontexthelper
/**
* utility classes should not have a public constructor.
*/
private camelcontexthelper
/**
* returns the mandatory endpoint for the given uri or the
* {@link org.apache.camel.nosuchendpointexception} is thrown
*/
public static endpoint getmandatoryendpoint camelcontext camelcontext  string uri
throws nosuchendpointexception
endpoint endpoint   camelcontext getendpoint uri
if  endpoint    null
throw new nosuchendpointexception uri
else
return endpoint
/**
* returns the mandatory endpoint for the given uri and type or the
* {@link org.apache.camel.nosuchendpointexception} is thrown
*/
public static <t extends endpoint> t getmandatoryendpoint camelcontext camelcontext  string uri  class<t> type
endpoint endpoint   getmandatoryendpoint camelcontext  uri
return objecthelper cast type  endpoint
/**
* returns a list of all endpoints of the given type
*
* @param camelcontext
* @param type the type of the endpoints requested
* @return a list which may be empty of all the endpoint instances of the
*         given type
*/
public static <t> list<t> getsingletonendpoints camelcontext camelcontext  class<t> type
list<t> answer   new arraylist<t>
collection<endpoint> endpoints   camelcontext getsingletonendpoints
for  endpoint endpoint   endpoints
if  type isinstance endpoint
t value   type cast endpoint
answer add value
return answer
/**
* converts the given value to the requested type
*/
public static <t> t convertto camelcontext context  class<t> type  object value
notnull context
return context gettypeconverter   convertto type  value
/**
* converts the given value to the specified type throwing an {@link illegalargumentexception}
* if the value could not be converted to a non null value
*/
public static <t> t mandatoryconvertto camelcontext context  class<t> type  object value
t answer   convertto context  type  value
if  answer    null
throw new illegalargumentexception     value       type getname
return answer
/**
* creates a new instance of the given type using the {@link injector} on the given
* {@link camelcontext}
*/
public static <t> t newinstance camelcontext context  class<t> beantype
return context getinjector   newinstance beantype
/**
* look up the given named bean in the {@link registry} on the
* {@link camelcontext}
*/
public static object lookup camelcontext context  string name
return context getregistry   lookup name
/**
* look up the given named bean of the given type in the {@link registry} on the
* {@link camelcontext}
*/
public static <t> t lookup camelcontext context  string name  class<t> beantype
return context getregistry   lookup name  beantype
/**
* look up the given named bean in the {@link registry} on the
* {@link camelcontext} or throws
*/
public static object mandatorylookup camelcontext context  string name
object answer   lookup context  name
notnull answer      name
return answer
/**
* look up the given named bean of the given type in the {@link registry} on the
* {@link camelcontext}
*/
public static <t> t mandatorylookup camelcontext context  string name  class<t> beantype
t answer   lookup context  name  beantype
notnull answer      name       beantype getname
return answer
/**
* resolves the given language name into a {@link language} or throws an exception if it could not be converted
*/
public static language resolvemandatorylanguage camelcontext camelcontext  string languagename
notnull camelcontext
notnull languagename
language language   camelcontext resolvelanguage languagename
if  language    null
throw new illegalargumentexception     languagename
return language
/**
* resolves the mandatory language name and expression text into a {@link expression} instance
* throwing an exception if it could not be created
*/
public static expression resolvemandatoryexpression camelcontext camelcontext  string languagename  string expressiontext
notnull expressiontext
language language   resolvemandatorylanguage camelcontext  languagename
expression<exchange> expression   language createexpression expressiontext
if  expression    null
throw new illegalargumentexception     expressiontext       language
return expression