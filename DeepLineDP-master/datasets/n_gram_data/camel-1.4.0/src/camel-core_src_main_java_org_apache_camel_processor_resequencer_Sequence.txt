/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor resequencer
import java util treeset
/**
* a sorted set of elements with additional methods for obtaining immediate
* successors and immediate predecessors of a given element in the sequence.
* successors and predecessors are calculated by using a
* {@link sequenceelementcomparator}.
*
* @author martin krasser
*
* @version $revision
*/
public class sequence<e> extends treeset<e>
private static final long serialversionuid   5647393631147741711l
private sequenceelementcomparator<e> comparator
/**
* creates a new {@link sequence} instance.
*
* @param comparator a strategy for comparing elements of this sequence.
*/
public sequence sequenceelementcomparator<e> comparator
super comparator
this comparator   comparator
/**
* returns the immediate predecessor of the given element in this sequence
* or <code>null</code> if no predecessor exists.
*
* @param e an element which is compared to elements of this sequence.
* @return an element of this sequence or <code>null</code>.
*/
public e predecessor e e
e elem   lower e
if  elem    null
return null
if  comparator predecessor elem  e
return elem
return null
/**
* returns the immediate successor of the given element in this sequence
* or <code>null</code> if no successor exists.
*
* @param e an element which is compared to elements of this sequence.
* @return an element of this sequence or <code>null</code>.
*/
public e successor e e
e elem   higher e
if  elem    null
return null
if  comparator successor elem  e
return elem
return null
/**
* returns this sequence's comparator.
*
* @return this sequence's comparator.
*/
public sequenceelementcomparator<e> comparator
return comparator
/**
* returns the next higher element in the sequence to the given element. if
* the given element doesn't exist or if it is the last element in the
* sequence <code>null</code> is returned. <strong>please note that this
* method is provided for compatibility with java 5 se. on a java 6 se
* platform the same method implemented by the {@link treeset}
* class should be used for better performance.</strong>
*
* @param e an element which is compared to elements of this sequence.
* @return an element of this sequence or <code>null</code>.
*/
public e higher e e
boolean found   false
for  e current   this
if  found
return current
if  comparator compare e  current     0
found   true
return null
/**
* returns the next lower element in the sequence to the given element. if
* the given element doesn't exist or if it is the first element in the
* sequence <code>null</code> is returned. <strong>please note that this
* method is provided for compatibility with java 5 se. on a java 6 se
* platform the same method implemented by the {@link treeset}
* class should be used for better performance.</strong>
*
* @param e an element which is compared to elements of this sequence.
* @return an element of this sequence or <code>null</code>.
*/
public e lower e e
e last   null
for  e current   this
if  comparator compare e  current     0
return last
last   current
return last