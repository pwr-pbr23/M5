/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor loadbalancer
import java util hashmap
import java util iterator
import java util list
import java util map
import org apache camel exchange
import org apache camel expression
import org apache camel processor
/**
* implements a sticky load balancer using an {@link expression} to calculate
* a correlation key to perform the sticky load balancing; rather like jsessionid in the web
* or jmsxgroupid in jms.
*
* @version $revision$
*/
public class stickyloadbalancer extends queueloadbalancer
private expression<exchange> correlationexpression
private queueloadbalancer loadbalancer
private int numberofhashgroups   64   1024
private final map<object  processor> stickymap   new hashmap<object  processor>
public stickyloadbalancer
this loadbalancer   new roundrobinloadbalancer
public stickyloadbalancer expression<exchange> correlationexpression
this correlationexpression  new roundrobinloadbalancer
public stickyloadbalancer expression<exchange> correlationexpression  queueloadbalancer loadbalancer
this correlationexpression   correlationexpression
this loadbalancer   loadbalancer
public void setcorrelationexpression expression<exchange> correlationexpression
this correlationexpression   correlationexpression
public void setloadbalancer queueloadbalancer loadbalancer
this loadbalancer   loadbalancer
protected synchronized processor chooseprocessor list<processor> processors  exchange exchange
object value   correlationexpression evaluate exchange
object key   getstickykey value
processor processor
synchronized  stickymap
processor   stickymap get key
if  processor    null
processor   loadbalancer chooseprocessor processors  exchange
stickymap put key  processor
return processor
@override
public void removeprocessor processor processor
synchronized  stickymap
iterator<map entry<object  processor>> iter   stickymap entryset   iterator
while  iter hasnext
map entry<object  processor> entry   iter next
if  processor equals entry getvalue
iter remove
super removeprocessor processor
// properties
//-------------------------------------------------------------------------
public int getnumberofhashgroups
return numberofhashgroups
public void setnumberofhashgroups int numberofhashgroups
this numberofhashgroups   numberofhashgroups
// implementation methods
//-------------------------------------------------------------------------
/**
* a strategy to create the key for the sticky load balancing map.
* the default implementation uses the hash code of the value
* then modulos by the numberofhashgroups to avoid the sticky map getting too big
*
* @param value the correlation value
* @return the key to be used in the sticky map
*/
protected object getstickykey object value
int hashcode   37
if  value    null
hashcode   value hashcode
if  numberofhashgroups > 0
hashcode   hashcode % numberofhashgroups
return hashcode