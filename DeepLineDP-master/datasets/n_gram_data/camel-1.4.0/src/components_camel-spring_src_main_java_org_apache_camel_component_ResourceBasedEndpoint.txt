/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component
import java io bytearrayinputstream
import java io ioexception
import java io inputstream
import org apache camel component
import org apache camel processor
import org apache camel converter ioconverter
import org apache camel impl processorendpoint
import org apache commons logging log
import org apache commons logging logfactory
import org springframework core io defaultresourceloader
import org springframework core io resource
import org springframework core io resourceloader
/**
* a useful base class for endpoints which depend on a resource
* such as things like velocity or xquery based components.
*
* @version $revision$
*/
public abstract class resourcebasedendpoint extends processorendpoint
protected final transient log log   logfactory getlog getclass
private final string resourceuri
private resourceloader resourceloader   new defaultresourceloader
private resource resource
private boolean contentcache
private byte buffer
public resourcebasedendpoint string endpointuri  component component  string resourceuri  processor processor
super endpointuri  component  processor
this resourceuri   resourceuri
protected resourcebasedendpoint string endpointuri  processor processor  string resourceuri
super endpointuri  processor
this resourceuri   resourceuri
public resource getresource
if  resource    null
if  log isdebugenabled
log debug     resourceuri       getresourceloader
resource   getresourceloader   getresource resourceuri
if  resource    null
throw new illegalargumentexception     resourceuri       getresourceloader
return resource
public boolean iscontentcache
return contentcache
/**
* sets wether to use resource content cache or not - default is <tt>false</tt>.
*
* @see #getresourceasinputstream()
*/
public void setcontentcache boolean contentcache
this contentcache   contentcache
/**
* gets the resource as an input stream considering the cache flag as well.
* <p/>
* if cache is enabled then the resource content is cached in an internal buffer and this content is
* returned to avoid loading the resource over and over again.
*
* @return  the input stream
* @throws ioexception is thrown if error loading the content of the resource to the local cache buffer
*/
public inputstream getresourceasinputstream   throws ioexception
if  resource    null
// get the resource if not already done
resource   getresource
if  contentcache
synchronized  resource
if  buffer    null
if  log isdebugenabled
log debug     resourceuri
buffer   ioconverter tobytes resource getinputstream
if  log isdebugenabled
log debug     resourceuri
return new bytearrayinputstream buffer
return resource getinputstream
public resourceloader getresourceloader
return resourceloader
public void setresourceloader resourceloader resourceloader
this resourceloader   resourceloader