/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel
import java util map
import org apache camel spi unitofwork
/**
* the base message exchange interface providing access to the request, response
* and fault {@link message} instances. different providers such as jms, jbi,
* cxf and http can provide their own derived api to expose the underlying
* transport semantics to avoid the leaky abstractions of generic apis.
*
* @version $revision$
*/
public interface exchange
/**
* returns the {@link exchangepattern} (mep) of this exchange.
*
* @return the message exchange pattern of this exchange
*/
exchangepattern getpattern
/**
* allows the {@link exchangepattern} (mep) of this exchange to be customized.
*
* this typically won't be required as an exchange can be created with a specific mep
* by calling {@link endpoint#createexchange(exchangepattern)} but it is here just in case
* it is needed.
*/
void setpattern exchangepattern pattern
/**
* returns a property associated with this exchange by name
*
* @param name the name of the property
* @return the value of the given header or null if there is no property for
*         the given name
*/
object getproperty string name
/**
* returns a property associated with this exchange by name and specifying
* the type required
*
* @param name the name of the property
* @param type the type of the property
* @return the value of the given header or null if there is no property for
*         the given name or null if it cannot be converted to the given
*         type
*/
<t> t getproperty string name  class<t> type
/**
* sets a property on the exchange
*
* @param name  of the property
* @param value to associate with the name
*/
void setproperty string name  object value
/**
* removes the given property on the exchange
*
* @param name of the property
* @return the old value of the property
*/
object removeproperty string name
/**
* returns all of the properties associated with the exchange
*
* @return all the headers in a map
*/
map<string  object> getproperties
/**
* returns the inbound request message
*
* @return the message
*/
message getin
/**
* sets the inbound message instance
*
* @param in the inbound message
*/
void setin message in
/**
* returns the outbound message, lazily creating one if one has not already
* been associated with this exchange. if you want to inspect this property
* but not force lazy creation then invoke the {@link #getout(boolean)}
* method passing in <tt>false</tt>
*
* @return the response
*/
message getout
/**
* returns the outbound message; optionally lazily creating one if one has
* not been associated with this exchange
*
* @return the response
*/
message getout boolean lazycreate
/**
* sets the outbound message
*
* @param out the outbound message
*/
void setout message out
/**
* returns the fault message
*
* @return the fault
*/
message getfault
/**
* returns the fault message; optionally lazily creating one if one has
* not been associated with this exchange
*
* @param lazycreate <tt>true</tt> will lazy create the fault message
*
* @return the fault
*/
message getfault boolean lazycreate
/**
* returns the exception associated with this exchange
*
* @return the exception (or null if no faults)
*/
throwable getexception
/**
* sets the exception associated with this exchange
*
* @param e  the caused exception
*/
void setexception throwable e
/**
* returns true if this exchange failed due to either an exception or fault
*
* @return true if this exchange failed due to either an exception or fault
* @see exchange#getexception()
* @see exchange#getfault()
*/
boolean isfailed
/**
* returns true if this exchange is transacted
*/
boolean istransacted
/**
* returns the container so that a processor can resolve endpoints from uris
*
* @return the container which owns this exchange
*/
camelcontext getcontext
/**
* creates a new exchange instance with empty messages, headers and properties
*/
exchange newinstance
/**
* creates a copy of the current message exchange so that it can be
* forwarded to another destination
*/
exchange copy
/**
* copies the data into this exchange from the given exchange
*
* @param source is the source from which headers and messages will be copied
*/
void copyfrom exchange source
/**
* returns the unit of work that this exchange belongs to; which may map to
* zero, one or more physical transactions
*/
unitofwork getunitofwork
/**
* sets the unit of work that this exchange belongs to; which may map to
* zero, one or more physical transactions
*/
void setunitofwork unitofwork unitofwork
/**
* returns the exchange id
*
* @return the unique id of the exchange
*/
string getexchangeid
/**
* set the exchange id
*
* @param id
*/
void setexchangeid string id