/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel util
import java io bufferedinputstream
import java io ioexception
import java io inputstream
import java util arraylist
import java util collections
import java util list
import java util properties
import java util concurrent concurrenthashmap
import org apache camel spi injector
/**
* finder to find factories from the resource classpath, usually <b>meta-inf/services/org/apache/camel/</b>.
*/
public class factoryfinder
private final string path
private final concurrenthashmap classmap   new concurrenthashmap
public factoryfinder
this
public factoryfinder string path
this path   path
/**
* creates a new instance of the given key
*
* @param key is the key to add to the path to find a text file containing
*            the factory name
* @return a newly created instance
*/
public object newinstance string key  throws illegalaccessexception  instantiationexception  ioexception
classnotfoundexception
return newinstance key   string null
public object newinstance string key  string propertyprefix  throws illegalaccessexception
instantiationexception  ioexception  classnotfoundexception
class clazz   findclass key  propertyprefix
return clazz newinstance
public object newinstance string key  injector injector  throws ioexception  classnotfoundexception
return newinstance key  injector   string null
public object newinstance string key  injector injector  string propertyprefix  throws ioexception
classnotfoundexception
class type   findclass key  propertyprefix
return injector newinstance type
public <t> t newinstance string key  injector injector  class<t> expectedtype  throws ioexception
classnotfoundexception
return newinstance key  injector  null  expectedtype
public <t> t newinstance string key  injector injector  string propertyprefix  class<t> expectedtype
throws ioexception  classnotfoundexception
class type   findclass key  propertyprefix
object value   injector newinstance type
if  expectedtype isinstance value
return expectedtype cast value
else
throw new classcastexception     expectedtype getname         value
public <t> list<t> newinstances string key  injector injector  class<t> type  throws ioexception
classnotfoundexception
list<class> list   findclasses key
list<t> answer   new arraylist<t> list size
answer add newinstance key  injector  type
return answer
public class findclass string key  throws classnotfoundexception  ioexception
return findclass key  null
public class findclass string key  string propertyprefix  throws classnotfoundexception  ioexception
if  propertyprefix    null
propertyprefix
class clazz    class classmap get propertyprefix   key
if  clazz    null
clazz   newinstance dofindfactoryproperties key   propertyprefix
classmap put propertyprefix   key  clazz
return clazz
public list<class> findclasses string key  throws classnotfoundexception  ioexception
return findclasses key  null
public list<class> findclasses string key  string propertyprefix  throws classnotfoundexception
ioexception
// todo change to support finding multiple classes on the classpath!
class type   findclass key  propertyprefix
return collections singletonlist type
public string getpath
return path
private class newinstance properties properties  string propertyprefix  throws classnotfoundexception
ioexception
string classname   properties getproperty propertyprefix
if  classname    null
throw new ioexception     propertyprefix
return objecthelper loadclass classname
private properties dofindfactoryproperties string key  throws ioexception
string uri   path   key
inputstream in   objecthelper loadresourceasstream uri
if  in    null
throw new nofactoryavailableexception uri
// lets load the file
bufferedinputstream reader   null
try
reader   new bufferedinputstream in
properties properties   new properties
properties load reader
return properties
finally
objecthelper close reader  key  null
objecthelper close in  key  null