/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel builder sql
import java util collections
import java util hashmap
import java util list
import java util map
import java util set
import org apache camel exchange
import org apache camel expression
import org apache camel message
import org apache camel predicate
import org apache camel runtimeexpressionexception
import org apache camel util objecthelper
import org josql query
import org josql queryexecutionexception
import org josql queryparseexception
/**
* a builder of sql {@link org.apache.camel.expression} and
* {@link org.apache.camel.predicate} implementations
*
* @version $revision$
*/
public class sqlbuilder<e extends exchange> implements expression<e>  predicate<e>
private query query
private map<string  object> variables   new hashmap<string  object>
public sqlbuilder query query
this query   query
public object evaluate e exchange
return evaluatequery exchange
public boolean matches e exchange
list list   evaluatequery exchange
return matches exchange  list
public void assertmatches string text  e exchange  throws assertionerror
list list   evaluatequery exchange
if   matches exchange  list
throw new assertionerror this       exchange       list
// builder api
// -----------------------------------------------------------------------
/**
* creates a new builder for the given sql query string
*
* @param sql the sql query to perform
* @return a new builder
* @throws queryparseexception if there is an issue with the sql
*/
public static <e extends exchange> sqlbuilder<e> sql string sql  throws queryparseexception
query q   new query
q parse sql
return new sqlbuilder q
/**
* adds the variable value to be used by the sql query
*/
public sqlbuilder<e> variable string name  object value
getvariables   put name  value
return this
// properties
// -----------------------------------------------------------------------
public map<string  object> getvariables
return variables
public void setvariables map<string  object> properties
this variables   properties
// implementation methods
// -----------------------------------------------------------------------
protected boolean matches e exchange  list list
return objecthelper matches list
protected list evaluatequery e exchange
configurequery exchange
message in   exchange getin
list list   in getbody list class
if  list    null
list   collections singletonlist in getbody
try
return query execute list  getresults
catch  queryexecutionexception e
throw new runtimeexpressionexception e
protected void configurequery e exchange
// lets pass in the headers as variables that the sql can use
addvariables exchange getproperties
addvariables exchange getin   getheaders
addvariables getvariables
query setvariable    exchange
query setvariable    exchange getin
query setvariable    exchange getout
protected void addvariables map<string  object> map
set<map entry<string  object>> propertyentries   map entryset
for  map entry<string  object> entry   propertyentries
query setvariable entry getkey    entry getvalue