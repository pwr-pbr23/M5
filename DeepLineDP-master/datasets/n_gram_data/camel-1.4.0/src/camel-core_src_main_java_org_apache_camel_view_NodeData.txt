/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel view
import java util arraylist
import java util list
import org apache camel model aggregatortype
import org apache camel model choicetype
import org apache camel model filtertype
import org apache camel model fromtype
import org apache camel model otherwisetype
import org apache camel model processortype
import org apache camel model recipientlisttype
import org apache camel model resequencertype
import org apache camel model routingsliptype
import org apache camel model splittertype
import org apache camel model totype
import org apache camel model whentype
import static org apache camel util objecthelper isnotnullandnonempty
import static org apache camel util objecthelper isnullorblank
/**
* represents a node in the eip diagram tree
*
* @version $revision$
*/
public class nodedata
public string id
public string image
public string label
public string shape
public string edgelabel
public string tooltop
public string nodetype
public boolean nodewritten
public string url
public list<processortype> outputs
public string association
private final string imageprefix
public nodedata string id  object node  string imageprefix
this id   id
this imageprefix   imageprefix
if  node instanceof processortype
processortype processortype    processortype node
this edgelabel   processortype getlabel
if  node instanceof fromtype
fromtype fromtype    fromtype node
this tooltop   fromtype getlabel
this label   removequerystring this tooltop
this url
else if  node instanceof totype
totype totype    totype node
this tooltop   totype getlabel
this label   removequerystring this tooltop
this edgelabel
this url
else if  node instanceof filtertype
this image   imageprefix
this nodetype
else if  node instanceof whentype
this image   imageprefix
this nodetype
this url
else if  node instanceof otherwisetype
this nodetype
this edgelabel
this url
this tooltop
else if  node instanceof choicetype
this image   imageprefix
this nodetype
this label
this edgelabel
choicetype choice    choicetype node
list<processortype> outputs   new arraylist<processortype> choice getwhenclauses
if  choice getotherwise      null
outputs add choice getotherwise
this outputs   outputs
else if  node instanceof recipientlisttype
this image   imageprefix
this nodetype
else if  node instanceof routingsliptype
this image   imageprefix
this nodetype
this url
this tooltop     routingsliptype  node  getheadername
else if  node instanceof splittertype
this image   imageprefix
this nodetype
else if  node instanceof aggregatortype
this image   imageprefix
this nodetype
else if  node instanceof resequencertype
this image   imageprefix
this nodetype
// lets auto-default as many values as we can
if  isnullorblank this nodetype     node    null
// todo we could add this to the model?
string name   node getclass   getname
int idx   name lastindexof
if  idx > 0
name   name substring idx   1
if  name endswith
name   name substring 0  name length     4
this nodetype   insertspacesbetweencamelcase name
if  this label    null
if  isnullorblank this image
this label   this nodetype
this shape
else if  isnotnullandnonempty this edgelabel
this label
else
this label   node tostring
if  isnullorblank this tooltop
if  isnotnullandnonempty this nodetype
string description   isnotnullandnonempty this edgelabel  ? this edgelabel   this label
this tooltop   this nodetype       description
else
this tooltop   this label
if  isnullorblank this url     isnotnullandnonempty this nodetype
this url       this nodetype tolowercase   replace
if  node instanceof processortype    this outputs    null
processortype processortype    processortype node
this outputs   processortype getoutputs
protected string removequerystring string text
int idx   text indexof
if  idx <  0
return text
else
return text substring 0  idx
/**
* lets insert a space before each upper case letter after a lowercase
*/
public static string insertspacesbetweencamelcase string name
boolean lastcharacterlowercase   false
stringbuffer buffer   new stringbuffer
int i   0
for  int size   name length    i < size  i
char ch   name charat i
if  character isuppercase ch
if  lastcharacterlowercase
buffer append
lastcharacterlowercase   false
else
lastcharacterlowercase   true
buffer append ch
return buffer tostring