/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel view
import java io printwriter
import java util list
import java util map
import java util set
import org apache camel model fromtype
import org apache camel model multicasttype
import org apache camel model processortype
import org apache camel model routetype
import static org apache camel util objecthelper isnullorblank
/**
* @version $revision$
*/
public class xmlgraphgenerator extends graphgeneratorsupport
private boolean addurl   true
public xmlgraphgenerator string dir
super dir
protected void generatefile printwriter writer  map<string  list<routetype>> map
writer println
writer println
writer println
if  map size   > 0
writer println
printroutes writer  map
writer println
writer println
protected void printroutes printwriter writer  map<string  list<routetype>> map
set<map entry<string  list<routetype>>> entries   map entryset
for  map entry<string  list<routetype>> entry   entries
string group   entry getkey
printroutes writer  group  entry getvalue
protected void printroutes printwriter writer  string group  list<routetype> routes
group   encode group
if  group    null
int idx   group lastindexof
string name   group
if  idx > 0    idx < group length     1
name   group substring idx   1
writer println     group       name       group
writer println     group
for  routetype route   routes
list<fromtype> inputs   route getinputs
boolean first   true
for  fromtype input   inputs
nodedata nodedata   getnodedata input
if  first
first   false
if  group    null
writer println     group       encode nodedata id
printroute writer  route  nodedata
writer println
protected void printroute printwriter writer  final routetype route  nodedata nodedata
printnode writer  nodedata
// todo we should add a transactional client / event driven consumer / polling client
nodedata from   nodedata
for  processortype output   route getoutputs
nodedata newdata   printnode writer  from  output
from   newdata
protected nodedata printnode printwriter writer  nodedata fromdata  processortype node
if  node instanceof multicasttype
// no need for a multicast node
list<processortype> outputs   node getoutputs
for  processortype output   outputs
printnode writer  fromdata  output
return fromdata
nodedata todata   getnodedata node
printnode writer  todata
if  fromdata    null
writer print  "
writer print encode fromdata id
writer print   toid
writer print encode todata id
string association   todata edgelabel
if  isnullorblank association
writer print   association
writer print encode association
writer println   >"
// now lets write any children
list<processortype> outputs   todata outputs
if  outputs    null
for  processortype output   outputs
nodedata newdata   printnode writer  todata  output
if   ismulticastnode node
todata   newdata
return todata
protected void printnode printwriter writer  nodedata data
if   data nodewritten
data nodewritten   true
writer println
writer print  "
writer print encode data id
writer print   name
string name   data label
if  isnullorblank name
name   data tooltop
writer print encode name
writer print   nodetype
string nodetype   data image
if  isnullorblank nodetype
nodetype   data shape
if  isnullorblank nodetype
nodetype
writer print encode nodetype
writer print   description
writer print encode data tooltop
if  addurl
writer print   url
writer print encode data url
writer println   >"
protected string encode string text
if  text    null
return
return text replaceall    quot  <  lt "
replaceall       replaceall