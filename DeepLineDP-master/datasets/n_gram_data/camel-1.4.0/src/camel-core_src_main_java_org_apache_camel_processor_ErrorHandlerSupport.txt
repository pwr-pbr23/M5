/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import java util linkedhashmap
import java util list
import java util map
import org apache camel exchange
import org apache camel processor
import org apache camel impl servicesupport
import org apache camel model exceptiontype
import org apache camel processor exceptionpolicy defaultexceptionpolicystrategy
import org apache camel processor exceptionpolicy exceptionpolicystrategy
/**
* support class for {@link errorhandler} implementations.
*
* @version $revision$
*/
public abstract class errorhandlersupport extends servicesupport implements errorhandler
private map<class  exceptiontype> exceptionpolicies   new linkedhashmap<class  exceptiontype>
private exceptionpolicystrategy exceptionpolicy   createdefaultexceptionpolicystrategy
public void addexceptionpolicy exceptiontype exception
processor processor   exception geterrorhandler
addchildservice processor
list<class> list   exception getexceptionclasses
for  class exceptiontype   list
exceptionpolicies put exceptiontype  exception
/**
* attempts to invoke the handler for this particular exception if one is available
*/
protected boolean customprocessorforexception exchange exchange  throwable exception  throws exception
exceptiontype policy   getexceptionpolicy exchange  exception
if  policy    null
processor processor   policy geterrorhandler
if  processor    null
processor process exchange
return true
return false
/**
* attempts to find the best suited {@link exceptiontype} to be used for handling the given thrown exception.
*
* @param exchange  the exchange
* @param exception the exception that was thrown
* @return the best exception type to handle this exception, <tt>null</tt> if none found.
*/
protected exceptiontype getexceptionpolicy exchange exchange  throwable exception
if  exceptionpolicy    null
throw new illegalstateexception
return exceptionpolicy getexceptionpolicy exceptionpolicies  exchange  exception
/**
* sets the strategy to use for resolving the {@link exceptiontype} to use
* for handling thrown exceptions.
*/
public void setexceptionpolicy exceptionpolicystrategy exceptionpolicy
this exceptionpolicy   exceptionpolicy
/**
* creates the default exception policy strategy to use.
*/
public static exceptionpolicystrategy createdefaultexceptionpolicystrategy
return new defaultexceptionpolicystrategy