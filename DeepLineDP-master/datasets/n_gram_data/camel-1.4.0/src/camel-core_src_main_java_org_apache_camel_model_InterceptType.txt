/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel model
import java util collection
import java util collections
import java util list
import javax xml bind annotation xmlaccesstype
import javax xml bind annotation xmlaccessortype
import javax xml bind annotation xmlrootelement
import javax xml bind annotation xmltransient
import org apache camel intercept
import org apache camel predicate
import org apache camel processor
import org apache camel builder predicatebuilder
import org apache camel processor interceptor
import org apache camel spi routecontext
/**
* represents an xml &lt;intercept/&gt; element
*
* @version $revision$
*/
@xmlrootelement name
@xmlaccessortype xmlaccesstype field
public class intercepttype extends outputtype<processortype>
@xmltransient
private proceedtype proceed   new proceedtype
@xmltransient
private boolean stop   boolean false
@xmltransient
private boolean usepredicate   boolean false
@override
public string tostring
return     getoutputs
@override
public string getshortname
return
@override
public processor createprocessor routecontext routecontext  throws exception
interceptor interceptor   new interceptor
routecontext intercept interceptor
final processor interceptroute   createoutputsprocessor routecontext
interceptor setinterceptorlogic interceptroute
return interceptor
/**
* applies this interceptor only if the given predicate is true
*/
public choicetype when predicate predicate
usepredicate   boolean true
choicetype choice   choice   when predicatebuilder not predicate
choice addoutput proceed
return choice otherwise
public proceedtype getproceed
return proceed
public void stopintercept
stop   boolean true
public intercepttype createproxy
intercepttype answer   new intercepttype
answer getoutputs   addall this getoutputs
// hack: now we need to replace the proceed of the proxy with its own
// a bit ugly, operating based on the assumption that the proceed is
// in its outputs (if proceed() was called) and/or in the
// outputs of the otherwise or last when clause for the predicated version.
if  answer getoutputs   size   > 0
// this is for the predicate version or if a choice() is present
choicetype choice   null
for  processortype processor   answer getoutputs
if  processor instanceof choicetype
// special cases for predicates (choices)
choice    choicetype  processor
// for the predicated version we add the proceed() to otherwise()
// before knowing if stop() will follow, so let's make a small adjustment
if  usepredicate booleanvalue      stop booleanvalue
whentype when   choice getwhenclauses   get 0
when getoutputs   remove this getproceed
// add proceed to the when clause
addproceedproxy this getproceed    answer getproceed
choice getwhenclauses   get choice getwhenclauses   size     1   usepredicate booleanvalue       stop booleanvalue
// force adding a proceed at the end (otherwise) if its not a stop type
addproceedproxy this getproceed    answer getproceed    choice getotherwise     stop booleanvalue
if  stop booleanvalue
// must add proceed to when clause if stop is explictiy declared, otherwise when the
// predicate test fails then there is no proceed
// see example: interceptorsimpleroutetest (city paris is never proceeded)
addproceedproxy this getproceed    answer getproceed
choice getwhenclauses   get choice getwhenclauses   size     1   usepredicate booleanvalue
break
if  choice    null
// force adding a proceed at the end if its not a stop type
addproceedproxy this getproceed    answer getproceed    answer   stop booleanvalue
return answer
private void addproceedproxy proceedtype orig  proceedtype proxy  processortype<?> processor  boolean force
int index   processor getoutputs   indexof orig
if  index >  0
processor addoutput proxy
// replace original proceed with proxy
list<processortype<?>> outs   processor getoutputs
outs remove proxy
outs set index  proxy
else if  force
processor addoutput proxy