/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor
import org apache camel asynccallback
import org apache camel asyncprocessor
import org apache camel endpoint
import org apache camel exchange
import org apache camel producer
import org apache camel service
import org apache camel impl servicesupport
import org apache camel impl converter asyncprocessortypeconverter
import org apache commons logging log
import org apache commons logging logfactory
/**
* processor for forwarding exchanges to an endpoint destination.
*
* @version $revision$
*/
public class sendprocessor extends servicesupport implements asyncprocessor  service
private static final transient log log   logfactory getlog sendprocessor class
private endpoint destination
private producer producer
private asyncprocessor processor
public sendprocessor endpoint destination
if  destination    null
throw new illegalargumentexception
this destination   destination
@override
public string tostring
return     destination
public void process exchange exchange  throws exception
if  producer    null
if  isstopped
log warn     exchange
else
throw new illegalstateexception
else
producer process exchange
public boolean process exchange exchange  asynccallback callback
if  producer    null
if  isstopped
log warn     exchange
else
exchange setexception new illegalstateexception
callback done true
return true
else
return processor process exchange  callback
public endpoint getdestination
return destination
protected void dostart   throws exception
this producer   destination createproducer
this producer start
this processor   asyncprocessortypeconverter convert producer
protected void dostop   throws exception
if  producer    null
try
producer stop
finally
producer   null
processor   null