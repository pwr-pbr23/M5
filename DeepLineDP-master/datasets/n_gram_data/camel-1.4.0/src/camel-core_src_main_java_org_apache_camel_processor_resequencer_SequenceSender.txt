/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel processor resequencer
import java lang reflect invocationhandler
import java lang reflect method
import java lang reflect proxy
import java util concurrent blockingqueue
import org apache camel exchange
import org apache camel processor
import org apache commons logging log
import org apache commons logging logfactory
/**
* a thread that takes re-ordered {@link exchange}s from a blocking queue and
* send them to the linked processor.
*
* @author martin krasser
*
* @version $revision$
*/
public class sequencesender extends thread
private static final transient log log   logfactory getlog sequencesender class
private static final exchange stop   createstopsignal
private blockingqueue<exchange> queue
private processor processor
/**
* creates a new {@link sequencesender} thread.
*
* @param processor the processor to send re-ordered {@link exchange}s.
*/
public sequencesender processor processor
this processor   processor
/**
* sets the {@link blockingqueue} to take messages from.
*
* @param queue the {@link blockingqueue} to take messages from.
*/
public void setqueue blockingqueue<exchange> queue
this queue   queue
public void run
while  true
try
exchange exchange   queue take
if  exchange    stop
log info
return
processor process exchange
catch  interruptedexception e
log info
return
catch  exception e
log warn     e getmessage
/**
* cancels this thread.
*/
public void cancel   throws interruptedexception
queue put stop
private static exchange createstopsignal
return  exchange proxy newproxyinstance sequencesender class getclassloader
new class  exchange class   createstophandler
private static invocationhandler createstophandler
return new invocationhandler
public object invoke object proxy  method method  object args  throws throwable
throw new runtimeexception