/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel maven
import java io bufferedinputstream
import java io bufferedoutputstream
import java io bytearrayoutputstream
import java io file
import java io filenotfoundexception
import java io fileoutputstream
import java io ioexception
import java io printwriter
import java net url
import javax xml transform transformer
import javax xml transform transformerexception
import javax xml transform transformerfactory
import javax xml transform transformerfactoryconfigurationerror
import javax xml transform dom domsource
import javax xml transform stream streamresult
import org w3c dom document
import org w3c dom namednodemap
import org w3c dom node
import org w3c dom nodelist
import org w3c tidy tidy
import org apache maven plugin abstractmojo
import org apache maven plugin mojoexecutionexception
import org apache maven project mavenproject
import org apache maven project mavenprojecthelper
import org codehaus plexus util cli commandlineexception
import org codehaus plexus util cli commandlineutils
import org codehaus plexus util cli commandline
import org codehaus plexus util cli commandline argument
import org codehaus plexus util cli streamconsumer
/**
* goal which extracts the content div from the html page and converts to pdf
* using prince
*
* @goal compile
* @phase compile
*/
public class htmltopdfmojo extends abstractmojo
/**
* the url to the confluence page to convert.
*
* @parameter expression="${page}"
*            default-value="http://cwiki.apache.org/confluence/display/camel/index"
* @required
*/
private string page
/**
* the output file name for the pdf.
*
* @parameter expression="${pdf}"
*            default-value="${project.build.directory}/site/manual/${project.artifactid}-${project.version}.pdf"
*/
private string pdf
/**
* the css style sheets that should be linked.
*
* @parameter
*/
private string stylesheets
/**
* content that should be added in the head element of the html file.
*
* @parameter
*/
private string head
/**
* the first div with who's class matches the contentdivclass will be
* assumed to be the content section of the html and is what will be used as
* the content in the pdf.
*
* @parameter default-value="wiki-content"
*/
private string contentdivclass
/**
* arguments that should be passed to the prince html to pdf processor.
*
* @parameter
*/
private string princeargs
/**
* if there is an error converting the html to pdf should the build fail?
* default to false since this requires the prince tool to be installed and
* on the path of the system.
*
* @parameter default-value="false"
*/
private boolean erroronconverionfailure
/**
* if there is an error downloading the html should the build fail? default
* to false since this usually requires the user to be online.
*
* @parameter default-value="false"
*/
private boolean errorondownloadfailure
/**
* the maven project.
*
* @parameter expression="${project}"
* @required
* @readonly
*/
private mavenproject project
/**
* @component
*/
private mavenprojecthelper projecthelper
/**
* the type used when attaching the artifact to the deployment.
*
* @parameter default-value="pdf"
*/
private string type
/**
* classifier to add to the artifact generated.
*
* @parameter
*/
private string classifier
public void execute   throws mojoexecutionexception
file outputdir   new file pdf  getparentfile
if   outputdir exists
outputdir mkdirs
try
// download
string content   downloadcontent
if  content    null
return
// store
storehtmlfile content
// run prince
if  convert      0
file pdffile   new file getpdffilename
projecthelper attachartifact project  type  classifier  pdffile
catch  mojoexecutionexception e
throw e
catch  exception e
throw new mojoexecutionexception     page       e getmessage    e
private int convert   throws commandlineexception  mojoexecutionexception
getlog   info
commandline cl   new commandline
argument arg
if  princeargs    null
for  int i   0  i < princeargs length  i
arg   new argument
arg setvalue princeargs
cl addarg arg
arg   new argument
arg setvalue gethtmlfilename
cl addarg arg
arg   new argument
arg setvalue getpdffilename
cl addarg arg
streamconsumer out   new streamconsumer
public void consumeline string line
getlog   info     line
getlog   info
string lines   cl getcommandline
stringbuffer buffer   new stringbuffer
for  string line   lines
buffer append
buffer append line
getlog   info buffer
int rc   commandlineutils executecommandline cl  out  out
if  rc    0
getlog   info     getpdffilename
else
if  erroronconverionfailure
throw new mojoexecutionexception     rc
else
getlog   error     rc
return rc
private string getpdffilename
return pdf
private void storehtmlfile string content  throws filenotfoundexception
printwriter out   new printwriter new bufferedoutputstream new fileoutputstream gethtmlfilename
out println
out println
out println
if  head    null
out println head
if  stylesheets    null
for  int i   0  i < stylesheets length  i
out println     stylesheet  text css
out println
out println     content
out close
getlog   info     gethtmlfilename
private string gethtmlfilename
string name   getpdffilename
if  name endswith
name   name substring 0  name length     4
return name
private string downloadcontent   throws ioexception  transformerfactoryconfigurationerror  transformerexception  mojoexecutionexception
getlog   info     page
url url   new url page
tidy tidy   new tidy
bytearrayoutputstream result   new bytearrayoutputstream
tidy seterrout new printwriter result
document doc
try
doc   tidy parsedom new bufferedinputstream url openstream     new bytearrayoutputstream
catch  throwable e
if  errorondownloadfailure
getlog   debug new string result tobytearray     e
throw new mojoexecutionexception     page       e
else
getlog   debug new string result tobytearray     e
getlog   error     page       e
return null
nodelist nodelist   doc getelementsbytagname
for  int i   0  i < nodelist getlength      i
node node   nodelist item i
namednodemap nm   node getattributes
node attr   nm getnameditem
if  attr    null    attr getnodevalue   equalsignorecase contentdivclass
// write the wiki-content div to the content variable.
bytearrayoutputstream contentdata   new bytearrayoutputstream 1024   100
transformerfactory tfactory   transformerfactory newinstance
transformer transformer   tfactory newtransformer
transformer transform new domsource node   new streamresult contentdata
string content   new string contentdata tobytearray
content   content substring content indexof
return content
throw new mojoexecutionexception     page