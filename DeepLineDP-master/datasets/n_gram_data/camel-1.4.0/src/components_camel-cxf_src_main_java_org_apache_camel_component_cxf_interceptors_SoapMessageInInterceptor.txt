/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel component cxf interceptors
import java util arraylist
import java util collection
import java util list
//import java.util.resourcebundle;
import java util logging level
import java util logging logger
import javax xml namespace qname
import org w3c dom document
import org w3c dom element
import org w3c dom node
import org apache cxf binding soap soapmessage
import org apache cxf binding soap model soapbindinginfo
import org apache cxf common logging logutils
//import org.apache.cxf.common.i18n.bundleutils;
import org apache cxf helpers domutils
import org apache cxf message exchange
import org apache cxf phase phase
import org apache cxf service model bindinginfo
import org apache cxf service model bindingmessageinfo
import org apache cxf service model bindingoperationinfo
import org apache cxf service model messagepartinfo
public class soapmessageininterceptor extends abstractmessageininterceptor<soapmessage>
private static final logger log   logutils getl7dlogger soapmessageininterceptor class
public soapmessageininterceptor
super phase read
protected logger getlogger
return log
protected boolean isfaultmessage soapmessage message
//fault processing is handled in soap binding in the readheadersinterceptor.
return false
protected bindingoperationinfo getbindingoperation soapmessage message  document doc
exchange ex   message getexchange
soapbindinginfo soapbinding    soapbindinginfo ex get bindinginfo class
element payloadel    element doc getchildnodes   item 0
qname startqname   new qname payloadel getnamespaceuri    payloadel getlocalname
// handling xml normal inbound message
boolean client   isrequestor message
list<bindingoperationinfo> boilist   new arraylist<bindingoperationinfo>
for  bindingoperationinfo boi   soapbinding getoperations
string style   soapbinding getstyle boi getoperationinfo
qname rootname   null
if    equals style
rootname   boi getoperationinfo   getname
else
bindingmessageinfo bmi   client ?  boi getoutput     boi getinput
if  bmi    null
collection<messagepartinfo> bodyparts   bmi getmessageparts
if  bodyparts size      1
messagepartinfo p   bodyparts iterator   next
rootname   p getconcretename
if  startqname equals rootname
boilist add boi
if  boilist size   > 1
log isloggable level info
log info
return boilist size      1 ? null   boilist get 0
protected list<element> getpartlist soapmessage inmessage  element rootnode  bindingmessageinfo bmi
list<element> partlist   new arraylist<element>
exchange ex   inmessage getexchange
soapbindinginfo soapbinding    soapbindinginfo ex get bindinginfo class
string style   soapbinding getstyle bmi getbindingoperation   getoperationinfo
if    equals style
//remove the operation element.
rootnode    element domutils getchild rootnode  node element_node
partlist add rootnode
return partlist
protected element getheader soapmessage inmessage
// need to find out the soap header information
element element   null
return element
// return inmessage.getheaders(element.class);