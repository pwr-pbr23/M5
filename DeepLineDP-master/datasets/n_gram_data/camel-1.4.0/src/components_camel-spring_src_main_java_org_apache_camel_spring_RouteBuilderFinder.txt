/**
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache camel spring
import java lang reflect modifier
import java util list
import java util map
import java util set
import org apache camel builder routebuilder
import org apache camel util resolverutil
import org apache commons logging log
import org apache commons logging logfactory
import org springframework beans factory config beanpostprocessor
import org springframework context applicationcontext
/**
* a helper class which will find all {@link routebuilder} instances on the classpath
*
* @version $revision$
*/
public class routebuilderfinder
private static final transient log log   logfactory getlog routebuilderfinder class
private final springcamelcontext camelcontext
private final string packages
private applicationcontext applicationcontext
private resolverutil resolver   new resolverutil
private beanpostprocessor beanpostprocessor
public routebuilderfinder springcamelcontext camelcontext  string packages  classloader classloader  beanpostprocessor postprocessor
this camelcontext   camelcontext
this applicationcontext   camelcontext getapplicationcontext
this packages   packages
this beanpostprocessor   postprocessor
// lets add all the available class loaders just in case of weirdness
// we could make this more strict once we've worked out all the gremlins
// in servicemix-camel
set set   resolver getclassloaders
set clear
set.add(classloader);
/*
set.add(classloader);
set.add(applicationcontext.getclassloader());
set.add(getclass().getclassloader());
*/
public string getpackages
return packages
public applicationcontext getapplicationcontext
return applicationcontext
/**
* appends all the {@link routebuilder} instances that can be found on the classpath
*/
public void appendbuilders list<routebuilder> list  throws illegalaccessexception  instantiationexception
resolver findimplementations routebuilder class  packages
set<class> classes   resolver getclasses
for  class aclass   classes
if  shouldignorebean aclass
continue
if  isvalidclass aclass
routebuilder builder   instantiatebuilder aclass
if  beanpostprocessor    null
// inject the annotated resource
beanpostprocessor postprocessbeforeinitialization builder  builder tostring
list add builder
public void destroy   throws exception
/**
* lets ignore beans that are not explicitly configured in the spring.xml
*/
protected boolean shouldignorebean class type
map beans   applicationcontext getbeansoftype type  true  true
if  beans    null    beans isempty
return false
// todo apply some filter?
return true
/**
* returns true if the object is non-abstract and supports a zero argument constructor
*/
protected boolean isvalidclass class type
if   modifier isabstract type getmodifiers        type isinterface
return true
return false
protected routebuilder instantiatebuilder class type  throws illegalaccessexception  instantiationexception
return  routebuilder  camelcontext getinjector   newinstance type