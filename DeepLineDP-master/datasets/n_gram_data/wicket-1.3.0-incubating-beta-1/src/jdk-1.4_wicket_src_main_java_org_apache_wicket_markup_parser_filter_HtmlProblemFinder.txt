/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import java util iterator
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup parser abstractmarkupfilter
/**
* this is a markup inline filter which by default is not added to the list of
* markup filter. it can be added by means of subclassing
* application.newmarkupparser() like
*
* <pre>
*     public class myapplication extends application
*     {
*         ...
*         public imarkupfilter[] getadditionalmarkuphandler()
*         {
*             return new imarkupfilter[] { new htmlproblemfinder(htmlproblemfinder.err_throw_exception) };
*         }
* </pre>
*
* the purpose of the filter is to find possible html issues and to log a
* warning.
*
* @author juergen donnerstag
*/
public final class htmlproblemfinder extends abstractmarkupfilter
/** logging */
private static final log log   logfactory getlog htmlproblemfinder class
/** ignore the issue detected */
public static final int err_ingore   3
/** log a warning on the issue detected */
public static final int err_log_warn   2
/** log an error on the issue detected */
public static final int err_log_error   1
/** throw an exception on the issue detected */
public static final int err_throw_exception   0
/** default behavior in case of a potential html issue detected */
private final int problemescalation
/**
* construct.
*
* @param problemescalation
*            how to escalate the issue found.
*/
public htmlproblemfinder final int problemescalation
this problemescalation   problemescalation
/**
* get the next markupelement from the parent markupfilter and handle it if
* the specific filter criteria are met. depending on the filter, it may
* return the markupelement unchanged, modified or it remove by asking the
* parent handler for the next tag.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return return the next eligible markupelement
*/
public markupelement nexttag   throws parseexception
// get the next tag. if null, no more tags are available
final componenttag tag    componenttag getparent   nexttag
if  tag    null
return tag
// make sure some typical and may be tricky problems are detected and
// logged.
if    equals tag getname        tag isopen      tag isopenclose
string src   tag getattributes   getstring
if   src    null      src trim   length      0
escalatewarning    tag
// some people are using a dot "wicket.xxx" instead of a colon
// "wicket:xxx"
iterator iter   tag getattributes   keyset   iterator
while  iter hasnext
string key    string iter next
if  key    null
key   key tolowercase
if  key startswith
escalatewarning
tag
return tag
/**
* handle the issue. depending the setting either log a warning, an error,
* throw an exception or ignore it.
*
* @param msg
*            the message
* @param tag
*            the current tag
* @throws parseexception
*/
private void escalatewarning final string msg  final componenttag tag  throws parseexception
if  problemescalation    err_log_warn
log warn msg   tag touserdebugstring
else if  problemescalation    err_log_error
log error msg   tag touserdebugstring
else if  problemescalation    err_ingore
// no action required
else
// if (problemescalation == err_throw_exception)
throw new parseexception msg   tag touserdebugstring    tag getpos