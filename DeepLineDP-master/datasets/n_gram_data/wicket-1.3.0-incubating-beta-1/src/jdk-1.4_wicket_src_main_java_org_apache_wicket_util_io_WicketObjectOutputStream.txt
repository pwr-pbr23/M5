/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io dataoutputstream
import java io ioexception
import java io objectoutput
import java io objectoutputstream
import java io outputstream
import java io serializable
import java lang reflect array
import java util arrays
import java util hashmap
import java util iterator
import java util map
import java util map entry
/**
* @author jcompagner
*/
public final class wicketobjectoutputstream extends objectoutputstream
/**
* lightweight identity hash table which maps objects to integer handles,
* assigned in ascending order (comes from {@link objectoutputstream}).
*/
private static final class handletable
/* number of mappings in table/next available handle */
private int size
/* size threshold determining when to expand hash spine */
private int threshold
/* factor for computing size threshold */
private final float loadfactor
/* maps hash value -> candidate handle value */
private int spine
/* maps handle value -> next candidate handle value */
private int next
/* maps handle value -> associated object */
private object objs
handletable
this 16  0 75f
handletable int initialcapacity  float loadfactor
this loadfactor   loadfactor
spine   new int
next   new int
objs   new object
threshold    int  initialcapacity   loadfactor
clear
private void growentries
int newlength    next length << 1    1
int newnext   new int
system arraycopy next  0  newnext  0  size
next   newnext
object newobjs   new object
system arraycopy objs  0  newobjs  0  size
objs   newobjs
private void growspine
spine   new int
threshold    int  spine length   loadfactor
arrays fill spine   1
for  int i   0  i < size  i
insert objs  i
private int hash object obj
return system identityhashcode obj    0x7fffffff
private void insert object obj  int handle
int index   hash obj  % spine length
objs   obj
next   spine
spine   handle
/**
* assigns next available handle to given object, and returns handle
* value. handles are assigned in ascending order starting at 0.
*
* @param obj
* @return
*/
int assign object obj
if  size >  next length
growentries
if  size >  threshold
growspine
insert obj  size
return size
void clear
arrays fill spine   1
arrays fill objs  0  size  null
size   0
boolean contains object obj
return lookup obj      1
/**
* looks up and returns handle associated with given object, or -1 if no
* mapping found.
*
* @param obj
* @return
*/
int lookup object obj
if  size    0
return  1
int index   hash obj  % spine length
for  int i   spine  i >  0  i   next
if  objs    obj
return i
return  1
int size
return size
private class putfieldimpl extends putfield
private hashmap mapbytes
private hashmap mapchar
private hashmap mapdouble
private hashmap mapfloat
private hashmap mapint
private hashmap maplong
private hashmap mapshort
private hashmap mapboolean
private hashmap mapobject
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string,
*      boolean)
*/
public void put string name  boolean val
if  mapboolean    null
mapboolean   new hashmap 4
mapboolean put name  val ? boolean true   boolean false
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, byte)
*/
public void put string name  byte val
if  mapbytes    null
mapbytes   new hashmap 4
mapbytes put name  new byte val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, char)
*/
public void put string name  char val
if  mapchar    null
mapchar   new hashmap 4
mapchar put name  new character val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string,
*      double)
*/
public void put string name  double val
if  mapdouble    null
mapdouble   new hashmap 4
mapdouble put name  new double val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, float)
*/
public void put string name  float val
if  mapfloat    null
mapfloat   new hashmap 4
mapfloat put name  new float val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, int)
*/
public void put string name  int val
if  mapint    null
mapint   new hashmap 4
mapint put name  new integer val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, long)
*/
public void put string name  long val
if  maplong    null
maplong   new hashmap 4
maplong put name  new long val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string,
*      java.lang.object)
*/
public void put string name  object val
if  mapobject    null
mapobject   new hashmap 4
mapobject put name  val
/**
* @see java.io.objectoutputstream.putfield#put(java.lang.string, short)
*/
public void put string name  short val
if  mapshort    null
mapshort   new hashmap 4
mapshort put name  new short val
/**
* @see java.io.objectoutputstream.putfield#write(java.io.objectoutput)
*/
public void write objectoutput out  throws ioexception
// i don't know if all the fields (names in the map)
// are really also always real fields.. so i just
// write them by name->value
// maybe in the further we can really calculate an offset?
if  mapboolean    null
classstreamhandler lookup   classstreamhandler lookup boolean class
writeshort lookup getclassid
writeshort mapboolean size
iterator it   mapboolean entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writeboolean   boolean entry getvalue    booleanvalue
if  mapbytes    null
classstreamhandler lookup   classstreamhandler lookup byte class
writeshort lookup getclassid
writeshort mapbytes size
iterator it   mapbytes entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writebyte   byte entry getvalue    bytevalue
if  mapshort    null
classstreamhandler lookup   classstreamhandler lookup short class
writeshort lookup getclassid
writeshort mapshort size
iterator it   mapshort entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writeshort   short entry getvalue    shortvalue
if  mapchar    null
classstreamhandler lookup   classstreamhandler lookup char class
writeshort lookup getclassid
writeshort mapchar size
iterator it   mapchar entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writechar   character entry getvalue    charvalue
if  mapint    null
classstreamhandler lookup   classstreamhandler lookup int class
writeshort lookup getclassid
writeshort mapint size
iterator it   mapint entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writeint   integer entry getvalue    intvalue
if  maplong    null
classstreamhandler lookup   classstreamhandler lookup long class
writeshort lookup getclassid
writeshort maplong size
iterator it   maplong entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writelong   long entry getvalue    longvalue
if  mapfloat    null
classstreamhandler lookup   classstreamhandler lookup float class
writeshort lookup getclassid
writeshort mapfloat size
iterator it   mapfloat entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writefloat   float entry getvalue    floatvalue
if  mapdouble    null
classstreamhandler lookup   classstreamhandler lookup double class
writeshort lookup getclassid
writeshort mapdouble size
iterator it   mapdouble entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writedouble   double entry getvalue    doublevalue
if  mapobject    null
classstreamhandler lookup   classstreamhandler lookup serializable class
writeshort lookup getclassid
writeshort mapobject size
iterator it   mapobject entryset   iterator
while  it hasnext
map entry entry    entry it next
// write the key.
writeobjectoverride entry getkey
writeobjectoverride entry getvalue
// end byte.
writeshort classstreamhandler null
private final handletable handledobjects   new handletable
private final handlearrayliststack defaultwrite   new handlearrayliststack
private final dataoutputstream out
private classstreamhandler classhandler
private int booleancounter
private int bytecounter
private putfield curput
private object curobject
/**
* construct.
*
* @param out
* @throws ioexception
*/
public wicketobjectoutputstream outputstream out  throws ioexception
super
this out   new dataoutputstream out
/**
* @see java.io.objectoutputstream#close()
*/
public void close   throws ioexception
classhandler   null
curobject   null
curput   null
handledobjects clear
defaultwrite clear
out close
/**
* @see java.io.objectoutputstream#defaultwriteobject()
*/
public void defaultwriteobject   throws ioexception
if   defaultwrite contains curobject
defaultwrite add curobject
classhandler writefields this  curobject
/**
* @see java.io.objectoutputstream#putfields()
*/
public putfield putfields   throws ioexception
if  curput    null
try
curput   new putfieldimpl
catch  exception e
throw new wicketserializeableexception    e
return curput
/**
* @see java.io.objectoutputstream#write(byte[])
*/
public void write byte buf  throws ioexception
out write buf
/**
* @see java.io.objectoutputstream#write(byte[], int, int)
*/
public void write byte buf  int off  int len  throws ioexception
out write buf  off  len
/**
* @see java.io.objectoutputstream#write(int)
*/
public void write int val  throws ioexception
out write val
/**
* writes a boolean.
*
* @param val
*            the boolean to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writeboolean boolean val  throws ioexception
out writeboolean val
/**
* writes an 8 bit byte.
*
* @param val
*            the byte value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writebyte int val  throws ioexception
out writebyte val
/**
* writes a string as a sequence of bytes.
*
* @param str
*            the string of bytes to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writebytes string str  throws ioexception
out writebytes str
/**
* writes a 16 bit char.
*
* @param val
*            the char value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writechar int val  throws ioexception
out writechar val
/**
* writes a string as a sequence of chars.
*
* @param str
*            the string of chars to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writechars string str  throws ioexception
out writechars str
/**
* writes a 64 bit double.
*
* @param val
*            the double value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writedouble double val  throws ioexception
out writedouble val
/**
* @see java.io.objectoutputstream#writefields()
*/
public void writefields   throws ioexception
if  curput    null
try
curput write this
catch  exception e
throw new wicketserializeableexception    e
/**
* writes a 32 bit float.
*
* @param val
*            the float value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writefloat float val  throws ioexception
out writefloat val
/**
* writes a 32 bit int.
*
* @param val
*            the integer value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writeint int val  throws ioexception
out writeint val
/**
* writes a 64 bit long.
*
* @param val
*            the long value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writelong long val  throws ioexception
out writelong val
/**
* writes a 16 bit short.
*
* @param val
*            the short value to be written
* @throws ioexception
*             if i/o errors occur while writing to the underlying stream
*/
public void writeshort int val  throws ioexception
out writeshort val
/**
* @see java.io.objectoutputstream#writeutf(java.lang.string)
*/
public void writeutf string str  throws ioexception
out writeutf str
/**
* @see java.io.objectoutputstream#writeobjectoverride(java.lang.object)
*/
protected final void writeobjectoverride object obj  throws ioexception
if  obj    null
out write classstreamhandler null
return
int handle   handledobjects lookup obj
if  handle     1
out write classstreamhandler handle
out writeshort handle
else
if  obj instanceof class
classstreamhandler classhandler   classstreamhandler lookup  class obj
out write classstreamhandler class
out writeshort classhandler getclassid
else
class cls   obj getclass
handledobjects assign obj
if  cls isarray
class componenttype   cls getcomponenttype
classstreamhandler classhandler   classstreamhandler lookup componenttype
if  componenttype isprimitive
try
out write classstreamhandler primitive_array
out writeshort classhandler getclassid
classhandler writearray obj  this
catch  wicketserializeableexception wse
wse
addtrace componenttype getname         array getlength obj
throw wse
catch  exception e
throw new wicketserializeableexception
componenttype getname
array getlength obj       e
else
int length   array getlength obj
try
out write classstreamhandler array
out writeshort classhandler getclassid
out writeint length
for  int i   0  i < length  i
writeobjectoverride array get obj  i
catch  wicketserializeableexception wse
wse addtrace componenttype getname         length
throw wse
catch  exception e
throw new wicketserializeableexception
componenttype getname         length      e
return
else
class realclz   cls
classhandler   classstreamhandler lookup realclz
object object   classhandler writereplace obj
if  object    null
obj   object
realclz   obj getclass
classhandler   classstreamhandler lookup realclz
out write classstreamhandler class_def
out writeshort classhandler getclassid
// handle strings directly.
if  obj instanceof string
out writeutf  string obj
else
putfield old   curput
object oldobject   curobject
curput   null
curobject   obj
try
if   classhandler invokewritemethod this  obj
classhandler writefields this  obj
catch  wicketserializeableexception wse
if  realclz    cls
wse addtrace realclz getname         cls getname
else
wse addtrace realclz getname
throw wse
catch  exception e
if  realclz    cls
throw new wicketserializeableexception
realclz getname         cls getname
e
else
throw new wicketserializeableexception
realclz getname    e
finally
curobject   oldobject
curput   old