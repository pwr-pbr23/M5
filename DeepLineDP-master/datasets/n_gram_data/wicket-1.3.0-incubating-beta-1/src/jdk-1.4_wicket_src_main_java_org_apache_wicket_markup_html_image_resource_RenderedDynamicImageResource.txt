/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html image resource
import java awt graphics2d
import java awt image bufferedimage
import java lang ref softreference
import org apache wicket util time time
/**
* a dynamicimageresource subclass that allows easy rendering of regenenerable
* (unbuffered) dynamic images. a rendereddynamicimageresource implements the
* abstract method render(graphics2d) to create/re-create a given image
* on-the-fly. when a rendereddynamicimageresource is serialized, the image
* state is transient, which means it will disappear when the resource is sent
* over the wire and then will be recreated when required.
* <p>
* the format of the image (and therefore the resource's extension) can be
* specified with setformat(string). the default format is "png" because jpeg is
* lossy and makes generated images look bad and gif has patent issues.
*
* @see org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource
* @see org.apache.wicket.markup.html.image.resource.defaultbuttonimageresourcefactory
* @author jonathan locke
* @author gili tzabari
* @author johan compagner
*/
public abstract class rendereddynamicimageresource extends dynamicimageresource
private static final long serialversionuid   1l
/** height of image */
private int height   100
/** transient image data so that image only needs to be generated once per vm */
private transient softreference imagedata
/** type of image (one of bufferedimage.type_*) */
private int type   bufferedimage type_int_rgb
/** width of image */
private int width   100
/**
* constructor.
*
* @param width
*            width of image
* @param height
*            height of image
*/
public rendereddynamicimageresource final int width  final int height
this width   width
this height   height
/**
* constructor.
*
* @param width
*            width of image
* @param height
*            height of image
* @param format
*            the format of the image (jpg, png or gif)
*/
public rendereddynamicimageresource final int width  final int height  string format
super format
this width   width
this height   height
/**
* @return returns the height.
*/
public synchronized int getheight
return height
/**
* @return returns the type (one of bufferedimage.type_*).
*/
public synchronized int gettype
return type
/**
* @return returns the width.
*/
public synchronized int getwidth
return width
/**
* causes the image to be redrawn the next time its requested.
*
* @see org.apache.wicket.resource#invalidate()
*/
public synchronized void invalidate
imagedata   null
/**
* @param height
*            the height to set.
*/
public synchronized void setheight int height
this height   height
invalidate
/**
* @param type
*            the type to set (one of bufferedimage.type_*).
*/
public synchronized void settype int type
this type   type
invalidate
/**
* @param width
*            the width to set.
*/
public synchronized void setwidth int width
this width   width
invalidate
protected byte getimagedata
// get image data is always called in sync block
byte data   null
if  imagedata    null
data    byte imagedata get
if  data    null
data   render
imagedata   new softreference data
setlastmodifiedtime time now
return data
/**
* renders this image
*
* @return the image data
*/
protected byte render
while  true
final bufferedimage image   new bufferedimage getwidth    getheight    gettype
if  render  graphics2d image getgraphics
return toimagedata image
/**
* override this method to provide your rendering code
*
* @param graphics
*            the graphics context to render on
* @return true if the image was rendered. false if the image size was
*         changed by the rendering implementation and the image should be
*         re-rendered at the new size.
*/
protected abstract boolean render graphics2d graphics