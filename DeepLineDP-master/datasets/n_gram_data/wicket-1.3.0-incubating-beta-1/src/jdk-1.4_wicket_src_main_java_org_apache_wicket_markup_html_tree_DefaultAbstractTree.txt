/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree
import java io serializable
import javax swing tree treemodel
import javax swing tree treenode
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket markupcontainer
import org apache wicket requestcycle
import org apache wicket resourcereference
import org apache wicket response
import org apache wicket ajax ajaxrequesttarget
import org apache wicket ajax markup html ajaxfallbacklink
import org apache wicket ajax markup html ajaxlink
import org apache wicket behavior headercontributor
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html link link
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket util lang enumeratedtype
/**
* tree class that contains convenient functions related to presentation of the
* tree, which includes junction link, tree item selection link, spacers (with
* lines) and default tree item and folder icons.
* <p>
* the class itself adds no component to tree items. if you use this class
* directly, you have to implement populatetreeitem() on your own. if you want
* to use an existing (complete) tree class, use {@link tree}
* <p>
* this class allows you to choose between 3 types of links.
* {@link defaultabstracttree#setlinktype(org.apache.wicket.extensions.markup.html.tree.defaultabstracttree.linktype)}
*
* @author matej knopp
*/
public abstract class defaultabstracttree extends abstracttree
/**
* the type of junction links and node selection links.
* <dl>
* <dt>regular link</dt>
* <dd>non-ajax link, always refreshes the whole page. works with
* javascript disabled.</dd>
* <dt>ajax link</dt>
* <dd>links that supports partial updates. doesn't work with javascript
* disabled</dd>
* <dt>ajax fallback link</dt>
* <dd>link that supports partial updates. with javascript disabled acts
* like regular link. the drawback is that generated url (thus the entire
* html) is larger then using the other two</dd>
* </dl>
*/
public static final class linktype extends enumeratedtype
/** partial updates with no fallback. */
public static final linktype ajax   new linktype
/**
* partial updates that falls back to a regular link in case the client
* does not support javascript.
*/
public static final linktype ajax_fallback   new linktype
/**
* non-ajax version that always re-renders the whole page.
*/
public static final linktype regular   new linktype
private static final long serialversionuid   1l
/**
* construct.
*
* @param name
*/
public linktype string name
super name
/**
* helper class for calling an action from a link.
*
* @author matej knopp
*/
protected interface ilinkcallback extends iclusterable
/**
* called when the click is executed.
*
* @param target
*            the ajax request target
*/
void onclick ajaxrequesttarget target
/**
* reference to the css file.
*/
private static final resourcereference css   new resourcereference
defaultabstracttree class
/** reference to the icon of closed tree folder */
private static final resourcereference folder_closed   new resourcereference
defaultabstracttree class
/** reference to the icon of open tree folder */
private static final resourcereference folder_open   new resourcereference
defaultabstracttree class
/** reference to the icon of tree item (not a folder) */
private static final resourcereference item   new resourcereference
defaultabstracttree class
/** the link type, default is {@link linktype#ajax ajax}. */
private linktype linktype   linktype ajax
/**
* tree contructor.
*
* @param id
*            the component id
*/
public defaultabstracttree string id
super id
init
/**
* tree constructor.
*
* @param id
*            the component id
* @param model
*            the tree model
*/
public defaultabstracttree string id  imodel model
super id  model
init
/**
* tree constructor.
*
* @param id
*            the component id
* @param model
*            the tree model
*/
public defaultabstracttree string id  treemodel model
super id  new model  serializable model
init
/**
* returns the current type of links on tree items.
*
* @return the link type
*/
public linktype getlinktype
return linktype
/**
* sets the type of links on tree items. after the link type is changed, the
* whole tree is rebuild and re-rendered.
*
* @param linktype
*            type of links
*/
public void setlinktype linktype linktype
if  this linktype    linktype
this linktype   linktype
invalidateall
/**
* returns the resource reference of default stylesheet.
*
* @return the package resource reference
*/
protected resourcereference getcss
return css
/**
* returns the resource reference of default closed tree folder.
*
* @return the package resource reference
*/
protected resourcereference getfolderclosed
return folder_closed
/**
* returns the resource reference of default open tree folder.
*
* @return the package resource reference
*/
protected resourcereference getfolderopen
return folder_open
/**
* returns the resource reference of default tree item (not folder).
*
* @return the package resource reference
*/
protected resourcereference getitem
return item
/**
* returns the resource reference for icon of specified tree node.
*
* @param node
*            the node
* @return the package resource reference
*/
protected resourcereference getnodeicon treenode node
if  node isleaf      true
return getitem
else
if  isnodeexpanded node
return getfolderopen
else
return getfolderclosed
/**
* creates the indentation element. this element should be placed as first
* element in the tree item markup to ensure proper indentaion of the tree
* item. this implementation also takes care of lines that connect nodes.
*
* @param parent
*            the component parent
* @param id
*            the component id
* @param node
*            the tree node for which to create the identation element
* @param level
*            the current level
* @return the indentation component
*/
protected component newindentation markupcontainer parent  string id  final treenode node
final int level
webmarkupcontainer result   new webmarkupcontainer id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.markupcontainer#oncomponenttagbody(org.apache.wicket.markup.markupstream,
*      org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttagbody markupstream markupstream  componenttag opentag
response response   requestcycle get   getresponse
treenode parent   node getparent
charsequence urls   new charsequence
for  int i   0  i < level    i
if  isnodelast parent
urls
else
urls
parent   parent getparent
for  int i   level   1  i >  0    i
response write
result setrenderbodyonly true
return result
/**
* creates an image placed on junction link. this image actually consists of
* two spans with different css classes. these classes are specified
* according to the stylesheet to make the junction image look well together
* with lines connecting nodes.
*
* @param parent
*            the component parent
* @param id
*            the component id
* @param node
*            the tree node
* @return the component that resprents a junction
*/
protected markupcontainer newjunctionimage markupcontainer parent  final string id
final treenode node
return  markupcontainer new webmarkupcontainer id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.component#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttag componenttag tag
super oncomponenttag tag
final string cssclassinner
if  node isleaf      false
cssclassinner   isnodeexpanded node  ?
else
cssclassinner
final string cssclassouter   isnodelast node  ?
response response   requestcycle get   getresponse
response write     "
cssclassinner    >< span>< span>"
setrenderbodyonly true
/**
* creates the junction link for given node. also (optionally) creates the
* junction image. if the node is a leaf (it has no children), the created
* junction link is non-functional.
*
* @param parent
*            parent component of the link
*
* @param id
*            wicket:id of the component
*
* @param imageid
*            wicket:id of the image. this can be null, in that case image
*            is not created. image is supposed to be placed on the link
*            (link is parent of image)
*
* @param node
*            tree node for which the link should be created.
* @return the link component
*/
protected component newjunctionlink markupcontainer parent  final string id
final string imageid  final treenode node
final markupcontainer junctionlink
if  node isleaf      false
junctionlink   newlink parent  id  new ilinkcallback
private static final long serialversionuid   1l
public void onclick ajaxrequesttarget target
if  isnodeexpanded node
gettreestate   collapsenode node
else
gettreestate   expandnode node
onjunctionlinkclicked target  node
updatetree target
else
junctionlink   new webmarkupcontainer id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.component#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttag componenttag tag
super oncomponenttag tag
tag put
if  imageid    null
junctionlink add newjunctionimage junctionlink  imageid  node
return junctionlink
/**
* creates a link of type specified by current linktype. when the links is
* clicked it calls the specified callback.
*
* @param parent
*            the parent component
* @param id
*            the component id
* @param callback
*            the link call back
* @return the link component
*/
protected markupcontainer newlink markupcontainer parent  string id
final ilinkcallback callback
if  getlinktype      linktype regular
return new link id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.markup.html.link.link#onclick()
*/
public void onclick
callback onclick null
else if  getlinktype      linktype ajax
return new ajaxlink id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.ajax.markup.html.ajaxlink#onclick(org.apache.wicket.ajax.ajaxrequesttarget)
*/
public void onclick ajaxrequesttarget target
callback onclick target
else
return new ajaxfallbacklink id
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.ajax.markup.html.ajaxfallbacklink#onclick(org.apache.wicket.ajax.ajaxrequesttarget)
*/
public void onclick ajaxrequesttarget target
callback onclick target
/**
* creates the icon for current node. by default uses image reference
* specified by {@link defaultabstracttree#getnodeicon(treenode)}.
*
* @param parent
*            the parent component
* @param id
*            the component id
* @param node
*            the tree node
* @return the web component that represents the icon of the current node
*/
protected component newnodeicon markupcontainer parent  string id  final treenode node
return new webmarkupcontainer id
private static final long serialversionuid   1l
protected void oncomponenttag componenttag tag
super oncomponenttag tag
tag put        requestcycle get   urlfor getnodeicon node
/**
* creates a link that can be used to select / unselect the specified node.
*
* @param parent
*            the parent component
* @param id
*            the component id
* @param node
*            the parent node
* @return the component that represents the link
*/
protected markupcontainer newnodelink markupcontainer parent  string id  final treenode node
return newlink parent  id  new ilinkcallback
private static final long serialversionuid   1l
public void onclick ajaxrequesttarget target
gettreestate   selectnode node   gettreestate   isnodeselected node
onnodelinkclicked target  node
updatetree target
/**
* callback function called after user clicked on an junction link. the node
* has already been expanded/collapsed (depending on previous status).
*
* @param target
*            request target - may be null on non-ajax call
*
* @param node
*            node for which this callback is relevant
*/
protected void onjunctionlinkclicked ajaxrequesttarget target  treenode node
/**
* this callback method is called after user has selected / deselected the
* given node.
*
* @param target
*            request target - may be null on non-ajax call
*
* @param node
*            node for which this this callback is fired.
*/
protected void onnodelinkclicked ajaxrequesttarget target  treenode node
/**
* performs the tree initialization. adds header contribution for the
* stylesheet.
*/
private void init
resourcereference css   getcss
if  css    null
add headercontributor forcss css getscope    css getname
/**
* returns whether the provided node is last child of it's parent.
*
* @param node
*            the node
* @return whether the provided node is the last child
*/
private boolean isnodelast treenode node
treenode parent   node getparent
if  parent    null
return true
else
return parent getchildat parent getchildcount     1  equals node