/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization
import org apache wicket component
import org apache wicket settings isecuritysettings
/**
* authorization strategies specify aspect-like constraints on significant
* actions taken by the framework in a given application. these constraints are
* guaranteed by the framework to be applied consistently throughout. violations
* will result in a security action directed by the strategy, such as the
* throwing of an authorizationexception or the filtering out of
* security-sensitive information.
*
* @author eelco hillenius
* @author jonathan locke
* @since wicket 1.2
*/
public interface iauthorizationstrategy
/**
* implementation of {@link iauthorizationstrategy} that allows everything.
*/
public static final iauthorizationstrategy allow_all   new iauthorizationstrategy
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isinstantiationauthorized(java.lang.class)
*/
public boolean isinstantiationauthorized final class c
return true
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isactionauthorized(org.apache.wicket.component,
*      org.apache.wicket.authorization.action)
*/
public boolean isactionauthorized component c  action action
return true
/**
* checks whether an instance of the given component class may be created.
* if this method returns false, the
* {@link iunauthorizedcomponentinstantiationlistener} that is configured in
* the {@link isecuritysettings security settings} will be called. the
* default implementation of that listener throws a
* {@link unauthorizedinstantiationexception}.
* <p>
* if you wish to implement a strategy that authenticates users which cannot
* access a given page (or other component), you can simply throw a
* {@link org.apache.wicket.restartresponseatinterceptpageexception} in your
* implementation of this method.
*
* @param componentclass
*            the component class to check
* @return whether the given component may be created
*/
boolean isinstantiationauthorized class componentclass
/**
* gets whether the given action is permitted. if it is, this method should
* return true. if it isn't, this method should either return false or - in
* case of a serious breach - throw a security exception. returning is
* generally preferable over throwing an exception as that doesn't break the
* normal flow.
*
* @param component
*            the component to be acted upon
* @param action
*            the action to authorize on the component
* @return whether the given action may be taken on the given component
* @throws authorizationexception
*             can be thrown by implementation if action is unauthorized
* @see component#enable
* @see component#render
*/
boolean isactionauthorized component component  action action