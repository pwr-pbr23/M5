/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http request urlcompressing
import org apache wicket component
import org apache wicket ipagemap
import org apache wicket iredirectlistener
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket requestlistenerinterface
import org apache wicket markup html webpage
import org apache wicket protocol http request webrequestcodingstrategy
import org apache wicket request requestparameters
import org apache wicket request target component listener ilistenerinterfacerequesttarget
import org apache wicket util string appendingstringbuffer
/**
* use this codingstategy with the
* {@link weburlcompressingtargetresolverstrategy} to minimize the
* wicket:interface urls. the component path and the interface name will be
* removed from the url and only an uid will be inserted into the url.
*
* use it like this:
*
* <pre>
* protected irequestcycleprocessor newrequestcycleprocessor()
* {
* 	return new urlcompressingwebrequestprocessor();
* }
* </pre>
*
* @author jcompagner
*
* @since 1.3
*/
public class urlcompressingwebcodingstrategy extends webrequestcodingstrategy
/**
* encode a listener interface target.
*
* @param requestcycle
*            the current request cycle
* @param requesttarget
*            the target to encode
* @return the encoded url
*/
protected charsequence encode requestcycle requestcycle
ilistenerinterfacerequesttarget requesttarget
final requestlistenerinterface rli   requesttarget getrequestlistenerinterface
// start string buffer for url
final appendingstringbuffer url   new appendingstringbuffer 64
url append
url append interface_parameter_name
url append
// get component and page for request target
final component component   requesttarget gettarget
final page page   component getpage
// add pagemap
final ipagemap pagemap   page getpagemap
if   pagemap isdefault
url append pagemap getname
url append component path_separator
string listenername   rli getname
// add path to component
if  page instanceof webpage       equals listenername
url append page getid
url append component path_separator
url append   webpage page  geturlcompressor   getuidforcomponentandinterface component
listenername
listenername   null
else
url append component getpath
url append component path_separator
// add version
final int versionnumber   component getpage   getcurrentversionnumber
if   rli getrecordspageversion
url append page latest_version
else if  versionnumber > 0
url append versionnumber
url append component path_separator
// add listener interface
if  listenername    null     iredirectlistener interface getname   equals listenername
url append listenername
url append component path_separator
// add behaviourid
requestparameters params   requesttarget getrequestparameters
if  params    null    params getbehaviorid      null
url append params getbehaviorid
return requestcycle getoriginalresponse   encodeurl url