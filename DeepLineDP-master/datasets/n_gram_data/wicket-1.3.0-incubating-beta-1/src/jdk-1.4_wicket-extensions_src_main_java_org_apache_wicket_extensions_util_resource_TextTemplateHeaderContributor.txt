/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions util resource
import java util map
import org apache wicket behavior stringheadercontributor
import org apache wicket model imodel
import org apache wicket model loadabledetachablemodel
/**
* a header contributor that will contribute the contents of the given template
* interpolated with the provided map of variables.
*
* @author eelco hillenius
*/
public class texttemplateheadercontributor extends stringheadercontributor
private static final long serialversionuid   1l
/**
* this model holds the template and returns the interpolation of the
* template with of any of the
*/
private static final class templatemodel extends loadabledetachablemodel
private static final long serialversionuid   1l
/**
* the template to operate on and which makes the contribution.
*/
private final texttemplate template
/**
* the model that holds any variables for interpolation. it should
* return a {@link map} or null.
*/
private final imodel variablesmodel
/**
* construct.
*
* @param template
*            the template to work on
* @param variablesmodel
*            the model that holds any variables for interpolation. it
*            should return a {@link map} or null.
*/
protected templatemodel texttemplate template  imodel variablesmodel
if  template    null
throw new illegalargumentexception
this template   template
this variablesmodel   variablesmodel
/**
* @see org.apache.wicket.model.imodel#detach()
*/
public void detach
if  variablesmodel    null
variablesmodel detach
super detach
protected object load
if  variablesmodel    null
map variables    map variablesmodel getobject
if  variables    null
return template asstring variables
return template asstring
/**
* gets a css header contributor based on the given text template. the
* template will be interpolated with the given variables. the content will
* be written as the body of a script tag pair.
*
* @param template
*            the text template that is the base for the contribution
* @param variablesmodel
*            the variables to interpolate
* @return the header contributor instance
*/
public static texttemplateheadercontributor forcss texttemplate template  imodel variablesmodel
return new texttemplateheadercontributor new csstemplate template   variablesmodel
/**
* gets a css header contributor that will load the template from the given
* file name relative to (/in the same package as) the provided clazz
* argument. the template will be interpolated with the given variables. the
* content will be written as the body of a script tag pair.
*
* @param clazz
*            the class to be used for retrieving the classloader for
*            loading the packaged template.
* @param filename
*            the name of the file, relative to the clazz position
* @param variablesmodel
*            the variables to interpolate
* @return the header contributor instance
*/
public static texttemplateheadercontributor forcss final class clazz  final string filename
imodel variablesmodel
return forcss new packagedtexttemplate clazz  filename   variablesmodel
/**
* gets a javascript header contributor based on the given text template.
* the template will be interpolated with the given variables. the content
* will be written as the body of a script tag pair.
*
* @param template
*            the text template that is the base for the contribution
* @param variablesmodel
*            the variables to interpolate
* @return the header contributor instance
*/
public static texttemplateheadercontributor forjavascript texttemplate template
imodel variablesmodel
return new texttemplateheadercontributor new javascripttemplate template   variablesmodel
/**
* gets a javascript header contributor that will load the template from the
* given file name relative to (/in the same package as) the provided clazz
* argument. the template will be interpolated with the given variables. the
* content will be written as the body of a script tag pair.
*
* @param clazz
*            the class to be used for retrieving the classloader for
*            loading the packaged template.
* @param filename
*            the name of the file, relative to the clazz position
* @param variablesmodel
*            the variables to interpolate
* @return the header contributor instance
*/
public static texttemplateheadercontributor forjavascript final class clazz
final string filename  imodel variablesmodel
return forjavascript new packagedtexttemplate clazz  filename   variablesmodel
/**
* construct.
*
* @param template
*            the template with the contribution
* @param variablesmodel
*            optional model for variable substitution
*/
protected texttemplateheadercontributor texttemplate template  imodel variablesmodel
super new templatemodel template  variablesmodel