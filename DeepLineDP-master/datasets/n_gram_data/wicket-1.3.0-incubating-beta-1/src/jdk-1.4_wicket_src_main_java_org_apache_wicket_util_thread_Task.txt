/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util thread
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket util time duration
import org apache wicket util time time
/**
* runs a block of code periodically. the task can be started at a given time in
* the future and can be a daemon. the block of code will be passed a log object
* each time it is run through its icode interface.
* <p>
* if the code block takes longer than the period to run, the next task
* invocation will occur immediately. in this case, tasks will not occur at
* precise multiples of the period. for example, if you run a task every 30
* seconds, and the first run takes 40 seconds but the second takes 20 seconds,
* your task will be invoked at 0 seconds, 40 seconds and 70 seconds (40 seconds +
* 30 seconds), which is not an even multiple of 30 seconds.
* <p>
* in general, this is a simple task class designed for polling activities. if
* you need precise guarantees, you probably should be using a different task
* class.
*
* @author jonathan locke
*/
public final class task
/** true if the task's thread should be a daemon. */
private boolean isdaemon   true
/** true if the tasks's thread has already started executing. */
private boolean isstarted   false
/** the log to give to the user's code. */
private transient log log   null
/** the name of this task. */
private final string name
/** the time that the task should start. */
private time starttime   time now
/** when set the taks will stop as soon as possible. */
private boolean stop
/**
* constructor.
*
* @param name
*            the name of this task
*/
public task final string name
this name   name
/**
* runs this task at the given frequency. you may only call this method if
* the task has not yet been started. if the task is already running, an
* illegalstateexception will be thrown.
*
* @param frequency
*            the frequency at which to run the code
* @param code
*            the code to run
* @throws illegalstateexception
*             thrown if task is already running
*/
public synchronized final void run final duration frequency  final icode code
if   isstarted
final runnable runnable   new runnable
public void run
// sleep until start time
starttime fromnow   sleep
final log log   getlog
while   stop
// get the start of the current period
final time startofperiod   time now
if  log isdebugenabled
log debug     code tostring
try
// run the user's code
code run getlog
catch  exception e
log error
name  e
if  log isdebugenabled
log debug     code tostring
// sleep until the period is over (or not at all if it's
// already passed)
startofperiod add frequency  fromnow   sleep
// start the thread
final thread thread   new thread runnable  name
thread setdaemon isdaemon
thread start
// we're started all right!
isstarted   true
else
throw new illegalstateexception
/**
* set daemon or not. for obvious reasons, this value can only be set before
* the task starts running. if you attempt to set this value after the task
* starts running, an illegalstateexception will be thrown.
*
* @param daemon
*            true if this task's thread should be a daemon
* @throws illegalstateexception
*             thrown if task is already running
*/
public synchronized void setdaemon final boolean daemon
if  isstarted
throw new illegalstateexception
isdaemon   daemon
/**
* set log for user code to log to when task runs.
*
* @param log
*            the log
*/
public synchronized void setlog final log log
this log   log
/**
* sets start time for this task. you cannot set the start time for a task
* which is already running. if you attempt to, an illegalstateexception
* will be thrown.
*
* @param starttime
*            the time this task should start running
* @throws illegalstateexception
*             thrown if task is already running
*/
public synchronized void setstarttime final time starttime
if  isstarted
throw new illegalstateexception
this starttime   starttime
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     name       starttime       isdaemon
isstarted       log
/**
* gets the log.
*
* @return the log
*/
protected log getlog
if  log    null
log   logfactory getlog task class
return log
/**
* will stop the task as soon as it does have that opportunity
*/
public void stop
stop   true