/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util parse metapattern parsers
import org apache wicket util parse metapattern group
import org apache wicket util parse metapattern metapattern
import org apache wicket util parse metapattern optionalmetapattern
/**
* parses key value assignment statements like "foo=bar" but also supporting
* namespaces like "wicket:foo=bar". however the 'key' value returned will
* contain "wicket:foo". it does not separate namespace and name.
*
* @author jonathan locke
*/
public final class variableassignmentparser extends metapatternparser
/** the optional namespace like "namespace:*" */
private static final metapattern namespace   new optionalmetapattern new metapattern
metapattern variable_name  metapattern colon
/** the key (lvalue) like "name" or "namespace:name" */
private final group key   new group new metapattern new metapattern   namespace
metapattern xml_attribute_name
/** the rvalue of the assignment */
private final group value
/**
* construct a variable assignment parser against a given input character
* sequence
*
* @param input
*            the input to parse
* @param valuepattern
*            value pattern
*/
public variableassignmentparser final charsequence input
this input  metapattern string
/**
* construct a variable assignment parser against a given input character
* sequence
*
* @param input
*            the input to parse
* @param valuepattern
*            value pattern
*/
public variableassignmentparser final charsequence input  final metapattern valuepattern
super input
// create group for value pattern
value   new group valuepattern
// pattern for =<value>
final metapattern variableassignment   new metapattern new metapattern
metapattern optional_whitespace  metapattern equals
metapattern optional_whitespace  value
// set parse pattern to <key>=<value>?
setpattern new metapattern new metapattern   metapattern optional_whitespace  key
new optionalmetapattern variableassignment   metapattern optional_whitespace
/**
* gets the key part (eg 'foo' in 'foo=bar'). the key will include the
* optional namespace (eg 'html:foo' in 'html:foo=bar').
*
* @return the key part
*/
public string getkey
return key get matcher
/**
* gets the value part (eg 'bar' in 'foo=bar').
*
* @return the value part
*/
public string getvalue
return value get matcher