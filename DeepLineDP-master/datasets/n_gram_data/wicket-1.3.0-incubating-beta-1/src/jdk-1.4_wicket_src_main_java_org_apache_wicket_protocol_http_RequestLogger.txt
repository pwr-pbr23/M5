/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java util arraylist
import java util arrays
import java util collections
import java util date
import java util linkedlist
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket iclusterable
import org apache wicket ipagemap
import org apache wicket irequesttarget
import org apache wicket page
import org apache wicket session
import org apache wicket request target component ibookmarkablepagerequesttarget
import org apache wicket request target component ipagerequesttarget
import org apache wicket request target component listener ilistenerinterfacerequesttarget
import org apache wicket request target resource isharedresourcerequesttarget
import org apache wicket util concurrent concurrenthashmap
import org apache wicket util lang classes
import org apache wicket util string appendingstringbuffer
/**
* this is the logger class that can be set in the
* {@link webapplication#setrequestlogger(requestlogger)} method. if this class
* is set all request and live sessions will be recorded and displayed from the
* total created sessions, to the peak session count and the current
* livesessions. for the livesessions the request logger will record what
* request are happening what kind of {@link irequesttarget} was the event
* target and what {@link irequesttarget} was the response target. it also
* records what session data was touched for this and how long the request did
* take.
*
* to view this information live see the {@link inspectorbug} that shows the
* {@link inspectorpage} with the {@link livesessionspage}
*
* @author jcompagner
*
* @since 1.2
*/
public class requestlogger implements irequestlogger
/** log. */
protected static log log   logfactory getlog requestlogger class
/**
* this interface can be implemented in a custom session object. to give an
* object that has more information for the current session (state of
* session).
*
* @author jcompagner
*/
public interface isessionloginfo
/**
* if you use the request logger log functionality then this object
* should have a nice string representation. so make sure that the
* tostring() is implemented for the returned object.
*
* @return the custom object stored in the request loggers current
*         request.
*/
object getsessioninfo
private int totalcreatedsessions
private int peaksessions
private list requests
private map livesessions
private threadlocal currentrequest   new threadlocal
private int active
/**
* construct.
*/
public requestlogger
requests   collections synchronizedlist new linkedlist
private static final long serialversionuid   1l
/**
* @see java.util.linkedlist#add(java.lang.object)
*/
public void add int index  object o
super add index  o
if  size   > application get   getrequestloggersettings   getrequestswindowsize
removelast
livesessions   new concurrenthashmap
/**
* @see org.apache.wicket.protocol.http.irequestlogger#gettotalcreatedsessions()
*/
public int gettotalcreatedsessions
return totalcreatedsessions
/**
* @see org.apache.wicket.protocol.http.irequestlogger#getpeaksessions()
*/
public int getpeaksessions
return peaksessions
/**
* @see org.apache.wicket.protocol.http.irequestlogger#getcurrentactiverequestcount()
*/
public int getcurrentactiverequestcount
return active
/**
* @see org.apache.wicket.protocol.http.irequestlogger#getrequests()
*/
public list getrequests
return collections unmodifiablelist requests
public sessiondata getlivesessions
sessiondata sessions    sessiondata livesessions values   toarray
new sessiondata
arrays sort sessions
return sessions
/**
* @see org.apache.wicket.protocol.http.irequestlogger#sessiondestroyed(java.lang.string)
*/
public void sessiondestroyed string sessionid
livesessions remove sessionid
/**
* @see org.apache.wicket.protocol.http.irequestlogger#sessiondestroyed(java.lang.string)
*/
public void sessioncreated string sessionid
livesessions put sessionid  new sessiondata sessionid
if  livesessions size   > peaksessions
peaksessions   livesessions size
totalcreatedsessions
requestdata getcurrentrequest
requestdata rd    requestdata currentrequest get
if  rd    null
rd   new requestdata
currentrequest set rd
synchronized  this
active
return rd
/**
* @see org.apache.wicket.protocol.http.irequestlogger#requesttime(long)
*/
public void requesttime long timetaken
requestdata rd    requestdata currentrequest get
if  rd    null
synchronized  this
if  active > 0
rd setactiverequest active
session session   session get
string sessionid   session getid
rd setsessionid sessionid
object sessioninfo   getsessioninfo session
rd setsessioninfo sessioninfo
long sizeinbytes    1
if  application get   getrequestloggersettings   getrecordsessionsize
sizeinbytes   session getsizeinbytes
rd setsessionsize sizeinbytes
rd settimetaken timetaken
requests add 0  rd
currentrequest set null
if  sessionid    null
sessiondata sd    sessiondata livesessions get sessionid
if  sd    null
// passivated session or logger only started after it.
sessioncreated sessionid
sd    sessiondata livesessions get sessionid
if  sd    null
sd setsessioninfo sessioninfo
sd setsessionsize sizeinbytes
sd addtimetaken timetaken
log rd  sd
else
log rd  null
else
log rd  null
/**
* @param rd
* @param sd
*/
private void log requestdata rd  sessiondata sd
if  log isinfoenabled
appendingstringbuffer asb   new appendingstringbuffer 150
asb append
asb append rd gettimetaken
asb append
asb append rd geteventtarget
asb append
asb append rd getresponsetarget
if  rd getsessioninfo      null     rd getsessioninfo   equals
asb append
asb append rd getsessioninfo
else
asb append
asb append rd getsessionid
asb append
asb append rd getsessionsize
if  sd    null
asb append
asb append sd getstartdate
asb append
asb append sd getnumberofrequests
asb append
asb append sd gettotaltimetaken
asb append
asb append rd getactiverequest
runtime runtime   runtime getruntime
long max   runtime maxmemory     1000000
long total   runtime totalmemory     1000000
long used   total   runtime freememory     1000000
asb append
asb append max
asb append
asb append total
asb append
asb append used
asb append
log info asb tostring
private object getsessioninfo session session
if  session instanceof isessionloginfo
return   isessionloginfo session  getsessioninfo
return
/**
* @see org.apache.wicket.protocol.http.irequestlogger#objectremoved(java.lang.object)
*/
public void objectremoved object value
requestdata rd   getcurrentrequest
if  value instanceof page
page page    page value
rd addentry     page getid         page getclass
else if  value instanceof ipagemap
ipagemap map    ipagemap value
rd addentry
map getname      null ?     map getname
else if  value instanceof websession
rd addentry
else
rd addentry     value
/**
* @see org.apache.wicket.protocol.http.irequestlogger#objectupdated(java.lang.object)
*/
public void objectupdated object value
requestdata rd   getcurrentrequest
if  value instanceof page
page page    page value
rd addentry     page getid         page getclass
else if  value instanceof ipagemap
ipagemap map    ipagemap value
rd addentry
map getname      null ?     map getname
else if  value instanceof session
rd addentry
else
rd addentry     value
/**
* @see org.apache.wicket.protocol.http.irequestlogger#objectcreated(java.lang.object)
*/
public void objectcreated object value
requestdata rd   getcurrentrequest
if  value instanceof session
rd addentry
else if  value instanceof page
page page    page value
rd addentry     page getid         page getclass
else if  value instanceof ipagemap
ipagemap map    ipagemap value
rd addentry
map getname      null ?     map getname
else
rd addentry     value
/**
* @see org.apache.wicket.protocol.http.irequestlogger#logresponsetarget(org.apache.wicket.irequesttarget)
*/
public void logresponsetarget irequesttarget target
getcurrentrequest   addresponsetarget getrequesttargetstring target
/**
* @see org.apache.wicket.protocol.http.irequestlogger#logeventtarget(org.apache.wicket.irequesttarget)
*/
public void logeventtarget irequesttarget target
getcurrentrequest   addeventtarget getrequesttargetstring target
/**
* @param target
* @return the request target nice display string
*/
private string getrequesttargetstring irequesttarget target
appendingstringbuffer sb   new appendingstringbuffer 128
if  target instanceof ilistenerinterfacerequesttarget
ilistenerinterfacerequesttarget listener    ilistenerinterfacerequesttarget target
sb append
sb append classes simplename listener gettarget   getclass
sb append
sb append listener gettarget   getpagerelativepath
sb append
sb append listener getpage   getclass   getname
sb append
sb append listener getpage   getid
sb append
sb append listener getrequestlistenerinterface   getname
sb append
sb append listener getrequestlistenerinterface   getmethod   getname
sb append
else if  target instanceof ipagerequesttarget
ipagerequesttarget pagerequesttarget    ipagerequesttarget target
sb append
sb append pagerequesttarget getpage   getclass   getname
sb append
sb append pagerequesttarget getpage   getid
sb append
else if  target instanceof ibookmarkablepagerequesttarget
ibookmarkablepagerequesttarget pagerequesttarget    ibookmarkablepagerequesttarget target
sb append
sb append pagerequesttarget getpageclass   getname
sb append
else if  target instanceof isharedresourcerequesttarget
isharedresourcerequesttarget sharedresourcetarget    isharedresourcerequesttarget target
sb append
sb append sharedresourcetarget getresourcekey
sb append
else
sb append target tostring
return sb tostring
/**
* this class hold the information one request of a session has.
*
* @author jcompagner
*/
public static class sessiondata implements iclusterable  comparable
private static final long serialversionuid   1l
private string sessionid
private long startdate
private long lastactive
private long numberofrequests
private long totaltimetaken
private long sessionsize
private object sessioninfo
/**
* construct.
*
* @param sessionid
*/
public sessiondata string sessionid
this sessionid   sessionid
this startdate   system currenttimemillis
this numberofrequests   1
/**
* @return the last active date.
*/
public date getlastactive
return new date lastactive
/**
* @return the start date of this session
*/
public date getstartdate
return new date startdate
/**
* @return the number of request for this session
*/
public long getnumberofrequests
return numberofrequests
/**
* @return returns the session size.
*/
public long getsessionsize
return sessionsize
/**
* @return returns the total time this session has spent.
*/
public long gettotaltimetaken
return totaltimetaken
/**
* @return the session info object given by the
*         {@link isessionloginfo#getsessioninfo()} session method.
*/
public object getsessioninfo
return sessioninfo
/**
* @return the session id
*/
public string getsessionid
return sessionid
void addtimetaken long time
this lastactive   system currenttimemillis
this numberofrequests
this totaltimetaken    time
void setsessioninfo object sessioninfo
this sessioninfo   sessioninfo
void setsessionsize long size
this sessionsize   size
public int compareto object sd
return  int    sessiondata sd  lastactive   lastactive
/**
* this class hold the information one request of a session has.
*
* @author jcompagner
*/
public static class requestdata implements iclusterable
private static final long serialversionuid   1l
private long startdate
private long timetaken
private list entries   new arraylist 5
private string eventtarget
private string responsetarget
private string sessionid
private long totalsessionsize
private object sessioninfo
private int activerequest
/**
* @return the time taken for this request
*/
public long gettimetaken
return new long timetaken
/**
* @param activerequest
*            the number of active request when this request happend
*/
public void setactiverequest int activerequest
this activerequest   activerequest
/**
* @return the number of active request when this request happend
*/
public int getactiverequest
return activerequest
/**
* @return the session object info, created by
*         {@link isessionloginfo#getsessioninfo()}
*/
public object getsessioninfo
return sessioninfo
/**
* set the session info object of the session for this request.
*
* @param sessioninfo
*/
public void setsessioninfo object sessioninfo
this sessioninfo   sessioninfo
/**
* @param sizeinbytes
*/
public void setsessionsize long sizeinbytes
totalsessionsize   sizeinbytes
/**
* @param id
*/
public void setsessionid string id
sessionid   id
/**
* @return the time taken for this request
*/
public date getstartdate
return new date startdate
/**
* @return the event target string
*/
public string geteventtarget
return eventtarget
/**
* @return the response target string
*/
public string getresponsetarget
return responsetarget
/**
* @param target
*/
public void addresponsetarget string target
this responsetarget   target
/**
* @param target
*/
public void addeventtarget string target
this eventtarget   target
/**
* @param timetaken
*/
public void settimetaken long timetaken
this timetaken   timetaken
this startdate   system currenttimemillis     timetaken
/**
* @param string
*/
public void addentry string string
entries add string
/**
* @return all entries of the objects that are created/updated or
*         removed in this request
*/
public string getalteredobjects
appendingstringbuffer sb   new appendingstringbuffer
for  int i   0  i < entries size    i
string element    string entries get i
sb append element
if  entries size      i   1
sb append
return sb tostring
/**
* @return the session id for this request
*/
public string getsessionid
return sessionid
/**
* @return the total session size.
*/
public long getsessionsize
return new long totalsessionsize
public string tostring
return     gettimetaken         sessioninfo
sessionid       totalsessionsize
eventtarget       responsetarget
getalteredobjects         activerequest