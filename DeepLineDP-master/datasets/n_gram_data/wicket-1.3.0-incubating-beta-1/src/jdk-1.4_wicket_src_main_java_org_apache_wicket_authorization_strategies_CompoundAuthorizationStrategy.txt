/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies
import java util arraylist
import org apache wicket component
import org apache wicket authorization action
import org apache wicket authorization iauthorizationstrategy
/**
* compound implementation of the iauthorizationstrategy that lets you chain two
* or more strategies together.
*
* @author ivaynberg
*/
public class compoundauthorizationstrategy implements iauthorizationstrategy
/** list of strategies to consult */
private arraylist strategies   new arraylist
/**
* adds a strategy to the chain
*
* @param strategy
*            strategy to add
*/
public final void add iauthorizationstrategy strategy
if  strategy    null
throw new illegalargumentexception
strategies add strategy
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isinstantiationauthorized(java.lang.class)
*/
public final boolean isinstantiationauthorized class componentclass
int size   strategies size
for  int i   0  i < size  i
iauthorizationstrategy strategy    iauthorizationstrategy strategies get i
if   strategy isinstantiationauthorized componentclass
return false
return true
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isactionauthorized(org.apache.wicket.component,
*      org.apache.wicket.authorization.action)
*/
public final boolean isactionauthorized component component  action action
int size   strategies size
for  int i   0  i < size  i
iauthorizationstrategy strategy    iauthorizationstrategy strategies get i
if   strategy isactionauthorized component  action
return false
return true