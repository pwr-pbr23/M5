/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util file
import java io file
import java lang ref phantomreference
import java lang ref referencequeue
import java util collection
import java util vector
/**
* keeps track of files awaiting deletion, and deletes them when an associated marker
* object is reclaimed by the garbage collector.
* @author noel bergman
* @author martin cooper
* @version $id$
*/
public class filecleaner
/**
* queue of <code>tracker</code> instances being watched.
*/
private static referencequeue    tracker   q   new referencequeue
/**
* collection of <code>tracker</code> instances in existence.
*/
private static collection    tracker   trackers   new vector
/**
* the thread that will clean up registered files.
*/
private static thread reaper   new thread
/**
* run the reaper thread that will delete files as their associated marker objects
* are reclaimed by the garbage collector.
*/
public void run
for
tracker tracker   null
try
// wait for a tracker to remove.
tracker    tracker q remove
catch  exception e
continue
tracker delete
tracker clear
trackers remove tracker
/**
* the static initializer that starts the reaper thread.
*/
static
reaper setpriority thread max_priority
reaper setdaemon true
reaper start
/**
* track the specified file, using the provided marker, deleting the file when the
* marker instance is garbage collected.
* @param file the file to be tracked.
* @param marker the marker object used to track the file.
*/
public static void track file file  object marker
trackers add new tracker file  marker  q
/**
* track the specified file, using the provided marker, deleting the file when the
* marker instance is garbage collected.
* @param path the full path to the file to be tracked.
* @param marker the marker object used to track the file.
*/
public static void track string path  object marker
trackers add new tracker path  marker  q
/**
* retrieve the number of files currently being tracked, and therefore awaiting
* deletion.
* @return the number of files being tracked.
*/
public static int gettrackcount
return trackers size
/**
* inner class which acts as the reference for a file pending deletion.
*/
private static class tracker extends phantomreference
/**
* the full path to the file being tracked.
*/
private string path
/**
* constructs an instance of this class from the supplied parameters.
* @param file the file to be tracked.
* @param marker the marker object used to track the file.
* @param queue the queue on to which the tracker will be pushed.
*/
public tracker file file  object marker  referencequeue queue
this file getpath    marker  queue
/**
* constructs an instance of this class from the supplied parameters.
* @param path the full path to the file to be tracked.
* @param marker the marker object used to track the file.
* @param queue the queue on to which the tracker will be pushed.
*/
public tracker string path  object marker  referencequeue queue
super marker  queue
this path   path
/**
* deletes the file associated with this tracker instance.
* @return <code>true</code> if the file was deleted successfully;
*         <code>false</code> otherwise.
*/
public boolean delete
return new file path  delete