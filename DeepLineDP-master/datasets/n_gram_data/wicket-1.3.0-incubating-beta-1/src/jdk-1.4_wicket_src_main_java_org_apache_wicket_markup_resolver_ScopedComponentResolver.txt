/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket page
import org apache wicket markup componenttag
import org apache wicket markup iscopedcomponent
import org apache wicket markup markupstream
import org apache wicket markup html panel panel
/**
* implement a component resolver which walks up the component tree until a page
* or panel and tries to find a component with a matching wicket id, effectivly
* providing something like scoping for wicket id resolution.
* <p>
* note: this resolver is not activated by default. it has to be added by means of
* <code>application.getcomponentresolvers().add(new inheritcomponentresolver())
* to be activated.</code>.
* <p>
* example:
* <pre>
* mypage()
* {
*    add(new label("hidden-by-cont1","hidden"));
*    add(new label("global","can be everywhere")); //the intresting case
*
*    webmarkupcontainer cont1 = new webmarkupcontainer("cont1");
*    add(cont1);
*
*     cont1.add(new label("hidden-by-cont1","cont1 hides"));
*     cont1.add(new label("same-id","cont1 same-id"));
*
*     webmarkupcontainer cont2 = new webmarkupcontainer("cont2");
*     add(cont2);
*
*     cont2.add(new label("same-id","cont2 same-id"));
* }
* </pre>
* <pre>
* html:
* <html>
* <body>
*   <span wicket:id="hidden-by-cont1">prints: hidden</span>
*   <div wicket:id="cont1">
*     <span wicket:id="hidden-by-cont1">prints: cont1 hides</span>
*     <span wicket:id="same-id">prints: cont1 same-id</span>
*   </div>
*
*   <div wicket:id="cont2">
*     <span wicket:id="global">prints: can be everywhere</span>
*     <span wicket:id="same-id">prints: cont2 same-id</span>
*   </div>
* </pre>
*
* so you can use the same ids in the same page. if the containing containers
* are not in the same hierarchy-line nothing changes. a comp with the same id
* hides the one of the parent-container with the same id.
*
* @see org.apache.wicket.markupcontainer#istransparentresolver()
* @see org.apache.wicket.markup.resolver.parentresolver
*
* @author christian essl
* @author juergen donnerstag
*/
public class scopedcomponentresolver implements icomponentresolver
private static final long serialversionuid   1l
/**
* construct.
*/
public scopedcomponentresolver
super
/**
*
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(org.apache.wicket.markupcontainer,
*      org.apache.wicket.markup.markupstream, org.apache.wicket.markup.componenttag)
*/
public boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// try to find the component with the parent component.
final string id   tag getid
markupcontainer parent   container
while    parent instanceof page       parent instanceof panel      parent    null
parent   parent getparent
if  parent    null
return false
final component component   parent get id
if   component    null      component instanceof iscopedcomponent
iscopedcomponent sc    iscopedcomponent component
if  sc isrenderableinsubcontainers
component render markupstream
return true
return false