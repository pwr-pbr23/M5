/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import org apache wicket response
import org apache wicket wicketruntimeexception
import org apache wicket behavior abstractbehavior
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup markupexception
import org apache wicket markup markupstream
import org apache wicket markup tagutils
import org apache wicket markup wickettag
import org apache wicket markup html internal htmlheadercontainer
import org apache wicket response nullresponse
import org apache wicket util lang classes
/**
* a wicket internal helper class to handle wicket:head tags.
*
* @author juergen donnerstag
*/
public class containerwithassociatedmarkuphelper extends abstractbehavior
private static final long serialversionuid   1l
/** <wicket:head> is only allowed before <body>, </head>, <wicket:panel> etc. */
private boolean nomorewicketheadtagsallowed   false
/** the markup container the helper is associated with */
private final webmarkupcontainer container
/**
* @param container
*/
public containerwithassociatedmarkuphelper final iheaderpartcontainerprovider container
this container    webmarkupcontainer container
/**
* called by components like panel and border which have associated markup
* and which may have a &lt;wicket:head&gt; tag.
* <p>
* whereas 'this' might be a panel or border, the htmlheadercontainer
* parameter has been added to the page as a container for all headers any
* of its components might wish to contribute.
* <p>
* the headers contributed are rendered in the standard way.
*
* @param htmlcontainer
*            the htmlheadercontainer added to the page
*/
public final void renderheadfromassociatedmarkupfile final htmlheadercontainer htmlcontainer
// gracefully getassociatemarkupstream. throws no exception in case
// markup is not found
final markupstream markupstream   container getassociatedmarkupstream false
// no associated markup => no header section
if  markupstream    null
return
// position pointer at current (first) header
this nomorewicketheadtagsallowed   false
while  nextheadermarkup markupstream      1
class markupclass     wickettag markupstream gettag    getmarkupclass
if  markupclass    null
markupclass   markupstream getcontainerclass
// create a headerpartcontainer and associate the markup
final headerpartcontainer headerpart   getheaderpart markupclass  markupstream
getcurrentindex
if  headerpart    null
// a component's header section must only be added once,
// no matter how often the same component has been added
// to the page or any other container in the hierachy.
if  htmlcontainer oktorendercomponent headerpart getscope    headerpart getid
htmlcontainer autoadd headerpart
else
// todo performance: i haven't found a more efficient
// solution yet.
// already added but all the components in this header part
// must be touched (that they are rendered)
response response   container getrequestcycle   getresponse
try
container getrequestcycle   setresponse nullresponse getinstance
htmlcontainer autoadd headerpart
finally
container getrequestcycle   setresponse response
// position the stream after <wicket:head>
markupstream skipcomponent
/**
* gets the header part of the panel/border. returns null if it doesn't have
* a header tag.
*
* @param index
*            a unique index
* @param markupclass
*            the java class the wicket:head tag is directly associated with
* @return the header part for this panel/border or null if it doesn't have
*         a wicket:head tag.
*/
private final headerpartcontainer getheaderpart final class markupclass  final int index
// gracefully getassociatemarkupstream. throws no exception in case
// markup is not found
final markupstream markupstream   this container getassociatedmarkupstream false
// position markup stream at beginning of header tag
markupstream setcurrentindex index
// create a htmlheadercontainer for the header tag found
final markupelement element   markupstream get
if  element instanceof wickettag
final wickettag wtag    wickettag element
if   wtag isheadtag      true      wtag getnamespace      null
// found <wicket:head>
// create a unique id for the htmlheadercontainer to be
// created
final string headerid       classes simplename markupclass
this container getvariation         index
// create the header container and associate the markup with
// it
string scope   wtag getattributes   getstring
markupstream getwicketnamespace
final headerpartcontainer headercontainer     iheaderpartcontainerprovider this container
newheaderpartcontainer headerid  scope
headercontainer setmymarkupstream markupstream
headercontainer setrenderbodyonly true
// the container does have a header component
return headercontainer
throw new wicketruntimeexception
markupstream tostring
/**
* process next header markup fragment.
*
* @param associatedmarkupstream
* @return index or -1 when done
*/
private final int nextheadermarkup final markupstream associatedmarkupstream
// no associated markup => no header section
if  associatedmarkupstream    null
return  1
// scan the markup for <wicket:head>.
markupelement elem   associatedmarkupstream get
while  elem    null
if  elem instanceof wickettag
wickettag tag    wickettag elem
if  tag isopen      tag isheadtag
if  this nomorewicketheadtagsallowed    true
throw new markupexception
return associatedmarkupstream getcurrentindex
// wicket:head must be before border, panel or extend
else if  tag isopen
tag ispaneltag      tag isbordertag      tag isextendtag
this nomorewicketheadtagsallowed   true
else if  elem instanceof componenttag
componenttag tag    componenttag elem
// wicket:head must be before </head>
if  tag isclose      tagutils isheadtag tag
this nomorewicketheadtagsallowed   true
// wicket:head must be before <body>
else if  tag isopen      tagutils isbodytag tag
this nomorewicketheadtagsallowed   true
elem   associatedmarkupstream next
// no (more) wicket:head found
return  1