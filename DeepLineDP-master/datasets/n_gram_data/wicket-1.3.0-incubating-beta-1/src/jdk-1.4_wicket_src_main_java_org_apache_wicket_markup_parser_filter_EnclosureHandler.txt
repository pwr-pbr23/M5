/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import java util stack
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup wickettag
import org apache wicket markup html internal enclosure
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket markup resolver enclosureresolver
/**
* this is a markup inline filter. it identifies &lt;wicket:enclosure&gt; tags.
* if the 'child' attribute is empty it determines the wicket:id of the child
* component automatically by analysing the wicket component (in this case on
* one wicket component is allowed) in between the open and close tags. if the
* enclosure tag has a 'child' attribute like
* <code>&lt;wicket:enclosure child="xxx"&gt;</code> than more than just one
* wicket component inside the enclosure tags are allowed and the child
* component which determines the visibility of the enclosure is identified by
* the 'child' attribute value which must be equal to the relative child id
* path.
*
* @see enclosureresolver
* @see enclosure
*
* @author juergen donnerstag
*/
public final class enclosurehandler extends abstractmarkupfilter
/** the child attribute */
public static final string child_attribute
static
// register "wicket:enclosure"
wickettagidentifier registerwellknowntagname
/** stack of <wicket:enclosure> tags */
private stack   <componenttag>   stack
/** the id of the first wicket tag inside the enclosure */
private string childid
/**
* construct.
*/
public enclosurehandler
/**
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
*/
public final markupelement nexttag   throws parseexception
// get the next tag from the next markupfilter in the chain.
// if null, no more tags are available
final componenttag tag   nextcomponenttag
if  tag    null
return tag
final boolean iswickettag   tag instanceof wickettag
final boolean isenclosuretag   iswickettag      wickettag tag  isenclosuretag
// if wicket:enclosure
if  isenclosuretag
// if open tag, than put the tag onto the stack
if  tag isopen
if  this stack    null
this stack   new stack   <componenttag>
this stack push tag
// if close tag, than remove the tag from the stack and update
// the child attribute of the open tag if required
else if  tag isclose
if  this stack    null
throw new parseexception     tag tostring
tag getpos
// remove the open tag from the stack
componenttag lastenclosure    componenttag this stack pop
// if the child attribute has not been given by the user,
// than ...
if  this childid    null
lastenclosure put child_attribute  this childid
lastenclosure setmodified true
this childid   null
if  this stack size      0
this stack   null
else
throw new parseexception
tag tostring    tag getpos
// are we inside a wicket:enclosure tag?
else if   tag getid      null      iswickettag    false      stack    null
componenttag lastenclosure    componenttag this stack lastelement
// if the enclosure tag has no child attribute, than ...
if  lastenclosure getstring child_attribute     null
// we encountered more than one child component inside
// the enclosure and are not able to automatically
// determine the child component to delegate the
// isvisible() to => exception
if  this childid    null
throw new parseexception
tag
getpos
// remember the child id. the open tag will be updated
// once the close tag is found. see above.
this childid   tag getid
return tag