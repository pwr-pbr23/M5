/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket proxy
import java io invalidclassexception
import java io objectstreamexception
import java io serializable
import java lang reflect invocationhandler
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect proxy
import org apache wicket iclusterable
import org apache wicket model imodel
import net sf cglib proxy enhancer
import net sf cglib proxy methodinterceptor
import net sf cglib proxy methodproxy
/**
* a factory class that creates lazy init proxies given a type and a
* {@link iproxytargetlocator} used to retrieve the object the proxy will
* represent.
* <p>
* a lazy init proxy waits until the first method invocation before it uses the
* {@link iproxytargetlocator} to retrieve the object to which the method
* invocation will be forwarded.
* <p>
* this factory creates two kinds of proxies: a standard dynamic proxy when the
* specified type is an interface, and a cglib proxy when the specified type is
* a concrete class.
* <p>
* the general use case for such a proxy is to represent a dependency that
* should not be serialized with a wicket page or {@link imodel}. the solution
* is to serialize the proxy and the {@link iproxytargetlocator} instead of the
* dependency, and be able to look up the target object again when the proxy is
* deserialized and accessed. a good strategy for achieving this is to have a
* static lookup in the {@link iproxytargetlocator}, this keeps its size small
* and makes it safe to serialize.
* <p>
* example:
*
* <pre>
* class userservicelocator implements iproxytargetlocator
* {
*
* 	public static final iproxytargetlocator instance = new userservicelocator();
*
* 	object locateproxyobject()
* 	{
* 		myapplication app = (myapplication) application.get();
* 		return app.getuserservice();
* 	}
* }
*
* class userdetachablemodel extends loadablemodel
* {
* 	private userservice svc;
*
* 	private long userid;
*
* 	public userdetachablemodel(long userid, userservice svc)
* 	{
* 		this.userid = userid;
* 		this.svc = svc;
* 	}
*
* 	public object load()
* 	{
* 		return svc.loaduser(userid);
* 	}
* }
*
* userservice service = lazyinitproxyfactory.createproxy(userservice.class,
* 		userservicelocator.instance);
*
* userdetachablemodel model = new userdetachablemodel(10, service);
*
* </pre>
*
* the detachable model in the example above follows to good citizen pattern and
* is easy to unit test. these are the advantages gained through the use of the
* lazy init proxies.
*
* @author igor vaynberg (ivaynberg)
*
*/
public class lazyinitproxyfactory
/**
* create a lazy init proxy for the specified type. the target object will
* be located using the provided locator upon first method invocation.
*
* @param type
*            type that proxy will represent
*
* @param locator
*            object locator that will locate the object the proxy
*            represents
*
* @return lazily initializable proxy
*/
public static object createproxy class type  iproxytargetlocator locator
if  type isinterface
jdkhandler handler   new jdkhandler type  locator
return proxy newproxyinstance thread currentthread   getcontextclassloader
new class  type  serializable class  ilazyinitproxy class
iwritereplace class   handler
else
cglibinterceptor handler   new cglibinterceptor type  locator
enhancer e   new enhancer
e setinterfaces new class  serializable class  ilazyinitproxy class
iwritereplace class
e setsuperclass type
e setcallback handler
return e create
/**
* this interface is used to make the proxy forward writereplace() call to
* the handler instead of invoking it on itself. this allows us to serialize
* the replacement objet instead of the proxy itself in case the proxy
* subclass is deserialized on a vm that does not have it created.
*
* @see proxyreplacement
*
* @author igor vaynberg (ivaynberg)
*
*/
protected static interface iwritereplace
/**
* write replace method as defined by serializable
*
* @return object that will replace this object in serialized state
* @throws objectstreamexception
*/
object writereplace   throws objectstreamexception
/**
* object that replaces the proxy when it is serialized. upon
* deserialization this object will create a new proxy with the same
* locator.
*
* @author igor vaynberg (ivaynberg)
*
*/
static class proxyreplacement implements iclusterable
private iproxytargetlocator locator
private string type
/**
* constructor
*
* @param type
* @param locator
*/
public proxyreplacement string type  iproxytargetlocator locator
this type   type
this locator   locator
private object readresolve   throws objectstreamexception
class clazz
try
clazz   class forname type
catch  classnotfoundexception e
throw new invalidclassexception type
type
return lazyinitproxyfactory createproxy clazz  locator
/**
* method interceptor for proxies representing concrete object not backed by
* an interface. these proxies are representing by cglib proxies.
*
* @author igor vaynberg (ivaynberg)
*
*/
private static class cglibinterceptor implements methodinterceptor  ilazyinitproxy
serializable  iwritereplace
private iproxytargetlocator locator
private string typename
private transient object target
/**
* constructor
*
* @param type
*            class of the object this proxy was created for
*
* @param locator
*            object locator used to locate the object this proxy
*            represents
*/
public cglibinterceptor class type  iproxytargetlocator locator
super
this typename   type getname
this locator   locator
/**
* @see net.sf.cglib.proxy.methodinterceptor#intercept(java.lang.object,
*      java.lang.reflect.method, java.lang.object[],
*      net.sf.cglib.proxy.methodproxy)
*/
public object intercept object object  method method  object args
methodproxy proxy  throws throwable
if  isfinalizemethod method
// swallow finalize call
return null
else if  isequalsmethod method
return  equals args   ? boolean true   boolean false
else if  ishashcodemethod method
return new integer this hashcode
else if  istostringmethod method
return tostring
else if  iswritereplacemethod method
return writereplace
else if  method getdeclaringclass   equals ilazyinitproxy class
return getobjectlocator
if  target    null
target   locator locateproxytarget
return proxy invoke target  args
/**
* @see org.apache.wicket.proxy.ilazyinitproxy#getobjectlocator()
*/
public iproxytargetlocator getobjectlocator
return locator
/**
* @see org.apache.wicket.proxy.lazyinitproxyfactory.iwritereplace#writereplace()
*/
public object writereplace   throws objectstreamexception
return new proxyreplacement typename  locator
/**
* invocation handler for proxies representing interface based object. for
* interface backed objects dynamic jdk proxies are used.
*
* @author igor vaynberg (ivaynberg)
*
*/
private static class jdkhandler implements invocationhandler  ilazyinitproxy
serializable  iwritereplace
private iproxytargetlocator locator
private string typename
private transient object target
/**
* constructor
*
* @param type
*            class of object this handler will represent
*
* @param locator
*            object locator used to locate the object this proxy
*            represents
*/
public jdkhandler class type  iproxytargetlocator locator
super
this locator   locator
this typename   type getname
/**
* @see java.lang.reflect.invocationhandler#invoke(java.lang.object,
*      java.lang.reflect.method, java.lang.object[])
*/
public object invoke object proxy  method method  object args  throws throwable
if  isfinalizemethod method
// swallow finalize call
return null
else if  isequalsmethod method
return  equals args   ? boolean true   boolean false
else if  ishashcodemethod method
return new integer this hashcode
else if  istostringmethod method
return tostring
else if  method getdeclaringclass   equals ilazyinitproxy class
return getobjectlocator
else if  iswritereplacemethod method
return writereplace
if  target    null
target   locator locateproxytarget
try
return method invoke target  args
catch  invocationtargetexception e
throw e gettargetexception
/**
* @see org.apache.wicket.proxy.ilazyinitproxy#getobjectlocator()
*/
public iproxytargetlocator getobjectlocator
return locator
/**
* @see org.apache.wicket.proxy.lazyinitproxyfactory.iwritereplace#writereplace()
*/
public object writereplace   throws objectstreamexception
return new proxyreplacement typename  locator
/**
* checks if the method is derived from object.equals()
*
* @param method
*            method being tested
* @return true if the method is derived from object.equals(), false
*         otherwise
*/
protected static boolean isequalsmethod method method
return method getreturntype      boolean class
method getparametertypes   length    1
method getparametertypes      object class
method getname   equals
/**
* checks if the method is derived from object.hashcode()
*
* @param method
*            method being tested
* @return true if the method is defined from object.hashcode(), false
*         otherwise
*/
protected static boolean ishashcodemethod method method
return method getreturntype      int class
method getparametertypes   length    0
method getname   equals
/**
* checks if the method is derived from object.tostring()
*
* @param method
*            method being tested
* @return true if the method is defined from object.tostring(), false
*         otherwise
*/
protected static boolean istostringmethod method method
return method getreturntype      string class
method getparametertypes   length    0
method getname   equals
/**
* checks if the method is derived from object.finalize()
*
* @param method
*            method being tested
* @return true if the method is defined from object.finalize(), false
*         otherwise
*/
protected static boolean isfinalizemethod method method
return method getreturntype      void class
method getparametertypes   length    0
method getname   equals
/**
* checks if the method is the writereplace method
*
* @param method
*            method being tested
* @return true if the method is the writereplace method, false otherwise
*/
protected static boolean iswritereplacemethod method method
return method getreturntype      object class
method getparametertypes   length    0
method getname   equals