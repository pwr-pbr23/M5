/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io file
import java io fileinputstream
import java io filenotfoundexception
import java io ioexception
import java io inputstream
import java net malformedurlexception
import java net url
import java util collections
import java util enumeration
import java util hashset
import java util set
import javax servlet requestdispatcher
import javax servlet servlet
import javax servlet servletcontext
import javax servlet servletexception
import javax servlet servletrequest
import javax servlet servletresponse
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket util value valuemap
/**
* mock implementation of the servlet context for testing purposes. this
* implementation supports all of the standard context methods except that
* request dispatching just indicates what is being dispatched to, rather than
* doing the actual dispatch.
* <p>
* the context can be configured with a path parameter that should point to an
* absolute directory location that represents the place where the contents of
* the war bundle are located. setting this value allows all of the resource
* location functionality to work as in a fully functioning web application.
* this value is not set then not resource location functionality will work and
* instead null will always be returned.
*
* @author chris turner
*/
public class mockservletcontext implements servletcontext
private static final log log   logfactory getlog mockservletcontext class
private application application
private valuemap attributes   new valuemap
private valuemap initparameters   new valuemap
/** map of mime types */
private final valuemap mimetypes   new valuemap
private file webapproot
/**
* create the mock object. as part of the creation, the context ets the root
* directory where web application content is stored. this must be an
* absolute directory relative to where the tests are being executed. for
* example: <code>system.getproperty("user.dir") +
* "/src/webapp"</code>
*
* @param application
*            the application that this context is for
* @param path
*            the path to the root of the web application
*/
public mockservletcontext final application application  final string path
this application   application
webapproot   null
if  path    null
webapproot   new file path
if   webapproot exists       webapproot isdirectory
log warn     path
webapproot   null
// assume we're running in maven or an eclipse project created by maven,
// so the sessions directory will be created inside the target directory,
// and will be cleaned up with a mvn clean
attributes put    new file
mimetypes put
mimetypes put
mimetypes put
mimetypes put
mimetypes put
mimetypes put
mimetypes put
mimetypes put
/**
* add an init parameter.
*
* @param name
*            the parameter name
* @param value
*            the parameter value
*/
public void addinitparameter final string name  final string value
initparameters put name  value
// configuration methods
/**
* add a new recognised mime type.
*
* @param fileextension
*            the file extension (e.g. "jpg")
* @param mimetype
*            the mime type (e.g. "image/jpeg")
*/
public void addmimetype final string fileextension  final string mimetype
mimetypes put fileextension  mimetype
/**
* get an attribute with the given name.
*
* @param name
*            the attribute name
* @return the value, or null
*/
public object getattribute final string name
return attributes get name
/**
* get all of the attribute names.
*
* @return the attribute names
*/
public enumeration getattributenames
return collections enumeration attributes keyset
// servletcontext interface methods
/**
* get the context for the given url path
*
* @param name
*            the url path
* @return always returns this
*/
public servletcontext getcontext string name
return this
/**
* get the init parameter with the given name.
*
* @param name
*            the name
* @return the parameter, or null if no such parameter
*/
public string getinitparameter final string name
return initparameters getstring name
/**
* get the name of all of the init parameters.
*
* @return the init parameter names
*/
public enumeration getinitparameternames
return collections enumeration initparameters keyset
/**
* @return always 2
*/
public int getmajorversion
return 2
/**
* get the mime type for the given file. uses a hardcoded map of mime types
* set at initialisation time.
*
* @param name
*            the name to get the mime type for
* @return the mime type
*/
public string getmimetype final string name
int index   name lastindexof
if  index     1    index     name length     1
return null
else
return mimetypes getstring name substring index   1
/**
* @return always 3
*/
public int getminorversion
return 3
/**
* wicket does not use the requestdispatcher, so this implementation just
* returns a dummy value.
*
* @param name
*            the name of the servlet or jsp
* @return the dispatcher
*/
public requestdispatcher getnameddispatcher final string name
return getrequestdispatcher name
/**
* get the real file path of the given resource name.
*
* @param name
*            the name
* @return the real path or null
*/
public string getrealpath string name
if  webapproot    null
return null
if  name startswith
name   name substring 1
file f   new file webapproot  name
if   f exists
return null
else
return f getpath
/**
* wicket does not use the requestdispatcher, so this implementation just
* returns a dummy value.
*
* @param name
*            the name of the resource to get the dispatcher for
* @return the dispatcher
*/
public requestdispatcher getrequestdispatcher final string name
return new requestdispatcher
public void forward servletrequest servletrequest  servletresponse servletresponse
throws ioexception
servletresponse getwriter   write     name
public void include servletrequest servletrequest  servletresponse servletresponse
throws ioexception
servletresponse getwriter   write     name
/**
* get the url for a particular resource that is relative to the web app
* root directory.
*
* @param name
*            the name of the resource to get
* @return the resource, or null if resource not found
* @throws malformedurlexception
*             if the url is invalid
*/
public url getresource string name  throws malformedurlexception
if  webapproot    null
return null
if  name startswith
name   name substring 1
file f   new file webapproot  name
if   f exists
return null
else
return f touri   tourl
/**
* get an input stream for a particular resource that is relative to the web
* app root directory.
*
* @param name
*            the name of the resource to get
* @return the input stream for the resource, or null of resource is not
*         found
*/
public inputstream getresourceasstream string name
if  webapproot    null
return null
if  name startswith
name   name substring 1
file f   new file webapproot  name
if   f exists
return null
else
try
return new fileinputstream f
catch  filenotfoundexception e
e printstacktrace
return null
/**
* get the resource paths starting from the web app root directory and then
* relative to the the given name.
*
* @param name
*            the starting name
* @return the set of resource paths at this location
*/
public set getresourcepaths string name
if  webapproot    null
return new hashset
if  name startswith
name   name substring 1
if  name endswith
name   name substring 0  name length     1
string elements   null
if  name trim   length      0
elements   new string
else
elements   name split
file current   webapproot
for  int i   0  i < elements length  i
file files   current listfiles
boolean match   false
for  int f   0  f < files length  f
if  files getname   equals elements     files isdirectory
current   files
match   true
break
if   match
return null
file files   current listfiles
set result   new hashset
int striplength   webapproot getpath   length
for  int f   0  f < files length  f
string s   files getpath   substring striplength  replace
if  files isdirectory
s   s
result add s
return result
/**
* get the server info.
*
* @return the server info
*/
public string getserverinfo
return
/**
* not used - servlet spec requires that this always returns null.
*
* @param name
*            not used
* @return null
* @throws servletexception
*             not used
*/
public servlet getservlet string name  throws servletexception
return null
/**
* return the name of the servlet context.
*
* @return the name
*/
public string getservletcontextname
return application getname
/**
* not used - servlet spec requires that this always returns null.
*
* @return null
*/
public enumeration getservletnames
return null
/**
* not used - servlet spec requires that this always returns null.
*
* @return null
*/
public enumeration getservlets
return null
/**
* as part of testing we always log to the console.
*
* @param e
*            the exception to log
* @param msg
*            the message to log
*/
public void log exception e  string msg
log error msg  e
/**
* as part of testing we always log to the console.
*
* @param msg
*            the message to log
*/
public void log string msg
log info msg
/**
* as part of testing we always log to the console.
*
* @param msg
*            the message to log
* @param cause
*            the cause exception
*/
public void log string msg  throwable cause
log error msg  cause
/**
* remove an attribute with the given name.
*
* @param name
*            the name
*/
public void removeattribute final string name
attributes remove name
/**
* set an attribute.
*
* @param name
*            the name of the attribute
* @param o
*            the value
*/
public void setattribute final string name  final object o
attributes put name  o