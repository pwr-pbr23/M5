/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import java util hashmap
import java util hashset
import java util map
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket page
import org apache wicket pageparameters
import org apache wicket resourcereference
import org apache wicket wicketruntimeexception
import org apache wicket application iclassresolver
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html packageresource
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html link bookmarkablepagelink
import org apache wicket markup html link externallink
import org apache wicket markup parser filter wicketlinktaghandler
import org apache wicket protocol http requestutils
import org apache wicket util lang packages
import org apache wicket util string strings
/**
* the autolinkresolver is responsible to handle automatic link resolution. tags
* are marked "autolink" by the markupparser for all tags with href attribute,
* such as anchor and link tags with no explicit wicket id. e.g. &lt;a
* href="home.html"&gt;
* <p>
* if href points to a *.html file, a bookmarkablepagelink will automatically be
* created, except for absolut paths, where an externallink is created.
* <p>
* if href points to a *.html file, it resolves the given url by searching for a
* page class, either relative or absolute, specified by the href attribute of
* the tag. if relative the href url must be relative to the package containing
* the associated page. an exception is thrown if no page class was found.
* <p>
* if href is no *.html file a static reference to the resource is created.
*
* @see org.apache.wicket.markup.parser.filter.wicketlinktaghandler
*
* @author juergen donnerstag
* @author eelco hillenius
*/
public final class autolinkresolver implements icomponentresolver
/**
* abstract implementation that has a helper method for creating a resource
* reference.
*/
public static abstract class abstractautolinkresolverdelegate
implements
iautolinkresolverdelegate
/**
* creates a new auto component that references a package resource.
*
* @param container
*            the parent container
* @param autoid
*            the automatically generated id for the auto component
* @param pathinfo
*            the path info object that contains information about the
*            link reference
* @param attribute
*            the attribute to replace the value of
* @return a new auto component or null if the path was absolute
*/
protected final component newpackageresourcereferenceautocomponent
final markupcontainer container  final string autoid  final pathinfo pathinfo
final string attribute
if   pathinfo absolute
// href is relative. create a resource reference pointing at
// this file
// <wicket:head> components are handled differently. we can
// not use the container, because it is the container the
// header has been added to (e.g. the page). what we need
// however, is the component (e.g. a panel) which
// contributed it.
class clazz   container getmarkupstream   getcontainerclass
// however if the markup stream is a merged markup stream
// (inheritance),
// than we need the class of the markup file which contained the
// tag.
if  container getmarkupstream   gettag   getmarkupclass      null
clazz   container getmarkupstream   gettag   getmarkupclass
// create the component implementing the link
resourcereferenceautolink autolink   new resourcereferenceautolink autoid  clazz
pathinfo reference  attribute
if  autolink resourcereference    null
// if the resource reference is null, it means that it the
// reference was not found as a package resource
return autolink
// else we can't have absolute resource references, at least not at
// this time
// fall back on default processing
return null
/**
* autolink components delegate component resolution to their parent
* components. reason: autolink tags don't have wicket:id and users wouldn't
* know where to add the component to.
*
* @author juergen donnerstag
*/
public final static class autolinkbookmarkablepagelink extends bookmarkablepagelink
private static final long serialversionuid   1l
private final string anchor
/**
* when using <wicket:link> to let wicket lookup for pages and create
* the related links, it's not possible to change the "setautoenable"
* property, which defaults to true. this affects the prototype
* because, sometimes designers _want_ links to be enabled.
*/
public static boolean autoenable   true
/**
* construct
*
* @see bookmarkablepagelink#bookmarkablepagelink(string, class,
*      pageparameters)
*
* @param id
* @param pageclass
* @param parameters
* @param anchor
*/
public autolinkbookmarkablepagelink final string id  final class pageclass
final pageparameters parameters  final string anchor
super id  pageclass  parameters
this anchor   anchor
setautoenable autoenable
/**
* @see org.apache.wicket.markupcontainer#istransparentresolver()
*/
public boolean istransparentresolver
return true
/**
*
* @see org.apache.wicket.markup.html.link.bookmarkablepagelink#geturl()
*/
protected charsequence geturl
charsequence url   super geturl
if  anchor    null
url   url   anchor
return url
/**
* interface to delegate the actual resolving of auto components to.
*/
public static interface iautolinkresolverdelegate
/**
* returns a new auto component based on the pathinfo object. the auto
* component must have the autoid assigned as it's id. should return
* null in case the component could not be created as expected and the
* default resolving should take place.
*
* @param container
*            the parent container
* @param autoid
*            the automatically generated id for the auto component
* @param pathinfo
*            the path info object that contains information about the
*            link reference
* @return a new auto component or null in case this method couldn't
*         resolve to a proper auto component
*/
component newautocomponent final markupcontainer container  final string autoid
final pathinfo pathinfo
/**
* encapsulates different aspects of a path. for instance, the path
* <code>org.apache.wicket.markup.html.tree.tree/tree.css</code> has extension
* <code>css</code>, is relative (absolute == true) and has no page
* parameters.
*/
public static final class pathinfo
/** whether the reference is absolute. */
private final boolean absolute
/** an optional anchor like #top */
private final string anchor
/** the extension if any. */
private final string extension
/** the optional page parameters. */
private final pageparameters pageparameters
/** the path exluding any parameters. */
private final string path
/** the original reference (e.g the full value of a href attribute). */
private final string reference
/**
* construct.
*
* @param reference
*            the original reference (e.g the full value of a href
*            attribute)
*/
public pathinfo final string reference
this reference   reference
// if href contains url query parameters ..
string infopath
// get the query string
int querystringpos   reference indexof
if  querystringpos     1
final string querystring   reference substring querystringpos   1
pageparameters   new pageparameters
requestutils decodeparameters querystring  pageparameters
infopath   reference substring 0  querystringpos
else
pageparameters   null
infopath   reference
this absolute    infopath startswith       infopath startswith
// remove file extension, but remember it
string extension   null
int pos   infopath lastindexof
if  pos     1
extension   infopath substring pos   1
infopath   infopath substring 0  pos
string anchor   null
if  extension    null
pos   extension indexof
if  pos     1
anchor   extension substring pos
extension   extension substring 0  pos
this path   infopath
this extension   extension
this anchor   anchor
/**
* gets the anchor (e.g. #top)
*
* @return anchor
*/
public final string getanchor
return anchor
/**
* gets extension.
*
* @return extension
*/
public final string getextension
return extension
/**
* gets pageparameters.
*
* @return pageparameters
*/
public final pageparameters getpageparameters
return pageparameters
/**
* gets path.
*
* @return path
*/
public final string getpath
return path
/**
* gets reference.
*
* @return reference
*/
public final string getreference
return reference
/**
* gets absolute.
*
* @return absolute
*/
public final boolean isabsolute
return absolute
/**
* resolves to anchor/ link components.
*/
private static final class anchorresolverdelegate extends abstractautolinkresolverdelegate
/** the attribute to fetch. */
private static final string attribute
/**
* set of supported extensions for creating bookmarkable page links.
* anything that is not in this list will be handled as a resource
* reference.
*/
private final set supportedpageextensions   new hashset 4
/**
* construct.
*/
public anchorresolverdelegate
// initialize supported list of file name extension which'll create
// bookmarkable pages
supportedpageextensions add
supportedpageextensions add
supportedpageextensions add
supportedpageextensions add
/**
* @see org.apache.wicket.markup.resolver.autolinkresolver.iautolinkresolverdelegate#newautocomponent(org.apache.wicket.markupcontainer,
*      java.lang.string,
*      org.apache.wicket.markup.resolver.autolinkresolver.pathinfo)
*/
public component newautocomponent final markupcontainer container  final string autoid
pathinfo pathinfo
if   pathinfo extension    null
supportedpageextensions contains pathinfo extension
// obviously a href like href="mypkg.mylabel.html" will do as
// well. wicket will not throw an exception. it accepts it.
string infopath   strings replaceall pathinfo path        tostring
page page   container getpage
final iclassresolver defaultclassresolver   page getapplication
getapplicationsettings   getclassresolver
string classname
if   infopath startswith
// href is relative. resolve the url given relative to the
// current page
classname   packages extractpackagename page getclass          infopath
else
// href is absolute. if class with the same absolute path
// exists, use it. else don't change the href.
classname   infopath substring 1
try
final class clazz   defaultclassresolver resolveclass classname
return new autolinkbookmarkablepagelink autoid  clazz  pathinfo pageparameters
pathinfo anchor
catch  wicketruntimeexception ex
log warn     classname
// fall through
// make sure base markup pages (inheritance) are handled correct
markupcontainer parentwithcontainer   container findparentwithassociatedmarkup
if   parentwithcontainer instanceof page      infopath startswith
page getmarkupstream   ismergedmarkup
class clazz   container getmarkupstream   gettag   getmarkupclass
if  clazz    null
// href is relative. resolve the url given relative to
// the current page
classname   packages extractpackagename clazz        infopath
try
clazz   defaultclassresolver resolveclass classname
return new autolinkbookmarkablepagelink autoid  clazz  pathinfo
getpageparameters    pathinfo anchor
catch  wicketruntimeexception ex
log warn     classname
// fall through
else
// not a registered type for bookmarkable pages; create a link
// to a resource instead
return newpackageresourcereferenceautocomponent container  autoid  pathinfo
attribute
// fallthrough
return null
/**
* autolink components delegate component resolution to their parent
* components. reason: autolink tags don't have wicket:id and users wouldn't
* know where to add the component to.
*
* @author juergen donnerstag
*/
private final static class autolinkexternallink extends externallink
private static final long serialversionuid   1l
/**
* construct
*
* @param id
* @param href
*/
public autolinkexternallink final string id  final string href
super id  href
/**
* @see org.apache.wicket.markupcontainer#istransparentresolver()
*/
public boolean istransparentresolver
return true
/**
* resolver that returns the proper attribute value from a component tag
* reflecting a url reference such as src or href.
*/
private static interface itagreferenceresolver
/**
* gets the reference attribute value of the tag depending on the type
* of the tag. for instance, anchors use the <code>href</code>
* attribute but script and image references use the <code>src</code>
* attribute.
*
* @param tag
*            the component tag. not for modifcation.
* @return the tag value that constitutes the reference
*/
string getreference final componenttag tag
/**
* autolink component that points to a {@link resourcereference}. autolink
* component delegate component resolution to their parent components.
* reason: autolink tags don't have wicket:id and users wouldn't know where
* to add the component to.
*/
private final static class resourcereferenceautolink extends webmarkupcontainer
private static final long serialversionuid   1l
private final string attribute
/** resource reference */
private final resourcereference resourcereference
/**
* @param id
* @param clazz
* @param href
* @param attribute
*/
public resourcereferenceautolink final string id  final class clazz  final string href
final string attribute
super id
this attribute   attribute
// check whether it is a valid resource reference
if  packageresource exists clazz  href  getlocale    getstyle
// create the component implementing the link
resourcereference   new resourcereference clazz  href  getlocale    getstyle
else
// the resource does not exist. set to null and ignore when
// rendering.
resourcereference   null
/**
* @see org.apache.wicket.markupcontainer#istransparentresolver()
*/
public boolean istransparentresolver
return true
/**
* handles this link's tag.
*
* @param tag
*            the component tag
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected final void oncomponenttag final componenttag tag
// default handling for tag
super oncomponenttag tag
// only set the href attribute when the resource exists
if  resourcereference    null
// set href to link to this link's linkclicked method
charsequence url   getrequestcycle   urlfor resourcereference
// generate the href attribute
tag put attribute  strings replaceall url
/**
* resolves to {@link resourcereference} link components. typcically used
* for header contributions like javascript and css files.
*/
private static final class resourcereferenceresolverdelegate
extends
abstractautolinkresolverdelegate
private final string attribute
/**
* construct.
*
* @param attribute
*/
public resourcereferenceresolverdelegate final string attribute
this attribute   attribute
/**
* @see org.apache.wicket.markup.resolver.autolinkresolver.iautolinkresolverdelegate#newautocomponent(org.apache.wicket.markupcontainer,
*      java.lang.string,
*      org.apache.wicket.markup.resolver.autolinkresolver.pathinfo)
*/
public component newautocomponent final markupcontainer container  final string autoid
final pathinfo pathinfo
return newpackageresourcereferenceautocomponent container  autoid  pathinfo  attribute
/**
* resolver object that returns the proper attribute value from component
* tags.
*/
private static final class tagreferenceresolver implements itagreferenceresolver
/** the attribute to fetch. */
private final string attribute
/**
* construct.
*
* @param attribute
*            the attribute to fetch
*/
public tagreferenceresolver final string attribute
this attribute   attribute
/**
* gets the reference attribute value of the tag depending on the type
* of the tag. for instance, anchors use the <code>href</code>
* attribute but script and image references use the <code>src</code>
* attribute.
*
* @param tag
*            the component tag. not for modifcation.
* @return the tag value that constitutes the reference
*/
public string getreference final componenttag tag
return tag getattributes   getstring attribute
/**
* if no specific resolver is found, always use the href attribute for
* references.
*/
private static final tagreferenceresolver default_attribute_resolver   new tagreferenceresolver
/** logging */
private static final log log   logfactory getlog autolinkresolver class
private static final long serialversionuid   1l
/**
* autolink resolver delegates for constructing new autolinks reference
* keyed on tag name (such as &lt;script&gt; or &lt;a&gt;.
*/
private final map tagnametoautolinkresolverdelegates   new hashmap
/**
* resolver objects that know what attribute to read for getting the
* reference keyed on tag name (such as &lt;script&gt; or &lt;a&gt;.
*/
private final map tagnametotagreferenceresolvers   new hashmap
/**
* construct.
*/
public autolinkresolver
// register tag reference resolvers
tagreferenceresolver hreftagreferenceresolver   new tagreferenceresolver
tagreferenceresolver srctagreferenceresolver   new tagreferenceresolver
tagnametotagreferenceresolvers put    hreftagreferenceresolver
tagnametotagreferenceresolvers put    hreftagreferenceresolver
tagnametotagreferenceresolvers put    srctagreferenceresolver
tagnametotagreferenceresolvers put    srctagreferenceresolver
// register autolink resolver delegates
tagnametoautolinkresolverdelegates put    new anchorresolverdelegate
tagnametoautolinkresolverdelegates put
new resourcereferenceresolverdelegate
tagnametoautolinkresolverdelegates put    new resourcereferenceresolverdelegate
tagnametoautolinkresolverdelegates put    new resourcereferenceresolverdelegate
/**
* register (add or replace) a new resolver with the tagname and
* attributename. the resolver will be invoked each time an appropriate tag
* and attribute is found.
*
* @param tagname
*            the tag name
* @param attributename
*            the attribute name
* @param resolver
*            implements what to do based on the tag and the attribute
*/
public final void addtagreferenceresolver final string tagname  final string attributename
final iautolinkresolverdelegate resolver
tagreferenceresolver tagreferenceresolver   new tagreferenceresolver attributename
tagnametotagreferenceresolvers put tagname  tagreferenceresolver
tagnametoautolinkresolverdelegates put tagname  resolver
/**
* get the resolver registered for 'tagname'
*
* @param tagname
*            the tag's name
* @return the resolver found. null, if none registered
*/
public final iautolinkresolverdelegate getautolinkresolverdelegate final string tagname
return  iautolinkresolverdelegate tagnametoautolinkresolverdelegates get tagname
/**
* automatically creates a bookmarkablepagelink component.
*
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer,
*      markupstream, componenttag)
*
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @param container
*            the container parsing its markup
* @return true, if componentid was handle by the resolver. false, otherwise
*/
public final boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// must be marked as autolink tag
if  tag isautolinkenabled
// try to find the page matching the href
// note: to not use tag.getid() because it will be modified while
// resolving the link and hence the 2nd render will fail.
final component link   resolveautomaticlink container
wicketlinktaghandler autolink_id  tag
// add the link to the container
container autoadd link
if  log isdebugenabled
log debug     link
// tell the container, we resolved the id
return true
// we were not able to resolve the id
return false
/**
* resolves the given tag's page class and page parameters by parsing the
* tag component name and then searching for a page class at the absolute or
* relative url specified by the href attribute of the tag.
* <p>
* none html references are treated similar.
*
* @param container
*            the container where the link is
* @param id
*            the name of the component
* @param tag
*            the component tag
* @return a bookmarkablepagelink to handle the href
*/
private final component resolveautomaticlink final markupcontainer container  final string id
final componenttag tag
final page page   container getpage
// make the id (page-)unique
final string autoid   id   integer tostring page getautoindex
// get the tag name, which is something like 'a' or 'script'
final string tagname   tag getname
// by setting the component name, the tag becomes a wicket component
// tag, which must have a associated component.
tag setid autoid
// get the reference resolver
itagreferenceresolver referenceresolver    itagreferenceresolver tagnametotagreferenceresolvers
get tagname
if  referenceresolver    null
// fallback on default
referenceresolver   default_attribute_resolver
// get the reference, which is typically the value of e.g. a href or src
// attribute
string reference   referenceresolver getreference tag
// create the path info object
pathinfo pathinfo   new pathinfo reference
// now get the resolver delegate
iautolinkresolverdelegate autolinkresolverdelegate    iautolinkresolverdelegate tagnametoautolinkresolverdelegates
get tagname
component autocomponent   null
if  autolinkresolverdelegate    null
autocomponent   autolinkresolverdelegate newautocomponent container  autoid  pathinfo
if  autocomponent    null
// resolving didn't have the desired result or there was no delegate
// found; fallback on the default resolving which is a simple
// component that leaves the tag unchanged
autocomponent   new autolinkexternallink autoid  pathinfo reference
return autocomponent