/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket application
import java io ioexception
import java net url
import java net urlclassloader
import java util arraylist
import java util enumeration
import java util hashset
import java util iterator
import java util list
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket util file file
import org apache wicket util listener ichangelistener
import org apache wicket util time duration
import org apache wicket util watch modificationwatcher
/**
* custom classloader that reverses the classloader lookups, and that is able to
* notify a listener when a class file is changed.
*
* @author <a href="mailto:jbq@apache.org">jean-baptiste quenot</a>
*/
public class reloadingclassloader extends urlclassloader
private static final log log   logfactory getlog reloadingclassloader class
private static final set urls   new hashset
private static final list patterns   new arraylist
protected boolean tryclasshere string name
// don't include classes in the java or javax.servlet package
if   name    null     name startswith       name startswith
return false
// scan includes, then excludes
boolean tryhere
// if no explicit includes, try here
if  patterns    null    patterns size      0
tryhere   true
else
// see if it matches include patterns
tryhere   false
iterator includesiterator   patterns iterator
while  includesiterator hasnext
string rawpattern    string  includesiterator next
if  rawpattern length  < 1
continue
boolean isinclude   rawpattern substring 0  1  equals
string pattern   rawpattern substring 1
if  wildcardmatcherhelper match pattern  name     null
tryhere   isinclude
return tryhere
/**
* include a pattern
*
* @param pattern the pattern to include
*/
public static void includepattern string pattern
patterns add   pattern
/**
* exclude a pattern
*
* @param pattern the pattern to exclude
*/
public static void excludepattern string pattern
patterns add   pattern
/**
* returns the list of all configured inclusion or exclusion patterns
*
* @return list of patterns as string
*/
public static list getpatterns
return patterns
/**
* add the location of a directory containing class files
*
* @param url
*            the url for the directory
*/
public static void addlocation url url
urls add url
/**
* returns the list of all configured locations of directories containing
* class files
*
* @return list of locations as url
*/
public static set getlocations
return urls
/**
* add all the url locations we can find for the provided class loader
*
* @param loader
*            class loader
*/
private static void addclassloaderurls classloader loader
if  loader    null
final enumeration resources
try
resources   loader getresources
catch  ioexception e
throw new runtimeexception e
while  resources hasmoreelements
url location    url resources nextelement
reloadingclassloader addlocation location
private ichangelistener listener
private duration pollfrequency   duration seconds 3
private modificationwatcher watcher
static
addclassloaderurls reloadingclassloader class getclassloader
excludepattern
includepattern
/**
* create a new reloading classloader from a list of urls, and initialize
* the modificationwatcher to detect class file modifications
*
* @param urls
*            the list of urls where to lookup class files
* @param parent
*            the parent classloader in case the class file cannot be loaded
*            from the above locations
*/
public reloadingclassloader classloader parent
super new url     parent
// probably doubles from this class, but just in case
addclassloaderurls parent
for  iterator i   urls iterator    i hasnext
addurl  url i next
this watcher   new modificationwatcher pollfrequency
/**
* gets a resource from this <code>classloader</class>.  if the
* resource does not exist in this one, we check the parent.
* please note that this is the exact opposite of the
* <code>classloader</code> spec.  we use it to work around
* inconsistent class loaders from third party vendors.
*
* @param name of resource
*/
public final url getresource final string name
url resource   findresource name
classloader parent   this getparent
if  resource    null    parent    null
resource   parent getresource name
return resource
/**
* loads the class from this <code>classloader</class>.  if the
* class does not exist in this one, we check the parent.  please
* note that this is the exact opposite of the
* <code>classloader</code> spec.  we use it to load the class
* from the same classloader as wicketfilter or wicketservlet.
* when found, the class file is watched for modifications.
*
* @param     name the name of the class
* @param     resolve if <code>true</code> then resolve the class
* @return    the resulting <code>class</code> object
* @exception classnotfoundexception if the class could not be found
*/
public final class loadclass string name  boolean resolve  throws classnotfoundexception
// first check if it's already loaded
class clazz   findloadedclass name
if  clazz    null
final classloader parent   getparent
if  tryclasshere name
try
clazz   findclass name
watchformodifications clazz
catch  classnotfoundexception cnfe
if  parent    null
// propagate exception
throw cnfe
if  clazz    null
if  parent    null
throw new classnotfoundexception name
else
// will throw a cfne if not found in parent
clazz   parent loadclass name
if  resolve
resolveclass clazz
return clazz
/**
* sets the listener that will be notified when a class changes
*
* @param listener
*            the listener to notify upon class change
*/
public void setlistener ichangelistener listener
this listener   listener
/**
* watch changes of a class file by locating it in the list of location urls
* and adding the corresponding file to the modificationwatcher
*
* @param clz
*            the class to watch
*/
private void watchformodifications class clz
// watch class in the future
iterator locationsiterator   urls iterator
file clzfile   null
while  locationsiterator hasnext
// fixme only works for directories, but jars etc could be checked
// as well
url location    url locationsiterator next
string clzlocation   location getfile     clz getname   replaceall
log debug     clzlocation
clzfile   new file clzlocation
final file finalclzfile   clzfile
if  clzfile exists
log info     clzfile
watcher add clzfile  new ichangelistener
public void onchange
log info     finalclzfile
try
listener onchange
finally
// if an error occurs when the listener is notified,
// remove the watched object to avoid rethrowing the
// exception at next check
// fixme check if class file has been deleted
watcher remove finalclzfile
break
else
log debug     clzfile
if  clzfile    null     clzfile exists
log debug     clz getname