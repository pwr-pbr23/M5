/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java io ioexception
import java io inputstream
import java io serializable
import java net url
import java util arraylist
import java util enumeration
import java util hashmap
import java util iterator
import java util list
import java util map
import java util properties
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application icomponentinstantiationlistener
import org apache wicket markup markupcache
import org apache wicket markup html image resource defaultbuttonimageresourcefactory
import org apache wicket markup parser filter wicketmessagetaghandler
import org apache wicket markup resolver autocomponentresolver
import org apache wicket markup resolver enclosureresolver
import org apache wicket markup resolver fragmentresolver
import org apache wicket markup resolver htmlheaderresolver
import org apache wicket markup resolver markupinheritanceresolver
import org apache wicket markup resolver parentresolver
import org apache wicket markup resolver wicketcontainerresolver
import org apache wicket markup resolver wicketlinkresolver
import org apache wicket markup resolver wicketmessageresolver
import org apache wicket protocol http irequestlogger
import org apache wicket protocol http requestlogger
import org apache wicket session isessionstore
import org apache wicket settings iapplicationsettings
import org apache wicket settings idebugsettings
import org apache wicket settings iexceptionsettings
import org apache wicket settings iframeworksettings
import org apache wicket settings imarkupsettings
import org apache wicket settings ipagesettings
import org apache wicket settings irequestcyclesettings
import org apache wicket settings irequestloggersettings
import org apache wicket settings iresourcesettings
import org apache wicket settings isecuritysettings
import org apache wicket settings isessionsettings
import org apache wicket settings settings
import org apache wicket util file iresourcefinder
import org apache wicket util lang classes
import org apache wicket util lang objects
import org apache wicket util time duration
/**
* base class for all wicket applications. to create a wicket application, you
* generally should <i>not </i> directly subclass this class. instead, you will
* want to subclass some subclass of application, like webapplication, which is
* appropriate for the protocol and markup type you are working with.
* <p>
* application has the following interesting features / attributes:
* <ul>
* <li><b>name </b>- the application's name, which is the same as its class
* name.
*
* <li><b>home page </b>- the application's home page class. subclasses must
* override gethomepage() to provide this property value.
*
* <li><b>settings </b>- application settings are partitioned into sets of
* related settings using interfaces in the org.apache.wicket.settings package.
* these interfaces are returned by the following methods, which should be used
* to configure framework settings for your application:
* getapplicationsettings(), getdebugsettings(), getexceptionsettings(),
* getmarkupsettings(), getpagesettings(), getrequestcyclesettings(),
* getsecuritysettings and getsessionsettings(). these settings are configured
* by default through the constructor or internalinit methods. default the
* application is configured for development. you can configure this globally to
* deployment or override specific settings by implementing the init() method.
*
* <li><b>shared resources </b>- resources added to an application's
* sharedresources have application-wide scope and can be referenced using a
* logical scope and a name with the resourcereference class. resourcereferences
* can then be used by multiple components in the same application without
* additional overhead (beyond the resourcereference instance held by each
* referee) and will yield a stable url, permitting efficient browser caching of
* the resource (even if the resource is dynamically generated). resources
* shared in this manner may also be localized. see
* {@link org.apache.wicket.resourcereference} for more details.
*
* <li><b>session factory </b>- the application subclass webapplication
* supplies an implementation of getsessionfactory() which returns an
* implementation of isessionfactory that creates websession session objects
* appropriate for web applications. you can (and probably will want to)
* override getsessionfactory() to provide your own session factory that creates
* session instances of your own application-specific subclass of websession.
*
* </ul>
*
* @see org.apache.wicket.protocol.http.webapplication
* @author jonathan locke
*/
public abstract class application
/** configuration constant for the 2 types */
public static final string configuration
/**
* configuration type constant for getting the context path out of the
* web.xml
*/
public static final string contextpath
/** configuration type constant for deployment */
public static final string deployment
/** configuration type constant for development */
public static final string development
/**
* applications keyed on the {@link #getapplicationkey()} so that they can
* be retrieved even without being in a request/ being set in the thread
* local (we need that e.g. for when we are in a destruction thread).
*/
private static final map applicationkeytoapplication   new hashmap 1
/** thread local holder of the application object. */
private static final threadlocal current   new threadlocal
/** log. */
private static final log log   logfactory getlog application class
/**
* checks if the <code>application</code> threadlocal is set in this
* thread
*
* @return true if {@link application#get()} can return the instance of
*         application, false otherwise
*/
public static boolean exists
return current get      null
/**
* get application for current thread.
*
* @return the current thread's application
*/
public static application get
final application application    application current get
if  application    null
throw new wicketruntimeexception
thread currentthread   getname
return application
/**
* gets the application based on the application key of that application.
* this method is not meant intended for framework clients.
*
* @param applicationkey
*            the unique key of the application within a certain context
*            (e.g. a web application)
* @return the application
* @throws illegalargumentexception
*             when no application was found with the provided key
*/
public static application get string applicationkey
application application    application applicationkeytoapplication get applicationkey
return application
/**
* @return true if the current thread is attached to an application.
*/
public static boolean isattached
return current get      null
/**
* this method is not part of the wicket public api. do not use it.
*
* @param application
*            the current application or null for this thread
*/
public static void set final application application
if  application    null
throw new illegalargumentexception
current set application
/**
* this method is not part of the wicket public api. do not use it.
*/
public static void unset
current set null
/** list of {@link icomponentinstantiationlistener}s. */
private icomponentinstantiationlistener componentinstantiationlisteners   new icomponentinstantiationlistener
/** record what the configuration is, so that we can query for it later. */
private string configurationtype
/** list of initializers. */
private list initializers   new arraylist
/** markup cache for this application */
private final markupcache markupcache
/** application level meta data. */
private metadataentry metadata
/** name of application subclass. */
private final string name
/** the session facade. */
private isessionstore sessionstore
/** request logger instance. */
private irequestlogger requestlogger
/** settings for this application. */
private settings settings
/** can the settings object be set/used. */
private boolean settingsaccessible
/** shared resources for this application */
private final sharedresources sharedresources
/**
* constructor. <strong>use {@link #init()} for any configuration of your
* application instead of overriding the constructor.</strong>
*/
public application
// create name from subclass
this name   classes simplename getclass
// construct markup cache for this application
this markupcache   new markupcache this
// create shared resources repository
this sharedresources   new sharedresources this
// install default component instantiation listener that uses
// authorization strategy to check component instantiations.
addcomponentinstantiationlistener new icomponentinstantiationlistener
/**
* @see org.apache.wicket.application.icomponentinstantiationlistener#oninstantiation(org.apache.wicket.component)
*/
public void oninstantiation final component component
// if component instantiation is not authorized
if   session get   getauthorizationstrategy   isinstantiationauthorized
component getclass
// then call any unauthorized component instantiation
// listener
getsecuritysettings   getunauthorizedcomponentinstantiationlistener
onunauthorizedinstantiation component
/**
* adds a component instantiation listener. this method should typicaly only
* be called during application startup; it is not thread safe.
* <p>
* note: wicket does not guarantee the execution order of added listeners
*
* @param listener
*            the listener to add
*/
public final void addcomponentinstantiationlistener
final icomponentinstantiationlistener listener
if  listener    null
throw new illegalargumentexception
// if an instance of this listener is already present ignore this call
for  int i   0  i < componentinstantiationlisteners length  i
if  listener    componentinstantiationlisteners
return
final icomponentinstantiationlistener newlisteners   new icomponentinstantiationlistener
system arraycopy componentinstantiationlisteners  0  newlisteners  0
componentinstantiationlisteners length
newlisteners   listener
componentinstantiationlisteners   newlisteners
/**
* convenience method that sets application settings to good defaults for
* the given configuration type (either development or deployment).
*
* @param configurationtype
*            the configuration type (either development or deployment)
* @see org.apache.wicket.application#configure(string, iresourcefinder)
*/
public final void configure final string configurationtype
configure configurationtype   iresourcefinder null
/**
* configures application settings to good defaults for the given
* configuration type (either development or deployment).
*
* @param configurationtype
*            the configuration type. must currently be either development
*            or deployment. currently, if the configuration type is
*            development, resources are polled for changes, component usage
*            is checked, wicket tags are not stripped from ouput and a
*            detailed exception page is used. if the type is deployment,
*            component usage is not checked, wicket tags are stripped from
*            output and a non-detailed exception page is used to display
*            errors.
* @param resourcefinder
*            resource finder for looking up resources
*/
public final void configure final string configurationtype  final iresourcefinder resourcefinder
this configurationtype   configurationtype
if  resourcefinder    null
getresourcesettings   setresourcefinder resourcefinder
// as long as this is public api the developermenat and deployment mode
// should counter act each other for all properties.
if  development equalsignorecase configurationtype
getresourcesettings   setresourcepollfrequency duration one_second
getdebugsettings   setcomponentusecheck true
getmarkupsettings   setstripwickettags false
getexceptionsettings   setunexpectedexceptiondisplay
iexceptionsettings show_exception_page
getdebugsettings   setajaxdebugmodeenabled true
getresourcesettings   setstripjavascriptcommentsandwhitespace false
else if  deployment equalsignorecase configurationtype
getresourcesettings   setresourcepollfrequency null
getdebugsettings   setcomponentusecheck false
getmarkupsettings   setstripwickettags true
getexceptionsettings   setunexpectedexceptiondisplay
iexceptionsettings show_internal_error_page
getdebugsettings   setajaxdebugmodeenabled false
getresourcesettings   setstripjavascriptcommentsandwhitespace true
else
throw new illegalargumentexception
development  deployment
/**
* convenience method that sets application settings to good defaults for
* the given configuration type (either development or deployment).
*
* @param configurationtype
*            the configuration type (either development or deployment)
* @param resourcefolder
*            folder for polling resources
*/
public final void configure final string configurationtype  final string resourcefolder
configure configurationtype
if  resourcefolder    null
getresourcesettings   addresourcefolder resourcefolder
/**
* gets the unique key of this application within a given context (like a
* web application). not intended for framework clients.
*
* @return the unique key of this application
*/
public abstract string getapplicationkey
/**
* @return application's application-wide settings
* @see iapplicationsettings
* @since 1.2
*/
public iapplicationsettings getapplicationsettings
return getsettings
/**
* gets the configuration mode that is currently set, either
* {@link #development} or {@link #deployment}.
*
* @return configuration
* @since 1.2.3
*/
public string getconfigurationtype
return configurationtype
/**
* @return application's debug related settings
* @see idebugsettings
* @since 1.2
*/
public idebugsettings getdebugsettings
return getsettings
/**
* @return application's exception handling settings
* @see iexceptionsettings
* @since 1.2
*/
public iexceptionsettings getexceptionsettings
return getsettings
/**
* @return wicket framework settings
* @see iframeworksettings
* @since 1.2
*/
public iframeworksettings getframeworksettings
return getsettings
/**
* application subclasses must specify a home page class by implementing
* this abstract method.
*
* @return home page class for this application
*/
public abstract class gethomepage
/**
* this method is not part of the wicket public api. do not use it.
*
* @return the markup cache associated with the application
*/
public final markupcache getmarkupcache
return this markupcache
/**
* @return application's markup related settings
* @see imarkupsettings
* @since 1.2
*/
public imarkupsettings getmarkupsettings
return getsettings
/**
* gets metadata for this application using the given key.
*
* @param key
*            the key for the data
* @return the metadata
* @see metadatakey
*/
public final serializable getmetadata final metadatakey key
return key get metadata
/**
* gets the name of this application.
*
* @return the application name.
*/
public final string getname
return name
/**
* @return application's page related settings
* @see ipagesettings
* @since 1.2
*/
public ipagesettings getpagesettings
return getsettings
/**
* @return application's request cycle related settings
* @see idebugsettings
* @since 1.2
*/
public irequestcyclesettings getrequestcyclesettings
return getsettings
/**
* @return request cycle factory for this kind of session.
*/
protected abstract irequestcyclefactory getrequestcyclefactory
/**
* gets the {@link requestlogger}.
*
* @return the requestlogger
*/
public final irequestlogger getrequestlogger
if  getrequestloggersettings   isrequestloggerenabled
if  requestlogger    null
requestlogger   newrequestlogger
else
requestlogger   null
return requestlogger
/**
* @return application's resources related settings
* @see iresourcesettings
* @since 1.3
*/
public irequestloggersettings getrequestloggersettings
return getsettings
/**
* @return application's resources related settings
* @see iresourcesettings
* @since 1.2
*/
public iresourcesettings getresourcesettings
return getsettings
/**
* @return application's security related settings
* @see isecuritysettings
* @since 1.2
*/
public isecuritysettings getsecuritysettings
return getsettings
/**
* @return application's session related settings
* @see isessionsettings
* @since 1.2
*/
public isessionsettings getsessionsettings
return getsettings
/**
* gets the facade object for working getting/ storing session instances.
*
* @return the session facade
*/
public final isessionstore getsessionstore
return sessionstore
/**
* gets the shared resources.
*
* @return the sharedresources for this application.
*/
public final sharedresources getsharedresources
return sharedresources
/**
* this method is not part of the wicket public api. do not call.
*
* initializes wicket components.
*/
public final void initializecomponents
// load any wicket properties files we can find
try
// load properties files used by all libraries
final enumeration resources   getclass   getclassloader   getresources
while  resources hasmoreelements
inputstream in   null
try
final url url    url resources nextelement
final properties properties   new properties
in   url openstream
properties load in
load properties
finally
if  in    null
in close
catch  ioexception e
throw new wicketruntimeexception    e
// now call any initializers we read
callinitializers
/**
* this method is not part of the wicket public api. do not call.
*
* @param target
*/
public void logeventtarget irequesttarget target
/**
* this method is not part of the wicket public api. do not call.
*
* @param requesttarget
*/
public void logresponsetarget irequesttarget requesttarget
/**
* removes a component instantiation listener. this method should typicaly
* only be called during application startup; it is not thread safe.
*
* @param listener
*            the listener to remove
*/
public final void removecomponentinstantiationlistener
final icomponentinstantiationlistener listener
final icomponentinstantiationlistener listeners   componentinstantiationlisteners
final int len   listeners length
if  listener    null    len > 0
int pos   0
for  pos   0  pos < len  pos
if  listener    listeners
break
if  pos < len
listeners   listeners
final icomponentinstantiationlistener newlisteners   new icomponentinstantiationlistener
system arraycopy listeners  0  newlisteners  0  newlisteners length
componentinstantiationlisteners   newlisteners
/**
* sets the metadata for this application using the given key. if the
* metadata object is not of the correct type for the metadata key, an
* illegalargumentexception will be thrown. for information on creating
* metadatakeys, see {@link metadatakey}.
*
* @param key
*            the singleton key for the metadata
* @param object
*            the metadata object
* @throws illegalargumentexception
* @see metadatakey
*/
public final synchronized void setmetadata final metadatakey key  final serializable object
metadata   key set metadata  object
/**
* construct and add initializer from the provided class name.
*
* @param classname
*/
private final void addinitializer string classname
iinitializer initializer    iinitializer objects newinstance classname
if  initializer    null
initializers add initializer
/**
* @param properties
*            properties map with names of any library destroyers in it
*/
private final void calldestroyers
for  iterator i   initializers iterator    i hasnext
iinitializer initializer    iinitializer i next
if  initializer instanceof idestroyer
log info     getname         initializer
idestroyer initializer  destroy this
/**
* @param properties
*            properties map with names of any library destroyers in it
*/
private final void callinitializers
for  iterator i   initializers iterator    i hasnext
iinitializer initializer    iinitializer i next
log info     getname         initializer
initializer init this
/**
* this method is still here for backwards compatibility with 1.1 source
* code. the getxxxsettings() methods are now preferred. this method will be
* removed post 1.2 version.
*
* @return application settings
*
* @see application#getapplicationsettings()
* @see application#getdebugsettings()
* @see application#getexceptionsettings()
* @see application#getmarkupsettings()
* @see application#getpagesettings()
* @see application#getrequestcyclesettings()
* @see application#getresourcesettings()
* @see application#getsecuritysettings()
* @see application#getsessionsettings()
*/
private settings getsettings
if   settingsaccessible
throw new wicketruntimeexception
if  settings    null
settings   new settings this
return settings
/**
* @param properties
*            properties map with names of any library initializers in it
*/
private final void load final properties properties
addinitializer properties getproperty
addinitializer properties getproperty getname
/**
* called when wicket servlet is destroyed. overrides do not have to call
* super.
*/
protected void destroy
calldestroyers
/**
* gets the factory for creating session instances.
*
* @return factory for creating session instances
*/
protected abstract isessionfactory getsessionfactory
/**
* allows for initialization of the application by a subclass. <strong>use
* this method for any application setup instead of the constructor.</strong>
*/
protected void init
/**
* this method is not part of the wicket public api. do not call it.
*/
protected void internaldestroy
destroy
applicationkeytoapplication remove getapplicationkey
/**
* this method is not part of the wicket public api. do not override or
* call.
*
* internal initialization.
*/
protected void internalinit
settingsaccessible   true
ipagesettings pagesettings   getpagesettings
// install default component resolvers
pagesettings addcomponentresolver new parentresolver
pagesettings addcomponentresolver new autocomponentresolver
pagesettings addcomponentresolver new markupinheritanceresolver
pagesettings addcomponentresolver new htmlheaderresolver
pagesettings addcomponentresolver new wicketlinkresolver
pagesettings addcomponentresolver new wicketmessageresolver
pagesettings addcomponentresolver new wicketmessagetaghandler
pagesettings addcomponentresolver new fragmentresolver
pagesettings addcomponentresolver new enclosureresolver
pagesettings addcomponentresolver new wicketcontainerresolver
// install button image resource factory
getresourcesettings   addresourcefactory
new defaultbuttonimageresourcefactory
string applicationkey   getapplicationkey
applicationkeytoapplication put applicationkey  this
sessionstore   newsessionstore
/**
* creates a new request logger when requests logging is enabled.
*
* @return the new request logger
*
*/
protected irequestlogger newrequestlogger
return new requestlogger
/**
* creates a new session facade. is called once per application, and is
* typically not something clients reimplement.
*
* @return the session facade
*/
protected abstract isessionstore newsessionstore
/**
* notifies the registered component instantiation listeners of the
* construction of the provided component
*
* @param component
*            the component that is being instantiated
*/
final void notifycomponentinstantiationlisteners final component component
final int len   componentinstantiationlisteners length
for  int i   0  i < len  i
componentinstantiationlisteners oninstantiation component