/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree table
import javax swing tree treemodel
import javax swing tree treenode
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket markupcontainer
import org apache wicket resourcereference
import org apache wicket behavior abstractbehavior
import org apache wicket markup componenttag
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html basic label
import org apache wicket markup html panel fragment
import org apache wicket markup html tree abstracttree
import org apache wicket markup html tree defaultabstracttree
import org apache wicket markup html tree table columnlocation alignment
import org apache wicket model abstractreadonlymodel
import org apache wicket model imodel
import org apache wicket model model
/**
* treetable is a component that represents a grid with a tree. it's divided
* into columns. one of the columns has to be column derived from
* {@link abstracttreecolumn}.
*
* @author matej knopp
*/
public class treetable extends defaultabstracttree
/**
* callback for rendering tree node text.
*/
public static interface irendernodecallback extends iclusterable
/**
* renders the tree node to text.
*
* @param node
*            the tree node to render
* @return the tree node as text
*/
public string rendernode treenode node
/**
* represents a content of a cell in treecolumn (column containing the
* actual tree).
*
* @author matej knopp
*/
private class treefragment extends fragment
private static final long serialversionuid   1l
/**
* constructor.
*
*
* @param id
* @param node
* @param level
* @param rendernodecallback
*            the call back for rendering nodes
*/
public treefragment string id  final treenode node  int level
final irendernodecallback rendernodecallback
super id
add newindentation this     node  level
add newjunctionlink this        node
markupcontainer nodelink   newnodelink this     node
add nodelink
nodelink add newnodeicon nodelink     node
nodelink add new label    new abstractreadonlymodel
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.model.abstractreadonlymodel#getobject()
*/
public object getobject
return rendernodecallback rendernode node
/** reference to the css file. */
private static final resourcereference css   new resourcereference defaultabstracttree class
private static final long serialversionuid   1l
/**
* creates a tree cell for given node. this method is supposed to be used by
* treecolumns (columns that draw the actual tree).
*
* @param parent
*            parent component
*
* @param id
*            component id
*
* @param node
*            tree node for the row
*
* @param level
*            how deep is the node nested (for convenience)
*
* @param callback
*            used to get the display string
*
* @param table
*            tree table
*
* @return the tree cell
*/
public static component newtreecell markupcontainer parent  string id  treenode node
int level  irendernodecallback callback  treetable table
return table newtreepanel parent  id  node  level  callback
// columns of the treetable
private icolumn columns
/**
* creates the treetable for the given array of columns.
*
* @param id
* @param columns
*/
public treetable string id  icolumn columns
super id
init columns
/**
* creates the treetable for the given model and array of columns.
*
* @param id
*            the component id
* @param model
*            the tree model
* @param columns
*            the columns
*/
public treetable string id  imodel model  icolumn columns
super id  model
init columns
/**
* creates the treetable for the given treemodel and array of columns.
*
* @param id
*            the component id
* @param model
*            the tree model
* @param columns
*            the columns
*/
public treetable string id  treemodel model  icolumn columns
super id  model
init columns
private boolean hasleftcolumn
for  int i   0  i < columns length    i
if  columns getlocation   getalignment   equals alignment left
return true
return false
/**
* adds the header to the treetable.
*/
protected void addheader
// create the view for side columns
sidecolumnsview sidecolumns   new sidecolumnsview    null
add sidecolumns
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
if  column getlocation   getalignment      alignment left
column getlocation   getalignment      alignment right
component component   column newheader sidecolumns      i
sidecolumns add component
sidecolumns addcolumn column  component  null
// create the view for middle columns
middlecolumnsview middlecolumns   new middlecolumnsview    null
hasleftcolumn
add middlecolumns
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
if  column getlocation   getalignment      alignment middle
component component   column newheader middlecolumns      i
middlecolumns add component
middlecolumns addcolumn column  component  null
/**
* @see org.apache.wicket.markup.html.tree.defaultabstracttree#getcss()
*/
protected resourcereference getcss
return css
/**
* creates a new instance of the treefragment.
*
* @param parent
*            the parent component
* @param id
*            the component id
* @param node
*            the tree node
* @param level
*            the level of the tree row
* @param rendernodecallback
*            the node call back
* @return the tree panel
*/
protected component newtreepanel markupcontainer parent  string id  final treenode node
int level  irendernodecallback rendernodecallback
return new treefragment id  node  level  rendernodecallback
/**
* @see abstracttree#onbeforeattach()
*/
protected void onbeforeattach
// has the header been added yet?
if  get       null
// no. initialize columns first
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
column settreetable this
// add the tree table header
addheader
/**
* populates one row of the tree.
*
* @param item
*            the tree node component
* @param level
*            the current level
*/
protected void populatetreeitem webmarkupcontainer item  int level
final treenode node    treenode item getmodelobject
// add side columns
sidecolumnsview sidecolumns   new sidecolumnsview    node
item add sidecolumns
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
if  column getlocation   getalignment      alignment left
column getlocation   getalignment      alignment right
component component
// first try to create a renderable
irenderable renderable   column newcell node  level
if  renderable    null
// if renderable failed, try to create a regular
// component
component   column newcell sidecolumns      i  node  level
sidecolumns add component
else
component   null
sidecolumns addcolumn column  component  renderable
// add middle columns
middlecolumnsview middlecolumns   new middlecolumnsview    node
hasleftcolumn
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
if  column getlocation   getalignment      alignment middle
component component
// first try to create a renderable
irenderable renderable   column newcell node  level
if  renderable    null
// if renderable failed, try to create a regular
// component
component   column newcell middlecolumns      i  node  level
middlecolumns add component
else
component   null
middlecolumns addcolumn column  component  renderable
item add middlecolumns
// do distinguish between selected and unselected rows we add an
// behavior
// that modifies row css class.
item add new abstractbehavior
private static final long serialversionuid   1l
public void oncomponenttag component component  componenttag tag
super oncomponenttag component  tag
if  gettreestate   isnodeselected node
tag put
else
tag put
/**
* internal initialization. also checks if at least one of the columns is
* derived from abstracttreecolumn.
*
* @param columns
*            the columns
*/
private void init icolumn columns
boolean found   false
if  columns    null
for  int i   0  i < columns length  i
icolumn column   columns
if  column instanceof abstracttreecolumn
found   true
break
if  found    false
throw new illegalargumentexception
this columns   columns
// attach the javascript that resizes the header according to the body
// this is necessary to support fixed position header. the header does
// not
// scroll together with body. the body contains vertical scrollbar. the
// header width must be same as body content width, so that the columns
// are properly aligned.
add new label    new model
private static final long serialversionuid   1l
public object getobject
return
setescapemodelstrings false