/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java util locale
import java util map
import org apache wicket request irequestcodingstrategy
import org apache wicket request irequestcycleprocessor
import org apache wicket request requestparameters
/**
* base class for page request implementations allowing access to request
* parameters. a request has a url and a parameter map. you can retrieve the url
* of the request with geturl(). the entire parameter map can be retrieved via
* getparametermap(). individual parameters can be retrieved via
* getparameter(string). if multiple values are available for a given parameter,
* they can be retrieved via getparameters(string).
*
* @author jonathan locke
*/
public abstract class request
/** any page decoded for this request */
private page page
/** the type safe request parameters object for this request. */
private requestparameters requestparameters
/**
* construct.
*/
public request
/**
* an implementation of this method is only required if a subclass wishes to
* support sessions via url rewriting. this default implementation simply
* returns the url string it is passed.
*
* @param url
*            the url to decode
* @return the decoded url
*/
public string decodeurl final string url
return url
/**
* @return the locale for this request
*/
public abstract locale getlocale
/**
* @return any page for this request
*/
public page getpage
return page
/**
* gets a given (query) parameter by name.
*
* @param key
*            parameter name
* @return parameter value
*/
public abstract string getparameter final string key
/**
* gets a map of (query) parameters sent with the request.
*
* @return map of parameters
*/
public abstract map getparametermap
/**
* gets an array of multiple parameters by name.
*
* @param key
*            parameter name
* @return parameter values
*/
public abstract string getparameters final string key
/**
* @return path info for request
*/
public abstract string getpath
/**
* gets the relative (to some root) url (e.g. in a servlet environment, the
* url without the context path and without a leading '/'). use this method
* e.g. to load resources using the servlet context.
*
* @return request url
*/
public abstract string getrelativeurl
/**
* gets the request parameters object using the instance of
* {@link irequestcodingstrategy} of the provided request cycle processor.
*
* @return the request parameters object
*/
public final requestparameters getrequestparameters
// reused cached parameters
if  requestparameters    null
return requestparameters
// get the request encoder to decode the request parameters
irequestcycleprocessor processor   requestcycle get   getprocessor
final irequestcodingstrategy encoder   processor getrequestcodingstrategy
if  encoder    null
throw new wicketruntimeexception
processor
// decode the request parameters into a strongly typed parameters
// object that is to be used by the target resolving
try
requestparameters   encoder decode this
catch  runtimeexception re
// do set the parameters as it was parsed.
// else the error page will also error again (infinite loop)
requestparameters   new requestparameters
throw re
if  requestparameters    null
throw new wicketruntimeexception
encoder
return requestparameters
/**
* retrieves the absolute url of this request for local use.
*
* @return the absolute request url for local use
*/
public abstract string geturl
/**
* this method is not part of the wicket public api. do not call it.
*
* @param page
*            the page for this request
*/
public void setpage final page page
this page   page
/**
* a request can say if the current request should generated a new version number.
* if this returns true, then all the changes on a page that has versioning enabled
* is merged with the latest version. else it will just create a new version.
*
* @return true if the version must be merged with the previous latest.
*/
public boolean mergeversion
return false
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     geturl