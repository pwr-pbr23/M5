/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket behavior
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket markup componenttag
/**
* behaviors are kind of plug-ins for components. they allow to be added to a
* component and get essential events forwarded by the component. they can be
* bound to a concrete component (using the bind method is called when the
* behavior is attached), but they don't need to. they can modify the components
* markup by changing the rendered componenttag. behaviors can have their own
* models as well, and they are notified when these are to be detached by the
* component.
* <p>
* it is recommended that you extend from
* {@link org.apache.wicket.behavior.abstractbehavior} instead of directly implementing
* this interface.
* </p>
*
* @see org.apache.wicket.behavior.ibehaviorlistener
* @see org.apache.wicket.markup.html.iheadercontributor
* @see org.apache.wicket.behavior.abstractajaxbehavior
* @see org.apache.wicket.attributemodifier
*
* @author ralf ebert
* @author eelco hillenius
*/
public interface ibehavior extends iclusterable
/**
* called when a component is about to render.
*
* @param component
*            the component that has this behavior coupled
*/
void beforerender component component
/**
* bind this handler to the given component. this method is called by the
* host component immediately after this behavior is added to it. this
* method is useful if you need to do initialization based on the component
* it is attached and you can't wait to do it at render time. keep in mind
* that if you decide to keep a reference to the host component, it is not
* thread safe anymore, and should thus only be used in situations where you
* do not reuse the behavior for multiple components.
*
* @param component
*            the component to bind to
*/
void bind component component
/**
* provides for the ability to detach any models this behavior has. this
* method is called by the components which have this behavior attached to
* them when they are detaching their models themselves (ie after
* rendering). note that if you share a behavior between components, this
* method is called multiple times.
*
* @param component
*            the component that initiates the detachement of this behavior
*/
void detachmodel component component
/**
* in case an unexpected exception happened anywhere between
* oncomponenttag() and rendered(), onexception() will be called for any
* behavior. typically, if you clean up resources in
* {@link #rendered(component)}, you should do the same in the
* implementation of this method.
*
* @param component
*            the component that has a reference to this behavior and during
*            which processing the exception occured
* @param exception
*            the unexpected exception
*/
void exception component component  runtimeexception exception
/**
* this method returns false if the behaviour generates a callback url (for
* example ajax behaviours)
*
* @param component
* 			 the component that has this behavior coupled.
*
* @return boolean true or false.
*/
boolean getstatelesshint component component
/**
* called when a components is rendering and wants to render this behavior.
* if false is returned this behavior will be ignored.
*
* @param component
*            the component that has this behavior coupled
*
* @return true if this behaviour must be executed/rendered
*/
boolean isenabled component component
/**
* called any time a component that has this behavior registered is
* rendering the component tag.
*
* @param component
*            the component that renders this tag currently
* @param tag
*            the tag that is rendered
*/
void oncomponenttag component component  componenttag tag
/**
* called when a component that has this behavior coupled was rendered.
*
* @param component
*            the component that has this behavior coupled
*/
void rendered component component