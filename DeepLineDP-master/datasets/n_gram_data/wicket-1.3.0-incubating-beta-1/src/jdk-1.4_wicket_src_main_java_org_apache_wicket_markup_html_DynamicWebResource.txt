/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import java io bytearrayinputstream
import java io ioexception
import java io inputstream
import java util locale
import org apache wicket protocol http webresponse
import org apache wicket util resource iresourcestream
import org apache wicket util resource resourcestreamnotfoundexception
import org apache wicket util time time
/**
* an webresource subclass for dynamic resources (resources created
* programmatically).
*
* @author jonathan locke
* @author johan compagner
* @author gili tzabari
*/
public abstract class dynamicwebresource extends webresource
/**
* the resource state returned by the getresourcestate() method. this state
* needs to be thread-safe and its methods must return the same values no
* matter how many times they are invoked. a resourcestate may assume
* getparameters() will remain unchanged during its lifetime.
*
* @author jcompagner
*/
public static abstract class resourcestate
protected time lastmodifiedtime
/**
* @return the byte array for this resource
*/
public abstract byte getdata
/**
* @return the content type of this resource
*/
public abstract string getcontenttype
/**
* @return the last modified time of this resource
*/
public time lastmodifiedtime
if  lastmodifiedtime    null
lastmodifiedtime   time now
return lastmodifiedtime
/**
* @return the length of the data
*/
public int getlength
byte data   getdata
return data    null ? data length   0
/**
* the resource locale.
*/
private locale locale
/** the filename that will be set as the content-disposition header. */
private final string filename
/**
* creates a dynamic resource.
*/
public dynamicwebresource
this null null
/**
* creates a dynamic resource.
*
* @param filename
* 			  the filename that will be set as the content-disposition header.
*/
public dynamicwebresource string filename
this null filename
/**
* creates a dynamic resource from for the given locale
*
* @param locale
*            the locale of this resource
*/
public dynamicwebresource locale locale
this locale null
/**
* creates a dynamic resource from for the given locale
*
* @param locale
*            the locale of this resource
* @param filename
* 			  the filename that will be set as the content-disposition header.
*/
public dynamicwebresource locale locale  string filename
this locale   locale
this filename   filename
setcacheable false
/**
* @see org.apache.wicket.markup.html.webresource#setheaders(org.apache.wicket.protocol.http.webresponse)
*/
protected void setheaders webresponse response
super setheaders response
if filename    null
response setattachmentheader filename
/**
* returns the resource locale.
*
* @return the locale of this resource
*/
public locale getlocale
return locale
/**
* @return gets the resource to attach to the component.
*/
// this method is deliberately non-final. some users depend on it
public iresourcestream getresourcestream
return new iresourcestream
private static final long serialversionuid   1l
private locale locale   dynamicwebresource this getlocale
/** transient input stream to resource */
private transient inputstream inputstream   null
/**
* transient resourcestate of the resources, will always be deleted
* in the close
*/
private transient resourcestate data   null
/**
* @see org.apache.wicket.util.resource.iresourcestream#close()
*/
public void close   throws ioexception
if  inputstream    null
inputstream close
inputstream   null
data   null
/**
* @see org.apache.wicket.util.resource.iresourcestream#getcontenttype()
*/
public string getcontenttype
checkloaddata
return data getcontenttype
/**
* @see org.apache.wicket.util.resource.iresourcestream#getinputstream()
*/
public inputstream getinputstream   throws resourcestreamnotfoundexception
checkloaddata
if  inputstream    null
inputstream   new bytearrayinputstream data getdata
return inputstream
/**
* @see org.apache.wicket.util.watch.imodifiable#lastmodifiedtime()
*/
public time lastmodifiedtime
checkloaddata
return data lastmodifiedtime
/**
* @see org.apache.wicket.util.resource.iresourcestream#length()
*/
public long length
checkloaddata
return data getlength
/**
* @see org.apache.wicket.util.resource.iresourcestream#getlocale()
*/
public locale getlocale
return locale
/**
* @see org.apache.wicket.util.resource.iresourcestream#setlocale(java.util.locale)
*/
public void setlocale locale loc
locale   loc
/**
* check whether the data was loaded yet. if not, load it now.
*/
private void checkloaddata
if  data    null
data   getresourcestate
/**
* gets the byte array for our dynamic resource. if the subclass regenerates
* the data, it should set the lastmodifiedtime too. this ensures that
* resource caching works correctly.
*
* @return the byte array for this dynamic resource.
*/
protected abstract resourcestate getresourcestate