/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree table
import java util arraylist
import java util list
import javax swing tree treenode
import org apache wicket component
import org apache wicket requestcycle
import org apache wicket response
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html tree table columnlocation alignment
import org apache wicket markup html tree table columnlocation unit
/**
* class that renders cell of columns aligned to the left or to the right.
*
* @author matej knopp
*/
final class sidecolumnsview extends webmarkupcontainer
private static final long serialversionuid   1l
private final list columns   new arraylist
private final list components   new arraylist
private treenode node
private final list renderables   new arraylist
/**
* constructor.
*
* @param id
*            the component id
* @param node
*            the tree node
*/
public sidecolumnsview string id  treenode node
super id
setrenderbodyonly true
this node   node
/**
* adds a column to be rendered.
*
* @param column
*            the column to add
* @param component
*            the component
* @param renderable
*            the renderer
*/
public void addcolumn icolumn column  component component  irenderable renderable
if  column isvisible
// if the column is aligned to the left, just append it.
// otherwise we prepend it, because we want columns aligned to right
// to be rendered reverse order (because they will have set
// float:right
// in css, so they will be displayed in reverse order too).
if  column getlocation   getalignment      alignment left
columns add column
components add component
renderables add renderable
else
columns add 0  column
components add 0  component
renderables add 0  renderable
/**
* renders the columns.
*
* @param markupstream
*            the markup stream of this component
*/
protected void onrender final markupstream markupstream
final int markupstart   markupstream getcurrentindex
response response   requestcycle get   getresponse
boolean firstleft   true     whether there was no left column rendered
// yet
boolean rendered   false
for  int i   0  i < columns size      i
icolumn column    icolumn columns get i
component component    component components get i
irenderable renderable    irenderable renderables get i
// write wrapping markup
response write  b_
if  column getlocation   getalignment      alignment left    firstleft    true
// for the first left column we have different style class
// (without the left border)
response write  d_
firstleft   false
else
response write  c_
if  component    null
markupstream setcurrentindex markupstart
component render markupstream
rendered   true
else if  renderable    null
renderable render node  response
else
throw new illegalstateexception
response write
// if no component was rendered just advance in the markup stream
if  rendered    false
markupstream skipcomponent
/**
* renders the float css atribute of the given column.
*
* @param column
*            the
* @return the column as a string
*/
private string rendercolumnfloat icolumn column
columnlocation location   column getlocation
if  location getalignment      alignment left
return
else if  location getalignment      alignment right
return
else
throw new illegalstateexception
/**
* renders content of the style attribute for the given column.
*
* @param column
*            the column to render the style attribute from
* @return the style as a string
*/
private string rendercolumnstyle icolumn column
return     rendercolumnwidth column        rendercolumnfloat column
/**
* renders width of given column as string.
*
* @param column
*            the column to render as a string
* @return the column as a string
*/
private string rendercolumnwidth icolumn column
columnlocation location   column getlocation
return     location getsize     renderunit location getunit
/**
* renders given unit as string.
*
* @param unit
*            the unit to render to a string
* @return the unit as a string
*/
private string renderunit unit unit
if  unit    unit em
return
else if  unit    unit px
return
else if  unit    unit percent
return
else
throw new illegalstateexception