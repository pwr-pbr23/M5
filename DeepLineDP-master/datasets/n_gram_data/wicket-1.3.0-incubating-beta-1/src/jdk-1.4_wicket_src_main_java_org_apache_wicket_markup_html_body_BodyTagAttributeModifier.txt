/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html body
import java io ioexception
import java io objectinputstream
import java io objectoutputstream
import java io serializable
import java lang ref weakreference
import org apache wicket attributemodifier
import org apache wicket component
import org apache wicket page
import org apache wicket model imodel
/**
* an attribute modifier specifically for body tags.
* <p>
* panels have associated markup files and if they contain
* <code>&lt;wicket:head&gt;</code> and <code>&lt;body onload="..."&gt;</code>
* then the body's <code>onload</code> attribute will be appended to the page's
* onload attribute. that appendation happens by means of an attributemodifier
* which the panel adds to the body container. in the case where the panel is
* removed or replaced, then the attributemodifier must be removed or at least
* disabled. that exactly is what this special purpose attributemodifier does,
* i.e. it disables itself if the owner component (panel) is removed or replaced.
*
* @author juergen donnerstag
*/
public final class bodytagattributemodifier extends attributemodifier
private static final long serialversionuid   1l
/**
* make sure we don't keep a reference to the component longer than realy
* needed.
*/
private transient weakreference componentreference
/**
* create a new attribute modifier with the given attribute name and model
* to replace with. the additional boolean flag specifies whether to add the
* attribute if it is not present.
*
* @param attribute
*            the attribute name to replace the value for
* @param addattributeifnotpresent
*            whether to add the attribute if it is not present
* @param replacemodel
*            the model to replace the value with
* @param behaviorowner
*            the component which created (owns) the modifier
*/
public bodytagattributemodifier final string attribute  final boolean addattributeifnotpresent
final imodel replacemodel  final component behaviorowner
super attribute  addattributeifnotpresent  replacemodel
init behaviorowner
/**
* create a new attribute modifier with the given attribute name and model
* to replace with. the attribute will not be added if it is not present.
*
* @param attribute
*            the attribute name to replace the value for
* @param replacemodel
*            the model to replace the value with
* @param behaviorowner
*            the component which created (owns) the modifier
*/
public bodytagattributemodifier final string attribute  final imodel replacemodel
final component behaviorowner
super attribute  replacemodel
init behaviorowner
/**
* create a new attribute modifier with the given attribute name and
* expected pattern to match plus the model to replace with. a null pattern
* will match the attribute regardless of its value. the additional boolean
* flag specifies whether to add the attribute if it is not present.
*
* @param attribute
*            the attribute name to replace the value for
* @param pattern
*            the pattern of the current attribute value to match
* @param addattributeifnotpresent
*            whether to add the attribute if it is not present and the
*            replacement value is not null
* @param replacemodel
*            the model to replace the value with
* @param behaviorowner
*            the component which created (owns) the modifier
*/
public bodytagattributemodifier final string attribute  final string pattern
final boolean addattributeifnotpresent  final imodel replacemodel
final component behaviorowner
super attribute  pattern  addattributeifnotpresent  replacemodel
init behaviorowner
/**
* create a new attribute modifier with the given attribute name and
* expected pattern to match plus the model to replace with. a null pattern
* will match the attribute regardless of its value. the attribute will not
* be added if it is not present.
*
* @param attribute
*            the attribute name to replace the value for
* @param pattern
*            the pattern of the current attribute value to match
* @param replacemodel
*            the model to replace the value with
* @param behaviorowner
*            the component which created (owns) the modifier
*/
public bodytagattributemodifier final string attribute  final string pattern
final imodel replacemodel  final component behaviorowner
super attribute  pattern  replacemodel
init behaviorowner
/**
* initialize
*
* @param behaviorowner
*            the component which creates (owns) the modifier
*/
private void init final component behaviorowner
if  behaviorowner    null
this componentreference   new weakreference behaviorowner
/**
* @see org.apache.wicket.attributemodifier#newvalue(java.lang.string,
*      java.lang.string)
*/
protected string newvalue final string currentvalue  final string replacementvalue
// if no behavior owner has been provided, than behave as if this
// were a standard normal attribute modifier
if  this componentreference    null
// get the owner of the attribute modifier (e.g. the panel, not the
// body)
final component behaviorowner    component componentreference get
// if case the components memory has been gced already, than disable
// the attribute modifier and return the attribute value unchanged.
if  behaviorowner    null
setenabled false
return currentvalue
// it must have a page, otherwise one of its parents has been
// removed. no page, than disable the attribute modifier and
// return the attribute value unchanged.
// component.findpage() is 'protected'. but this works as well.
if     behaviorowner instanceof page     behaviorowner findparent page class     null
setenabled false
return currentvalue
// and the "panel" must be visible. wicket core tests only
// that the body (the component the attribute modifier is
// attached to) is visible.
if  behaviorowner isvisibleinhierarchy      false
return currentvalue
if currentvalue    null     currentvalue trim   endswith
return currentvalue      replacementvalue
return  currentvalue    null ? replacementvalue   currentvalue   replacementvalue
/**
* attributemodifiers must be serialzable but weakreferences are not. hence,
* we need to implement our read/write methods to properly support it.
*
* @see serializable
*
* @param inputstream
*            the input stream to read the object from
* @throws ioexception
* @throws classnotfoundexception
*/
private void readobject final objectinputstream inputstream  throws ioexception
classnotfoundexception
inputstream defaultreadobject
final object object   inputstream readobject
if  object    null
componentreference   new weakreference object
/**
* attributemodifiers must be serialzable but weakreferences are not. hence,
* we need to implement our read/write methods to properly support it.
*
* @see serializable
*
* @param outputstream
* @throws ioexception
*/
private void writeobject final objectoutputstream outputstream  throws ioexception
outputstream defaultwriteobject
if  componentreference    null
outputstream writeobject componentreference get
else
outputstream writeobject null