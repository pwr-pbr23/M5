/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io ioexception
import java io outputstream
import java io unsupportedencodingexception
import java util list
/**
* this class implements an output stream in which the data is written into a byte array.
* the buffer automatically grows as data is written to it.
* <p>
* the data can be retrieved using <code>tobytearray()</code> and
* <code>tostring()</code>.
* <p>
* closing a <tt>bytearrayoutputstream</tt> has no effect. the methods in this class can
* be called after the stream has been closed without generating an <tt>ioexception</tt>.
* <p>
* this is an alternative implementation of the java.io.bytearrayoutputstream class. the
* original implementation only allocates 32 bytes at the beginning. as this class is
* designed for heavy duty it starts at 1024 bytes. in contrast to the original it doesn't
* reallocate the whole memory block but allocates additional buffers. this way no buffers
* need to be garbage collected and the contents don't have to be copied to the new
* buffer. this class is designed to behave exactly like the original. the only exception
* is the deprecated tostring(int) method that has been ignored.
* @author <a href="mailto:jeremias@apache.org">jeremias maerki</a>
* @version $id$
*/
public class bytearrayoutputstream extends outputstream
private list buffers   new java util arraylist
private int count
private byte currentbuffer
private int currentbufferindex
private int filledbuffersum
/**
* creates a new byte array output stream. the buffer capacity is initially 1024
* bytes, though its size increases if necessary.
*/
public bytearrayoutputstream
this 1024
/**
* creates a new byte array output stream, with a buffer capacity of the specified
* size, in bytes.
* @param size the initial size.
* @exception illegalargumentexception if size is negative.
*/
public bytearrayoutputstream int size
if  size < 0
throw new illegalargumentexception     size
neednewbuffer size
/**
* closing a <tt>bytearrayoutputstream</tt> has no effect. the methods in this class
* can be called after the stream has been closed without generating an
* <tt>ioexception</tt>.
* @throws ioexception in case an i/o error occurs
*/
public void close   throws ioexception
// nop
/**
* @see java.io.bytearrayoutputstream#reset()
*/
public synchronized void reset
count   0
filledbuffersum   0
currentbufferindex   0
currentbuffer   getbuffer currentbufferindex
/**
* gets the size.
* @return the size
*/
public int size
return count
/**
* writes to a byte array.
* @return this is a byte array
*/
public synchronized byte tobytearray
int remaining   count
int pos   0
byte newbuf   new byte
for  int i   0  i < buffers size    i
byte buf   getbuffer i
int c   math min buf length  remaining
system arraycopy buf  0  newbuf  pos  c
pos    c
remaining    c
if  remaining    0
break
return newbuf
/**
* @see java.lang.object#tostring()
*/
public string tostring
return new string tobytearray
/**
* this as a string using the provided encoding.
* @param enc the encoding to use
* @return this as a string using the provided encoding
* @throws unsupportedencodingexception
*/
public string tostring string enc  throws unsupportedencodingexception
return new string tobytearray    enc
/**
* @see java.io.outputstream#write(byte[], int, int)
*/
public synchronized void write byte b  int off  int len
if   off < 0      off > b length      len < 0       off   len  > b length
off   len  < 0
throw new indexoutofboundsexception
else if  len    0
return
int newcount   count   len
int remaining   len
int inbufferpos   count   filledbuffersum
while  remaining > 0
int part   math min remaining  currentbuffer length   inbufferpos
system arraycopy b  off   len   remaining  currentbuffer  inbufferpos  part
remaining    part
if  remaining > 0
neednewbuffer newcount
inbufferpos   0
count   newcount
/**
* calls the write(byte[]) method.
* @see java.io.outputstream#write(int)
*/
public synchronized void write int b
write new byte    byte b    0  1
/**
* write to the given output stream.
* @param out the output stream to write to
* @throws ioexception
* @see java.io.bytearrayoutputstream#writeto(outputstream)
*/
public synchronized void writeto outputstream out  throws ioexception
int remaining   count
for  int i   0  i < buffers size    i
byte buf   getbuffer i
int c   math min buf length  remaining
out write buf  0  c
remaining    c
if  remaining    0
break
private byte getbuffer int index
return  byte buffers get index
private void neednewbuffer int newcount
if  currentbufferindex < buffers size     1
// recycling old buffer
filledbuffersum    currentbuffer length
currentbufferindex
currentbuffer   getbuffer currentbufferindex
else
// creating new buffer
int newbuffersize
if  currentbuffer    null
newbuffersize   newcount
filledbuffersum   0
else
newbuffersize   math max currentbuffer length << 1  newcount   filledbuffersum
filledbuffersum    currentbuffer length
currentbufferindex
currentbuffer   new byte
buffers add currentbuffer