/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form upload
import java util arraylist
import java util collection
import java util collections
import java util iterator
import java util map
import java util map entry
import org apache wicket request
import org apache wicket resourcereference
import org apache wicket markup componenttag
import org apache wicket markup html iheadercontributor
import org apache wicket markup html iheaderresponse
import org apache wicket markup html webcomponent
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html basic label
import org apache wicket markup html form form
import org apache wicket markup html form formcomponentpanel
import org apache wicket markup html resources javascriptresourcereference
import org apache wicket model abstractreadonlymodel
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket protocol http imultipartwebrequest
import org apache wicket util convert conversionexception
import org apache wicket util string strings
import org apache wicket util upload fileitem
/**
* form component that allows the user to select multiple files to upload via a
* single &lt;input type=&quot;file&quot;/&gt; field.
*
* notice that this component clears its model at the end of the request, so the
* uploaded files must be processed within the request they were uploaded.
*
* uses javascript implementation from
* http://the-stickman.com/web-development/javascript/upload-multiple-files-with-a-single-file-element/
*
* for customizing caption text see {@link #resource_limited} and
* {@link #resource_unlimited}
*
* for an example of styling using css see the upload example in wicket-examples
*
* @author igor vaynberg (ivaynberg)
*/
public class multifileuploadfield extends formcomponentpanel implements iheadercontributor
/**
*
*/
private static final long serialversionuid   1l
/**
* represents an unlimited max count of uploads
*/
public static final int unlimited   1
/**
* resource key used to retrieve caption message for when a limit on the
* number of uploads is specfied. the limit is represented via ${max}
* variable.
*
* example: org.apache.wicket.mfu.caption.limited=files (maximum ${max}):
*/
public static final string resource_limited
/**
* resource key used to retrieve caption message for when no limit on the
* number of uploads is specfied.
*
* example: org.apache.wicket.mfu.caption.unlimited=files:
*/
public static final string resource_unlimited
private static final string name_attr
private static final string magic_separator
private static final resourcereference js   new javascriptresourcereference
multifileuploadfield class
private final webcomponent upload
private final webmarkupcontainer container
private final int max
private transient string inputarraycache   null
/**
* constructor
*
* @param id
* @param model
*/
public multifileuploadfield string id
this id  null   1
/**
* constructor
*
* @param id
* @param model
* @param max
*            max number of files a user can upload
*/
public multifileuploadfield string id  int max
this id  null  max
/**
* constructor
*
* @param id
* @param model
*/
public multifileuploadfield string id  imodel model
this id  model  unlimited
/**
* constructor
*
* @param id
* @param model
* @param max
*            max number of files a user can upload
*
*/
public multifileuploadfield string id  imodel model  int max
super id  model
this max   max
upload   new webcomponent
upload setoutputmarkupid true
add upload
container   new webmarkupcontainer
container setoutputmarkupid true
add container
container add new label    new captionmodel
/**
* @see org.apache.wicket.markup.html.form.formcomponentpanel#oncomponenttag(org.apache.wicket.markup.componenttag)
*/
protected void oncomponenttag componenttag tag
super oncomponenttag tag
// remove the name attribute added by the formcomponent
if  tag getattributes   containskey name_attr
tag getattributes   remove name_attr
/**
* @see org.apache.wicket.component#onattach()
*/
protected void onattach
super onattach
// auto toggle form's multipart property
form form    form findparent form class
if  form    null
// woops
throw new illegalstateexception     getclass   getname
form class getname
form setmultipart true
/**
* @see org.apache.wicket.markup.html.iheadercontributor#renderhead(org.apache.wicket.markup.html.iheaderresponse)
*/
public void renderhead iheaderresponse response
// initialize the javascript library
response renderjavascriptreference js
response renderondomreadyjavascript     getinputname
container getmarkupid         max
upload getmarkupid
/**
* @see org.apache.wicket.markup.html.form.formcomponent#getinputasarray()
*/
public string getinputasarray
// fake the input array as if it contained an array of all uploaded file
// names
if  inputarraycache    null
// this array will aggregate all input names
arraylist names   null
final request request   getrequest
if  request instanceof imultipartwebrequest
// retrieve the filename->fileitem map from request
final map itemnametoitem     imultipartwebrequest request  getfiles
iterator it   itemnametoitem entryset   iterator
while  it hasnext
// iterate over the map and build the list of filenames
final entry entry    entry it next
final string name    string entry getkey
final fileitem item    fileitem entry getvalue
if   strings isempty name     name startswith getinputname     magic_separator
strings isempty item getname
// make sure the fileitem belongs to this component and
// is not empty
names    names    null  ? names   new arraylist
names add name
if  names    null
inputarraycache    string names toarray new string
return inputarraycache
/**
* @see org.apache.wicket.markup.html.form.formcomponent#convertvalue(java.lang.string[])
*/
protected object convertvalue string value  throws conversionexception
// convert the array of filenames into a collection of fileitems
collection uploads   null
final string filenames   getinputasarray
if  filenames    null
final imultipartwebrequest request    imultipartwebrequest getrequest
uploads   new arraylist filenames length
for  int i   0  i < filenames length  i
uploads add new fileupload request getfile filenames
return uploads
/**
* @see org.apache.wicket.markup.html.form.formcomponent#updatemodel()
*/
public void updatemodel
final object object   getmodelobject
// figure out if there is an existing model object collection for us to
// reuse
if  object    null
// no existing collection, push the one we created
setmodelobject getconvertedinput
else
if    object instanceof collection
// fail early if there is something interesting in the model
throw new illegalstateexception     getclass   getname
collection class getname
fileupload class getname
object getclass   getname
else
// refresh the existing collection
collection collection    collection object
collection clear
if  getconvertedinput      null
collection addall  collection getconvertedinput
// push the collection in case the model is listening to
// setobject calls
setmodelobject collection
/**
* @see org.apache.wicket.component#ondetach()
*/
protected void ondetach
// cleanup any opened filestreams
collection uploads    collection getconvertedinput
if  uploads    null
iterator it   uploads iterator
while  it hasnext
final fileupload upload    fileupload it next
upload closestreams
// cleanup any caches
inputarraycache   null
// clean up the model because we dont want fileupload objects in session
object modelobject   getmodelobject
if  modelobject    null     modelobject instanceof collection
collection modelobject  clear
super ondetach
/**
* model that will construct the caption string
*
* @author ivaynberg
*/
private class captionmodel extends abstractreadonlymodel
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.model.abstractreadonlymodel#getobject()
*/
public object getobject
if  max    unlimited
return getstring resource_unlimited
else
return getstring resource_limited  model valueof collections singletonmap
new integer max