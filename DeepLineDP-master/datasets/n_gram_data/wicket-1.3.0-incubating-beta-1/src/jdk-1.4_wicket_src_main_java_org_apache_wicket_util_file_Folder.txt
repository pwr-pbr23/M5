/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util file
import java io ioexception
import java net uri
import java util arraylist
import java util arrays
import java util list
/**
* this folder subclass provides some type safety and extensibility for "files"
* that hold other files.
*
* @author jonathan locke
*/
public final class folder extends file
/**
* filter for files
*
* @author jonathan locke
*/
public static interface filefilter
/**
* file filter that matches all files
*/
public static filefilter all_files   new filefilter
public boolean accept final file file
return true
/**
* @param file
*            the file to test
* @return true if the file should be accepted
*/
public boolean accept file file
/**
* filter for folders
*
* @author jonathan locke
*/
public static interface folderfilter
/**
* @param folder
*            the folder to test
* @return true if the file should be accepted
*/
public boolean accept folder folder
private static final long serialversionuid   1l
/**
* constructor.
*
* @param parent
*            parent
* @param child
*            child
*/
public folder final folder parent  final string child
super parent  child
/**
* construct.
*
* @param file
*            file
*/
public folder final java io file file
this file getpath
/**
* constructor.
*
* @param pathname
*            path name
*/
public folder final string pathname
super pathname
/**
* constructor.
*
* @param parent
*            parent
* @param child
*            child
*/
public folder final string parent  final string child
super parent  child
/**
* constructor.
*
* @param uri
*            folder uri
*/
public folder final uri uri
super uri
/**
* does a mkdirs() on this folder if it does not exist. if the folder cannot
* be created, an ioexception is thrown.
*
* @throws ioexception
*             thrown if folder cannot be created
*/
public void ensureexists   throws ioexception
if   exists       mkdirs
throw new ioexception     this
/**
* @return files in this folder
*/
public file getfiles
return getfiles filefilter all_files
/**
* @return all files nested within this folder
*/
public file getnestedfiles
return getnestedfiles filefilter all_files
/**
* gets files in this folder matching a given filter recusively.
*
* @param filter
*            the filter
* @return the list of files
*/
public file getnestedfiles final filefilter filter
final list files   new arraylist
files addall arrays aslist getfiles filter
final folder folders   getfolders
for  int i   0  i < folders length  i
files addall arrays aslist folders getnestedfiles filter
return  file files toarray new file
/**
* @param filter
*            file filter
* @return files
*/
public file getfiles final filefilter filter
// get list of java.io files
final java io file files   listfiles new java io filefilter
/**
* @see java.io.filefilter#accept(java.io.file)
*/
public boolean accept java io file file
return file isfile      filter accept new file file
// convert java.io files to org.apache.wicket files
if  files    null
final file wicketfiles   new file
for  int i   0  i < files length  i
wicketfiles   new file files
return wicketfiles
return new file
/**
* gets all folders in this folder, except "." and ".."
*
* @return folders
*/
public folder getfolders
return getfolders new folderfilter
public boolean accept final folder folder
final string name   folder getname
return  name equals        name equals
/**
* @param filter
*            folder fiter
* @return folders
*/
public folder getfolders final folderfilter filter
// get java io files that are directories matching the filter
final java io file files   listfiles new java io filefilter
/**
* @see java.io.filefilter#accept(java.io.file)
*/
public boolean accept java io file file
return file isdirectory      filter accept new folder file getpath
// convert
if  files    null
final folder wicketfolders   new folder
for  int i   0  i < files length  i
wicketfolders   new folder files
return wicketfolders
return new folder
/**
* removes this folder and everything in it, recursively. a best effort is
* made to remove nested folders and files in depth-first order.
*
* @return true if the folder was successfully removed
*/
public boolean remove
return remove this
/**
* removes all the files in this folder.
*
* @return true if any files were successfully removed
*/
public boolean removefiles
final file files   getfiles
boolean success   true
for  int i   0  i < files length  i
success   files remove      success
return success
/**
* removes everything in the given folder and then the folder itself.
*
* @param folder
*            the folder
* @return true if the folder was successfully removed
*/
private boolean remove final folder folder
final folder folders   getfolders
boolean success   true
for  int i   0  i < folders length  i
success   folders remove      success
success   removefiles      success
return folder delete      success