/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request target component listener
import org apache wicket application
import org apache wicket component
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket requestlistenerinterface
import org apache wicket request requestparameters
import org apache wicket request target ieventprocessor
import org apache wicket request target component pagerequesttarget
import org apache wicket settings irequestcyclesettings
/**
* the abstract implementation of
* {@link org.apache.wicket.request.target.component.listener.ilistenerinterfacerequesttarget}.
* target that denotes a page instance and a call to a component on that page
* using an listener interface method.
*
* @author eelco hillenius
* @author johan compagner
*/
public abstract class abstractlistenerinterfacerequesttarget extends pagerequesttarget
implements
ilistenerinterfacerequesttarget
ieventprocessor
/** the request parameters. */
private final requestparameters requestparameters
/** the target component. */
private final component component
/** the listener method. */
private final requestlistenerinterface listener
/**
* construct.
*
* @param page
*            the page instance
* @param component
*            the target component
* @param listener
*            the listener interface
*/
public abstractlistenerinterfacerequesttarget final page page  final component component
requestlistenerinterface listener
this page  component  listener  null
/**
* construct.
*
* @param page
*            the page instance
* @param component
*            the target component
* @param listener
*            the listener method
* @param requestparameters
*            the request parameter
*/
public abstractlistenerinterfacerequesttarget final page page  final component component
final requestlistenerinterface listener  final requestparameters requestparameters
super page
if  component    null
throw new illegalargumentexception
this component   component
if  listener    null
throw new illegalargumentexception
this listener   listener
this requestparameters   requestparameters
/**
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object obj
boolean equal   false
if  obj    null    obj getclass   equals getclass
abstractlistenerinterfacerequesttarget that    abstractlistenerinterfacerequesttarget obj
if  component equals that component     listener equals that listener
if  requestparameters    null
return requestparameters equals that requestparameters
else
return that requestparameters    null
return equal
/**
* @see org.apache.wicket.request.target.component.listener.ilistenerinterfacerequesttarget#getrequestlistenerinterface()
*/
public final requestlistenerinterface getrequestlistenerinterface
return listener
/**
* @see org.apache.wicket.request.target.component.listener.ilistenerinterfacerequesttarget#getrequestparameters()
*/
public final requestparameters getrequestparameters
return this requestparameters
/**
* @see org.apache.wicket.request.target.component.listener.ilistenerinterfacerequesttarget#gettarget()
*/
public final component gettarget
return component
/**
* @see java.lang.object#hashcode()
*/
public int hashcode
int result   getclass   hashcode
result    component hashcode
result    listener hashcode
result    requestparameters    null ? requestparameters hashcode     0
return 17   result
/**
* @see java.lang.object#tostring()
*/
public string tostring
stringbuffer buf   new stringbuffer getclass   getname    append    append hashcode
append getpage   tostring    append    append gettarget   getid    append
append getrequestlistenerinterface   getmethod   getdeclaringclass    append
append getrequestlistenerinterface   getname
if  requestparameters    null
buf append    append requestparameters tostring    append
return buf tostring
/**
* common functionality to be called by processevents()
*
* @param requestcycle
*            the request cycle
*/
protected void onprocessevents final requestcycle requestcycle
getpage   startcomponentrender gettarget
final application application   requestcycle getapplication
// and see if we have to redirect the render part by default
irequestcyclesettings renderstrategy strategy   application getrequestcyclesettings
getrenderstrategy
boolean issueredirect    strategy    irequestcyclesettings redirect_to_render    strategy    irequestcyclesettings redirect_to_buffer
requestcycle setredirect issueredirect