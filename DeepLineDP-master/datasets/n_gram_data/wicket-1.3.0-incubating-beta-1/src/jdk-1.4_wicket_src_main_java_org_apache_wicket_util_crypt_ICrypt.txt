/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util crypt
/**
* encryption and decryption implementations are accessed through this
* interface. it provide some simple means to encrypt and decrypt strings, like
* passwords etc.. it depends on the implementation itself which algorithms are
* used to en-/decrypt the data.
* <p>
* if you value the privacy of your websites users, then please consider using a
* one-way encryption algorithm instead of the wicket provided icrypt
* implementations. the intention of these encryption facilities is to keep
* passwords private when stored in cookies or in the session.the implementation
* of the encryption algorithm may change between releases. as such, this
* interface and its implementations are not intended and should not be used as
* an encryption facility for persistent values.
* <p>
* as of wicket 1.2 the methods encrypt and decrypt are deprecated. consider
* changing your persistent encryption strategy to be based on a one-way
* encryption such as a sha1 hash, not depending on wicket classes.
*
* @author juergen donnerstag
*/
public interface icrypt
/**
* decrypts a string using url and filename safe base64 decoding.
*
* @param text
*            the text to decrypt
* @return the decrypted string.
* @since 1.2
*/
string decrypturlsafe final string text
/**
* encrypts a string using url and filename safe base64 encoding.
*
* @param plaintext
* @return encrypted string
* @since 1.2
*/
string encrypturlsafe final string plaintext
/**
* sets private encryption key. it depends on the implementation if a
* default key is applied or an exception is thrown, if no private key has
* been provided.
*
* @param key
*            private key
*/
void setkey final string key