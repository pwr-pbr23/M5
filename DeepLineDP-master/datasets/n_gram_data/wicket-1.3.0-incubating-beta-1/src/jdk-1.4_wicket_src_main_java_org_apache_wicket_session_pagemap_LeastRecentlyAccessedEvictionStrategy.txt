/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket session pagemap
import org apache wicket accessstackpagemap
import org apache wicket ipagemap
import org apache wicket page
import org apache wicket session
import org apache wicket accessstackpagemap access
/**
* a simple eviction strategy that evicts the least recently accessed page
* version from the given page map.
*
* @author jonathan locke
*/
public class leastrecentlyaccessedevictionstrategy implements ipagemapevictionstrategy
private static final long serialversionuid   1l
/** maximum number of page versions in a page map before evictions start */
private int maxversions
/**
* constructor.
*
* @param maxversions
*            maximum number of page versions before eviction occurs
*/
public leastrecentlyaccessedevictionstrategy int maxversions
if  maxversions < 1
throw new illegalargumentexception
this maxversions   maxversions
/**
* @see org.apache.wicket.session.pagemap.ipagemapevictionstrategy#evict(org.apache.wicket.pagemap)
*/
public void evict final ipagemap pagemap
if  pagemap instanceof accessstackpagemap
synchronized  session get
accessstackpagemap accesspm    accessstackpagemap pagemap
// do we need to evict under this strategy?
if  accesspm getversions   > maxversions
// remove oldest entry from access stack
final accessstackpagemap access oldestaccess    access accesspm getaccessstack
remove 0
final ipagemapentry oldestentry   pagemap getentry oldestaccess getid
// if entry is a page (cannot be null if we're evicting)
if  oldestentry instanceof page
page page    page oldestentry
// if there is more than one version of this page
if  page getversions   > 1
// expire the oldest version
page expireoldestversion
else
// expire whole page
accesspm removeentry page
else
// if oldestentry is not an instance of page, then it is
// some
// custom, user-defined ipagemapentry class and cannot
// contain
// versioning information, so we just remove the entry.
if  oldestentry    null
accesspm removeentry oldestentry
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     maxversions