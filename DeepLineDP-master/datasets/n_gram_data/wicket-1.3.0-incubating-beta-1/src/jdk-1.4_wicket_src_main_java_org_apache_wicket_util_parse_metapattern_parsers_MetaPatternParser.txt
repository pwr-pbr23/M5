/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util parse metapattern parsers
import java util regex matcher
import org apache wicket util parse metapattern metapattern
/**
* base class for various metapattern based parsers.
*
* @author jonathan locke
*/
public abstract class metapatternparser
/** the input to parse */
private final charsequence input
/** the length of the input; no. of characters */
private final int length
/**
* the position (index) behind the last pattern group matched while
* advancing from one pattern group to the next one.
*/
private int pos
/** the object maintaining all the regex match details */
private matcher matcher
/**
* construct the parser. you must call
*
* @see #advance(metapattern) to initialize the matcher with the pattern.
* @param input
*            to parse
*/
public metapatternparser final charsequence input
this input   input
this length   input length
/**
* construct the parser and initialize the matcher with the pattern given.
*
* @param pattern
*            meta pattern
* @param input
*            input to parse
*/
public metapatternparser final metapattern pattern  final charsequence input
this input
setpattern pattern
/**
* @param pattern
*            pattern
*/
public void setpattern final metapattern pattern
this matcher   pattern matcher input
/**
* advance parsing to the next element. the internal cursor will be moved to
* end of the string matched.
*
* @param pattern
*            meta pattern
* @return true if found, false otherwise
*/
protected final boolean advance final metapattern pattern
// get the remaining part of the input
final charsequence s   input subsequence pos  length
// does the pattern match?
this matcher   pattern matcher s
if  matcher lookingat
// yes, it does. move the cursor to the end of the
// char sequence matched.
pos    matcher end
// found the pattern
return true
// did not find the pattern.
return false
/**
* whether the matcher matches the pattern.
*
* @return whether the matcher matches
*/
public boolean matches
return matcher matches
/**
* gets the matcher.
*
* @return the matcher
*/
public final matcher matcher
return matcher
/**
* whether the internal cursor has advanced to the end of the input.
*
* @return whether the input is parsed
*/
public final boolean atend
return pos    length