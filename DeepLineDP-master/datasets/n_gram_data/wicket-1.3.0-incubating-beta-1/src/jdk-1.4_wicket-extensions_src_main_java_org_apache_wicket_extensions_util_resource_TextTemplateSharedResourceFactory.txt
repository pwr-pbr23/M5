/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions util resource
import java util iterator
import java util map
import org apache wicket application
import org apache wicket resource
import org apache wicket resourcereference
import org apache wicket sharedresources
import org apache wicket util resource abstractstringresourcestream
import org apache wicket util resource iresourcestream
/**
* a resource (reference) factory that takes a texttemplate and generates shared
* resources for various interpolations of that template.
* <p>
* a scope for adding shared resources allows you to limit the namespace impact
* of the shared resources created. if you omit the scope, the application-wide
* scope application.class will be used by default.
* <p>
* you may use resources created by this factory directly by calling
* resourcereference(map) to get a resource reference to the given shared
* resource interpolation represented by the variables in the map. or, for
* convenience, you can use texttemplatelink to link to resources created by
* this factory.
* <p>
* in many cases, it will be useful to extend this class and override
* sharedresourcename(map) to provide a unique name for resources created by the
* factory using map values. if you don't provide an override, every value in
* the map will be used to produce the unique name, which may create either
* longer names or more unique shared resources than you really wanted.
*
* @author jonathan locke
*/
// todo should weak-ref regenerable resources like this in sharedresources!
public class texttemplatesharedresourcefactory
private static final long serialversionuid   1l
/**
* shared resource scope
*/
private final class scope
/**
* template to use to create resources
*/
private final texttemplate template
/**
* creates shared text template resources.
*
* @param template
*            the template to interpolate into
*/
public texttemplatesharedresourcefactory final texttemplate template
this template  application class
/**
* creates shared text template resources with the given scope.
*
* @param template
*            the template to interpolate into
* @param scope
*            the scope in shared resources to add resources at
*/
public texttemplatesharedresourcefactory final texttemplate template  final class scope
this template   template
this scope   scope
/**
* @param variables
*            the variables to interpolate into the template
* @return a resource reference to the template encoded as a resource with
*         the given variables interpolated.
*/
public resourcereference resourcereference final map variables
final string uniquename   sharedresourcename variables
final string templatevalue   template asstring variables
final sharedresources sharedresources   application get   getsharedresources
final resource resource   sharedresources get uniquename
if  resource    null
final resource newresource   new resource
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.resource#getresourcestream()
*/
public iresourcestream getresourcestream
return new abstractstringresourcestream
private static final long serialversionuid   1l
protected string getstring
return templatevalue
public long length
return templatevalue length
sharedresources add uniquename  newresource
return new resourcereference scope    null ? application class   scope  uniquename
/**
* @param variables
*            variables that parameterize the linked-to resource
* @return a unique name for the variables to use as a resource key
*/
protected string sharedresourcename final map variables
final stringbuffer buffer   new stringbuffer
for  final iterator iterator   variables values   iterator    iterator hasnext
final string value   iterator next   tostring
buffer append encodevalue value
if  iterator hasnext
buffer append
return buffer tostring
/**
* simple encoder for key values. letters and digits are unchanged. all
* others are encoded as %<hexcode>.
*
* @param value
*            the value
* @return the encoded value
*/
private string encodevalue final string value
final stringbuffer buffer   new stringbuffer value length     10
for  int i   0  i < value length    i
final char c   value charat i
if  character isletterordigit c
buffer append c
else
buffer append
buffer append integer tohexstring c
return buffer tostring