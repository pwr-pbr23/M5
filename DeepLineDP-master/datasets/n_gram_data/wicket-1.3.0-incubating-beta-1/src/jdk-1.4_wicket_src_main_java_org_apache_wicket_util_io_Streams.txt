/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io bufferedreader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java io reader
import java io stringreader
import java util properties
import javax xml parsers documentbuilder
import javax xml parsers documentbuilderfactory
import javax xml parsers parserconfigurationexception
import org apache wicket wicketruntimeexception
import org w3c dom document
import org w3c dom element
import org w3c dom node
import org w3c dom nodelist
import org xml sax entityresolver
import org xml sax errorhandler
import org xml sax inputsource
import org xml sax saxexception
import org xml sax saxparseexception
/**
* utilities methods for working with input and output streams.
*
* @author jonathan locke
*/
public final class streams
private static final string xml_properties_dtd    1 0  utf 8
1 0
/**
* writes the input stream to the output stream. input is done without a
* reader object, meaning that the input is copied in its raw form.
*
* @param in
*            the input stream
* @param out
*            the output stream
* @return number of bytes copied from one stream to the other
* @throws ioexception
*/
public static int copy final inputstream in  final outputstream out  throws ioexception
final byte buffer   new byte
int bytescopied   0
while  true
int bytecount   in read buffer  0  buffer length
if  bytecount <  0
break
out write buffer  0  bytecount
bytescopied    bytecount
return bytescopied
/**
* loads properties from an xml input stream into the provided properties
* object.
*
* @param properties
*            the object to load the properties into
* @param inputstream
* @throws ioexception
*             when the input stream could not be read from
*/
public static void loadfromxml properties properties  inputstream inputstream
throws ioexception
if  properties    null
throw new illegalargumentexception
if  inputstream    null
throw new illegalargumentexception
// todo in a wicket version that supports java 5 (wicket 2.0?), we can
// just use the loadfromxml method on java.util.properties directly
// rather than manual as we do here
documentbuilderfactory documentbuilderfactory   documentbuilderfactory newinstance
documentbuilderfactory setignoringelementcontentwhitespace true
documentbuilderfactory setvalidating true
documentbuilderfactory setcoalescing true
documentbuilderfactory setignoringcomments true
try
documentbuilder db   documentbuilderfactory newdocumentbuilder
db setentityresolver new entityresolver
public inputsource resolveentity string publicid  string systemid
throws saxexception
if  systemid equals
inputsource inputsource
inputsource   new inputsource new stringreader xml_properties_dtd
inputsource setsystemid
return inputsource
else
throw new saxexception     systemid
db seterrorhandler new errorhandler
public void error saxparseexception e  throws saxexception
throw e
public void fatalerror saxparseexception e  throws saxexception
throw e
public void warning saxparseexception e  throws saxexception
throw e
inputsource is   new inputsource inputstream
document doc   db parse is
nodelist entries     element doc getchildnodes   item 1   getchildnodes
int len   entries getlength
for  int i    len > 0    entries item 0  getnodename   equals     ? 1   0  i < len  i
element entry    element entries item i
if  entry hasattribute
node node   entry getfirstchild
string val    node    null  ?     node getnodevalue
properties setproperty entry getattribute     val
catch  parserconfigurationexception e
throw new wicketruntimeexception e
catch  saxexception e
throw new wicketruntimeexception    e
/**
* reads a stream as a string.
*
* @param in
*            the input stream
* @return the string
* @throws ioexception
*/
public static string readstring final inputstream in  throws ioexception
return readstring new bufferedreader new inputstreamreader in
/**
* reads a string using a character encoding.
*
* @param in
*            the input
* @param encoding
*            the character encoding of the input data
* @return the string
* @throws ioexception
*/
public static string readstring final inputstream in  final charsequence encoding
throws ioexception
return readstring new bufferedreader new inputstreamreader in  encoding tostring
/**
* reads all input from a reader into a string.
*
* @param in
*            the input
* @return the string
* @throws ioexception
*/
public static string readstring final reader in  throws ioexception
final stringbuffer buffer   new stringbuffer 2048
int value
while   value   in read        1
buffer append  char value
return buffer tostring
/**
* private to prevent instantiation.
*/
private streams