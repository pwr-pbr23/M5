/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http request
import java io unsupportedencodingexception
import java net urldecoder
import java net urlencoder
import java util locale
import java util map
import java util regex matcher
import java util regex pattern
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket irequesttarget
import org apache wicket request
import org apache wicket requestcycle
import org apache wicket wicketruntimeexception
import org apache wicket protocol http requestutils
import org apache wicket request irequestcodingstrategy
import org apache wicket request requestparameters
import org apache wicket request target coding irequesttargeturlcodingstrategy
import org apache wicket util crypt icrypt
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util value valuemap
/**
* this is a request coding strategy which encrypts the url and hence makes it
* impossible for users to guess what is in the url and rebuild it manually. it
* uses the cryptfactory registered with the application to encode and decode
* the url. hence, the coding algorithm must be a two-way one (reversable).
* because the algrithm is reversible, urls which were bookmarkable before will
* remain bookmarkable.
* <p>
* to register the request coding strategy to need to do the following:
*
* <pre>
* protected irequestcycleprocessor newrequestcycleprocessor()
* {
* 	return new webrequestcycleprocessor()
* 	{
* 		protected irequestcodingstrategy newrequestcodingstrategy()
* 		{
* 			return new cryptedurlwebrequestcodingstrategy(new webrequestcodingstrategy());
* 		}
* 	};
* }
* </pre>
*
* <b>note:</b> when trying to hack urls in the browser an exception might be
* caught while decoding the url. by default, for safety reasons a very simple
* wicketruntimeexception is thrown. the original stack trace is only logged.
*
* @author juergen donnerstag
*/
public class cryptedurlwebrequestcodingstrategy implements irequestcodingstrategy
/** log. */
private static final log log   logfactory getlog cryptedurlwebrequestcodingstrategy class
/** the default request coding strategy most of the methods are delegated to */
private final irequestcodingstrategy defaultstrategy
/**
* construct.
*
* @param defaultstrategy
*            the default strategy most requests are forwarded to
*/
public cryptedurlwebrequestcodingstrategy final irequestcodingstrategy defaultstrategy
this defaultstrategy   defaultstrategy
/**
* decode the querystring of the url
*
* @see org.apache.wicket.request.irequestcodingstrategy#decode(org.apache.wicket.request)
*/
public requestparameters decode final request request
string url   request decodeurl request geturl
string decodedqueryparams   decodeurl url
if  decodedqueryparams    null
// the difficulty now is that this.defaultstrategy.decode(request)
// doesn't know the just decoded url which is why must create
// a fake request for.
request fakerequest   new decodedurlrequest request  url  decodedqueryparams
return this defaultstrategy decode fakerequest
return this defaultstrategy decode request
/**
* encode the querystring of the url
*
* @see org.apache.wicket.request.irequestcodingstrategy#encode(org.apache.wicket.requestcycle,
*      org.apache.wicket.irequesttarget)
*/
public charsequence encode final requestcycle requestcycle  final irequesttarget requesttarget
charsequence url   this defaultstrategy encode requestcycle  requesttarget
url   encodeurl url
return url
/**
* @see wicket.request.irequesttargetmounter#mount(
*      wicket.request.target.coding.irequesttargeturlcodingstrategy)
*/
public void mount irequesttargeturlcodingstrategy urlcodingstrategy
this defaultstrategy mount urlcodingstrategy
/**
* @see org.apache.wicket.request.irequesttargetmounter#unmount(java.lang.string)
*/
public void unmount string path
this defaultstrategy unmount path
/**
* @see org.apache.wicket.request.irequesttargetmounter#urlcodingstrategyforpath(java.lang.string)
*/
public irequesttargeturlcodingstrategy urlcodingstrategyforpath string path
return this defaultstrategy urlcodingstrategyforpath path
/**
* @see org.apache.wicket.request.irequesttargetmounter#pathfortarget(org.apache.wicket.irequesttarget)
*/
public charsequence pathfortarget irequesttarget requesttarget
return this defaultstrategy pathfortarget requesttarget
/**
* @see org.apache.wicket.request.irequesttargetmounter#targetforrequest(org.apache.wicket.request.requestparameters)
*/
public irequesttarget targetforrequest requestparameters requestparameters
return this defaultstrategy targetforrequest requestparameters
/**
* returns the given url encoded.
*
* @param url
*            the url to encode
* @return the encoded url
*/
protected charsequence encodeurl final charsequence url
// get the crypt implementation from the application
icrypt urlcrypt   application get   getsecuritysettings   getcryptfactory   newcrypt
if  urlcrypt    null
// the url must have a query string, otherwise keep the url
// unchanged
final int pos   url tostring   indexof
if  pos >  1
// the url's path
charsequence urlprefix   url subsequence 0  pos
// extract the querystring
string querystring   url subsequence pos   1  url length    tostring
// if the querystring starts with a parameter like
// "x=", than don't change the querystring as it
// has been encoded already
if   querystring startswith
// the length of the encrypted string depends on the
// length of the original querystring. let's try to
// make the querystring shorter first without loosing
// information.
querystring   shortenurl querystring  tostring
// encrypt the query string
string encryptedquerystring   urlcrypt encrypturlsafe querystring
try
encryptedquerystring   urlencoder encode encryptedquerystring  application
get   getrequestcyclesettings   getresponserequestencoding
catch  unsupportedencodingexception ex
throw new wicketruntimeexception ex
// build the new complete url
return new appendingstringbuffer urlprefix  append    append
encryptedquerystring
// we didn't change anything
return url
/**
* decode the "x" parameter of the querystring
*
* @param url
*            the encoded url
* @return the decoded 'x' parameter of the querystring
*/
protected string decodeurl final string url
int startindex   url indexof
if  startindex     1
try
startindex   startindex   3
final int endindex   url indexof    startindex
string secureparam
if  endindex     1
secureparam   url substring startindex
else
secureparam   url substring startindex  endindex
secureparam   urldecoder decode secureparam  application get
getrequestcyclesettings   getresponserequestencoding
// get the crypt implementation from the application
final icrypt urlcrypt   application get   getsecuritysettings   getcryptfactory
newcrypt
// decrypt the query string
string querystring   urlcrypt decrypturlsafe secureparam
// the querystring might have been shortened (length reduced).
// in that case, lengthen the query string again.
querystring   rebuildurl querystring
return querystring
catch  exception ex
return onerror ex
return null
/**
* @param ex
*
* @return decoded url
*/
protected string onerror final exception ex
log error    ex
throw new hackattackexception
/**
* try to shorten the querystring without loosing information. note:
* webrequestwithcryptedurl must implement exactly the opposite logic.
*
* @param querystring
*            the original query string
* @return the shortened querystring
*/
protected charsequence shortenurl charsequence querystring
querystring   strings replaceall querystring
webrequestcodingstrategy behavior_id_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy bookmarkable_page_parameter_name
// for debugging only: determine possibilities to further shorten
// the query string
if  log isdebugenabled
// every word with at least 3 letters
pattern words   pattern compile
matcher matcher   words matcher querystring
while  matcher find
charsequence word   querystring subsequence matcher start    matcher end
log debug     word       querystring
return querystring
/**
* in case the query string has been shortened prior to encryption, than
* rebuild (lengthen) the query string now. note: this implementation must
* exactly match the reverse one implemented in webresponsewithcryptedurl.
*
* @param querystring
*            the url's query string
* @return the lengthened query string
*/
protected string rebuildurl charsequence querystring
querystring   strings replaceall querystring
webrequestcodingstrategy behavior_id_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy bookmarkable_page_parameter_name
return querystring tostring
/**
* irequestcodingstrategy.decode(request) requires a request parameter and
* not a url. hence, based on the original url and the decoded 'x' parameter
* a new request object must be created to serve the default coding strategy
* as input for analyzing the url.
*/
private static class decodedurlrequest extends request
/** the original request */
private final request request
/** the new url with the 'x' param decoded */
private final string url
/**
* the new parameter map with the 'x' param removed and the 'new' one
* included
*/
private final map parametermap
/** the start index to the new relative url */
private final int startrelativeurl
/**
* construct.
*
* @param request
* @param url
* @param encodedparamreplacement
*/
public decodedurlrequest final request request  final string url
final string encodedparamreplacement
this request   request
// create a copy of the original parameter map
this parametermap   this request getparametermap
// remove the 'x' parameter which contains all the encoded params
this parametermap remove
string decodedparamreplacement   encodedparamreplacement
try
decodedparamreplacement   urldecoder decode encodedparamreplacement  application
get   getrequestcyclesettings   getresponserequestencoding
catch  unsupportedencodingexception ex
log error     encodedparamreplacement  ex
// add all of the params from the decoded 'x' param
valuemap params   new valuemap
requestutils decodeparameters decodedparamreplacement  params
this parametermap putall params
// rebuild the url with the 'x' param removed
int pos1   url indexof
if  pos1     1
throw new wicketruntimeexception
int pos2   url indexof
appendingstringbuffer urlbuf   new appendingstringbuffer url length
encodedparamreplacement length
urlbuf append url subsequence 0  pos1   1
urlbuf append encodedparamreplacement
if  pos2     1
urlbuf append url substring pos2
this url   urlbuf tostring
// determine the index for the relative path.
this startrelativeurl   url indexof request getrelativeurl
/**
* delegate to the original request
*
* @see org.apache.wicket.request#getlocale()
*/
public locale getlocale
return this request getlocale
/**
* @see org.apache.wicket.request#getparameter(java.lang.string)
*/
public string getparameter final string key
if  key    null
return null
object val   this parametermap get key
if  val    null
return null
else if  val instanceof string
string arrayval    string val
return arrayval length > 0 ? arrayval   null
else if  val instanceof string
return  string val
else
// never happens, just being defensive
return val tostring
/**
* @see org.apache.wicket.request#getparametermap()
*/
public map getparametermap
return this parametermap
/**
* @see org.apache.wicket.request#getparameters(java.lang.string)
*/
public string getparameters final string key
if  key    null
return null
object val   this parametermap get key
if  val    null
return null
else if  val instanceof string
return  string val
else if  val instanceof string
return new string    string val
else
// never happens, just being defensive
return new string   val tostring
/**
* @see org.apache.wicket.request#getpath()
*/
public string getpath
// hasn't changed. we only encoded the querystring
return this request getpath
/**
* @see org.apache.wicket.request#getrelativeurl()
*/
public string getrelativeurl
return this url substring this startrelativeurl
/**
* @see org.apache.wicket.request#geturl()
*/
public string geturl
return this url
/**
*
*/
public class hackattackexception extends wicketruntimeexception
private static final long serialversionuid   1l
/**
* construct.
*
* @param msg
*/
public hackattackexception final string msg
super msg
/**
* no stack trace. we won't tell the hackers about the internals of
* wicket
*
* @see java.lang.throwable#getstacktrace()
*/
public stacktraceelement getstacktrace
return new stacktraceelement
/**
* no additional information. we won't tell the hackers about the
* internals of wicket
*
* @see java.lang.throwable#tostring()
*/
public string tostring
return getmessage