/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples nested
import java util list
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html basic label
import org apache wicket markup html list listitem
import org apache wicket markup html list listview
import org apache wicket markup html panel panel
/**
* this example list knows how to display sublists. it expects a list where each
* element is either a string or another list.
*
* @author eelco hillenius
*/
public final class recursivepanel extends panel
/**
* constructor.
*
* @param id
*            the id of this component
* @param list
*            a list where each element is either a string or another list
*/
public recursivepanel final string id  list list
super id
add new rows    list
setversioned false
/**
* the list class.
*/
private static class rows extends listview
/**
* construct.
*
* @param name
*            name of the component
* @param list
*            a list where each element is either a string or another
*            list
*/
public rows string name  list list
super name  list
/**
* @see org.apache.wicket.markup.html.list.listview#populateitem(org.apache.wicket.markup.html.list.listitem)
*/
protected void populateitem listitem listitem
object modelobject   listitem getmodelobject
if  modelobject instanceof list
// create a panel that renders the sub lis
recursivepanel nested   new recursivepanel     list modelobject
listitem add nested
// if the current element is a list, we create a dummy row/
// label element
// as we have to confirm to our html definition, and set it's
// visibility
// property to false as we do not want li tags to be rendered.
webmarkupcontainer row   new webmarkupcontainer
row setvisible false
row add new webmarkupcontainer
listitem add row
else
// if the current element is not a list, we create a dummy panel
// element
// to confirm to our html definition, and set this panel's
// visibility
// property to false to avoid having the ul tag rendered
recursivepanel nested   new recursivepanel    null
nested setvisible false
listitem add nested
// add the row (with the li element attached, and the label with
// the
// row's actual value to display
webmarkupcontainer row   new webmarkupcontainer
row add new label    modelobject tostring
listitem add row