/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html form upload
import org apache wicket iclusterable
import org apache wicket util lang bytes
import org apache wicket util time duration
/**
* holds information about an upload, also has useful querying methods.
*
* @author igor vaynberg (ivaynberg)
*
*/
public class uploadinfo implements iclusterable
private static final long serialversionuid   1l
private transient long timestarted
private transient long totalbytes
private transient long bytesuploaded
/**
* @param totalbytes
*/
public uploadinfo int totalbytes
timestarted   system currenttimemillis
this totalbytes   totalbytes
/**
* @return bytes uploaded so far
*/
public long getbytesuploaded
return bytesuploaded
/**
* sets bytes uploaded so far
*
* @param bytesuploaded
*/
public void setbytesuploaded long bytesuploaded
this bytesuploaded   bytesuploaded
/**
* @return human readable string of bytes uploaded so far
*/
public string getbytesuploadedstring
return bytes bytes bytesuploaded  tostring
/**
* @return human readable string of total number of bytes
*/
public string gettotalbytesstring
return bytes bytes totalbytes  tostring
/**
* @return total bytes in the upload
*/
public long gettotalbytes
return totalbytes
/**
* @return milliseconds elapsed since upload started
*/
public long getelapsedmilliseconds
return system currenttimemillis     timestarted
/**
* @return seconds elapsed since upload started
*/
public long getelapsedseconds
return getelapsedmilliseconds     1000l
/**
* @return transfer rate in bits per second
*/
public long gettransferratebps
return bytesuploaded   math max getelapsedseconds    1
/**
* @return transfer rate in a human readable string
*/
public string gettransferratestring
return bytes bytes gettransferratebps    tostring
/**
* @return percent of the upload completed
*/
public int getpercentagecomplete
if  totalbytes  0  return 100
return  int    double bytesuploaded    double totalbytes    100
/**
* @return estimate of the remaining number of milliseconds
*/
public long getremainingmilliseconds
int percentagecomplete   getpercentagecomplete
long totaltime     getelapsedseconds     100    math max percentagecomplete  1
long remainingtime    totaltime   getelapsedseconds
long remainingtimeinmillis   remainingtime   1000
return remainingtimeinmillis
/**
* @return estimate of the remaning time in a human readable string
*/
public string getremainingtimestring
return duration milliseconds getremainingmilliseconds    tostring