/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions breadcrumb panel
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket extensions breadcrumb breadcrumblink
import org apache wicket extensions breadcrumb ibreadcrumbmodel
import org apache wicket extensions breadcrumb ibreadcrumbparticipant
import org apache wicket markup html panel panel
import org apache wicket model imodel
import org apache wicket version undo change
/**
* a panel that participates with a {@link ibreadcrumbmodel bread crumb model}.
* the idea is that you would have a dialog-like component that is much like a
* wizard, but more decoupled. a typical setup is that you have a panel, where
* the content is dynamic but hierarchical in nature, and that there are links
* on the panel that <i>take you deeper into the hierarchy<i>
*
* <p>
* an example of using {@link breadcrumbpanel bread crumb panels} and
* {@link breadcrumblink bread crumb links}:
*
* <pre>
* add(new breadcrumblink(&quot;mylink&quot;, breadcrumbmodel)
* {
* 	protected ibreadcrumbparticipant getparticipant(string componentid)
* 	{
* 		return new mypanel(componentid, breadcrumbmodel);
* 	}
* });
* </pre>
*
* where <tt>mypanel</tt> is a {@link breadcrumbpanel bread crumb panel} and
* the link is added to another {@link breadcrumbpanel bread crumb panel}
* instance (this). when clicked, mypanel will replace the panel that the link
* is placed on, and it will set (and add) <tt>mypanel</tt> as the active
* bread crumb in the {@link ibreadcrumbmodel bread crumb component model}.
* </p>
*
* @author eelco hillenius
*/
public abstract class breadcrumbpanel extends panel implements ibreadcrumbparticipant
private static final long serialversionuid   1l
/** the bread crumb model. */
private ibreadcrumbmodel breadcrumbmodel
/**
* construct.
*
* @param id
*            component id
* @param breadcrumbmodel
*            the bread crumb model
*/
public breadcrumbpanel string id  ibreadcrumbmodel breadcrumbmodel
super id
this breadcrumbmodel   breadcrumbmodel
/**
* construct.
*
* @param id
*            component id
* @param breadcrumbmodel
*            the bread crumb model
* @param model
*            the model
*/
public breadcrumbpanel string id  ibreadcrumbmodel breadcrumbmodel  imodel model
super id  model
this breadcrumbmodel   breadcrumbmodel
/**
* activates the {@link breadcrumbpanel bread crumb panel} that is the
* result of calling
* {@link ibreadcrumbpanelfactory#create(string, ibreadcrumbmodel) the create method}
* of the bread crumb panel factory.
*
* @param breadcrumbpanelfactory
*/
public void activate ibreadcrumbpanelfactory breadcrumbpanelfactory
activate breadcrumbpanelfactory create getid    breadcrumbmodel
/**
* activates the provided participant, which typically has the effect of
* replacing this current panel with the one provided - as the participant
* typically would be a {@link breadcrumbpanel bread crumb panel} - and
* updating the bread crumb model of this panel, pushing the bread crumb for
* the given participant on top.
*
* @param participant
*            the participant to set as the active one
*/
public void activate ibreadcrumbparticipant participant
// get the currently active particpant
final ibreadcrumbparticipant active   breadcrumbmodel getactive
if  active    null
throw new illegalstateexception
this
// add back button support
addstatechange new change
private static final long serialversionuid   1l
public void undo
breadcrumbmodel setactive active
// set the bread crumb panel as the active one
breadcrumbmodel setactive participant
/**
* gets the bread crumb panel.
*
* @return the bread crumb panel
*/
public final ibreadcrumbmodel getbreadcrumbmodel
return breadcrumbmodel
/**
* the participating component == this.
*
* @see org.apache.wicket.extensions.breadcrumb.ibreadcrumbparticipant#getcomponent()
*/
public component getcomponent
return this
/**
* if the previous participant is not null (and a component, which it should
* be), replace that component on it's parent with this one.
*
* @see org.apache.wicket.extensions.breadcrumb.ibreadcrumbparticipant#onactivate(org.apache.wicket.extensions.breadcrumb.ibreadcrumbparticipant)
*/
public void onactivate ibreadcrumbparticipant previous
if  previous    null
markupcontainer parent   previous getcomponent   getparent
if  parent    null
final string thisid   getid
if  parent get thisid     null
parent replace this
else
// try to search downwards to match the id
// note unfortunately, we can't rely on the path pre 2.0
component c    component parent visitchildren new ivisitor
public object component component component
if  component getid   equals thisid
return component
return ivisitor continue_traversal
if  c    null
// not found... do a reverse search (upwards)
c    component parent visitparents component class  new ivisitor
public object component component component
if  component getid   equals thisid
return component
return ivisitor continue_traversal
// replace if found
if  c    null
c replacewith this
else if  getparent      null
getparent   replace this
/**
* sets the bread crumb panel.
*
* @param breadcrumbmodel
*            the bread crumb panel
*/
public final void setbreadcrumbmodel ibreadcrumbmodel breadcrumbmodel
this breadcrumbmodel   breadcrumbmodel