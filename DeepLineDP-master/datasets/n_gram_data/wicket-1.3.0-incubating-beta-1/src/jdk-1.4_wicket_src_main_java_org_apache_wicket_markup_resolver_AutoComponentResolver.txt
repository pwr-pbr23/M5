/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import java lang reflect constructor
import java lang reflect invocationtargetexception
import java lang reflect method
import java util hashmap
import java util iterator
import java util locale
import java util map
import org apache wicket application
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup markupexception
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup parser filter wickettagidentifier
import org apache wicket util convert iconverter
/**
* &lt;wicket:component class="myapp.mytable" key=value&gt; tags may be used to
* add wicket components (e.g. a specialized pageablelistview) and pass
* parameters (e.g. the number of rows per list view page). the object is
* automatically instantiated, initialized and added to the page's component
* hierarchy.
* <p>
* note: the component must have a constructor with a single string parameter:
* the component name.
* <p>
* note: the component must provide a setter for each key/value attribute
* provided.
*
* @author juergen donnerstag
*/
public final class autocomponentresolver implements icomponentresolver
private static final long serialversionuid   1l
static
// register "wicket:component"
wickettagidentifier registerwellknowntagname
/**
* temporary storage for containers currently being rendered. thus child
* components can be re-parented. remember: <wicket:component> are an
* exception to the rule. though the markup of the children are nested
* inside <wicket:component>, their respective java components are not. they
* must be added to the parent container of <wicket:component>.
*/
private final map nestedcomponents   new hashmap
/**
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer,
*      markupstream, componenttag)
* @param container
*            the container parsing its markup
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @return true, if componentid was handle by the resolver. false, otherwise
*/
public final boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// it must be <wicket:...>
if  tag instanceof wickettag
// it must be <wicket:component...>
final wickettag wickettag    wickettag tag
if  wickettag iscomponenttag
// create and initialize the component
final component component   createcomponent container  wickettag
if  component    null
// 1. push the current component onto the stack
nestedcomponents put component  null
try
// 2. add it to the hierarchy and render it
container autoadd component
finally
// 3. remove it from the stack
nestedcomponents remove component
return true
// re-parent children of <wicket:component>.
if   tag getid      null     nestedcomponents containskey container
markupcontainer parent   container getparent
// take care of nested <wicket:component>
while   parent    null     nestedcomponents containskey parent
parent   parent getparent
if  parent    null
final component component   parent get tag getid
if  component    null
component render markupstream
return true
// we were not able to handle the componentid
return false
/**
* based on the tag, create and initalize the component.
*
* @param container
*            the current container. the new compent will be added to that
*            container.
* @param tag
*            the tag containing the information about component
* @return the new component
* @throws wicketruntimeexception
*             in case the component could not be created
*/
// wicket is current not using any bean util jar, which is why ...
private final component createcomponent final markupcontainer container  final wickettag tag
// if no component name is given, create a page-unique one yourself.
string componentid   tag getnameattribute
if  componentid    null
componentid       container getpage   getautoindex
// get the component class name
final string classname   tag getattributes   getstring
if   classname    null      classname trim   length      0
throw new markupexception
// load the class. in case a groovy class resolver has been provided,
// the name might be a groovy file.
// note: spring based components are not supported this way. may be we
// should provide a componentfactory like we provide a pagefactory.
final class componentclass   container getsession   getclassresolver   resolveclass
classname
// construct the component. it must have a constructor with a single
// string (componentid) parameter.
final component component
try
final constructor constructor   componentclass
getconstructor new class   string class
component    component constructor newinstance new object   componentid
catch  nosuchmethodexception e
throw new markupexception
e getmessage
catch  invocationtargetexception e
throw new markupexception
e getmessage
catch  illegalaccessexception e
throw new markupexception
e getmessage
catch  instantiationexception e
throw new markupexception
e getmessage
catch  classcastexception e
throw new markupexception
e getmessage
catch  securityexception e
throw new markupexception
e getmessage
// get all remaining attributes and invoke the component's setters
iterator iter   tag getattributes   entryset   iterator
while  iter hasnext
final map entry entry    map entry iter next
final string key    string entry getkey
final string value    string entry getvalue
// ignore attributes 'name' and 'class'
if    equalsignorecase key        equalsignorecase key
continue
invokesetter component  key  value  container getlocale
return component
/**
* invoke the setter method for 'name' on object and provide the 'value'
*
* @param object
* @param name
* @param value
* @param locale
*/
private final void invokesetter final object object  final string name  final string value
final locale locale
// note: tag attributes are maintained in a lowercasekeyvaluemap, thus
// 'name' will be all lowercase.
// note: because the attributes are all lowercase, there is slight
// possibility of error due to naming issues.
// note: all setters must start with "set"
// get the setter for the attribute
final string methodname       name
final method methods   object getclass   getmethods
method method   null
for  int i   0  i < methods length  i
if  methods getname   equalsignorecase methodname
method   methods
if  method    null
throw new markupexception
methodname
// the method must have a single parameter
final class parameterclasses   method getparametertypes
if  parameterclasses length    1
throw new markupexception
methodname
// convert the parameter if necessary, depending on the setter's
// attribute
final class paramclass   parameterclasses
try
final iconverter converter   application get   getapplicationsettings
getconverterlocatorfactory   newconverterlocator   getconverter paramclass
final object param   converter converttoobject value  locale
if  param    null
throw new markupexception     value
paramclass
method invoke object  new object   param
catch  illegalaccessexception ex
throw new markupexception
methodname
ex
catch  invocationtargetexception ex
throw new markupexception
methodname
ex
catch  numberformatexception ex
throw new markupexception
methodname
ex