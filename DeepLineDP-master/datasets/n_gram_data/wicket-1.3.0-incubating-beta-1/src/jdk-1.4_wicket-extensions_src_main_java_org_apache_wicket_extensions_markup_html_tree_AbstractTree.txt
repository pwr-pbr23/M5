/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html tree
import java util enumeration
import javax swing tree defaultmutabletreenode
import javax swing tree defaulttreeselectionmodel
import javax swing tree treemodel
import javax swing tree treenode
import javax swing tree treepath
import javax swing tree treeselectionmodel
import org apache wicket markup html panel panel
/**
* base component for trees. the trees from this package work with the swing
* tree models and {@link javax.swing.tree.defaultmutabletreenode}s. hence,
* users can re-use their swing tree models.
*
* @author eelco hillenius
*/
public abstract class abstracttree extends panel
/** abstracttree state for this component. */
private treestate treestate
/**
* construct using the given model as the tree model to use. a new tree
* state will be constructed by calling newtreestate.
*
* @param id
*            the id of this component
* @param model
*            the underlying tree model
*/
public abstracttree final string id  final treemodel model
super id
this treestate   newtreestate model
/**
* construct using the given tree state that holds the model to be used as
* the tree model.
*
* @param id
*            the id of this component
* @param treestate
*            treestate that holds the underlying tree model
*/
public abstracttree final string id  final treestate treestate
super id
this treestate   treestate
/**
* ensures that the node identified by the specified path is collapsed and
* viewable.
*
* @param path
*            the <code>treepath</code> identifying a node
*/
public void collapsepath treepath path
setexpandedstate path  false
/**
* collapses all the siblings of a given node.
*
* @param node
*            the node of which to collapse the siblings.
*/
public void collapsesiblings final defaultmutabletreenode node
// collapse all previous siblings
defaultmutabletreenode previousnode   node getprevioussibling
while  null    previousnode
final treepath siblingselection   new treepath previousnode getpath
setexpandedstate siblingselection  false      inverse
previousnode   previousnode getprevioussibling
// collapse all following siblings
defaultmutabletreenode nextnode   node getnextsibling
while  null    nextnode
final treepath siblingselection   new treepath nextnode getpath
setexpandedstate siblingselection  false      inverse
// todo: check if previousnode can be null? if so, needs trapping - gwyn
nextnode   previousnode getnextsibling
/**
* expand or collapse all nodes.
*
* @param expand
*            if true, expand all nodes in the tree. else collapse all nodes
*            in the tree.
*/
public void expandall boolean expand
treenode root    treenode gettreestate   getmodel   getroot
expandall new treepath root   expand
/**
* ensures that the node identified by the specified path is expanded and
* viewable. if the last item in the path is a leaf, this will have no
* effect.
*
* @param path
*            the <code>treepath</code> identifying a node
*/
public void expandpath treepath path
// only expand if not leaf!
treemodel model   gettreestate   getmodel
if  path    null    model    null     model isleaf path getlastpathcomponent
setexpandedstate path  true
/**
* gets the current tree state.
*
* @return the tree current tree state
*/
public final treestate gettreestate
return treestate
/**
* convenience method that determines whether the path of the given tree
* node is expanded in this tree's state.
*
* @param node
*            the tree node
* @return whether the path of the given tree node is expanded
*/
public final boolean isexpanded defaultmutabletreenode node
return isexpanded new treepath node getpath
/**
* convenience method that determines whether the given path is expanded in
* this tree's state.
*
* @param path
*            the tree path
* @return whether the given path is expanded
*/
public final boolean isexpanded treepath path
return treestate isexpanded path
/**
* gets whether the tree root node should be displayed.
*
* @return whether the tree root node should be displayed
*/
public final boolean isrootvisible
return treestate isrootvisible
/**
* returns true if the value identified by path is currently viewable, which
* means it is either the root or all of its parents are expanded.
* otherwise, this method returns false.
*
* @param path
*            the path
*
* @return true if the node is viewable, otherwise false
*/
public final boolean isvisible treepath path
if  path    null
treepath parentpath   path getparentpath
if  parentpath    null
return isexpanded parentpath
// root.
return true
return false
/**
* creates a new tree state by creating a new {@link treestate}object,
* which is then set as the current tree state, creating a new
* {@link treeselectionmodel}and then calling settreemodel with this
*
* @param model
*            the model that the new tree state applies to
* @return the tree state
*/
public treestate newtreestate final treemodel model
return newtreestate model  true
/**
* sets the new expanded state, based on the given node
*
* @param node
*            the tree node model
*/
public void setexpandedstate final defaultmutabletreenode node
final treepath selection   new treepath node getpath
setexpandedstate selection    treestate isexpanded selection        inverse
// if set to single_tree_selection, collapse all sibling nodes
final int selectiontype   gettreestate   getselectionmodel   getselectionmode
if  treeselectionmodel single_tree_selection    selectiontype
collapsesiblings node
/**
* sets the expanded property in the stree state for selection.
*
* @param selection
*            the selection to set the expanded property for
* @param expanded
*            true if the selection is expanded, false otherwise
*/
public void setexpandedstate final treepath selection  final boolean expanded
treestate setexpandedstate selection  expanded
/**
* sets whether the tree root node should be displayed.
*
* @param rootvisible
*            whether the tree node should be displayed
*/
public void setrootvisible final boolean rootvisible
treestate setrootvisible rootvisible
/**
* sets the new expanded state (to true), based on the given user node and
* set the tree path to the currently selected.
*
* @param node
*            the tree node model
*/
public void setselected final defaultmutabletreenode node
final treepath selection   new treepath node getpath
treestate setselectedpath selection
setexpandedstate selection  true
/**
* sets the current tree model.
*
* @param treemodel
*            the tree model to set as the current one
*/
public void settreemodel final treemodel treemodel
this treestate   newtreestate treemodel
/**
* sets the current tree state to the given tree state.
*
* @param treestate
*            the tree state to set as the current one
*/
public void settreestate final treestate treestate
this treestate   treestate
/**
* gives the current tree model as a string.
*
* @return the current tree model as a string
*/
public string tostring
stringbuffer b   new stringbuffer
treestate state   gettreestate
treemodel treemodel   null
if  state    null
treemodel   state getmodel
if  treemodel    null
stringbuffer tabs   new stringbuffer
defaultmutabletreenode rootnode    defaultmutabletreenode treemodel getroot
enumeration e   rootnode preorderenumeration
while  e hasmoreelements
defaultmutabletreenode node    defaultmutabletreenode e nextelement
tabs delete 0  tabs length
tabs append
for  int i   0  i < node getlevel    i
tabs append
b append tabs  append node  append
else
b append
return b tostring
/**
* creates a new tree state by creating a new {@link treestate}object,
* which is then set as the current tree state, creating a new
* {@link treeselectionmodel}and then calling settreemodel with this
*
* @param treemodel
*            the model that the new tree state applies to
* @param rootvisible
*            whether the tree node should be displayed
* @return the tree state
*/
protected final treestate newtreestate final treemodel treemodel  final boolean rootvisible
final treestate treestate   new treestate
final treeselectionmodel treeselectionmodel   new defaulttreeselectionmodel
treeselectionmodel setselectionmode treeselectionmodel discontiguous_tree_selection
treestate setmodel treemodel
treestate setselectionmodel treeselectionmodel
treestate setrootvisible rootvisible
treemodel addtreemodellistener treestate
return treestate
/**
* expand recursively.
*
* @param parent
*            the current parent node
* @param expand
*            whether to expand or to collapse
*/
private final void expandall treepath parent  boolean expand
treenode node    treenode parent getlastpathcomponent
if  node getchildcount   >  0
for  enumeration e   node children    e hasmoreelements
treenode n    treenode e nextelement
treepath path   parent pathbyaddingchild n
expandall path  expand
if  expand
expandpath parent
else
collapsepath parent