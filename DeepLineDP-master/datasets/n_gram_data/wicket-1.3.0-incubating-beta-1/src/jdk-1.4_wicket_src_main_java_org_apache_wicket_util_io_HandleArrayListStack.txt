/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java util arraylist
import java util collection
import java util emptystackexception
/**
* todo document me.
*
* @author jcompagner
*/
final class handlearrayliststack extends arraylist
private static final long serialversionuid   1l
/**
* construct.
*/
public handlearrayliststack
this 10
/**
* construct.
*
* @param collection
*            the collection to add
*/
public handlearrayliststack final collection collection
super collection
/**
* construct.
*
* @param initialcapacity
*            initial capacity of the stack
*/
public handlearrayliststack final int initialcapacity
super initialcapacity
/**
* tests if this stack is empty.
*
* @return <code>true</code> if and only if this stack contains no items;
*         <code>false</code> otherwise.
*/
public final boolean empty
return size      0
/**
* @see java.util.arraylist#indexof(java.lang.object)
*/
public int indexof object elem
int size   size
if  elem    null
for  int i   0  i < size  i
if  get i     null
return i
else
for  int i   0  i < size  i
if  elem    get i
return i
return  1
/**
* @see java.util.arraylist#lastindexof(java.lang.object)
*/
public int lastindexof object elem
if  elem    null
for  int i   size     1  i >  0  i
if  get i     null
return i
else
for  int i   size     1  i >  0  i
if  elem    get i
return i
return  1
/**
* looks at the object at the top of this stack without removing it.
*
* @return the object at the top of this stack
* @exception emptystackexception
*                if this stack is empty.
*/
public final object peek
int size   size
if  size    0
throw new emptystackexception
return get size   1
/**
* removes the object at the top of this stack and returns that object.
*
* @return the object at the top of this stack
* @exception emptystackexception
*                if this stack is empty.
*/
public final object pop
final object top   peek
remove size     1
return top
/**
* pushes an item onto the top of this stack.
*
* @param item
*            the item to be pushed onto this stack.
*/
public final void push final object item
add item
/**
* returns the 1-based position where an object is on this stack. if the
* object <tt>o</tt> occurs as an item in this stack, this method returns
* the distance from the top of the stack of the occurrence nearest the top
* of the stack; the topmost item on the stack is considered to be at
* distance <tt>1</tt>. the <tt>equals</tt> method is used to compare
* <tt>o</tt> to the items in this stack.
*
* @param o
*            the desired object.
* @return the 1-based position from the top of the stack where the object
*         is located; the return value <code>-1</code> indicates that the
*         object is not on the stack.
*/
public final int search final object o
int i   lastindexof o
if  i >  0
return size     i
return  1