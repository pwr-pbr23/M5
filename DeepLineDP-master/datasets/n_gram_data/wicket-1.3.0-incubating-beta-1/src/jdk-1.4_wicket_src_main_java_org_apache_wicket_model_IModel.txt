/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket model
/**
* a imodel wraps the actual model object used by a component. imodel
* implementations are used as a facade for the real model so that users have
* control over the actual persistence strategy. note that objects implementing
* this interface will be stored in the session. hence, you should use
* (non-transient) instance variables sparingly.
* <ul>
* <li><b>basic models </b>- to implement a basic (non-detachable) model which
* holds its entire state in the session, you can either subclass
* {@link abstractmodel}, or use the simple model wrapper {@link model}
* directly.
*
* <li><b>detachable models </b>- imodel inherits a hook,
* {@link idetachable#detach()}, so that interface implementers can detach
* transient information when a model is no longer being actively used by the
* framework. this reduces memory use and reduces the expense of replicating the
* model in a clustered server environment. to implement a detachable model, you
* should generally extend {@link org.apache.wicket.model.abstractdetachablemodel}instead
* of implementing imodel directly.
*
* <li><b>property models </b>- the abstractpropertymodel class provides
* default functionality for property models. a property model provides access
* to a particular property of its wrapped model.
*
* <li><b>compound property models </b>- the imodel interface is parameterized
* by component, allowing a model to be shared among several components. when
* the {@link imodel#getobject()}method is called, the value returned will
* depend on the component which is asking for the value. likewise, the
* {@link imodel#setobject(object)}method sets a different property depending
* on which component is doing the setting. for more information on
* compoundpropertymodels and model inheritance, see
* {@link org.apache.wicket.model.compoundpropertymodel}and {@link org.apache.wicket.page}.
* </ul>
*
* @see org.apache.wicket.component#sameinnermostmodel(org.apache.wicket.component)
* @see org.apache.wicket.component#sameinnermostmodel(imodel)
*
* @author chris turner
* @author eelco hillenius
* @author jonathan locke
*
* todo 3.0: vote on renaming get/setobject to get/setvalue
*/
public interface imodel extends idetachable
/**
* gets the model object.
*
* @return the model object
*/
object getobject
/**
* sets the model object.
*
* @param object
*            the model object
*/
void setobject final object object