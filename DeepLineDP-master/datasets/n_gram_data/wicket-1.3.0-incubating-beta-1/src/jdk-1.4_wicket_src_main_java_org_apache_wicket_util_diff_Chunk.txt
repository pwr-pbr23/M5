/*
* ====================================================================
*
* the apache software license, version 1.1
*
* copyright (c) 1999-2003 the apache software foundation. all rights reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. redistributions of source code must retain the above copyright notice,
* this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright notice,
* this list of conditions and the following disclaimer in the documentation
* and/or other materials provided with the distribution.
*
* 3. the end-user documentation included with the redistribution, if any, must
* include the following acknowledgement: "this product includes software
* developed by the apache software foundation (http://www.apache.org/)."
* alternately, this acknowledgement may appear in the software itself, if and
* wherever such third-party acknowledgements normally appear.
*
* 4. the names "the jakarta project", "commons", and "apache software
* foundation" must not be used to endorse or promote products derived from this
* software without prior written permission. for written permission, please
* contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache" nor may
* "apache" appear in their names without prior written permission of the apache
* software foundation.
*
* this software is provided ``as is'' and any expressed or implied warranties,
* including, but not limited to, the implied warranties of merchantability and
* fitness for a particular purpose are disclaimed. in no event shall the apache
* software foundation or its contributors be liable for any direct, indirect,
* incidental, special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of use, data,
* or profits; or business interruption) however caused and on any theory of
* liability, whether in contract, strict liability, or tort (including
* negligence or otherwise) arising in any way out of the use of this software,
* even if advised of the possibility of such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many individuals on
* behalf of the apache software foundation. for more information on the apache
* software foundation, please see <http://www.apache.org/>.
*
*/
package org apache wicket util diff
import java util arraylist
import java util arrays
import java util iterator
import java util list
/**
* holds a information about a parrt of the text involved in a differencing or
* patching operation.
*
* @version $id: chunk.java,v 1.1 2006/03/12 00:24:21 juanca exp $
* @author <a href="mailto:juanco@suigeneris.org">juanco anez</a>
* @see diff
* @see delta
*/
public class chunk extends tostring
protected int anchor
protected int count
protected list chunk
/**
* creates a chunk that doesn't copy the original text.
*
* @param pos
*            the start position in the text.
* @param count
*            the size of the chunk.
*/
public chunk int pos  int count
this anchor   pos
this count    count >  0 ? count   0
/**
* creates a chunk and saves a copy the original chunk's text.
*
* @param iseq
*            the original text.
* @param pos
*            the start position in the text.
* @param count
*            the size of the chunk.
*/
public chunk object iseq  int pos  int count
this pos  count
chunk   slice iseq  pos  count
/**
* creates a chunk that will be displaced in the resulting text, and saves a
* copy the original chunk's text.
*
* @param iseq
*            the original text.
* @param pos
*            the start position in the text.
* @param count
*            the size of the chunk.
* @param offset
*            the position the chunk should have in the resulting text.
*/
public chunk object iseq  int pos  int count  int offset
this offset  count
chunk   slice iseq  pos  count
/**
* creates a chunk and saves a copy the original chunk's text.
*
* @param iseq
*            the original text.
* @param pos
*            the start position in the text.
* @param count
*            the size of the chunk.
*/
public chunk list iseq  int pos  int count
this pos  count
chunk   slice iseq  pos  count
/**
* creates a chunk that will be displaced in the resulting text, and saves a
* copy the original chunk's text.
*
* @param iseq
*            the original text.
* @param pos
*            the start position in the text.
* @param count
*            the size of the chunk.
* @param offset
*            the position the chunk should have in the resulting text.
*/
public chunk list iseq  int pos  int count  int offset
this offset  count
chunk   slice iseq  pos  count
/**
* returns the anchor position of the chunk.
*
* @return the anchor position.
*/
public int anchor
return anchor
/**
* returns the size of the chunk.
*
* @return the size.
*/
public int size
return count
/**
* returns the index of the first line of the chunk.
*
* @return int
*/
public int first
return anchor
/**
* returns the index of the last line of the chunk.
*
* @return int
*/
public int last
return anchor     size     1
/**
* returns the <i>from</i> index of the chunk in rcs terms.
*
* @return int
*/
public int rcsfrom
return anchor   1
/**
* returns the <i>to</i> index of the chunk in rcs terms.
*
* @return int
*/
public int rcsto
return anchor   count
/**
* returns the text saved for this chunk.
*
* @return the text.
*/
public list chunk
return chunk
/**
* verifies that this chunk's saved text matches the corresponding text in
* the given sequence.
*
* @param target
*            the sequence to verify against.
* @return true if the texts match.
*/
public boolean verify list target
if  chunk    null
return true
if  last   > target size
return false
for  int i   0  i < count  i
if   target get anchor   i  equals chunk get i
return false
return true
/**
* delete this chunk from he given text.
*
* @param target
*            the text to delete from.
*/
public void applydelete list target
for  int i   last    i >  first    i
target remove i
/**
* add the text of this chunk to the target at the given position.
*
* @param start
*            where to add the text.
* @param target
*            the text to add to.
*/
public void applyadd int start  list target
iterator i   chunk iterator
while  i hasnext
target add start    i next
/**
* provide a string image of the chunk using the an empty prefix and
* postfix.
*
* @param s
*/
public void tostring stringbuffer s
tostring s
/**
* provide a string image of the chunk using the given prefix and postfix.
*
* @param s
*            where the string image should be appended.
* @param prefix
*            the text thatshould prefix each line.
* @param postfix
*            the text that should end each line.
* @return stringbuffer
*/
public stringbuffer tostring stringbuffer s  string prefix  string postfix
if  chunk    null
iterator i   chunk iterator
while  i hasnext
s append prefix
s append i next
s append postfix
return s
/**
* retreives the specified part from a {@link list list}.
*
* @param seq
*            the list to retreive a slice from.
* @param pos
*            the start position.
* @param count
*            the number of items in the slice.
* @return a {@link list list} containing the specified items.
*/
public static list slice list seq  int pos  int count
if  count <  0
return new arraylist seq sublist pos  pos
else
return new arraylist seq sublist pos  pos   count
/**
* retrieves a slice from an {@link object object} array.
*
* @param seq
*            the list to retreive a slice from.
* @param pos
*            the start position.
* @param count
*            the number of items in the slice.
* @return a {@link list list} containing the specified items.
*/
public static list slice object seq  int pos  int count
return slice arrays aslist seq   pos  count
/**
* provide a string representation of the numeric range of this chunk.
*
* @return string
*/
public string rangestring
stringbuffer result   new stringbuffer
rangestring result
return result tostring
/**
* provide a string representation of the numeric range of this chunk.
*
* @param s
*            where the string representation should be appended.
*/
public void rangestring stringbuffer s
rangestring s
/**
* provide a string representation of the numeric range of this chunk.
*
* @param s
*            where the string representation should be appended.
* @param separ
*            what to use as line separator.
*/
public void rangestring stringbuffer s  string separ
if  size   <  1
s append integer tostring rcsfrom
else
s append integer tostring rcsfrom
s append separ
s append integer tostring rcsto