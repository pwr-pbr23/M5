/*
* ====================================================================
*
* the apache software license, version 1.1
*
* copyright (c) 1999-2003 the apache software foundation.
* all rights reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution, if
*    any, must include the following acknowledgement:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgement may appear in the software itself,
*    if and wherever such third-party acknowledgements normally appear.
*
* 4. the names "the jakarta project", "commons", and "apache software
*    foundation" must not be used to endorse or promote products derived
*    from this software without prior written permission. for written
*    permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache"
*    nor may "apache" appear in their names without prior written
*    permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*
*/
package org apache wicket util diff
import java util arraylist
import java util arrays
import java util collections
import java util list
import java util random
import org apache wicket util diff myers myersdiff
/**
* implements a differencing engine that works on arrays of
* {@link object object}.
*
* <p>
* within this library, the word <i>text</i> means a unit of information
* subject to version control.
*
* <p>
* text is represented as <code>object[]</code> because the diff engine is
* capable of handling more than plain ascci. in fact, arrays of any type that
* implements {@link java.lang.object#hashcode hashcode()} and
* {@link java.lang.object#equals equals()} correctly can be subject to
* differencing using this library.
* </p>
*
* <p>
* this library provides a framework in which different differencing algorithms
* may be used. if no algorithm is specififed, a default algorithm is used.
* </p>
*
* @version $revision: 1.1 $ $date: 2006/03/12 00:24:21 $
* @author <a href="mailto:juanco@suigeneris.org">juanco anez</a>
* @see delta
* @see diffalgorithm
*
* modifications:
*
* 27 apr 2003 bwm
*
* added some comments whilst trying to figure out the algorithm
*
* 03 may 2003 bwm
*
* factored out the algorithm implementation into a separate difference
* algorithm class to allow pluggable algorithms.
*/
public class diff extends tostring
/** the standard line separator. */
public static final string nl   system getproperty
/** the line separator to use in rcs format output. */
public static final string rcs_eol
/** the original sequence. */
protected final object orig
/** the differencing algorithm to use. */
protected diffalgorithm algorithm
/**
* create a differencing object using the default algorithm
* @param original
*
* @param the
*            original text that will be compared
*/
public diff object original
this original  null
/**
* create a differencing object using the given algorithm
* @param original
*
* @param o
*            the original text which will be compared against
* @param algorithm
*            the difference algorithm to use.
*/
public diff object original  diffalgorithm algorithm
if  original    null
throw new illegalargumentexception
this orig   original
if  algorithm    null
this algorithm   algorithm
else
this algorithm   defaultalgorithm
protected diffalgorithm defaultalgorithm
return new myersdiff
/**
* compute the difference between an original and a revision.
*
* @param orig
*            the original
* @param rev
*            the revision to compare with the original.
* @return a revision describing the differences
* @throws differentiationfailedexception
*/
public static revision diff object orig  object rev
throws differentiationfailedexception
if  orig    null    rev    null
throw new illegalargumentexception
return diff orig  rev  null
/**
* compute the difference between an original and a revision.
*
* @param orig
*            the original
* @param rev
*            the revision to compare with the original.
* @param algorithm
*            the difference algorithm to use
* @return a revision describing the differences
* @throws differentiationfailedexception
*/
public static revision diff object orig  object rev
diffalgorithm algorithm  throws differentiationfailedexception
if  orig    null    rev    null
throw new illegalargumentexception
return new diff orig  algorithm  diff rev
/**
* compute the difference between the original and a revision.
*
* @param rev
*            the revision to compare with the original.
* @return a revision describing the differences
* @throws differentiationfailedexception
*/
public revision diff object rev  throws differentiationfailedexception
if  orig length    0    rev length    0
return new revision
else
return algorithm diff orig  rev
/**
* compares the two input sequences.
*
* @param orig
*            the original sequence.
* @param rev
*            the revised sequence.
* @return true if the sequences are identical. false otherwise.
*/
public static boolean compare object orig  object rev
if  orig length    rev length
return false
else
for  int i   0  i < orig length  i
if   orig equals rev
return false
return true
/**
* converts an array of {@link object object} to a string using
* {@link diff#nl diff.nl} as the line separator.
*
* @param o
*            the array of objects.
* @return string
*/
public static string arraytostring object o
return arraytostring o  diff nl
/**
* edits all of the items in the input sequence.
*
* @param text
*            the input sequence.
* @return a sequence of the same length with all the lines differing from
*         the corresponding ones in the input.
*/
public static object editall object text
object result   new string
for  int i   0  i < text length  i
result   text
return result
/**
* performs random edits on the input sequence. useful for testing.
*
* @param text
*            the input sequence.
* @return the sequence with random edits performed.
*/
public static object randomedit object text
return randomedit text  text length
/**
* performs random edits on the input sequence. useful for testing.
*
* @param text
*            the input sequence.
* @param seed
*            a seed value for the randomizer.
* @return the sequence with random edits performed.
*/
public static object randomedit object text  long seed
list result   new arraylist arrays aslist text
random r   new random seed
int nops   r nextint 10
for  int i   0  i < nops  i
boolean del   r nextboolean
int pos   r nextint result size     1
int len   math min result size     pos  1   r nextint 4
if  del    result size   > 0
delete
result sublist pos  pos   len  clear
else
for  int k   0  k < len  k    pos
result add pos      i       i       i
return result toarray
/**
* shuffles around the items in the input sequence.
*
* @param text
*            the input sequence.
* @return the shuffled sequence.
*/
public static object shuffle object text
return shuffle text  text length
/**
* shuffles around the items in the input sequence.
*
* @param text
*            the input sequence.
* @param seed
*            a seed value for randomizing the suffle.
* @return the shuffled sequence.
*/
public static object shuffle object text  long seed
list result   new arraylist arrays aslist text
collections shuffle result
return result toarray
/**
* generate a random sequence of the given size.
* @param size
*
* @param the
*            size of the sequence to generate.
* @return the generated sequence.
*/
public static object randomsequence int size
return randomsequence size  size
/**
* generate a random sequence of the given size.
* @param size
*            the size of the sequence to generate.
* @param seed
*            a seed value for randomizing the generation.
* @return the generated sequence.
*/
public static object randomsequence int size  long seed
integer result   new integer
random r   new random seed
for  int i   0  i < result length  i
result   new integer r nextint size
return result