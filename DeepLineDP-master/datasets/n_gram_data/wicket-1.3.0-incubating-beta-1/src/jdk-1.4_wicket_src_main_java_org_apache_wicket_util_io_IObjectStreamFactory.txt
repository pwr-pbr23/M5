/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io ioexception
import java io inputstream
import java io notserializableexception
import java io objectinputstream
import java io objectoutputstream
import java io outputstream
import org apache wicket util lang objects
/**
* interface for serializing and deserializing so that we can very the
* implementation of the {@link objectoutputstream} and
* {@link objectinputstream} implementations.
*
* @see objects#objecttobytearray(object)
* @see objects#bytearraytoobject(byte[])
*
* @author eelcohillenius
*/
public interface iobjectstreamfactory
/**
* default implementation that uses the jdk's plain implementations.
*/
public static final class defaultobjectstreamfactory implements iobjectstreamfactory
/**
* @see org.apache.wicket.util.io.iobjectstreamfactory#newobjectinputstream(java.io.inputstream)
*/
public objectinputstream newobjectinputstream inputstream in  throws ioexception
return new objectinputstream in
/**
* @see org.apache.wicket.util.io.iobjectstreamfactory#newobjectoutputstream(java.io.outputstream)
*/
public objectoutputstream newobjectoutputstream final outputstream out  throws ioexception
final objectoutputstream oos   new objectoutputstream out
return new objectoutputstream
protected void writeobjectoverride final object obj  throws ioexception
try
oos writeobject obj
catch  ioexception e
if  serializablechecker isavailable
// trigger serialization again, but this time gather
// some more info
new serializablechecker  notserializableexception e  writeobject obj
// if we get here, we didn't fail, while we
// should;
throw e
throw e
/**
* gets a new instance of an {@link objectinputstream} with the provided
* {@link inputstream}.
*
* @param in
*            the inpu stream that should be used for the reading
* @return a new object input stream instance
* @throws ioexception
*             if an i/o error occurs while reading stream header
*/
objectinputstream newobjectinputstream inputstream in  throws ioexception
/**
* gets a new instance of an {@link objectoutputstream} with the provided
* {@link outputstream}.
*
* @param out
*            the output stream that should be used for the writing
* @return a new object output stream instance
* @throws ioexception
*             if an i/o error occurs while writing stream header
*/
objectoutputstream newobjectoutputstream outputstream out  throws ioexception