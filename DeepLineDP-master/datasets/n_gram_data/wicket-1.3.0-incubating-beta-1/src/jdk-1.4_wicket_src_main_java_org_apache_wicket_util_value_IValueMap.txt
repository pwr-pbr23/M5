/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util value
import java util map
import org apache wicket util string stringvalue
import org apache wicket util string stringvalueconversionexception
import org apache wicket util time duration
import org apache wicket util time time
/**
* a map interface that holds values, parses strings and exposes a variety of
* convenience methods.
*
* @author jcompagner
*/
public interface ivaluemap extends map
/**
* @see java.util.map#clear()
*/
void clear
/**
* gets a boolean value by key.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
boolean getboolean final string key  throws stringvalueconversionexception
/**
* gets a double value by key.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
double getdouble final string key  throws stringvalueconversionexception
/**
* gets a double using a default if not found.
*
* @param key
*            the key
* @param defaultvalue
*            value to use if no value in map
* @return the value
* @throws stringvalueconversionexception
*/
double getdouble final string key  final double defaultvalue
throws stringvalueconversionexception
/**
* gets a duration.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
duration getduration final string key  throws stringvalueconversionexception
/**
* gets an int.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
int getint final string key  throws stringvalueconversionexception
/**
* gets an int, using a default if not found.
*
* @param key
*            the key
* @param defaultvalue
*            value to use if no value in map
* @return the value
* @throws stringvalueconversionexception
*/
int getint final string key  final int defaultvalue  throws stringvalueconversionexception
/**
* gets a long.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
long getlong final string key  throws stringvalueconversionexception
/**
* gets a long using a default if not found.
*
* @param key
*            the key
* @param defaultvalue
*            value to use if no value in map
* @return the value
* @throws stringvalueconversionexception
*/
long getlong final string key  final long defaultvalue  throws stringvalueconversionexception
/**
* gets a string by key.
*
* @param key
*            the get
* @param defaultvalue
*            default value to return if value is null
* @return the string
*/
string getstring final string key  final string defaultvalue
/**
* gets a string by key.
*
* @param key
*            the get
* @return the string
*/
string getstring final string key
/**
* gets a string by key.
*
* @param key
*            the get
* @return the string
*/
charsequence getcharsequence final string key
/**
* gets a string array by key. if the value was a string[] it will be
* returned directly. if it was a string it will be converted to a string
* array of one. if it was an array of another type a string array will be
* made and the elements will be converted to a string.
*
* @param key
* @return the string array of that key
*/
string getstringarray final string key
/**
* gets a stringvalue by key.
*
* @param key
*            the key
* @return the string value object
*/
stringvalue getstringvalue final string key
/**
* gets a time.
*
* @param key
*            the key
* @return the value
* @throws stringvalueconversionexception
*/
time gettime final string key  throws stringvalueconversionexception
/**
* gets whether this value map is made immutable.
*
* @return whether this value map is made immutable
*/
boolean isimmutable
/**
* makes this value map immutable by changing the underlying map
* representation to a collections "unmodifiablemap". after calling this
* method, any attempt to modify this map will result in a runtime exception
* being thrown by the collections classes.
*
* @return this
*/
ivaluemap makeimmutable
/**
* @see java.util.map#put(object, object)
*/
object put final object key  final object value
/**
* @see java.util.map#putall(java.util.map)
*/
void putall final map map
/**
* @see java.util.map#remove(java.lang.object)
*/
object remove final object key
/**
* provided the hash key is a string and you need to access the value
* ignoring ignoring the keys case (upper or lower letter), than you may use
* this method to get the correct writing.
*
* @param key
* @return the key with the correct writing
*/
string getkey final string key