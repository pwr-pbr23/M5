/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util time
import java util locale
import java util regex matcher
import java util regex pattern
import org apache commons logging log
import org apache wicket util string stringvalue
import org apache wicket util string stringvalueconversionexception
import org apache wicket util thread icode
/**
* a duration is an immutable length of time stored as a number of milliseconds.
* various factory and conversion methods are available for convenience.
* <p>
* these static factory methods allow easy construction of value objects using
* either long values like seconds(2034) or hours(3):
* <p>
* <ul>
* <li>duration.milliseconds(long)
* <li>duration.seconds(int)
* <li>duration.minutes(int)
* <li>duration.hours(int)
* <li>duration.days(int)
* </ul>
* <p>
* or double precision floating point values like days(3.2):
* <p>
* <ul>
* <li>duration.milliseconds(double)
* <li>duration.seconds(double)
* <li>duration.minutes(double)
* <li>duration.hours(double)
* <li>duration.days(double)
* </ul>
* <p>
* in the case of milliseconds(double), the value will be rounded off to the
* nearest integral millisecond using math.round().
* <p>
* the precise number of milliseconds represented by a duration object can be
* retrieved by calling the milliseconds() method. the value of a duration
* object in a given unit like days or hours can be retrieved by calling one of
* the following unit methods, each of which returns a double precision floating
* point number:
* <p>
* <ul>
* <li>seconds()
* <li>minutes()
* <li>hours()
* <li>days()
* </ul>
* <p>
* values can be added and subtracted using the add() and subtract() methods,
* each of which returns a new immutable duration object.
* <p>
* string values can be converted to duration objects using the static valueof
* factory methods. the string format is the opposite of the one created by
* tostring(), which converts a duration object to a readable form, such as "3.2
* hours" or "32.5 minutes". valid units are: milliseconds, seconds, minutes
* hours and days. correct english plural forms are used in creating string
* values and are parsed as well. the locale is respected and "," will be used
* instead of "." in the eurozone.
* <p>
* the benchmark method will "benchmark" a runnable or an icode implementing
* object, returning a duration object that represents the amount of time
* elapsed in running the code.
* <p>
* finally, the sleep() method will sleep for the value of a duration.
*
* @author jonathan locke
*/
public class duration extends abstracttimevalue
private static final long serialversionuid   1l
/** constant for maximum duration */
public static final duration maximum   milliseconds long max_value
/** constant for no duration. */
public static final duration none   milliseconds 0
/** constant for one day. */
public static final duration one_day   days 1
/** constant for one hour. */
public static final duration one_hour   hours 1
/** constant for on minute. */
public static final duration one_minute   minutes 1
/** constant for one second. */
public static final duration one_second   seconds 1
/** constant for one week. */
public static final duration one_week   days 7
/** pattern to match strings. */
private static final pattern pattern   pattern compile
pattern case_insensitive
/**
* @param code
*            the code
* @param log
*            optional log to use with errors and exceptions
* @return the duration it took to run the code
*/
public static duration benchmark final icode code  final log log
// get time before running code
final time start   time now
// run the code
code run log
// return the difference
return time now   subtract start
/**
* benchmark the given command.
*
* @param code
*            the code
* @return the duration it took to run the code
*/
public static duration benchmark final runnable code
// get time before running code
final time start   time now
// run code
code run
// return the difference
return time now   subtract start
/**
* gets the duration based on days.
*
* @param days
* @return duration
*/
public static duration days final double days
return hours 24 0   days
/**
* gets the duration based on days.
*
* @param days
* @return duration
*/
public static duration days final int days
return hours 24   days
/**
* the amount of time elapsed since start time
*
* @param start
*            the start time
* @return the elapsed period
* @throws illegalstateexception thrown if start is in the future
*/
public static duration elapsed final time start
return start elapsedsince
/**
* gets the duration based on hours.
*
* @param hours
* @return duration
*/
public static duration hours final double hours
return minutes 60 0   hours
/**
* gets the duration based on hours.
*
* @param hours
* @return duration
*/
public static duration hours final int hours
return minutes 60   hours
/**
* gets the duration based on milliseconds.
*
* @param milliseconds
* @return duration
*/
public static duration milliseconds final double milliseconds
return milliseconds math round milliseconds
/**
* gets the duration based on miliseconds.
*
* @param milliseconds
* @return duration
*/
public static duration milliseconds final long milliseconds
return new duration milliseconds
/**
* gets the duration based on minutes.
*
* @param minutes
* @return duration
*/
public static duration minutes final double minutes
return seconds 60 0   minutes
/**
* gets the duration based on minutes.
*
* @param minutes
* @return duration
*/
public static duration minutes final int minutes
return seconds 60   minutes
/**
* gets the duration based on seconds.
*
* @param seconds
* @return duration
*/
public static duration seconds final double seconds
return milliseconds seconds   1000 0
/**
* gets the duration based on seconds.
*
* @param seconds
* @return duration
*/
public static duration seconds final int seconds
return milliseconds seconds   1000l
/**
* gets the given long as a duration.
*
* @param time
*            the duration value in milliseconds
* @return duration value
*/
public static duration valueof final long time
return new duration time
/**
* converts the given string to a new duration object. the string can take
* the form of a floating point number followed by a number of milliseconds,
* seconds, minutes, hours or days. for example "6 hours" or "3.4 days".
* parsing is case insensitive.
*
* @param string
*            the string to parse
* @return the duration value of the given string
* @throws stringvalueconversionexception
*/
public static duration valueof final string string  throws stringvalueconversionexception
return valueof string  locale getdefault
/**
* converts the given string to a new duration object. the string can take
* the form of a floating point number followed by a number of milliseconds,
* seconds, minutes, hours or days. for example "6 hours" or "3.4 days".
* parsing is case insensitive.
*
* @param string
*            the string to parse
* @param locale
*            locale used for parsing
* @return the duration value of the given string
* @throws stringvalueconversionexception
*/
public static duration valueof final string string  final locale locale
throws stringvalueconversionexception
final matcher matcher   pattern matcher string
if  matcher matches
final double value   stringvalue valueof matcher group 1   locale  todouble
final string units   matcher group 3
if  units equalsignorecase
return milliseconds value
else if  units equalsignorecase
return seconds value
else if  units equalsignorecase
return minutes value
else if  units equalsignorecase
return hours value
else if  units equalsignorecase
return days value
else
throw new stringvalueconversionexception     string
else
throw new stringvalueconversionexception     string
/**
* private constructor forces use of static factory methods.
*
* @param milliseconds
*            number of milliseconds in this duration
*/
protected duration final long milliseconds
super milliseconds
/**
* adds a given duration to this duration.
*
* @param duration
*            the duration to add
* @return the sum of the durations
*/
public duration add final duration duration
return valueof getmilliseconds     duration getmilliseconds
/**
* gets number of days of the current duration.
*
* @return number of days of the current duration
*/
public final double days
return hours     24 0
/**
* gets number of hours of the current duration.
*
* @return number of hours of the current duration
*/
public final double hours
return minutes     60 0
/**
* gets number of minutes of the current duration.
*
* @return number of minutes of the current duration
*/
public final double minutes
return seconds     60 0
/**
* gets number of seconds of the current duration.
*
* @return number of seconds of the current duration
*/
public final double seconds
return getmilliseconds     1000 0
/**
* sleep for the current duration.
*/
public final void sleep
if  getmilliseconds   > 0
try
thread sleep getmilliseconds
catch  interruptedexception e
// ignored
/**
* subtract a given duration from this duration.
*
* @param that
*            the duration to subtract
* @return this duration minus that duration
*/
public duration subtract final duration that
return valueof getmilliseconds     that getmilliseconds
/**
* gets the string representation of this duration in days, hours, minutes,
* seconds or milliseconds, as appropriate. uses the default locale.
*
* @return string representation
*/
public string tostring
return tostring locale getdefault
/**
* gets the string representation of this duration in days, hours, minutes,
* seconds or milliseconds, as appropriate.
*
* @param locale
*            the locale
* @return string representation
*/
public string tostring final locale locale
if  getmilliseconds   >  0
if  days   >  1 0
return unitstring days       locale
if  hours   >  1 0
return unitstring hours       locale
if  minutes   >  1 0
return unitstring minutes       locale
if  seconds   >  1 0
return unitstring seconds       locale
return getmilliseconds
else
return
/**
* converts a value to a unit suffixed value, taking care of english
* singular/plural suffix.
*
* @param value
*            the value to format
* @param units
*            the units to apply singular or plural suffix to
* @param locale
*            the locale
* @return a string for the value
*/
private string unitstring final double value  final string units  final locale locale
return stringvalue valueof value  locale        units     value > 1 0  ?