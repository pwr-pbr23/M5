/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util resource locator
import java util iterator
import java util locale
import org apache wicket util string strings
/**
* contains the logic to build the various combinations of file path, style and
* locale required while searching for wicket resources. the full filename will
* be built like: &lt;path&gt;_&lt;style&gt;_&lt;locale&gt;.&lt;extension&gt;.
* <p>
* resource matches will be attempted in the following order:
* <ol>
* <li>1. &lt;path&gt;_&lt;style&gt;_&lt;locale&gt;.&lt;extension&gt;</li>
* <li>2. &lt;path&gt;_&lt;locale&gt;.&lt;extension&gt;</li>
* <li>3. &lt;path&gt;_&lt;style&gt;.&lt;extension&gt;</li>
* <li>4. &lt;path&gt;.&lt;extension&gt;</li>
* </ol>
* <p>
* locales may contain a language, a country and a region or variant.
* combinations of these components will be attempted in the following order:
* <ol>
* <li>locale.tostring() see javadoc for locale for more details</li>
* <li>&lt;language&gt;_&lt;country&gt;</li>
* <li>&lt;language&gt;</li>
* </ol>
*
* @author juergen donnerstag
* @author jonathan locke
*/
public class localeresourcenameiterator implements iterator
/** the base path */
private final string path
/** the locale (see session) */
private final locale locale
/** internal state */
private int state   0
/**
* while iterating the various combinations, it will always contain the
* current combination used to create the path
*/
private locale currentlocale
/** internal: used to compare with previous path to avoid duplicates */
private string currentpath
/**
* construct.
*
* @param path
* @param locale
* @param style
*/
public localeresourcenameiterator final string path  final locale locale
this path   path
this locale   locale
/**
* @return locale
*/
public locale getlocale
return currentlocale
/**
*
* @see java.util.iterator#hasnext()
*/
public boolean hasnext
return  this state < 4
/**
*
* @see java.util.iterator#next()
*/
public object next
if  locale    null
state   999
return path
// 1. apply locale default tostring() implementation. see locale.
if  state    0
this state
this currentlocale   locale
this currentpath   path       locale tostring
return this currentpath
// get language and country, either of which may be the empty string
final string language   locale getlanguage
final string country   locale getcountry
// 2. if country and language are available
if  state    1
this state
if   strings isempty language      strings isempty country
this currentlocale   new locale language  country
string newpath   path       language       country
if  this currentpath equals newpath     false
return newpath
// 3. if language is available
if  state    2
this state
if   strings isempty language
this currentlocale   new locale language
return path       language
// 4. the path only; without locale
this state
this currentlocale   null
return path
/**
*
* @see java.util.iterator#remove()
*/
public void remove