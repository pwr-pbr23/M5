/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples hangman
import java util arraylist
import java util list
import org apache wicket iclusterable
/**
* implementation of the actual hangman game model. the model holds the word
* generator, the current word, retries remaining and the correctletters that
* have been guessed. it also answers questions such as whether all retries have
* been used.
*
* @author chris turner
* @author jonathan locke
*/
public class game implements iclusterable
/** number of guesses allowed */
private int guessesallowed
/** number of guesses remaining */
private int guessesremaining
/** the letters */
private final list letters   new arraylist
/** the word being guessed by the user */
private word word
/** word generator */
private wordgenerator wordgenerator
/**
* return the number of guesses remaining.
*
* @return the number of guesses
*/
public int getguessesremaining
return guessesremaining
/**
* @return the letters in the game
*/
public list getletters
return letters
/**
* get the current word that is being guessed or has been guessed.
*
* @return the current word
*/
public word getword
return word
/**
* guess the given letter for the current word. if the letter matches then
* the word is updated otherwise the guesses remaining counter is reduced.
* the letter guessed is also recorded.
*
* @param letter
*            the letter being guessed
* @return true if guess was correct
*/
public boolean guess final letter letter
if   letter isguessed
final boolean correct   word guess letter
if   correct
guessesremaining
return correct
return false
/**
* check whether the user has used up all of their guesses.
*
* @return whether all of the user's guesses have been used
*/
public boolean islost
return guessesremaining    0
/**
* check whether the user has successfully guessed all of the correctletters
* in the word.
*
* @return whether all of the correctletters have been guessed or not
*/
public boolean iswon
return word isguessed
/**
* play another game with same settings
*/
public void newgame
newgame guessesallowed  wordgenerator
/**
* initialise the hangman read for a new game.
*
* @param guessesallowed
*            number of guesses allowed
* @param wordgenerator
*            the word generator
*/
public void newgame final int guessesallowed  final wordgenerator wordgenerator
this guessesallowed   guessesallowed
this guessesremaining   guessesallowed
this word   wordgenerator next
this wordgenerator   wordgenerator
// add letters
letters clear
for  char c      c <     c
letters add new letter c