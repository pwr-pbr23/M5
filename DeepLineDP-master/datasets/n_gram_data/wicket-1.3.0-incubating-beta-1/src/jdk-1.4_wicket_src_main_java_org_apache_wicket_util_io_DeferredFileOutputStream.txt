/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io file
import java io fileoutputstream
import java io ioexception
import java io outputstream
/**
* <p>
* an output stream which will retain data in memory until a specified threshold is
* reached, and only then commit it to disk. if the stream is closed before the threshold
* is reached, the data will not be written to disk at all.
* </p>
* <p>
* this class originated in fileupload processing. in this use case, you do not know in
* advance the size of the file being uploaded. if the file is small you want to store it
* in memory (for speed), but if the file is large you want to store it to file (to avoid
* memory issues).
* </p>
* @author <a href="mailto:martinc@apache.org">martin cooper</a>
* @version $id$
*/
public class deferredfileoutputstream extends thresholdingoutputstream
// ----------------------------------------------------------- data members
/**
* the output stream to which data will be written at any given time. this will always
* be one of <code>memoryoutputstream</code> or <code>diskoutputstream</code>.
*/
private outputstream currentoutputstream
/**
* the output stream to which data will be written prior to the theshold being
* reached.
*/
private bytearrayoutputstream memoryoutputstream
/**
* the file to which output will be directed if the threshold is exceeded.
*/
private file outputfile
// ----------------------------------------------------------- constructors
/**
* constructs an instance of this class which will trigger an event at the specified
* threshold, and save data to a file beyond that point.
* @param threshold the number of bytes at which to trigger an event.
* @param outputfile the file to which data is saved beyond the threshold.
*/
public deferredfileoutputstream int threshold  file outputfile
super threshold
this outputfile   outputfile
memoryoutputstream   new bytearrayoutputstream
currentoutputstream   memoryoutputstream
// --------------------------------------- thresholdingoutputstream methods
/**
* returns the data for this output stream as an array of bytes, assuming that the
* data has been retained in memory. if the data was written to disk, this method
* returns <code>null</code>.
* @return the data for this output stream, or <code>null</code> if no such data is
*         available.
*/
public byte getdata
if  memoryoutputstream    null
return memoryoutputstream tobytearray
return null
/**
* returns the data for this output stream as a <code>file</code>, assuming that
* the data was written to disk. if the data was retained in memory, this method
* returns <code>null</code>.
* @return the file for this output stream, or <code>null</code> if no such file
*         exists.
*/
public file getfile
return outputfile
// --------------------------------------------------------- public methods
/**
* determines whether or not the data for this output stream has been retained in
* memory.
* @return <code>true</code> if the data is available in memory; <code>false</code>
*         otherwise.
*/
public boolean isinmemory
return   isthresholdexceeded
/**
* returns the current output stream. this may be memory based or disk based,
* depending on the current state with respect to the threshold.
* @return the underlying output stream.
* @exception ioexception if an error occurs.
*/
protected outputstream getstream   throws ioexception
return currentoutputstream
/**
* switches the underlying output stream from a memory based stream to one that is
* backed by disk. this is the point at which we realise that too much data is being
* written to keep in memory, so we elect to switch to disk-based storage.
* @exception ioexception if an error occurs.
*/
protected void thresholdreached   throws ioexception
byte data   memoryoutputstream tobytearray
fileoutputstream fos   new fileoutputstream outputfile
fos write data
currentoutputstream   fos
memoryoutputstream   null