/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import org apache wicket session pagemap ipagemapentry
/**
* @author eelcohillenius
* @author johan compagner
*/
public interface ipagemap extends iclusterable
/**
* @param id
*            the page id to create an attribute for
* @return the session attribute for the given page (for replication of
*         state)
*/
string attributeforid final int id
/**
* removes all pages from this map
*/
void clear
/**
* redirects to any intercept page previously specified by a call to
* redirecttointerceptpage.
*
* @return true if an original destination was redirected to
* @see component#redirecttointerceptpage(page)
*/
boolean continuetooriginaldestination
/**
* retrieves page with given id.
*
* @param id
*            the page identifier
* @param versionnumber
*            the version to get
* @return any page having the given id
*/
page get final int id  int versionnumber
/**
* retrieves entry with given id.
*
* @param id
*            the page identifier
* @return any entry having the given id
*/
ipagemapentry getentry final int id
/**
* @return returns the name.
*/
string getname
/**
* @return size of this page map in bytes, including a sum of the sizes of
*         all the pages it contains.
*/
long getsizeinbytes
/**
* @return true if this is the default page map
*/
boolean isdefault
/**
* @return the next id for this pagemap
*/
int nextid
/**
* @param page
*            the page to put into this map
*/
void put final page page
/**
* redirects browser to an intermediate page such as a sign-in page. the
* current request's url is saved exactly as it was requested for future use
* by continuetooriginaldestination(); only use this method when you plan to
* continue to the current url at some later time; otherwise just use
* setresponsepage or, when you are in a constructor, redirectto.
*
* @param pageclazz
*            the page clazz to temporarily redirect to
*/
void redirecttointerceptpage final class pageclazz
/**
* redirects browser to an intermediate page such as a sign-in page. the
* current request's url is saved for future use by method
* continuetooriginaldestination(); only use this method when you plan to
* continue to the current url at some later time; otherwise just use
* setresponsepage or - when you are in a constructor or checkaccessmethod,
* call redirectto.
*
* @param page
*            the sign in page
*
* @see component#continuetooriginaldestination()
*/
void redirecttointerceptpage final page page
/**
* removes this pagemap from the session.
*/
void remove
/**
* removes the page from the pagemap
*
* @param page
*            page to be removed from the pagemap
*/
void remove final page page
/**
* @param entry
*            the entry to remove
*/
void removeentry final ipagemapentry entry