/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples customresourceloading
import java net url
import org apache wicket markupcontainer
import org apache wicket examples wicketexamplepage
import org apache wicket markup imarkupcachekeyprovider
import org apache wicket markup imarkupresourcestreamprovider
import org apache wicket util resource iresourcestream
import org apache wicket util resource urlresourcestream
/**
* the markup for this page is loaded by the page component itself.
*
* @see imarkupresourcestreamprovider
* @see imarkupcachekeyprovider
*
* @author eelco hillenius
*/
public class pagewithcustomloading extends wicketexamplepage
implements
imarkupresourcestreamprovider
imarkupcachekeyprovider
/**
* constructor
*/
public pagewithcustomloading
/**
* this implementation loads from a custom name/ location. while not
* advisable as the default way of loading resources, overriding this method
* can provide a component specific break out so that you e.g. can load a
* template from a database without any other component or the application
* having to know about it.
*
* @param container
*            the markupcontainer which requests to load the markup resource
*            stream
* @param containerclass
*            the container the markup should be associated with
* @return a iresourcestream if the resource was found
*/
public iresourcestream getmarkupresourcestream final markupcontainer container
final class containerclass
// load a template with a totally different name from this package using
// this component's class loader
final url url   pagewithcustomloading class getresource
if  url    null
return new urlresourcestream url
// no resource was not found
return null
/**
* prevent the markup from ever be cached. this is optionally - components
* that don't implement {@link imarkupcachekeyprovider} will just have their
* markup cached - but is useful when markup varies. if you don't need such
* dynamic loading, it is advisible to not implement
* {@link imarkupcachekeyprovider}.
*
* @see org.apache.wicket.markup.imarkupcachekeyprovider#getcachekey(org.apache.wicket.markupcontainer,
*      java.lang.class)
*/
public charsequence getcachekey markupcontainer container  class containerclass
return null