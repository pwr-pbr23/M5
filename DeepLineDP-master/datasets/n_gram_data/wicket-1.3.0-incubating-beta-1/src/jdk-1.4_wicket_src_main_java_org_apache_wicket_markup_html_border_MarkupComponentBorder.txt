/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html border
import java util locale
import org apache wicket application
import org apache wicket component
import org apache wicket icomponentborder
import org apache wicket markupcontainer
import org apache wicket response
import org apache wicket session
import org apache wicket wicketruntimeexception
import org apache wicket markup containerinfo
import org apache wicket markup markup
import org apache wicket markup markupelement
import org apache wicket markup markupresourcestream
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup parser filter wickettagidentifier
import org apache wicket util resource iresourcestream
import org apache wicket util resource locator iresourcestreamlocator
/**
* this is a icomponentborder implementation that can be used if you have markup
* that should be around a component. it works just like {@link border} so you
* have to have a <wicket:border>html before<wicket:body/>html after</wicket:border>
* in the html of your subclass.
*
* @author jcompagner
*/
public class markupcomponentborder implements icomponentborder
static
// register "wicket:border" and "wicket:body"
wickettagidentifier registerwellknowntagname border border
wickettagidentifier registerwellknowntagname border body
private static final long serialversionuid   1l
// markup stream associated with this border. bonus of keeping a reference
// is that when renderafter starts the stream will be very close to its
// needed position because renderbefore has executed
private transient markupstream markupstream
/**
*
* @see wicket.icomponentborder#renderbefore(wicket.component)
*/
public void renderbefore component component
final markupstream stream   getmarkupstream component
final response response   component getresponse
stream setcurrentindex 0
boolean insidebordermarkup   false
while  stream hasmore
markupelement e   stream next
if  e instanceof wickettag
wickettag wt    wickettag e
if   insidebordermarkup
if  wt isbordertag      wt isopen
insidebordermarkup   true
continue
else
throw new wicketruntimeexception
getclass   getname         wt tostring
else
if  wt isbodytag
break
else
throw new wicketruntimeexception
getclass   getname         wt tostring
if  insidebordermarkup
response write e tocharsequence
if   stream hasmore
throw new wicketruntimeexception     getclass   getname
/**
*
* @see wicket.icomponentborder#renderafter(wicket.component)
*/
public void renderafter component component
final markupstream stream   getmarkupstream component
final response response   component getresponse
while  stream hasmore
markupelement e   stream next
if  e instanceof wickettag
wickettag wt    wickettag e
if  wt isbordertag      wt isclose
break
else
throw new wicketruntimeexception
getclass   getname         wt tostring
response write e tocharsequence
private markupstream getmarkupstream component component
if  markupstream    null
markupstream   findmarkupstream component
return markupstream
private markupstream findmarkupstream component owner
final string markuptype   getmarkuptype owner
// todo we need to expose this functionality for any class not just for
// markupcontainers in markupcache so we dont have to replicate this
// logic here
// get locator to search for the resource
final iresourcestreamlocator locator   application get   getresourcesettings
getresourcestreamlocator
final session session   session get
final string style   session getstyle
final locale locale   session getlocale
markupresourcestream markupresourcestream   null
class containerclass   getclass
while    containerclass equals markupcomponentborder class
string path   containerclass getname   replace
iresourcestream resourcestream   locator locate containerclass  path  style  locale
markuptype
// did we find it already?
if  resourcestream    null
containerinfo ci   new containerinfo containerclass  locale  style  null
markuptype
markupresourcestream   new markupresourcestream resourcestream  ci  containerclass
break
// walk up the class hierarchy one level, if markup has not
// yet been found
containerclass   containerclass getsuperclass
if  markupresourcestream    null
throw new wicketruntimeexception
getclass   getname
try
markup markup   application get   getmarkupsettings   getmarkupparserfactory
newmarkupparser   readandparse markupresourcestream
return new markupstream markup
catch  exception e
throw new wicketruntimeexception
markupresourcestream tostring
private string getmarkuptype component component
string extension
if  component instanceof markupcontainer
extension     markupcontainer component  getmarkuptype
else
extension   component getparent   getmarkuptype
return extension