/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import java util hashmap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket iresponsefilter
import org apache wicket requestcycle
import org apache wicket model model
import org apache wicket util string appendingstringbuffer
import org apache wicket util string javascriptutils
/**
* this is a filter that injects javascript code to the top head portion and
* after the body so that the time can me measured what the client parse time
* was for this page. it also reports the total server parse/response time in
* the client and logs the server response time and response size it took for a
* specific response in the server log.
*
* you can specify what the status text should be like this:
* serverandclienttimefilter.statustext=my application, server parsetime:
* ${servertime}, client parsetime: ${clienttime} likewise for ajax request use
* ajax.serverandclienttimefilter.statustext
*
* @author jcompagner
*/
public class ajaxserverandclienttimefilter implements iresponsefilter
private static log log   logfactory getlog ajaxserverandclienttimefilter class
/**
* @see org.apache.wicket.iresponsefilter#filter(java.lang.stringbuffer)
*/
public appendingstringbuffer filter appendingstringbuffer responsebuffer
int headindex   responsebuffer indexof
int bodyindex   responsebuffer indexof
int ajaxstart   responsebuffer indexof
int ajaxend   responsebuffer indexof
long timetaken   system currenttimemillis     requestcycle get   getstarttime
if  headindex     1    bodyindex     1
appendingstringbuffer endscript   new appendingstringbuffer 150
endscript append    append javascriptutils script_open_tag
endscript append
endscript append getstatusstring timetaken
endscript append    append javascriptutils script_close_tag  append
responsebuffer insert bodyindex   1  endscript
responsebuffer insert headindex   6      javascriptutils script_open_tag
javascriptutils script_close_tag
else if  ajaxstart     1    ajaxend     1
appendingstringbuffer startscript   new appendingstringbuffer 250
startscript append
startscript append getstatusstring timetaken
startscript append
responsebuffer insert ajaxend  startscript tostring
responsebuffer insert ajaxstart   15
log info timetaken
requestcycle get   getrequest   geturl
responsebuffer length
return responsebuffer
/**
* returns a locale specific status message about the server and client
* time.
*
* @param timetaken
*            the server time it took
* @param resourcekey
*            the key for the locale specific string lookup
* @return string with the status message
*/
private string getstatusstring long timetaken  string resourcekey
map map   new hashmap 4
map put
map put      double timetaken    1000
appendingstringbuffer defaultvalue   new appendingstringbuffer 128
defaultvalue append
defaultvalue append   double timetaken    1000
defaultvalue append
string txt   application get   getresourcesettings   getlocalizer   getstring resourcekey
null  model valueof map   defaultvalue tostring
return txt