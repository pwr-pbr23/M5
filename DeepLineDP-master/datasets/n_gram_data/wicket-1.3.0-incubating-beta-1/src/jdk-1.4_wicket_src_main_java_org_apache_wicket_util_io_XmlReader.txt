/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io bufferedreader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io reader
import java util regex matcher
import java util regex pattern
import org apache wicket util string appendingstringbuffer
/**
* this is a simple xmlreader. its only purpose is to read the xml decl string
* from the input and apply proper character encoding to all subsequent
* characters. the xml decl string itself is removed from the output.
*
* @author juergen donnerstag
*/
public final class xmlreader extends reader
/** regex to find <?xml encoding ... ?> */
private static final pattern xmldecl   pattern compile
/** regex to find <?xml encoding ... ?> */
private static final pattern encodingpattern   pattern
compile   ']   ? [
/** null, if jvm default. else from <?xml encoding=""> */
private string encoding
/** null or if found in the markup, the whole <?xml ...?> string */
private string xmldeclarationstring
/** the input stream to read the data from */
private inputstream inputstream
/** the reader which does the character encoding */
private reader reader
/**
* construct.
*
* @param inputstream
*            the inputstream to read the xml data from
* @param defaultencoding
*            default character encoding to use when not specified in xml declaration, specify null to use jvm default
* @throws ioexception
*             in case something went wrong while reading the data
*/
public xmlreader final inputstream inputstream  final string defaultencoding
throws ioexception
// the xml parser does not have a parent filter
super
this inputstream   inputstream
this encoding   defaultencoding
if  inputstream    null
throw new illegalargumentexception
init
/**
* return the encoding used while reading the markup file.
*
* @return if null, then jvm default
*/
public string getencoding
return encoding
/**
* return the xml declaration string, in case if found in the markup.
*
* @return null, if not found.
*/
public string getxmldeclaration
return this xmldeclarationstring
/**
* reads and parses markup from a resource such as file.
*
* @throws ioexception
*/
public void init   throws ioexception
if   this inputstream marksupported
throw new ioexception
// read ahead buffer required for the first line of the markup
// (encoding)
final int readaheadsize   80
this inputstream mark readaheadsize
// read-ahead the input stream and check if it starts with <?xml..?>.
if  getxmldeclaration this inputstream  readaheadsize
// if yes than determine the encoding from the xml decl
this encoding   determineencoding this xmldeclarationstring
else
// if not, reset the input stream to the begining of the file
this inputstream reset
if  this encoding    null
// use jvm default
this reader   new bufferedreader new inputstreamreader this inputstream
else
// use the encoding provided
this reader   new bufferedreader new inputstreamreader this inputstream  this encoding
/**
* determine the encoding from the xml decl.
*
* @param string the xmldecl string
* @return the encoding. null, if not found
*/
private final string determineencoding final string string
// does the string match the <?xml .. ?> pattern
final matcher matcher   encodingpattern matcher string
if   matcher find
// no
return null
// extract the encoding
string encoding   matcher group 2
if   encoding    null      encoding length      0
encoding   matcher group 3
if  encoding    null
encoding   encoding trim
return encoding
/**
* read-ahead the input stream (markup file). if the first line contains
* &lt;?xml...?&gt;, than remember the xml decl for later to determine the
* encoding.
* <p>
* the xml decl will not be forwarded to the user.
*
* @param in
*            the markup file
* @param readaheadsize
*            the read ahead buffer available to read the xml encoding
*            information
* @return true, if &lt;?xml ..?&gt; has been found
* @throws ioexception
*/
private final boolean getxmldeclaration final inputstream in  final int readaheadsize
throws ioexception
// max one line
final appendingstringbuffer pushback   new appendingstringbuffer readaheadsize
// the current char from the markup file
int value
while   value   in read        1
pushback append  char value
// stop at the end of the first tag or end of line. if it is html
// without newlines, stop after x bytes (= characters)
if   value           value           value
pushback length   >   readaheadsize   1
break
// does the string match the <?xml .. ?> pattern
final matcher matcher   xmldecl matcher pushback
if   matcher matches
// no
return false
// save the whole <?xml ..> string for later
this xmldeclarationstring   pushback tostring   trim
return true
/**
* @see java.io.reader#close()
*/
public void close   throws ioexception
this reader close
this inputstream close
/**
* @see java.io.reader#read(char[], int, int)
*/
public int read char buf  int from  int to  throws ioexception
return this reader read buf  from  to
/**
* @return the markup to be parsed
*/
public string tostring
return this inputstream tostring         this encoding