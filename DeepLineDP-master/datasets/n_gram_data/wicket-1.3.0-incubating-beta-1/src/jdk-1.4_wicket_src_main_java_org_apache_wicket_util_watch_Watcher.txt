/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util watch
import java util map
import org apache wicket util concurrent concurrenthashmap
import org apache wicket util listener changelistenerset
import org apache wicket util listener ichangelistener
/**
* similar to modificationwatcher but manually triggered, calling all registered
* changelisteners when a given object is triggered.
*
* @author juergen donnerstag
*/
public final class watcher
/** maps objects to change listener sets */
private final map keytoentry    new concurrenthashmap
// class for holding entries to watch
private static final class entry
// the value associated with the key
object data
// the set of listeners to call when triggered
final changelistenerset listeners   new changelistenerset
/**
* constructor
*/
public watcher
/**
* adds a key and an ichangelistener to call when the key is triggered.
* <p>
* note: the value is ignored if the key and an associated value already
* exists. only the listeners is added (if an equals does not already
* exist).
*
* @param key
*            the key to identifiy a changelistenerset
* @param listener
*            the listener to call if the key gets triggered
* @return <tt>true</tt> if the set did not already contain the specified
*         element.
*/
public final boolean add final object key  final ichangelistener listener
// look up entry for modifiable
final entry entry    entry keytoentry get key
// found it?
if  entry    null
// construct new entry
final entry newentry   new entry
if  listener    null
newentry listeners add listener
// put in map
keytoentry put key  newentry
return true
else
// add listener to existing entry
if  listener    null
return entry listeners add listener
return false
/**
* remove all entries associated with 'modifiable'
*
* @param key
* @return the object removed, else null
*/
public object remove final object key
return keytoentry remove key
/**
* remove all entries
*/
public void clear
keytoentry clear
/**
* trigger all listeners registered with key
*
* @param key
*            the key to identify the changelistenerset
*/
public void notifylisteners final object key
// look up entry for modifiable
final entry entry    entry keytoentry get key
if  entry    null
entry listeners notifylisteners