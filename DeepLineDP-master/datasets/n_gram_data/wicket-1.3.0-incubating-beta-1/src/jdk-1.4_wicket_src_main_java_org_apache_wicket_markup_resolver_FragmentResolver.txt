/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import org apache wicket markupcontainer
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup parser filter wickettagidentifier
/**
* usually you either have a markup file or a xml tag with
* wicket:id="mycomponent" to associate markup with a component. however in some
* rare cases, especially when working with small panels it is a bit awkward to
* maintain tiny pieces of markup in plenty of panel markup files. use cases are
* for example list views where list items are different depending on a state.
* <p>
* inline panels provide a means to maintain the panels tiny piece of markup in
* the parents markup file. during the render process, when wicket iterates over
* the markup file, the markup fragment must be ignored. it is only indirectly
* referenced by component.
*
* @author juergen donnerstag
*/
public class fragmentresolver implements icomponentresolver
private static final long serialversionuid   1l
static
// register "wicket:fragment"
wickettagidentifier registerwellknowntagname
/**
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer,
*      markupstream, componenttag)
*
* @param container
*            the container parsing its markup
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @return true, if componentid was handle by the resolver. false, otherwise
*/
public boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// if <wicket:...>
if  tag instanceof wickettag
final wickettag wtag    wickettag tag
// if <wicket:fragment ...>
if  wtag isfragementtag
// skip the markup associated with the tag
markupstream skipcomponent
return true
// we were not able to handle the tag
return false