/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java util regex matcher
import java util regex pattern
import javax servlet http httpservletresponse
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket protocol http request webrequestcodingstrategy
import org apache wicket util crypt icrypt
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
/**
* it extends webresponse and encodes (encrypt) wicket's url
* query string. thus it hides the details from the user.
*
* @author juergen donnerstag
*
* @deprecated since 1.2 please see {@link org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy}
*/
public class webresponsewithcryptedurl extends webresponse
/** logger */
private static final log log   logfactory getlog webresponsewithcryptedurl class
/**
* constructor.
*
* @param httpservletresponse
*            the servlet response object
*/
public webresponsewithcryptedurl final httpservletresponse httpservletresponse
super httpservletresponse
/**
* returns the given url encoded.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public charsequence encodeurl charsequence url
// get the crypt implementation from the application
icrypt urlcrypt   application get   getsecuritysettings   getcryptfactory   newcrypt
if  urlcrypt    null
// the url must have a query string, otherwise keep the url unchanged
final int pos   url tostring   indexof
if  pos > 0
// the url's path
charsequence urlprefix   url subsequence 0  pos
// extract the querystring
string querystring   url subsequence pos   1  url length    tostring
// if the querystring starts with a parameter like
// "x=", than don't change the querystring as it
// has been encoded already
if   querystring startswith
// the length of the encrypted string depends on the
// length of the original querystring. let's try to
// make the querystring shorter first without loosing
// information.
querystring   shortenurl querystring  tostring
// encrypt the query string
final string encryptedquerystring   urlcrypt encrypturlsafe querystring
// build the new complete url
return new appendingstringbuffer urlprefix  append    append encryptedquerystring
// we didn't change anything
return url
/**
* try to shorten the querystring without loosing information.
* note: webrequestwithcryptedurl must implement exactly
* the opposite logic.
*
* @param querystring the original query string
* @return the shortened querystring
*/
protected charsequence shortenurl charsequence querystring
querystring   strings replaceall querystring  webrequestcodingstrategy behavior_id_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring  webrequestcodingstrategy bookmarkable_page_parameter_name
// for debugging only: determine possibilities to further shorten
// the query string
if  log isinfoenabled
// every word with at least 3 letters
pattern words   pattern compile
matcher matcher   words matcher querystring
while  matcher find
charsequence word   querystring subsequence matcher start    matcher end
log info     word       querystring
return querystring