/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html image resource
import java awt image bufferedimage
import java io bytearrayoutputstream
import java io ioexception
import java util locale
import javax imageio imageio
import javax imageio imagewriter
import org apache wicket wicketruntimeexception
import org apache wicket markup html dynamicwebresource
import org apache wicket util time time
/**
* an imageresource subclass for dynamic images (images created
* programmatically). subclasses override getimagedata() to provide the image
* data to send back to the user. a given subclass may decide how to produce
* this data and whether/how to buffer it.
* <p>
* the rendereddynamicimageresource subclass is designed for images that can be
* regenerated when the component is deserialized (the image data is transient).
* a good example of a rendereddynamicimageresource is the
* defaultbuttonimageresource class, which can regenerate a given button image
* at any time. this makes it very lightweight when clustered. the
* buffereddynamicimageresource class, on the other hand, is designed for images
* that cannot be regenerated on demand. it buffers its image data in a
* non-transient way, which means that the entire image will be serialized and
* copied when the resource is replicated in a cluster!
* <p>
* the helper method toimagedata(bufferedimage) is provided so that subclasses
* can easily turn a bufferedimage into a suitable return value when
* implementing getimagedata().
* <p>
* the format of the image (and therefore the resource's extension) can be
* specified with setformat(string). the default format is "png" because jpeg is
* lossy and makes generated images look bad and gif has patent issues.
*
* @author jonathan locke
* @author gili tzabari
* @author johan compagner
*/
public abstract class dynamicimageresource extends dynamicwebresource
/** the image type */
private string format
/** the last modified time of this resource */
private time lastmodifiedtime
/**
* creates a dynamic image resource.
*/
public dynamicimageresource
/**
* creates a dynamic resource from for the given locale
*
* @param locale
*            the locale of this resource
*/
public dynamicimageresource locale locale
super locale
/**
* creates a dynamic resource from for the given locale
*
* @param format
*            the image format ("png", "jpeg", etc)
*/
public dynamicimageresource string format
setformat format
/**
* creates a dynamic resource from for the given locale
*
* @param format
*            the image format ("png", "jpeg", etc)
* @param locale
*            the locale of this resource
*/
public dynamicimageresource string format  locale locale
super locale
setformat format
/**
* @return returns the image format.
*/
public synchronized final string getformat
return format
/**
*  sets the format of this resource
*
* @param format
*  			the format (jpg, png or gif..)
*/
public synchronized final void setformat string format
this format   format
/**
* set the last modified time for this resource.
*
* @param time
*/
protected synchronized void setlastmodifiedtime time time
lastmodifiedtime   time
/**
* @param image
*            the image to turn into data
* @return the image data for this dynamic image
*/
protected byte toimagedata final bufferedimage image
try
// create output stream
final bytearrayoutputstream out   new bytearrayoutputstream
// get image writer for format
final imagewriter writer    imagewriter  imageio
getimagewritersbyformatname format  next
// write out image
writer setoutput imageio createimageoutputstream out
writer write image
// return the image data
return out tobytearray
catch  ioexception e
throw new wicketruntimeexception    e
/**
* @see dynamicwebresource#getresourcestate()
*/
protected synchronized resourcestate getresourcestate
return new resourcestate
private byte imagedata
private final string contenttype       format
public time lastmodifiedtime
if  lastmodifiedtime    null
lastmodifiedtime   dynamicimageresource this lastmodifiedtime
if  lastmodifiedtime    null
lastmodifiedtime   time now
return lastmodifiedtime
public byte getdata
if  imagedata  null
imagedata   getimagedata
return imagedata
public string getcontenttype
return contenttype
/**
* get image data for our dynamic image resource. if the subclass
* regenerates the data, it should set the lastmodifiedtime when it does so.
* this ensures that image caching works correctly.
*
* @return the image data for this dynamic image
*/
protected abstract byte getimagedata