/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup repeater
import java util hashmap
import java util iterator
import java util map
import org apache wicket model imodel
/**
* reuse strategy that will reuse an old item if its model is equal to a model
* inside the newmodels iterator. useful when state needs to be kept across
* requests for as long as the item is visible within the view.
* <p>
* notice that the <u>model</u> and not the <u>model object</u> needs to
* implement the equals method. most of the time it is a good idea to forward
* the equals call to the object, however if a detachable model is used it is
* often enough to compare object ids models point to ( this saves the model
* from loading the object).
*
* @author igor vaynberg (ivaynberg)
*
*/
public class reuseifmodelsequalstrategy implements iitemreusestrategy
private static final long serialversionuid   1l
private static iitemreusestrategy instance   new reuseifmodelsequalstrategy
/**
* @return static instance
*/
public static iitemreusestrategy getinstance
return instance
/**
* @see org.apache.wicket.extensions.markup.html.repeater.refreshing.iitemreusestrategy#getitems(org.apache.wicket.extensions.markup.html.repeater.refreshing.iitemfactory,
*      java.util.iterator, java.util.iterator)
*/
public iterator getitems final iitemfactory factory  final iterator newmodels
iterator existingitems
final map modeltoitem   new hashmap
while  existingitems hasnext
final item item    item existingitems next
modeltoitem put item getmodel    item
return new iterator
private int index   0
public boolean hasnext
return newmodels hasnext
public object next
final imodel model    imodel newmodels next
final item olditem    item modeltoitem get model
final item item
if  olditem    null
item   factory newitem index  model
else
olditem setindex index
item   olditem
index
return item
public void remove
throw new unsupportedoperationexception