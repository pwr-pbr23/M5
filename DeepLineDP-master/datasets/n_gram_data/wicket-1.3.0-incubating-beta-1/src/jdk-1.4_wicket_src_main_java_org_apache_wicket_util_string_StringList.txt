/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util string
import java util arraylist
import java util collection
import java util collections
import java util iterator
import java util list
import java util stringtokenizer
/**
* a typesafe, mutable list of strings supporting a variety of convenient
* operations as well as expected operations from list such as add(), size(),
* remove(), iterator(), get(int index) and toarray(). instances of the class
* are not threadsafe.
* <p>
* stringlist objects can be constructed empty or they can be created using any
* of several static factory methods:
* <ul>
* <li>valueof(string[])
* <li>valueof(string)
* <li>valueof(collection)
* <li>valueof(object[])
* </ul>
* in the case of the collection and object[] factory methods, each object in
* the collection or array is converted to a string via tostring() before being
* added to the stringlist.
* <p>
* the tokenize() factory methods allow easy creation of stringlists via
* stringtokenizer. the repeat() static factory method creates a stringlist that
* repeats a given string a given number of times.
* <p>
* the prepend() method adds a string to the beginning of the stringlist. the
* removelast() method pops a string off the end of the list. the sort() method
* sorts strings in the list using collections.sort(). the class also inherits
* useful methods from abstractstringlist that include join() methods ala perl
* and a tostring() method which joins the list of strings with comma separators
* for easy viewing.
*
* @author jonathan locke
*/
public final class stringlist extends abstractstringlist
private static final long serialversionuid   1l
// the underlying list of strings
private final list strings
// the total length of all strings in the list
private int totallength
/**
* returns a list of a string repeated a given number of times.
*
* @param count
*            the number of times to repeat the string
* @param string
*            the string to repeat
* @return the list of strings
*/
public static stringlist repeat final int count  final string string
final stringlist list   new stringlist count
for  int i   0  i < count  i
list add string
return list
/**
* extracts tokens from a comma and space delimited string.
*
* @param string
*            the string
* @return the string tokens as a list
*/
public static stringlist tokenize final string string
return tokenize string
/**
* extracts tokens from a delimited string.
*
* @param string
*            the string
* @param delimiters
*            the delimiters
* @return the string tokens as a list
*/
public static stringlist tokenize final string string  final string delimiters
final stringtokenizer tokenizer   new stringtokenizer string  delimiters
final stringlist strings   new stringlist
while  tokenizer hasmoretokens
strings add tokenizer nexttoken
return strings
/**
* converts a collection of objects into a list of string values by using
* the conversion methods of the stringvalue class.
*
* @param collection
*            the collection to add as strings
* @return the list
*/
public static stringlist valueof final collection collection
if  collection    null
final stringlist strings   new stringlist collection size
for  final iterator iterator   collection iterator    iterator hasnext
strings add stringvalue valueof iterator next
return strings
else
return new stringlist
/**
* converts an array of objects into a list of strings by using the object
* to string conversion method of the stringvalue class.
*
* @param objects
*            the objects to convert
* @return the list of strings
*/
public static stringlist valueof final object objects
// check for null parameter
int length    objects    null  ? 0   objects length
final stringlist strings   new stringlist length
for  int i   0  i < length  i
strings add stringvalue valueof objects
return strings
/**
* returns a string list with just one string in it.
*
* @param string
*            the string
* @return the list of one string
*/
public static stringlist valueof final string string
final stringlist strings   new stringlist
if  string    null
strings add string
return strings
/**
* converts a string array to a string list.
*
* @param array
*            the array
* @return the list
*/
public static stringlist valueof final string array
int length    array    null  ? 0   array length
final stringlist strings   new stringlist length
for  int i   0  i < length  i
strings add array
return strings
/**
* constructor.
*/
public stringlist
this strings   new arraylist
/**
* constructor.
*
* @param size
*            number of elements to preallocate
*/
public stringlist final int size
this strings   new arraylist size
/**
* adds a string to the back of this list.
*
* @param string
*            string to add
*/
public void add final string string
// add to list
add size    string
/**
* adds the string to the stringlist at position pos.
*
* @param pos
*            the position to add the string at
* @param string
*            the string to add.
*/
public void add final int pos  final string string
strings add pos  string    null ?     string
// increase total length
totallength    string    null ? 0   string length
/**
* adds a string value to this list as a string.
*
* @param value
*            the value to add
*/
public void add final stringvalue value
add value tostring
/**
* @param string
*            the string to look for
* @return true if the list contains the string
*/
public boolean contains final string string
return strings contains string
/**
* gets the string at the given index.
*
* @param index
*            the index
* @return the string at the index
* @throws indexoutofboundsexception
*/
public string get final int index
return  string strings get index
/**
* @return list value (not a copy of this list)
*/
public list getlist
return strings
/**
* returns a typesafe iterator over this collection of strings.
*
* @return typesafe string iterator
*/
public istringiterator iterator
return new istringiterator
private final iterator iterator   strings iterator
public boolean hasnext
return iterator hasnext
public string next
return  string iterator next
/**
* adds the given string to the front of the list.
*
* @param string
*            the string to add
*/
public void prepend final string string
add 0  string
/**
* removes the string at the given index.
*
* @param index
*            the index
*/
public void remove final int index
string string    string strings remove index
totallength   totallength   string length
/**
* removes the last string in this list.
*/
public void removelast
remove size     1
/**
* @return the number of strings in this list.
*/
public int size
return strings size
/**
* sorts this string list alphabetically.
*/
public void sort
collections sort strings
/**
* converts this string list to a string array.
*
* @return the string array
*/
public string toarray
return  string strings toarray new string
/**
* @return the total length of all strings in this list.
*/
public int totallength
return totallength