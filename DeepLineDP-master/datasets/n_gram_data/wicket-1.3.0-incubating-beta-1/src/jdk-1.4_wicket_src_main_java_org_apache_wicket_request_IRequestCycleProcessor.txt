/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request
import org apache wicket irequesttarget
import org apache wicket requestcycle
import org apache wicket protocol http webrequestcycleprocessor
/**
* <p>
* the request cycle processor is responsible for handling the steps of a
* request cycle. it's methods are called in a pre-defined order:
* <ul>
* <li> {@link #resolve(requestcycle, requestparameters)} is called to get the
* request target. a request might refer to e.g. a bookmarkable page, a listener
* interface call on a component on a previously rendered page, a shared
* resource or e.g. a non-wicket resource that resides in the web application
* folder. </li>
* <li> {@link #processevents(requestcycle)} is called after the target is
* resolved. it is meant to handle/ distribute events like e.g. listener
* interface calls on components. during this processing, the request target may
* be changed (e.g. by calling setresponsepage). what actually happens is that
* {@link org.apache.wicket.requestcycle} holds a stack of targets, of which it will take
* to last addition as the recent one, but walks the whole stack in order to do
* cleaning up after the request is handled.</li>
* <li> {@link #respond(requestcycle)} is called to create a response to the
* requesting client. typically, the actual response handling is to be (or
* delegated) by the request target implementation, but different strategies
* might do as they seem fit. </li>
* <li> {@link #respond(runtimeexception, requestcycle)} is called whenever an
* uncaught exception occurs during the event handling or response phase so that
* an appropriate exception response can be generated. this method is guaranteed
* to be called whenever such an exception happens, but will never be called
* otherwise. </li>
* </ul>
* </p>
*
* @see abstractrequestcycleprocessor
* @see webrequestcycleprocessor
*
* @author hillenius
*/
public interface irequestcycleprocessor
/**
* gets the object that is responsible for encoding request targets (like
* url's in links etc) and decoding urls and request parameters etc into
* {@link org.apache.wicket.request.requestparameters} objects.
*
* @return the request encoder
*/
irequestcodingstrategy getrequestcodingstrategy
/**
* <p>
* resolves the request and returns the request target. typically, the
* resolver uses the {@link org.apache.wicket.request.requestparameters} object that is
* passed in.
* </p>
* <p>
* implementors of this method should be careful not to mix this code with
* event handling code; method {@link #processevents(requestcycle)} is meant
* for that purpose.
* </p>
*
* @param requestcycle
*            the current request cycle
* @param requestparameters
*            the request parameters object as decoded by this processor's
*            {@link irequestcodingstrategy}.
* @return the request target; has to be non-null!
*/
irequesttarget resolve requestcycle requestcycle  requestparameters requestparameters
/**
* after a page is restored, this method is responsible for calling any
* event handling code based on the request. for example, when a link is
* clicked, {@link #resolve(requestcycle, requestparameters)} should return
* the page that that link resides on, and this method should call the
* {@link org.apache.wicket.markup.html.link.ilinklistener} interface on that
* component.
*
* @param requestcycle
*            the current request cycle
*/
void processevents requestcycle requestcycle
/**
* after the target is resolved and the request events are handled, it is
* time to respond to the request. this method is responsible for executing
* the proper response sequence given the current request target and
* response.
*
* @param requestcycle
*            the current request cycle
*/
void respond requestcycle requestcycle
/**
* whenever a unhandled exception is encountered during the processing of a
* request cycle, this method is called to respond to the request in a
* proper way.
*
* @param e
*            any unhandled exception
* @param requestcycle
*            the current request cycle
*/
void respond runtimeexception e  requestcycle requestcycle