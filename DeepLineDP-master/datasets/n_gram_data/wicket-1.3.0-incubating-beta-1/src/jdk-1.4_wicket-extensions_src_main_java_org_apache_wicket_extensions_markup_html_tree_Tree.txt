/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html tree
import java util arraylist
import java util enumeration
import java util list
import javax swing event treemodelevent
import javax swing event treemodellistener
import javax swing tree defaultmutabletreenode
import javax swing tree treemodel
import javax swing tree treepath
import org apache wicket attributemodifier
import org apache wicket component
import org apache wicket resourcereference
import org apache wicket wicketruntimeexception
import org apache wicket behavior headercontributor
import org apache wicket markup html basic label
import org apache wicket markup html image image
import org apache wicket markup html link link
import org apache wicket markup html list listitem
import org apache wicket markup html list listview
import org apache wicket markup html list loop
import org apache wicket markup html panel panel
import org apache wicket markup html resources compressedresourcereference
import org apache wicket model imodel
/**
* an tree that renders as a flat (not-nested) list, using spacers for
* indentation and nodes at the end of one row.
* <p>
* the visible tree rows are put in one flat list. for each row, a list is
* constructed with fillers, that can be used to create indentation. after the
* fillers, the actual node content is put.
* </p>
* <p>
* </p>
*
* @author eelco hillenius
*/
public class tree extends abstracttree implements treemodellistener
/**
* the default node panel. if you provide your own panel by overriding
* tree.newnodepanel, but only want to override the markup, not the
* components that are added, you <i>may</i> extend this class. if you want
* to use other components than the default, provide a panel or fragment
* instead (and that's probably what you want as the look and feel of what
* this panel renders may be adjusted by overriding
* {@link tree#createjunctionlink(defaultmutabletreenode)} and
* {@link tree#createnodelink(defaultmutabletreenode)}.
*/
public static class defaultnodepanel extends panel
private static final long serialversionuid   1l
/**
* construct.
*
* @param panelid
*            the component id
* @param tree
*            the containing tree component
* @param node
*            the tree node for this panel
*/
public defaultnodepanel string panelid  tree tree  defaultmutabletreenode node
super panelid
// create a link for expanding and collapsing the node
link expandcollapslink   tree createjunctionlink node
add expandcollapslink
// create a link for selecting a node
link selectlink   tree createnodelink node
add selectlink
/**
* renders spacer items.
*/
private static final class spacerlist extends loop
private static final long serialversionuid   1l
/**
* construct.
*
* @param id
*            component id
* @param size
*            size of loop
*/
public spacerlist string id  int size
super id  size
/**
* @see org.apache.wicket.markup.html.list.loop#populateitem(loopitem)
*/
protected void populateitem final loop loopitem loopitem
// nothing needed; we just render the tags and use css to indent
/**
* list view for tree paths.
*/
private final class treepathslistview extends listview
private static final long serialversionuid   1l
/**
* construct.
*
* @param name
*            name of the component
*/
public treepathslistview string name
super name  treepathsmodel
/**
* @see org.apache.wicket.markup.html.list.listview#getreuseitems()
*/
public boolean getreuseitems
return tree this getoptimizeitemremoval
/**
* @see org.apache.wicket.markup.html.list.listview#newitem(int)
*/
protected listitem newitem final int index
imodel listitemmodel   getlistitemmodel getmodel    index
// create a list item that is smart enough to determine whether
// it should be displayed or not
return new listitem index  listitemmodel
private static final long serialversionuid   1l
public boolean isvisible
treestate treestate   gettreestate
defaultmutabletreenode node    defaultmutabletreenode getmodelobject
final treepath path   new treepath node getpath
final int row   treestate getrowforpath path
// if the row is -1, it is not visible, otherwise it is
return  row     1
/**
* @see org.apache.wicket.markup.html.list.listview#populateitem(org.apache.wicket.markup.html.list.listitem)
*/
protected void populateitem listitem listitem
// get the model object which is a tree node
defaultmutabletreenode node    defaultmutabletreenode listitem getmodelobject
// add spacers
int level   node getlevel
listitem add new spacerlist    level
// add node panel
component nodepanel   newnodepanel    node
if  nodepanel    null
throw new wicketruntimeexception
if     equals nodepanel getid
throw new wicketruntimeexception
listitem add nodepanel
// add attr modifier for highlighting the selection
listitem add new attributemodifier    true  new selectedpathreplacementmodel
tree this  node
/**
* model for the paths of the tree.
*/
private final class treepathsmodel implements imodel
private static final long serialversionuid   1l
/** whether this model is dirty. */
boolean dirty   true
/** tree paths. */
private list paths   new arraylist
private transient boolean attached   false
/**
* inserts the given node in the path list with the given index.
*
* @param index
*            the index where the node should be inserted in
* @param node
*            node to insert
*/
void add int index  defaultmutabletreenode node
paths add index  node
/**
* gives the index of the given node withing this tree.
*
* @param node
*            node to look for
* @return the index of the given node withing this tree
*/
int indexof defaultmutabletreenode node
return paths indexof node
/**
* removes the given node from the path list.
*
* @param node
*            the node to remove
*/
void remove defaultmutabletreenode node
paths remove node
public object getobject
if  dirty     attached
paths clear
treemodel model   gettreestate   getmodel
defaultmutabletreenode rootnode    defaultmutabletreenode model getroot
enumeration e   rootnode preorderenumeration
while  e hasmoreelements
defaultmutabletreenode treenode    defaultmutabletreenode e nextelement
// treepath path = new treepath(treenode.getpath());
paths add treenode
dirty   false
attached   true
return paths
public void setobject object object
throw new unsupportedoperationexception
public void detach
attached   false
/** name of the junction image component; value = 'junctionimage'. */
public static final string junction_image_name
/** name of the node image component; value = 'nodeimage'. */
public static final string node_image_name
/** blank image. */
private static final resourcereference blank   new resourcereference tree class
/**
* reference to the css file.
*/
private static final resourcereference css   new compressedresourcereference tree class
/** minus sign image. */
private static final resourcereference minus   new resourcereference tree class
/** plus sign image. */
private static final resourcereference plus   new resourcereference tree class
private static final long serialversionuid   1l
/**
* if true, re-rendering the tree is more efficient if the tree model
* doesn't get changed. however, if this is true, you need to push changes
* to this tree. this can easility be done by registering this tree as the
* listener for tree model events (treemodellistener), but you should <b>be
* carefull</b> not to create a memory leak by doing this (e.g. when you
* store the tree model in your session, the tree you registered cannot be
* gc-ed). true by default.
*/
private boolean reuseitems   true
/** list view for tree paths. */
private treepathslistview treepathslistview
/** model for the paths of the tree. */
private treepathsmodel treepathsmodel
/**
* constructor.
*
* @param id
*            the id of this container
* @param model
*            the underlying tree model
*/
public tree final string id  final treemodel model
super id  model
this treepathsmodel   new treepathsmodel
add treepathslistview   createtreepathslistview
resourcereference css   getcss
add headercontributor forcss css getscope    css getname
/**
* construct using the given tree state that holds the model to be used as
* the tree model.
*
* @param id
*            the id of this container
* @param treestate
*            treestate that holds the underlying tree model
*/
public tree string id  treestate treestate
super id  treestate
this treepathsmodel   new treepathsmodel
add treepathslistview   createtreepathslistview
resourcereference css   getcss
add headercontributor forcss css getscope    css getname
/**
* gets whether item removal should be optimized. if true, re-rendering the
* tree is more efficient if the tree model doesn't get changed. however, if
* this is true, you need to push changes to this tree. this can easility be
* done by registering this tree as the listener for tree model events
* (treemodellistener), but you should <b>be carefull</b> not to create a
* memory leak by doing this (e.g. when you store the tree model in your
* session, the tree you registered cannot be gc-ed). true by default.
*
* @return whether item removal should be optimized
* @deprecated will be replaced by {@link #getreuseitems()}
*/
// todo post 1.2: remove
public boolean getoptimizeitemremoval
return getreuseitems
/**
* gets whether items should be reused. if true, re-rendering the tree is
* more efficient if the tree model doesn't get changed. however, if this is
* true, you need to push changes to this tree. this can easility be done by
* registering this tree as the listener for tree model events
* (treemodellistener), but you should <b>be carefull</b> not to create a
* memory leak by doing this (e.g. when you store the tree model in your
* session, the tree you registered cannot be gc-ed). true by default.
*
* @return whether items should be reused
*/
public boolean getreuseitems
return reuseitems
/**
* sets whether items should be reused. if true, re-rendering the tree is
* more efficient if the tree model doesn't get changed. however, if this is
* true, you need to push changes to this tree. this can easility be done by
* registering this tree as the listener for tree model events
* (treemodellistener), but you should <b>be carefull</b> not to create a
* memory leak by doing this (e.g. when you store the tree model in your
* session, the tree you registered cannot be gc-ed). true by default.
*
* @param optimizeitemremoval
*            whether the child items should be reused
* @deprecated will be replaced by {@link #setreuseitems(boolean)}
*/
// todo post 1.2: remove
public void setoptimizeitemremoval boolean optimizeitemremoval
setreuseitems optimizeitemremoval
/**
* sets whether item removal should be optimized. if true, re-rendering the
* tree is more efficient if the tree model doesn't get changed. however, if
* this is true, you need to push changes to this tree. this can easility be
* done by registering this tree as the listener for tree model events
* (treemodellistener), but you should <b>be carefull</b> not to create a
* memory leak by doing this (e.g. when you store the tree model in your
* session, the tree you registered cannot be gc-ed). true by default.
*
* @param reuseitems
*            whether the child items should be reused
* @return this
*/
public tree setreuseitems boolean reuseitems
this reuseitems   reuseitems
return this
/**
* sets the current tree model.
*
* @param treemodel
*            the tree model to set as the current one
*/
public void settreemodel final treemodel treemodel
super settreemodel treemodel
this treepathsmodel   new treepathsmodel
treepathslistview   createtreepathslistview
replace treepathslistview
/**
* sets the current tree state to the given tree state.
*
* @param treestate
*            the tree state to set as the current one
*/
public void settreestate final treestate treestate
super settreestate treestate
this treepathsmodel   new treepathsmodel
treepathslistview   createtreepathslistview
replace treepathslistview
/**
* @see javax.swing.event.treemodellistener#treenodeschanged(javax.swing.event.treemodelevent)
*/
public void treenodeschanged treemodelevent e
// nothing to do here
/**
* @see javax.swing.event.treemodellistener#treenodesinserted(javax.swing.event.treemodelevent)
*/
public void treenodesinserted treemodelevent e
modelchanging
object newnodes   e getchildren
int len   newnodes length
for  int i   0  i < len  i
defaultmutabletreenode newnode    defaultmutabletreenode newnodes
defaultmutabletreenode previousnode   newnode getprevioussibling
int insertrow
if  previousnode    null
previousnode    defaultmutabletreenode newnode getparent
if  previousnode    null
insertrow   treepathsmodel indexof previousnode    1
if  insertrow     1
throw new illegalstateexception     previousnode
else
insertrow   0
treepathsmodel add insertrow  newnode
modelchanged
/**
* @see javax.swing.event.treemodellistener#treenodesremoved(javax.swing.event.treemodelevent)
*/
public void treenodesremoved treemodelevent e
modelchanging
object deletednodes   e getchildren
int len   deletednodes length
for  int i   0  i < len  i
defaultmutabletreenode deletednode    defaultmutabletreenode deletednodes
treepathsmodel remove deletednode
modelchanged
/**
* @see javax.swing.event.treemodellistener#treestructurechanged(javax.swing.event.treemodelevent)
*/
public void treestructurechanged treemodelevent e
treepathsmodel dirty   true
modelchanged
/**
* creates a junction link.
*
* @param node
*            the node
* @return link for expanding/ collapsing the tree
*/
protected link createjunctionlink final defaultmutabletreenode node
final link junctionlink   new link
private static final long serialversionuid   1l
public void onclick
junctionlinkclicked node
junctionlink add getjunctionimage node
return junctionlink
/**
* creates a node link.
*
* @param node
*            the model of the node
* @return link for selection
*/
protected link createnodelink final defaultmutabletreenode node
final link nodelink   new link
private static final long serialversionuid   1l
public void onclick
nodelinkclicked node
nodelink add getnodeimage node
nodelink add new label    getnodelabel node
return nodelink
/**
* creates the tree paths list view.
*
* @return the tree paths list view
*/
protected final treepathslistview createtreepathslistview
final treepathslistview treepaths   new treepathslistview
return treepaths
/**
* returns whether the path and the selected path are equal. this method is
* used by the {@link attributemodifier}that is used for setting the css
* class for the selected row.
*
* @param path
*            the path
* @param selectedpath
*            the selected path
* @return true if the path and the selected are equal, false otherwise
*/
protected boolean equals final treepath path  final treepath selectedpath
object pathnode   path getlastpathcomponent
object selectedpathnode   selectedpath getlastpathcomponent
return  pathnode    null    selectedpathnode    null    pathnode equals selectedpathnode
/**
* gets the stylesheet.
*
* @return the stylesheet
*/
protected resourcereference getcss
return css
/**
* get image for a junction; used by method createexpandcollapselink. if you
* use the packaged panel (tree.html), you must name the component using
* junction_image_name.
*
* @param node
*            the tree node
* @return the image for the junction
*/
protected image getjunctionimage final defaultmutabletreenode node
if   node isleaf
// we want the image to be dynamically, yet resolving to a static
// image.
return new image junction_image_name
private static final long serialversionuid   1l
protected resourcereference getimageresourcereference
if  isexpanded node
return minus
else
return plus
else
return new image junction_image_name  blank
/**
* get image for a node; used by method createnodelink. if you use the
* packaged panel (tree.html), you must name the component using
* node_image_name.
*
* @param node
*            the tree node
* @return the image for the node
*/
protected image getnodeimage final defaultmutabletreenode node
return new image node_image_name  blank
/**
* gets the label of the node that is used for the node link. defaults to
* treenodemodel.getuserobject().tostring(); override to provide a custom
* label
*
* @param node
*            the tree node
* @return the label of the node that is used for the node link
*/
protected string getnodelabel final defaultmutabletreenode node
return string valueof node getuserobject
/**
* @see org.apache.wicket.component#onattach()
*/
protected void onattach
super onattach
// if we don't optimize, rebuild the paths on every request
if   getoptimizeitemremoval
treepathsmodel dirty   true
/**
* handler that is called when a junction link is clicked; this
* implementation sets the expanded state to one that corresponds with the
* node selection.
*
* @param node
*            the tree node
*/
protected void junctionlinkclicked final defaultmutabletreenode node
setexpandedstate node
/**
* create a new panel for a tree node. this method can be overriden to
* provide a custom panel. this way, you can effectively nest anything you
* want in the tree, like input fields, images, etc.
* <p>
* <strong> you must use the provide panelid as the id of your custom panel
* </strong><br>
* for example, do:
*
* <pre>
* return new mynodepanel(panelid, node);
* </pre>
*
* </p>
* <p>
* you can choose to either let your own panel extend from defaultnodepanel
* when you just want to provide different markup but want to reuse the
* default components on this panel, or extend from nodepanel directly, and
* provide any component structure you like.
* </p>
*
* @param panelid
*            the id that the panel must use
* @param node
*            the tree node for the panel
* @return a new panel
*/
protected component newnodepanel string panelid  defaultmutabletreenode node
return new defaultnodepanel panelid  this  node
/**
* handler that is called when a node link is clicked; this implementation
* sets the expanded state just as a click on a junction would do. override
* this for custom behavior.
*
* @param node
*            the tree node model
*/
protected void nodelinkclicked final defaultmutabletreenode node
setselected node