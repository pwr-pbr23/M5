/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java io serializable
/**
* a key to a piece of metadata associated with a component at runtime. the key
* contains type information that can be used to check the type of any metadata
* value for the key when the value is set on the given component. metadatakey
* is abstract in order to force the creation of a subtype. that subtype is used
* to test for identity when looking for the metadata because actual object
* identity would suffer from problems under serialization. so, the correct way
* to declare a metadatakey is like this: public static metadatakey role = new
* metadatakey(role.class) { }
*
* @author jonathan locke
*/
public abstract class metadatakey implements iclusterable
private static final long serialversionuid   1l
/** type of data associated with this key */
private class type
/**
* constructor.
*
* @param type
*            the type of value stored under this key
*/
public metadatakey final class type
this type   type
/**
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object obj
return getclass   isinstance obj
/**
* @param metadata
*            array of metadata to search
* @return the entry value
*/
serializable get metadataentry metadata
if  metadata    null
for  int i   0  i < metadata length  i
metadataentry m   metadata
if  equals m key
return m object
return null
/**
* @param metadata
*            the array of metadata
* @param object
*            the object to set
* @return any new metadata array (if it was reallocated)
*/
metadataentry set metadataentry metadata  final serializable object
checktype object
boolean set   false
if  metadata    null
for  int i   0  i < metadata length  i
metadataentry m   metadata
if  equals m key
m object   object
set   true
if   set
metadataentry m   new metadataentry
m key   this
m object   object
if  metadata    null
metadata   new metadataentry
metadata   m
else
final metadataentry newmetadata   new metadataentry
system arraycopy metadata  0  newmetadata  0  metadata length
newmetadata   m
metadata   newmetadata
return metadata
/**
* checks the type of the given object against the type for this metadata
* key.
*
* @param object
*            the object to check
* @throws illegalargumentexception
*             thrown if the type of the given object does not match the
*             type for this key.
*/
void checktype final object object
if  object    null     type isassignablefrom object getclass
throw new illegalargumentexception     getclass
type       object getclass