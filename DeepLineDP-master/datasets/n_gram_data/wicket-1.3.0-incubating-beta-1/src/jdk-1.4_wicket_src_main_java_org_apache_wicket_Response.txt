/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java io ioexception
import java io inputstream
import java io outputstream
import java net socketexception
import java net urlconnection
import java sql sqlexception
import java util list
import java util locale
import javax servlet servletcontext
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket markup componenttag
import org apache wicket protocol http webapplication
import org apache wicket util io streams
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util time time
/**
* abstract base class for different implementations of response writing. a
* subclass must implement write(string) to write a string to the response
* destination (whether it be a browser, a file, a test harness or some other
* place). a subclass may optionally implement close(), encodeurl(string),
* redirect(string), isredirect() or setcontenttype(string) as appropriate.
*
* @author jonathan locke
*/
public abstract class response
private static final log log   logfactory getlog response class
/** default encoding of output stream */
private string defaultencoding
/**
* closes the response output stream
*/
public void close
/**
* called when the response needs to reset itself. subclasses can empty
* there buffer or build up state.
*/
public void reset
/**
* an implementation of this method is only required if a subclass wishes to
* support sessions via url rewriting. this default implementation simply
* returns the url string it is passed.
*
* @param url
*            the url to encode
* @return the encoded url
*/
public charsequence encodeurl final charsequence url
return url
/**
* this method is not part of the wicket public api. do not use it.
*
* loops over all the response filters that were set (if any) with the give
* response returns the response buffer itself if there where now filters or
* the response buffer that was created/returned by the filter(s)
*
* @param responsebuffer
*            the response buffer to be filtered
* @return returns the filtered string buffer.
*/
public final appendingstringbuffer filter appendingstringbuffer responsebuffer
list responsefilters   application get   getrequestcyclesettings   getresponsefilters
if  responsefilters    null
return responsebuffer
for  int i   0  i < responsefilters size    i
iresponsefilter filter    iresponsefilter responsefilters get i
responsebuffer   filter filter responsebuffer
return responsebuffer
/**
* get the default encoding
*
* @return default encoding
*/
public string getcharacterencoding
if  this defaultencoding    null
return application get   getrequestcyclesettings   getresponserequestencoding
else
return this defaultencoding
/**
* @return the output stream for this response
*/
public abstract outputstream getoutputstream
/**
* returns true if a redirection has occurred. the default implementation
* always returns false since redirect is not implemented by default.
*
* @return true if the redirect method has been called, making this response
*         a redirect.
*/
public boolean isredirect
return false
/**
* clients should never call this method for day to day use!
* <p>
* a subclass may override this method to implement redirection. subclasses
* which have no need to do redirection may choose not to override this
* default implementation, which does nothing. for example, if a subclass
* wishes to write output to a file or is part of a testing harness, there
* may be no meaning to redirection.
* </p>
* <p>
* framework users who want to redirect should use a construction like
* <code>
* requestcycle.get().setrequesttarget(new redirectrequesttarget(...));
* </code>
* or
* <code>
* setresponsepage(new redirectpage(...));
* </code>
* </p>
*
* @param url
*            the url to redirect to
*/
public void redirect final string url
/**
* set the default encoding for the output. note: it is up to the derived
* class to make use of the information. class respsonse simply stores the
* value, but does not apply it anywhere automatically.
*
* @param encoding
*/
public void setcharacterencoding final string encoding
this defaultencoding   encoding
/**
* set the content length on the response, if appropriate in the subclass.
* this default implementation does nothing.
*
* @param length
*            the length of the content
*/
public void setcontentlength final long length
/**
* set the content type on the response, if appropriate in the subclass.
* this default implementation does nothing.
*
* @param mimetype
*            the mime type
*/
public void setcontenttype final string mimetype
/**
* set the contents last modified time, if appropriate in the subclass. this
* default implementation does nothing.
*
* @param time
*            the time object
*/
public void setlastmodifiedtime time time
/**
* @param locale
*            locale to use for this response
*/
public void setlocale final locale locale
/**
* writes the given tag to via the write(string) abstract method.
*
* @param tag
*            the tag to write
*/
public final void write final componenttag tag
write tag tostring
/**
* writes the given string to the response subclass output destination.
*
* @param string
*            the string to write
*/
public abstract void write final charsequence string
/**
* either throws the exception wrapped as {@link wicketruntimeexception} or
* silently ignores it. this method should ignore io related exceptions like
* connection reset by peer or broken pipe.
*
* @param e
*/
private void handleexception exception e
// fixme this doesn't catch all. for instance, jetty (6/ nio) on
// unix like platforms will not be recogninzed as exceptions
// that should be ignored
throwable throwable   e
boolean ignoreexception   false
while  throwable    null
if  throwable instanceof sqlexception
break     leave false and quit loop
else if  throwable instanceof socketexception
string message   throwable getmessage
ignoreexception   message    null
message indexof        1
message indexof        1
message indexof        1
message indexof        1
else
ignoreexception   throwable getclass   getname   indexof    >  0
throwable getclass   getname   indexof    >  0
if  ignoreexception
if  log isdebugenabled
log debug
e
break
throwable   throwable getcause
if   ignoreexception
throw new wicketruntimeexception    e
/**
* copies the given input stream to the servlet response
* <p>
* note content-length is not set because it would require to buffer the
* whole input stream
* </p>
*
* @param in
*            input stream to copy, will be closed after copy
*/
public void write inputstream in
outputstream out   getoutputstream
try
// copy resource input stream to servlet output stream
streams copy in  out
catch  exception e
handleexception e
finally
// note: we only close the inputstream. the servlet
// container should close the output stream.
try
in close
out flush
catch  ioexception e
// jetty 6 throws broken pipe exception here too
handleexception e
/**
* writes the given string to the response subclass output destination and
* appends a cr/nl depending on the os
*
* @param string
*/
public final void println final charsequence string
write string
write strings line_separator
/**
* sets the content-type header with servlet-context-defined content-types
* (application's web.xml or servlet container's configuration), and fall
* back to system or jvm-defined (filenamemap) content types.
*
* @param requestcycle
* @param uri
*            resource name to be analyzed to detect mime type
*
* @see servletcontext#getmimetype(string)
* @see urlconnection#getfilenamemap()
*/
public void detectcontenttype requestcycle requestcycle  string uri
// configure response with content type of resource
final servletcontext context     webapplication requestcycle getapplication
getservletcontext
// first look for user defined content-type in web.xml
string contenttype   context getmimetype uri
// if not found, fall back to
// fileresourcestream.getcontenttype() that looks into
// system or jvm content types
if  contenttype    null
contenttype   urlconnection getfilenamemap   getcontenttypefor uri
if  contenttype    null
setcontenttype contenttype       getcharacterencoding