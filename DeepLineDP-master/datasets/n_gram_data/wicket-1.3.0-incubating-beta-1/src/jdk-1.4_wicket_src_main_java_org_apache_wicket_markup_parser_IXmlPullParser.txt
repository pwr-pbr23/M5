/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser
import java io ioexception
import java io inputstream
import java text parseexception
import org apache wicket util resource resourcestreamnotfoundexception
/**
* the interface of a streaming xml parser as required by wicket.
*
* @author juergen donnerstag
* @author jonathan locke
*/
public interface ixmlpullparser extends imarkupfilter
/**
* return the encoding applied while reading the markup resource. the
* encoding is determined by analysing the &lt;?xml version=".."
* encoding=".." ?&gt; tag.
*
* @return if null, jvm defaults have been used.
*/
string getencoding
/**
* return the xml declaration string, in case if found in the markup.
*
* @return null, if not found.
*/
string getxmldeclaration
/**
* wicket dissects the markup into wicket relevant tags and raw markup,
* which is not further analysed by wicket. the method
* getinputfrompositionmarker() is used to access the raw markup.
*
* @param topos
*            to position
* @return the raw markup in between the position marker and topos
*/
charsequence getinputfrompositionmarker int topos
/**
* wicket dissects the markup into wicket relevant tags and raw markup,
* which is not further analysed by wicket. the getinputsubsequence() method
* is used to access the raw markup.
*
* @param frompos
*            from position
* @param topos
*            to position
* @return the raw markup in between frompos and topos
*/
charsequence getinput final int frompos  final int topos
/**
* dissect the xml markup into tags and text. tags are further analysed into
* comments, cdata, processing instruction etc as well as "standard" tags.
* by means of gettype() the type of the current element can be retrieved
* and the appropriate getters must used to get hold of the informantion.
*
* @return false, if end-of-file as been reached. if true, than use
*         gettype() to determine what has been found.
* @throws parseexception
*/
boolean next   throws parseexception
/**
* parse the markup provided. use nexttag() to access the tags contained one
* after another.
* <p>
* note: xml character encoding is not applied. it is assumed the input
* provided does have the correct encoding already.
*
* @param string
*            the markup to be parsed
* @throws ioexception
*             error while reading the resource
* @throws resourcestreamnotfoundexception
*             resource not found
*/
void parse final charsequence string  throws ioexception  resourcestreamnotfoundexception
/**
* reads and parses markup from an input stream, using utf-8 encoding by
* default when not specified in xml declaration. use nexttag() to access
* the tags contained, one after another.
*
* @param inputstream
*            the input stream to read and parse
* @throws ioexception
*             error while reading the resource
* @throws resourcestreamnotfoundexception
*             resource not found
*/
public abstract void parse final inputstream inputstream  throws ioexception
resourcestreamnotfoundexception
/**
* reads and parses markup from an input stream. use nexttag() to access the
* tags contained, one after another.
*
* @param inputstream
*            a resource like e.g. a file
* @param encoding
*            use null to apply jvm/os default
* @throws ioexception
*             error while reading the resource
* @throws resourcestreamnotfoundexception
*             resource not found
*/
void parse inputstream inputstream  final string encoding  throws ioexception
resourcestreamnotfoundexception
/**
* set the position marker of the markup at the current position.
*/
void setpositionmarker
/**
* set the position marker of the markup
*
* @param pos
*/
void setpositionmarker final int pos