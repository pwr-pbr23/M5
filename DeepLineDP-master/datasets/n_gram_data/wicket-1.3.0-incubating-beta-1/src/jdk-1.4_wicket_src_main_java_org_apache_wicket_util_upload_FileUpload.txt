/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util upload
/**
* <p>
* high level api for processing file uploads.
* </p>
*
* <p>
* this class handles multiple files per single html widget, sent using
* <code>multipart/mixed</code> encoding type, as specified by <a
* href="http://www.ietf.org/rfc/rfc1867.txt">rfc 1867</a>.
* </p>
*
* <p>
* how the data for individual parts is stored is determined by the factory used
* to create them; a given part may be in memory, on disk, or somewhere else.
* </p>
*
* @author <a href="mailto:rafal.krzewski@e-point.pl">rafal krzewski</a>
* @author <a href="mailto:dlr@collab.net">daniel rall</a>
* @author <a href="mailto:jvanzyl@apache.org">jason van zyl</a>
* @author <a href="mailto:jmcnally@collab.net">john mcnally</a>
* @author <a href="mailto:martinc@apache.org">martin cooper</a>
* @author sean c. sullivan
*/
public class fileupload extends fileuploadbase
/**
* the factory to use to create new form items.
*/
private fileitemfactory fileitemfactory
/**
* constructs an uninitialised instance of this class. a factory must be
* configured, using <code>setfileitemfactory()</code>, before attempting
* to parse requests.
*
* @see #fileupload(fileitemfactory)
*/
public fileupload
super
/**
* constructs an instance of this class which uses the supplied factory to
* create <code>fileitem</code> instances.
*
* @param fileitemfactory
*
* @see #fileupload()
*/
public fileupload fileitemfactory fileitemfactory
super
this fileitemfactory   fileitemfactory
/**
* returns the factory class used when creating file items.
*
* @return the factory class for new file items.
*/
public fileitemfactory getfileitemfactory
return fileitemfactory
/**
* sets the factory class to use when creating file items.
*
* @param factory
*            the factory class for new file items.
*/
public void setfileitemfactory fileitemfactory factory
this fileitemfactory   factory