/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java util arraylist
import java util iterator
import java util list
import org apache wicket request target basic redirectrequesttarget
import org apache wicket session pagemap ipagemapentry
import org apache wicket util lang objects
/**
* @author jonathan locke
* @author jcompagner
*/
public abstract class pagemap implements iclusterable  ipagemap
/**
* visitor interface for visiting entries in this map
*
* @author jonathan locke
*/
static interface ivisitor
/**
* @param entry
*            the page map entry
*/
public void entry final ipagemapentry entry
/** name of default pagemap */
public static final string default_name   null
private static final long serialversionuid   1l
/**
* gets a page map for a page map name, automatically creating the page map
* if it does not exist. if you do not want the pagemap to be automatically
* created, you can call session.pagemapforname(pagemapname, false).
*
* @param pagemapname
*            the name of the page map to get
* @return the pagemap with the given name from the current session
*/
public static ipagemap forname final string pagemapname
session session   session get
return  session    null  ? session pagemapforname pagemapname  true    null
/** url to continue to after a given page. */
private string interceptcontinuationurl
/** name of this page map */
private final string name
/** next available page identifier in this page map. */
private int pageid   0
/**
* constructor
*
* @param name
*            the name of this page map
* @param session
*            the session holding this page map
*/
public pagemap string name
this name   name
/**
* @see org.apache.wicket.ipagemap#attributeforid(int)
*/
public final string attributeforid final int id
return attributeprefix     id
/**
* @see org.apache.wicket.ipagemap#clear()
*/
public void clear
// remove all entries
visitentries new ivisitor
public void entry ipagemapentry entry
removeentry entry
/**
* redirects to any intercept page previously specified by a call to
* redirecttointerceptpage.
*
* @return true if an original destination was redirected to
* @see pagemap#redirecttointerceptpage(page)
*/
public final boolean continuetooriginaldestination
// get request cycle
final requestcycle cycle   requestcycle get
// if there's a place to go to
if  interceptcontinuationurl    null
cycle setrequesttarget new redirectrequesttarget interceptcontinuationurl
// reset interception url
interceptcontinuationurl   null
// force session to replicate page maps
dirty
return true
return false
/**
* @see org.apache.wicket.ipagemap#get(int, int)
*/
public abstract page get final int id  int versionnumber
/**
* @see org.apache.wicket.ipagemap#getentry(int)
*/
public final ipagemapentry getentry final int id
return  ipagemapentry session get   getattribute attributeforid id
/**
* @see org.apache.wicket.ipagemap#getname()
*/
public final string getname
return name
/**
* @return session this page map is in
*/
public final session getsession
return session get
/**
* @see org.apache.wicket.ipagemap#getsizeinbytes()
*/
public final long getsizeinbytes
long size   objects sizeof this
iterator it   getentries   iterator
while  it hasnext
ipagemapentry entry    ipagemapentry it next
if  entry instanceof page
size      page entry  getsizeinbytes
else
size    objects sizeof entry
return size
/**
* @see org.apache.wicket.ipagemap#isdefault()
*/
public final boolean isdefault
return name    pagemap default_name
/**
* @see org.apache.wicket.ipagemap#nextid()
*/
public final int nextid
dirty
return this pageid
/**
* @see org.apache.wicket.ipagemap#put(org.apache.wicket.page)
*/
public abstract void put final page page
/**
* redirects browser to an intermediate page such as a sign-in page. the
* current request's url is saved exactly as it was requested for future use
* by continuetooriginaldestination(); only use this method when you plan to
* continue to the current url at some later time; otherwise just use
* setresponsepage or, when you are in a constructor, redirectto.
*
* @param pageclazz
*            the page clazz to temporarily redirect to
*/
public final void redirecttointerceptpage final class pageclazz
session session   session get
if  session istemporary
session bind
// get the request cycle
final requestcycle cycle   requestcycle get
// the intercept continuation url should be saved exactly as the
// original request specified.
interceptcontinuationurl   cycle getrequest   geturl
// page map is dirty
session dirtypagemap this
// redirect to the page
cycle setredirect true
cycle setresponsepage pageclazz
/**
* redirects browser to an intermediate page such as a sign-in page. the
* current request's url is saved exactly as it was requested for future use
* by continuetooriginaldestination(); only use this method when you plan to
* continue to the current url at some later time; otherwise just use
* setresponsepage or, when you are in a constructor, redirectto.
*
* @param page
*            the page to temporarily redirect to
*/
public final void redirecttointerceptpage final page page
session session   session get
if  session istemporary
session bind
// get the request cycle
final requestcycle cycle   requestcycle get
// the intercept continuation url should be saved exactly as the
// original request specified.
interceptcontinuationurl   cycle getrequest   geturl
// page map is dirty
dirty
// redirect to the page
cycle setredirect true
cycle setresponsepage page
/**
* @see org.apache.wicket.ipagemap#remove()
*/
public final void remove
// first clear all pages from the session for this pagemap
clear
// then remove the pagemap itself
session get   removepagemap this
/**
* @see org.apache.wicket.ipagemap#remove(org.apache.wicket.page)
*/
public final void remove final page page
// remove the pagemap entry from session
removeentry page getpagemapentry
/**
* @see org.apache.wicket.ipagemap#removeentry(org.apache.wicket.session.pagemap.ipagemapentry)
*/
public abstract void removeentry final ipagemapentry entry
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     name
/**
* @return list of entries in this page map
*/
private final list getentries
final session session   session get
final list attributes   session getattributenames
final list list   new arraylist
for  final iterator iterator   attributes iterator    iterator hasnext
final string attribute    string iterator next
if  attribute startswith attributeprefix
list add session getattribute attribute
return list
protected final void dirty
session get   dirtypagemap this
/**
* @param visitor
*            the visitor to call at each page in this pagemap.
*/
protected final void visitentries final ivisitor visitor
final session session   session get
final list attributes   session getattributenames
for  final iterator iterator   attributes iterator    iterator hasnext
final string attribute    string iterator next
if  attribute startswith attributeprefix
visitor entry  ipagemapentry session getattribute attribute
/**
* @return the attribute prefix for this page map
*/
final string attributeprefix
return session pagemapentryattributeprefix   name