/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies role metadata
import java util hashmap
import java util map
import org apache wicket iclusterable
import org apache wicket authorization action
import org apache wicket authorization strategies role roles
/**
* for each action, holds a set of roles that can perform that action. roles can
* be granted access to a given action via authorize(action, string role) and
* denied access via unauthorize(action, string role). all permissions can be
* removed for a given action via authorizeall(action).
*
* @author eelco hillenius
* @author jonathan locke
*/
final class actionpermissions implements iclusterable
private static final long serialversionuid   1l
/** map from an action to a set of role strings */
private final map<action  roles> rolesforaction   new hashmap<action  roles>
/**
* gives permission for the given roles to perform the given action
*
* @param action
*            the action
* @param rolestoadd
*            the roles
*/
public final void authorize final action action  final roles rolestoadd
if  action    null
throw new illegalargumentexception
if  rolestoadd    null
throw new illegalargumentexception
roles roles   rolesforaction get action
if  roles    null
roles   new roles
rolesforaction put action  roles
roles addall rolestoadd
/**
* remove all authorization for the given action.
*
* @param action
*            the action to clear
*/
public final void authorizeall final action action
if  action    null
throw new illegalargumentexception
rolesforaction remove action
/**
* gets the roles that have a binding for the given action.
*
* @param action
*            the action
* @return the roles authorized for the given action
*/
public final roles rolesfor final action action
if  action    null
throw new illegalargumentexception
return rolesforaction get action
/**
* remove the given authorized role from an action.
*
* @param action
*            the action
* @param rolestoremove
*            the comma separated list of roles to remove
*/
public final void unauthorize final action action  final roles rolestoremove
if  action    null
throw new illegalargumentexception
if  rolestoremove    null
throw new illegalargumentexception
roles roles   rolesforaction get action
if  roles    null
roles removeall rolestoremove
// if we removed the last authorized role, we authorize the empty role
// so that removing authorization can't suddenly open something up to
// everyone.
if  roles size      0
roles add metadataroleauthorizationstrategy no_role