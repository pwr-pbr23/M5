/*
* ====================================================================
*
* the apache software license, version 1.1
*
* copyright (c) 1999-2003 the apache software foundation.  all rights
* reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution, if
*    any, must include the following acknowledgement:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgement may appear in the software itself,
*    if and wherever such third-party acknowledgements normally appear.
*
* 4. the names "the jakarta project", "commons", and "apache software
*    foundation" must not be used to endorse or promote products derived
*    from this software without prior written permission. for written
*    permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache"
*    nor may "apache" appear in their names without prior written
*    permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*
*/
package org apache wicket util diff myers
import org apache wicket util diff chunk
import org apache wicket util diff delta
import org apache wicket util diff diff
import org apache wicket util diff diffalgorithm
import org apache wicket util diff differentiationfailedexception
import org apache wicket util diff revision
/**
* a clean-room implementation of <a
* href="http://www.cs.arizona.edu/people/gene/"> eugene myers</a> differencing
* algorithm.
* <p>
* see the paper at <a
* href="http://www.cs.arizona.edu/people/gene/papers/diff.ps">
* http://www.cs.arizona.edu/people/gene/papers/diff.ps</a>
*
* @version $revision: 1.1 $ $date: 2006/03/12 00:24:21 $
* @author <a href="mailto:juanco@suigeneris.org">juanco anez</a>
* @see delta
* @see revision
* @see diff
*/
public class myersdiff implements diffalgorithm
/**
* constructs an instance of the myers differencing algorithm.
*/
public myersdiff
/**
* {@inheritdoc}
*/
public revision diff object orig  object rev
throws differentiationfailedexception
pathnode path   buildpath orig  rev
return buildrevision path  orig  rev
/**
* computes the minimum diffpath that expresses de differences between the
* original and revised sequences, according to gene myers differencing
* algorithm.
*
* @param orig
*            the original sequence.
* @param rev
*            the revised sequence.
* @return a minimum {@link pathnode path} accross the differences graph.
* @throws differentiationfailedexception
*             if a diff path could not be found.
*/
public static pathnode buildpath object orig  object rev
throws differentiationfailedexception
if  orig    null
throw new illegalargumentexception
if  rev    null
throw new illegalargumentexception
// these are local constants
final int n   orig length
final int m   rev length
final int max   n   m   1
final int size   1   2   max
final int middle    size   1    2
final pathnode diagonal   new pathnode
diagonal   new snake 0   1  null
for  int d   0  d < max  d
for  int k    d  k <  d  k    2
final int kmiddle   middle   k
final int kplus   kmiddle   1
final int kminus   kmiddle   1
pathnode prev   null
int i
if   k     d
k    d    diagonal i < diagonal i
i   diagonal i
prev   diagonal
else
i   diagonal i   1
prev   diagonal
diagonal   null     no longer used
int j   i   k
pathnode node   new diffnode i  j  prev
// orig and rev are zero-based
// but the algorithm is one-based
// that's why there's no +1 when indexing the sequences
while  i < n    j < m    orig equals rev
i
j
if  i > node i
node   new snake i  j  node
diagonal   node
if  i >  n    j >  m
return diagonal
diagonal   null
// according to myers, this cannot happen
throw new differentiationfailedexception
/**
* constructs a {@link revision} from a difference path.
*
* @param path
*            the path.
* @param orig
*            the original sequence.
* @param rev
*            the revised sequence.
* @return a {@link revision} script corresponding to the path.
* @throws differentiationfailedexception
*             if a {@link revision} could not be built from the given path.
*/
public static revision buildrevision pathnode path  object orig
object rev
if  path    null
throw new illegalargumentexception
if  orig    null
throw new illegalargumentexception
if  rev    null
throw new illegalargumentexception
revision revision   new revision
if  path issnake
path   path prev
while  path    null    path prev    null    path prev j >  0
if  path issnake
throw new illegalstateexception
int i   path i
int j   path j
path   path prev
int ianchor   path i
int janchor   path j
delta delta   delta newdelta new chunk orig  ianchor  i   ianchor
new chunk rev  janchor  j   janchor
revision insertdelta delta
if  path issnake
path   path prev
return revision