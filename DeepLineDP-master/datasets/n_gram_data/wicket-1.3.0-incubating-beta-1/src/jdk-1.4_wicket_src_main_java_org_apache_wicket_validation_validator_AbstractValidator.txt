/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket validation validator
import java util hashmap
import java util map
import org apache wicket iclusterable
import org apache wicket markup html form formcomponent
import org apache wicket util lang classes
import org apache wicket validation ivalidatable
import org apache wicket validation ivalidator
import org apache wicket validation validationerror
/**
* convinience base class for {@link ivalidator}s. this class is thread-safe
* and therefore it is safe to share validators across sessions/threads.
* <p>
* error messages can be registered by calling one of the error(ivalidatable
* ...) overloads.
* <p>
* by default this class will skip validation if the
* {@link ivalidatable#getvalue()} returns null, validators that wish to
* validate the null value need to override {@link #validateonnullvalue()} and
* return <code>true</code>.
*
*
* @author jonathan locke
* @author eelco hillenius
* @author igor vaynberg (ivaynbeg)
*
*/
public abstract class abstractvalidator implements ivalidator  iclusterable
private static final long serialversionuid   1l
/**
* whether or not to validate the value if it is null. it is usually
* desirable to skip validation if the value is null - unless we want to
* make sure the value is in fact null which is a rare usecase. validators
* that extend this and wish to validate that the value is null should
* override this method and return <code>true</code>.
*
* @return true to validate on null value, false to skip validation on null
*         value
*/
public boolean validateonnullvalue
return false
/**
* method used to validate the validatable instance
*
* @param validatable
*/
protected abstract void onvalidate ivalidatable validatable
/**
* @see org.apache.wicket.validation.ivalidator#validate(org.apache.wicket.validation.ivalidatable)
*/
public final void validate ivalidatable validatable
if  validatable getvalue      null    validateonnullvalue
onvalidate validatable
/**
* reports an error against validatable using the map returned by
* {@link #variablesmap(ivalidatable)}for variable interpolations and
* message key returned by {@link #resourcekey()}.
*
* @param validatable
*            validatble being validated
*
*/
public void error final ivalidatable validatable
error validatable  resourcekey    variablesmap validatable
/**
* reports an error against validatable using the map returned by
* {@link #variablesmap(ivalidatable)}for variable interpolations and the
* specified resourcekey
*
* @param validatable
*            validatble being validated
* @param resourcekey
*            the message resource key to use
*
*/
public void error final ivalidatable validatable  string resourcekey
if  resourcekey    null
throw new illegalargumentexception
error validatable  resourcekey  variablesmap validatable
/**
* reports an error against the validatalbe using the given map for variable
* interpolations and message resource key provided by
* {@link #resourcekey()}
*
* @param validatable
*            validatble being validated
* @param vars
*            variables for variable interpolation
*/
public void error final ivalidatable validatable  final map vars
if  vars    null
throw new illegalargumentexception
error validatable  resourcekey    vars
/**
* reports an error against the validatable using the specified resource key
* and variable map
*
* @param validatable
*            validatble being validated
* @param resourcekey
*            the message resource key to use
* @param vars
*            the model for variable interpolation
*/
public void error final ivalidatable validatable  final string resourcekey
map vars
if  validatable    null
throw new illegalargumentexception
if  vars    null
throw new illegalargumentexception
if  resourcekey    null
throw new illegalargumentexception
validationerror error   new validationerror   addmessagekey resourcekey
final string defaultkey   classes simplename getclass
if   resourcekey equals defaultkey
error addmessagekey defaultkey
error setvariables vars
validatable error error
/**
* gets the resource key for validator's error message from the
* applicationsettings class.
*
* <strong>note</strong>: this method should never return null
*
* @return the resource key for the validator
*/
protected string resourcekey
return classes simplename getclass
/**
* gets the default variable map
*
* <strong>note</strong>: this method should never return null
*
* @param validatable
*            validatable being validated
*
* @return a map with the variables for interpolation
*/
protected map variablesmap ivalidatable validatable
final map resourcemodel   new hashmap 1
return resourcemodel
// deprecated methods
/**
* deprecated/unsupported
*
* gets the default variables for interpolation. these are:
* <ul>
* <li>${input}: the user's input</li>
* <li>${name}: the name of the component</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param formcomponent
*            form component
* @return a map with the variables for interpolation
*
* @deprecated use {@link #variablesmap(ivalidatable)} instead
* @throws unsupportedoperationexception
*
*
* fixme 2.0: remove asap
*/
protected final map messagemodel final formcomponent formcomponent
throw new unsupportedoperationexception
/**
* deprecated/unsupported
*
* gets the resource key for validator's error message from the
* applicationsettings class.
*
* @param formcomponent
*            form component that is being validated
*
* @return the resource key based on the form component
*
* @deprecated use {@link #resourcekey()} instead
* @throws unsupportedoperationexception
*
*
* fixme 2.0: remove asap
*
*/
protected final string resourcekey final formcomponent formcomponent
throw new unsupportedoperationexception
/**
* deprecated/unsupported
*
* this method is not part of the wicket public api. do not implement it.
* <p>
* instead of subclassing ivalidator, you should use one of the existing
* validators, which cover a huge number of cases, or if none satisfies your
* need, subclass customvalidator.
* <p>
* validates the given input. the input corresponds to the input from the
* request for a component.
*
* @param component
*            component to validate
*
* @deprecated use {@link #variablesmap(ivalidatable)} instead
* @throws unsupportedoperationexception
*
*
* fixme 2.0: remove asap
*/
public final void validate final formcomponent component
throw new unsupportedoperationexception