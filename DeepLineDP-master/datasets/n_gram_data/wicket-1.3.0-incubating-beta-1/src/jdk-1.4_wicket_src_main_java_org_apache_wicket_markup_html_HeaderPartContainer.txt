/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup resolver icomponentresolver
/**
* for each wicket:head tag a headerpartcontainer is created and added to
* the htmlheadercontainer which has been added to the page.
*
* @author juergen donnerstag
*/
public final class headerpartcontainer extends webmarkupcontainer
implements
icomponentresolver
private static final long serialversionuid   1l
/** the panel or bordered page the header part is associated with */
private final markupcontainer container
/** <wicket:head scope="...">. a kind of namespace */
private final string scope
/**
* @param id
*            the component id
* @param container
*            the panel (or bordered page) the header part is associated
*            with
* @param scope
*            the scope of the wicket:head tag
*/
public headerpartcontainer final string id  final markupcontainer container
final string scope
super id
this container   container
this scope   scope
/**
* get the scope of the header part
*
* @return the scope name
*/
public final string getscope
return this scope
/**
* @see icomponentresolver#resolve(markupcontainer, markupstream,
*      componenttag)
*/
public final boolean resolve final markupcontainer container
final markupstream markupstream  final componenttag tag
// the tag must be resolved against the panel and not against the
// page
component component   this container get tag getid
if  component    null
component render markupstream
return true
return false
/**
* @see #setmarkupstream(markupstream)
*
* @param markupstream
*/
public final void setmymarkupstream final markupstream markupstream
super setmarkupstream markupstream