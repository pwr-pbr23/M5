/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html internal
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket response
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html iheaderresponse
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html webpage
import org apache wicket markup html border border
import org apache wicket response stringresponse
/**
* the htmlheadercontainer is automatically created and added to the component
* hierarchy by a htmlheaderresolver instance. htmlheadercontainer tries to
* handle/render the &gt;head&gt; tag and its body. however depending on the
* parent component, the behavior must be different. e.g. if parent component is
* a page all components of the page's hierarchy must be asked if they have
* something to contribute to the &lt;head&gt; section of the html response. if
* yes, it must <b>immediately</b> be rendered.
* <p>
* &lt;head&gt; regions may contain additional wicket components, which can be
* added by means of add(component) as usual.
* <p>
* &lt;wicket:head&gt; tags are handled by simple webmarkupcontainers also
* created by a htmlheaderresolver.
* <p>
* <ul>
* <li> &lt;head&gt; will be inserted in output automatically if required</li>
* <li> &lt;head&gt; is <b>not</b> a wicket specific tag and you must use add()
* to add components referenced in body of the head tag</li>
* <li> &lt;head&gt; is supported by panels, borders and inherited markup, but
* is <b>not</b> copied to the output. they are for previewability only (except
* on pages)</li>
* <li> &lt;wicket:head&gt; does not make sense in page markup (but does in
* inherited page markup)</li>
* <li> &lt;wicket:head&gt; makes sense in panels, borders and inherited markup
* (of panels, borders and pages)</li>
* <li> components within &lt;wicket:head&gt; must be added by means of add(),
* like allways with wicket. no difference.</li>
* <li> &lt;wicket:head&gt; and it's content is copied to the output. components
* contained in &lt;org.apache.wicket.head&gt; are rendered as usual</li>
* </ul>
*
* @author juergen donnerstag
*/
public class htmlheadercontainer extends webmarkupcontainer
private static final long serialversionuid   1l
/**
* wicket:head tags (components) must only be added once. to allow for a
* little bit more control, each wicket:head has an associated scope which
* by default is equal to the java class name directly associated with the
* markup which contains the wicket:head. it can be modified by means of the
* scope attribute.
*/
private transient map renderedcomponentsperscope
/**
* header response that is responsible for filtering duplicate
* contributions.
*/
private transient iheaderresponse headerresponse   null
/**
* construct
*
* @see component#component(string)
*/
public htmlheadercontainer final string id
super id
// we will render the tags manually, because if no component asked to
// contribute to the header, the tags will not be printed either.
// no contribution usually only happens if none of the components
// including the page does have a <head> or <wicket:head> tag.
setrenderbodyonly true
setauto true
/**
* first render the body of the component. and if it is the header component
* of a page (compared to a panel or border), than get the header sections
* from all component in the hierachie and render them as well.
*
* @see org.apache.wicket.markupcontainer#oncomponenttagbody(org.apache.wicket.markup.markupstream,
*      org.apache.wicket.markup.componenttag)
*/
protected final void oncomponenttagbody markupstream markupstream  componenttag opentag
// we are able to automatically add <head> to the page if it is
// missing. but we only want to add it, if we have content to be
// written to its body. thus we first write the output into a
// stringresponse and if not empty, we copy it to the original
// web response.
// temporarily replace the web response with a string response
final response webresponse   this getresponse
try
final stringresponse response   new stringresponse
this getrequestcycle   setresponse response
// in any case, first render the header section directly associated
// with the markup
super oncomponenttagbody markupstream  opentag
// if the parent component is a page (or a bordered page), we must
// now include the header sections of all components in the
// component hierarchie.
markupcontainer parent   getparent
// if bordered page ...
while   parent instanceof border
parent   parent getparent
// must be a page
if  parent instanceof webpage
renderheadersections  webpage parent  this
else
throw new wicketruntimeexception
// automatically add <head> if necessary
charsequence output   response getbuffer
if  output length   > 0
if  output charat 0
for  int i   2  i < output length    i    2
char ch   output charat i
if  ch
output   output subsequence i   2  output length
break
else if  output charat 0
for  int i   1  i < output length    i
char ch   output charat i
if  ch
output   output subsequence i   1  output length
break
if  output length   > 0
webresponse write
webresponse write output
webresponse write
finally
// restore the original response
this getrequestcycle   setresponse webresponse
/**
* ask all child components of the page if they have something to contribute
* to the &lt;head&gt; section of the html output. every component
* interested must implement iheadercontributor.
* <p>
* note: htmlheadercontainer will be removed from the component hierachie at
* the end of the request (@see #onendrequest()) and thus can not transport
* status from one request to the next. this is true for all components
* added to the header.
*
* @param page
*            the page object
* @param container
*            the header component container
*/
private final void renderheadersections final webpage page  final htmlheadercontainer container
// make sure all components interested in contributing to the header
// and there attached behaviors are asked.
page visitchildren new ivisitor
/**
* @see org.apache.wicket.component.ivisitor#component(org.apache.wicket.component)
*/
public object component component component
if  component isvisible
component renderhead container
return ivisitor continue_traversal
else
return ivisitor continue_traversal_but_dont_go_deeper
page renderhead container
/**
* @see org.apache.wicket.markupcontainer#istransparentresolver()
*/
public boolean istransparentresolver
return true
/**
* check if the header component is ok to render within the scope given.
*
* @param scope
*            the scope of the header component
* @param id
*            the component's id
* @return true, if the component ok to render
*/
public final boolean oktorendercomponent final string scope  final string id
if  this renderedcomponentsperscope    null
this renderedcomponentsperscope   new hashmap
// if (scope == null)
// {
// scope = header.getmarkupstream().getcontainerclass().getname();
// }
list componentscope    list this renderedcomponentsperscope get scope
if  componentscope    null
componentscope   new arraylist
this renderedcomponentsperscope put scope  componentscope
if  componentscope contains id
return false
componentscope add id
return true
protected void ondetach
super ondetach
this renderedcomponentsperscope   null
this headerresponse   null
/**
* factory method for creating header response
*
* @param response
* @return new header response
*/
protected iheaderresponse newheaderresponse
return new headerresponse
public response getresponse
return htmlheadercontainer this getresponse
/**
* returns the header response.
*
* @return header response
*/
public iheaderresponse getheaderresponse
if  this headerresponse    null
headerresponse   newheaderresponse
return headerresponse