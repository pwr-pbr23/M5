/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree table
import javax swing tree treenode
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket response
import org apache wicket util string strings
/**
* convenience class for creating non-interactive lightweight (irenderable
* based) columns.
*
* @author matej knopp
*/
public abstract class abstractrenderablecolumn extends abstractcolumn
private boolean contentastooltip   false
private boolean escapecontent   true
/**
* creates the column
*
* @param location
*            specifies how the column should be aligned and what his size
*            should be
*
* @param header
*            header caption
*/
public abstractrenderablecolumn columnlocation location  string header
super location  header
/**
* returns the string value for the provided node.
*
* @param node
*            determines the position in tree
* @return the
*/
public abstract string getnodevalue treenode node
/**
* returns whether the content should also be visible as tooltip of the
* cell.
*
* @return whether the content should also be visible as tooltip
*/
public boolean iscontentastooltip
return contentastooltip
/**
* returns whether the special html characters of content will be escaped.
*
* @return whether html characters should be escaped
*/
public boolean isescapecontent
return escapecontent
/**
* @see icolumn#newcell(markupcontainer, string, treenode, int)
*/
public component newcell markupcontainer parent  string id  treenode node  int level
return null
/**
* @see icolumn#newcell(treenode, int)
*/
public irenderable newcell treenode node  int level
return new irenderable
private static final long serialversionuid   1l
public void render treenode node  response response
string content   getnodevalue node
// escape if necessary
if  isescapecontent
content   strings escapemarkup content  tostring
response write
if  iscontentastooltip
response write
response write
response write content
response write
/**
* sets whether the content should also be visible as tooltip (html title
* attribute) of the cell.
*
* @param contentastooltip
*            whether the content should also be visible as tooltip
*/
public void setcontentastooltip boolean contentastooltip
this contentastooltip   contentastooltip
/**
* sets whether the special html characters of content should be escaped.
*
* @param escapecontent
*            whether to espcape html characters
*/
public void setescapecontent boolean escapecontent
this escapecontent   escapecontent