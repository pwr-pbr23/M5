/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util crypt
import java security generalsecurityexception
import java security nosuchalgorithmexception
import java security provider
import java security security
import java security spec invalidkeyspecexception
import javax crypto cipher
import javax crypto secretkey
import javax crypto secretkeyfactory
import javax crypto spec pbekeyspec
import javax crypto spec pbeparameterspec
import org apache wicket wicketruntimeexception
import org apache wicket util lang classes
/**
* provide some simple means to encrypt and decrypt strings such as passwords.
* the whole implementation is based around sun's security providers and uses
* the <a
* href="http://www.semoa.org/docs/api/cdc/standard/pbe/pbewithmd5anddes.html">pbewithmd5anddes</a>
* method to encrypt and decrypt the data.
*
* @author juergen donnerstag
*/
public class sunjcecrypt extends abstractcrypt
/**
* iteration count used in combination with the salt to create the
* encryption key.
*/
private final static int count   17
/** name of encryption method */
private static final string crypt_method
/** salt */
private final static byte salt      byte 0x15   byte 0x8c   byte 0xa3   byte 0x4a
byte 0x66   byte 0x51   byte 0x2a   byte 0xbc
/**
* constructor
*/
public sunjcecrypt
if  security getproviders     crypt_method  length > 0
return     we are good to go
try
// initialize and add a security provider required for encryption
final class clazz   classes resolveclass
security addprovider  provider clazz newinstance
catch  illegalaccessexception ex
throw new wicketruntimeexception    ex
catch  instantiationexception ex
throw new wicketruntimeexception    ex
/**
* crypts the given byte array
*
* @param input
*            byte array to be crypted
* @param mode
*            crypt mode
* @return the input crypted. null in case of an error
* @throws generalsecurityexception
*/
protected final byte crypt final byte input  final int mode
throws generalsecurityexception
secretkey key   generatesecretkey
pbeparameterspec spec   new pbeparameterspec salt  count
cipher ciph   cipher getinstance crypt_method
ciph init mode  key  spec
return ciph dofinal input
/**
* generate the de-/encryption key.
* <p>
* note: if you don't provide your own encryption key, the implementation
* will use a default. be aware that this is potential security risk. thus
* make sure you always provide your own one.
*
* @return secretkey the security key generated
* @throws nosuchalgorithmexception
*             unable to find encryption algorithm specified
* @throws invalidkeyspecexception
*             invalid encryption key
*/
private final secretkey generatesecretkey   throws nosuchalgorithmexception
invalidkeyspecexception
final pbekeyspec spec   new pbekeyspec getkey   tochararray
return secretkeyfactory getinstance crypt_method  generatesecret spec