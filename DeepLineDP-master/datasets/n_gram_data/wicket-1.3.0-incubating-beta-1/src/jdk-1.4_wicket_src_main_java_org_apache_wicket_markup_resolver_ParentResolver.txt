/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import org apache wicket component
import org apache wicket markupcontainer
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup wickettag
/**
* some containers are transparent to the user (e.g. htmlheadercontainer or
* bodyonloadcontainer) and delegate component resolution to there parent.
*
* @author juergen donnerstag
*/
public class parentresolver implements icomponentresolver
private static final long serialversionuid   1l
/**
* try to resolve the tag, then create a component, add it to the container
* and render it.
* <p>
* note: special tags like &ltwicket:...&gt> and tags which id start with "_"
* are not resolved.
*
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer, markupstream,
*      componenttag)
*/
public boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// ignore special tags like _panel, _border, _extend etc.
if   tag instanceof wickettag     tag getid   startswith
return false
markupcontainer parent   container
while   parent    null      parent istransparentresolver
// try to find the component with the parent component.
parent   parent getparent
if  parent    null
component component   parent get tag getid
if  component    null
component render markupstream
return true
// if not yet found, restore the original parent and test if it
// implement icomponentresolver
parent   container getparent
if  parent instanceof icomponentresolver
return   icomponentresolver parent  resolve container  markupstream  tag
return false