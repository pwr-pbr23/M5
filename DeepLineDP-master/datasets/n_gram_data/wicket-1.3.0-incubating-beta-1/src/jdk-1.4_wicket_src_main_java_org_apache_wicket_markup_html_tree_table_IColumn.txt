/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree table
import javax swing tree treenode
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket markupcontainer
/**
* interface that represents a column in {@link treetable}.
*
* @author matej knopp
*/
public interface icolumn extends iclusterable
/**
* returns a location of this column. location specifies how is column
* aligned and what is it's size.
* <p>
* in case location of a column changes, it is necessary to call the
* <code>invalidateall</code> methods on the {@link treetable} to prevent
* incorrect rendering.
*
* @return the location of this column
*/
columnlocation getlocation
/**
* returns the span for this cell. this method is called only for cells that
* are aligned in the middle.
* <p>
* the returned value implicates, over how many cells the cell in this
* column (in row determined by node) should span. this is analogical to
* colspan property of html element td.
*
* @param node
*            the tree node
* @return the span of the column
*/
int getspan treenode node
/**
* returns, whether the column is visible.
* <p>
* in case the visibility changes, it is necessary to call the
* <code>invalidateall</code> methods on the {@link treetable} to prevent
* incorrect rendering.
*
* @return whether the column is visible
*/
boolean isvisible
/**
* this method is used to populate the cell for given node in case when
* {@link icolumn#newcell(treenode, int)} returned null.
*
* @param parent
*            the parent to which the cell must be added. can also be used
*            to find the treetable instance (using
*            <code>parent.findparent(treetable.cass)</code>)
* @param id
*            the component id
*
* @param node
*            treenode for the cell
*
* @param level
*            convenience parameter that indicates how deep the node is in
*            hierarchy
* @return the populated cell component
*/
component newcell markupcontainer parent  string id  treenode node  int level
/**
* creates the {@link irenderable} instance for given node.
* {@link irenderable} can be used as lightweight alternative to regular
* component for cells, that don't require user interaction (just display
* data).
* <p>
* if this method returns null,
* {@link icolumn#newcell(markupcontainer, string, treenode, int)} is used
* to popuplate the cell.
*
* @param node
*            treenode for the cell
*
* @param level
*            convenience parameter that indicates how deep the node is in
*            hierarchy
* @return the cell renderer
*/
irenderable newcell treenode node  int level
/**
* creates the header element for this column. in most situations this will
* be just a simple label showing column title.
*
* @param parent
*            the parent component
* @param id
*            the component id
* @return the header component
*/
component newheader markupcontainer parent  string id
/**
* sets the tree table this cell belongs to. this function is guaranteed to
* be called before any other function. the treetable instance is fully
* initialized.
*
* @param treetable
*            the tree table
*/
void settreetable treetable treetable