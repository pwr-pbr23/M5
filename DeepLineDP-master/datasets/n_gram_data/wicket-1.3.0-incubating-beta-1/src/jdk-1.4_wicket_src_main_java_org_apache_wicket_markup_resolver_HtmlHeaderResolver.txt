/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import org apache wicket markupcontainer
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup markupexception
import org apache wicket markup markupstream
import org apache wicket markup wickettag
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html webpage
import org apache wicket markup html internal htmlheadercontainer
import org apache wicket markup parser filter htmlheadersectionhandler
import org apache wicket markup parser filter wickettagidentifier
/**
* this is a tag resolver which handles &lt;head&gt; and
* &lt;wicket:head&gt;tags. it must be registered (with the application) and
* assumes that a componenttag respectively a wickettag has already been created
* (see htmlheadersectionhandler and wickettagidentifier).
* <p>
* provided the current tag is a &lt;head&gt;, a htmlheadercontainer component
* is created, (auto) added to the component hierarchie and immediately
* rendered. please see the javadoc for htmlheadercontainer on how it treats the
* tag.
* <p>
* in case of &lt;wicket:head&gt; a simple webmarkupcontainer handles the tag.
*
* @author juergen donnerstag
*/
public class htmlheaderresolver implements icomponentresolver
private static final long serialversionuid   1l
static
// register "wicket:head"
wickettagidentifier registerwellknowntagname
/**
* try to resolve the tag, then create a component, add it to the container
* and render it.
*
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer, markupstream,
*      componenttag)
*
* @param container
*            the container parsing its markup
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @return true, if componentid was handle by the resolver. false, otherwise
*/
public boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// only <head> component tags have the id == "_header"
if  tag getid   equals htmlheadersectionhandler header_id
// create a special header component which will gather additional
// input the <head> from 'contributors'.
final webmarkupcontainer header   new htmlheadercontainer
htmlheadersectionhandler header_id
container autoadd header
// yes, we handled the tag
return true
else if   tag instanceof wickettag       wickettag tag  isheadtag
// if we found <wicket:head> without surrounding <head> on a page,
// than we have to add wicket:head into a automatically generated
// head first.
if  container instanceof webpage
// create a special header component which will gather additional
// input the <head> from 'contributors'.
final markupcontainer header   new htmlheadercontainer htmlheadersectionhandler header_id
// it is <wicket:head>. because they do not provide any additional
// functionality they are merely a means of surrounding relevant
// markup. thus we simply create a webmarkupcontainer to handle
// the tag.
final webmarkupcontainer header2   new webmarkupcontainer
htmlheadersectionhandler header_id
private static final long serialversionuid   1l
public boolean istransparentresolver
return true
header2 setrenderbodyonly true
header add header2
container autoadd header
else if  container instanceof htmlheadercontainer
// it is <wicket:head>. because they do not provide any additional
// functionality there are merely a means of surrounding relevant
// markup. thus we simply create a webmarkupcontainer to handle
// the tag.
final webmarkupcontainer header   new webmarkupcontainer
htmlheadersectionhandler header_id
private static final long serialversionuid   1l
public boolean istransparentresolver
return true
header setrenderbodyonly true
try
container autoadd header
catch  illegalargumentexception ex
throw new wicketruntimeexception
a child with id   already exists
ex
else
throw new markupexception
// yes, we handled the tag
return true
// we were not able to handle the tag
return false