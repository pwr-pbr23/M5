/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html link
import org apache wicket application
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket model imodel
/**
* base class that that contains functionality for rendering disabled links.
*
* @author matej knopp
*/
public abstract class abstractlink extends webmarkupcontainer
/**
* construct.
*
* @param id
* @param model
*/
public abstractlink string id  imodel model
super id  model
/**
* construct.
*
* @param id
*/
public abstractlink string id
super id
/**
* simple insertion string to allow disabled links to look like <i>disabled
* link </i>.
*/
private string beforedisabledlink
/**
* simple insertion string to allow disabled links to look like <i>disabled
* link </i>.
*/
private string afterdisabledlink
/**
* sets the insertion string to allow disabled links to look like
* <i>disabled link </i>.
*
* @param afterdisabledlink
*            the insertion string
*/
public void setafterdisabledlink final string afterdisabledlink
if  afterdisabledlink    null
throw new illegalargumentexception
this afterdisabledlink   afterdisabledlink
/**
* gets the insertion string to allow disabled links to look like
* <i>disabled link </i>.
*
* @return the insertion string
*/
public string getafterdisabledlink
return afterdisabledlink
/**
* sets the insertion string to allow disabled links to look like
* <i>disabled link </i>.
*
* @param beforedisabledlink
*            the insertion string
*/
public void setbeforedisabledlink final string beforedisabledlink
if  beforedisabledlink    null
throw new illegalargumentexception
this beforedisabledlink   beforedisabledlink
protected void onattach
super onattach
// set default for before/after link text
if  beforedisabledlink    null
final application app   getapplication
beforedisabledlink   app getmarkupsettings   getdefaultbeforedisabledlink
afterdisabledlink   app getmarkupsettings   getdefaultafterdisabledlink
/**
* gets the insertion string to allow disabled links to look like
* <i>disabled link </i>.
*
* @return the insertion string
*/
public string getbeforedisabledlink
return beforedisabledlink
/**
* helper methods that both checks whether the link is enabled and whether
* the action enable is allowed.
*
* @return whether the link should be rendered as enabled
*/
protected final boolean islinkenabled
return isenabled      isenableallowed
/**
* renders this link's body.
*
* @param markupstream
*            the markup stream
* @param opentag
*            the open part of this tag
* @see org.apache.wicket.component#oncomponenttagbody(markupstream, componenttag)
*/
protected void oncomponenttagbody final markupstream markupstream
final componenttag opentag
// draw anything before the body?
if   islinkenabled      getbeforedisabledlink      null
getresponse   write getbeforedisabledlink
// render the body of the link
rendercomponenttagbody markupstream  opentag
// draw anything after the body?
if   islinkenabled      getafterdisabledlink      null
getresponse   write getafterdisabledlink
/**
* alters the tag so that the link renders as disabled.
*
* this method is meant to be called from
* {@link #oncomponenttag(componenttag)} method of the derived class.
*
* @param tag
*/
protected void disablelink final componenttag tag
// if the tag is an anchor proper
if  tag getname   equalsignorecase       tag getname   equalsignorecase
tag getname   equalsignorecase
// change anchor link to span tag
tag setname
// remove any href from the old link
tag remove
tag remove