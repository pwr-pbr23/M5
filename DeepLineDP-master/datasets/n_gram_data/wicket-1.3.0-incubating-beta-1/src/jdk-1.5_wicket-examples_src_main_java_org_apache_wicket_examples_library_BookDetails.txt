/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples library
import java util iterator
import org apache wicket attributemodifier
import org apache wicket pageparameters
import org apache wicket markup html basic label
import org apache wicket markup html link bookmarkablepagelink
import org apache wicket model model
import org apache wicket util string stringlist
import org apache wicket util string stringvalueconversionexception
/**
* a book details page. shows information about a book.
*
* @author jonathan locke
*/
public final class bookdetails extends authenticatedwebpage
/**
* constructor for calls from external page links
*
* @param parameters
*            page parameters
* @throws stringvalueconversionexception
*/
public bookdetails final pageparameters parameters  throws stringvalueconversionexception
this book get parameters getlong
/**
* constructor
*
* @param book
*            the model
*/
public bookdetails final book book
model bookmodel   new model book
add new label    book gettitle
add new label    book getauthor
add new label    boolean tostring book getfiction
add bookdetails link    book getcompanionbook    getlocalizer   getstring
this
add bookdetails link    book getrelatedbook    getlocalizer   getstring
this
string writingstyles
final boolean hasstyles    book getwritingstyles      null
book getwritingstyles   size   > 0
if  hasstyles
stringlist styles   new stringlist
for  iterator iterator   book getwritingstyles   iterator    iterator hasnext
book writingstyle style    book writingstyle iterator next
styles add getlocalizer   getstring style tostring    this
writingstyles   styles tostring
else
writingstyles   getlocalizer   getstring    this
label writingstyleslabel   new label    writingstyles
final attributemodifier italic   new attributemodifier    new model
italic setenabled  hasstyles
add writingstyleslabel add italic
add editbook link    book getid
/**
* creates an external page link
*
* @param name
*            the name of the link component to create
* @param book
*            the book to link to
* @param nobooktitle
*            the title to show if book is null
* @return the external page link
*/
public static bookmarkablepagelink link final string name  final book book
final string nobooktitle
final bookmarkablepagelink link   new bookmarkablepagelink name  bookdetails class
if  book    null
link setparameter    book getid
link add new label    new model book
else
link add new label    nobooktitle
link setenabled false
return link