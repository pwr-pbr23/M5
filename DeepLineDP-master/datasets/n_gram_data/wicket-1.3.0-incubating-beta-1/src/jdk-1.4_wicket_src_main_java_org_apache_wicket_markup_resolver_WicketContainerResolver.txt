/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup resolver
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket markupcontainer
import org apache wicket markup componenttag
import org apache wicket markup markupstream
import org apache wicket markup parser filter wickettagidentifier
/**
* this is a tag resolver which handles &lt;wicket:container&gt;
*
* sometimes adding components in certain ways may lead to output of invalid
* markup. for example, lets pretend we output table rows two at a time using a
* repeater. the markup would look something like this:
*
* <code>
* 	<table>
* 		<span wicket:id="repeater">
* 			<tr><td>...</td></tr>
* 			<tr><td>...</td></tr>
* 		</span>
* 	</table>
* </code>
*
* notice that we had to attach the repeater to a component tag - in this case a
* <code>span</code>, but a span is not a legal tag to nest under
* <code>table</code>. so we can rewrite the example as following:
*
* <code>
* 	<table>
* 		<wicket:container wicket:id="repeater">
* 			<tr><td>...</td></tr>
* 			<tr><td>...</td></tr>
* 		</wicket:container>
* 	</table>
* </code>
*
* the above is valid markup because wicket namespaced tags are allowed anywhere
*
* @author igor vaynberg (ivaynberg)
*/
public class wicketcontainerresolver implements icomponentresolver
private static final log log   logfactory getlog wicketcontainerresolver class
static
// register "wicket:container"
wickettagidentifier registerwellknowntagname
private static final long serialversionuid   1l
/**
* try to resolve the tag, then create a component, add it to the container
* and render it.
*
* @see org.apache.wicket.markup.resolver.icomponentresolver#resolve(markupcontainer,
*      markupstream, componenttag)
*
* @param container
*            the container parsing its markup
* @param markupstream
*            the current markupstream
* @param tag
*            the current component tag while parsing the markup
* @return true, if componentid was handle by the resolver. false, otherwise
*/
public boolean resolve final markupcontainer container  final markupstream markupstream
final componenttag tag
// this is only here so we register wicket:container tag, this resolver
// does not actually do anything special to the tag
return false