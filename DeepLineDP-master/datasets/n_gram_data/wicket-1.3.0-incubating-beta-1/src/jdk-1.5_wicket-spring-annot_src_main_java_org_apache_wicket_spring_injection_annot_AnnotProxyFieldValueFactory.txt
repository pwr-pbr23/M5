/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket spring injection annot
import java lang reflect field
import java util concurrent concurrenthashmap
import org apache wicket injection ifieldvaluefactory
import org apache wicket proxy lazyinitproxyfactory
import org apache wicket spring ispringcontextlocator
import org apache wicket spring springbeanlocator
/**
* {@link ifieldvaluefactory} that uses {@link lazyinitproxyfactory} to create
* proxies for spring dependencies based on the {@link springbean} annotation
* applied to a field. this class is usually used by the
* {@link annotspringinjector} to inject objects with lazy init proxies.
* however, this class can be used on its own to create proxies for any field
* decorated with a {@link springbean} annotation.
* <p>
* example:
*
* <pre>
* ifieldvaluefactory factory = new annotproxyfieldvaluefactory(contextlocator);
* field = obj.getclass().getdeclaredfield(&quot;dependency&quot;);
* idependency dependency = (idependency) factory.getfieldvalue(field, obj);
* </pre>
*
* in the example above the <code>dependency</code> object returned is a lazy
* init proxy that will look up the actual idependency bean from spring context
* upon first access to one of the methods.
* <p>
* this class will also cache any produced proxies so that the same proxy is
* always returned for the same spring dependency. this helps cut down on
* session size beacause proxies for the same dependency will not be serialized
* twice.
*
* @see lazyinitproxyfactory
* @see springbean
* @see springbeanlocator
*
* @author igor vaynberg (ivaynberg)
* @author istvan devai
*
*/
public class annotproxyfieldvaluefactory implements ifieldvaluefactory
private ispringcontextlocator contextlocator
private final concurrenthashmap<springbeanlocator  object> cache   new concurrenthashmap<springbeanlocator  object>
/** fail fast tag, see {@link #setfailfast(boolean)} */
private boolean failfast   true
/**
* @param contextlocator
*            spring context locator
*/
public annotproxyfieldvaluefactory ispringcontextlocator contextlocator
if  contextlocator    null
throw new illegalargumentexception
this contextlocator   contextlocator
/**
* @see org.apache.wicket.injection.ifieldvaluefactory#getfieldvalue(java.lang.reflect.field,
*      java.lang.object)
*/
public object getfieldvalue field field  object fieldowner
if  field isannotationpresent springbean class
springbean annot   field getannotation springbean class
springbeanlocator locator   new springbeanlocator annot name
field gettype    contextlocator
// only check the cache if the bean is a singleton
if  locator issingletonbean      cache containskey locator
return cache get locator
// fail early - see if the locator can locate the spring bean
if  failfast
testlocator locator  fieldowner  field
object proxy   lazyinitproxyfactory createproxy field gettype
locator
// only put the proxy into the cache if the bean is a singleton
if  locator issingletonbean
cache put locator  proxy
return proxy
else
return null
/**
* tests if the locator can retrieve the bean it is responsible for.
*
* @param locator
* @param fieldowner
* @param field
*/
private void testlocator springbeanlocator locator  object fieldowner
field field
try
locator locateproxytarget
catch  throwable e
string errormessage
locator getbeantype   getname
if  locator getbeanname      null
locator getbeanname   length   > 0
errormessage        locator getbeanname
errormessage
fieldowner getclass   getname
field getname
throw new runtimeexception errormessage  e
/**
* @see org.apache.wicket.injection.ifieldvaluefactory#supportsfield(java.lang.reflect.field)
*/
public boolean supportsfield field field
return field isannotationpresent springbean class
/**
* @param failfast
*            true if the locator fails if a bean can't be located
*/
public void setfailfast boolean failfast
this failfast   failfast