/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util parse metapattern parsers
import java util arraylist
import java util list
import org apache wicket util parse metapattern group
import org apache wicket util parse metapattern metapattern
/**
* parses an arbitrary list format with a pattern for list entries and a pattern
* for list separators.
*
* @author jonathan locke
*/
public class listparser extends metapatternparser
/** the pattern in between the separators */
private final group entrygroup
/** the separator */
private final metapattern separatorpattern
/** the list elements parsed */
private final list values   new arraylist
/**
* constructs a list parser from an entry metapattern, a separator
* metapattern and an input character sequence.
*
* @param entrypattern
*            the pattern in between the separators
* @param separatorpattern
*            the separator pattern
* @param input
*            the input to parse
*/
public listparser final metapattern entrypattern  final metapattern separatorpattern
final charsequence input
super input
this entrygroup   new group entrypattern
this separatorpattern   separatorpattern
/**
* parse the input and add the elements to an internal list to be accessed
* by
*
* @see #getvalues()
* @see org.apache.wicket.util.parse.metapattern.parsers.metapatternparser#matches()
*/
public final boolean matches
// are there any more elements
if  advance entrygroup
// add the first element
final string value   entrygroup get matcher
values add value
// all remaining elements must be preceded by the separator pattern
while  advance separatorpattern     advance entrygroup
// add the value not including the separator
values add entrygroup get matcher
// yes, we found at least on element
return true
// nothing found, not even one element without separator
return false
/**
* gets the parsed values. it depends on the elements pattern, whether empty
* elements, double or single quotes or escape characters are supported.
*
* @return the parsed values
*/
public final list getvalues
return values