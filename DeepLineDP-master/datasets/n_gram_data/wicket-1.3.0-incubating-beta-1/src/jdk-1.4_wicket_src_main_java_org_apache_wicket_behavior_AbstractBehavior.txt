/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket behavior
import org apache wicket component
import org apache wicket markup componenttag
import org apache wicket markup html iheadercontributor
import org apache wicket markup html iheaderresponse
/**
* adapter implementation of {@link org.apache.wicket.behavior.ibehavior}. it is
* recommended to extend from this class instead of directly implementing
* {@link org.apache.wicket.behavior.ibehavior} as this class has an extra clean
*
* @author ralf ebert
* @author eelco hillenius
*/
public abstract class abstractbehavior implements ibehavior  iheadercontributor
/**
* construct.
*/
public abstractbehavior
/**
* @see org.apache.wicket.behavior.ibehavior#beforerender(org.apache.wicket.component)
*/
public void beforerender component component
/**
* @see org.apache.wicket.behavior.ibehavior#bind(org.apache.wicket.component)
*/
public void bind final component component
/**
* this method is called either by {@link #onrendered(component)} or
* {@link #onexception(component, runtimeexception)} after they called their
* respective template methods. override this template method to do any
* necessary cleanup.
*/
public void cleanup
/**
* @see org.apache.wicket.behavior.ibehavior#detachmodel(component)
*/
public void detachmodel component component
/**
* @see org.apache.wicket.behavior.ibehavior#exception(org.apache.wicket.component,
*      java.lang.runtimeexception)
*/
public final void exception component component  runtimeexception exception
try
onexception component  exception
finally
cleanup
/**
* @see org.apache.wicket.behavior.ibehavior#getstatelesshint(org.apache.wicket.component)
*/
public boolean getstatelesshint component component
return true
/**
* @see org.apache.wicket.behavior.ibehavior#oncomponenttag(org.apache.wicket.component,
*      org.apache.wicket.markup.componenttag)
*/
public void oncomponenttag final component component  final componenttag tag
/**
* in case an unexpected exception happened anywhere between
* oncomponenttag() and rendered(), onexception() will be called for any
* behavior.
*
* @param component
*            the component that has a reference to this behavior and during
*            which processing the exception occured
* @param exception
*            the unexpected exception
*/
public void onexception component component  runtimeexception exception
/**
* called when a component that has this behavior coupled was rendered.
*
* @param component
*            the component that has this behavior coupled
*/
public void onrendered component component
/**
* @see org.apache.wicket.behavior.ibehavior#rendered(org.apache.wicket.component)
*/
public final void rendered final component component
try
onrendered component
finally
cleanup
/**
* @see org.apache.wicket.markup.html.iheadercontributor#renderhead(org.apache.wicket.markup.html.iheaderresponse)
*/
public void renderhead iheaderresponse response
/**
* @see org.apache.wicket.behavior.ibehavior#isenabled(component)
*/
public boolean isenabled component component
return true