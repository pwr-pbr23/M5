/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket model
import java text messageformat
import java util locale
import org apache wicket component
import org apache wicket localizer
import org apache wicket session
import org apache wicket wicketruntimeexception
import org apache wicket util string interpolator propertyvariableinterpolator
/**
* this model class encapsulates the full power of localization support within
* the wicket framework. it combines the flexible wicket resource loading
* mechanism with property expressions, property models and standard java
* <code>messageformat</code> substitutions. this combination should be able
* to solve any dynamic localization requirement that a project has.
* <p>
* the model should be created with four parameters, which are described in
* detail below:
* <ul>
* <li><b>resourcekey </b>- this is the most important parameter as it contains
* the key that should be used to obtain resources from any string resource
* loaders. this paramater is mandatory: a null value will throw an exception.
* typically it will contain an ordinary string such as
* &quot;label.username&quot;. to add extra power to the key functionality the
* key may also contain a property expression which will be evaluated if the
* model parameter (see below) is not null. this allows keys to be changed
* dynamically as the application is running. for example, the key could be
* &quot;product.${product.id}&quot; which prior to rendering will call
* model.getobject().getproduct().getid() and substitute this value into the
* resource key before is is passed to the loader.
* <li><b>component </b>- this parameter should be a component that the string
* resource is relative to. in a simple application this will usually be the
* page on which the component resides. for reusable components/containers that
* are packaged with their own string resource bundles it should be the actual
* component/container rather than the page. for more information on this please
* see {@link org.apache.wicket.resource.loader.componentstringresourceloader}. the
* relative component may actually be <code>null</code> when all resource
* loading is to be done from a global resource loader. however, we recommend
* that a relative component is still supplied even in these cases in order to
* 'future proof' your application with regards to changing resource loading
* strategies.
* <li><b>model </b>- this parameter is mandatory if either the resourcekey,
* the found string resource (see below) or any of the substitution parameters
* (see below) contain property expressions. where property expressions are
* present they will all be evaluated relative to this model object. if there
* are no property expressions present then this model parameter may be
* <code>null</code>
* <li><b>parameters </b>- the parameters parameter allows an array of objects
* to be passed for substitution on the found string resource (see below) using
* a standard <code>java.text.messageformat</code> object. each parameter may
* be an ordinary object, in which case it will be processed by the standard
* formatting rules associated with <code>java.text.messageformat</code>.
* alternatively, the parameter may be an instance of <code>imodel</code> in
* which case the <code>getobject()</code> method will be applied prior to the
* parameter being passed to the <code>java.text.messageformat</code>. this
* allows such features dynamic parameters that are obtained using a
* <code>propertymodel</code> object or even nested string resource models.
* </ul>
* as well as the supplied parameters, the found string resource can contain
* formatting information. it may contain property expressions in which case
* these are evaluated using the model object supplied when the string resource
* model is created. the string resource may also contain
* <code>java.text.messageformat</code> style markup for replacement of
* parameters. where a string resource contains both types of formatting
* information then the property expression will be applied first.
* <p>
* <b>example 1 </b>
* <p>
* in its simplest form, the model can be used as follows:
*
* <pre>
*
*            public mypage extends webpage
*            {
*                public mypage(final pageparameters parameters)
*                {
*                    add(new label(&quot;username&quot;, new stringresourcemodel(&quot;label.username&quot;, this, null)));
*                }
*            }
*
* </pre>
*
* where the resource bundle for the page contains the entry
* <code>label.username=username</code>
* <p>
* <b>example 2 </b>
* <p>
* in this example, the resource key is selected based on the evaluation of a
* property expression:
*
* <pre>
*
*            public mypage extends webpage
*            {
*                public mypage(final pageparameters parameters)
*                {
*                    weatherstation ws = new weatherstation();
*                    add(new label(&quot;weathermessage&quot;,
*                                  new stringresourcemodel(&quot;weather.${currentstatus}&quot;, this, new model(ws)));
*                }
*            }
*
* </pre>
*
* which will call the weatherstation.getcurrentstatus() method each time the
* string resource model is used and where the resource bundle for the page
* contains the entries:
*
* <pre>
*
*            weather.sunny=don't forget sunscreen!
*            weather.raining=you might need an umberella
*            weather.snowing=got your skis?
*            weather.overcast=best take a coat to be safe
*
* </pre>
*
* <p>
* <b>example 3 </b>
* <p>
* in this example the found resource string contains a property expression that
* is substituted via the model:
*
* <pre>
*
*
*
*
*
*            public mypage extends webpage
*            {
*                public mypage(final pageparameters parameters)
*                {
*                    weatherstation ws = new weatherstation();
*                    add(new label(&quot;weathermessage&quot;,
*                                  new stringresourcemodel(&quot;weather.message&quot;, this, new model(ws)));
*                }
*            }
*
*
*
*
*
* </pre>
*
* where the resource bundle contains the entry
* <code>weather.message=weather station reports that
* the temperature is ${currenttemperature} ${units}</code>
* <p>
* <b>example 4 </b>
* <p>
* in this example, the use of substitution parameters is employed to format a
* quite complex message string. this is an example of the most complex and
* powerful use of the string resource model:
*
* <pre>
*
*
*
*
*
*            public mypage extends webpage
*            {
*                public mypage(final pageparameters parameters)
*                {
*                    weatherstation ws = new weatherstation();
*                    model model = new model(ws);
*                    add(new label(&quot;weathermessage&quot;,
*                              new stringresourcemodel(
*                                  &quot;weather.detail&quot;, this, model,
*                                  new object[]
*                                  {
*                                      new date(),
*                                      new propertymodel(model, &quot;currentstatus&quot;),
*                                      new propertymodel(model, &quot;currenttemperature&quot;),
*                                      new propertymodel(model, &quot;units&quot;)
*                                  }));
*                }
*            }
*
*
*
*
*
* </pre>
*
* and where the resource bundle entry is:
*
* <pre>
*
*
*
*
*
*            weather.detail=the report for {0,date}, shows the temparature as {2,number,###.##} {3} \
*                           and the weather to be {1}
*
*
*
*
*
* </pre>
*
* @author chris turner
*/
public class stringresourcemodel extends loadabledetachablemodel
private static final long serialversionuid   1l
/** the locale to use. */
private transient locale locale
/**
* the localizer to be used to access localized resources and the associated
* locale for formatting.
*/
private transient localizer localizer
/** the wrapped model. */
private imodel model
/** optional parameters. */
private object parameters
/** the relative component used for lookups. */
private component component
/** the key of message to get. */
private string resourcekey
/** the default value of the message. */
private final string defaultvalue
/**
* construct.
*
* @param resourcekey
*            the resource key for this string resource
* @param component
*            the component that the resource is relative to
* @param model
*            the model to use for property substitutions
* @see #stringresourcemodel(string, component, imodel, object[])
*/
public stringresourcemodel final string resourcekey  final component component
final imodel model
this resourcekey  component  model  null null
/**
* construct.
*
* @param resourcekey
*            the resource key for this string resource
* @param component
*            the component that the resource is relative to
* @param model
*            the model to use for property substitutions
* @param defaultvalue
*            the default value if the resource key is not found.
*
* @see #stringresourcemodel(string, component, imodel, object[])
*/
public stringresourcemodel final string resourcekey  final component component
final imodel model  final string defaultvalue
this resourcekey  component  model  null defaultvalue
/**
* creates a new string resource model using the supplied parameters.
* <p>
* the relative component parameter should generally be supplied, as without
* it resources can not be obtained from resouce bundles that are held
* relative to a particular component or page. however, for application that
* use only global resources then this parameter may be null.
* <p>
* the model parameter is also optional and only needs to be supplied if
* value substitutions are to take place on either the resource key or the
* actual resource strings.
* <p>
* the parameters parameter is also optional and is used for substitutions.
*
* @param resourcekey
*            the resource key for this string resource
* @param component
*            the component that the resource is relative to
* @param model
*            the model to use for property substitutions
* @param parameters
*            the parameters to substitute using a java messageformat object
*/
public stringresourcemodel final string resourcekey  final component component
final imodel model  final object parameters
this resourcekey  component  model  parameters  null
/**
* creates a new string resource model using the supplied parameters.
* <p>
* the relative component parameter should generally be supplied, as without
* it resources can not be obtained from resouce bundles that are held
* relative to a particular component or page. however, for application that
* use only global resources then this parameter may be null.
* <p>
* the model parameter is also optional and only needs to be supplied if
* value substitutions are to take place on either the resource key or the
* actual resource strings.
* <p>
* the parameters parameter is also optional and is used for substitutions.
*
* @param resourcekey
*            the resource key for this string resource
* @param component
*            the component that the resource is relative to
* @param model
*            the model to use for property substitutions
* @param parameters
*            the parameters to substitute using a java messageformat object
* @param defaultvalue
*            the default value if the resource key is not found.
*/
public stringresourcemodel final string resourcekey  final component component
final imodel model  final object parameters  final string defaultvalue
if  resourcekey    null
throw new illegalargumentexception
this resourcekey   resourcekey
this component   component
this model   model
this parameters   parameters
this defaultvalue   defaultvalue
/**
* gets the localizer that is being used by this string resource model.
*
* @return the localizer
*/
public localizer getlocalizer
return localizer
/**
* gets the string currently represented by this string resource model. the
* string that is returned may vary for each call to this method depending
* on the values contained in the model and an the parameters that were
* passed when this string resource model was created.
*
* @return the string
*/
public final string getstring
// make sure we have a localizer before commencing
if  getlocalizer      null
if  component    null
setlocalizer component getlocalizer
else
throw new illegalstateexception
// get the string resource, doing any property substitutions as part
// of the get operation
string s   localizer getstring getresourcekey    component  model
if s    null  s   defaultvalue
if s    null
// substitute any parameters if necessary
object parameters   getparameters
if  parameters    null
// build the real parameters
object realparams   new object
for  int i   0  i < parameters length  i
if  parameters instanceof imodel
realparams     imodel parameters  getobject
else if  model    null    parameters instanceof string
realparams   propertyvariableinterpolator interpolate  string parameters
model getobject
else
realparams   parameters
// apply the parameters
final messageformat format   new messageformat s  component    null ? component
getlocale     locale
s   format format realparams
// return the string resource
return s
/**
* sets the localizer that is being used by this string resource model. this
* method is provided to allow the default application localizer to be
* overridden if required.
*
* @param localizer
*            the localizer to use
*/
public void setlocalizer final localizer localizer
this localizer   localizer
/**
* override of the default method to return the resource string represented
* by this string resource model. useful in debugging and so on, to avoid
* the explicit need to call the getstring() method.
*
* @return the string for this model object
*/
public string tostring
return getstring
/**
* gets the java messageformat substitution parameters.
*
* @return the substitution parameters
*/
protected object getparameters
return parameters
/**
* gets the resource key for this string resource. if the resource key
* contains property expressions and the model is null then the returned
* value is the actual resource key with all substitutions undertaken.
*
* @return the (possibly substituted) resource key
*/
protected final string getresourcekey
if  model    null
return propertyvariableinterpolator
interpolate resourcekey  model getobject
else
return resourcekey
/**
* gets the string that this string resource model currently represents. the
* string is returned as an object to allow it to be used generically within
* components.
*
*/
protected object load
// initialise information that we need to work successfully
final session session   session get
if  session    null
this localizer   session getapplication   getresourcesettings   getlocalizer
this locale   session getlocale
else
throw new wicketruntimeexception
return getstring
/**
* detaches from the given session
*/
protected final void ondetach
// detach any model
if  model    null
model detach
// null out references
this localizer   null
this locale   null