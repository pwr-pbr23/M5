/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html form upload
import javax servlet http httpservletrequest
import org apache wicket requestcycle
import org apache wicket wicketruntimeexception
import org apache wicket protocol http webrequest
import org apache wicket protocol http servlet multipartservletwebrequest
import org apache wicket protocol http servlet servletwebrequest
import org apache wicket util lang bytes
import org apache wicket util upload fileuploadexception
/**
* a request object that stores information about the current upload in session
* so it is accessible to the {@link uploadprogressbar}.
* <p>
* this request object is necessary for the uploadprogressbar to function
* properly. it is installed like so:
*
* <code>
* class myapplication extends webapplication {
* ...
*     @override
*     protected webrequest newwebrequest(httpservletrequest servletrequest) {
*         return new uploadwebrequest(servletrequest);
*     }
* ...
* }
* </code>
*
* @author igor vaynberg (ivaynberg)
*/
public class uploadwebrequest extends servletwebrequest
final httpservletrequest req
/**
* constructor
*
* @param req
*/
public uploadwebrequest final httpservletrequest req
super req
this req   req
/**
* @see org.apache.wicket.protocol.http.webrequest#newmultipartwebrequest(org.apache.wicket.util.lang.bytes)
*/
public webrequest newmultipartwebrequest bytes maxsize
try
return new multipartrequest req  maxsize
catch  fileuploadexception e
throw new wicketruntimeexception e
/**
* multipart request object that feeds the upload info into session
*
* @author igor vaynberg (ivaynberg)
*
*/
private static class multipartrequest extends multipartservletwebrequest
/**
* @param req
* @param maxsize
* @throws fileuploadexception
*/
public multipartrequest httpservletrequest req  bytes maxsize  throws fileuploadexception
super req  maxsize
if  req    null
throw new illegalstateexception
protected boolean wantuploadprogressupdates
return true
protected void onuploadstarted int totalbytes
uploadinfo info   new uploadinfo totalbytes
httpservletrequest request     webrequest requestcycle get   getrequest
gethttpservletrequest
setuploadinfo request  info
protected void onuploadupdate int bytesuploaded  int total
httpservletrequest request     webrequest requestcycle get   getrequest
gethttpservletrequest
uploadinfo info   getuploadinfo request
if  info    null
throw new illegalstateexception
info setbytesuploaded bytesuploaded
setuploadinfo request  info
protected void onuploadcompleted
httpservletrequest request     webrequest requestcycle get   getrequest
gethttpservletrequest
clearuploadinfo request
private static final string session_key   uploadwebrequest class getname
/**
* retrieves {@link uploadinfo} from session, null if not found
*
* @param req
* @return {@link uploadinfo} object from session, or null if not found
*/
static uploadinfo getuploadinfo httpservletrequest req
if  req    null
throw new illegalargumentexception
return  uploadinfo req getsession   getattribute session_key
/**
* sets the {@link uploadinfo} object into session
*
* @param req
* @param uploadinfo
*/
static void setuploadinfo httpservletrequest req  uploadinfo uploadinfo
if  req    null
throw new illegalargumentexception
if  uploadinfo    null
throw new illegalargumentexception
req getsession   setattribute session_key  uploadinfo
/**
* clears the {@link uploadinfo} object from session if one exists
*
* @param req
*/
static void clearuploadinfo httpservletrequest req
if  req    null
throw new illegalargumentexception
req getsession   removeattribute session_key