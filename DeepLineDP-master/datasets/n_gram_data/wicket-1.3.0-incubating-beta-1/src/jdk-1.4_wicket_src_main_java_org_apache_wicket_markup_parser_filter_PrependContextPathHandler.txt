/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup parser abstractmarkupfilter
/**
* this is a markup inline filter which by default is added to the list of
* markup filters. it can be added by means of subclassing
* application.newmarkupparser() like
*
* <pre>
*     public class myapplication extends application
*     {
*         ...
*         public imarkupfilter[] getadditionalmarkuphandler()
*         {
*             return new imarkupfilter[] { new new prependcontextpathhandler() };
*         }
* </pre>
*
* the purpose of the filter is to prepend the web apps context path to all href
* and src attributes found in the markup which contain a relative url like
* "mydir/mypage.gif". it is applied to all non wicket component tags (attributes).
*
* @author juergen donnerstag
*/
public final class prependcontextpathhandler extends abstractmarkupfilter
/** logging */
private static final log log   logfactory getlog prependcontextpathhandler class
/** list of attribute names considered */
private static final string attributenames   new string
private final application application
/**
* this constructor will get the context path from the application settings.
* when it is not set the context path will be automatically resolved.
* this should work in most cases, and support the following clustering
* scheme
*
* <pre>
*    node1.mydomain.com[/appcontext]
*    node2.mydomain.com[/appcontext]
*    node3.mydomain.com[/appcontext]
* </pre>
*
* if it is set then you can map to other context like in clusters
*
* <pre>
*    node1.mydomain.com/mycontext1/
*    node2.mydomain.com/mycontext2/
*    node3.mydomain.com/mycontext3/
*    mydomain.com/mycontext (load balancer)
* </pre>
*
* or as a virtual server (app server and webserver)
*
* <pre>
*    appserver.com/context mapped to webserver/ (context path should be '/')
* </pre>
*
* @param application the application object
*
*/
public prependcontextpathhandler final application application
this application   application
/**
* get the next markupelement from the parent markupfilter and handle it if
* the specific filter criteria are met. depending on the filter, it may
* return the markupelement unchanged, modified or it remove by asking the
* parent handler for the next tag.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return return the next eligible markupelement
*/
public markupelement nexttag   throws parseexception
// get the next tag. if null, no more tags are available
final componenttag tag    componenttag getparent   nexttag
if  tag    null     tag getid      null
return tag
// don't touch any wicket:id component
if  tag getid      null
return tag
// this call should always get the default of the application or the overriden one.
string contextpath   application getapplicationsettings   getcontextpath
if  contextpath    null
contextpath
else if  contextpath endswith       false
contextpath
if  contextpath length   > 0
// modify all relevant attributes
for  int i   0  i < attributenames length  i
string attrname   attributenames
string attrvalue   tag getattributes   getstring attrname
if   attrvalue    null      attrvalue startswith       false
attrvalue indexof    < 0       attrvalue startswith
string url   contextpath   attrvalue
tag getattributes   put attrname  url
tag setmodified true
return tag