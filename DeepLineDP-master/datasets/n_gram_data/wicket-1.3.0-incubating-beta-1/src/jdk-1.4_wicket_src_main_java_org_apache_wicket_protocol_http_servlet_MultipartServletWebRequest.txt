/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http servlet
import java io ioexception
import java io inputstream
import java io unsupportedencodingexception
import java util iterator
import java util list
import java util map
import javax servlet http httpservletrequest
import org apache wicket wicketruntimeexception
import org apache wicket protocol http imultipartwebrequest
import org apache wicket util lang bytes
import org apache wicket util upload diskfileitemfactory
import org apache wicket util upload fileitem
import org apache wicket util upload fileuploadexception
import org apache wicket util upload servletfileupload
import org apache wicket util upload servletrequestcontext
import org apache wicket util value valuemap
/**
* servlet specific webrequest subclass for multipart content uploads.
*
* @author jonathan locke
* @author eelco hillenius
* @author cameron braid
* @author ate douma
* @author igor vaynberg (ivaynberg)
*/
public class multipartservletwebrequest extends servletwebrequest implements imultipartwebrequest
/** map of file items. */
private final valuemap files   new valuemap
/** map of parameters. */
private final valuemap parameters   new valuemap
/**
* total bytes uploaded (downloaded from server's pov) so far. used for
* upload notifications
*/
private int bytesuploaded
/** content length cache, used for upload notifications */
private int totalbytes
/**
* constructor
*
* @param maxsize
*            the maximum size this request may be
* @param request
*            the servlet request
* @throws fileuploadexception
*             thrown if something goes wrong with upload
*/
public multipartservletwebrequest httpservletrequest request  bytes maxsize
throws fileuploadexception
super request
// check that request is multipart
final boolean ismultipart   servletfileupload ismultipartcontent request
if   ismultipart
throw new illegalstateexception
diskfileitemfactory factory   new diskfileitemfactory
// configure the factory here, if desired.
servletfileupload upload   new servletfileupload factory
// the encoding that will be used to decode the string parameters
// it should not be null at this point, but it may be
// if the older servlet api 2.2 is used
string encoding   request getcharacterencoding
// set encoding specifically when we found it
if  encoding    null
upload setheaderencoding encoding
upload setsizemax maxsize bytes
final list items
if  wantuploadprogressupdates
servletrequestcontext ctx   new servletrequestcontext request
public inputstream getinputstream   throws ioexception
return new countinginputstream super getinputstream
totalbytes   request getcontentlength
onuploadstarted totalbytes
items   upload parserequest ctx
onuploadcompleted
else
items   upload parserequest request
// loop through items
for  iterator i   items iterator    i hasnext
// get next item
final fileitem item    fileitem i next
// if item is a form field
if  item isformfield
// set parameter value
final string value
if  encoding    null
try
value   item getstring encoding
catch  unsupportedencodingexception e
throw new wicketruntimeexception e
else
value   item getstring
addparameter item getfieldname    value
else
// add to file list
files put item getfieldname    item
/**
* adds a parameter to the parameters value map
*
* @param name
*            parameter name
* @param value
*            parameter value
*/
private void addparameter final string name  final string value
final string currval    string parameters get name
string newval   null
if  currval    null
newval   new string
system arraycopy currval  0  newval  0  currval length
newval   value
else
newval   new string   value
parameters put name  newval
/**
* @return returns the files.
*/
public map getfiles
return files
/**
* gets the file that was uploaded using the given field name.
*
* @param fieldname
*            the field name that was used for the upload
* @return the upload with the given field name
*/
public fileitem getfile final string fieldname
return  fileitem files get fieldname
/**
* @see org.apache.wicket.protocol.http.webrequest#getparameter(java.lang.string)
*/
public string getparameter final string key
string val    string parameters get key
return  val    null  ? null   val
/**
* @see org.apache.wicket.protocol.http.webrequest#getparametermap()
*/
public map getparametermap
return parameters
/**
* @see org.apache.wicket.protocol.http.webrequest#getparameters(java.lang.string)
*/
public string getparameters final string key
return  string parameters get key
/**
* subclasses that want to receive upload notifiactions should return true
*
* @return true if upload status update event should be invoked
*/
protected boolean wantuploadprogressupdates
return false
/**
* upload start callback
*
* @param totalbytes
*/
protected void onuploadstarted int totalbytes
/**
* upload status update callback
*
* @param bytesuploaded
* @param total
*/
protected void onuploadupdate int bytesuploaded  int total
/**
* upload completed callback
*/
protected void onuploadcompleted
/**
* an {@link inputstream} that updates total number of bytes read
*
* @author igor vaynberg (ivaynberg)
*/
private class countinginputstream extends inputstream
private inputstream in
/**
* constructs a new countinginputstream.
*
* @param in
*            inputstream to delegate to
*/
public countinginputstream inputstream in
this in   in
/**
* @see java.io.inputstream#read()
*/
public int read   throws ioexception
int read   in read
bytesuploaded     read < 0  ? 0   1
onuploadupdate bytesuploaded  totalbytes
return read
/**
* @see java.io.inputstream#read(byte[])
*/
public int read byte b  throws ioexception
int read   in read b
bytesuploaded     read < 0  ? 0   read
onuploadupdate bytesuploaded  totalbytes
return read
/**
* @see java.io.inputstream#read(byte[], int, int)
*/
public int read byte b  int off  int len  throws ioexception
int read   in read b  off  len
bytesuploaded     read < 0  ? 0   read
onuploadupdate bytesuploaded  totalbytes
return read