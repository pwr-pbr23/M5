/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util collections
import java io serializable
import java util abstractlist
import java util abstractset
import java util collection
import java util iterator
import java util map
import java util nosuchelementexception
import java util set
/**
* an implementation of the java.util.map interface which can only hold a single
* object. this is particularly useful to control memory usage in wicket because
* many containers hold only a single component.
*
* @author jonathan locke
*/
public final class micromap implements map  serializable
private static final long serialversionuid   1l
/** the maximum number of entries this map supports. */
public static final int max_entries   1
/** the one and only key in this tiny map */
private object key
/** the value for the only key in this tiny map */
private object value
/**
* constructor
*/
public micromap
/**
* constructs map with a single key and value pair.
*
* @param key
*            the key
* @param value
*            the value
*/
public micromap final object key  final object value
put key  value
/**
* @return true if this micromap is full
*/
public boolean isfull
return size      max_entries
/**
* @see java.util.map#size()
*/
public int size
return  key    null  ? 1   0
/**
* @see java.util.map#isempty()
*/
public boolean isempty
return size      0
/**
* @see java.util.map#containskey(java.lang.object)
*/
public boolean containskey final object key
return key equals this key
/**
* @see java.util.map#containsvalue(java.lang.object)
*/
public boolean containsvalue final object value
return value equals this value
/**
* @see java.util.map#get(java.lang.object)
*/
public object get final object key
if  key equals this key
return value
return null
/**
* @see java.util.map#put(java.lang.object, java.lang.object)
*/
public object put final object key  final object value
// replace?
if  key equals this key
final object oldvalue   this value
this value   value
return oldvalue
else
// is there room for a new entry?
if  size   < max_entries
// store
this key   key
this value   value
return null
else
throw new illegalstateexception
/**
* @see java.util.map#remove(java.lang.object)
*/
public object remove final object key
if  key equals this key
final object oldvalue   this value
this key   null
this value   null
return oldvalue
return null
/**
* @see java.util.map#putall(java.util.map)
*/
public void putall final map map
if  map size   <  max_entries
final map entry e    map entry map entryset   iterator   next
put e getkey    e getvalue
else
throw new illegalstateexception     map size
/**
* @see java.util.map#clear()
*/
public void clear
key   null
value   null
/**
* @see java.util.map#keyset()
*/
public set keyset
return new abstractset
public iterator iterator
return new iterator
public boolean hasnext
return index < micromap this size
public object next
if   hasnext
throw new nosuchelementexception
index
return key
public void remove
micromap this clear
int index
public int size
return micromap this size
/**
* @see java.util.map#values()
*/
public collection values
return new abstractlist
public object get final int index
if  index > size     1
throw new indexoutofboundsexception
return value
public int size
return micromap this size
/**
* @see java.util.map#entryset()
*/
public set entryset
return new abstractset
public iterator iterator
return new iterator
public boolean hasnext
return index < micromap this size
public object next
if   hasnext
throw new nosuchelementexception
index
return new map entry
public object getkey
return key
public object getvalue
return value
public object setvalue final object value
final object oldvalue   micromap this value
micromap this value   value
return oldvalue
public void remove
clear
int index   0
public int size
return micromap this size