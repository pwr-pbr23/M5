/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket page
import org apache wicket wicketruntimeexception
import org apache wicket markup parser xmltag
import org apache wicket markup parser filter htmlheadersectionhandler
import org apache wicket util string strings
/**
* a markup class which represents merged markup, as it is required for markup
* inheritance.
* <p>
* the markups are merged at load time. deep markup hierarchies are supported.
* multiple inheritance is not.
* <p>
* the markup resource file, which is associated with the markup, will be the
* resource of the requested markup file. the base markup resources are not.
* <p>
* base markup must have a &lt;wicket:hild/&gt; tag which the position where the
* derived markup is inserted. from the derived markup all tags in between
* &lt;wicket:extend&gt; and &lt;/wicket:extend&gt; will be inserted.
* <p>
* in addition, all &lt;wicket:head> regions are copied as well as the body
* onload attribute. this allows to develop completely self-contained plug &
* play components including javascript etc.
*
* @author juergen donnerstag
*/
public class mergedmarkup extends markup
private final static log log   logfactory getlog mergedmarkup class
/**
* merge inherited and base markup.
*
* @param markup
*            the inherited markup
* @param basemarkup
*            the base markup
* @param extendindex
*            index where <wicket:extend> has been found
*/
mergedmarkup final markup markup  final markup basemarkup  int extendindex
// copy settings from derived markup
setresource markup getresource
setxmldeclaration markup getxmldeclaration
setencoding markup getencoding
setwicketnamespace markup getwicketnamespace
if  log isdebugenabled
string derivedresource   strings afterlast markup getresource   tostring
string baseresource   strings afterlast basemarkup getresource   tostring
log debug     derivedresource
baseresource
// merge derived and base markup
merge markup  basemarkup  extendindex
// initialize internals based on new markup
initialize
if  log isdebugenabled
log debug     todebugstring
/**
* merge inherited and base markup.
*
* @param markup
*            the inherited markup
* @param basemarkup
*            the base markup
* @param extendindex
*            index where <wicket:extend> has been found
*/
private void merge final markup markup  final markup basemarkup  int extendindex
// true if either <wicket:head> or <head> has been processed
boolean wicketheadprocessed   false
// add all elements from the base markup to the new list
// until <wicket:child/> is found. convert <wicket:child/>
// into <wicket:child> and add it as well.
wickettag childtag   null
int baseindex   0
for    baseindex < basemarkup size    baseindex
markupelement element   basemarkup get baseindex
if  element instanceof rawmarkup
// add the element to the merged list
addmarkupelement element
continue
final componenttag tag    componenttag element
// make sure all tags of the base markup remember where they are
// from
if   basemarkup getresource      null      tag getmarkupclass      null
tag setmarkupclass basemarkup getresource   getmarkupclass
if  element instanceof wickettag
wickettag wtag    wickettag element
// found org.apache.wicket.child in base markup. in case of 3+ level
// inheritance make sure the child tag is not from one of the
// deeper levels
if  wtag ischildtag
tag getmarkupclass      basemarkup getresource   getmarkupclass
if  wtag isopenclose
// <wicket:child /> => <wicket:child>...</wicket:child>
childtag   wtag
wickettag childopentag    wickettag wtag mutable
childopentag getxmltag   settype xmltag open
childopentag setmarkupclass basemarkup getresource   getmarkupclass
addmarkupelement childopentag
break
else if  wtag isopen
// <wicket:child>
addmarkupelement wtag
break
else
throw new wicketruntimeexception
basemarkup tostring
// process the head of the extended markup only once
if  wicketheadprocessed    false
// if </wicket:head> in base markup
if  wtag isclose      wtag isheadtag
wicketheadprocessed   true
// add the current close tag
addmarkupelement wtag
// add the <wicket:head> body from the derived markup.
copywickethead markup  extendindex
// do not add the current tag. it has already been
// added.
continue
// if <wicket:panel> or ... in base markup
if  wtag isopen      wtag ismajorwicketcomponenttag
wicketheadprocessed   true
// add the <wicket:head> body from the derived markup.
copywickethead markup  extendindex
// process the head of the extended markup only once
if  wicketheadprocessed    false
// if <head> in base markup
if   tag isclose      tagutils isheadtag tag
tag isopen      tagutils isbodytag tag
wicketheadprocessed   true
// add the <wicket:head> body from the derived markup.
copywickethead markup  extendindex
// add the element to the merged list
addmarkupelement element
if  baseindex    basemarkup size
throw new wicketruntimeexception
basemarkup tostring
// now append all elements from the derived markup starting with
// <wicket:extend> until </wicket:extend> to the list
for    extendindex < markup size    extendindex
markupelement element   markup get extendindex
addmarkupelement element
if  element instanceof wickettag
wickettag wtag    wickettag element
if  wtag isextendtag      wtag isclose
break
if  extendindex    markup size
throw new wicketruntimeexception
markup tostring
// if <wicket:child> than skip the body and find </wicket:child>
if    componenttag basemarkup get baseindex   isopen
for  baseindex    baseindex < basemarkup size    baseindex
markupelement element   basemarkup get baseindex
if  element instanceof wickettag
wickettag tag    wickettag element
if  tag ischildtag      tag isclose
// ok, skipped the childs content
tag setmarkupclass basemarkup getresource   getmarkupclass
addmarkupelement tag
break
else
throw new wicketruntimeexception
markup tostring
else if  element instanceof componenttag
throw new wicketruntimeexception
markup tostring
// </wicket:child> not found
if  baseindex    basemarkup size
throw new wicketruntimeexception
basemarkup tostring
else
// and now all remaining elements from the derived markup.
// but first add </wicket:child>
wickettag childclosetag    wickettag childtag mutable
childclosetag getxmltag   settype xmltag close
childclosetag setmarkupclass basemarkup getresource   getmarkupclass
addmarkupelement childclosetag
for  baseindex    baseindex < basemarkup size    baseindex
markupelement element   basemarkup get baseindex
addmarkupelement element
// make sure all tags of the base markup remember where they are
// from
if   element instanceof componenttag      basemarkup getresource      null
componenttag tag    componenttag element
tag setmarkupclass basemarkup getresource   getmarkupclass
// automatically add <head> if missing and required. on a page
// it must enclose all of the <wicket:head> tags.
// note: htmlheadersectionhandler does something similar, but because
// markup filters are not called for merged markup again, ...
if  page class isassignablefrom markup getresource   getmarkupclass
// find the position inside the markup for first <wicket:head>,
// last </wicket:head> and <head>
int hasopenwickethead    1
int hasclosewickethead    1
int hashead    1
for  int i   0  i < size    i
markupelement element   get i
if   hasopenwickethead     1      element instanceof wickettag
wickettag element  isheadtag
hasopenwickethead   i
else if   element instanceof wickettag       wickettag element  isheadtag
wickettag element  isclose
hasclosewickethead   i
else if   hashead     1      element instanceof componenttag
tagutils isheadtag  componenttag element
hashead   i
else if   hashead     1      hasopenwickethead     1
break
// if a <head> tag is missing, insert it automatically
if   hasopenwickethead     1      hashead     1
final xmltag headopentag   new xmltag
headopentag setname
headopentag settype xmltag open
final componenttag opentag   new componenttag headopentag
opentag setid htmlheadersectionhandler header_id
final xmltag headclosetag   new xmltag
headclosetag setname headopentag getname
headclosetag settype xmltag close
final componenttag closetag   new componenttag headclosetag
closetag setopentag opentag
closetag setid htmlheadersectionhandler header_id
addmarkupelement hasopenwickethead  opentag
addmarkupelement hasclosewickethead   2  closetag
/**
* append the wicket:head regions from the extended markup to the current
* markup
*
* @param markup
* @param extendindex
*/
private void copywickethead final markup markup  int extendindex
boolean copy   false
for  int i   0  i < extendindex  i
markupelement elem   markup get i
if  elem instanceof wickettag
wickettag etag    wickettag elem
if  etag isheadtag
if  etag isopen
copy   true
else
addmarkupelement elem
break
if  copy    true
addmarkupelement elem