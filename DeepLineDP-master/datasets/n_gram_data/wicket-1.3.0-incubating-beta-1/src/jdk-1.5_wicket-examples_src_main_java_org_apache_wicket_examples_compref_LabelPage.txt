/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples compref
import java util date
import org apache wicket examples wicketexamplepage
import org apache wicket markup html basic label
import org apache wicket model model
import org apache wicket model stringresourcemodel
/**
* page with examples on {@link org.apache.wicket.markup.html.basic.label}.
*
* @author eelco hillenius
*/
public class labelpage extends wicketexamplepage
/**
* constructor
*/
public labelpage
// add a static label
add new label
// add a dynamic label. for this example, we create an annonymous
// subclass
// of model (just because it is less work then directly implementing
// imodel)
// that returns a new java.util.date on each invocation
add new label    new model
public object getobject
return new date
// add a label with a model that gets its display text from a resource
// bundle
// (which is in this case labelpage.properties)
// we use key 'label.current.locale' and provide a the current locale
// for
// parameter substitution.
stringresourcemodel stringresourcemodel   new stringresourcemodel
this  null  new object   getlocale
add new label    stringresourcemodel
// and here we add a label that contains markup. normally, this markup
// would be converted
// to html escape characters so that e.g. a & really dislays as that
// literal char wihout
// our browser trying to resolve it to an html entity. but it this case
// we actually want
// our browser to interpret it as real markup, so we set the
// escapemodelstring property
// to false
label markuplabel   new label
markuplabel setescapemodelstrings false
add markuplabel
/**
* override base method to provide an explanation
*/
protected void explain
string html    markuplabel  mark
string code    markuplabel  now  lt i gt that lt  i gt  is a pretty  lt b gt bold lt  b gt  statement
add new explainpanel html  code