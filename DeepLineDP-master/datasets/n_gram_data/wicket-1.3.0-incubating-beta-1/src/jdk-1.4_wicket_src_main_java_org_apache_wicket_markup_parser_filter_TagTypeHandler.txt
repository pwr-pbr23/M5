/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import java util hashmap
import java util map
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket markup parser xmltag
import org apache wicket util collections arrayliststack
/**
* this is a markup inline filter. it identifies tags which are allowed
* open-close in the markup, but which for wicket to be processed correctly
* must be open-body-close.
*
* @author juergen donnerstag
*/
public final class tagtypehandler extends abstractmarkupfilter
/** tag stack to find balancing tags */
final private arrayliststack stack   new arrayliststack
/** map of simple tags. */
private static final map requireopenbodyclosetag   new hashmap
static
// tags which require open-body-close
requireopenbodyclosetag put    boolean true
/**
* construct.
*/
public tagtypehandler
/**
* get the next markupelement from the parent markupfilter and handle it if
* the specific filter criteria are met. depending on the filter, it may
* return the markupelement unchanged, modified or it remove by asking the
* parent handler for the next tag.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return return the next eligible markupelement
*/
public markupelement nexttag   throws parseexception
// if there is something in the stack, ...
while  stack size   > 0
final componenttag top    componenttag stack pop
return top
// get the next tag. if null, no more tags are available
// in the markup
final componenttag tag    componenttag getparent   nexttag
if  tag    null
return tag
if  tag isopenclose
string name   tag getname
if  tag getnamespace      null
name   tag getnamespace         tag getname
// pop any simple tags off the top of the stack
if  requiresopenbodyclosetag name
tag settype xmltag open
xmltag closetag   new xmltag
closetag settype xmltag close
closetag setname tag getname
closetag setnamespace tag getnamespace
closetag closes tag
stack push new componenttag closetag
return tag
/**
* gets whether this tag does not require open-body-close tags.
*
* @param name
*            the tag's name, e.g. a, br, div, etc.
* @return true if this tag must be converted into open-body-close if openclose
*/
public static boolean requiresopenbodyclosetag final string name
return requireopenbodyclosetag get name     null