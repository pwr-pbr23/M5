/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket validation validator
import java util map
import java util regex pattern
import org apache wicket util parse metapattern metapattern
import org apache wicket validation ivalidatable
/**
* fixme 2.0: ivaynberg: look over javadoc
*
* validates component by matching the component's value against a regular
* expression pattern. a patternvalidator can be constructed with either a java
* regular expression (compiled or not) or a metapattern. if the pattern matches
* against the value of the component it is attached to when validate() is
* called by the framework, then that input value is considered valid. if the
* pattern does not match, the errormessage() method will be called.
* <p>
* for example, to restrict a field to only digits, you might add a
* patternvalidator constructed with the pattern "\d+". another way to do the
* same thing would be to construct the patternvalidator passing in
* metapattern.digits. the advantages of using metapattern over straight java
* regular expressions are that the patterns are easier to construct and easier
* to combine into complex patterns. they are also more readable and more
* reusable. see {@link org.apache.wicket.util.parse.metapattern.metapattern}for details.
* <p>
* the error message will be generated with the key "patternvalidator" and the
* messages keys that can be used are:
* <ul>
* <li>${pattern}: the pattern which failed to match</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @see java.util.regex.pattern
* @see org.apache.wicket.util.parse.metapattern.metapattern
* @author jonathan locke *
* @author igor vaynberg(ivaynberg)
*
*/
public class patternvalidator extends stringvalidator
private static final long serialversionuid   1l
/** the regexp pattern. */
private final pattern pattern
/**
* constructor.
*
* @param pattern
*            regular expression pattern
*/
public patternvalidator final string pattern
this pattern compile pattern
/**
* constructor.
*
* @param pattern
*            regular expression pattern
* @param flags
*            compile flags for java.util.regex.pattern
*/
public patternvalidator final string pattern  final int flags
this pattern compile pattern  flags
/**
* constructor.
*
* @param pattern
*            java regex pattern
*/
public patternvalidator final pattern pattern
this pattern   pattern
/**
* constructor.
*
* @param pattern
*            metapattern pattern
*/
public patternvalidator final metapattern pattern
this pattern pattern
/**
* gets the regexp pattern.
*
* @return the regexp pattern
*/
public final pattern getpattern
return pattern
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    pattern
return map
protected string resourcekey
return
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     pattern
protected void onvalidate ivalidatable validatable
// check value against pattern
if   pattern matcher  string validatable getvalue    matches
error validatable