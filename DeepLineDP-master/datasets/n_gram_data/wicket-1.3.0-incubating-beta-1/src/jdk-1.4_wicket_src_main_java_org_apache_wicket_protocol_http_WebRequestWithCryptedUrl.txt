/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io unsupportedencodingexception
import java net urldecoder
import java util enumeration
import java util hashmap
import java util iterator
import java util map
import javax servlet http httpservletrequest
import org apache wicket application
import org apache wicket pageparameters
import org apache wicket wicketruntimeexception
import org apache wicket protocol http request webrequestcodingstrategy
import org apache wicket protocol http servlet servletwebrequest
import org apache wicket util crypt icrypt
import org apache wicket util string strings
import org apache wicket util value valuemap
/**
* it extends webrequest and decodes urls encoded by webresponsewithcryptedurl.
* one reason for obfuscating the url's query string might be, that you don't
* want the details to be visible to the user to play around with.
*
* @author juergen donnerstag
*
* @deprecated since 1.2 please see {@link org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy}
*/
public class webrequestwithcryptedurl extends servletwebrequest
/** url querystring decoded */
private final string querystring
/** url query parameters decoded */
private final valuemap parameters
/**
* constructor.
*
* @param request
*            the oiginal request information
*/
public webrequestwithcryptedurl final httpservletrequest request
super request
// encoded query string have only a single parameter named "x"
final string secureparam   request getparameter
if   secureparam    null      secureparam length   > 0
// get the crypt implementation from the application
icrypt urlcrypt   application get   getsecuritysettings   getcryptfactory   newcrypt
// decrypt the query string
final string querystring   urlcrypt decrypturlsafe secureparam
// the querystring might have been shortened (length reduced).
// in that case, lengthen the query string again.
this querystring   rebuildurl querystring
// extract parameter key/value pairs from the query string
this parameters   new pageparameters
requestutils decodeparameters this querystring  this parameters
else
// if "x" parameter does not exist, we assume the query string
// is not encoded.
// note: you might want to throw an exception, if you don't want
// the automatic fallback.
this querystring   null
this parameters   new valuemap
// if available, add post parameters as well. they are not encrypted.
// the parameters from httprequest
final enumeration paramnames   request getparameternames
// for all parameters (post + url query string)
while  paramnames hasmoreelements
string paramname    string paramnames nextelement
// ignore the "x" parameter
if     equalsignorecase paramname
string values   request getparametervalues paramname
// add key/value to our parameter map
this parameters put paramname  values
/**
* @see org.apache.wicket.request#decodeurl(java.lang.string)
*/
public string decodeurl final string url
int startindex   url indexof
if  startindex     1
startindex   startindex   2
final string secureparam
final int endindex   url indexof    startindex
try
if  endindex     1
secureparam   urldecoder decode url substring startindex   application get
getrequestcyclesettings   getresponserequestencoding
else
secureparam   urldecoder decode url substring startindex  endindex
application get   getrequestcyclesettings
getresponserequestencoding
catch  unsupportedencodingexception ex
// should never happen
throw new wicketruntimeexception ex
// get the crypt implementation from the application
final icrypt urlcrypt   application get   getsecuritysettings   getcryptfactory
newcrypt
// decrypt the query string
final string querystring   urlcrypt decrypturlsafe secureparam
// the querystring might have been shortened (length reduced).
// in that case, lengthen the query string again.
return rebuildurl querystring
return url
/**
* in case the query string has been shortened prior to encryption, than
* rebuild (lengthen) the query string now. note: this implementation must
* exactly match the reverse one implemented in webresponsewithcryptedurl.
*
* @param querystring
*            the url's query string
* @return the lengthened query string
*/
private string rebuildurl charsequence querystring
querystring   strings replaceall querystring
webrequestcodingstrategy behavior_id_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy interface_parameter_name
querystring   strings replaceall querystring
webrequestcodingstrategy bookmarkable_page_parameter_name
return querystring tostring
/**
* gets the request parameter with the given key.
*
* @param key
*            parameter name
* @return parameter value
*/
public string getparameter final string key
string value    string this parameters get key
if  value    null
return value
return null
/**
* gets the request parameters.
*
* @return map of parameters
*/
public map getparametermap
map map   new hashmap parameters size    1
iterator it   parameters keyset   iterator
while  it hasnext
string param    string it next
map put param  getparameter param
return map
/**
* gets the request parameters with the given key.
*
* @param key
*            parameter name
* @return parameter values
*/
public string getparameters final string key
return  string this parameters get key
/**
* @see java.lang.object#tostring()
*/
public string tostring
return super tostring