/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html link
import org apache wicket component
import org apache wicket ipagemap
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket model imodel
import org apache wicket util string strings
import org apache wicket version undo change
/**
* implementation of a hyperlink component. a link can be used with an anchor
* (&lt;a href...) element or any element that supports the onclick javascript
* event handler (such as buttons, td elements, etc). when used with an anchor,
* a href attribute will be generated. when used with any other element, an
* onclick javascript event handler attribute will be generated.
* <p>
* you can use a link like:
*
* <pre>
*                        add(new link(&quot;mylink&quot;)
*                        {
*                            public void onclick(requestcycle cycle)
*                            {
*                                // do something here...
*                            }
*                        );
* </pre>
*
* and in your html file:
*
* <pre>
*                        &lt;a href=&quot;#&quot; wicket:id=&quot;mylink&quot;&gt;click here&lt;/a&gt;
* </pre>
*
* or:
*
* <pre>
*                        &lt;td wicket:id=&quot;mylink&quot;&gt;my clickable column&lt;/td&gt;
* </pre>
*
* </p>
* the following snippet shows how to pass a parameter from the page creating
* the page to the page responded by the link.
*
* <pre>
*                        add(new link(&quot;link&quot;, listitem.getmodel())
*                        {
*                            public void onclick()
*                            {
*                                myobject obj = (myobject)getmodelobject();
*                                setresponsepage(new mypage(obj.getid(), ... ));
*                            }
* </pre>
*
* @author jonathan locke
* @author eelco hillenius
*/
public abstract class link extends abstractlink implements ilinklistener
/** change record for when an anchor is changed. */
private final class anchorchange extends change
private static final long serialversionuid   1l
/** the old anchor. */
private component anchor
/**
* construct.
*
* @param anchor
*/
public anchorchange component anchor
this anchor   anchor
public final void undo
link this anchor   anchor
private static final long serialversionuid   1l
/**
* an anchor (form 'http://server/app/etc#someanchor') will be appended to
* the link so that after this link executes, it will jump to the provided
* anchor component's position. the provided anchor must either have the
* {@link component#getoutputmarkupid()} flag true, or it must be attached
* to a &lt;a tag with a href attribute of more than one character starting
* with '#' ('&lt;a href="#someanchor" ... ').
*/
private component anchor
/**
* true if link should automatically enable/disable based on current page;
* false by default.
*/
private boolean autoenable   false
/**
* the popup specification. if not-null, a javascript on-click event handler
* will be generated that opens a new window using the popup properties.
*/
private popupsettings popupsettings   null
/**
* @see org.apache.wicket.component#component(string)
*/
public link final string id
super id
/**
* @see org.apache.wicket.component#component(string, imodel)
*/
public link final string id  imodel object
super id  object
/**
* gets any anchor component.
*
* @return any anchor component to jump to, might be null
*/
public component getanchor
return anchor
/**
* gets whether link should automatically enable/disable based on current
* page.
*
* @return whether this link should automatically enable/disable based on
*         current page.
*/
public final boolean getautoenable
return autoenable
/**
* gets the popup specification. if not-null, a javascript on-click event
* handler will be generated that opens a new window using the popup
* properties.
*
* @return the popup specification.
*/
public popupsettings getpopupsettings
return popupsettings
/**
* @see org.apache.wicket.component#isenabled()
*/
public boolean isenabled
// if we're auto-enabling
if  getautoenable
// the link is enabled if this link doesn't link to the current page
return  linksto getpage
return super isenabled
protected boolean getstatelesshint
return false
/**
* called when a link is clicked.
*/
public abstract void onclick
/**
* this method is not part of the wicket api. do not attempt to override or
* call it.
*
* called when a link is clicked. the implementation of this method is
* currently to simply call onclick(), but this may be augmented in the
* future.
*
* @see ilinklistener
*/
public final void onlinkclicked
// if there are popupsettings and this link is clicked.
// set the popup page map in the request parameters, so that pages that
// are created in the onclick are made in the wanted pagemap
if  popupsettings    null
requestcycle get   getrequest   getrequestparameters   setpagemapname
popupsettings getpagemap this  getname
// invoke subclass handler
onclick
/**
* sets an anchor component. an anchor (form
* 'http://server/app/etc#someanchor') will be appended to the link so that
* after this link executes, it will jump to the provided anchor component's
* position. the provided anchor must either have the
* {@link component#getoutputmarkupid()} flag true, or it must be attached
* to a &lt;a tag with a href attribute of more than one character starting
* with '#' ('&lt;a href="#someanchor" ... ').
*
* @param anchor
*            the anchor
*/
public void setanchor component anchor
addstatechange new anchorchange this anchor
this anchor   anchor
/**
* sets whether this link should automatically enable/disable based on
* current page.
*
* @param autoenable
*            whether this link should automatically enable/disable based on
*            current page.
* @return this
*/
public final link setautoenable final boolean autoenable
this autoenable   autoenable
return this
/**
* sets the popup specification. if not-null, a javascript on-click event
* handler will be generated that opens a new window using the popup
* properties.
*
* @param popupsettings
*            the popup specification.
* @return this
*/
public final link setpopupsettings final popupsettings popupsettings
this popupsettings   popupsettings
return this
/**
* appends any anchor to the url if the url is not null and the url does not
* already contain an anchor (url.indexof('#') != -1). this implementation
* looks whether an anchor component was set, and if so, it will append the
* markup id of that component. that markup id is gotten by either calling
* {@link component#getmarkupid()} if {@link component#getoutputmarkupid()}
* returns true, or if the anchor component does not output it's id, this
* method will try to retrieve the id from the markup directly. if neither
* is found, an {@link wicketruntimeexception excpeption} is thrown. if no
* anchor component was set, but the link component is attached to a &lt;a
* element, this method will append what is in the href attribute <i>if</i>
* there is one, starts with a '#' and has more than one character.
* <p>
* you can override this method, but it means that you have to take care of
* whatever is done with any set anchor component yourself. you also have to
* manually append the '#' at the right place.
* </p>
*
* @param tag
*            the component tag
* @param url
*            the url to start with
* @return the url, possibly with an anchor appended
*/
protected charsequence appendanchor final componenttag tag  charsequence url
if  url    null
component anchor   getanchor
if  anchor    null
if  url tostring   indexof        1
string id
if  anchor getoutputmarkupid
id   anchor getmarkupid
else
id   anchor getmarkupattributes   getstring
if  id    null
url   url       anchor getmarkupid
else
throw new wicketruntimeexception     this
else
if  tag getname   equalsignorecase
if  url tostring   indexof        1
string href   tag getattributes   getstring
if  href    null    href length   > 1    href charat 0
url   url   href
return url
/**
* @param url
*            the url for the link
* @return any onclick javascript that should be used
*/
protected charsequence getonclickscript final charsequence url
return getonclickscript url tostring
/**
* @param url
*            the url for the link
* @return any onclick javascript that should be used
* @deprecated this method will be removed by
*             {@link #getonclickscript(charsequence)} shortly. please
*             override that method instead.
*/
protected string getonclickscript final string url
return null
/**
* gets the url to use for this link.
*
* @return the url that this link links to
*/
protected charsequence geturl
return urlfor ilinklistener interface
/**
* whether this link refers to the given page.
*
* @param page
*            a page
* @return true if this link goes to the given page
*/
protected boolean linksto final page page
return false
/**
* handles this link's tag.
*
* @param tag
*            the component tag
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected final void oncomponenttag final componenttag tag
// default handling for tag
super oncomponenttag tag
// set href to link to this link's linkclicked method
charsequence url   geturl
// append any anchor
url   appendanchor tag  url
// if we're disabled
if   isenabled
disablelink tag
else
// if the tag is an anchor proper
if  tag getname   equalsignorecase       tag getname   equalsignorecase
tag getname   equalsignorecase
// generate the href attribute
tag put    strings replaceall url
// add any popup script
if  popupsettings    null
// note: don't encode to html as that is not valid
// javascript
tag put    popupsettings getpopupjavascript
else if  tag getname   equalsignorecase
tag getname   equalsignorecase
tag put    strings replaceall url
else
// generate a popup script by asking popup settings for one
if  popupsettings    null
popupsettings settarget     url
string popupscript   popupsettings getpopupjavascript
tag put    popupscript
else
// or generate an onclick js handler directly
tag put        url
// if the subclass specified javascript, use that
final charsequence onclickjavascript   getonclickscript url
if  onclickjavascript    null
tag put    onclickjavascript
if  popupsettings    null
ipagemap popuppagemap   popupsettings getpagemap this
if  popuppagemap    null
tag put    popuppagemap getname