/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies role annotations
import org apache wicket component
import org apache wicket authorization action
import org apache wicket authorization strategies role abstractroleauthorizationstrategy
import org apache wicket authorization strategies role irolecheckingstrategy
import org apache wicket authorization strategies role roles
/**
* strategy that checks the
* {@link org.apache.wicket.authorization.strategies.role.annotations.authorizeinstantiation}
* annotation.
*
* @author eelco hillenius
*/
public class annotationsroleauthorizationstrategy extends abstractroleauthorizationstrategy
/**
* construct.
*
* @param rolecheckingstrategy
*            the authorizer delegate
*/
public annotationsroleauthorizationstrategy final irolecheckingstrategy rolecheckingstrategy
super rolecheckingstrategy
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isinstantiationauthorized(java.lang.class)
*/
@suppresswarnings
public boolean isinstantiationauthorized final class componentclass
// we are authorized unless we are found not to be
boolean authorized   true
// check package annotation first
final package componentpackage   componentclass getpackage
if  componentpackage    null
final authorizeinstantiation packageannotation    authorizeinstantiation componentpackage
getannotation authorizeinstantiation class
if  packageannotation    null
authorized   hasany new roles packageannotation value
// check class annotation
final authorizeinstantiation classannotation    authorizeinstantiation componentclass
getannotation authorizeinstantiation class
if  classannotation    null
// if roles are defined for the class, that overrides the package
authorized   hasany new roles classannotation value
return authorized
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isactionauthorized(org.apache.wicket.component,
*      org.apache.wicket.authorization.action)
*/
public boolean isactionauthorized final component component  final action action
// get component's class
final class< ? extends component> componentclass   component getclass
// check for a single action
if   check action  componentclass getannotation authorizeaction class
return false
// check for multiple actions
final authorizeactions authorizeactionsannotation   componentclass
getannotation authorizeactions class
if  authorizeactionsannotation    null
for  final authorizeaction authorizeactionannotation   authorizeactionsannotation
actions
if   check action  authorizeactionannotation
return false
return true
/**
* @param action
*            the action to check
* @param authorizeactionannotation
*            the annotations information
* @return false if the action is not authorized
*/
private boolean check final action action  final authorizeaction authorizeactionannotation
if  authorizeactionannotation    null
if  action getname   equals authorizeactionannotation action
if   hasany new roles authorizeactionannotation roles
return false
return true