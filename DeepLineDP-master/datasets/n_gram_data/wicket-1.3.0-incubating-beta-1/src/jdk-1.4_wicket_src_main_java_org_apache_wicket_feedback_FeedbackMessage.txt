/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket feedback
import java io serializable
import org apache wicket component
import org apache wicket iclusterable
/**
* represents a generic message meant for the end-user/ pages.
*
* @author eelco hillenius
* @author jonathan locke
*/
public class feedbackmessage implements iclusterable
private static final long serialversionuid   1l
/** constant for debug level. */
public static final int debug   1
/** constant for error level. */
public static final int error   4
/** constant for fatal level. */
public static final int fatal   5
/** constant for info level. */
public static final int info   2
/**
* constant for an undefined level; note that components might decide not to
* render anything when this level is used.
*/
public static final int undefined   0
/** constant for warning level. */
public static final int warning   3
/** levels as strings for debugging. */
private static final string levelstrings   new string
/**
* the message level; can be used by rendering components. note that what
* actually happens with the level indication is totally up to the
* components that render messages like these. the default level is
* undefined.
*/
private final int level
/** the actual message. */
private final serializable message
/** the reporting component. */
private final component reporter
/** whether or not this message has been rendered */
private boolean rendered   false
/**
* construct using fields.
*
* @param reporter
*            the message reporter
* @param message
*            the actual message
* @param level
*            the level of the message
* @param sessionstored
*            whether or not this message will be stored in session
*/
public feedbackmessage final component reporter  final serializable message  final int level
this reporter   reporter
this message   message
this level   level
/**
* gets whether or not this message has been rendered
*
* @return true if this message has been rendered, false otherwise
*/
public final boolean isrendered
return rendered
/**
* marks this message as rendered.
*/
public final void markrendered
this rendered   true
/**
* gets the message level; can be used by rendering components. note that
* what actually happens with the level indication is totally up to the
* components that render feedback messages.
*
* @return the message level indicator.
*/
public final int getlevel
return level
/**
* gets the current level as a string
*
* @return the current level as a string
*/
public string getlevelasstring
return levelstrings
/**
* gets the actual message.
*
* @return the message.
*/
public final serializable getmessage
return message
/**
* gets the reporting component.
*
* @return the reporting component.
*/
public final component getreporter
return reporter
/**
* gets whether the current level is debug or up.
*
* @return whether the current level is debug or up.
*/
public final boolean isdebug
return islevel debug
/**
* gets whether the current level is error or up.
*
* @return whether the current level is error or up.
*/
public final boolean iserror
return islevel error
/**
* gets whether the current level is fatal or up.
*
* @return whether the current level is fatal or up.
*/
public final boolean isfatal
return islevel fatal
/**
* gets whether the current level is info or up.
*
* @return whether the current level is info or up.
*/
public final boolean isinfo
return islevel info
/**
* returns whether this level is greater than or equal to the given level.
*
* @param level
*            the level
* @return whether this level is greater than or equal to the given level
*/
public final boolean islevel int level
return  getlevel   >  level
/**
* gets whether the current level is undefined.
*
* @return whether the current level is undefined.
*/
public final boolean isundefined
return  getlevel      undefined
/**
* gets whether the current level is warning or up.
*
* @return whether the current level is warning or up.
*/
public final boolean iswarning
return islevel warning
/**
* @see java.lang.object#tostring()
*/
public string tostring
return
getreporter    null ?  getreporter   getid          getlevelasstring