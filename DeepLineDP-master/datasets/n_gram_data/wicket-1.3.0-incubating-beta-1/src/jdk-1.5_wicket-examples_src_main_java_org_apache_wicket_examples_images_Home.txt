/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples images
import java awt basicstroke
import java awt graphics2d
import java awt image bufferedimage
import java util random
import org apache wicket resource
import org apache wicket resourcereference
import org apache wicket examples wicketexamplepage
import org apache wicket markup html image image
import org apache wicket markup html image resource buffereddynamicimageresource
import org apache wicket markup html image resource defaultbuttonimageresource
import org apache wicket markup html image resource rendereddynamicimageresource
import org apache wicket model model
/**
* demonstrates different flavors of org.apache.wicket.examples.images.
*
* @author jonathan locke
*/
public final class home extends wicketexamplepage
/**
* a dynamic image resource using {@link home#drawcircle(graphics2d)} to
* draw a random circle on the canvas.
*
*/
private final class circledynamicimageresource extends rendereddynamicimageresource
private circledynamicimageresource int width  int height
super width  height
protected boolean render graphics2d graphics
drawcircle graphics
return true
private static final resourcereference resource_ref   new resourcereference home class
/**
* constructor
*/
public home
// get our custom application subclass
final imagesapplication application    imagesapplication getapplication
// image as package resource
add new image
// dynamically created image. will re-render whenever resource is asked
// for.
add new image    new circledynamicimageresource 100  100
// simple model
add new image    new model
// dynamically created buffered image
add new image    getimage5resource
// add okay button image
add new image    getokbuttonimage
// add cancel button image
add new image    new resourcereference
// image loaded as resource ref via model.
add new image    new model resource_ref
// image loaded as resource via model.
add new image    new model new circledynamicimageresource 100  100
/**
* @return gets shared image component
*/
public resourcereference getimage5resource
return new resourcereference home class
public resource newresource
final buffereddynamicimageresource resource   new buffereddynamicimageresource
final bufferedimage image   new bufferedimage 100  100  bufferedimage type_int_rgb
drawcircle  graphics2d image getgraphics
resource setimage image
return resource
/**
* draws a random circle on a graphics
*
* @param graphics
*            the graphics to draw on
*/
void drawcircle graphics2d graphics
// compute random size for circle
final random random   new random
int dx   math abs 10   random nextint 80
int dy   math abs 10   random nextint 80
int x   math abs random nextint 100   dx
int y   math abs random nextint 100   dy
// draw circle with thick stroke width
graphics setstroke new basicstroke 5
graphics drawoval x  y  dx  dy
final resourcereference getokbuttonimage
return new resourcereference
protected resource newresource
return new defaultbuttonimageresource