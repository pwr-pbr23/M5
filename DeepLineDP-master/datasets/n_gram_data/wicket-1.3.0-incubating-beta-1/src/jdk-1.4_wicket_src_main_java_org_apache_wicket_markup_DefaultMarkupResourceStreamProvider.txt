/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup
import java util locale
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket markupcontainer
import org apache wicket util resource iresourcestream
import org apache wicket util resource locator iresourcestreamlocator
/**
* wicket default implementation for loading the markup resource stream
* associated with a markupcontainer.
*
* @author jonathan locke
* @author juergen donnerstag
*/
public class defaultmarkupresourcestreamprovider implements imarkupresourcestreamprovider
/** log for reporting. */
private static final log log   logfactory getlog defaultmarkupresourcestreamprovider class
/**
* constructor.
*/
public defaultmarkupresourcestreamprovider
/**
* create a new markup resource stream for the container.
* <p>
* note: it will only called once, the iresourcestream will be cached by
* markupcache.
* <p>
* note: iresourcestreamlocators should be used in case the strategy to find
* a markup resource should be extended for all components of your
* application.
*
* @see org.apache.wicket.util.resource.locator.iresourcestreamfactory
* @see org.apache.wicket.markup.defaultmarkupresourcestreamprovider
*
* @param container
* @param containerclass
*            the container the markup should be associated with
* @return a iresourcestream if the resource was found
*/
public iresourcestream getmarkupresourcestream final markupcontainer container
class containerclass
// get locator to search for the resource
final iresourcestreamlocator locator   application get   getresourcesettings
getresourcestreamlocator
string style   container getstyle
locale locale   container getlocale
string ext   container getmarkuptype
// markup is associated with the containers class. walk up the class
// hierarchy up to markupcontainer to find the containers markup
// resource.
while  containerclass    markupcontainer class
string path   containerclass getname   replace
iresourcestream resourcestream   locator locate container getclass    path  style
locale  ext
// did we find it already?
if  resourcestream    null
return new markupresourcestream resourcestream  new containerinfo container
containerclass
// walk up the class hierarchy one level, if markup has not
// yet been found
containerclass    class containerclass getsuperclass
return null