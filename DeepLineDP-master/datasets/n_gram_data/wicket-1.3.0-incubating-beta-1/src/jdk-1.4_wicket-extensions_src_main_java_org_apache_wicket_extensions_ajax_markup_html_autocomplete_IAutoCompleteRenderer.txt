/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html autocomplete
import org apache wicket iclusterable
import org apache wicket response
/**
* a renderer used to generate html output for the {@link autocompletebehavior}.
* <p>
* helper implementations of this interface may abstract the implementation specific
* details. direct implementations of this interface should only be used when
* total control is required.
* <p>
* the autocompletion value is supplied via an attribute on the first html element
* named <code>textvalue</code>, if no attribute is found the innerhtml property
* of the first element will be used instead.
*
* for example:
*
* <pre>
* new iautocompleterenderer() {
*     void renderhead(response r) { r.write("<ul>"); }
*
*     void render(object o, response r) {
*        // notice the textvalue attribute we define for li element
*        r.write("<li textvalue=\""+o.tostring()+"\"><i>"+o.tostring()+"</i></li>";
*     }
*
*     void renderfooter(response r) { r.write("</ul>"); }
* }
* </pre>
*
* @since 1.2
*
* @author igor vaynberg (ivaynberg)
* @author janne hietam&auml;ki (jannehietamaki)
*
*/
public interface iautocompleterenderer extends iclusterable
/**
* render the html fragment for the given completion object. usually the
* html is written out by calling {@link response#write(charsequence)}.
*
* @param object
*            completion choice object
* @param response
* @param criteria
*/
void render object object  response response  string criteria
/**
* render the html header fragment for the completion. usually the
* html is written out by calling {@link response#write(charsequence)}.
* @param response
*/
void renderheader response response
/**
* render the html footer fragment for the completion. usually the
* html is written out by calling {@link response#write(charsequence)}.
* @param response
*/
void renderfooter response response