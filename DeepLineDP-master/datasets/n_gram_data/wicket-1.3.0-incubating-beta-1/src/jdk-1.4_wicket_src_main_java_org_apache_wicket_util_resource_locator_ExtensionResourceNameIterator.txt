/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util resource locator
import java util iterator
import org apache wicket util string strings
/**
* contains the logic to build the various combinations of file path, style and
* locale required while searching for wicket resources. the full filename will
* be built like: &lt;path&gt;_&lt;style&gt;_&lt;locale&gt;.&lt;extension&gt;.
* <p>
* resource matches will be attempted in the following order:
* <ol>
* <li>1. &lt;path&gt;_&lt;style&gt;_&lt;locale&gt;.&lt;extension&gt;</li>
* <li>2. &lt;path&gt;_&lt;locale&gt;.&lt;extension&gt;</li>
* <li>3. &lt;path&gt;_&lt;style&gt;.&lt;extension&gt;</li>
* <li>4. &lt;path&gt;.&lt;extension&gt;</li>
* </ol>
* <p>
* locales may contain a language, a country and a region or variant.
* combinations of these components will be attempted in the following order:
* <ol>
* <li>locale.tostring() see javadoc for locale for more details</li>
* <li>&lt;language&gt;_&lt;country&gt;</li>
* <li>&lt;language&gt;</li>
* </ol>
*
* @author juergen donnerstag
* @author jonathan locke
*/
public class extensionresourcenameiterator implements iterator
/** the base path */
private final string path
private final string extensions
private int index
/**
* construct.
*
* @param path
* @param extension
*/
public extensionresourcenameiterator string path  final string extension
if  extension    null
// get the extension from the path provided
extensions   new string       strings lastpathcomponent path
path   strings beforelastpathcomponent path
else
// extension can be a comma separated list
extensions   strings split extension
for  int i   extensions length   1  i >  0  i
extensions   extensions trim
if   extensions startswith
extensions       extensions
this path   path
this index   0
/**
*
* @see java.util.iterator#hasnext()
*/
public boolean hasnext
return  this index < this extensions length
/**
*
* @see java.util.iterator#next()
*/
public object next
return path   this extensions
/**
*
* @see java.util.iterator#remove()
*/
public void remove