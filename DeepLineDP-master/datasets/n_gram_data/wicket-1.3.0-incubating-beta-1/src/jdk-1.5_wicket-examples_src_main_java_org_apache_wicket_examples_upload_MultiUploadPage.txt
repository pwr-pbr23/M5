/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples upload
import java io file
import java util arraylist
import java util arrays
import java util collection
import java util iterator
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket pageparameters
import org apache wicket examples wicketexamplepage
import org apache wicket markup html basic label
import org apache wicket markup html form form
import org apache wicket markup html form upload fileupload
import org apache wicket markup html form upload multifileuploadfield
import org apache wicket markup html link link
import org apache wicket markup html list listitem
import org apache wicket markup html list listview
import org apache wicket markup html panel feedbackpanel
import org apache wicket model imodel
import org apache wicket model loadabledetachablemodel
import org apache wicket model propertymodel
import org apache wicket util file files
import org apache wicket util file folder
import org apache wicket util lang bytes
/**
* upload example.
*
* @author eelco hillenius
*/
public class multiuploadpage extends wicketexamplepage
/**
* list view for files in upload folder.
*/
private class filelistview extends listview
/**
* construct.
*
* @param name
*            component name
* @param files
*            the file list model
*/
public filelistview string name  final imodel files
super name  files
/**
* @see listview#populateitem(listitem)
*/
protected void populateitem listitem listitem
final file file    file listitem getmodelobject
listitem add new label    file getname
listitem add new link
public void onclick
files remove file
multiuploadpage this info     file
/**
* form for uploads.
*/
private class fileuploadform extends form
// collection that will hold uploaded fileupload objects
private final collection uploads   new arraylist
/**
* todo
* @return collection
*/
public collection getuploads
return uploads
/**
* construct.
*
* @param name
*            component name
*/
public fileuploadform string name
super name
// set this form to multipart mode (allways needed for uploads!)
setmultipart true
// add one multi-file upload field
add new multifileuploadfield    new propertymodel this      5
// set maximum size to 100k for demo purposes
setmaxsize bytes kilobytes 100
/**
* @see org.apache.wicket.markup.html.form.form#onsubmit()
*/
protected void onsubmit
iterator it   uploads iterator
while  it hasnext
final fileupload upload    fileupload it next
// create a new file
file newfile   new file getuploadfolder    upload getclientfilename
// check new file, delete if it allready existed
checkfileexists newfile
try
// save to new file
newfile createnewfile
upload writeto newfile
multiuploadpage this info     upload getclientfilename
catch  exception e
throw new illegalstateexception
/** log. */
private static final log log   logfactory getlog multiuploadpage class
/** reference to listview for easy access. */
private filelistview filelistview
/**
* constructor.
*
* @param parameters
*            page parameters
*/
public multiuploadpage final pageparameters parameters
folder uploadfolder   getuploadfolder
// create feedback panels
final feedbackpanel uploadfeedback   new feedbackpanel
// add uploadfeedback to the page itself
add uploadfeedback
// add simple upload form, which is hooked up to its feedback panel by
// virtue of that panel being nested in the form.
final fileuploadform simpleuploadform   new fileuploadform
add simpleuploadform
// add folder view
add new label    uploadfolder getabsolutepath
filelistview   new filelistview    new loadabledetachablemodel
protected object load
return arrays aslist getuploadfolder   listfiles
add filelistview
/**
* check whether the file allready exists, and if so, try to delete it.
*
* @param newfile
*            the file to check
*/
private void checkfileexists file newfile
if  newfile exists
// try to delete the file
if   files remove newfile
throw new illegalstateexception     newfile getabsolutepath
private folder getuploadfolder
return   uploadapplication application get    getuploadfolder