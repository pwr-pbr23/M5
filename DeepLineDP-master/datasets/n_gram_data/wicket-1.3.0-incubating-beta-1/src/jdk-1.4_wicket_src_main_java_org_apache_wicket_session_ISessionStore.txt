/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket session
import java util list
import javax servlet http httpsession
import org apache wicket ipagemap
import org apache wicket page
import org apache wicket request
import org apache wicket session
import org apache wicket version ipageversionmanager
/**
* the actual store that is used by {@link org.apache.wicket.session} to store
* its attributes.
*
* @author eelco hillenius
* @author johan compagner
*/
public interface isessionstore
/**
* gets the attribute value with the given name
*
* @param request
*            the current request
* @param name
*            the name of the attribute to store
* @return the value of the attribute
*/
object getattribute request request  final string name
/**
* @param request
*            the current request
*
* @return list of attributes for this session
*/
list getattributenames request request
/**
* invalidates the session.
*
* @param request
*            the current request
*/
void invalidate request request
/**
* removes the attribute with the given name.
*
* @param request
*            the current request
* @param name
*            the name of the attribute to remove
*/
void removeattribute request request  string name
/**
* adds or replaces the attribute with the given name and value.
*
* @param request
*            the current request
* @param name
*            the name of the attribute
* @param value
*            the value of the attribute
*/
void setattribute request request  string name  object value
/**
* get the session id for the provided request. it create is false and the
* creation of the actual session is deferred, this method should return
* null to reflect it doesn't have one.
*
* @param request
*            the request
* @param create
*            whether to create an actual session (typically an instance of
*            {@link httpsession}) when not already done so
* @return the session id for the provided request, possibly null if create
*         is false and the creation of the actual session was deferred
*/
string getsessionid request request  boolean create
/**
* retrieves the session for the provided request from this facade.
* <p>
* this method should return null if it is not bound yet, so that wicket can
* recognize that it should create a session and call
* {@link #bind(request, session)} right after that.
* </p>
*
* @param request
*            the current request
* @return the session for the provided request or null if the session was
*         not bound
*/
session lookup request request
/**
* adds the provided new session to this facade using the provided request.
*
* @param request
*            the request that triggered making a new sesion
* @param newsession
*            the new session
*/
void bind request request  session newsession
/**
* adds the provided new session to this facade using the provided request.
*
* @param sessionid
*            the sessionid that must be unbinded.
*/
void unbind string sessionid
/**
* called at the start of a request. it can be used for example to rebuild
* server state from the client request.
*
* @param request
*            the request object
*/
void onbeginrequest request request
/**
* called at the end of a request. it can be used for instance to release
* temporary server state when using client state saving.
*
* @param request
*            the request
*/
void onendrequest request request
/**
* @param name
* @return the pagemap instance
*/
ipagemap createpagemap string name
/**
* @param page
*            the page for which this version manager must be created
* @return a instance of a ipageversionmanager that the page will use.
*/
ipageversionmanager newversionmanager page page
/**
* called when the webapplication is destroyed.
*/
void destroy