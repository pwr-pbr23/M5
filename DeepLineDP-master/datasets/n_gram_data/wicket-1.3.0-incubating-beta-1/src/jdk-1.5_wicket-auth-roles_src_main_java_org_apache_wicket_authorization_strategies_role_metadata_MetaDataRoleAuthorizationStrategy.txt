/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies role metadata
import org apache wicket application
import org apache wicket component
import org apache wicket metadatakey
import org apache wicket authorization action
import org apache wicket authorization strategies role abstractroleauthorizationstrategy
import org apache wicket authorization strategies role irolecheckingstrategy
import org apache wicket authorization strategies role roles
/**
* strategy that uses the wicket metadata facility to check authorization. the
* static <code>authorize</code> methods are for authorizing component actions
* and component instantiation by role. this class is is the main entry point
* for users wanting to use the roles-based authorization of the
* wicket-auth-roles package based on wicket metadata.
*
* for instance, use like:
*
* <pre>
* metadataroleauthorizationstrategy.authorize(mypanel, render, &quot;admin&quot;);
* </pre>
*
* for actions on component instances, or:
*
* <pre>
* metadataroleauthorizationstrategy.authorize(adminbookmarkablepage.class, &quot;admin&quot;);
* </pre>
*
* for doing role based authorization for component instantation.
*
* @see org.apache.wicket.metadatakey
*
* @author eelco hillenius
* @author jonathan locke
*/
public class metadataroleauthorizationstrategy extends abstractroleauthorizationstrategy
/**
* component meta data key for ations/ roles information. typically, you do
* not need to use this meta data key directly, but instead use one of the
* bind methods of this class.
*/
public static final metadatakey action_permissions   new metadatakey actionpermissions class
private static final long serialversionuid   1l
/**
* application meta data key for ations/ roles information. typically, you
* do not need to use this meta data key directly, but instead use one of
* the bind methods of this class.
*/
public static final metadatakey instantiation_permissions   new metadatakey
instantiationpermissions class
private static final long serialversionuid   1l
/** special role string for denying access to all */
public static final string no_role
/**
* authorizes the given role to create component instances of type
* componentclass. this authorization is added to any previously authorized
* roles.
*
* @param componentclass
*            the component type that is subject for the authorization
* @param roles
*            the comma separated roles that are authorized to create
*            component instances of type componentclass
*/
public static final void authorize final class< ? extends component> componentclass
final string roles
final application application   application get
instantiationpermissions permissions    instantiationpermissions application
getmetadata instantiation_permissions
if  permissions    null
permissions   new instantiationpermissions
application setmetadata instantiation_permissions  permissions
permissions authorize componentclass  new roles roles
/**
* authorizes the given role to perform the given action on the given
* component.
*
* @param component
*            the component that is subject to the authorization
* @param action
*            the action to authorize
* @param roles
*            the comma separated roles to authorize
*/
public static final void authorize final component component  final action action
final string roles
actionpermissions permissions    actionpermissions component
getmetadata action_permissions
if  permissions    null
permissions   new actionpermissions
component setmetadata action_permissions  permissions
permissions authorize action  new roles roles
/**
* grants permission to all roles to create instances of the given component
* class.
*
* @param componentclass
*            the component class
*/
public static final void authorizeall final class< ? extends component> componentclass
application application   application get
instantiationpermissions authorizedroles    instantiationpermissions application
getmetadata instantiation_permissions
if  authorizedroles    null
authorizedroles authorizeall componentclass
/**
* grants permission to all roles to perform the given action on the given
* component.
*
* @param component
*            the component that is subject to the authorization
* @param action
*            the action to authorize
*/
public static final void authorizeall final component component  final action action
actionpermissions permissions    actionpermissions component
getmetadata action_permissions
if  permissions    null
permissions authorizeall action
/**
* removes permission for the given roles to create instances of the given
* component class. there is no danger in removing authorization by calling
* this method. if the last authorization grant is removed for a given
* componentclass, the internal role no_role will automatically be added,
* effectively denying access to all roles (if this was not done, all roles
* would suddenly have access since no authorization is equivalent to full
* access).
*
* @param componentclass
*            the component type
* @param roles
*            the comma separated list of roles that are no longer to be
*            authorized to create instances of type componentclass
*/
public static final void unauthorize final class< ? extends component> componentclass
final string roles
final instantiationpermissions permissions    instantiationpermissions application get
getmetadata instantiation_permissions
if  permissions    null
permissions unauthorize componentclass  new roles roles
/**
* removes permission for the given role to perform the given action on the
* given component. there is no danger in removing authorization by calling
* this method. if the last authorization grant is removed for a given
* action, the internal role no_role will automatically be added,
* effectively denying access to all roles (if this was not done, all roles
* would suddenly have access since no authorization is equivalent to full
* access).
*
* @param component
*            the component
* @param action
*            the action
* @param roles
*            the comma separated list of roles that are no longer allowed
*            to perform the given action
*/
public static final void unauthorize final component component  final action action
final string roles
final actionpermissions permissions    actionpermissions component
getmetadata action_permissions
if  permissions    null
permissions unauthorize action  new roles roles
/**
* grants authorization to instantiate the given class to just the role
* no_role, effectively denying all other roles.
*
* @param componentclass
*            the component class
*/
public static final void unauthorizeall class< ? extends component> componentclass
authorizeall componentclass
authorize componentclass  no_role
/**
* grants authorization to perform the given action to just the role
* no_role, effectively denying all other roles.
*
* @param component
*            the component that is subject to the authorization
* @param action
*            the action to authorize
*/
public static final void unauthorizeall final component component  final action action
authorizeall component  action
authorize component  action  no_role
/**
* construct.
*
* @param rolecheckingstrategy
*            the authorizer object
*/
public metadataroleauthorizationstrategy final irolecheckingstrategy rolecheckingstrategy
super rolecheckingstrategy
/**
* uses component level meta data to match roles for component action
* execution.
*
* @see org.apache.wicket.authorization.iauthorizationstrategy#isactionauthorized(org.apache.wicket.component,
*      org.apache.wicket.authorization.action)
*/
public boolean isactionauthorized final component component  final action action
if  component    null
throw new illegalargumentexception
if  action    null
throw new illegalargumentexception
final roles roles   rolesauthorizedtoperformaction component  action
if  roles    null
return hasany roles
return true
/**
* uses application level meta data to match roles for component
* instantiation.
*
* @see org.apache.wicket.authorization.iauthorizationstrategy#isinstantiationauthorized(java.lang.class)
*/
@suppresswarnings
public boolean isinstantiationauthorized final class componentclass
if  componentclass    null
throw new illegalargumentexception
// as long as the interface does not use generics, we should check this
if   component class isassignablefrom componentclass
throw new illegalargumentexception
component class getname
final roles roles   rolesauthorizedtoinstantiate componentclass
if  roles    null
return hasany roles
return true
/**
* gets the roles for creation of the given component class, or null if none
* were registered.
*
* @param componentclass
*            the component class
* @return the roles that are authorized for creation of the componentclass,
*         or null if no specific authorization was configured
*/
private static roles rolesauthorizedtoinstantiate
final class< ? extends component> componentclass
final instantiationpermissions permissions    instantiationpermissions application get
getmetadata instantiation_permissions
if  permissions    null
return permissions authorizedroles componentclass
return null
/**
* gets the roles for the given action/ component combination.
*
* @param component
*            the component
* @param action
*            the action
* @return the roles for the action as defined with the given component
*/
private static roles rolesauthorizedtoperformaction final component component
final action action
final actionpermissions permissions    actionpermissions component
getmetadata action_permissions
if  permissions    null
return permissions rolesfor action
return null