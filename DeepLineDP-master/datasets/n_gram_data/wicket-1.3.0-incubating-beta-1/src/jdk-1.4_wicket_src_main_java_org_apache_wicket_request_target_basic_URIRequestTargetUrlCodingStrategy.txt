/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request target basic
import java util iterator
import java util map
import java util map entry
import org apache wicket irequesttarget
import org apache wicket pageparameters
import org apache wicket request requestparameters
import org apache wicket request target coding abstractrequesttargeturlcodingstrategy
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util value valuemap
/**
* request coding strategy that uses a simple uri by putting the remaining path
* in the <tt>uri</tt> page parameter. override the decode() method to return
* the appropriate request target, calling geturi(requestparameters) to get
* requested uri. note that this request coding strategy takes other page
* parameters from the query string directly, it does not use hierarchical path
* for parameters.
*
* @author <a href="mailto:jbq@apache.org">jean-baptiste quenot</a>
*/
public class urirequesttargeturlcodingstrategy extends abstractrequesttargeturlcodingstrategy
protected static final string uri
/**
* @see abstractrequesttargeturlcodingstrategy#abstractrequesttargeturlcodingstrategy(string)
*/
public urirequesttargeturlcodingstrategy string mountpath
super mountpath
/**
* get the remaining path after mount point.
*
* @param requestparameters
*            request parameters provided to the decode() method
* @return the uri
*/
public pageparameters decodeparameters requestparameters requestparameters
final string parametersfragment   requestparameters getpath   substring
getmountpath   length
return new pageparameters decodeparameters parametersfragment  requestparameters
getparameters
/**
* does nothing
*
* @see wicket.request.target.coding.irequesttargeturlcodingstrategy#decode(wicket.request.requestparameters)
*/
public irequesttarget decode requestparameters requestparameters
return null
/**
* does nothing
*
* @see wicket.request.target.coding.irequesttargeturlcodingstrategy#encode(wicket.irequesttarget)
*/
public charsequence encode irequesttarget requesttarget
return null
/**
* does nothing
*
* @see wicket.request.target.coding.irequesttargeturlcodingstrategy#matches(wicket.irequesttarget)
*/
public boolean matches irequesttarget requesttarget
return false
/**
* gets the encoded url for the request target. typically, the result will
* be prepended with a protocol specific prefix. in a servlet environment,
* the prefix concatenates the context path and the servlet path, for
* example "mywebapp/myservlet".
*
* @param url
*            the relative reference url
* @param parameters
*            parameter names mapped to parameter values
*/
protected void appendparameters appendingstringbuffer url  map parameters
if  parameters    null    parameters size   > 0
boolean firstparam   true
iterator entries   parameters entryset   iterator
while  entries hasnext
map entry entry    entry entries next
if  entry getvalue      null
string escapedvalue   urlencode entry getvalue   tostring
if   strings isempty escapedvalue
if  entry getkey   equals uri
url append    append escapedvalue
else
if  firstparam
url append        begin query string
firstparam   false
else
/*
* separate new key=value(s) pair from previous
* pair with an ampersand.
*/
url append
/* append key=value(s) pair. */
url append entry getkey
url append
url append escapedvalue
/**
* decodes parameters object from the provided url fragment
*
* @param urlfragment
*            fragment of the url after the decoded path and before the
*            query string
* @param urlparameters
*            query string parameters
* @return parameters created from the url fragment and query string
*/
protected valuemap decodeparameters string urlfragment  map urlparameters
// hack off any leading slash
if  urlfragment startswith
urlfragment   urlfragment substring 1
if  urlfragment length      0
return new valuemap
valuemap parameters   new valuemap
parameters add uri  urlfragment
if  urlparameters    null
parameters putall urlparameters
return parameters
protected string geturi requestparameters requestparameters
return decodeparameters requestparameters  getstring uri