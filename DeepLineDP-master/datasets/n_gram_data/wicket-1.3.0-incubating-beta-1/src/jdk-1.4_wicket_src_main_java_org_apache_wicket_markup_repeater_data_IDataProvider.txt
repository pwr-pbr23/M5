/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup repeater data
import java util iterator
import org apache wicket model idetachable
import org apache wicket model imodel
/**
* interface used to provide data to data views.
*
* example:
*
* <pre>
*         class usersprovider implements idataprovider {
*
*           public iterator iterator(int first, int count) {
*             ((myapplication)application.get()).getuserdao().iterator(first, count);
*           }
*
*           public int size() {
*             ((myapplication)application.get()).getuserdao().getcount();
*           }
*
*           public imodel model(object object) {
*             return new detachableusermodel((user)object);
*           }
*         }
* </pre>
*
* you can use the {@link idetachable#detach()} method for cleaning up your
* idataprovider instance. so that you can do one query that returns both
* the size and the values if your dataset is small enough the be able to
* do that.
*
* @see idetachable
* @see dataviewbase
* @see dataview
* @see gridview
*
* @author igor vaynberg (ivaynberg)
*
*/
public interface idataprovider extends idetachable
/**
* gets an iterator for the subset of total data
*
* @param first
*            first row of data
* @param count
*            minumum number of elements to retrieve
*
* @return iterator capable of iterating over {first, first+count} items
*/
iterator iterator int first  int count
/**
* gets total number of items in the collection represented by the
* dataprovider
*
* @return total item count
*/
int size
/**
* callback used by the consumer of this data provider to wrap objects
* retrieved from {@link #iterator(int, int)} with a model (usually a
* detachable one).
*
* @param object
*            the object that needs to be wrapped
*
* @return the model representation of the object
*/
imodel model object object