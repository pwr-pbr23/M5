/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions wizard
import java util iterator
import org apache wicket iclusterable
/**
* this interface defines the model for wizards. this model knows about the
* wizard's steps and the transitions between them, and it holds a reference to
* the currently active step. it might function as a generic state holder for
* the wizard too, though you might find it more convenient to use the wizard
* component itself for that, or even an external model.
*
* <p>
* {@link iwizardmodellistener wizard model listeners} can be registered to be
* notified of important events (changing the active step) using the
* {@link #addlistener(iwizardmodellistener) add listener} method.
* </p>
*
* <p>
* typically, you would use
* {@link wizardmodel the default implementation of this interface}, but if you
* need to do more sophisticated stuff, like branching etc, you can consider
* creating your own implementation.
* </p>
*
* <p>
* <a href="https://wizard-framework.dev.java.net/">swing wizard framework</a>
* served as a valuable source of inspiration.
* </p>
*
* @see wizardmodel
*
* @author eelco hillenius
*/
public interface iwizardmodel extends iclusterable
/**
* adds a wizard model listener.
*
* @param listener
*            the wizard model listener to add
*/
void addlistener iwizardmodellistener listener
/**
* cancels further processing. implementations may clean up and reset the
* model. implementations should notify the registered
* {@link iwizardmodellistener#oncancel() model listeners}.
*/
void cancel
/**
* instructs the wizard to finish succesfully. typically, implementations
* check whether this option is available at all. implementations may clean
* up and reset the model. implementations should notify the registered
* {@link iwizardmodellistener#onfinish() model listeners}.
*/
void finish
/**
* gets the current active step the wizard should display.
*
* @return the active step.
*/
iwizardstep getactivestep
/**
* gets whether the cancel button should be displayed.
*
* @return true if the cancel button should be displayed
*/
boolean iscancelvisible
/**
* checks if the last button should be enabled.
*
* @return <tt>true</tt> if the last button should be enabled,
*         <tt>false</tt> otherwise.
* @see #islastvisible
*/
boolean islastavailable
/**
* gets whether the specified step is the last step in the wizard.
*
* @param step
*            the step to check
* @return true if its the final step in the wizard, false< otherwise.
*/
boolean islaststep iwizardstep step
/**
* gets whether the last button should be displayed. this method should only
* return true if the {@link #islastavailable} will return true at any
* point. returning false will prevent the last button from appearing on the
* wizard at all.
*
* @return true if the last button should be displayed, false otherwise.
*/
boolean islastvisible
/**
* gets whether the next button should be enabled.
*
* @return true if the next button should be enabled, false otherwise.
*/
boolean isnextavailable
/**
* gets whether the previous button should be enabled.
*
* @return true if the previous button should be enabled, false otherwise.
*/
boolean ispreviousavailable
/**
* takes the model to the last step in the wizard. this method must only be
* called if {@link #islastavailable} returns <tt>true</tt>.
*/
void laststep
/**
* increments the model the the next step. this method must only be called
* if {@link #isnextavailable} returns <tt>true</tt>.
*/
void next
/**
* takes the model to the previous step.this method must only be called if
* {@link #ispreviousavailable} returns <tt>true</tt>.
*/
void previous
/**
* removes a wizard model listener.
*
* @param listener
*            the listener to remove
*/
void removelistener iwizardmodellistener listener
/**
* resets the model, setting it to the first step.
*/
void reset
/**
* returns an iterator over all the steps in the model. the iteration order
* is not guarenteed to the be the order of traversal.
*
* @return an iterator over all the steps of the model
*/
iterator stepiterator