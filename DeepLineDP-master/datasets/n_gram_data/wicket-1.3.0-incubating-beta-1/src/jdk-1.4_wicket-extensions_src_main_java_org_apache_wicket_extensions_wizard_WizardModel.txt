/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions wizard
import java util arraylist
import java util iterator
import java util list
import org apache wicket iclusterable
import org apache wicket util collections arrayliststack
/**
* default implementation of {@link iwizardmodel}.
* <p>
* steps can be added to this model directly using either the
* {@link #add(iwizardstep) normal add method} or
* {@link #add(iwizardstep, org.apache.wicket.extensions.wizard.wizardmodel.icondition) the conditional add method}.
* </p>
*
* <p>
* <a href="https://wizard-framework.dev.java.net/">swing wizard framework</a>
* served as a valuable source of inspiration.
* </p>
*
* @author eelco hillenius
*/
public class wizardmodel implements iwizardmodel
/**
* interface for conditional displaying of wizard steps.
*/
public interface icondition extends iclusterable
/**
* evaluates the current state and returns whether the step that is
* coupled to this condition is available.
*
* @return true if the step this condition is coupled to is available,
*         false otherwise
*/
public boolean evaluate
/**
* condition that always evaluates true.
*/
public static final icondition true   new icondition
private static final long serialversionuid   1l
/**
* always returns true.
*
* @return true
*/
public boolean evaluate
return true
private static final long serialversionuid   1l
/** the currently active step. */
private iwizardstep activestep
/** whether cancel functionality is available. */
private boolean cancelvisible   true
/** conditions with steps. */
private list conditions   new arraylist
/** state history. */
private final arrayliststack history   new arrayliststack
/** whether the last button should be shown at all; false by default. */
private boolean lastvisible   false
/** the wizard steps. */
private list steps   new arraylist
/** listeners for {@link iwizardmodellistener model events}. */
private final list wizardmodellisteners   new arraylist 1
/**
* construct.
*/
public wizardmodel
/**
* adds the next step to the wizard. if the {@link wizardstep} implements
* {@link icondition}, then this method is equivalent to calling
* {@link #add(iwizardstep, icondition) add(step, (icondition)step)}.
*
* @param step
*            the step to added.
*/
public void add iwizardstep step
if  step instanceof icondition
add step   icondition step
else
add step  true
/**
* adds an optional step to the model. the step will only be displayed if
* the specified condition is met.
*
* @param step
*            the step to add
* @param condition
*            the {@link icondition} under which it should be included in
*            the wizard.
*/
public void add iwizardstep step  icondition condition
steps add step
conditions add condition
/**
* adds a wizard model listener.
*
* @param listener
*            the listener to add
*/
public final void addlistener iwizardmodellistener listener
this wizardmodellisteners add listener
/**
* this implementation just fires
* {@link iwizardmodellistener#oncancel() a cancel event}. though this
* isn't a very strong contract, it gives all the power to the user of this
* model.
*
* @see org.apache.wicket.extensions.wizard.iwizardmodel#cancel()
*/
public void cancel
firewizardcancelled
/**
* this implementation just fires
* {@link iwizardmodellistener#onfinish() a finish event}. though this
* isn't a very strong contract, it gives all the power to the user of this
* model.
*
* @see org.apache.wicket.extensions.wizard.iwizardmodel#finish()
*/
public void finish
firewizardfinished
/**
* gets the current active step the wizard should display.
*
* @return the active step.
*/
public final iwizardstep getactivestep
return activestep
/**
* gets whether cancel functionality is available.
*
* @return whether cancel functionality is available
*/
public boolean iscancelvisible
return cancelvisible
/**
* checks if the last button should be enabled.
*
* @return <tt>true</tt> if the last button should be enabled,
*         <tt>false</tt> otherwise.
* @see #islastvisible
*/
public boolean islastavailable
return allstepscomplete       islaststep activestep
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#islaststep(org.apache.wicket.extensions.wizard.iwizardstep)
*/
public boolean islaststep iwizardstep step
return findlaststep   equals step
/**
* checks if the last button should be displayed. this method should only
* return true if the {@link #islastavailable} will return true at any
* point. returning false will prevent the last button from appearing on the
* wizard at all.
*
* @return <tt>true</tt> if the previou last should be displayed,
*         <tt>false</tt> otherwise.
*/
public boolean islastvisible
return lastvisible
/**
* checks if the next button should be enabled.
*
* @return <tt>true</tt> if the next button should be enabled,
*         <tt>false</tt> otherwise.
*/
public boolean isnextavailable
return activestep iscomplete       islaststep activestep
/**
* checks if the previous button should be enabled.
*
* @return <tt>true</tt> if the previous button should be enabled,
*         <tt>false</tt> otherwise.
*/
public boolean ispreviousavailable
return  history isempty
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#laststep()
*/
public void laststep
history push getactivestep
iwizardstep laststep   findlaststep
setactivestep laststep
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#next()
*/
public void next
history push getactivestep
iwizardstep step   findnextvisiblestep
setactivestep step
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#previous()
*/
public void previous
iwizardstep step    iwizardstep history pop
setactivestep step
/**
* removes a wizard model listener.
*
* @param listener
*            the listener to remove
*/
public final void removelistener iwizardmodellistener listener
this wizardmodellisteners remove listener
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#reset()
*/
public void reset
history clear
this activestep   null
setactivestep findnextvisiblestep
/**
* sets the active step.
*
* @param step
*            the new active step step.
*/
public void setactivestep iwizardstep step
if  this activestep    null    step    null    activestep equals step
return
iwizardstep old   this activestep
this activestep   step
fireactivestepchanged step
/**
* sets whether cancel functionality is available.
*
* @param cancelvisible
*            whether cancel functionality is available
*/
public void setcancelvisible boolean cancelvisible
this cancelvisible   cancelvisible
/**
* configures if the last button should be displayed.
*
* @param lastvisible
*            <tt>true</tt> to display the last button, <tt>false</tt>
*            otherwise.
* @see #islastvisible
*/
public void setlastvisible boolean lastvisible
this lastvisible   lastvisible
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodel#stepiterator()
*/
public final iterator stepiterator
return steps iterator
/**
* returns true if all the steps in the wizard return <tt>true</tt> from
* {@link iwizardstep#iscomplete}. this is primarily used to determine if
* the last button can be enabled.
*
* @return <tt>true</tt> if all the steps in the wizard are complete,
*         <tt>false</tt> otherwise.
*/
protected final boolean allstepscomplete
for  iterator iterator   stepiterator    iterator hasnext
if     iwizardstep iterator next    iscomplete
return false
return true
/**
* finds the last step in this model.
*
* @return the last step
*/
protected final iwizardstep findlaststep
for  int i   conditions size     1  i >  0  i
icondition condition    icondition conditions get i
if  condition evaluate
return  iwizardstep steps get i
throw new illegalstateexception
/**
* finds the next visible step based on the active step.
*
* @return the next visible step based on the active step
*/
protected final iwizardstep findnextvisiblestep
int startindex    activestep    null  ? 0   steps indexof activestep    1
for  int i   startindex  i < conditions size    i
icondition condition    icondition conditions get i
if  condition evaluate
return  iwizardstep steps get i
throw new illegalstateexception
/**
* notify listeners that the active step has changed.
*
* @param step
*            the new step
*/
protected final void fireactivestepchanged iwizardstep step
for  iterator i   wizardmodellisteners iterator    i hasnext
iwizardmodellistener listener    iwizardmodellistener i next
listener onactivestepchanged step
/**
* notify listeners that the wizard is finished.
*/
protected final void firewizardcancelled
for  iterator i   wizardmodellisteners iterator    i hasnext
iwizardmodellistener listener    iwizardmodellistener i next
listener oncancel
/**
* notify listeners that the wizard is finished.
*/
protected final void firewizardfinished
for  iterator i   wizardmodellisteners iterator    i hasnext
iwizardmodellistener listener    iwizardmodellistener i next
listener onfinish