/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup
import java util arraylist
import java util collections
import java util iterator
import java util list
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket util string appendingstringbuffer
/**
* a list of markup elements associated with a markup. might be all elements of
* a markup resource, might be just the elements associated with a specific tag.
*
* @see org.apache.wicket.markup.markup
* @see org.apache.wicket.markup.markupelement
* @see org.apache.wicket.markup.componenttag
* @see org.apache.wicket.markup.rawmarkup
*
* @author juergen donnerstag
*/
public class markupfragment
private static final log log   logfactory getlog markupfragment class
/** placeholder that indicates no markup */
public static final markupfragment no_markup_fragment   new markupfragment markup no_markup
/** the list of markup elements */
private   final   list markupelements
/** the associate markup */
private final markup markup
/**
* constructor
*
* @param markup
*            the associated markup
*/
markupfragment final markup markup
this markup   markup
this markupelements   new arraylist
/**
* @return string representation of markup list
*/
public final string tostring
final appendingstringbuffer buf   new appendingstringbuffer 400
buf append this markup tostring
buf append
final iterator iter   this markupelements iterator
while  iter hasnext
buf append iter next
buf append
return buf tostring
/**
* for wicket it would be sufficient for this method to be package
* protected. however to allow wicket-bench easy access to the information
* ...
*
* @param index
*            index into markup list
* @return markup element
*/
public final markupelement get final int index
return  markupelement markupelements get index
/**
* gets the associate markup
*
* @return the associated markup
*/
public final markup getmarkup
return this markup
/**
* for wicket it would be sufficient for this method to be package
* protected. however to allow wicket-bench easy access to the information
* ...
*
* @return number of markup elements
*/
public int size
return markupelements size
/**
* add a markupelement
*
* @param markupelement
*/
final void addmarkupelement final markupelement markupelement
this markupelements add markupelement
/**
* add a markupelement
*
* @param pos
* @param markupelement
*/
final void addmarkupelement final int pos  final markupelement markupelement
this markupelements add pos  markupelement
/**
* make all tags immutable and the list of elements unmodifable.
*/
final void makeimmutable
for  int i   0  i < this markupelements size    i
markupelement elem    markupelement this markupelements get i
if  elem instanceof componenttag
// make the tag immutable
componenttag elem  makeimmutable
this markupelements   collections unmodifiablelist this markupelements
/**
* reset the markup to its defaults, except for the wicket namespace which
* remains unchanged.
*/
final void reset
this markupelements   new arraylist
/**
* create an iterator for the markup elements
*
* @return iterator
*/
public final iterator iterator
return iterator 0  null
/**
* create an iterator for the tags being an istance of 'matchclass'
*
* @param startindex
*            the index to start with
* @param matchclass
*            iterate over elements matching the class
* @return iterator
*/
public final iterator iterator final int startindex  final class matchclass
return new iterator
int index   startindex   1
public boolean hasnext
while    index < size
markupelement element   get index
if   matchclass    null     matchclass isinstance element
return true
return false
public object next
return get index
public void remove
markupelements remove index
index    1