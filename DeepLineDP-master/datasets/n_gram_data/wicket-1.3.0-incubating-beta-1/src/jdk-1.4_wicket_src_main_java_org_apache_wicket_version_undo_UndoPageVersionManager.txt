/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket version undo
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket component
import org apache wicket page
import org apache wicket util collections arrayliststack
import org apache wicket version ipageversionmanager
/**
* a version manager implemented by recording component changes as undo records
* which can later be reversed to get back to a given version of the page being
* managed.
*
* @author jonathan locke
*/
public class undopageversionmanager implements ipageversionmanager
/** log. */
private static final log log   logfactory getlog undopageversionmanager class
private static final long serialversionuid   1l
/** the current list of changes */
private changelist changelist
/** stack of change lists for undoing */
private final arrayliststack changeliststack   new arrayliststack
/** the current version number */
private int currentversionnumber   0
/** the current version number */
private int currentajaxversionnumber   0
/** maximum number of most-recent versions to keep */
private final int maxversions
/** the page being managed */
private final page page
private transient boolean ignoremerge   false
/**
* constructor
*
* @param page
*            the page that we're tracking changes to
* @param maxversions
*            the maximum number of versions to maintain before expiring the
*            old versions
*/
public undopageversionmanager final page page  final int maxversions
this page   page
this maxversions   maxversions
/**
* @see org.apache.wicket.version.ipageversionmanager#beginversion(boolean)
*/
public void beginversion boolean mergeversion
// create new change list
changelist   new changelist
// if we merge then the version number shouldn't be upgraded.
if  mergeversion
// we are working on the next version now
currentversionnumber
currentajaxversionnumber   0
else
currentajaxversionnumber
/**
* @see org.apache.wicket.version.ipageversionmanager#ignoreversionmerge()
*/
public void ignoreversionmerge
ignoremerge   true
currentversionnumber
currentajaxversionnumber   0
/**
* @see org.apache.wicket.version.ipageversionmanager#componentadded(org.apache.wicket.component)
*/
public void componentadded component component
changelist componentadded component
/**
* @see org.apache.wicket.version.ipageversionmanager#componentmodelchanging(org.apache.wicket.component)
*/
public void componentmodelchanging component component
changelist componentmodelchanging component
/**
* @see org.apache.wicket.version.ipageversionmanager#componentremoved(org.apache.wicket.component)
*/
public void componentremoved component component
changelist componentremoved component
/**
* @see org.apache.wicket.version.ipageversionmanager#componentstatechanging(org.apache.wicket.version.undo.change)
*/
public void componentstatechanging change change
changelist componentstatechanging change
/**
* @see org.apache.wicket.version.ipageversionmanager#endversion(boolean)
*/
public void endversion boolean mergeversion
if mergeversion     ignoremerge
if changeliststack size   > 0
changelist previous    changelist changeliststack peek
previous add changelist
else
ignoremerge   false
// push change list onto stack
changeliststack push changelist
// if stack is overfull, remove oldest entry
if  getversions   > maxversions
expireoldestversion
// make memory efficient for replication
changeliststack trimtosize
if  log isdebugenabled
log debug     currentversionnumber       page
/**
* expires an old version
*/
public void expireoldestversion
changeliststack remove 0
/**
* @see org.apache.wicket.version.ipageversionmanager#getcurrentversionnumber()
*/
public int getcurrentversionnumber
return currentversionnumber
/**
* @see org.apache.wicket.version.ipageversionmanager#getajaxversionnumber()
*/
public int getajaxversionnumber
return currentajaxversionnumber
/**
* @see org.apache.wicket.version.ipageversionmanager#getversion(int)
*/
public page getversion final int versionnumber
// if the requested version is at or before the current version
if  versionnumber <  getcurrentversionnumber
// loop until we reach the right version
while  getcurrentversionnumber   > versionnumber
// go back one version
if   undo
return null
// return modified page
return page
else
// the version is not available
return null
/**
* @see org.apache.wicket.version.ipageversionmanager#rollbackpage(int)
*/
public page rollbackpage int numberofversions
// todo needs impl! see secondlevelcache pagemap impl
return null
/**
* @see org.apache.wicket.version.ipageversionmanager#getversions()
*/
public int getversions
return changeliststack size
/**
* goes back a version from the current version
*
* @return true if the page was successfully reverted to its previous
*         version
*/
private boolean undo
if  log isdebugenabled
log debug     page       currentversionnumber
if changeliststack isempty
return false
// pop off top change list
final changelist changelist    changelist changeliststack pop
if  changelist    null
return false
// undo changes made to previous version to get to this version
changelist undo
// one less version around
currentversionnumber
return true