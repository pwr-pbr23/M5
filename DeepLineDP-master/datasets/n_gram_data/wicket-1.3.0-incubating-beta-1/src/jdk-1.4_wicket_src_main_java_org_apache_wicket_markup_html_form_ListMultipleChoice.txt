/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util arraylist
import java util collection
import java util iterator
import java util list
import java util stringtokenizer
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket util convert conversionexception
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
/**
* a multiple choice list component.
*
* @author jonathan locke
* @author johan compagner
* @author martijn dashorst
*/
public class listmultiplechoice extends abstractchoice
private static final long serialversionuid   1l
/** the default maximum number of rows to display. */
private static int defaultmaxrows   8
/** the maximum number of rows to display. */
private int maxrows   defaultmaxrows
/**
* gets the default maximum number of rows to display.
*
* @return returns the defaultmaxrows.
*/
protected static int getdefaultmaxrows
return defaultmaxrows
/**
* sets the default maximum number of rows to display.
*
* @param defaultmaxrows
*            the defaultmaxrows to set.
*/
protected static void setdefaultmaxrows final int defaultmaxrows
listmultiplechoice defaultmaxrows   defaultmaxrows
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string)
*/
public listmultiplechoice final string id
super id
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, list)
*/
public listmultiplechoice final string id  final list choices
super id  choices
/**
* creates a multiple choice list with a maximum number of visible rows.
*
* @param id
*            component id
* @param choices
*            list of choices
* @param maxrows
*            the maximum number of visible rows.
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string, list)
*/
public listmultiplechoice final string id  final list choices  final int maxrows
super id  choices
this maxrows   maxrows
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      list,ichoicerenderer)
*/
public listmultiplechoice final string id  final list choices  final ichoicerenderer renderer
super id  choices  renderer
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel, list)
*/
public listmultiplechoice final string id  imodel object  final list choices
super id  object  choices
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel, list,ichoicerenderer)
*/
public listmultiplechoice final string id  imodel object  final list choices
final ichoicerenderer renderer
super id  object  choices  renderer
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel)
*/
public listmultiplechoice string id  imodel choices
super id  choices
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel,imodel)
*/
public listmultiplechoice string id  imodel model  imodel choices
super id  model  choices
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel,ichoicerenderer)
*/
public listmultiplechoice string id  imodel choices  ichoicerenderer renderer
super id  choices  renderer
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel, imodel,ichoicerenderer)
*/
public listmultiplechoice string id  imodel model  imodel choices  ichoicerenderer renderer
super id  model  choices  renderer
/**
* sets the number of visible rows in the listbox.
*
* @param maxrows
*            the number of visible rows
* @return this
*/
public final listmultiplechoice setmaxrows final int maxrows
this maxrows   maxrows
return this
/**
* @see formcomponent#getmodelvalue()
*/
public final string getmodelvalue
// get the list of selected values
object modelobject   getmodelobject
if  modelobject    null      modelobject instanceof collection
throw new wicketruntimeexception
modelobject getclass
final collection selectedvalues    collection modelobject
final appendingstringbuffer buffer   new appendingstringbuffer
if  selectedvalues    null
final list choices   getchoices
for  final iterator iterator   selectedvalues iterator    iterator hasnext
final object object   iterator next
int index   choices indexof object
buffer append getchoicerenderer   getidvalue object  index
buffer append value_separator
return buffer tostring
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#isselected(object,int,
*      string)
*/
protected final boolean isselected object choice  int index  string selected
// have a value at all?
if  selected    null
// loop through ids
for  final stringtokenizer tokenizer   new stringtokenizer selected  value_separator   tokenizer
hasmoretokens
final string id   tokenizer nexttoken
if  id equals getchoicerenderer   getidvalue choice  index
return true
return false
/**
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected final void oncomponenttag final componenttag tag
super oncomponenttag tag
tag put
if   tag getattributes   containskey
tag put    math min maxrows  getchoices   size
/**
* @see org.apache.wicket.markup.html.form.formcomponent#convertvalue(string[])
*/
protected object convertvalue string ids  throws conversionexception
arraylist selectedvalues   new arraylist
// if one or more ids is selected
if  ids    null    ids length > 0     strings isempty ids
// get values that could be selected
final list choices   getchoices
// loop through selected indices
for  int i   0  i < ids length  i
for  int index   0  index < choices size    index
// get next choice
final object choice   choices get index
if  getchoicerenderer   getidvalue choice  index  equals ids
selectedvalues add choice
break
return selectedvalues
/**
* if the model object exists, it is assumed to be a collection, and it is
* modified in-place. then {@link model#setobject(object)} is called with
* the same instance: it allows the model to be notified of changes even
* when {@link model#getobject()} returns a different {@link collection} at
* every invocation.
*
* @see formcomponent#updatemodel()
* @throws unsupportedoperationexception
*             if the model object collection cannot be modified
*/
public void updatemodel
collection selectedvalues    collection getmodelobject
if  selectedvalues    null
modelchanging
selectedvalues clear
selectedvalues addall  collection getconvertedinput
modelchanged
getmodel   setobject selectedvalues
else
selectedvalues    collection getconvertedinput
modelchanging
getmodel   setobject selectedvalues
modelchanged