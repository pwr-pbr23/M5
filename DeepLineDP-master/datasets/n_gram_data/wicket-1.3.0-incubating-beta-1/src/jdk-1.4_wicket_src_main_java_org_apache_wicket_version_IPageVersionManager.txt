/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket version
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket page
import org apache wicket version undo change
/**
* interface to code that manages versions of a page. initially a page has a
* version number of 0, indicating that it is in its original state. when one or
* more changes are made to the page, we arrive at version 1.
* <p>
* during a request cycle, just before a change is about to occur,
* beginversion() is called, followed by one or more calls to componentadded(),
* componentremoved() or componentmodelchanging(). if beginversion() is called
* by the framework during a given request cycle, a balancing endversion() call
* will occur at the end of the request cycle. however, if no changes occur to a
* page during a request cycle, none of these methods will be called.
* <p>
* once version information has been added to a version manager, versions can be
* retrieved by number using getversion(int). since version 0 is the first
* version of a page, calling getversion(0) will retrieve that version.
* <p>
* the current version number (the number of the newest available version) of a
* page can be retrieved by calling getcurrentversionnumber().
*
* @author jonathan locke
*/
public interface ipageversionmanager extends iclusterable
/**
* called when changes are immediately impending to the page being managed.
* the changes to the page between the call to this method and the call to
* endversion() create a new version of the page.
* <p>
* in requests where a page is not changed at all, beginversion will never
* be called, nor will any of the other methods in this interface.
*
* @param mergeversion
* 			  if this is set the version that was created is merged with the previous one.
*/
void beginversion boolean mergeversion
/**
* indicates that the given component was added.
*
* @param component
*            the component that was added.
*/
void componentadded component component
/**
* indicates that the model for the given component is about to change.
*
* @param component
*            the component whose model is about to change
*/
void componentmodelchanging component component
/**
* indicates an internal state for the given component is about to change.
*
* @param change
*            the change which represents the internal state
*/
void componentstatechanging change change
/**
* indicates that the given component was removed.
*
* @param component
*            the component that was removed.
*/
void componentremoved component component
/**
* called when changes to the page have ended.
*
* @param mergeversion
* 			  if this is set the version that was created is merged with the previous one.
*
* @see ipageversionmanager#beginversion()
*/
void endversion boolean mergeversion
/**
* expires oldest version
*/
void expireoldestversion
/**
* retrieves a given page version.
* this method does not take use the ajax versions.
*
* @param versionnumber
*            the version of the page to get
* @return the page or null if the version requested is not available
*/
page getversion int versionnumber
/**
* this method rollbacks the page the number of versions specified
* including the ajax versions.
*
* @param numberofversions
* @return
*/
page rollbackpage int numberofversions
/**
* @return the number of versions stored in this version manager
*/
int getversions
/**
* @return returns the current (newest) version number available through
*         this version manager.
*/
int getcurrentversionnumber
/**
* @return returns the current ajax version number.
*/
int getajaxversionnumber
/**
* call this method when the current (ajax) request
* shouldn't merge the changes that are happening to the page
* with the previous version. this is for example needed
* when you want to redirect to this page in an ajax request
* and then you do want to version normally..
*
* this method should only be called if the beginversion was called with true!
*/
void ignoreversionmerge