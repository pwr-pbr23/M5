/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket behavior
import org apache wicket component
import org apache wicket requestlistenerinterface
import org apache wicket response
import org apache wicket markup componenttag
import org apache wicket markup html iheadercontributor
import org apache wicket markup html iheaderresponse
import org apache wicket protocol http request webrequestcodingstrategy
import org apache wicket util string appendingstringbuffer
/**
* abstract class for handling ajax roundtrips. this class serves as a base for
* javascript specific implementations, like ones based on dojo or
* scriptaculous, or wicket's default.
*
* @author eelco hillenius
* @author ralf ebert
* @author igor vaynberg
*/
public abstract class abstractajaxbehavior extends abstractbehavior
implements
ibehaviorlistener
iheadercontributor
/** the component that this handler is bound to. */
private component component
/**
* construct.
*/
public abstractajaxbehavior
/**
* bind this handler to the given component.
*
* @param hostcomponent
*            the component to bind to
*/
public final void bind final component hostcomponent
if  hostcomponent    null
throw new illegalargumentexception
if  this component    null
throw new illegalstateexception
this component
hostcomponent
this component   hostcomponent
// call the calback
onbind
/**
* gets the url that references this handler.
*
* @return the url that references this handler
*/
public charsequence getcallbackurl
return getcallbackurl false  true
/**
* gets the url that references this handler.
*
* @param recordpageversion
*            if true the url will be encoded to execute on the current page
*            version, otherwise url will be encoded to execute on the
*            latest page version
* @param onlytargetactivepage
*            if true the callback to this behavior will be ignore if the
*            page is not the last one the user accessed
*
* @return the url that references this handler
*/
public final charsequence getcallbackurl final boolean recordpageversion
final boolean onlytargetactivepage
if  getcomponent      null
throw new illegalargumentexception
final requestlistenerinterface rli
if  recordpageversion
rli   ibehaviorlistener interface
else
rli   iunversionedbehaviorlistener interface
appendingstringbuffer url   new appendingstringbuffer getcomponent   urlfor this  rli
if  onlytargetactivepage
url append    append webrequestcodingstrategy ignore_if_not_active_parameter_name  append
return url
/**
* @see org.apache.wicket.behavior.ibehavior#oncomponenttag(org.apache.wicket.component,
*      org.apache.wicket.markup.componenttag)
*/
public final void oncomponenttag final component component  final componenttag tag
oncomponenttag tag
/**
* @see org.apache.wicket.behavior.abstractbehavior#onrendered(org.apache.wicket.component)
*/
public final void onrendered final component hostcomponent
oncomponentrendered
/**
* @see org.apache.wicket.markup.html.iheadercontributor#renderhead(iheaderresponse)
*/
public void renderhead final iheaderresponse response
/**
* gets the component that this handler is bound to.
*
* @return the component that this handler is bound to
*/
protected final component getcomponent
return component
/**
* called any time a component that has this handler registered is rendering
* the component tag. use this method e.g. to bind to javascript event
* handlers of the tag
*
* @param tag
*            the tag that is rendered
*/
protected void oncomponenttag final componenttag tag
/**
* called when the component was bound to it's host component. you can get
* the bound host component by calling getcomponent.
*/
protected void onbind
/**
* called to indicate that the component that has this handler registered
* has been rendered. use this method to do any cleaning up of temporary
* state
*/
protected void oncomponentrendered
/**
* @see org.apache.wicket.behavior.abstractbehavior#getstatelesshint(component)
*/
public boolean getstatelesshint component component
return false
// todo the next three methods will be removed with next commit. here as
// final to help with refactoring
protected final string getimplementationid
return
protected final void onrenderheadcontribution final response response
protected final void onrenderheadinitcontribution final response response