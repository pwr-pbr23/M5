/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io datainputstream
import java io eofexception
import java io ioexception
import java io inputstream
import java io objectinputstream
import java io objectstreamclass
import java io serializable
import java lang reflect array
import java lang reflect invocationtargetexception
import java util hashmap
import org apache wicket util collections inthashmap
/**
* @author jcompagner
*/
public final class wicketobjectinputstream extends objectinputstream
private inthashmap handledobjects   new inthashmap
private short handlecounter   0
private final datainputstream in
private classstreamhandler currentstreamhandler
private handlearrayliststack stack   new handlearrayliststack
private handlearrayliststack defaultread   new handlearrayliststack
/**
* construct.
* @param in
* @throws ioexception
*/
public wicketobjectinputstream inputstream in  throws ioexception
super
this in   new datainputstream in
/**
* @see java.io.objectinputstream#readobjectoverride()
*/
protected object readobjectoverride   throws ioexception  classnotfoundexception
object value   null
int token   in read
if token    classstreamhandler null
return null
else if   token    classstreamhandler handle
short handle   in readshort
value   handledobjects get handle
if  value    null
throw new runtimeexception     handle
else if  token    classstreamhandler class_def
short classdef   in readshort
currentstreamhandler   classstreamhandler lookup classdef
if  currentstreamhandler getstreamclass      string class
value   in readutf
handledobjects put handlecounter   value
else
try
value   currentstreamhandler createobject
handledobjects put handlecounter   value
stack push value
if    currentstreamhandler invokereadmethod this  value
currentstreamhandler readfields this value
stack pop
catch  illegalargumentexception ex
throw new runtimeexception ex
catch  instantiationexception ex
throw new runtimeexception ex
catch  illegalaccessexception ex
throw new runtimeexception ex
catch  invocationtargetexception ex
throw new runtimeexception ex
else if  token    classstreamhandler class
short classdef   in readshort
classstreamhandler lookup   classstreamhandler lookup classdef
value   lookup getstreamclass
else if  token    classstreamhandler array
short classdef   in readshort
classstreamhandler lookup   classstreamhandler lookup classdef
int length   in readint
object array    object array newinstance lookup getstreamclass    length
handledobjects put handlecounter   array
for  int i   0  i < array length  i
array   readobjectoverride
value   array
else if  token    classstreamhandler primitive_array
short classdef   in readshort
classstreamhandler lookup   classstreamhandler lookup classdef
value   lookup readarray this
handledobjects put handlecounter   value
else
throw new runtimeexception     token
return value
/**
* @see java.io.objectinputstream#defaultreadobject()
*/
public void defaultreadobject   throws ioexception  classnotfoundexception
object currentobject   stack peek
if    defaultread contains currentobject
defaultread add currentobject
currentstreamhandler readfields this currentobject
/**
* @see java.io.objectinputstream#close()
*/
public void close   throws ioexception
stack   null
defaultread   null
currentstreamhandler   null
in close
/**
* reads in a boolean.
*
* @return	the boolean read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public boolean readboolean   throws ioexception
return in readboolean
/**
* reads an 8 bit byte.
*
* @return	the 8 bit byte read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public byte readbyte   throws ioexception
return in readbyte
/**
* reads an unsigned 8 bit byte.
*
* @return	the 8 bit byte read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public int readunsignedbyte    throws ioexception
return in readunsignedbyte
/**
* reads a 16 bit char.
*
* @return	the 16 bit char read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public char readchar    throws ioexception
return in readchar
/**
* reads a 16 bit short.
*
* @return	the 16 bit short read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public short readshort    throws ioexception
return in readshort
/**
* reads an unsigned 16 bit short.
*
* @return	the 16 bit short read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public int readunsignedshort   throws ioexception
return in readunsignedshort
/**
* reads a 32 bit int.
*
* @return	the 32 bit integer read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public int readint    throws ioexception
return in readint
/**
* reads a 64 bit long.
*
* @return	the read 64 bit long.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public long readlong    throws ioexception
return in readlong
/**
* reads a 32 bit float.
*
* @return	the 32 bit float read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public float readfloat   throws ioexception
return in readfloat
/**
* reads a 64 bit double.
*
* @return	the 64 bit double read.
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public double readdouble   throws ioexception
return in readdouble
/**
* reads bytes, blocking until all bytes are read.
*
* @param	buf the buffer into which the data is read
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public void readfully byte buf  throws ioexception
in readfully buf  0  buf length
/**
* reads bytes, blocking until all bytes are read.
*
* @param	buf the buffer into which the data is read
* @param	off the start offset of the data
* @param	len the maximum number of bytes to read
* @throws	eofexception if end of file is reached.
* @throws	ioexception if other i/o error has occurred.
*/
public void readfully byte buf  int off  int len  throws ioexception
int endoff   off   len
if  off < 0    len < 0    endoff > buf length    endoff < 0
throw new indexoutofboundsexception
in readfully buf  off  len
/**
* @see java.io.objectinputstream#readutf()
*/
public string readutf   throws ioexception
string s   in readutf
return s
/**
* @see java.io.objectinputstream#read()
*/
public int read   throws ioexception
return in read
/**
* @see java.io.inputstream#read(byte[])
*/
public int read byte b  throws ioexception
return in read b
/**
* @see java.io.objectinputstream#read(byte[], int, int)
*/
public int read byte buf  int off  int len  throws ioexception
return in read buf  off  len
/**
* @see java.io.objectinputstream#readfields()
*/
public getfield readfields   throws ioexception  classnotfoundexception
getfieldimpl field   new getfieldimpl
field read
return field
private class getfieldimpl extends getfield
private hashmap values   new hashmap
private void read   throws ioexception  classnotfoundexception
short token   readshort
classstreamhandler lookup   classstreamhandler lookup boolean class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  readboolean  ?boolean true boolean false
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup byte class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new byte readbyte
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup short class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new short readshort
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup char class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new character readchar
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup int class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new integer readint
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup long class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new long readlong
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup float class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new float readfloat
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup double class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  new double readdouble
token   readshort
if  token    classstreamhandler null  return
lookup   classstreamhandler lookup serializable class
if  token    lookup getclassid
short count   readshort
for  int i   0  i < count  i
string key    string readobjectoverride
values put key  readobjectoverride
token   readshort
if  token    classstreamhandler null
throw new runtimeexception
/**
* @see java.io.objectinputstream.getfield#defaulted(java.lang.string)
*/
public boolean defaulted string name  throws ioexception
return values get name     null
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, byte)
*/
public byte get string name  byte val  throws ioexception
object o   values get name
if  o instanceof byte
return   byte o  bytevalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, char)
*/
public char get string name  char val  throws ioexception
object o   values get name
if  o instanceof byte
return   character o  charvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, double)
*/
public double get string name  double val  throws ioexception
object o   values get name
if  o instanceof double
return   double o  doublevalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, float)
*/
public float get string name  float val  throws ioexception
object o   values get name
if  o instanceof float
return   float o  floatvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, int)
*/
public int get string name  int val  throws ioexception
object o   values get name
if  o instanceof integer
return   integer o  intvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, long)
*/
public long get string name  long val  throws ioexception
object o   values get name
if  o instanceof long
return   long o  longvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, short)
*/
public short get string name  short val  throws ioexception
object o   values get name
if  o instanceof short
return   short o  shortvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, boolean)
*/
public boolean get string name  boolean val  throws ioexception
object o   values get name
if  o instanceof boolean
return   boolean o  booleanvalue
return val
/**
* @see java.io.objectinputstream.getfield#get(java.lang.string, java.lang.object)
*/
public object get string name  object val  throws ioexception
object o   values get name
if  o    null
return o
return val
/**
* @see java.io.objectinputstream.getfield#getobjectstreamclass()
*/
public objectstreamclass getobjectstreamclass
return null