/*
* ====================================================================
*
* the apache software license, version 1.1
*
* copyright (c) 1999-2003 the apache software foundation.
* all rights reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution, if
*    any, must include the following acknowledgement:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgement may appear in the software itself,
*    if and wherever such third-party acknowledgements normally appear.
*
* 4. the names "the jakarta project", "commons", and "apache software
*    foundation" must not be used to endorse or promote products derived
*    from this software without prior written permission. for written
*    permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache"
*    nor may "apache" appear in their names without prior written
*    permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*
*/
package org apache wicket util diff
import java util arraylist
import java util arrays
import java util iterator
import java util linkedlist
import java util list
import java util listiterator
/**
* a revision holds the series of deltas that describe the differences between
* two sequences.
*
* @version $revision: 1.1 $ $date: 2006/03/12 00:24:21 $
*
* @author <a href="mailto:juanco@suigeneris.org">juanco anez</a>
* @author <a href="mailto:bwm@hplb.hpl.hp.com">brian mcbride</a>
*
* @see delta
* @see diff
* @see chunk
* @see revision
*
* modifications 27 apr 2003 bwm
*
* added visitor pattern visitor interface and accept() method.
*/
public class revision extends tostring
list deltas_   new linkedlist
/**
* creates an empty revision.
*/
public revision
/**
* adds a delta to this revision.
*
* @param delta
*            the {@link delta delta} to add.
*/
public synchronized void adddelta delta delta
if  delta    null
throw new illegalargumentexception
deltas_ add delta
/**
* adds a delta to the start of this revision.
*
* @param delta
*            the {@link delta delta} to add.
*/
public synchronized void insertdelta delta delta
if  delta    null
throw new illegalargumentexception
deltas_ add 0  delta
/**
* retrieves a delta from this revision by position.
*
* @param i
*            the position of the delta to retrieve.
* @return the specified delta
*/
public delta getdelta int i
return  delta  deltas_ get i
/**
* returns the number of deltas in this revision.
*
* @return the number of deltas.
*/
public int size
return deltas_ size
/**
* applies the series of deltas in this revision as patches to the given
* text.
*
* @param src
*            the text to patch, which the method doesn't change.
* @return the resulting text after the patches have been applied.
* @throws patchfailedexception
*             if any of the patches cannot be applied.
*/
public object patch object src  throws patchfailedexception
list target   new arraylist arrays aslist src
applyto target
return target toarray
/**
* applies the series of deltas in this revision as patches to the given
* text.
*
* @param target
*            the text to patch.
* @throws patchfailedexception
*             if any of the patches cannot be applied.
*/
public synchronized void applyto list target  throws patchfailedexception
listiterator i   deltas_ listiterator deltas_ size
while  i hasprevious
delta delta    delta  i previous
delta patch target
/**
* converts this revision into its unix diff style string representation.
*
* @param s
*            a {@link stringbuffer stringbuffer} to which the string
*            representation will be appended.
*/
public synchronized void tostring stringbuffer s
iterator i   deltas_ iterator
while  i hasnext
delta  i next    tostring s
/**
* converts this revision into its rcs style string representation.
*
* @param s
*            a {@link stringbuffer stringbuffer} to which the string
*            representation will be appended.
* @param eol
*            the string to use as line separator.
*/
public synchronized void torcsstring stringbuffer s  string eol
iterator i   deltas_ iterator
while  i hasnext
delta  i next    torcsstring s  eol
/**
* converts this revision into its rcs style string representation.
*
* @param s
*            a {@link stringbuffer stringbuffer} to which the string
*            representation will be appended.
*/
public void torcsstring stringbuffer s
torcsstring s  diff nl
/**
* converts this delta into its rcs style string representation.
*
* @param eol
*            the string to use as line separator.
* @return string
*/
public string torcsstring string eol
stringbuffer s   new stringbuffer
torcsstring s  eol
return s tostring
/**
* converts this delta into its rcs style string representation using the
* default line separator.
* @return string
*/
public string torcsstring
return torcsstring diff nl
/**
* accepts a visitor.
*
* @param visitor
*            the {@link visitor} visiting this instance
*/
public void accept revisionvisitor visitor
visitor visit this
iterator iter   deltas_ iterator
while  iter hasnext
delta  iter next    accept visitor