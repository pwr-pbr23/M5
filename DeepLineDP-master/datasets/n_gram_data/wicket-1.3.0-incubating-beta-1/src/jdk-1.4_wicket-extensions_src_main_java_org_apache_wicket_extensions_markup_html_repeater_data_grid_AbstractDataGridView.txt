/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html repeater data grid
import java io serializable
import java util iterator
import org apache wicket wicketruntimeexception
import org apache wicket markup repeater item
import org apache wicket markup repeater refreshingview
import org apache wicket markup repeater data dataviewbase
import org apache wicket markup repeater data idataprovider
import org apache wicket markup repeater util arrayiteratoradapter
import org apache wicket model imodel
import org apache wicket model model
/**
* acts as a base for data-grid views. unlike a data view a data-grid view
* populates both rows and columns. the columns are populated by an array of
* provided icellpopulator objects.
*
* @see datagridview
*
* @author igor vaynberg (ivaynberg)
*
*/
public abstract class abstractdatagridview extends dataviewbase
private static final long serialversionuid   1l
private static final string cell_repeater_id
private static final string cell_item_id
private icellpopulator populators
private transient arrayiteratoradapter populatorsiteratorcache
/**
* constructor
*
* @param id
*            component id
* @param populators
*            array of icellpopulator objects that will be used to populate
*            cell items
* @param dataprovider
*            data provider
*/
public abstractdatagridview string id  icellpopulator populators  idataprovider dataprovider
super id  dataprovider
this populators   populators
/**
* returns iterator over icellpopulator elements in the populators array.
* this method caches the iterator implemenation in a transient member
* instance.
*
* @return iterator over icellpopulator elements in the populators array
*/
private iterator getpopulatorsiterator
if  populatorsiteratorcache    null
populatorsiteratorcache   new arrayiteratoradapter internalgetpopulators
protected imodel model object object
return new model  serializable object
else
populatorsiteratorcache reset
return populatorsiteratorcache
protected final icellpopulator internalgetpopulators
return populators
/**
* factory method for item container that represents a cell.
*
* @see item
* @see refreshingview#newitem(string, int, imodel)
*
* @param id
*            component id for the new data item
* @param index
*            the index of the new data item
* @param model
*            the model for the new data item
*
* @return dataitem created dataitem
*/
protected item newcellitem final string id  int index  final imodel model
return new item id  index  model
protected final item newitem string id  int index  imodel model
return newrowitem id  index  model
/**
* factory method for item container that represents a row.
*
* @see item
* @see refreshingview#newitem(string, int, imodel)
*
* @param id
*            component id for the new data item
* @param index
*            the index of the new data item
* @param model
*            the model for the new data item.
*
* @return dataitem created dataitem
*/
protected item newrowitem final string id  int index  final imodel model
return new item id  index  model
/**
* @see org.apache.wicket.markup.repeater.data.dataviewbase#ondetach()
*/
protected void ondetach
super ondetach
if  populators    null
for  int i   0  i < populators length  i
populators detach
protected final void populateitem item item
final imodel rowmodel   item getmodel
// todo post 1.2: general: does this need to be a refreshing view? since the rows
// is a refreshing view this will be recreated anyways. maybe can se
// orderedrepeatingview instead to simplify.
item add new refreshingview cell_repeater_id
private static final long serialversionuid   1l
protected iterator getitemmodels
return getpopulatorsiterator
protected item newitem string id  int index  imodel model
return newcellitem id  index  model
protected void populateitem item item
final icellpopulator populator    icellpopulator item getmodelobject
populator populateitem item  cell_item_id  rowmodel
if  item get       null
throw new wicketruntimeexception populator getclass   getname
cell_item_id