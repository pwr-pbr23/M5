/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket component
import org apache wicket ipagemap
import org apache wicket irequesttarget
import org apache wicket page
import org apache wicket pagemap
import org apache wicket pageparameters
import org apache wicket requestcycle
import org apache wicket resourcereference
import org apache wicket response
import org apache wicket session
import org apache wicket behavior abstractbehavior
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup markupstream
import org apache wicket markup tagutils
import org apache wicket markup html internal htmlbodycontainer
import org apache wicket markup html link bookmarkablepagelink
import org apache wicket markup parser filter htmlheadersectionhandler
import org apache wicket model imodel
import org apache wicket model model
import org apache wicket protocol http webrequestcycle
import org apache wicket protocol http webresponse
import org apache wicket protocol http request urlcompressing urlcompressingwebrequestprocessor
import org apache wicket protocol http request urlcompressing urlcompressor
import org apache wicket request target component bookmarkablepagerequesttarget
import org apache wicket request target component ibookmarkablepagerequesttarget
import org apache wicket util lang objects
import org apache wicket util string javascriptutils
/**
* base class for html pages. this subclass of page simply returns html when
* asked for its markup type. it also has a method which subclasses can use to
* retrieve a bookmarkable link to the application's home page.
* <p>
* webpages can be constructed with any constructor when they are being used in
* a wicket session, but if you wish to link to a page using a url that is
* "bookmarkable" (which implies that the url will not have any session
* information encoded in it, and that you can call this page directly without
* having a session first directly from your browser), you need to implement
* your page with a no-arg constructor or with a constructor that accepts a
* pageparameters argument (which wraps any query string parameters for a
* request). in case the page has both constructors, the constructor with
* pageparameters will be used.
*
* @author jonathan locke
* @author eelco hillenius
* @author juergen donnerstag
* @author gwyn evans
*/
public class webpage extends page implements inewbrowserwindowlistener
private static final long serialversionuid   1l
/** log. */
private static final log log   logfactory getlog webpage class
/** the resource references used for new window/tab support */
private static resourcereference cookiesresource   new resourcereference webpage class
/**
* the url compressor that will compress the urls by collapsing the
* component path and listener interface
*/
private urlcompressor compressor
/**
* boolean flag that represents whether or not we have already added a
* {@link htmlbodycontainer} to this page or not
*/
private boolean bodycontaineradded   false
/**
* constructor. having this constructor public means that your page is
* 'bookmarkable' and hence can be called/ created from anywhere.
*/
protected webpage
commoninit
/**
* @see page#page(imodel)
*/
protected webpage final imodel model
super model
commoninit
/**
* @see page#page(pagemap)
*/
protected webpage final ipagemap pagemap
super pagemap
commoninit
/**
* @see page#page(pagemap, imodel)
*/
protected webpage final ipagemap pagemap  final imodel model
super pagemap  model
commoninit
/**
* constructor which receives wrapped query string parameters for a request.
* having this constructor public means that your page is 'bookmarkable' and
* hence can be called/ created from anywhere. for bookmarkable pages (as
* opposed to when you construct page instances yourself, this constructor
* will be used in preference to a no-arg constructor, if both exist. note
* that nothing is done with the page parameters argument. this constructor
* is provided so that tools such as ides will include it their list of
* suggested constructors for derived classes.
*
* @param parameters
*            wrapped query string parameters.
*/
protected webpage final pageparameters parameters
this  imodel null
/**
* gets the markup type for a webpage, which is "html" by default. support
* for pages in another markup language, such as vxml, would require the
* creation of a different page subclass in an appropriate package under
* org.apache.wicket.markup. to support vxml (voice markup), one might
* create the package org.apache.wicket.markup.vxml and a subclass of page
* called voicepage.
*
* @return markup type for html
*/
public string getmarkuptype
return
/**
* @see org.apache.wicket.page#configureresponse()
*/
protected void configureresponse
super configureresponse
final webresponse response   getwebrequestcycle   getwebresponse
response setheader
response setheader           no store
/**
* @return the webrequestcycle for this webpage.
*/
protected final webrequestcycle getwebrequestcycle
return  webrequestcycle getrequestcycle
/**
* creates and returns a bookmarkable link to this application's home page.
*
* @param id
*            name of link
* @return link to home page for this application
*/
protected final bookmarkablepagelink homepagelink final string id
return new bookmarkablepagelink id  getapplication   gethomepage
/**
* common code executed by constructors.
*/
private void commoninit
// if automatic multi window support is on, add a page checker instance
if  getapplication   getpagesettings   getautomaticmultiwindowsupport
add new pagemapchecker this
/**
* this method is called when the compressing coding and response stategies
* are configured in your application object like this:
*
* <pre>
* protected irequestcycleprocessor newrequestcycleprocessor()
* {
* 	return new urlcompressingwebrequestprocessor();
* }
* </pre>
*
* @return the urlcompressor for this webpage.
*
* @since 1.2
*
* @see urlcompressingwebrequestprocessor
* @see urlcompressor
*/
public final urlcompressor geturlcompressor
if  compressor    null
compressor   new urlcompressor
return compressor
protected void onattach
super onattach
if   bodycontaineradded
// add a body container if the associated markup contains a <body>
// tag get markup stream gracefully
markupstream markupstream   getassociatedmarkupstream false
if  markupstream    null
// the default <body> container. it can be accessed, replaced
// and attribute modifiers can be attached. <body> tags without
// wicket:id get automatically a wicket:id="body" assigned.
// find the body tag
while  markupstream hasmore
final markupelement element   markupstream next
if  element instanceof componenttag
final componenttag tag    componenttag element
if  tag isopen      tagutils isbodytag tag
// add a default container if the tag has the
// default name
if  htmlbodycontainer body_id equals tag getid
add new htmlbodycontainer tag getid
bodycontaineradded   true
break
/**
*
* @see org.apache.wicket.component#ondetach()
*/
protected void ondetach
// this code can not go into htmlheadercontainer as
// header.onendrequest() is executed inside an iterator
// and you can only call container.remove() which
// is != iter.remove(). and the iterator is not available
// inside onendrequest(). obviously webpage.onendrequest()
// is invoked outside the iterator loop.
final component header   get htmlheadersectionhandler header_id
if  header    null
this remove header
super ondetach
/**
* @see org.apache.wicket.markup.html.inewbrowserwindowlistener#onnewbrowserwindow()
*/
public void onnewbrowserwindow
// if the browser reports a history of 0 then make a new webpage
webpage clonedpage   this
try
clonedpage    webpage objects cloneobject this
catch  exception e
log error     clonedpage      e
final ipagemap map   getsession   createautopagemap
clonedpage movetopagemap map
setresponsepage clonedpage
/**
* tries to determine whether this page was opened in a new window or tab.
* if it is (and this checker were able to recognize that), a new page map
* is created for this page instance, so that it will start using it's own
* history in sync with the browser window or tab.
*/
private static final class pagemapchecker extends abstractbehavior
implements
iheadercontributor
private static final long serialversionuid   1l
/** the unload model for deleting the pagemap cookie */
private model onunloadmodel
private final webpage webpage
/**
* construct.
*
* @param webpage
*/
pagemapchecker webpage webpage
this webpage   webpage
/**
* @see org.apache.wicket.markup.html.iheadercontributor#renderhead(org.apache.wicket.response)
*/
public final void renderhead final iheaderresponse headresponse
response response   headresponse getresponse
final webrequestcycle cycle    webrequestcycle requestcycle get
final irequesttarget target   cycle getrequesttarget
ipagemap pagemap   webpage getpagemap
string name   pagemap getname
if  name    null
name
else
name   name replace
session session   session get
session pagemapaccessmetadata meta    session pagemapaccessmetadata session
getmetadata session pagemap_access_mdk
if  meta    null
meta   new session pagemapaccessmetadata
session setmetadata session pagemap_access_mdk  meta
boolean firstaccess   meta add pagemap
if  firstaccess
// this is the first access to the pagemap, set window.name
javascriptutils writeopentag response
response
write  "
response write name
response write     "
javascriptutils writeclosetag response
else
// here is our trickery to detect whether the current request
// was
// made in a new window/ tab, in which case it should go in a
// different page map so that we don't intermangle the history
// of
// those windows
charsequence url   null
if  target instanceof ibookmarkablepagerequesttarget
ibookmarkablepagerequesttarget current    ibookmarkablepagerequesttarget target
bookmarkablepagerequesttarget redirect   new bookmarkablepagerequesttarget
session createautopagemapname    current getpageclass    current
getpageparameters
url   cycle urlfor redirect
else
url   webpage urlfor inewbrowserwindowlistener interface
javascriptutils writeopentag response
response
write
name    "
response write url
response write     "
javascriptutils writeclosetag response