/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java util arraylist
import java util enumeration
import java util list
import javax servlet http httpsession
import org apache wicket accessstackpagemap
import org apache wicket application
import org apache wicket ipagemap
import org apache wicket request
import org apache wicket session
/**
* default web implementation of {@link org.apache.wicket.session.isessionstore} that uses
* the {@link javax.servlet.http.httpsession} to store its attributes.
*
* @author eelco hillenius
*/
public class httpsessionstore extends abstracthttpsessionstore
/**
* construct.
*
* @param application
*            the application to construct this store for
*/
public httpsessionstore application application
super application
/**
* @see org.apache.wicket.session.isessionstore#createpagemap(java.lang.string)
*/
public ipagemap createpagemap string name
return new accessstackpagemap name
/**
* @see org.apache.wicket.session.isessionstore#getattribute(org.apache.wicket.request,
*      java.lang.string)
*/
public object getattribute request request  string name
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
if  httpsession    null
return httpsession getattribute getsessionattributeprefix webrequest    name
return null
/**
* @see org.apache.wicket.session.isessionstore#getattributenames(request)
*/
public list getattributenames request request
list list   new arraylist
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
if  httpsession    null
final enumeration names   httpsession getattributenames
final string prefix   getsessionattributeprefix webrequest
while  names hasmoreelements
final string name    string names nextelement
if  name startswith prefix
list add name substring prefix length
return list
/**
* @see org.apache.wicket.session.isessionstore#removeattribute(request,java.lang.string)
*/
public void removeattribute request request  string name
// ignore call if the session was marked invalid
if   issessionvalid
return
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
if  httpsession    null
string attributename   getsessionattributeprefix webrequest    name
irequestlogger logger   application getrequestlogger
if  logger    null
object value   httpsession getattribute attributename
if  value    null
logger objectremoved value
httpsession removeattribute attributename
/**
* @see org.apache.wicket.session.isessionstore#setattribute(request,java.lang.string,
*      java.lang.object)
*/
public void setattribute request request  string name  object value
// ignore call if the session was marked invalid
if   issessionvalid
return
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
if  httpsession    null
irequestlogger logger   application getrequestlogger
string attributename   getsessionattributeprefix webrequest    name
if  logger    null
if  httpsession getattribute attributename     null
logger objectcreated value
else
logger objectupdated value
httpsession setattribute attributename  value
/**
* gets the prefix for storing variables in the actual session (typically
* {@link httpsession} for this application instance.
*
* @param request
*            the request
*
* @return the prefix for storing variables in the actual session
*/
private string getsessionattributeprefix final webrequest request
return application getsessionattributeprefix request
/**
* @return whether the session was marked invalid during this request
*         (afterwards, we shouldn't even come here as there is no session)
*/
private boolean issessionvalid
if  session exists
session session   session get
if  session instanceof websession
return    websession session  issessioninvalidated
return true     we simply don't know  so play safe and rely on
// servlet container's code to check availability