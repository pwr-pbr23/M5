/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples debug
import java util arraylist
import java util collections
import java util list
import org apache wicket accessstackpagemap
import org apache wicket ipagemap
import org apache wicket page
import org apache wicket pageparameters
import org apache wicket accessstackpagemap access
import org apache wicket markup html basic label
import org apache wicket markup html link bookmarkablepagelink
import org apache wicket markup html link link
import org apache wicket markup html list listitem
import org apache wicket markup html list listview
import org apache wicket markup html panel panel
import org apache wicket session pagemap ipagemapentry
import org apache wicket util collections arrayliststack
import org apache wicket util lang bytes
import org apache wicket util lang objects
/**
* a wicket panel that shows interesting information about a given wicket
* pagemap.
*
* @author jonathan locke
*/
public final class pagemapview extends panel
private static final long serialversionuid   1l
/**
* constructor.
*
* @param id
*            the component id
* @param pagemap
*            page map to show
*/
public pagemapview final string id  final ipagemap pagemap
super id
// basic attributes
add new label    pagemap getname      null ?     pagemap getname
add new label        bytes bytes pagemap getsizeinbytes
// get entry accesses
// get entry accesses
final arrayliststack accessstack
if  pagemap instanceof accessstackpagemap
accessstack     accessstackpagemap pagemap  getaccessstack
else
accessstack   new arrayliststack
final list reversedaccessstack   new arraylist
reversedaccessstack addall accessstack
collections reverse reversedaccessstack
// create the table containing the list the components
add new listview    reversedaccessstack
private static final long serialversionuid   1l
/**
* populate the table with wicket elements
*/
protected void populateitem final listitem listitem
final access access    access listitem getmodelobject
ipagemapentry entry   pagemap getentry access getid
pageparameters parameters   new pageparameters
parameters put        entry getnumericid
link link   new bookmarkablepagelink    inspectorpage class  parameters
link add new label        entry getnumericid
listitem add link
listitem add new label        entry getclass   getname
long size
int versions
if  entry instanceof page
page page    page entry
page detachmodels
size   page getsizeinbytes
versions   page getversions
else
size   objects sizeof entry
versions   0
listitem add new label         accessstack size     listitem getindex
listitem add new label        access getversion
listitem add new label        versions
listitem add new label    size     1 ?         bytes bytes size