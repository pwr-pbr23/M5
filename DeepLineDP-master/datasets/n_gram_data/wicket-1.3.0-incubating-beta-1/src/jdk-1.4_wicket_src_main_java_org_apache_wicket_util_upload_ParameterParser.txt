/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util upload
import java util hashmap
import java util map
/**
* a simple parser intended to parse sequences of name/value pairs. parameter
* values are exptected to be enclosed in quotes if they contain unsafe
* characters, such as '=' characters or separators. parameter values are
* optional and can be omitted.
*
* <p>
* <code>param1 = value; param2 = "anything goes; really"; param3</code>
* </p>
*
* @author <a href="mailto:oleg@ural.ru">oleg kalnichevski</a>
*/
public class parameterparser
/**
* string to be parsed.
*/
private char chars   null
/**
* current position in the string.
*/
private int pos   0
/**
* maximum position in the string.
*/
private int len   0
/**
* start of a token.
*/
private int i1   0
/**
* end of a token.
*/
private int i2   0
/**
* whether names stored in the map should be converted to lower case.
*/
private boolean lowercasenames   false
/**
* default parameterparser constructor.
*/
public parameterparser
super
/**
* are there any characters left to parse?
*
* @return <tt>true</tt> if there are unparsed characters, <tt>false</tt>
*         otherwise.
*/
private boolean haschar
return this pos < this len
/**
* a helper method to process the parsed token. this method removes leading
* and trailing blanks as well as enclosing quotation marks, when necessary.
*
* @param quoted
*            <tt>true</tt> if quotation marks are expected,
*            <tt>false</tt> otherwise.
* @return the token
*/
private string gettoken boolean quoted
// trim leading white spaces
while   i1 < i2      character iswhitespace chars
i1
// trim trailing white spaces
while   i2 > i1      character iswhitespace chars
i2
// strip away quotation marks if necessary
if  quoted
if    i2   i1  >  2      chars
i1
i2
string result   null
if  i2 > i1
result   new string chars  i1  i2   i1
return result
/**
* tests if the given character is present in the array of characters.
*
* @param ch
*            the character to test for presense in the array of characters
* @param charray
*            the array of characters to test against
*
* @return <tt>true</tt> if the character is present in the array of
*         characters, <tt>false</tt> otherwise.
*/
private boolean isoneof char ch  final char charray
boolean result   false
for  int i   0  i < charray length  i
if  ch    charray
result   true
break
return result
/**
* parses out a token until any of the given terminators is encountered.
*
* @param terminators
*            the array of terminating characters. any of these characters
*            when encountered signify the end of the token
*
* @return the token
*/
private string parsetoken final char terminators
char ch
i1   pos
i2   pos
while  haschar
ch   chars
if  isoneof ch  terminators
break
i2
pos
return gettoken false
/**
* parses out a token until any of the given terminators is encountered
* outside the quotation marks.
*
* @param terminators
*            the array of terminating characters. any of these characters
*            when encountered outside the quotation marks signify the end
*            of the token
*
* @return the token
*/
private string parsequotedtoken final char terminators
char ch
i1   pos
i2   pos
boolean quoted   false
boolean charescaped   false
while  haschar
ch   chars
if   quoted    isoneof ch  terminators
break
if   charescaped    ch
quoted    quoted
charescaped     charescaped    ch
i2
pos
return gettoken true
/**
* returns <tt>true</tt> if parameter names are to be converted to lower
* case when name/value pairs are parsed.
*
* @return <tt>true</tt> if parameter names are to be converted to lower
*         case when name/value pairs are parsed. otherwise returns
*         <tt>false</tt>
*/
public boolean islowercasenames
return this lowercasenames
/**
* sets the flag if parameter names are to be converted to lower case when
* name/value pairs are parsed.
*
* @param b
*            <tt>true</tt> if parameter names are to be converted to
*            lower case when name/value pairs are parsed. <tt>false</tt>
*            otherwise.
*/
public void setlowercasenames boolean b
this lowercasenames   b
/**
* extracts a map of name/value pairs from the given string. names are
* expected to be unique.
*
* @param str
*            the string that contains a sequence of name/value pairs
* @param separator
*            the name/value pairs separator
*
* @return a map of name/value pairs
*/
public map parse final string str  char separator
if  str    null
return new hashmap
return parse str tochararray    separator
/**
* extracts a map of name/value pairs from the given array of characters.
* names are expected to be unique.
*
* @param chars
*            the array of characters that contains a sequence of name/value
*            pairs
* @param separator
*            the name/value pairs separator
*
* @return a map of name/value pairs
*/
public map parse final char chars  char separator
if  chars    null
return new hashmap
return parse chars  0  chars length  separator
/**
* extracts a map of name/value pairs from the given array of characters.
* names are expected to be unique.
*
* @param chars
*            the array of characters that contains a sequence of name/value
*            pairs
* @param offset -
*            the initial offset.
* @param length -
*            the length.
* @param separator
*            the name/value pairs separator
*
* @return a map of name/value pairs
*/
public map parse final char chars  int offset  int length  char separator
if  chars    null
return new hashmap
hashmap params   new hashmap
this chars   chars
this pos   offset
this len   length
string paramname   null
string paramvalue   null
while  haschar
paramname   parsetoken new char      separator
paramvalue   null
if  haschar       chars
pos       skip
paramvalue   parsequotedtoken new char   separator
if  haschar       chars    separator
pos       skip separator
if   paramname    null      paramname length   > 0
if  this lowercasenames
paramname   paramname tolowercase
params put paramname  paramvalue
return params