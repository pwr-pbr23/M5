/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util upload
import java io file
import java io ioexception
import java io inputstream
import java io outputstream
import java io unsupportedencodingexception
import org apache wicket iclusterable
/**
* <p>
* this class represents a file or form item that was received within a
* <code>multipart/form-data</code> post request.
*
* <p>
* after retrieving an instance of this class from a {@link
* org.apache.wicket.util.upload.fileupload fileupload} instance, you may either request
* all contents of the file at once using {@link #get()} or request an
* {@link java.io.inputstream inputstream} with {@link #getinputstream()} and
* process the file without attempting to load it into memory, which may come
* handy with large files.
*
* <p>
* while this interface does not extend <code>javax.activation.datasource</code>
* per se (to avoid a seldom used dependency), several of the defined methods
* are specifically defined with the same signatures as methods in that
* interface. this allows an implementation of this interface to also implement
* <code>javax.activation.datasource</code> with minimal additional work.
*
* @author <a href="mailto:rafal.krzewski@e-point.pl">rafal krzewski</a>
* @author <a href="mailto:sean@informage.net">sean legassick</a>
* @author <a href="mailto:jvanzyl@apache.org">jason van zyl</a>
* @author <a href="mailto:martinc@apache.org">martin cooper</a>
*/
public interface fileitem extends iclusterable
// ------------------------------- methods from javax.activation.datasource
/**
* returns an {@link java.io.inputstream inputstream} that can be used to
* retrieve the contents of the file.
*
* @return an {@link java.io.inputstream inputstream} that can be used to
*         retrieve the contents of the file.
*
* @exception ioexception
*                if an error occurs.
*/
inputstream getinputstream   throws ioexception
/**
* returns the content type passed by the browser or <code>null</code> if
* not defined.
*
* @return the content type passed by the browser or <code>null</code> if
*         not defined.
*/
string getcontenttype
/**
* returns the original filename in the client's filesystem, as provided by
* the browser (or other client software). in most cases, this will be the
* base file name, without path information. however, some clients, such as
* the opera browser, do include path information.
*
* @return the original filename in the client's filesystem.
*/
string getname
// ------------------------------------------------------- fileitem methods
/**
* provides a hint as to whether or not the file contents will be read from
* memory.
*
* @return <code>true</code> if the file contents will be read from
*         memory; <code>false</code> otherwise.
*/
boolean isinmemory
/**
* returns the size of the file item.
*
* @return the size of the file item, in bytes.
*/
long getsize
/**
* returns the contents of the file item as an array of bytes.
*
* @return the contents of the file item as an array of bytes.
*/
byte get
/**
* returns the contents of the file item as a string, using the specified
* encoding. this method uses {@link #get()} to retrieve the contents of the
* item.
*
* @param encoding
*            the character encoding to use.
*
* @return the contents of the item, as a string.
*
* @exception unsupportedencodingexception
*                if the requested character encoding is not available.
*/
string getstring string encoding  throws unsupportedencodingexception
/**
* returns the contents of the file item as a string, using the default
* character encoding. this method uses {@link #get()} to retrieve the
* contents of the item.
*
* @return the contents of the item, as a string.
*/
string getstring
/**
* a convenience method to write an uploaded item to disk. the client code
* is not concerned with whether or not the item is stored in memory, or on
* disk in a temporary location. they just want to write the uploaded item
* to a file.
* <p>
* this method is not guaranteed to succeed if called more than once for the
* same item. this allows a particular implementation to use, for example,
* file renaming, where possible, rather than copying all of the underlying
* data, thus gaining a significant performance benefit.
*
* @param file
*            the <code>file</code> into which the uploaded item should be
*            stored.
*
* @exception exception
*                if an error occurs.
*/
void write file file  throws exception
/**
* deletes the underlying storage for a file item, including deleting any
* associated temporary disk file. although this storage will be deleted
* automatically when the <code>fileitem</code> instance is garbage
* collected, this method can be used to ensure that this is done at an
* earlier time, thus preserving system resources.
*/
void delete
/**
* returns the name of the field in the multipart form corresponding to this
* file item.
*
* @return the name of the form field.
*/
string getfieldname
/**
* sets the field name used to reference this file item.
*
* @param name
*            the name of the form field.
*/
void setfieldname string name
/**
* determines whether or not a <code>fileitem</code> instance represents a
* simple form field.
*
* @return <code>true</code> if the instance represents a simple form
*         field; <code>false</code> if it represents an uploaded file.
*/
boolean isformfield
/**
* specifies whether or not a <code>fileitem</code> instance represents a
* simple form field.
*
* @param state
*            <code>true</code> if the instance represents a simple form
*            field; <code>false</code> if it represents an uploaded file.
*/
void setformfield boolean state
/**
* returns an {@link java.io.outputstream outputstream} that can be used for
* storing the contents of the file.
*
* @return an {@link java.io.outputstream outputstream} that can be used for
*         storing the contensts of the file.
*
* @exception ioexception
*                if an error occurs.
*/
outputstream getoutputstream   throws ioexception