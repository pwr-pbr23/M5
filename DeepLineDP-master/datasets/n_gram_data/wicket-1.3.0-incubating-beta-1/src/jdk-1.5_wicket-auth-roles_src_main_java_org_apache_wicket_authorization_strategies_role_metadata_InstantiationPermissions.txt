/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies role metadata
import java util hashmap
import java util map
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket authorization strategies role roles
/**
* an internal data structure that maps a given component class to a set of role
* strings. permissions can be granted to instantiate a given component class
* via authorize(class, roles roles) and denied via unauthorize(class, roles
* roles). all authorization can be removed for a given class with
* authorizeall(class).
*
* @author eelco hillenius
* @author jonathan locke
*/
public class instantiationpermissions implements iclusterable
private static final long serialversionuid   1l
/** holds roles objects for component classes */
private final map<class< ? extends component>  roles> rolesforcomponentclass   new hashmap<class< ? extends component>  roles>
/**
* gives the given role permission to instantiate the given class.
*
* @param componentclass
*            the component class
* @param rolestoadd
*            the roles to add
*/
public final void authorize final class< ? extends component> componentclass
final roles rolestoadd
if  componentclass    null
throw new illegalargumentexception
if  rolestoadd    null
throw new illegalargumentexception
roles roles   rolesforcomponentclass get componentclass
if  roles    null
roles   new roles
rolesforcomponentclass put componentclass  roles
roles addall rolestoadd
/**
* gives all roles permission to instantiate the given class.
*
* @param componentclass
*            the component class
*/
public final void authorizeall final class< ? extends component> componentclass
if  componentclass    null
throw new illegalargumentexception
rolesforcomponentclass remove componentclass
/**
* gets the roles that have a binding with the given component class.
*
* @param componentclass
*            the component class
* @return the roles that have a binding with the given component class, or
*         null if no entries are found
*/
public roles authorizedroles final class< ? extends component> componentclass
if  componentclass    null
throw new illegalargumentexception
return rolesforcomponentclass get componentclass
/**
* removes permission for the given role to instantiate the given class.
*
* @param componentclass
*            the class
* @param rolestoremove
*            the role to deny
*/
public final void unauthorize final class< ? extends component> componentclass
final roles rolestoremove
if  componentclass    null
throw new illegalargumentexception
if  rolestoremove    null
throw new illegalargumentexception
final roles roles   rolesforcomponentclass get componentclass
if  roles    null
roles removeall rolestoremove
// if we removed the last authorized role, we authorize the empty role
// so that removing authorization can't suddenly open something up to
// everyone.
if  roles size      0
roles add metadataroleauthorizationstrategy no_role
/**
* @return gets map with roles objects for a component classes
*/
protected final map<class< ? extends component>  roles> getrolesforcomponentclass
return rolesforcomponentclass