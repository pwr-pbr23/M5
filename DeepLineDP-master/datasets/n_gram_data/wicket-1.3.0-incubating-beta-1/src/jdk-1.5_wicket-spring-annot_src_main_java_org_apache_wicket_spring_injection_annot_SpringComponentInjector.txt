/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket spring injection annot
import java io filenotfoundexception
import javax servlet servletcontext
import org apache wicket application
import org apache wicket iclusterable
import org apache wicket metadatakey
import org apache wicket session
import org apache wicket application icomponentinstantiationlistener
import org apache wicket injection componentinjector
import org apache wicket injection web injectorholder
import org apache wicket model model
import org apache wicket protocol http webapplication
import org apache wicket spring ispringcontextlocator
import org springframework beans factory xml xmlbeandefinitionreader
import org springframework context applicationcontext
import org springframework context support genericapplicationcontext
import org springframework core io resource
import org springframework core io urlresource
import org springframework util resourceutils
import org springframework web context support webapplicationcontextutils
/**
* {@link icomponentinstantiationlistener} that injects component properties
* annotated with {@link springbean} annotations.
*
* to install in yourapplication.init() call
* <code>addcomponentinstantiationlistener(new springcomponentinjector(this));</code>
*
* non-wicket components such as {@link session}, {@link model}, and any other
* pojo can be injected by calling
* <code>injectorholder.getinjector().inject(this)</code> in their
* constructor.
*
* @author igor vaynberg (ivaynberg)
* @author <a href="mailto:jlee@antwerkz.com">justin lee</a>
*
*/
public class springcomponentinjector extends componentinjector
/**
* metadata key used to store application context holder in application's
* metadata
*/
private static metadatakey context_key   new metadatakey
applicationcontextholder class
private static final long serialversionuid   1l
/**
* constructor used when spring application context is declared in the
* spring standard way and can be located through
* {@link webapplicationcontextutils#getrequiredwebapplicationcontext(servletcontext)}
*
* @param webapp
*            wicket web application
*/
public springcomponentinjector webapplication webapp
// locate application context through spring's default location
// mechanism and pass it on to the proper constructor
this webapp  webapplicationcontextutils
getrequiredwebapplicationcontext webapp getservletcontext
/**
* constructor
*
* @param webapp
*            wicket web application
* @param ctx
*            spring's application context
*/
public springcomponentinjector webapplication webapp  applicationcontext ctx
if  webapp    null
throw new illegalargumentexception
if  ctx    null
throw new illegalargumentexception
// store context in application's metadata ...
webapp setmetadata context_key  new applicationcontextholder ctx
// ... and create and register the annotation aware injector
injectorholder
setinjector new annotspringinjector new contextlocator
/**
* this is a holder for the application context. the reason we need a holder
* is that metadata only supports storing serializable objects but
* application context is not. the holder acts as a serializable wrapper for
* the context. notice that although holder implements iclusterable it
* really is not because it has a reference to non serializable context -
* but this is ok because metadata objects in application are never
* serialized.
*
* @author ivaynberg
*
*/
private static class applicationcontextholder implements iclusterable
private static final long serialversionuid   1l
private final applicationcontext context
/**
* constructor
*
* @param context
*/
public applicationcontextholder applicationcontext context
this context   context
/**
* @return the context
*/
public applicationcontext getcontext
return context
/**
* a context locator that locates the context in application's metadata.
* this locator also keeps a transient cache of the lookup.
*
* @author ivaynberg
*
*/
private static class contextlocator implements ispringcontextlocator
private transient applicationcontext context
private static final long serialversionuid   1l
public applicationcontext getspringcontext
if  context    null
context     applicationcontextholder  application get
getmetadata context_key   getcontext
return context