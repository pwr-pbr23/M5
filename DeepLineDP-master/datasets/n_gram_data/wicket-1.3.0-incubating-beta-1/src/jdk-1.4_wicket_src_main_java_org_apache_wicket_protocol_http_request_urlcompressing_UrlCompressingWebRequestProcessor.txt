/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http request urlcompressing
import org apache wicket application
import org apache wicket component
import org apache wicket iredirectlistener
import org apache wicket irequesttarget
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket requestlistenerinterface
import org apache wicket wicketruntimeexception
import org apache wicket authorization unauthorizedactionexception
import org apache wicket markup html inewbrowserwindowlistener
import org apache wicket markup html webpage
import org apache wicket protocol http webrequestcycleprocessor
import org apache wicket protocol http request urlcompressing urlcompressor componentandinterface
import org apache wicket request irequestcodingstrategy
import org apache wicket request requestparameters
import org apache wicket request target component listener redirectpagerequesttarget
import org apache wicket util string strings
/**
* use this processor to minimize the wicket:interface urls. the component path
* and the interface name will be removed from the url and only an uid will be
* inserted into the url.
*
* to use this url compressing behaviour you must override the
* {@link application}'s newrequestcycleprocessor() method and return an
* instance of this.
*
* @author jcompagner
*
* @since 1.3
*/
public class urlcompressingwebrequestprocessor extends webrequestcycleprocessor
/**
* construct.
*/
public urlcompressingwebrequestprocessor
/**
* @see org.apache.wicket.protocol.http.webrequestcycleprocessor#newrequestcodingstrategy()
*/
protected irequestcodingstrategy newrequestcodingstrategy
return new urlcompressingwebcodingstrategy
/**
* @see org.apache.wicket.request.abstractrequestcycleprocessor#resolvelistenerinterfacetarget(org.apache.wicket.requestcycle,
*      org.apache.wicket.page, java.lang.string, java.lang.string,
*      org.apache.wicket.request.requestparameters)
*/
protected irequesttarget resolvelistenerinterfacetarget final requestcycle requestcycle
final page page  final string componentpath  string interfacename
final requestparameters requestparameters
string pagerelativecomponentpath   strings afterfirstpathcomponent componentpath
component path_separator
component component   null
if  page instanceof webpage       equals interfacename
componentandinterface cai     webpage page  geturlcompressor
getcomponentandinterfaceforuid pagerelativecomponentpath
if  cai    null
interfacename   cai getinterfacename
component   cai getcomponent
requestparameters setinterfacename interfacename
if  interfacename equals iredirectlistener interface getname
return new redirectpagerequesttarget page
else if  interfacename equals inewbrowserwindowlistener interface getname
return inewbrowserwindowlistener interface newrequesttarget page  page
inewbrowserwindowlistener interface  requestparameters
else
// get the listener interface we need to call
final requestlistenerinterface listener   requestlistenerinterface
forname interfacename
if  listener    null
throw new wicketruntimeexception
interfacename
// get component
if  component    null
if  strings isempty pagerelativecomponentpath
component   page
else
component   page get pagerelativecomponentpath
if  component    null
// still null? that's not right
throw new wicketruntimeexception
pagerelativecomponentpath       listener
page
if   component isenableallowed
throw new unauthorizedactionexception component  component enable
// ask the request listener interface object to create a request
// target
return listener newrequesttarget page  component  listener  requestparameters