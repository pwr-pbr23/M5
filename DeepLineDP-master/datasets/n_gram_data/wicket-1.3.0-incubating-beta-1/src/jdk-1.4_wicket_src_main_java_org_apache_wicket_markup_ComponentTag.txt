/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup
import java util arraylist
import java util collection
import java util collections
import java util iterator
import java util linkedlist
import java util list
import java util map
import org apache wicket response
import org apache wicket behavior ibehavior
import org apache wicket markup parser xmltag
import org apache wicket markup parser xmltag type
import org apache wicket markup parser filter htmlhandler
import org apache wicket util string appendingstringbuffer
import org apache wicket util string stringvalue
import org apache wicket util string strings
import org apache wicket util value ivaluemap
/**
* a subclass of markupelement which represents a "significant" markup tag, such
* as a component open tag. insignificant markup tags (those which are merely
* concerned with markup formatting operations and do not denote components or
* component nesting) are coalesced into instances of rawmarkup (also a subclass
* of markupelement).
*
* @author jonathan locke
*/
public class componenttag extends markupelement
/**
* standard component id attribute always available for components
* regardless of user applicationsettings for id attribute; value ==
* 'wicket'.
*/
public static final string default_wicket_namespace
/** an empty list */
private static final list empty_list   new linkedlist
/**
* assuming this is a open (or open-close) tag, 'closes' refers to the
* componenttag which closes it.
*/
protected componenttag closes
/** the underlying xml tag */
protected final xmltag xmltag
/** true if a href attribute is available and autolinking is on */
private boolean autolink   false
/** the component's id identified by wicket:id="xxx" */
private string id
/** the component's path in the markup */
private string path
/** true, if attributes have been modified or added */
private boolean modified   false
/**
* in case of inherited markup, the base and the extended markups are merged
* and the information about the tags origin is lost. in some cases like
* wicket:head and wicket:link this information however is required.
*/
private class markupclass
/**
* tags which are detected to have only an open tag, which is allowed with
* some html tags like 'br' for example
*/
private boolean hasnoclosetag   false
/** added behaviors */
// fixme these behaviors here are merely for wicket:message attributes on
// tags that are also wicket components. since this addition behavors have
// gained a significantly more sophisticated lifecycle and so managing
// behaviors attached to markup tags like this is much harder. this should
// be refactored into some interface that only has oncomponenttag method
// because a full behavior is not supported nor desired imho.
private collection behaviors
/**
* automatically create a xmltag, assign the name and the type, and
* construct a componenttag based on this xmltag.
*
* @param name
*            the name of html tag
* @param type
*            the type of tag
*/
public componenttag final string name  final xmltag type type
final xmltag tag   new xmltag
tag setname name
tag settype type
xmltag   tag
/**
* construct.
*
* @param tag
*            the underlying xml tag
*/
public componenttag final xmltag tag
super
xmltag   tag
/**
* adds a behavior to this component tag.
*
* @param behavior
*/
public final void addbehavior final ibehavior behavior
if  behavior    null
throw new illegalargumentexception
if  behaviors    null
behaviors   new linkedlist
behaviors add behavior
/**
* @return true if this tag has any behaviors added, false otherwise
*/
public final boolean hasbehaviors
return behaviors    null
/**
* @return read only iterator over added behaviors
*/
public final iterator getbehaviors
if  behaviors    null
list empty   empty_list
return empty iterator
collection locked   collections unmodifiablecollection behaviors
return locked iterator
/**
* gets whether this tag closes the provided open tag.
*
* @param open
*            the open tag
* @return true if this tag closes the given open tag
*/
public final boolean closes final markupelement open
if  open instanceof componenttag
return  closes    open     getxmltag   closes   componenttag open  getxmltag
return false
/**
* if autolink is set to true, href attributes will automatically be
* converted into wicket bookmarkable urls.
*
* @param autolink
*            enable/disable automatic href conversion
*/
public final void enableautolink final boolean autolink
this autolink   autolink
/**
* @see org.apache.wicket.markup.parser.xmltag#getattributes()
* @return the tag#s attributes
*/
public final ivaluemap getattributes
return xmltag getattributes
/**
* get the tag's component id
*
* @return the component id attribute of this tag
*/
public final string getid
return id
/**
* gets the length of the tag in characters.
*
* @return the tag's length
*/
public final int getlength
return xmltag getlength
/**
* @see org.apache.wicket.markup.parser.xmltag#getname()
* @return the tag's name
*/
public final string getname
return xmltag getname
/**
* @see org.apache.wicket.markup.parser.xmltag#getnamechanged()
* @return returns true if the name of this component tag was changed
*/
public final boolean getnamechanged
return xmltag getnamechanged
/**
* @see org.apache.wicket.markup.parser.xmltag#getnamespace()
* @return the tag's namespace
*/
public final string getnamespace
return xmltag getnamespace
/**
* if set, return the corresponding open tag (componenttag).
*
* @return the corresponding open tag
*/
public final componenttag getopentag
return closes
/**
* @see org.apache.wicket.markup.parser.xmltag#getpos()
* @return tag location (index in input string)
*/
public final int getpos
return xmltag getpos
/**
* @see org.apache.wicket.markup.parser.xmltag#getstring(string)
* @param key
*            the key
* @return the string value
*/
public final charsequence getstring string key
return xmltag getstring key
/**
* this method is not part of the wicket public api. do not call it.
* <p>
*
* @see org.apache.wicket.markup.parser.xmltag#gettype()
* @return the tag type (open, close or open_close).
*/
public final type gettype
return xmltag gettype
/**
* true if autolink is enabled and the tag contains a href attribute.
*
* @return true, if the href contained should automatically be converted
*/
public final boolean isautolinkenabled
return this autolink
/**
* @see org.apache.wicket.markup.parser.xmltag#isclose()
* @return true if this tag is a close tag
*/
public final boolean isclose
return xmltag isclose
/**
* @see org.apache.wicket.markup.parser.xmltag#isopen()
* @return true if this tag is an open tag
*/
public final boolean isopen
return xmltag isopen
/**
* @param id
*            required component id
* @return true if this tag is an open tag with the given component name
* @see org.apache.wicket.markup.parser.xmltag#isopen()
*/
public final boolean isopen string id
return xmltag isopen      this id equals id
/**
* @see org.apache.wicket.markup.parser.xmltag#isopenclose()
* @return true if this tag is an open and a close tag
*/
public final boolean isopenclose
return xmltag isopenclose
/**
* @param id
*            required component id
* @return true if this tag is an openclose tag with the given component id
* @see org.apache.wicket.markup.parser.xmltag#isopenclose()
*/
public final boolean isopenclose string id
return xmltag isopenclose      this id equals id
/**
* compare tag name including namespace
*
* @param tag
* @return true if name and namespace are equal
*/
public boolean hasequaltagname final componenttag tag
return xmltag hasequaltagname tag getxmltag
/**
* makes this tag object immutable by making the attribute map unmodifiable.
* immutable tags cannot be made mutable again. they can only be copied into
* new mutable tag objects.
*/
public final void makeimmutable
xmltag makeimmutable
/**
* gets this tag if it is already mutable, or a mutable copy of this tag if
* it is immutable.
*
* @return this tag if it is already mutable, or a mutable copy of this tag
*         if it is immutable.
*/
public componenttag mutable
if  xmltag ismutable
return this
else
final componenttag tag   new componenttag xmltag mutable
copypropertiesto tag
return tag
/**
* copies all internal properties from this tag to <code>dest</code>.
* this is basically cloning without instance creation.
*
* @param dest
*            tag whose properties will be set
*/
void copypropertiesto componenttag dest
dest id   id
dest setmarkupclass this markupclass
dest sethasnoclosetag this hasnoclosetag
dest setpath this path
if  behaviors    null
dest behaviors   new arraylist behaviors size
dest behaviors addall behaviors
/**
* @see org.apache.wicket.markup.parser.xmltag#put(string, boolean)
* @param key
*            the key
* @param value
*            the value
*/
public final void put string key  boolean value
xmltag put key  value
/**
* @see org.apache.wicket.markup.parser.xmltag#put(string, int)
* @param key
*            the key
* @param value
*            the value
*/
public final void put string key  int value
xmltag put key  value
/**
* @see org.apache.wicket.markup.parser.xmltag#put(string, string)
* @param key
*            the key
* @param value
*            the value
*/
public final void put string key  charsequence value
xmltag put key  value
/**
* @see org.apache.wicket.markup.parser.xmltag#put(string, stringvalue)
* @param key
*            the key
* @param value
*            the value
*/
public final void put string key  stringvalue value
xmltag put key  value
/**
* @see org.apache.wicket.markup.parser.xmltag#putall(map)
* @param map
*            a key/value map
*/
public final void putall final map map
xmltag putall map
/**
* @see org.apache.wicket.markup.parser.xmltag#remove(string)
* @param key
*            the key to remove
*/
public final void remove string key
xmltag remove key
/**
* gets whether this tag does not require a closing tag.
*
* @return true if this tag does not require a closing tag
*/
public final boolean requiresclosetag
if  getnamespace      null
return htmlhandler requiresclosetag getname
else
return htmlhandler requiresclosetag getnamespace         getname
/**
* set the component's id. the value is usually taken from the tag's id
* attribute, e.g. wicket:id="componentid".
*
* @param id
*            the component's id assigned to the tag.
*/
public final void setid final string id
this id   id
/**
* @see org.apache.wicket.markup.parser.xmltag#setname(string)
* @param name
*            new tag name
*/
public final void setname string name
xmltag setname name
/**
* @see org.apache.wicket.markup.parser.xmltag#setnamespace(string)
* @param namespace
*            new tag name namespace
*/
public final void setnamespace string namespace
xmltag setnamespace namespace
/**
* assuming this is a close tag, assign it's corresponding open tag.
*
* @param tag
*            the open-tag
* @throws runtimeexception
*             if 'this' is not a close tag
*/
public final void setopentag final componenttag tag
this closes   tag
getxmltag   setopentag tag getxmltag
/**
* this method is not part of the wicket public api. do not call it.
*
* @param type
*            the new type
*/
public final void settype final type type
xmltag settype type
/**
* @return a synthetic close tag for this tag
*/
public final charsequence syntheticclosetagstring
appendingstringbuffer buf   new appendingstringbuffer
buf append
if  getnamespace      null
buf append getnamespace    append
buf append getname    append
return buf
/**
* @see org.apache.wicket.markup.markupelement#tocharsequence()
*/
public charsequence tocharsequence
return xmltag tocharsequence
/**
* converts this object to a string representation.
*
* @return string version of this object
*/
public final string tostring
return tocharsequence   tostring
/**
* write the tag to the response
*
* @param response
*            the response to write to
* @param stripwicketattributes
*            if true, wicket:id are removed from output
* @param namespace
*            wicket's namespace to use
*/
public final void writeoutput final response response  final boolean stripwicketattributes
final string namespace
response write
if  gettype      xmltag close
response write
if  getnamespace      null
response write getnamespace
response write
response write getname
string namespaceprefix   null
if  stripwicketattributes    true
namespaceprefix   namespace
if  getattributes   size   > 0
final iterator iterator   getattributes   keyset   iterator
while  iterator hasnext
final string key    string iterator next
if  key    null
continue
if   namespaceprefix    null      key startswith namespaceprefix     false
response write
response write key
charsequence value   getstring key
// attributes without values are possible, e.g. 'disabled'
if  value    null
response write  "
value   strings replaceall value
response write value
response write  "
if  gettype      xmltag open_close
response write
response write
/**
* converts this object to a string representation including useful
* information for debugging
*
* @return string version of this object
*/
public final string touserdebugstring
return xmltag touserdebugstring
/**
* @return returns the underlying xml tag.
*/
final xmltag getxmltag
return xmltag
/**
* manually mark the componenttag being modified. flagging the tag being
* modified does not happen automatically.
*
* @param modified
*/
public final void setmodified final boolean modified
this modified   modified
/**
*
* @return true, if the component tag has been marked modified
*/
public final boolean ismodified
return this modified
/**
* gets the component path of wicket elements
*
* @return path
*/
public string getpath
return path
/**
* sets the component path of wicket elements
*
* @param path
*            path
*/
void setpath final string path
this path   path
/**
*
* @return true if the html tag (e.g. br) has no close tag
*/
public boolean hasnoclosetag
return hasnoclosetag
/**
* true if the html tag (e.g. br) has no close tag
*
* @param hasnoclosetag
*/
public void sethasnoclosetag boolean hasnoclosetag
this hasnoclosetag   hasnoclosetag
/**
* in case of inherited markup, the base and the extended markups are merged
* and the information about the tags origin is lost. in some cases like
* wicket:head and wicket:link this information however is required.
*
* @return wicketheaderclass
*/
public class getmarkupclass
return markupclass
/**
* set the class of wicket component which contains the wicket:head tag.
*
* @param wicketheaderclass
*            wicketheaderclass
*/
public void setmarkupclass class wicketheaderclass
this markupclass   wicketheaderclass
/**
* @see org.apache.wicket.markup.markupelement#equalto(org.apache.wicket.markup.markupelement)
*/
public boolean equalto final markupelement element
if  element instanceof componenttag
final componenttag that    componenttag element
return getxmltag   equalto that getxmltag
return false