/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import org apache wicket markup componenttag
import org apache wicket model imodel
import org apache wicket version undo change
/**
* a form button.
* <p>
* within a form, you can nest button components. note that you don't have to do
* this to let the form work (a simple &lt;input type="submit".. suffices), but
* if you want to have different kinds of submit behavior it might be a good
* idea to use buttons.
* </p>
* <p>
* the model property is used to set the &quot;value&quot; attribute. it will
* thus be the label of the button that shows up for end users. if you want the
* attribute to keep it's markup attribute value, don't provide a model, or let
* it return an empty string.
* </p>
* <p>
* when you add a wicket button to a form, and that button is clicked, by
* default the button's onsubmit method is called first, and after that the
* form's onsubmit method is called. if you want to change this (e.g. you don't
* want to call the form's onsubmit method, or you want it called before the
* button's onsubmit method), you can override form.delegatesubmit.
* </p>
* <p>
* one other option you should know of is the 'defaultformprocessing' property
* of button components. when you set this to false (default is true), all
* validation and formupdating is bypassed and the onsubmit method of that
* button is called directly, and the onsubmit method of the parent form is not
* called. a common use for this is to create a cancel button.
* </p>
*
* @author jonathan locke
* @author eelco hillenius
*/
public class button extends formcomponent implements iformsubmittingcomponent
private static final long serialversionuid   1l
/**
* if false, all standard processing like validating and model updating is
* skipped.
*/
private boolean defaultformprocessing   true
/**
* constructor without a model. buttons without models leave the markup
* attribute &quot;value&quot;. provide a model if you want to set the
* button's label dynamically.
*
* @see org.apache.wicket.component#component(string)
*/
public button string id
super id
setversioned true
/**
* constructor taking an model for rendering the 'label' of the button (the
* value attribute of the input/button tag). use a
* {@link org.apache.wicket.model.stringresourcemodel} for a localized value.
*
* @param id
*            component id
* @param model
*            the model property is used to set the &quot;value&quot;
*            attribute. it will thus be the label of the button that shows
*            up for end users. if you want the attribute to keep it's
*            markup attribute value, don't provide a model, or let it
*            return an empty string.
*/
public button final string id  final imodel model
super id  model
setversioned true
/**
* override of the default initmodel behaviour. this component <strong>will
* not</strong> use any compound model a parent, but only a model that is
* explicitly set.
*
* @see org.apache.wicket.component#initmodel()
*/
protected imodel initmodel
return null
/**
* gets the defaultformprocessing property. when false (default is true),
* all validation and formupdating is bypassed and the onsubmit method of
* that button is called directly, and the onsubmit method of the parent
* form is not called. a common use for this is to create a cancel button.
*
* @return defaultformprocessing
*/
public final boolean getdefaultformprocessing
return defaultformprocessing
/**
* sets the defaultformprocessing property. when false (default is true),
* all validation and formupdating is bypassed and the onsubmit method of
* that button is called directly, and the onsubmit method of the parent
* form is not called. a common use for this is to create a cancel button.
*
* @param defaultformprocessing
*            defaultformprocessing
* @return this
*/
public final button setdefaultformprocessing boolean defaultformprocessing
if  this defaultformprocessing    defaultformprocessing
addstatechange new change
private static final long serialversionuid   1l
boolean formervalue   button this defaultformprocessing
public void undo
button this defaultformprocessing   formervalue
public string tostring
return     getpath
formervalue
this defaultformprocessing   defaultformprocessing
return this
/**
* this method does nothing, as any model of a button is only used to
* display the button's label (by setting it's markup attribute
* &quot;value&quot;).
*
* @see org.apache.wicket.markup.html.form.formcomponent#updatemodel()
*/
public void updatemodel
/**
* gets any script that should rendered as the &quot;onclick&quot; attribute
* of the button. returns null by default, override this method to provide
* any script.
*
* @return any onclick javascript that should be used, returns null by
*         default
*/
protected string getonclickscript
return null
/**
* processes the component tag.
*
* @param tag
*            tag to modify
* @see org.apache.wicket.component#oncomponenttag(componenttag)
*/
protected void oncomponenttag final componenttag tag
// default handling for component tag
super oncomponenttag tag
try
string value   getmodelobjectasstring
if  value    null       equals value
tag put    value
catch  exception e
// ignore.
// if the subclass specified javascript, use that
final string onclickjavascript   getonclickscript
if  onclickjavascript    null
tag put    onclickjavascript
/**
* override this method to provide special submit handling in a multi-button
* form. it is called whenever the user clicks this particular button.
*/
public void onsubmit