/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions ajax markup html autocomplete
import java util iterator
import org apache wicket application
import org apache wicket irequesttarget
import org apache wicket requestcycle
import org apache wicket protocol http webresponse
/**
* this behavior builds on top of {@link abstractautocompletebehavior} by
* introducing the concept of a {@link iautocompleterenderer} to make response
* writing easier.
*
* @see iautocompleterenderer
*
* @since 1.2
*
* @author igor vaynberg (ivaynberg)
* @author janne hietam&auml;ki (jannehietamaki)
*/
public abstract class autocompletebehavior extends abstractautocompletebehavior
private static final long serialversionuid   1l
private final iautocompleterenderer renderer
/**
* constructor
*
* @param renderer
*            renderer that will be used to generate output
*/
public autocompletebehavior iautocompleterenderer renderer
if  renderer    null
throw new illegalargumentexception
this renderer   renderer
protected final void onrequest final string val  requestcycle requestcycle
irequesttarget target   new irequesttarget
public void respond requestcycle requestcycle
webresponse r    webresponse requestcycle getresponse
// determine encoding
final string encoding   application get   getrequestcyclesettings   getresponserequestencoding
r setcharacterencoding encoding
r setcontenttype     encoding
// make sure it is not cached by a
r setheader
r setheader
r setheader
iterator comps   getchoices val
renderer renderheader r
while  comps hasnext
final object comp   comps next
renderer render comp  r  val
renderer renderfooter r
public void detach requestcycle requestcycle
public object getlock requestcycle requestcycle
return requestcycle getsession
requestcycle setrequesttarget target
/**
* callback method that should return an iterator over all possiblet
* choice objects. these objects will be passed to the renderer to generate
* output. usually it is enough to return an iterator over strings.
*
* @param input
*            current input
* @return iterator ver all possible choice objects
*/
protected abstract iterator getchoices string input