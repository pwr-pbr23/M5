/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util upload
import java io bufferedinputstream
import java io bufferedoutputstream
import java io bytearrayinputstream
import java io file
import java io fileinputstream
import java io fileoutputstream
import java io ioexception
import java io inputstream
import java io outputstream
import java io unsupportedencodingexception
import java util map
import org apache wicket wicketruntimeexception
import org apache wicket util file filecleaner
import org apache wicket util io deferredfileoutputstream
/**
* <p>
* the default implementation of the
* {@link org.apache.wicket.util.upload.fileitem fileitem} interface.
*
* <p>
* after retrieving an instance of this class, you may either request all
* contents of file at once using {@link #get()} or request an
* {@link java.io.inputstream inputstream} with {@link #getinputstream()} and
* process the file without attempting to load it into memory, which may come
* handy with large files.
*
* @author <a href="mailto:rafal.krzewski@e-point.pl">rafal krzewski</a>
* @author <a href="mailto:sean@informage.net">sean legassick</a>
* @author <a href="mailto:jvanzyl@apache.org">jason van zyl</a>
* @author <a href="mailto:jmcnally@apache.org">john mcnally</a>
* @author <a href="mailto:martinc@apache.org">martin cooper</a>
* @author sean c. sullivan
*/
public class diskfileitem implements fileitem
private static final long serialversionuid   1l
// ----------------------------------------------------- manifest constants
/**
* default content charset to be used when no explicit charset parameter is
* provided by the sender. media subtypes of the "text" type are defined to
* have a default charset value of "iso-8859-1" when received via http.
*/
public static final string default_charset
/**
* size of buffer to use when writing an item to disk.
*/
private static final int write_buffer_size   2048
// ----------------------------------------------------------- data members
/**
* counter used in unique identifier generation.
*/
private static int counter   0
/**
* the name of the form field as provided by the browser.
*/
private string fieldname
/**
* the content type passed by the browser, or <code>null</code> if not
* defined.
*/
private string contenttype
/**
* whether or not this item is a simple form field.
*/
private boolean isformfield
/**
* the original filename in the user's filesystem.
*/
private string filename
/**
* the threshold above which uploads will be stored on disk.
*/
private int sizethreshold
/**
* the directory in which uploaded files will be stored, if stored on disk.
*/
private file repository
/**
* cached contents of the file.
*/
private byte cachedcontent
/**
* output stream for this item.
*/
private deferredfileoutputstream dfos
// ----------------------------------------------------------- constructors
/**
* constructs a new <code>diskfileitem</code> instance.
*
* @param fieldname
*            the name of the form field.
* @param contenttype
*            the content type passed by the browser or <code>null</code>
*            if not specified.
* @param isformfield
*            whether or not this item is a plain form field, as opposed to
*            a file upload.
* @param filename
*            the original filename in the user's filesystem, or
*            <code>null</code> if not specified.
* @param sizethreshold
*            the threshold, in bytes, below which items will be retained in
*            memory and above which they will be stored as a file.
* @param repository
*            the data repository, which is the directory in which files
*            will be created, should the item size exceed the threshold.
*/
public diskfileitem string fieldname  string contenttype  boolean isformfield  string filename
int sizethreshold  file repository
this fieldname   fieldname
this contenttype   contenttype
this isformfield   isformfield
this filename   filename
this sizethreshold   sizethreshold
this repository   repository
// ------------------------------- methods from javax.activation.datasource
/**
* returns an {@link java.io.inputstream inputstream} that can be used to
* retrieve the contents of the file.
*
* @return an {@link java.io.inputstream inputstream} that can be used to
*         retrieve the contents of the file.
*
* @exception ioexception
*                if an error occurs.
*/
public inputstream getinputstream   throws ioexception
if   dfos isinmemory
return new fileinputstream dfos getfile
if  cachedcontent    null
cachedcontent   dfos getdata
return new bytearrayinputstream cachedcontent
/**
* returns the content type passed by the agent or <code>null</code> if
* not defined.
*
* @return the content type passed by the agent or <code>null</code> if
*         not defined.
*/
public string getcontenttype
return contenttype
/**
* returns the content charset passed by the agent or <code>null</code> if
* not defined.
*
* @return the content charset passed by the agent or <code>null</code> if
*         not defined.
*/
public string getcharset
parameterparser parser   new parameterparser
parser setlowercasenames true
// parameter parser can handle null input
map params   parser parse getcontenttype
return  string params get
/**
* returns the original filename in the client's filesystem.
*
* @return the original filename in the client's filesystem.
*/
public string getname
return filename
// ------------------------------------------------------- fileitem methods
/**
* provides a hint as to whether or not the file contents will be read from
* memory.
*
* @return <code>true</code> if the file contents will be read from
*         memory; <code>false</code> otherwise.
*/
public boolean isinmemory
return  dfos isinmemory
/**
* returns the size of the file.
*
* @return the size of the file, in bytes.
*/
public long getsize
if  cachedcontent    null
return cachedcontent length
else if  dfos isinmemory
return dfos getdata   length
else
return dfos getfile   length
/**
* returns the contents of the file as an array of bytes. if the contents of
* the file were not yet cached in memory, they will be loaded from the disk
* storage and cached.
*
* @return the contents of the file as an array of bytes.
*/
public byte get
if  dfos isinmemory
if  cachedcontent    null
cachedcontent   dfos getdata
return cachedcontent
byte filedata   new byte
fileinputstream fis   null
try
fis   new fileinputstream dfos getfile
fis read filedata
catch  ioexception e
filedata   null
finally
if  fis    null
try
fis close
catch  ioexception e
// ignore
return filedata
/**
* returns the contents of the file as a string, using the specified
* encoding. this method uses {@link #get()} to retrieve the contents of the
* file.
*
* @param charset
*            the charset to use.
*
* @return the contents of the file, as a string.
*
* @exception unsupportedencodingexception
*                if the requested character encoding is not available.
*/
public string getstring final string charset  throws unsupportedencodingexception
return new string get    charset
/**
* returns the contents of the file as a string, using the default character
* encoding. this method uses {@link #get()} to retrieve the contents of the
* file.
*
* @return the contents of the file, as a string.
*
* @todo consider making this method throw unsupportedencodingexception.
*/
public string getstring
byte rawdata   get
string charset   getcharset
if  charset    null
charset   default_charset
try
return new string rawdata  charset
catch  unsupportedencodingexception e
return new string rawdata
/**
* a convenience method to write an uploaded item to disk. the client code
* is not concerned with whether or not the item is stored in memory, or on
* disk in a temporary location. they just want to write the uploaded item
* to a file.
* <p>
* this implementation first attempts to rename the uploaded item to the
* specified destination file, if the item was originally written to disk.
* otherwise, the data will be copied to the specified file.
* <p>
* this method is only guaranteed to work <em>once</em>, the first time
* it is invoked for a particular item. this is because, in the event that
* the method renames a temporary file, that file will no longer be
* available to copy or rename again at a later time.
*
* @param file
*            the <code>file</code> into which the uploaded item should be
*            stored.
*
* @exception exception
*                if an error occurs.
*/
public void write file file  throws exception
if  isinmemory
fileoutputstream fout   null
try
fout   new fileoutputstream file
fout write get
finally
if  fout    null
fout close
else
file outputfile   getstorelocation
if  outputfile    null
/*
* the uploaded file is being stored on disk in a temporary
* location so move it to the desired file.
*/
if   outputfile renameto file
bufferedinputstream in   null
bufferedoutputstream out   null
try
in   new bufferedinputstream new fileinputstream outputfile
out   new bufferedoutputstream new fileoutputstream file
byte bytes   new byte
int s   0
while   s   in read bytes       1
out write bytes  0  s
finally
if  in    null
try
in close
catch  ioexception e
// ignore
if  out    null
try
out close
catch  ioexception e
// ignore
else
/*
* for whatever reason we cannot write the file to disk.
*/
throw new fileuploadexception
/**
* deletes the underlying storage for a file item, including deleting any
* associated temporary disk file. although this storage will be deleted
* automatically when the <code>fileitem</code> instance is garbage
* collected, this method can be used to ensure that this is done at an
* earlier time, thus preserving system resources.
*/
public void delete
cachedcontent   null
file outputfile   getstorelocation
if  outputfile    null    outputfile exists
outputfile delete
/**
* returns the name of the field in the multipart form corresponding to this
* file item.
*
* @return the name of the form field.
*
* @see #setfieldname(java.lang.string)
*
*/
public string getfieldname
return fieldname
/**
* sets the field name used to reference this file item.
*
* @param fieldname
*            the name of the form field.
*
* @see #getfieldname()
*
*/
public void setfieldname string fieldname
this fieldname   fieldname
/**
* determines whether or not a <code>fileitem</code> instance represents a
* simple form field.
*
* @return <code>true</code> if the instance represents a simple form
*         field; <code>false</code> if it represents an uploaded file.
*
* @see #setformfield(boolean)
*
*/
public boolean isformfield
return isformfield
/**
* specifies whether or not a <code>fileitem</code> instance represents a
* simple form field.
*
* @param state
*            <code>true</code> if the instance represents a simple form
*            field; <code>false</code> if it represents an uploaded file.
*
* @see #isformfield()
*
*/
public void setformfield boolean state
isformfield   state
/**
* returns an {@link java.io.outputstream outputstream} that can be used for
* storing the contents of the file.
*
* @return an {@link java.io.outputstream outputstream} that can be used for
*         storing the contensts of the file.
*
* @exception ioexception
*                if an error occurs.
*/
public outputstream getoutputstream   throws ioexception
if  dfos    null
file outputfile   gettempfile
dfos   new deferredfileoutputstream sizethreshold  outputfile
return dfos
// --------------------------------------------------------- public methods
/**
* returns the {@link java.io.file} object for the <code>fileitem</code>'s
* data's temporary location on the disk. note that for
* <code>fileitem</code>s that have their data stored in memory, this
* method will return <code>null</code>. when handling large files, you
* can use {@link java.io.file#renameto(java.io.file)} to move the file to
* new location without copying the data, if the source and destination
* locations reside within the same logical volume.
*
* @return the data file, or <code>null</code> if the data is stored in
*         memory.
*/
public file getstorelocation
return dfos getfile
// ------------------------------------------------------ protected methods
/**
* removes the file contents from the temporary storage.
*/
protected void finalize
file outputfile   dfos getfile
if  outputfile    null    outputfile exists
outputfile delete
/**
* creates and returns a {@link java.io.file file} representing a uniquely
* named temporary file in the configured repository path. the lifetime of
* the file is tied to the lifetime of the <code>fileitem</code> instance;
* the file will be deleted when the instance is garbage collected.
*
* @return the {@link java.io.file file} to be used for temporary storage.
*/
protected file gettempfile
file tempdir   repository
if  tempdir    null
string systemtmp   null
try
systemtmp   system getproperty
catch  securityexception e
throw new wicketruntimeexception
tempdir   new file systemtmp
string filename       getuniqueid
file f   new file tempdir  filename
filecleaner track f  this
return f
// -------------------------------------------------------- private methods
/**
* returns an identifier that is unique within the class loader used to load
* this class, but does not have random-like apearance.
*
* @return a string with the non-random looking instance identifier.
*/
private static string getuniqueid
int current
synchronized  diskfileitem class
current   counter
string id   integer tostring current
// if you manage to get more than 100 million of ids, you'll
// start getting ids longer than 8 characters.
if  current < 100000000
id        id  substring id length
return id
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     this getname
string valueof this getstorelocation          this getsize
isformfield         this getfieldname