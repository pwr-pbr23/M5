/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket validation validator
import java util map
import org apache wicket validation ivalidatable
/**
* fixme 2.0: ivaynberg: look over javadoc
*
*
* a validator for numbers. see the static factory methods to make range/minimum
* or maximum validators for doubles or longs
*
* @author jonathan locke
* @author johan compagner
* @author igor vaynberg(ivaynberg)
*/
public abstract class numbervalidator extends abstractvalidator
/**
* a validatior for testing if it is a positive number value
*/
public static final numbervalidator positive   minimum 0
/**
* a validatior for testing if it is a positive number value
*/
public static final numbervalidator negative   maximum 0
/**
* gets a integer range validator to check if a number is between the
* mininum and maximum value.
*
* if that is not the case then an error message will be generated with the
* key "numbervalidator.range" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimal value</li>
* <li>${maximum}: the maximum value</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum value.
* @param maximum
*            the maximum value.
*
* @return the numbervalidator
*/
public static numbervalidator range long minimum  long maximum
return new rangevalidator minimum  maximum
/**
* gets a integer minimum validator to check if a integer value is greater
* then the given minimum value.
*
* if that is not the case then an error message will be generated with the
* key "numbervalidator.minimum" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimal value</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum value.
*
* @return the numbervalidator
*/
public static numbervalidator minimum long minimum
return new minimumvalidator minimum
/**
* gets a integer range validator to check if an integer value is smaller
* then the given maximum value.
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.maximum" and the messages keys that can be used are:
* <ul>
* <li>${maximum}: the maximum value</li>
* <li>${length}: the length of the user input</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param maximum
*            the maximum value.
*
* @return the numbervalidator
*/
public static numbervalidator maximum long maximum
return new maximumvalidator maximum
/**
* gets a double range validator to check if a number is between the mininum
* and maximum value.
*
* if that is not the case then an error message will be generated with the
* key "numbervalidator.range" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimal value</li>
* <li>${maximum}: the maximum value</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum value.
* @param maximum
*            the maximum value.
*
* @return the numbervalidator
*/
public static numbervalidator range double minimum  double maximum
return new doublerangevalidator minimum  maximum
/**
* gets a double minimum validator to check if a integer value is greater
* then the given minimum value.
*
* if that is not the case then an error message will be generated with the
* key "numbervalidator.minimum" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimal value</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum value.
*
* @return the numbervalidator
*/
public static numbervalidator minimum double minimum
return new doubleminimumvalidator minimum
/**
* gets a double range validator to check if an integer value is smaller
* then the given maximum value.
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.maximum" and the messages keys that can be used are:
* <ul>
* <li>${maximum}: the maximum value</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param maximum
*            the maximum value.
*
* @return the numbervalidator
*/
public static numbervalidator maximum double maximum
return new doublemaximumvalidator maximum
/**
* validator to check the number is within the specified range
*/
public static class rangevalidator extends numbervalidator
private static final long serialversionuid   1l
private final long minimum
private final long maximum
/**
* construct.
*
* @param minimum
* @param maximum
*/
public rangevalidator long minimum  long maximum
this minimum   minimum
this maximum   maximum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new long minimum
map put    new long maximum
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
number value    number validatable getvalue
if  value longvalue   < minimum    value longvalue   > maximum
error validatable
/**
* validator to check the number meets the minimum requirement
*/
public static class minimumvalidator extends numbervalidator
private static final long serialversionuid   1l
private final long minimum
/**
* construct.
*
* @param minimum
*/
public minimumvalidator long minimum
this minimum   minimum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new long minimum
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    number validatable getvalue    longvalue   < minimum
error validatable
/**
* validator to check the number meets the maximum requirement
*/
public static class maximumvalidator extends numbervalidator
private static final long serialversionuid   1l
private final long maximum
public maximumvalidator long maximum
this maximum   maximum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new long maximum
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    number validatable getvalue    longvalue   > maximum
error validatable
/**
* validator to check the double is within the specified range
*/
public static class doublerangevalidator extends numbervalidator
private static final long serialversionuid   1l
private final double minimum
private final double maximum
/**
* construct.
*
* @param minimum
* @param maximum
*/
public doublerangevalidator double minimum  double maximum
this minimum   minimum
this maximum   maximum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new double minimum
map put    new double maximum
return map
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
number value    number validatable getvalue
if  value doublevalue   < minimum    value doublevalue   > maximum
error validatable
/**
* validator to check the double meets the minimum requirement
*/
public static class doubleminimumvalidator extends numbervalidator
private static final long serialversionuid   1l
private final double minimum
/**
* construct.
* @param minimum
*/
public doubleminimumvalidator double minimum
this minimum   minimum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new double minimum
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    number validatable getvalue    doublevalue   < minimum
error validatable
/**
* validator to check the double meets a maximum requirement
*/
public static class doublemaximumvalidator extends numbervalidator
private static final long serialversionuid   1l
private final double maximum
/**
* construct.
* @param maximum
*/
public doublemaximumvalidator double maximum
this maximum   maximum
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new double maximum
return map
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    number validatable getvalue    doublevalue   > maximum
error validatable