/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io ioexception
import java io notserializableexception
import java io objectinputstream
import java io objectoutputstream
import java io objectstreamclass
import java io serializable
import java lang reflect array
import java lang reflect constructor
import java lang reflect field
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java lang reflect proxy
import java security accesscontroller
import java util arraylist
import java util hashmap
import java util list
import java util map
import sun misc unsafe
import sun reflect reflectionfactory
/**
* todo doc me!
*
* @author jcompagner
*/
public final class classstreamhandler
private static unsafe unsafe
static
try
class classes   objectstreamclass class getdeclaredclasses
for  int i   0  i < classes length  i
if  classes getname   equals
field unsafefield   classes getdeclaredfield
unsafefield setaccessible true
unsafe    unsafe unsafefield get null
break
catch  throwable e
// e.printstacktrace()
private static final reflectionfactory reflfactory    reflectionfactory accesscontroller
doprivileged new reflectionfactory getreflectionfactoryaction
private static map handlesclasses   new hashmap
private static short classcounter   0
/**
*
*/
public static final byte handle   1
/**
*
*/
public static final byte null   0
/**
*
*/
public static final byte class_def   2
/**
*
*/
public static final byte array   3
/**
*
*/
public static final byte primitive_array   4
/**
*
*/
public static final int class   5
static classstreamhandler lookup class cls  throws notserializableexception
classstreamhandler classhandler    classstreamhandler handlesclasses get cls getname
if  classhandler    null
classhandler   new classstreamhandler cls
handlesclasses put cls getname    classhandler
handlesclasses put new short classhandler getclassid     classhandler
return classhandler
static classstreamhandler lookup short s
classstreamhandler classhandler    classstreamhandler handlesclasses get new short s
if  classhandler    null
throw new runtimeexception     s
return classhandler
/**
*
*/
private final class clz
private final list fields
private final short classid
private final constructor cons
private final method writereplacemethod
private final method readresolvemethod
private final list writeobjectmethods
private final list readobjectmethods
private final primitivearray primitivearray
private boolean isproxy
/**
* construct.
*
* @param cls
* @param wicketobjectoutputstream
*            todo
* @throws wicketserializeableexception
*/
private classstreamhandler class cls  throws wicketserializeableexception
this classid   classcounter
this clz   cls
if  cls isprimitive
fields   null
cons   null
writeobjectmethods   null
readobjectmethods   null
writereplacemethod   null
readresolvemethod   null
if  clz    boolean class
primitivearray   new booleanprimitivearray
else if  clz    byte class
primitivearray   new byteprimitivearray
else if  clz    short class
primitivearray   new shortprimitivearray
else if  clz    char class
primitivearray   new charprimitivearray
else if  clz    int class
primitivearray   new intprimitivearray
else if  clz    long class
primitivearray   new longprimitivearray
else if  clz    float class
primitivearray   new floatprimitivearray
else if  clz    double class
primitivearray   new doubleprimitivearray
else
throw new runtimeexception     cls
else if  cls isinterface
fields   null
cons   null
writeobjectmethods   null
readobjectmethods   null
writereplacemethod   null
readresolvemethod   null
primitivearray   null
isproxy   false
else if  proxy isproxyclass clz
isproxy   true
fields   null
cons   null
writeobjectmethods   null
writereplacemethod   null
readresolvemethod   null
readobjectmethods   null
primitivearray   null
else
fields   new arraylist
primitivearray   null
writeobjectmethods   new arraylist 2
readobjectmethods   new arraylist 2
isproxy   false
writereplacemethod   getinheritablemethod  clz     null  object class
readresolvemethod   getinheritablemethod clz     null  object class
if  readresolvemethod    null
cons   getserializableconstructor clz
if  cons    null
throw new wicketserializeableexception     cls
else
cons   null
class parent   cls
while parent    object class
method method   getprivatemethod parent     new class   objectoutputstream class    void type
if  method    null  writeobjectmethods add method
method   getprivatemethod parent     new class   objectinputstream class    void type
if  method    null  readobjectmethods add method
parent   parent getsuperclass
if  writereplacemethod    null
fillfields cls
/**
* @return
*/
public class getstreamclass
return clz
/**
* @return
*/
public short getclassid
return classid
/**
* @return
* @throws invocationtargetexception
* @throws illegalaccessexception
* @throws instantiationexception
* @throws illegalargumentexception
*/
public object createobject   throws illegalargumentexception  instantiationexception
illegalaccessexception  invocationtargetexception
return cons newinstance null
/**
* @param cls
*/
private void fillfields class cls
if  cls    null
return
field fields   cls getdeclaredfields
for  int i   0  i < fields length  i
field field   fields
field setaccessible true
if   modifier isstatic field getmodifiers
modifier istransient field getmodifiers
fieldandindex fai   null
class clz   field gettype
long offset   unsafe objectfieldoffset field
if  clz    boolean class
fai   new booleanfieldandindex field
else if  clz    byte class
fai   new bytefieldandindex field
else if  clz    short class
fai   new shortfieldandindex field
else if  clz    char class
fai   new charfieldandindex field
else if  clz    int class
fai   new intfieldandindex field
else if  clz    long class
fai   new longfieldandindex field
else if  clz    float class
fai   new floatfieldandindex field
else if  clz    double class
fai   new doublefieldandindex field
else
fai   new objectfieldandindex field
this fields add fai
cls   cls getsuperclass
if  cls    object class
fillfields cls
return
/**
* @param woos
* @param obj
* @param out
* @throws wicketserializeableexception
*/
public void writefields wicketobjectoutputstream woos  object obj  throws wicketserializeableexception
fieldandindex fai   null
try
for  int i   0  fields    null    i < fields size    i
fai    fieldandindex fields get i
fai writefield obj  woos
catch  wicketserializeableexception wse
wse addtrace fai field getname
throw wse
catch  exception ex
string field   fai    null    fai field    null?     fai field getname
string msg       field       obj getclass
throw new wicketserializeableexception msg  ex
/**
* @param wois
* @throws wicketserializeableexception
*/
public void readfields wicketobjectinputstream wois  object object   throws wicketserializeableexception
fieldandindex fai   null
try
for  int i   0  i < fields size    i
fai    fieldandindex fields get i
fai readfield object  wois
catch  wicketserializeableexception wse
wse addtrace fai field getname
throw wse
catch  exception ex
throw new wicketserializeableexception     fai field getname         object getclass   ex
public void writearray object obj  wicketobjectoutputstream wois  throws ioexception
primitivearray writearray obj wois
public object readarray wicketobjectinputstream wois  throws ioexception
return primitivearray readarray wois
/**
* @param woos
* @param obj
* @return
* @throws invocationtargetexception
* @throws illegalaccessexception
* @throws illegalargumentexception
*/
public boolean invokewritemethod wicketobjectoutputstream woos  object obj
if   writeobjectmethods    null     writeobjectmethods size   > 0
for  int i   writeobjectmethods size      i >  0
method method    method writeobjectmethods get i
try
method invoke obj  new object   woos
catch  illegalargumentexception ex
throw new runtimeexception ex
catch  illegalaccessexception ex
throw new runtimeexception ex
catch  invocationtargetexception ex
throw new runtimeexception ex
return true
return false
/**
* @param wois
* @return
*/
public boolean invokereadmethod wicketobjectinputstream wois  object obj
if   readobjectmethods    null     readobjectmethods size   > 0
for  int i   readobjectmethods size      i >  0
method method    method readobjectmethods get i
try
method invoke obj  new object   wois
catch  illegalargumentexception ex
throw new runtimeexception ex
catch  illegalaccessexception ex
throw new runtimeexception ex
catch  invocationtargetexception ex
throw new runtimeexception ex
return true
return false
private static constructor getserializableconstructor class cl
class initcl   cl
while  serializable class isassignablefrom initcl
if   initcl   initcl getsuperclass       null
return null
try
constructor cons   initcl getdeclaredconstructor  class null
int mods   cons getmodifiers
if   mods   modifier private     0
mods    modifier public   modifier protected      0     packageequals cl
initcl
return null
cons   reflfactory newconstructorforserialization cl  cons
cons setaccessible true
return cons
catch  nosuchmethodexception ex
return null
/**
* returns non-static private method with given signature defined by given
* class, or null if none found. access checks are disabled on the returned
* method (if any).
*/
private static method getprivatemethod class cl  string name  class argtypes  class returntype
try
method meth   cl getdeclaredmethod name  argtypes
meth setaccessible true
int mods   meth getmodifiers
return   meth getreturntype      returntype       mods   modifier static     0       mods   modifier private     0
? meth

catch  nosuchmethodexception ex
return null
/**
* returns non-static, non-abstract method with given signature provided it
* is defined by or accessible (via inheritance) by the given class, or
* null if no match found.  access checks are disabled on the returned
* method (if any).
*/
private static method getinheritablemethod class cl  string name
class argtypes
class returntype
method meth   null
class defcl   cl
while  defcl    null
try
meth   defcl getdeclaredmethod name  argtypes
break
catch  nosuchmethodexception ex
defcl   defcl getsuperclass
if   meth    null      meth getreturntype      returntype
return null
meth setaccessible true
int mods   meth getmodifiers
if   mods    modifier static   modifier abstract      0
return null
else if   mods    modifier public   modifier protected      0
return meth
else if   mods   modifier private     0
return  cl    defcl  ? meth   null
else
return packageequals cl  defcl  ? meth   null
private static boolean packageequals class cl1  class cl2
return  cl1 getclassloader      cl2 getclassloader      getpackagename cl1  equals
getpackagename cl2
/**
* returns package name of given class.
*/
private static string getpackagename class cl
string s   cl getname
int i   s lastindexof
if  i >  0
s   s substring i   2
i   s lastindexof
return  i >  0  ? s substring 0  i
private abstract class fieldandindex
final field field
final long index
fieldandindex field field
this field   field
this index   unsafe objectfieldoffset field
public abstract void writefield object object  wicketobjectoutputstream dos   throws ioexception
public abstract void readfield object object  wicketobjectinputstream dos   throws ioexception  classnotfoundexception
private final class booleanfieldandindex extends fieldandindex
booleanfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writeboolean unsafe getboolean object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putboolean object  index  dos readboolean
private final class bytefieldandindex extends fieldandindex
bytefieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writebyte unsafe getbyte object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putbyte object  index  dos readbyte
private final class shortfieldandindex extends fieldandindex
shortfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writeshort unsafe getshort object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putshort object  index  dos readshort
private final class charfieldandindex extends fieldandindex
charfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writechar unsafe getchar object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putchar object  index  dos readchar
private final class intfieldandindex extends fieldandindex
intfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writeint unsafe getint object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putint object  index  dos readint
private final class longfieldandindex extends fieldandindex
longfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writelong unsafe getlong object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putlong object  index  dos readlong
private final class floatfieldandindex extends fieldandindex
floatfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writefloat unsafe getfloat object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putfloat object  index  dos readfloat
private final class doublefieldandindex extends fieldandindex
doublefieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writedouble unsafe getdouble object  index
/**
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception
unsafe putdouble object  index  dos readdouble
private final class objectfieldandindex extends fieldandindex
objectfieldandindex field field
super field
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#writefield(java.lang.object)
*/
public void writefield object object  wicketobjectoutputstream dos  throws ioexception
dos writeobject unsafe getobject object  index
/**
* @throws classnotfoundexception
* @see org.apache.wicket.util.io.classstreamhandler.fieldandindex#readfield(java.lang.object, java.io.wicketobjectinputstream)
*/
public void readfield object object  wicketobjectinputstream dos  throws ioexception  classnotfoundexception
unsafe putobject object  index  dos readobject
private abstract class primitivearray
public abstract void writearray object object  wicketobjectoutputstream dos   throws ioexception
public abstract object readarray wicketobjectinputstream dos   throws ioexception
private final class booleanprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writeboolean array getboolean object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setboolean array  i  dos readboolean
return array
private final class byteprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writebyte array getbyte object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setbyte array  i  dos readbyte
return array
private final class shortprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writeshort array getshort object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setshort array  i  dos readshort
return array
private final class charprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writechar array getchar object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setchar array  i  dos readchar
return array
private final class intprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writeint array getint object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setint array  i  dos readint
return array
private final class longprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writelong array getlong object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setlong array  i  dos readlong
return array
private final class floatprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writefloat array getfloat object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setfloat array  i  dos readfloat
return array
private final class doubleprimitivearray extends primitivearray
/**
* @throws ioexception
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#writearray(java.lang.object)
*/
public void writearray object object  wicketobjectoutputstream dos  throws ioexception
int length   array getlength object
dos writeint length
for  int i   0  i < length  i
dos writedouble array getdouble object  i
/**
* @see org.apache.wicket.util.io.classstreamhandler.primitivearray#readarray(java.lang.object, java.io.wicketobjectinputstream)
*/
public object readarray wicketobjectinputstream dos  throws ioexception
int length   dos readint
object array   array newinstance getstreamclass    length
for  int i   0  i < length  i
array setdouble array  i  dos readdouble
return array
/**
* @return
* @throws notserializableexception
*/
public object writereplace object o  throws notserializableexception
if  writereplacemethod    null
try
return writereplacemethod invoke o  null
catch  exception ex
throw new notserializableexception ex getmessage
return null