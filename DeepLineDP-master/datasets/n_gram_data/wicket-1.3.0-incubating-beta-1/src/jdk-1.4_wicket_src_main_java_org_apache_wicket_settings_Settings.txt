/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket settings
import java util arraylist
import java util collections
import java util hashmap
import java util list
import java util map
import org apache wicket application
import org apache wicket component
import org apache wicket ipagefactory
import org apache wicket iresourcefactory
import org apache wicket iresponsefilter
import org apache wicket localizer
import org apache wicket page
import org apache wicket requestcycle
import org apache wicket application defaultclassresolver
import org apache wicket application iclassresolver
import org apache wicket authorization iauthorizationstrategy
import org apache wicket authorization iunauthorizedcomponentinstantiationlistener
import org apache wicket authorization unauthorizedinstantiationexception
import org apache wicket markup imarkupparserfactory
import org apache wicket markup markupparserfactory
import org apache wicket markup html ipackageresourceguard
import org apache wicket markup html packageresourceguard
import org apache wicket markup html form persistence cookievaluepersistersettings
import org apache wicket markup html pages browserinfopage
import org apache wicket markup resolver autocomponentresolver
import org apache wicket markup resolver icomponentresolver
import org apache wicket protocol http webrequest
import org apache wicket resource propertiesfactory
import org apache wicket resource loader classstringresourceloader
import org apache wicket resource loader componentstringresourceloader
import org apache wicket resource loader istringresourceloader
import org apache wicket session defaultpagefactory
import org apache wicket session pagemap ipagemapevictionstrategy
import org apache wicket session pagemap leastrecentlyaccessedevictionstrategy
import org apache wicket util convert converterlocatorfactory
import org apache wicket util convert iconverterlocatorfactory
import org apache wicket util crypt cachingsunjcecryptfactory
import org apache wicket util crypt icryptfactory
import org apache wicket util file iresourcefinder
import org apache wicket util file iresourcepath
import org apache wicket util file path
import org apache wicket util resource locator iresourcestreamlocator
import org apache wicket util resource locator resourcestreamlocator
import org apache wicket util string strings
import org apache wicket util time duration
import org apache wicket util watch modificationwatcher
/**
* contains settings exposed via ixxxsettings interfaces. it is not a good idea
* to use this class directly, instead use the provided ixxxsettings interfaces.
*
* @author jonathan locke
* @author chris turner
* @author eelco hillenius
* @author juergen donnerstag
* @author johan compagner
* @author igor vaynberg (ivaynberg)
* @author martijn dashorst
*/
public final class settings
implements
iapplicationsettings
idebugsettings
iexceptionsettings
imarkupsettings
ipagesettings
irequestcyclesettings
iresourcesettings
isecuritysettings
isessionsettings
iframeworksettings
irequestloggersettings
/** class of access denied page. */
private class accessdeniedpage
/** ajax debug mode status */
private boolean ajaxdebugmodeenabled   false
/** the application */
private application application
/** the authorization strategy. */
private iauthorizationstrategy authorizationstrategy   iauthorizationstrategy allow_all
/** application default for automatically resolving hrefs */
private boolean automaticlinking   false
/**
* whether wicket should try to support multiple windows transparently, true
* by default.
*/
private boolean automaticmultiwindowsupport   true
/** true if the response should be buffered */
private boolean bufferresponse   true
/** class resolver to find classes */
private iclassresolver classresolver   new defaultclassresolver
/** list of (static) componentresolvers */
private list componentresolvers   new arraylist
/** true to check that each component on a page is used */
private boolean componentusecheck   true
/** true if multiple tabs/spaces should be compressed to a single space */
private boolean compresswhitespace   false
/** the context path that should be used for url prefixing */
private string contextpath
private iconverterlocatorfactory converterlocatorfactory
/** default values for persistence of form data (by means of cookies) */
private cookievaluepersistersettings cookievaluepersistersettings   new cookievaluepersistersettings
/** facotry for creating crypt objects */
private icryptfactory cryptfactory
/** default markup for after a disabled link */
private string defaultafterdisabledlink
/** default markup for before a disabled link */
private string defaultbeforedisabledlink
/** default markup encoding. if null, the os default will be used */
private string defaultmarkupencoding
/**
* whether mounts should be enforced. if true, requests for mounted targets
* have to done through the mounted paths. if, for instance, a bookmarkable
* page is mounted to a path, a request to that same page via the
* bookmarkablepage parameter will be denied.
*/
private boolean enforcemounts   false
/**
* whether wicket should try to get extensive client info by redirecting to
* {@link browserinfopage a page that polls for client capabilities}. this
* method is used by the default implementation of {@link #newclientinfo()},
* so if that method is overriden, there is no guarantee this method will be
* taken into account. false by default.
*/
private boolean gatherextendedbrowserinfo   false
/** class of internal error page. */
private class internalerrorpage
/** i18n support */
private localizer localizer
/** factory for creating markup parsers */
private imarkupparserfactory markupparserfactory
/** to help prevent denial of service attacks */
private int maxpagemaps   5
/** map to look up resource factories by name */
private map nametoresourcefactory   new hashmap
/** true if string resource loaders have been overridden */
private boolean overriddenstringresourceloaders   false
/** the package resource guard. */
private ipackageresourceguard packageresourceguard   new packageresourceguard
/** the error page displayed when an expired page is accessed. */
private class pageexpirederrorpage
/** factory to create new page objects */
private ipagefactory pagefactory   new defaultpagefactory
/** the eviction strategy. */
private ipagemapevictionstrategy pagemapevictionstrategy   new leastrecentlyaccessedevictionstrategy
5
/** the factory to be used for the property files */
private org apache wicket resource ipropertiesfactory propertiesfactory
/**
* the render strategy, defaults to 'redirect_to_buffer'. this property
* influences the default way in how a logical request that consists of an
* 'action' and a 'render' part is handled, and is mainly used to have a
* means to circumvent the 'refresh' problem.
*/
private irequestcyclesettings renderstrategy renderstrategy   redirect_to_buffer
/** filesystem path to search for resources */
private iresourcefinder resourcefinder   new path
/** frequency at which files should be polled */
private duration resourcepollfrequency   null
/** resource locator for this application */
private iresourcestreamlocator resourcestreamlocator
/** modificationwatcher to watch for changes in markup files */
private modificationwatcher resourcewatcher
/** list of {@link iresponsefilter}s. */
private list responsefilters
/**
* in order to do proper form parameter decoding it is important that the
* response and the following request have the same encoding. see
* http://www.crazysquirrel.com/computing/general/form-encoding.jspx for
* additional information.
*/
private string responserequestencoding
/** chain of string resource loaders to use */
private list stringresourceloaders   new arraylist 4
/** should html comments be stripped during rendering? */
private boolean stripcomments   false
/**
* if true, wicket tags ( <wicket: ..>) and wicket:id attributes we be
* removed from output
*/
private boolean stripwickettags   false
/** in order to remove <?xml?> from output as required by ie quirks mode */
private boolean stripxmldeclarationfromoutput
/** flags used to determine how to behave if resources are not found */
private boolean throwexceptiononmissingresource   true
/**
* the time that a request will by default be waiting for the previous
* request to be handled before giving up. defaults to one minute.
*/
private duration timeout   duration one_minute
/** authorizer for component instantiations */
private iunauthorizedcomponentinstantiationlistener unauthorizedcomponentinstantiationlistener   new iunauthorizedcomponentinstantiationlistener
/**
* called when an unauthorized component instantiation is about to take
* place (but before it happens).
*
* @param component
*            the partially constructed component (only the id is
*            guaranteed to be valid).
*/
public void onunauthorizedinstantiation final component component
throw new unauthorizedinstantiationexception component getclass
/** type of handling for unexpected exceptions */
private unexpectedexceptiondisplay unexpectedexceptiondisplay   show_exception_page
/** determines behavior of string resource loading if string is missing */
private boolean usedefaultonmissingresource   true
/** determines if pages should be managed by a version manager by default */
private boolean versionpagesbydefault   true
private boolean recordsessionsize   true
private int requestswindowsize   0
private boolean requestloggerenabled
/**
* whether the comments and whitespaces will be stripped from javascript
* resources
*/
private boolean stripjavascriptcommentsandwhitespace
/**
* create the application settings, carrying out any necessary
* initialisations.
*
* @param application
*            the application that these settings are for
*/
public settings final application application
this application   application
this markupparserfactory   new markupparserfactory application
stringresourceloaders add new componentstringresourceloader
stringresourceloaders add new classstringresourceloader this application getclass
/**
* @see org.apache.wicket.settings.ipagesettings#addcomponentresolver(org.apache.wicket.markup.resolver.icomponentresolver)
*/
public void addcomponentresolver icomponentresolver resolver
componentresolvers add resolver
/**
* @see org.apache.wicket.settings.iresourcesettings#addresourcefactory(java.lang.string,
*      org.apache.wicket.iresourcefactory)
*/
public void addresourcefactory final string name  iresourcefactory resourcefactory
nametoresourcefactory put name  resourcefactory
/**
* @see org.apache.wicket.settings.iresourcesettings#addresourcefolder(java.lang.string)
*/
public void addresourcefolder final string resourcefolder
// get resource finder
final iresourcefinder finder   getresourcefinder
// make sure it's a path
if    finder instanceof iresourcepath
throw new illegalargumentexception
// cast to resource path and add folder
final iresourcepath path    iresourcepath finder
path add resourcefolder
/**
* @see org.apache.wicket.settings.irequestcyclesettings#addresponsefilter(org.apache.wicket.iresponsefilter)
*/
public void addresponsefilter iresponsefilter responsefilter
if  responsefilters    null
responsefilters   new arraylist 3
responsefilters add responsefilter
/**
* @see org.apache.wicket.settings.iresourcesettings#addstringresourceloader(org.apache.wicket.resource.loader.istringresourceloader)
*/
public void addstringresourceloader final istringresourceloader loader
if   overriddenstringresourceloaders
stringresourceloaders clear
overriddenstringresourceloaders   true
stringresourceloaders add loader
/**
* @see org.apache.wicket.settings.iapplicationsettings#getaccessdeniedpage()
*/
public class getaccessdeniedpage
return accessdeniedpage
/**
* @see org.apache.wicket.settings.isecuritysettings#getauthorizationstrategy()
*/
public iauthorizationstrategy getauthorizationstrategy
return authorizationstrategy
/**
* @see org.apache.wicket.settings.imarkupsettings#getautomaticlinking()
*/
public boolean getautomaticlinking
return automaticlinking
/**
* @see org.apache.wicket.settings.ipagesettings#getautomaticmultiwindowsupport()
*/
public boolean getautomaticmultiwindowsupport
return automaticmultiwindowsupport
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getbufferresponse()
*/
public boolean getbufferresponse
return bufferresponse
/**
* @see org.apache.wicket.settings.iapplicationsettings#getclassresolver()
*/
public iclassresolver getclassresolver
return classresolver
/**
* get the (modifiable) list of icomponentresolvers.
*
* @see autocomponentresolver for an example
* @return list of componentresolvers
*/
public list getcomponentresolvers
return componentresolvers
/**
* @see org.apache.wicket.settings.idebugsettings#getcomponentusecheck()
*/
public boolean getcomponentusecheck
return this componentusecheck
/**
* @see org.apache.wicket.settings.imarkupsettings#getcompresswhitespace()
*/
public boolean getcompresswhitespace
return compresswhitespace
/**
* @see org.apache.wicket.settings.iapplicationsettings#getcontextpath()
*/
public string getcontextpath
// set the default context path if the context path is not already
// set (previous time or by the developer itself)
// this all to do missing api in the servlet spec.. you can't get a
// context path from the servlet context, which is just stupid.
if  contextpath    null    requestcycle get      null
requestcycle get   getrequest   instanceof webrequest
contextpath     webrequest requestcycle get   getrequest    getcontextpath
return contextpath
/**
* @see org.apache.wicket.settings.iapplicationsettings#getconverterlocatorfactory()
*/
public iconverterlocatorfactory getconverterlocatorfactory
if  converterlocatorfactory    null
converterlocatorfactory   new converterlocatorfactory
return converterlocatorfactory
/**
* @see org.apache.wicket.settings.isecuritysettings#getcookievaluepersistersettings()
*/
public cookievaluepersistersettings getcookievaluepersistersettings
return cookievaluepersistersettings
/**
* @see org.apache.wicket.settings.isecuritysettings#getcryptfactory()
*/
public synchronized icryptfactory getcryptfactory
if  cryptfactory    null
cryptfactory   new cachingsunjcecryptfactory isecuritysettings default_encryption_key
return cryptfactory
/**
* @see org.apache.wicket.settings.imarkupsettings#getdefaultafterdisabledlink()
*/
public string getdefaultafterdisabledlink
return defaultafterdisabledlink
/**
* @see org.apache.wicket.settings.imarkupsettings#getdefaultbeforedisabledlink()
*/
public string getdefaultbeforedisabledlink
return defaultbeforedisabledlink
/**
* @see org.apache.wicket.settings.imarkupsettings#getdefaultmarkupencoding()
*/
public string getdefaultmarkupencoding
return defaultmarkupencoding
/**
* @see wicket.settings.isecuritysettings#getenforcemounts()
*/
public boolean getenforcemounts
return enforcemounts
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getgatherextendedbrowserinfo()
*/
public boolean getgatherextendedbrowserinfo
return gatherextendedbrowserinfo
/**
* @see org.apache.wicket.settings.iapplicationsettings#getinternalerrorpage()
*/
public class getinternalerrorpage
return internalerrorpage
/**
* @see org.apache.wicket.settings.iresourcesettings#getlocalizer()
*/
public localizer getlocalizer
if  localizer    null
this localizer   new localizer
return localizer
/**
* @see org.apache.wicket.settings.imarkupsettings#getmarkupparserfactory()
*/
public imarkupparserfactory getmarkupparserfactory
return markupparserfactory
/**
* @see org.apache.wicket.settings.isessionsettings#getmaxpagemaps()
*/
public final int getmaxpagemaps
return maxpagemaps
/**
* @see org.apache.wicket.settings.iresourcesettings#getpackageresourceguard()
*/
public ipackageresourceguard getpackageresourceguard
return packageresourceguard
/**
* @see org.apache.wicket.settings.iapplicationsettings#getpageexpirederrorpage()
*/
public class getpageexpirederrorpage
return pageexpirederrorpage
/**
* @see org.apache.wicket.settings.isessionsettings#getpagefactory()
*/
public ipagefactory getpagefactory
return pagefactory
/**
* @see org.apache.wicket.settings.isessionsettings#getpagemapevictionstrategy()
*/
public ipagemapevictionstrategy getpagemapevictionstrategy
return pagemapevictionstrategy
/**
* @see org.apache.wicket.settings.iresourcesettings#getpropertiesfactory()
*/
public org apache wicket resource ipropertiesfactory getpropertiesfactory
if  propertiesfactory    null
propertiesfactory   new propertiesfactory
return propertiesfactory
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getrenderstrategy()
*/
public irequestcyclesettings renderstrategy getrenderstrategy
return renderstrategy
/**
* @see org.apache.wicket.settings.iresourcesettings#getresourcefactory(java.lang.string)
*/
public iresourcefactory getresourcefactory final string name
return  iresourcefactory nametoresourcefactory get name
/**
* @see org.apache.wicket.settings.iresourcesettings#getresourcefinder()
*/
public iresourcefinder getresourcefinder
return resourcefinder
/**
* @see org.apache.wicket.settings.iresourcesettings#getresourcepollfrequency()
*/
public duration getresourcepollfrequency
return resourcepollfrequency
/**
* @see org.apache.wicket.settings.iresourcesettings#getresourcestreamlocator()
*/
public iresourcestreamlocator getresourcestreamlocator
if  resourcestreamlocator    null
// create compound resource locator using source path from
// application settings
resourcestreamlocator   new resourcestreamlocator getresourcefinder
return resourcestreamlocator
/**
* @see org.apache.wicket.settings.iresourcesettings#getresourcewatcher(boolean)
*/
public modificationwatcher getresourcewatcher boolean start
if  resourcewatcher    null    start
final duration pollfrequency   getresourcepollfrequency
if  pollfrequency    null
resourcewatcher   new modificationwatcher pollfrequency
return resourcewatcher
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getresponsefilters()
*/
public list getresponsefilters
if  responsefilters    null
return null
else
return collections unmodifiablelist responsefilters
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getresponserequestencoding()
*/
public string getresponserequestencoding
return responserequestencoding
/**
* @see org.apache.wicket.settings.iresourcesettings#getstringresourceloaders()
*/
public list getstringresourceloaders
return collections unmodifiablelist stringresourceloaders
/**
* @see org.apache.wicket.settings.imarkupsettings#getstripcomments()
*/
public boolean getstripcomments
return stripcomments
/**
* @see org.apache.wicket.settings.imarkupsettings#getstripwickettags()
*/
public boolean getstripwickettags
return this stripwickettags
/**
* @see org.apache.wicket.settings.imarkupsettings#getstripxmldeclarationfromoutput()
*/
public boolean getstripxmldeclarationfromoutput
return this stripxmldeclarationfromoutput
/**
* @see org.apache.wicket.settings.iresourcesettings#getthrowexceptiononmissingresource()
*/
public boolean getthrowexceptiononmissingresource
return throwexceptiononmissingresource
/**
* @see org.apache.wicket.settings.irequestcyclesettings#gettimeout()
*/
public duration gettimeout
return timeout
/**
* @see org.apache.wicket.settings.isecuritysettings#getunauthorizedcomponentinstantiationlistener()
*/
public iunauthorizedcomponentinstantiationlistener getunauthorizedcomponentinstantiationlistener
return unauthorizedcomponentinstantiationlistener
/**
* @see org.apache.wicket.settings.irequestcyclesettings#getunexpectedexceptiondisplay()
*/
public unexpectedexceptiondisplay getunexpectedexceptiondisplay
return unexpectedexceptiondisplay
/**
* @see org.apache.wicket.settings.iresourcesettings#getusedefaultonmissingresource()
*/
public boolean getusedefaultonmissingresource
return usedefaultonmissingresource
/**
* @see org.apache.wicket.settings.iframeworksettings#getversion()
*/
public string getversion
string implversion   null
package pkg   this getclass   getpackage
if  pkg    null
implversion   pkg getimplementationversion
return strings isempty implversion  ?     implversion
/**
* @see org.apache.wicket.settings.ipagesettings#getversionpagesbydefault()
*/
public boolean getversionpagesbydefault
return versionpagesbydefault
/**
* @see org.apache.wicket.settings.idebugsettings#isajaxdebugmodeenabled()
*/
public boolean isajaxdebugmodeenabled
return ajaxdebugmodeenabled
/**
* @see org.apache.wicket.settings.iapplicationsettings#setaccessdeniedpage(java.lang.class)
*/
public void setaccessdeniedpage class accessdeniedpage
if  accessdeniedpage    null
throw new illegalargumentexception
checkpageclass accessdeniedpage
this accessdeniedpage   accessdeniedpage
/**
* @see org.apache.wicket.settings.idebugsettings#setajaxdebugmodeenabled(boolean)
*/
public void setajaxdebugmodeenabled boolean enable
ajaxdebugmodeenabled   enable
/**
* @see org.apache.wicket.settings.isecuritysettings#setauthorizationstrategy(org.apache.wicket.authorization.iauthorizationstrategy)
*/
public void setauthorizationstrategy iauthorizationstrategy strategy
if  strategy    null
throw new illegalargumentexception
this authorizationstrategy   strategy
/**
* @see org.apache.wicket.settings.imarkupsettings#setautomaticlinking(boolean)
*/
public void setautomaticlinking boolean automaticlinking
this automaticlinking   automaticlinking
/**
* @see org.apache.wicket.settings.ipagesettings#setautomaticmultiwindowsupport(boolean)
*/
public void setautomaticmultiwindowsupport boolean automaticmultiwindowsupport
this automaticmultiwindowsupport   automaticmultiwindowsupport
/**
* @see org.apache.wicket.settings.irequestcyclesettings#setbufferresponse(boolean)
*/
public void setbufferresponse boolean bufferresponse
this bufferresponse   bufferresponse
/**
* @see org.apache.wicket.settings.iapplicationsettings#setclassresolver(org.apache.wicket.application.iclassresolver)
*/
public void setclassresolver final iclassresolver defaultclassresolver
this classresolver   defaultclassresolver
/**
* @see org.apache.wicket.settings.idebugsettings#setcomponentusecheck(boolean)
*/
public void setcomponentusecheck final boolean componentusecheck
this componentusecheck   componentusecheck
/**
* @see org.apache.wicket.settings.imarkupsettings#setcompresswhitespace(boolean)
*/
public void setcompresswhitespace final boolean compresswhitespace
this compresswhitespace   compresswhitespace
/**
* @see org.apache.wicket.settings.iapplicationsettings#setcontextpath(java.lang.string)
*/
public void setcontextpath string contextpath
if  contextpath    null
if   contextpath startswith        contextpath startswith
contextpath startswith
this contextpath       contextpath
else
this contextpath   contextpath
/**
* @see org.apache.wicket.settings.iapplicationsettings#setconverterlocatorfactory(org.apache.wicket.util.convert.iconverterlocatorfactory)
*/
public void setconverterlocatorfactory iconverterlocatorfactory factory
if  factory    null
throw new illegalargumentexception
this converterlocatorfactory   factory
/**
* @see org.apache.wicket.settings.isecuritysettings#setcookievaluepersistersettings(org.apache.wicket.markup.html.form.persistence.cookievaluepersistersettings)
*/
public void setcookievaluepersistersettings
cookievaluepersistersettings cookievaluepersistersettings
this cookievaluepersistersettings   cookievaluepersistersettings
/**
* @see org.apache.wicket.settings.isecuritysettings#setcryptfactory(org.apache.wicket.util.crypt.icryptfactory)
*/
public void setcryptfactory icryptfactory cryptfactory
if  cryptfactory    null
throw new illegalargumentexception
this cryptfactory   cryptfactory
/**
* @see org.apache.wicket.settings.imarkupsettings#setdefaultafterdisabledlink(java.lang.string)
*/
public void setdefaultafterdisabledlink final string defaultafterdisabledlink
this defaultafterdisabledlink   defaultafterdisabledlink
/**
* @see org.apache.wicket.settings.imarkupsettings#setdefaultbeforedisabledlink(java.lang.string)
*/
public void setdefaultbeforedisabledlink string defaultbeforedisabledlink
this defaultbeforedisabledlink   defaultbeforedisabledlink
/**
* @see org.apache.wicket.settings.imarkupsettings#setdefaultmarkupencoding(java.lang.string)
*/
public void setdefaultmarkupencoding final string encoding
this defaultmarkupencoding   encoding
/**
* @see wicket.settings.isecuritysettings#setenforcemounts(boolean)
*/
public void setenforcemounts boolean enforce
this enforcemounts   enforce
/**
* @see org.apache.wicket.settings.irequestcyclesettings#setgatherextendedbrowserinfo(boolean)
*/
public void setgatherextendedbrowserinfo boolean gatherextendedbrowserinfo
this gatherextendedbrowserinfo   gatherextendedbrowserinfo
/**
* @see org.apache.wicket.settings.iapplicationsettings#setinternalerrorpage(java.lang.class)
*/
public void setinternalerrorpage final class internalerrorpage
if  internalerrorpage    null
throw new illegalargumentexception
checkpageclass internalerrorpage
this internalerrorpage   internalerrorpage
/**
* @see org.apache.wicket.settings.imarkupsettings#setmarkupparserfactory(org.apache.wicket.markup.imarkupparserfactory)
*/
public void setmarkupparserfactory imarkupparserfactory factory
if  factory    null
throw new illegalargumentexception
this markupparserfactory   factory
/**
* @see org.apache.wicket.settings.isessionsettings#setmaxpagemaps(int)
*/
public final void setmaxpagemaps int maxpagemaps
this maxpagemaps   maxpagemaps
/**
* @see org.apache.wicket.settings.iresourcesettings#setpackageresourceguard(org.apache.wicket.markup.html.ipackageresourceguard)
*/
public void setpackageresourceguard ipackageresourceguard packageresourceguard
if  packageresourceguard    null
throw new illegalargumentexception
this packageresourceguard   packageresourceguard
/**
* @see org.apache.wicket.settings.iapplicationsettings#setpageexpirederrorpage(java.lang.class)
*/
public void setpageexpirederrorpage final class pageexpirederrorpage
if  pageexpirederrorpage    null
throw new illegalargumentexception
checkpageclass pageexpirederrorpage
this pageexpirederrorpage   pageexpirederrorpage
/**
* @see org.apache.wicket.settings.isessionsettings#setpagefactory(org.apache.wicket.ipagefactory)
*/
public void setpagefactory final ipagefactory defaultpagefactory
this pagefactory   defaultpagefactory
/**
* @see org.apache.wicket.settings.isessionsettings#setpagemapevictionstrategy(org.apache.wicket.session.pagemap.ipagemapevictionstrategy)
*/
public void setpagemapevictionstrategy ipagemapevictionstrategy pagemapevictionstrategy
this pagemapevictionstrategy   pagemapevictionstrategy
/**
* @see org.apache.wicket.settings.iresourcesettings#setpropertiesfactory(org.apache.wicket.resource.propertiesfactory)
*/
public void setpropertiesfactory org apache wicket resource ipropertiesfactory factory
this propertiesfactory   factory
/**
* @see org.apache.wicket.settings.irequestcyclesettings#setrenderstrategy(org.apache.wicket.settings.settings.renderstrategy)
*/
public void setrenderstrategy irequestcyclesettings renderstrategy renderstrategy
this renderstrategy   renderstrategy
/**
* @see org.apache.wicket.settings.iresourcesettings#setresourcefinder(org.apache.wicket.util.file.iresourcefinder)
*/
public void setresourcefinder final iresourcefinder resourcefinder
this resourcefinder   resourcefinder
// cause resource locator to get recreated
this resourcestreamlocator   null
/**
* @see org.apache.wicket.settings.iresourcesettings#setresourcepollfrequency(org.apache.wicket.util.time.duration)
*/
public void setresourcepollfrequency final duration resourcepollfrequency
this resourcepollfrequency   resourcepollfrequency
/**
* @see org.apache.wicket.settings.iresourcesettings#setresourcestreamlocator(org.apache.wicket.util.resource.locator.iresourcestreamlocator)
*/
public void setresourcestreamlocator iresourcestreamlocator resourcestreamlocator
this resourcestreamlocator   resourcestreamlocator
/**
* @see org.apache.wicket.settings.irequestcyclesettings#setresponserequestencoding(java.lang.string)
*/
public void setresponserequestencoding final string responserequestencoding
this responserequestencoding   responserequestencoding
/**
* @see org.apache.wicket.settings.imarkupsettings#setstripcomments(boolean)
*/
public void setstripcomments boolean stripcomments
this stripcomments   stripcomments
/**
* @see org.apache.wicket.settings.imarkupsettings#setstripwickettags(boolean)
*/
public void setstripwickettags boolean stripwickettags
this stripwickettags   stripwickettags
/**
* @see org.apache.wicket.settings.imarkupsettings#setstripxmldeclarationfromoutput(boolean)
*/
public void setstripxmldeclarationfromoutput final boolean strip
this stripxmldeclarationfromoutput   strip
/**
* @see org.apache.wicket.settings.iresourcesettings#setthrowexceptiononmissingresource(boolean)
*/
public void setthrowexceptiononmissingresource final boolean throwexceptiononmissingresource
this throwexceptiononmissingresource   throwexceptiononmissingresource
/**
* @see org.apache.wicket.settings.irequestcyclesettings#settimeout(org.apache.wicket.util.time.duration)
*/
public void settimeout duration timeout
if  timeout    null
throw new illegalargumentexception
this timeout   timeout
/**
* @see org.apache.wicket.settings.isecuritysettings#setunauthorizedcomponentinstantiationlistener(org.apache.wicket.authorization.iunauthorizedcomponentinstantiationlistener)
*/
public void setunauthorizedcomponentinstantiationlistener
iunauthorizedcomponentinstantiationlistener unauthorizedcomponentinstantiationlistener
this unauthorizedcomponentinstantiationlistener   unauthorizedcomponentinstantiationlistener
/**
* @see org.apache.wicket.settings.irequestcyclesettings#setunexpectedexceptiondisplay(org.apache.wicket.settings.settings.unexpectedexceptiondisplay)
*/
public void setunexpectedexceptiondisplay
final unexpectedexceptiondisplay unexpectedexceptiondisplay
this unexpectedexceptiondisplay   unexpectedexceptiondisplay
/**
* @see org.apache.wicket.settings.iresourcesettings#setusedefaultonmissingresource(boolean)
*/
public void setusedefaultonmissingresource final boolean usedefaultonmissingresource
this usedefaultonmissingresource   usedefaultonmissingresource
/**
* @see org.apache.wicket.settings.ipagesettings#setversionpagesbydefault(boolean)
*/
public void setversionpagesbydefault boolean pagesversionedbydefault
this versionpagesbydefault   pagesversionedbydefault
/**
* throws an illegalargumentexception if the given class is not a subclass
* of page.
*
* @param pageclass
*            the page class to check
*/
private void checkpageclass final class pageclass
// note: we can't really check on whether it is a bookmarkable page
// here, as - though the default is that a bookmarkable page must
// either have a default constructor and/or a constructor with a
// pageparameters object, this could be different for another
// ipagefactory implementation
if   page class isassignablefrom pageclass
throw new illegalargumentexception     pageclass
/**
* @see org.apache.wicket.settings.irequestloggersettings#getrecordsessionsize()
*/
public boolean getrecordsessionsize
return recordsessionsize
/**
* @see org.apache.wicket.settings.irequestloggersettings#getrequestswindowsize()
*/
public int getrequestswindowsize
return requestswindowsize
/**
* @see org.apache.wicket.settings.irequestloggersettings#isrequestloggerenabled()
*/
public boolean isrequestloggerenabled
return requestloggerenabled
/**
* @see org.apache.wicket.settings.irequestloggersettings#setrecordsessionsize(boolean)
*/
public void setrecordsessionsize boolean record
recordsessionsize   record
/**
* @see org.apache.wicket.settings.irequestloggersettings#setrequestloggerenabled(boolean)
*/
public void setrequestloggerenabled boolean enable
requestloggerenabled   enable
/**
* @see org.apache.wicket.settings.irequestloggersettings#setrequestswindowsize(int)
*/
public void setrequestswindowsize int size
requestswindowsize   size
/**
* @see org.apache.wicket.settings.iresourcesettings#getstripjavascriptcommentsandwhitespace()
*/
public boolean getstripjavascriptcommentsandwhitespace
return stripjavascriptcommentsandwhitespace
/**
* @see org.apache.wicket.settings.iresourcesettings#setstripjavascriptcommentsandwhitespace(boolean)
*/
public void setstripjavascriptcommentsandwhitespace boolean value
stripjavascriptcommentsandwhitespace   value