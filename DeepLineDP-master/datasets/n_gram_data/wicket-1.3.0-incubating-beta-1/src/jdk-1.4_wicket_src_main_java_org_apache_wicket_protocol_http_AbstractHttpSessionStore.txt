/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io serializable
import javax servlet http httpsession
import javax servlet http httpsessionbindingevent
import javax servlet http httpsessionbindinglistener
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket ipagemap
import org apache wicket page
import org apache wicket request
import org apache wicket session
import org apache wicket session isessionstore
import org apache wicket settings ipagesettings
import org apache wicket version ipageversionmanager
import org apache wicket version undo undopageversionmanager
/**
* abstract implementation of {@link isessionstore} that works with web
* applications and that provided some speficic http servlet/ session related
* functionality.
*
* @author jcompagner
* @author eelco hillenius
*/
public abstract class abstracthttpsessionstore implements isessionstore
/**
* reacts on unbinding from the session by cleaning up the session related
* application data.
*/
protected static final class sessionbindinglistener
implements
httpsessionbindinglistener
serializable
private static final long serialversionuid   1l
/** session id. */
private final string sessionid
/** the unique key of the application within this web application. */
private final string applicationkey
/** whether it is already unbound. */
private boolean unbound   false
/**
* construct.
*
* @param applicationkey
*            the unique key of the application within this web
*            application
* @param sessionid
*            the session's id
*/
public sessionbindinglistener string applicationkey  string sessionid
this applicationkey   applicationkey
this sessionid   sessionid
/**
* @see javax.servlet.http.httpsessionbindinglistener#valuebound(javax.servlet.http.httpsessionbindingevent)
*/
public void valuebound httpsessionbindingevent evg
/**
* @see javax.servlet.http.httpsessionbindinglistener#valueunbound(javax.servlet.http.httpsessionbindingevent)
*/
public void valueunbound httpsessionbindingevent evt
if   unbound
unbound   true
application application   application get applicationkey
if  application    null
application getsessionstore   unbind sessionid
/** log. */
protected static log log   logfactory getlog abstracthttpsessionstore class
/** the web application for this store. is never null. */
protected final webapplication application
/**
* construct.
*
* @param application
*            the application to construct this store for
*/
public abstracthttpsessionstore application application
if  application    null
throw new illegalargumentexception
// sanity check
if    application instanceof webapplication
throw new illegalstateexception getclass   getname
this application    webapplication application
/**
* @see org.apache.wicket.session.isessionstore#bind(org.apache.wicket.request,
*      org.apache.wicket.session)
*/
public final void bind request request  session newsession
// call template method
onbind request  newsession
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
// register an unbinding listener for cleaning up
string applicationkey   application getapplicationkey
httpsession setattribute     applicationkey
new sessionbindinglistener applicationkey  httpsession getid
// register the session object itself
setattribute webrequest  session session_attribute_name  newsession
/**
* @see org.apache.wicket.session.isessionstore#destroy()
*/
public void destroy
// nop
/**
* @see org.apache.wicket.session.isessionstore#getsessionid(org.apache.wicket.request,
*      boolean)
*/
public final string getsessionid request request  boolean create
string id   null
webrequest webrequest   towebrequest request
httpsession httpsession   webrequest gethttpservletrequest   getsession false
if  httpsession    null
id   httpsession getid
else if  create
httpsession   webrequest gethttpservletrequest   getsession true
id   httpsession getid
irequestlogger logger   application getrequestlogger
if  logger    null
logger sessioncreated id
return id
/**
* @see org.apache.wicket.session.isessionstore#invalidate(request)
*/
public final void invalidate request request
webrequest webrequest   towebrequest request
httpsession httpsession   gethttpsession webrequest
if  httpsession    null
string applicationkey   application getapplicationkey
try
sessionbindinglistener l    sessionbindinglistener httpsession
getattribute     applicationkey
if  l    null
l unbound   true
// call unbind
unbind httpsession getid
// tell the app server the session is no longer valid
httpsession invalidate
catch  illegalstateexception e
// can safely be ignored
/**
* @see org.apache.wicket.session.isessionstore#lookup(org.apache.wicket.request)
*/
public session lookup request request
string sessionid   getsessionid request  false
if  sessionid    null
webrequest webrequest   towebrequest request
return  session getattribute webrequest  session session_attribute_name
return null
/**
* @see org.apache.wicket.session.isessionstore#newversionmanager(page)
*/
public ipageversionmanager newversionmanager page page
final ipagesettings settings   page getsession   getapplication   getpagesettings
return new undopageversionmanager page  20
/**
* noop implementation. clients can override this method.
*
* @see org.apache.wicket.session.isessionstore#onbeginrequest(org.apache.wicket.request)
*/
public void onbeginrequest request request
/**
* noop implementation. clients can override this method.
*
* @see org.apache.wicket.session.isessionstore#onendrequest(org.apache.wicket.request)
*/
public void onendrequest request request
/**
* @see org.apache.wicket.session.isessionstore#unbind(java.lang.string)
*/
public final void unbind string sessionid
onunbind sessionid
application sessiondestroyed sessionid
/**
* gets the underlying httpsession object or null.
* <p>
* warning: it is a bad idea to depend on the http session object directly.
* please use the classes and methods that are exposed by wicket instead.
* send an email to the mailing list in case it is not clear how to do
* things or you think you miss funcionality which causes you to depend on
* this directly.
* </p>
*
* @param request
*
* @return the underlying httpsession object.
*/
protected final httpsession gethttpsession webrequest request
return request gethttpservletrequest   getsession false
/**
* template method that is called when a session is being bound to the
* session store. it is called <strong>before</strong> the session object
* itself is added to this store (which is done by calling
* {@link isessionstore#setattribute(request, string, object)} with key
* {@link session#session_attribute_name}.
*
* @param request
*            the request
* @param newsession
*            the new session
*/
protected void onbind request request  session newsession
/**
* template method that is called when the session is being detached from
* the store, which typically happens when the httpsession was invalidated.
*
* @param sessionid
*            the session id of the session that was invalidated.
*/
protected void onunbind string sessionid
/**
* cast {@link request} to {@link webrequest}.
*
* @param request
*            the request to cast
* @return the web request
*/
protected final webrequest towebrequest request request
if  request    null
return null
if    request instanceof webrequest
throw new illegalargumentexception getclass   getname
return  webrequest request
// todo remove after deprecation release
/**
* do not use.
*
* @param name
* @param session
* @return
* @deprecated remove after deprecation release
*/
public final ipagemap createpagemap string name  session session
throw new unsupportedoperationexception