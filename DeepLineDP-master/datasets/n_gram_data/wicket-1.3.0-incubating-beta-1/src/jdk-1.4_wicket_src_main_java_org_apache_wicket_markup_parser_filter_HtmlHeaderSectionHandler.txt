/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import org apache wicket markup componenttag
import org apache wicket markup markup
import org apache wicket markup markupelement
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket markup parser xmltag
/**
* this is a markup inline filter. it assumes that wickettagidentifier has been
* called first and search for a &lt;head&gt; tag (note: not wicket:head).
* provided the markup contains a &lt;body&gt; tag it will automatically prepend
* a &lt;head&gt; tag if missing.
* <p>
* note: this handler is only relevant for pages (see
* markupparser.newfilterchain())
*
* @see org.apache.wicket.markup.markupparser
* @author juergen donnerstag
*/
public final class htmlheadersectionhandler extends abstractmarkupfilter
private static final string body
private static final string head
/** the automatically assigned wicket:id to &gt;head&lt; tag */
public static final string header_id
/** true if <head> has been found already */
private boolean foundhead   false
/** true if all the rest of the markup file can be ignored */
private boolean ignoretherest   false
/** the markup available so far for the resource */
private final markup markup
/**
* construct.
*
* @param markup the markup object being filled while reading the markup resource
*/
public htmlheadersectionhandler final markup markup
this markup   markup
/**
* get the next tag from the next markupfilter in the chain and search for
* wicket specific tags.
* <p>
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return the next tag from markup to be processed. if null, no more tags
*         are available
*/
public markupelement nexttag   throws parseexception
// get the next tag from the markup.
// if null, no more tags are available
final componenttag tag   nextcomponenttag
if  tag    null
return tag
// whatever there is left in the markup, ignore it
if  ignoretherest    true
return tag
// if it is <head> or </head>
if  head equalsignorecase tag getname
if  tag getnamespace      null
// we found <head>
if  tag isclose
foundhead   true
else if  tag getid      null
tag setid header_id
return tag
else
// we found <wicket:head>
foundhead   true
else if  body equalsignorecase tag getname        tag getnamespace      null
// we found <body>
if  foundhead    false
insertheadtag
// <head> must always be before <body>
ignoretherest   true
return tag
return tag
/**
* insert <head> open and close tag (with empty body) to the current
* position.
*/
private void insertheadtag
// note: only the open-tag must be a autocomponenttag
final componenttag opentag   new componenttag head  xmltag open
opentag setid header_id
final componenttag closetag   new componenttag head  xmltag close
closetag setopentag opentag
// insert the tags into the markup stream
this markup addmarkupelement opentag
this markup addmarkupelement closetag