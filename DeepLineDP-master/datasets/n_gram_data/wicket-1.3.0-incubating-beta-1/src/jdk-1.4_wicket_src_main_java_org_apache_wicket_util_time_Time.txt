/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util time
import java text parseexception
import java text simpledateformat
import java util calendar
import java util date
/**
* an immutable time class that represents a specific point in time. the
* underlying representation is a long value which holds a number of
* milliseconds since january 1, 1970, 0:00 gmt. to represent a time duration,
* such as "6 seconds", use the duration class. to represent a time period with
* a start and end time, use the timeframe class. to represent a time of day,
* use the timeofday class.
*
* @author jonathan locke
*/
public final class time extends abstracttime
private static final long serialversionuid   1l
/** the beginning of unix time: january 1, 1970, 0:00 gmt. */
public static final time start_of_unix_time   milliseconds 0
/** parser in 'yyyy.mm.dd' format. */
private static final simpledateformat dateformat   new simpledateformat
/** parser in 'yyyy.mm.dd-h.mma' format. */
private static final simpledateformat datetimeformat   new simpledateformat
/**
* gets a time instance based on the given miliseconds.
*
* @param time
*            the time in milliseconds since start_of_unix_time
* @return the given time
*/
public static time milliseconds final long time
return new time time
/**
* gets a time instance based on the current time.
*
* @return the current time
*/
public static time now
return new time system currenttimemillis
/**
* gets time by parsing 'yyyy.mm.dd' format.
*
* @param calendar
*            the calendar to use when parsing date string
* @param string
*            the string
* @return the time
* @throws parseexception
*/
public static time parsedate final calendar calendar  final string string
throws parseexception
synchronized  dateformat
synchronized  calendar
dateformat setcalendar calendar
return valueof dateformat parse string
/**
* gets time by parsing 'yyyy.mm.dd' format using a localtime calendar.
*
* @param string
*            the string
* @return the time
* @throws parseexception
*/
public static time parsedate final string string  throws parseexception
return parsedate localtime  string
/**
* gets time by parsing yyyy.mm.dd-h.mma format.
*
* @param calendar
*            the calendar to use when parsing the string
* @param string
*            the string
* @return an immutable unix time value
* @throws parseexception
*/
public static time valueof final calendar calendar  final string string  throws parseexception
synchronized  datetimeformat
synchronized  calendar
datetimeformat setcalendar calendar
return valueof datetimeformat parse string
/**
* gets a time instance based on the given calendar and {@link timeofday}
* objects.
*
* @param calendar
*            the calendar to use
* @param timeofday
*            the time of day
* @return a time value for the time of day today
*/
public static time valueof final calendar calendar  final timeofday timeofday
synchronized  calendar
// set time to midnight today
calendar settimeinmillis system currenttimemillis
calendar set calendar hour  0
calendar set calendar minute  0
calendar set calendar second  0
// add time of day milliseconds to midnight
return valueof calendar gettimeinmillis     timeofday getmilliseconds
/**
* gets a time instance based on the given date object.
*
* @param date
*            a java.util.date object
* @return a corresponding immutable time object
*/
public static time valueof final date date
return new time date gettime
/**
* gets a time instance based on the given miliseconds.
*
* @param time
*            the time in milliseconds since start_of_unix_time
* @return a corresponding immutable time object
*/
public static time valueof final long time
return new time time
/**
* gets time by parsing yyyy.mm.dd-h.mma format.
*
* @param string
*            the string
* @return the time
* @throws parseexception
*/
public static time valueof final string string  throws parseexception
return valueof localtime  string
/**
* gets time by parsing 'pattern' format.
*
* @param string
*            input
* @param pattern
*            pattern to use
* @return time instance that resulted from parsing the given string
* @throws parseexception
*/
public static time valueof final string string  final string pattern  throws parseexception
final simpledateformat datetimeformat   new simpledateformat pattern
datetimeformat setcalendar localtime
return valueof datetimeformat parse string
/**
* gets a time instance based on the given {@link timeofday}object.
*
* @param timeofday
*            the time of day in localtime
* @return a time value for the time of day today
*/
public static time valueof final timeofday timeofday
return valueof localtime  timeofday
/**
* private constructor forces use of static factory methods.
*
* @param time
*            the time in milliseconds since start_of_unix_time
*/
private time final long time
super time
/**
* adds the given duration to this time object, moving the time into the
* future.
*
* @param duration
*            the duration to add
* @return this time + duration
*/
public time add final duration duration
return milliseconds getmilliseconds     duration getmilliseconds
/**
* @return amount of time that has elapsed since this time
* @throws illegalstateexception thrown if this time is in the future
*/
public duration elapsedsince
final time now   now
if  this greaterthan now
throw new illegalstateexception
return now subtract this
/**
* gets the duration from now to this time value. if this time value is in
* the past, then the duration returned will be negative. otherwise, it will
* be the number of milliseconds from now to this time.
*
* @return the duration from now to this time value
*/
public duration fromnow
return subtract now
/**
* gets the value of a field from the given calendar.
*
* @param calendar
*            the calendar to use
* @param field
*            the calendar field to get
* @return the field's value for this point in time on the given calendar
*/
public int get final calendar calendar  final int field
synchronized  calendar
calendar settimeinmillis getmilliseconds
return calendar get field
/**
* gets the value of a field.
*
* @param field
*            the calendar field to get
* @return the field's value (in localtime)
*/
public int get final int field
return get localtime  field
/**
* gets the day of month field of the current calendar.
*
* @return the field value
*/
public int getdayofmonth
return getdayofmonth localtime
/**
* gets the day of month field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int getdayofmonth final calendar calendar
return get calendar  calendar day_of_month
/**
* gets the hour field of the current calendar.
*
* @return the field value
*/
public int gethour
return gethour localtime
/**
* gets the hour field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int gethour final calendar calendar
return get calendar  calendar hour
/**
* gets the minute field of the current calendar.
*
* @return the field value
*/
public int getminute
return getminute localtime
/**
* gets the minute field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int getminute final calendar calendar
return get calendar  calendar minute
/**
* gets the month field of the current calendar.
*
* @return the field value
*/
public int getmonth
return getmonth localtime
/**
* gets the month field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int getmonth final calendar calendar
return get calendar  calendar month
/**
* gets the second field of the current calendar.
*
* @return the field value
*/
public int getsecond
return getsecond localtime
/**
* gets the second field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int getsecond final calendar calendar
return get calendar  calendar second
/**
* gets the year field of the current calendar.
*
* @return the field value
*/
public int getyear
return getyear localtime
/**
* gets the year field of the given calendar.
*
* @param calendar
*            the calendar to get the field value from
* @return the field value
*/
public int getyear final calendar calendar
return get calendar  calendar year
/**
* adds the given duration to this time object, moving the time into the
* future.
*
* @param duration
*            the duration to add
* @return this time - duration
*/
public time subtract final duration duration
return milliseconds getmilliseconds     duration getmilliseconds
/**
* subtract time from this and returns the difference as a duration object.
*
* @param that
*            the time to subtract
* @return the duration between this and that time
*/
public duration subtract final time that
return duration milliseconds this getmilliseconds     that getmilliseconds
/**
* gets a date object for this time object. a new date object is always
* returned rather than attempting to cache a date since date is mutable.
*
* @return this immutable time object as a mutable java.util.date object
*/
public date todate
return new date getmilliseconds
/**
* converts this time to a date string using the date formatter
* 'yyyy.mm.dd'.
*
* @return the date string
*/
public string todatestring
return todatestring localtime
/**
* converts this time to a date string using the formatter 'yyyy.mm.dd'.
*
* @param calendar
*            the calendar to use in the conversion
* @return the date string
*/
public string todatestring final calendar calendar
synchronized  dateformat
synchronized  calendar
dateformat setcalendar calendar
return dateformat format new date getmilliseconds     tolowercase
/**
* converts this time to a string suitable for use in a filesystem name.
*
* @return this time as a formatted string
*/
public string tostring
return todatestring         totimestring
/**
* converts this time to a string using the given calendar and format.
*
* @param calendar
*            the calendar to use
* @param format
*            the format to use
* @return this time as a formatted string
*/
public string tostring final calendar calendar  final string format
final simpledateformat datetimeformat   new simpledateformat format
datetimeformat setcalendar calendar    null ? localtime   calendar
return datetimeformat format new date getmilliseconds
/**
* converts this time to a string using the given format.
*
* @param format
*            the format to use
* @return this time as a formatted string
*/
public string tostring final string format
return tostring null  format