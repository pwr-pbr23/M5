/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup repeater data
import java util iterator
import org apache wicket markupcontainer
import org apache wicket markup repeater item
import org apache wicket markup repeater repeatingview
import org apache wicket version undo change
/**
* a pageable dataview which breaks the data in the idataprovider into a number
* of data-rows, depending on the column size. a typical use case is to show
* items in a table with ie 3 columns where the table is filled left to right
* top-down so that for each third item a new row is created.
* <p>
* example
*
* <pre>
*   &lt;tbody&gt;
*     &lt;tr wicket:id=&quot;rows&quot; class&quot;even&quot;&gt;
*       &lt;td wicket:id=&quot;cols&quot;&gt;
*         &lt;span wicket:id=&quot;id&quot;&gt;test id&lt;/span&gt;
*       &lt;/td&gt;
*     &lt;/tr&gt;
*   &lt;/tbody&gt;
* </pre>
*
* and in java:
*
* <pre>
* add(new gridview(&quot;rows&quot;, dataprovider).setcolumns(3));
* </pre>
*
* @author igor vaynberg
* @author christian essl
*
*/
public abstract class gridview extends dataviewbase
private int columns   1
private int rows   integer max_value
/**
* @param id
*            component id
* @param dataprovider
*            data provider
*/
public gridview string id  idataprovider dataprovider
super id  dataprovider
/**
* @return number of columns
*/
public int getcolumns
return columns
/**
* sets number of columns
*
* @param cols
*            number of colums
* @return this for chaining
*/
public gridview setcolumns int cols
if  cols < 1
throw new illegalargumentexception
if  columns    cols
if  isversioned
addstatechange new change
private static final long serialversionuid   1l
final int old   columns
public void undo
columns   old
public string tostring
return     getpath
old
columns   cols
updateitemsperpage
return this
/**
* @return number of rows per page
*/
public int getrows
return rows
/**
* sets number of rows per page
*
* @param rows
*            number of rows
* @return this for chaining
*/
public gridview setrows int rows
if  rows < 1
throw new illegalargumentexception
if  this rows    rows
if  isversioned
addstatechange new change
private static final long serialversionuid   1l
final int old   gridview this rows
public void undo
gridview this rows   old
public string tostring
return     getpath
old
this rows   rows
// todo post 1.2: performance: can this be moved into the this.rows != rows if
// block for optimization?
updateitemsperpage
return this
private void updateitemsperpage
int items   integer max_value
long result    long rows    long columns
// overflow check
int desiredhibits      int  result >>> 31    1
int actualhibits    int  result >>> 32
if  desiredhibits    actualhibits
items    int result
internalsetrowsperpage items
protected void additems iterator items
if  items hasnext
final int cols   getcolumns
int row   0
do
// build a row
item rowitem   newrowitem newchildid    row
repeatingview rowview   new repeatingview
rowitem add rowview
add rowitem
// populate the row
for  int index   0  index < cols  index
final item cellitem
if  items hasnext
cellitem    item items next
else
cellitem   newemptyitem newchildid    index
populateemptyitem cellitem
rowview add cellitem
// increase row
row
while  items hasnext
/**
* @return data provider
*/
public idataprovider getdataprovider
return internalgetdataprovider
/**
* @see org.apache.wicket.extensions.markup.html.repeater.pageable.abstractpageableview#getitems()
*/
public iterator getitems
return new itemsiterator iterator
/**
* add component to an item for which there is no model anymore and is shown
* in a cell
*
* @param item
*            item object
*/
abstract protected void populateemptyitem item item
/**
* create a item which represents an empty cell (there is no model for it in
* the dataprovider)
*
* @param id
* @param index
* @return created item
*/
protected item newemptyitem string id  int index
return new item id  index  null
/**
* create a new item which will hold a row.
*
* @param id
* @param index
* @return created item
*/
protected item newrowitem string id  int index
return new item id  index  null
/**
* iterator that iterats over all items in the cells
*
* @author igor
*
*/
private static class itemsiterator implements iterator
private iterator rows
private iterator cells
private item next
/**
* @param rows
*            iterator over child row views
*/
public itemsiterator iterator rows
this rows   rows
findnext
/**
* @see java.util.iterator#remove()
*/
public void remove
throw new unsupportedoperationexception
/**
* @see java.util.iterator#hasnext()
*/
public boolean hasnext
return next    null
/**
* @see java.util.iterator#next()
*/
public object next
item item   next
findnext
return item
private void findnext
next   null
if  cells    null    cells hasnext
next    item cells next
while  rows hasnext
markupcontainer row    markupcontainer rows next
cells     markupcontainer row iterator   next    iterator
if  cells hasnext
next    item cells next
break