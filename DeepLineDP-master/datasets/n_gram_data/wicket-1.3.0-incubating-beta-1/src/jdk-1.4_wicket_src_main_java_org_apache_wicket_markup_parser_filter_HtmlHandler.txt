/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup parser filter
import java text parseexception
import java util hashmap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket markup componenttag
import org apache wicket markup markupelement
import org apache wicket markup parser abstractmarkupfilter
import org apache wicket util collections arrayliststack
/**
* this is a markup inline filter. it identifies html specific issues which make
* html not 100% xml compliant. e.g. tags like &lt;p&gt; often are missing the
* corresponding close tag.
*
* @author juergen donnerstag
*/
public final class htmlhandler extends abstractmarkupfilter
/** logging */
private static final log log   logfactory getlog htmlhandler class
/** tag stack to find balancing tags */
final private arrayliststack stack   new arrayliststack
/** map of simple tags. */
private static final map doesnotrequireclosetag   new hashmap
static
// tags which are allowed not be closed in html
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
doesnotrequireclosetag put    boolean true
/**
* construct.
*/
public htmlhandler
/**
* get the next markupelement from the parent markupfilter and handle it if
* the specific filter criteria are met. depending on the filter, it may
* return the markupelement unchanged, modified or it remove by asking the
* parent handler for the next tag.
*
* @see org.apache.wicket.markup.parser.imarkupfilter#nexttag()
* @return return the next eligible markupelement
*/
public markupelement nexttag   throws parseexception
// get the next tag. if null, no more tags are available
final componenttag tag    componenttag getparent   nexttag
if  tag    null
// no more tags from the markup.
// if there's still a non-simple tag left, it's an error
while  stack size   > 0
final componenttag top    componenttag stack peek
if   requiresclosetag top getname
stack pop
else
throw new parseexception     top       top getpos
top getpos
return tag
if  log isdebugenabled
log debug     tag touserdebugstring         stack
// check tag type
if  tag isopen
// push onto stack
stack push tag
else if  tag isclose
// check that there is something on the stack
if  stack size   > 0
// pop the top tag off the stack
componenttag top    componenttag stack pop
// if the name of the current close tag does not match the
// tag on the stack then we may have a mismatched close tag
boolean mismatch    top hasequaltagname tag
if  mismatch
top sethasnoclosetag true
// pop any simple tags off the top of the stack
while  mismatch     requiresclosetag top getname
top sethasnoclosetag true
// pop simple tag
top    componenttag stack pop
// does new top of stack mismatch too?
mismatch    top hasequaltagname tag
// if adjusting for simple tags did not fix the problem,
// it must be a real mismatch.
if  mismatch
throw new parseexception     top touserdebugstring
tag touserdebugstring
top getpos
// tag matches, so add pointer to matching tag
tag setopentag top
else
throw new parseexception     tag touserdebugstring
tag getpos
else if  tag isopenclose
// tag closes itself
tag setopentag tag
return tag
/**
* gets whether this tag does not require a closing tag.
*
* @param name
*            the tag's name, e.g. a, br, div, etc.
* @return true if this tag does not require a closing tag
*/
public static boolean requiresclosetag final string name
return doesnotrequireclosetag get name     null