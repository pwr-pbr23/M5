/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket validation validator
import java util map
import org apache wicket validation ivalidatable
/**
* validator for dealing with string lengths. usually this validator is used
* through the static factory methods, but it and its inner classes can also be
* subclassed directly.
*
* @author jonathan locke
* @author johan compagner
* @author igor vaynberg (ivaynberg)
*/
public abstract class stringvalidator extends abstractvalidator
/**
* gets a string range validator to check if a string length is between min
* and max.
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.range" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimum length</li>
* <li>${maximum}: the maximum length</li>
* <li>${length}: the length of the user input</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum length of the string.
* @param maximum
*            the maximum length of the string.
*
* @return the stringvalidator
*/
public static stringvalidator lengthbetween int minimum  int maximum
return new lengthbetweenvalidator minimum  maximum
/**
* gets a string minimum validator to check if a string length is greater
* then the given minimum value.
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.minimum" and the messages keys that can be used are:
* <ul>
* <li>${minimum}: the minimum length</li>
* <li>${length}: the length of the user input</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param minimum
*            the minimum length of the string.
*
* @return the stringvalidator
*/
public static stringvalidator minimumlength int minimum
return new minimumlengthvalidator minimum
/**
* gets a string maximum validator to check if a string length is smaller
* then the given maximum value.
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.maximum" and the messages keys that can be used are:
* <ul>
* <li>${maximum}: the maximum length</li>
* <li>${length}: the length of the user input</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param maximum
*            the maximum length of the string.
*
* @return the stringvalidator
*/
public static stringvalidator maximumlength int maximum
return new maximumlengthvalidator maximum
/**
* gets a string exact length validator to check if a string length is
* exactly the same as the given value
*
* if that is not the case then an error message will be generated with the
* key "stringvalidator.exact" and the messages keys that can be used are:
* <ul>
* <li>${exact}: the maximum length</li>
* <li>${length}: the length of the user input</li>
* <li>${input}: the input the user did give</li>
* <li>${name}: the name of the component that failed</li>
* <li>${label}: the label of the component - either comes from
* formcomponent.labelmodel or resource key [form-id].[form-component-id] in
* that order</li>
* </ul>
*
* @param length
*            the required length of the string.
*
* @return the stringvalidator
*/
public static stringvalidator exactlength int length
return new exactlengthvalidator length
/**
* validator to check if the length of the string is within some range
*/
public static class lengthbetweenvalidator extends stringvalidator
private static final long serialversionuid   1l
private final int minimum
private final int maximum
/**
* construct.
*
* @param minimum
* @param maximum
*/
public lengthbetweenvalidator int minimum  int maximum
this minimum   minimum
this maximum   maximum
/**
* @see org.apache.wicket.validation.validator.abstractvalidator#variablesmap(org.apache.wicket.validation.ivalidatable)
*/
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new integer minimum
map put    new integer maximum
map put    new integer   string validatable getvalue    length
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
final string value    string validatable getvalue
if  value length   < minimum    value length   > maximum
error validatable
/**
* validator to check if the length of the string meets a minumum
* requirement
*/
public static class minimumlengthvalidator extends stringvalidator
private static final long serialversionuid   1l
private final int minimum
/**
* construct.
*
* @param minimum
*/
public minimumlengthvalidator int minimum
this minimum   minimum
/**
* @see org.apache.wicket.validation.validator.abstractvalidator#variablesmap(org.apache.wicket.validation.ivalidatable)
*/
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new integer minimum
map put    new integer   string validatable getvalue    length
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    string validatable getvalue    length   < minimum
error validatable
/**
* validator to check if the length of the string is exactly the specified
* length
*/
public static class exactlengthvalidator extends stringvalidator
private static final long serialversionuid   1l
private final int length
/**
* construct.
*
* @param length
*/
public exactlengthvalidator int length
this length   length
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new integer   string validatable getvalue    length
map put    new integer this length
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    string validatable getvalue    length      length
error validatable
/**
* validator to check if the length of the string meets a maximum
* requirement
*/
public static class maximumlengthvalidator extends stringvalidator
private static final long serialversionuid   1l
private final int maximum
private maximumlengthvalidator int maximum
this maximum   maximum
/**
* @see org.apache.wicket.validation.validator.abstractvalidator#variablesmap(org.apache.wicket.validation.ivalidatable)
*/
protected map variablesmap ivalidatable validatable
final map map   super variablesmap validatable
map put    new integer maximum
map put    new integer   string validatable getvalue    length
return map
/**
* @see org.apache.wicket.markup.html.form.validation.abstractvalidator#resourcekey(org.apache.wicket.markup.html.form.formcomponent)
*/
protected string resourcekey
return
protected void onvalidate ivalidatable validatable
if    string validatable getvalue    length   > maximum
error validatable