/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html form
import java util list
import org apache wicket model imodel
import org apache wicket util string appendingstringbuffer
/**
* abstract base class for single-select choices.
*
* @author jonathan locke
* @author eelco hillenius
* @author johan compagner
*/
public abstract class abstractsingleselectchoice extends abstractchoice
/** string to display when the selected value is null and nullvalid is false. */
private static final string choose_one
private static final string no_selection_value
private static final string empty_string
/** is the null value a valid value? */
private boolean nullvalid   false
/**
* @see abstractchoice#abstractchoice(string)
*/
public abstractsingleselectchoice final string id
super id
/**
* @see abstractchoice#abstractchoice(string, list)
*/
public abstractsingleselectchoice final string id  final list choices
super id  choices
/**
* @param id
* @param data
* @param renderer
* @see abstractchoice#abstractchoice(string, list ,ichoicerenderer)
*/
public abstractsingleselectchoice final string id  final list data
final ichoicerenderer renderer
super id  data  renderer
/**
* @see abstractchoice#abstractchoice(string, imodel, list)
*/
public abstractsingleselectchoice final string id  imodel model  final list data
super id  model  data
/**
* @param id
* @param model
* @param data
* @param renderer
* @see abstractchoice#abstractchoice(string, imodel, list, ichoicerenderer)
*/
public abstractsingleselectchoice final string id  imodel model  final list data
final ichoicerenderer renderer
super id  model  data  renderer
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel)
*/
public abstractsingleselectchoice string id  imodel choices
super id  choices
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel,imodel)
*/
public abstractsingleselectchoice string id  imodel model  imodel choices
super id  model  choices
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel,ichoicerenderer)
*/
public abstractsingleselectchoice string id  imodel choices  ichoicerenderer renderer
super id  choices  renderer
/**
* @see org.apache.wicket.markup.html.form.abstractchoice#abstractchoice(string,
*      imodel, imodel,ichoicerenderer)
*/
public abstractsingleselectchoice string id  imodel model  imodel choices
ichoicerenderer renderer
super id  model  choices  renderer
/**
* @see formcomponent#getmodelvalue()
*/
public final string getmodelvalue
final object object   getmodelobject
if  object    null
int index   getchoices   indexof object
return getchoicerenderer   getidvalue object  index
return no_selection_value
/**
* is the <code>null</code> value a valid value? if it is, it means that
* the null value will be displayed, typically to the user as 'choose one'
* or something similar. note that this doesn't say anything about whether a
* null value (not selecting a value) is permitted; use
* {@link #setrequired(boolean)} for that.
*
* @return <code>true</code> when the <code>null</code> value is
*         allowed.
*/
public boolean isnullvalid
return nullvalid
/**
* is the <code>null</code> value a valid value? if it is, it means that
* the null value will be displayed, typically to the user as 'choose one'
* or something similar. note that this doesn't say anything about whether a
* null value (not selecting a value) is permitted; use
* {@link #setrequired(boolean)} for that.
*
* @param nullvalid
*            whether null is a valid value
* @return this for chaining
*/
public abstractsingleselectchoice setnullvalid boolean nullvalid
this nullvalid   nullvalid
return this
/**
* @see org.apache.wicket.markup.html.form.formcomponent#convertvalue(string[])
*/
protected final object convertvalue final string value
string tmp   value    null    value length > 0 ? value   null
list choices   getchoices
for  int index   0  index < choices size    index
// get next choice
final object choice   choices get index
if  getchoicerenderer   getidvalue choice  index  equals tmp
return choice
return null
/**
* the localizer will be ask for the property to display depending on if
* null is allowed or not it will ask for:
*
* <ul>
* <li>nullvalid: when null is valid and by default it will show an empty
* string as a choice.</li>
* <li>null: when null is not a valid choice and it will make a choice with
* "choose one"</li>
* </ul>
*
* the choice for null is valid will always be returned. the choice when
* null is not valid will only be returned if the selected object is null.
*
* @see org.apache.wicket.markup.html.form.abstractchoice#getdefaultchoice(object)
*/
protected charsequence getdefaultchoice final object selected
// is null a valid selection value?
if  isnullvalid
// null is valid, so look up the value for it
final string option   getlocalizer   getstring    this
// the <option> tag buffer
final appendingstringbuffer buffer   new appendingstringbuffer 32   option length
// add option tag
buffer append
// if null is selected, indicate that
if  selected    null
buffer append  selected
// add body of option tag
buffer append      append option  append
return buffer
else
// null is not valid. is it selected anyway?
if  selected    null    selected equals no_selection_value
selected equals empty_string
// force the user to pick a non-null value
final string option   getlocalizer   getstring    this  choose_one
return new appendingstringbuffer  selected
append option  append
return
/**
* gets whether the given value represents the current selection.
*
*
* aram object the object to check
*
* @param index
*            the index of the object in the collection
* @param selected
*            the current selected id value
* @return whether the given value represents the current selection
*/
protected boolean isselected final object object  int index  string selected
return selected    null    selected equals getchoicerenderer   getidvalue object  index