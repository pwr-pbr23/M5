/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html image resource
import java util locale
import org apache wicket application
import org apache wicket component
import org apache wicket iclusterable
import org apache wicket iresourcefactory
import org apache wicket iresourcelistener
import org apache wicket markupcontainer
import org apache wicket requestcycle
import org apache wicket resource
import org apache wicket resourcereference
import org apache wicket wicketruntimeexception
import org apache wicket markup componenttag
import org apache wicket markup html packageresource
import org apache wicket markup html border border
import org apache wicket util lang objects
import org apache wicket util parse metapattern group
import org apache wicket util parse metapattern metapattern
import org apache wicket util parse metapattern optionalmetapattern
import org apache wicket util parse metapattern parsers metapatternparser
import org apache wicket util string strings
import org apache wicket util value valuemap
/**
* this class is intended for internal use in implementing locale sensitive
* components that use image resources and should not be used directly by
* end-users.
* <p>
* this class contains the logic for extracting static image resources
* referenced by the src attribute of component tags and keeping these static
* image resources in sync with the component locale.
* <p>
* if no image is specified by the src attribute of an img tag, then any value
* attribute is inspected. if there is a value attribute, it must be of the form
* "[factoryname]:[sharedimagename]?:[specification]". [factoryname] is the name
* of a resource factory that has been added to application (for example,
* defaultbuttonimageresourcefactory is installed by default under the name
* "buttonfactory"). the [sharedimagename] value is optional and gives a name
* under which a given generated image is shared. for example, a cancel button
* image generated by the value attribute "buttonfactory:cancelbutton:cancel" is
* shared under the name "cancelbutton" and this specification will cause a
* component to reference the same image resource no matter what page it appears
* on, which is a very convenient and efficient way to create and share images.
* the [specification] string which follows the second colon is passed directly
* to the image factory and its format is dependent on the specific image
* factory. for details on the default buttonfactory, see
* {@link org.apache.wicket.markup.html.image.resource.defaultbuttonimageresourcefactory}.
* <p>
* finally, if there is no src attribute and no value attribute, the image
* component's model is inspected. if the model contains a resource or resource
* reference, this image is used, otherwise the model is converted to a
* string and that value is used as a path to load the image.
*
* @author jonathan locke
*/
public final class localizedimageresource implements iclusterable  iresourcelistener
private static final long serialversionuid   1l
/** what kind of resource it is. true==resource is set, false==resourcereference is set, null none */
private boolean resourcekind
/** the component that is referencing this image resource */
private component component
/** the image resource this image component references */
private resource resource
/** the resource reference */
private resourcereference resourcereference
/** the resource parameters */
private valuemap resourceparameters
/** the locale of the image resource */
private transient locale locale
/** the style of the image resource */
private transient string style
/**
* parses image value specifications of the form "[factoryname]:
* [shared-image-name]?:[specification]"
*
* @author jonathan locke
*/
private static final class imagevalueparser extends metapatternparser
/** factory name */
private static final group factoryname   new group metapattern variable_name
/** image reference name */
private static final group imagereferencename   new group metapattern variable_name
/** factory specification string */
private static final group specification   new group metapattern anything_non_empty
/** meta pattern. */
private static final metapattern pattern   new metapattern new metapattern   factoryname
metapattern colon
new optionalmetapattern new metapattern   imagereferencename
metapattern colon  specification
/**
* construct.
*
* @param input
*            to parse
*/
private imagevalueparser final charsequence input
super pattern  input
/**
* @return the factory name
*/
private string getfactoryname
return factoryname get matcher
/**
* @return returns the imagereferencename.
*/
private string getimagereferencename
return imagereferencename get matcher
/**
* @return returns the specification.
*/
private string getspecification
return specification get matcher
/**
* constructor
*
* @param component
*            the component that owns this localized image resource
*/
public localizedimageresource final component component
this component   component
this locale   component getlocale
this style   component getstyle
/**
* binds this resource if it is shared
*/
public final void bind
// if we have a resource reference
if  resourcereference    null
// bind the reference to the application
resourcereference bind component getapplication
// then dereference the resource
resource   resourcereference getresource
/**
* @see org.apache.wicket.iresourcelistener#onresourcerequested()
*/
public final void onresourcerequested
bind
resource onresourcerequested
/**
* @param resource
*            the resource to set.
*/
public final void setresource final resource resource
resourcekind   boolean true
this resource   resource
/**
* @param resourcereference
*            the resource to set.
*/
public final void setresourcereference final resourcereference resourcereference
setresourcereference resourcereference  null
/**
* @return if it is stateless (if resource is null)
*/
public final boolean isstateless
return this resource    null
/**
* @param resourcereference
*            the resource to set.
* @param resourceparameters
* 			  the resource parameters for the shared resource
*/
public final void setresourcereference final resourcereference resourcereference final valuemap resourceparameters
resourcekind   boolean false
this resourcereference   resourcereference
this resourceparameters   resourceparameters
bind
/**
* @param tag
*            the tag to inspect for an optional src attribute that might
*            reference an image.
* @throws wicketruntimeexception
*             thrown if an image is required by the caller, but none can be
*             found.
*/
public final void setsrcattribute final componenttag tag
// if locale has changed from the initial locale used to attach image
// resource, then we need to reload the resource in the new locale
if   resourcekind    null
objects equal locale  component getlocale
objects equal style  component getstyle
// get new component locale and style
this locale   component getlocale
this style   component getstyle
// invalidate current resource so it will be reloaded/recomputed
this resourcereference   null
this resource   null
else
// todo post 1.2: should we have support for locale changes when the
// resource reference (or resource??) is set manually..
// we should get a new resource reference for the current locale then
// that points to the same resource but with another locale if it exists.
// something like sharedresource.getresourcereferenceforlocale(resourcereference);
// check if the model contains a resource, if so, load the resource from the model.
object modelobject   component getmodelobject
if   modelobject instanceof resourcereference
resourcereference    resourcereference  modelobject
else if   modelobject instanceof resource
resource    resource  modelobject
// need to load image resource for this component?
if  resource    null    resourcereference    null
// get src attribute of tag
final charsequence src   tag getstring
if  src    null
// try to load static image
loadstaticimage src tostring
else
// get value attribute of tag
final charsequence value   tag getstring
if  value    null
// try to generate an image using an image factory
newimage value
else
// load static image using model object as the path
loadstaticimage component getmodelobjectasstring
// get url for resource
final charsequence url
if  this resourcereference    null
// create url to shared resource
url   requestcycle get   urlfor resourcereference  resourceparameters
else
// create url to component
url   component urlfor iresourcelistener interface
// set the src attribute to point to the component or shared resource
tag put    strings replaceall requestcycle get   getoriginalresponse   encodeurl url
/**
* @param application
*            the application
* @param factoryname
*            the name of the image resource factory
* @return the resource factory
* @throws wicketruntimeexception
*             thrown if factory cannot be found
*/
private iresourcefactory getresourcefactory final application application
final string factoryname
final iresourcefactory factory   application getresourcesettings   getresourcefactory factoryname
// found factory?
if  factory    null
throw new wicketruntimeexception
factoryname
return factory
/**
* tries to load static image at the given path and throws an exception if
* the image cannot be located.
*
* @param path
*            the path to the image
* @throws wicketruntimeexception
*             thrown if the image cannot be located
*/
private void loadstaticimage final string path
if   path indexof        1      path indexof        1      path indexof        1
throw new wicketruntimeexception
path
markupcontainer parent   component findparentwithassociatedmarkup
if  parent instanceof border
parent   parent getparent
final class scope   parent getclass
this resourcereference   new resourcereference scope  path
private static final long serialversionuid   1l
/**
* @see org.apache.wicket.resourcereference#newresource()
*/
protected resource newresource
packageresource pr   packageresource get getscope    getname    localizedimageresource this locale  style
locale   pr getlocale
return pr
resourcereference setlocale locale
resourcereference setstyle style
bind
/**
* generates an image resource based on the attribute values on tag
*
* @param value
*            the value to parse
*/
private void newimage final charsequence value
// parse value
final imagevalueparser valueparser   new imagevalueparser value
// does value match parser?
if  valueparser matches
final string imagereferencename   valueparser getimagereferencename
final string specification   strings replacehtmlescapenumber valueparser getspecification
final string factoryname   valueparser getfactoryname
final application application   component getapplication
// do we have a reference?
if   strings isempty imagereferencename
// is resource already available via the application?
if  application getsharedresources   get application class  imagereferencename  locale  style  true     null
// resource not available yet, so create it with factory and
// share via application
final resource imageresource   getresourcefactory application  factoryname
newresource specification  locale  style
application getsharedresources   add application class  imagereferencename  locale  style
imageresource
// create resource reference
this resourcereference   new resourcereference application class
imagereferencename
resourcereference setlocale locale
resourcereference setstyle style
else
this resource   getresourcefactory application  factoryname
newresource specification  locale  style
else
throw new wicketruntimeexception
value
?