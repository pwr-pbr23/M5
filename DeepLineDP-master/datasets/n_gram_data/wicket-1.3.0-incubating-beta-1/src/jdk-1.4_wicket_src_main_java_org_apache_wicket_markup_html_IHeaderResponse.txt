/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import org apache wicket resourcereference
import org apache wicket response
/**
* interface that is used to render header elements (usually javascript and css
* references).
*
* implementation of this interface is responsible for filtering duplicate
* contributions (so that for example the same javascript is not loaded twice)
* during the same request.
*
* @author matej knopp
*/
public interface iheaderresponse
/**
* writes a javascript reference, if the specified reference hasn't been
* rendered yet.
*
* @param reference
*            resource reference pointing to the javascript resource
*/
public void renderjavascriptreference resourcereference reference
/**
* writes a javascript reference, if the specified reference hasn't been
* rendered yet.
*
* @param url
*            url of the the javascript resource
*/
public void renderjavascriptreference string url
/**
* renders javascript code to the response, if the javascript has not
* already been rendered.
*
* the necessary surrounding <code>script</code> tags will be added to the
* output.
*
* @param javascript
*            javacript content to be rendered.
*
* @param id
*            unique id for the javascript element. this can be null,
*            however in that case the ajax header contribution can't detect
*            duplicate script fragments.
*/
public void renderjavascript charsequence javascript  string id
/**
* writes a css reference, if the specified reference hasn't been rendered
* yet.
*
* @param reference
*            resource reference pointing to the css resource
*/
public void rendercssreference resourcereference reference
/**
* writes a css reference, if the specified reference hasn't been rendered
* yet.
*
* @param url
*            url of the css resource
*/
public void rendercssreference string url
/**
* writes a css reference, if the specified reference hasn't been rendered
* yet.
*
* @param reference
*            resource reference pointing to the css resource
* @param media
*            the media type for this css ("print", "screen", etc.)
*/
public void rendercssreference resourcereference reference  string media
/**
* writes a css reference, if the specified reference hasn't been rendered
* yet.
*
* @param url
*            url of the css resource
* @param media
*            the media type for this css ("print", "screen", etc.)
*/
public void rendercssreference string url  string media
/**
* renders an arbitrary string to the header. the string is only rendered if
* the same string hasn't been rendered before.
* <p>
* note: this method is kind of dangerous as users are able to write to the
* output whatever they like.
*
* @param string
*            string to be rendered to head
*/
public void renderstring charsequence string
/**
* marks the given object as rendered. the object can be anything (string,
* resource reference, etc...). the purpose of this function is to allow
* user to manually keep track of rendered items. this can be useful for
* items that are expensive to generate (like interpolated text).
*
* @param object
*            object to be marked as rendered.
*/
public void markrendered object object
/**
* returns whether the given object has been marked as rendered.
* <ul>
* <li>methods <code>renderjavascriptreference</code> and
* <code>rendercssreference</code> mark the specified
* {@link resourcereference} as rendered.
* <li>method <code>renderjavascript</code> marks list of two elements
* (first is javascript body charsequence and second is id) as rendered.
* <li>method <code>renderstring</code> marks the whole string as
* rendered.
* <li>method <code>markrendered</code> can be used to mark an arbitrary
* object as rendered
* </ul>
*
* @param object
*            object that is queried to be rendered
* @return whether the object has been marked as rendered during the request
*/
public boolean wasrendered object object
/**
* returns the response that can be used to write arbitrary text to the head
* section.
* <p>
* note: this method is kind of dangerous as users are able to write to the
* output whatever they like.
*
* @return reponse
*/
public response getresponse
/**
* renders javascript that is executed right after the dom is built, before
* external resources (e.g. images) are loaded.
*
* @param javascript
*/
public void renderondomreadyjavascript string javascript
/**
* renders javascript that is executed after the entire page is loaded.
*
* @param javascript
*/
public void renderonloadjavascript string javascript