/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import java lang reflect invocationtargetexception
import java lang reflect method
import java util collections
import java util hashmap
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket authorization authorizationexception
import org apache wicket request requestparameters
import org apache wicket request target component listener listenerinterfacerequesttarget
import org apache wicket util lang classes
/**
* base class for request listener interfaces.
*
* @author jonathan locke
*/
public class requestlistenerinterface
/** map from name to request listener interface */
private static final map interfaces   collections synchronizedmap new hashmap
/** log. */
private static final log log   logfactory getlog requestlistenerinterface class
/**
* looks up a request interface listener by name.
*
* @param interfacename
*            the interface name
* @return the requestlistenerinterface object, or null if none is found
*
*/
public static final requestlistenerinterface forname final string interfacename
return  requestlistenerinterface interfaces get interfacename
/** the listener interface method */
private method method
/** the name of this listener interface */
private string name
/**
* whether or not this listener is targetted for a specific page version. if
* recordversion is true the page will be rolled back to the version which
* created the url, if false the latest version of the page will be used.
*/
private boolean recordspageversion   true
/**
* constructor that creates listener interfaces which record the page
* version.
*
* @param listenerinterfaceclass
*            the interface class, which must extend irequestlistener.
*/
public requestlistenerinterface final class listenerinterfaceclass
this listenerinterfaceclass  true
/**
* constructor.
*
* @param listenerinterfaceclass
*            the interface class, which must extend irequestlistener.
* @param recordspageversion
*            whether or not urls encoded for this interface contain the
*            page version. if set to false the latest page version is
*            always used.
*/
public requestlistenerinterface final class listenerinterfaceclass  boolean recordspageversion
// ensure that i extends irequestlistener
if   irequestlistener class isassignablefrom listenerinterfaceclass
throw new illegalargumentexception     listenerinterfaceclass
this recordspageversion   recordspageversion
// get interface methods
final method methods   listenerinterfaceclass getmethods
// if there is only one method
if  methods length    1
// and that method takes no parameters
if  methods getparametertypes   length    0
this method   methods
else
throw new illegalargumentexception     methods
listenerinterfaceclass
else
throw new illegalargumentexception     listenerinterfaceclass
// save short class name
this name   classes simplename listenerinterfaceclass
// register this listener
register
/**
* @return the method for this request listener interface
*/
public final method getmethod
return method
/**
* @return the name of this request listener interface
*/
public final string getname
return name
/**
* @return true if urls encoded for this interface should record the page
*         version, false if they should always be encoded for the latest
*         page version
*/
public final boolean getrecordspageversion
return recordspageversion
/**
* invokes a given interface on a component.
*
* @param page
*            the page that contains the component
* @param component
*            the component
*/
public final void invoke final page page  final component component
page beforecallcomponent component  this
if   component isenabled       component isvisibleinhierarchy
// just return so that we have a silent fail and just re-render the
// page
log info     component
return
try
// invoke the interface method on the component
method invoke component  new object
catch  invocationtargetexception e
// honor redirect exception contract defined in ipagefactory
if  e gettargetexception   instanceof abstractrestartresponseexception
e gettargetexception   instanceof authorizationexception
e gettargetexception   instanceof wicketruntimeexception
throw  runtimeexception e gettargetexception
throw new wicketruntimeexception     method getname
method getdeclaringclass         component
e
catch  exception e
throw new wicketruntimeexception     method getname
method getdeclaringclass         component
e
finally
page aftercallcomponent component  this
/**
* creates a new request target for this request listener interface
*
* @param page
*            the page
* @param component
*            the component
* @param listener
*            the listener to call
* @param requestparameters
*            request parameters
* @return the request target
*/
public irequesttarget newrequesttarget final page page  final component component
final requestlistenerinterface listener  final requestparameters requestparameters
return new listenerinterfacerequesttarget page  component  listener  requestparameters
/**
* method to call to register this interface for use
*/
public void register
// register this listener interface
registerrequestlistenerinterface this
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     name       method
/**
* this method is not part of the wicket public api. do not call it.
* <p>
* in previous versions of wicket, request listeners were manually
* registered by calling this method. now there is a first class
* requestlistenerinterface object which should be constructed as a constant
* member of the interface to enable automatic interface registration.
* <p>
* adds a request listener interface to the map of interfaces that can be
* invoked by outsiders.
*
* @param requestlistenerinterface
*            the request listener interface object
*/
private final void registerrequestlistenerinterface
final requestlistenerinterface requestlistenerinterface
// check that a different interface method with the same name has not
// already been registered
final requestlistenerinterface existinginterface   requestlistenerinterface
forname requestlistenerinterface getname
if  existinginterface    null
existinginterface getmethod      requestlistenerinterface getmethod
throw new illegalstateexception
requestlistenerinterface
existinginterface
// save this interface method by the non-qualified class name
interfaces put requestlistenerinterface getname    requestlistenerinterface
log info     this