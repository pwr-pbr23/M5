/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io ioexception
import java io reader
/**
* this is not a reader like e.g. filereader. it rather reads the whole data
* untill the end from a source reader into memory and besides that it maintains
* the current position (like a reader) it provides string like methods which
* conviniently let you navigate (usually forward) in the stream.
* <p>
* because the source data are expected to be text, the line and column numbers
* are maintained as well for location precise error messages. but it does not
* automatically update the line and column numbers. you must call
* {@link #countlinesto(int)}
*
* @author juergen donnerstag
*/
public final class fullybufferedreader
/** all the chars from the resouce */
private string input
/** position in parse. */
private int inputposition
/** current line number */
private int linenumber   1
/** current column number. */
private int columnnumber   1
/** last place we counted lines from. */
private int lastlinecountindex
/** a variable to remember a certain position in the markup */
private int positionmarker
/**
* read all the data from the resource into memory.
*
* @param reader
*            the source reader to load the data from
* @throws ioexception
*/
public fullybufferedreader final reader reader  throws ioexception
super
this input   streams readstring reader
/**
* get the characters from the position marker to topos.
* <p>
* if topos < 0, than get all data from the position marker until the end.
* if topos less than the current position marker than return an empty
* string ""
*
* @param topos
*            index of first character not included
* @return raw markup (a string) in between these two positions.
*/
public final charsequence getsubstring int topos
if  topos < 0
topos   this input length
else if  topos < this positionmarker
return
return this input subsequence this positionmarker  topos
/**
* get the characters from in between both positions including the char at
* frompos, excluding the char at topos
*
* @param frompos
*            first index
* @param topos
*            second index
* @return the string (raw markup) in between both positions
*/
public final charsequence getsubstring final int frompos  final int topos
return this input subsequence frompos  topos
/**
* gets the current input position
*
* @return input position
*/
public final int getposition
return this inputposition
/**
* remember the current position in markup
*
* @param pos
*/
public final void setpositionmarker final int pos
this positionmarker   pos
/**
* @return the markup to be parsed
*/
public string tostring
return this input
/**
* counts lines starting where we last left off up to the index provided.
*
* @param end
*            end index
*/
public final void countlinesto final int end
for  int i   lastlinecountindex  i < end  i
final char ch   this input charat i
if  ch
columnnumber   1
linenumber
else if  ch
columnnumber
lastlinecountindex   end
/**
* find a char starting at the current input position
*
* @param ch
*            the char to search for
* @return -1 if not found
*/
public final int find final char ch
return input indexof ch  inputposition
/**
* find a char starting at the position provided
*
* @param ch
*            the char to search for
* @param startpos
*            the index to start at
* @return -1 if not found
*/
public final int find final char ch  final int startpos
return input indexof ch  startpos
/**
* find the string starting at the current input position
*
* @param str
*            the string to search for
* @return -1 if not found
*/
public final int find final string str
return input indexof str  inputposition
/**
* find the string starting at the position provided
*
* @param str
*            the string to search for
* @param startpos
*            the index to start at
* @return -1 if not found
*/
public final int find final string str  final int startpos
return input indexof str  startpos
/**
* position the reader at the index provided. could be anywhere within the
* data
*
* @param pos
*            the new current position
*/
public final void setposition final int pos
this inputposition   pos
/**
* get the column number. note: the column number depends on you calling
* countlinesto(pos). it is not necessarily the column number matching the
* current position in the stream.
*
* @return column number
*/
public final int getcolumnnumber
return this columnnumber
/**
* get the line number. note: the line number depends on you calling
* countlinesto(pos). it is not necessarily the line number matching the
* current position in the stream.
*
* @return line number
*/
public final int getlinenumber
return this linenumber
/**
* get the number of character read from the source resource. the whole
* content, not just until the current position.
*
* @return size of the data
*/
public final int size
return this input length
/**
* get the character at the position provided
*
* @param pos
*            the position
* @return char at position
*/
public final char charat int pos
return this input charat pos