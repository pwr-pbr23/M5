/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples repeater
import java util iterator
import org apache wicket markup html form form
import org apache wicket markup html form submitlink
import org apache wicket markup html form textfield
import org apache wicket markup html link link
import org apache wicket markup html panel panel
import org apache wicket markup repeater item
import org apache wicket markup repeater oddevenitem
import org apache wicket markup repeater refreshingview
import org apache wicket markup repeater reuseifmodelsequalstrategy
import org apache wicket markup repeater util modeliteratoradapter
import org apache wicket model imodel
import org apache wicket model propertymodel
/**
* page that demonstrates using refreshingview in a form. the component reuses
* its items, to allow adding or removing rows without necessarily validating
* the form, and preserving component state which preserves error messages, etc.
*/
public class formpage extends basepage
final form form
/**
* constructor
*/
public formpage
form   new form
add form
// create a repeater that will display the list of contacts.
refreshingview refreshingview   new refreshingview
protected iterator getitemmodels
// for simplicity we only show the first 10 contacts
iterator contacts   databaselocator getdatabase   find 0  10     true
iterator
// the iterator returns contact objects, but we need it to
// return models, we use this handy adapter class to perform
// on-the-fly conversion.
return new modeliteratoradapter contacts
protected imodel model object object
return new detachablecontactmodel  contact object
protected void populateitem final item item
// populate the row of the repeater
imodel contact   item getmodel
item add new actionpanel    contact
// fixme use compoundpropertymodel!
item add new textfield    new propertymodel contact
item add new textfield    new propertymodel contact
item add new textfield    new propertymodel contact
item add new textfield    new propertymodel contact
item add new textfield    new propertymodel contact
protected item newitem string id  int index  imodel model
// this item sets markup class attribute to either 'odd' or
// 'even' for decoration
return new oddevenitem id  index  model
// because we are in a form we need to preserve state of the component
// hierarchy (because it might contain things like form errors that
// would be lost if the hierarchy for each item was recreated every
// request by default), so we use an item reuse strategy.
refreshingview setitemreusestrategy reuseifmodelsequalstrategy getinstance
form add refreshingview
/**
* panel that houses row-actions
*/
private class actionpanel extends panel
/**
* @param id
*            component id
* @param model
*            model for contact
*/
public actionpanel string id  imodel model
super id  model
add new link
public void onclick
formpage this setselected  contact getparent   getmodelobject
submitlink removelink   new submitlink    form
public void onsubmit
contact contact    contact getparent   getmodelobject
info     contact
databaselocator getdatabase   delete contact
removelink setdefaultformprocessing false
add removelink