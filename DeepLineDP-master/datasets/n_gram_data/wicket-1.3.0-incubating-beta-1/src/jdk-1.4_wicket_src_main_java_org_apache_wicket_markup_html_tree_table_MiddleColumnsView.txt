/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html tree table
import java text numberformat
import java util arraylist
import java util arrays
import java util iterator
import java util list
import java util locale
import javax swing tree treenode
import org apache wicket component
import org apache wicket requestcycle
import org apache wicket response
import org apache wicket markup markupstream
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html tree table columnlocation unit
import org apache wicket response nullresponse
/**
* class that renders cells of columns aligned in the middle. this class also
* takes care of counting their widths and of column spans.
*
* @author matej knopp
*/
final class middlecolumnsview extends webmarkupcontainer
private static final long serialversionuid   1l
private final list columns   new arraylist
private final list components   new arraylist
private treenode node
private final list renderables   new arraylist
private boolean treehasleftcolumn
/**
* constructor.
*
* @param id
*            the component id
* @param node
*            the tree node
* @param treehasleftcolumn
* 			  whether there is a column aligned to left in the tree table
*/
public middlecolumnsview string id  treenode node  boolean treehasleftcolumn
super id
this node   node
this treehasleftcolumn   treehasleftcolumn
/**
* adds a column to be rendered.
*
* @param column
*            the column to render
* @param component
*            the component
* @param renderable
*            the renderer
*/
public void addcolumn icolumn column  component component  irenderable renderable
if  column isvisible
columns add column
components add component
renderables add renderable
/**
* computes the percentagle widths of columns. if a column spans over other
* columns, the widths of those columns will be zero.
*
* @return widths of columns
*/
protected double computecolumnwidths
// initialize the columns array
double result   new double
arrays fill result  0d
// the sum of weights of all columns
double sum   0d
double whole   99 8d
// go over all columns, check their alignment and count sum of their
// weights
for  iterator i   columns iterator    i hasnext
icolumn column    icolumn i next
// check if the unit is right
if  column getlocation   getunit      unit proportional
throw new illegalstateexception
sum    column getlocation   getsize
int index   0     index of currently processed column
int spancolumn   0     index of column that is spanning over currently
// processed column (if any)
int spanleft   0     over how many columns does the spanning column
// span
for  iterator i   columns iterator    i hasnext
icolumn column    icolumn i next
int ix   index     to which column should we append the size
if  spanleft > 0     is there a column spanning over current
// column?
ix   spancolumn     the size should be appended to the
// spanning
// column
spanleft
// add the percentage size to the column
result    math round  column getlocation   getsize      sum   whole
// wants this column to span and no other column is spanning over
// this column?
if  spanleft    0    column getspan node  > 1
int maxspan   columns size     columns indexof column      how
// many
// columns
// left
int span   column getspan node    1     how much columns want
// the column to span
// over
spancolumn   index     index of column that is spanning
spanleft   span < maxspan ? span   maxspan     set the number of
// columns spanned
// over
index
// count the sum
double together   0d
for  int i   0  i < result length  i
together    result
// is it bigger than 99.8? that can cause layout problems in ie
if  together > 99 8d
// this can happen - rounding error. just decrease the last one
for  int i   result length   1  i >  0    i
if  result    0d
result    together   99 8d
break
return result
/**
* renders all columns.
*
* @param markupstream
*            the markup stream of this component
*/
protected void onrender final markupstream markupstream
final int markupstart   markupstream getcurrentindex
response response   requestcycle get   getresponse
double widths   computecolumnwidths
boolean rendered   false     has been at least one column  component
// not renderable) rendered?
numberformat nf   numberformat getnumberinstance locale english
nf setmaximumfractiondigits 0
nf setmaximumfractiondigits 2
for  int i   0  i < columns size      i
component component    component components get i
irenderable renderable    irenderable renderables get i
icolumn column    icolumn columns get i
// write the wrapping column markup
response write  b_  width  %
// determine whether we should render the left border
if   treehasleftcolumn    i    0
response write  d_
else
response write  c_
if  component    null     is there a component for current column?
// render the component
markupstream setcurrentindex markupstart
component render markupstream
rendered   true
else if  renderable    null     no component   try to render
// renderable
renderable render node  response
else
// no renderable or component. fail
throw new illegalstateexception
// end of wrapping markup
response write
// does this component span over other columns
int span   column getspan node
if  span > 1
// iterate through the columns and if any of them has a
// component,
// render the component to null response (otherwise the
// component will
// complain that it hasn't been rendered
for  int j   1  j < span    i < components size      j
i
if  components get i     null
response old   requestcycle get   setresponse nullresponse getinstance
markupstream setcurrentindex markupstart
component components get i   render markupstream
requestcycle get   setresponse old
rendered   true
// if no component was rendered just advance in the markup stream
if  rendered    false
markupstream skipcomponent