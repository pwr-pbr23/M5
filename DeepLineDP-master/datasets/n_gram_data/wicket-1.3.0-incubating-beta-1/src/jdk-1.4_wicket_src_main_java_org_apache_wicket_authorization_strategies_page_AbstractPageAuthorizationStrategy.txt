/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies page
import org apache wicket component
import org apache wicket page
import org apache wicket authorization action
import org apache wicket authorization iauthorizationstrategy
/**
* an abstract base class for implementing simple authorization of pages. users
* should override {@link #ispageauthorized(class)}, which gets called for page
* classes when they are being constructed.
*
* @author jonathan locke
* @author eelco hillenius
*/
public abstract class abstractpageauthorizationstrategy implements iauthorizationstrategy
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isactionauthorized(org.apache.wicket.component,
*      org.apache.wicket.authorization.action)
*/
public boolean isactionauthorized final component component  final action action
return true
/**
* @see org.apache.wicket.authorization.iauthorizationstrategy#isinstantiationauthorized(java.lang.class)
*/
public final boolean isinstantiationauthorized final class   <component>   componentclass
if  instanceof componentclass  page class
return ispageauthorized componentclass
return true
/**
* works like instanceof operator where instanceof(a, b) is the runtime
* equivalent of (a instanceof b).
*
* @param type
*            the type to check
* @param supertype
*            the interface or superclass that the type needs to implement
*            or extend
* @return true if the type is an instance of the supertype
*/
protected boolean instanceof final class type  final class supertype
return supertype isassignablefrom type
/**
* whether to page may be created. returns true by default.
*
* @param pageclass
*            the page class
* @return true if to page may be created
*/
protected boolean ispageauthorized class   <page>   pageclass
return true