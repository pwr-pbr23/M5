/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup html
import java io file
import java io ioexception
import java net jarurlconnection
import java net uri
import java net urisyntaxexception
import java net url
import java net urlconnection
import java util arraylist
import java util enumeration
import java util list
import java util locale
import java util jar jarentry
import java util jar jarfile
import java util regex pattern
import javax servlet http httpservletresponse
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket abortexception
import org apache wicket application
import org apache wicket requestcycle
import org apache wicket sharedresources
import org apache wicket wicketruntimeexception
import org apache wicket protocol http webrequestcycle
import org apache wicket protocol http servlet abortwithweberrorcodeexception
import org apache wicket util lang packagename
import org apache wicket util lang packages
import org apache wicket util resource iresourcestream
import org apache wicket util string strings
/**
* represents a localizable static resource.
* <p>
* use like eg:
*
* <pre>
* packageresource img_unknown = packageresource.get(editpage.class, &quot;questionmark.gif&quot;);
* </pre>
*
* where the static resource references image 'questionmark.gif' from the the
* package that editpage is in to get a package resource.
* </p>
*
* @author jonathan locke
* @author eelco hillenius
*/
public class packageresource extends webresource
/**
* exception thrown when the creation of a package resource is not allowed.
*/
public static final class packageresourceblockedexception extends wicketruntimeexception
private static final long serialversionuid   1l
/**
* construct.
*
* @param message
*/
public packageresourceblockedexception string message
super message
/**
* common extension pattern for css files; matches all files with extension
* 'css'.
*
* @deprecated will be removed in 2.0; contribute resources one by one
*             instead
*/
public static final pattern extension_css   pattern compile
/**
* common extension pattern for javascript files; matches all files with
* extension 'js'.
*
* @deprecated will be removed in 2.0; contribute resources one by one
*             instead
*/
public static final pattern extension_js   pattern compile
/** log. */
private static final log log   logfactory getlog packageresource class
private static final long serialversionuid   1l
/**
* binds the resources that match the provided pattern to the given
* application object. will create any resources if not already in the
* shared resources of the application object.
*
* @param application
*            the application to bind to.
* @param scope
*            the scope of the resource.
* @param pattern
*            a regular expression to match against the contents of the
*            package of the provided scope class (eg &quot;.*\\.js&quot;
*            will add all the files with extension &quot;js&quot; from that
*            package).
*
* @deprecated since wicket 1.2.1 this method is effectively a no-op.
*             {@link packageresource package resources} are automatically
*             tried and bound as shared resources so that they don't have
*             to be pre-registered anymore. will be removed in 2.0
*/
public static void bind application application  class scope  pattern pattern
/**
* binds the resources that match the provided pattern to the given
* application object. will create any resources if not already in the
* shared resources of the application object and does that recursively when
* the recurse parameter is true, or just for the scoped package if that
* parameter is false
*
* @param application
*            the application to bind to.
* @param scope
*            the scope of the resource.
* @param pattern
*            a regular expression to match against the contents of the
*            package of the provided scope class (eg &quot;.*\\.js&quot;
*            will add all the files with extension &quot;js&quot; from that
*            package).
* @param recurse
*            whether this method should recurse into sub packages
*
* @deprecated since wicket 1.2.1 this method is effectively a no-op.
*             {@link packageresource package resources} are automatically
*             tried and bound as shared resources so that they don't have
*             to be pre-registered anymore. will be removed in 2.0
*/
public static void bind application application  class scope  pattern pattern  boolean recurse
/**
* binds a resource to the given application object. will create the
* resource if not already in the shared resources of the application
* object.
*
* @param application
*            the application to bind to.
* @param scope
*            the scope of the resource.
* @param name
*            the name of the resource (like &quot;myfile.js&quot;)
* @throw illegalargumentexception when the requested package resource was
*        not found
*/
public static void bind application application  class scope  string name
bind application  scope  name  null  null
/**
* binds a resource to the given application object. will create the
* resource if not already in the shared resources of the application
* object.
*
* @param application
*            the application to bind to.
* @param scope
*            the scope of the resource.
* @param name
*            the name of the resource (like &quot;myfile.js&quot;)
* @param locale
*            the locale of the resource.
* @throw illegalargumentexception when the requested package resource was
*        not found
*/
public static void bind application application  class scope  string name  locale locale
bind application  scope  name  locale  null
/**
* binds a resource to the given application object. will create the
* resource if not already in the shared resources of the application
* object.
*
* @param application
*            the application to bind to.
* @param scope
*            the scope of the resource.
* @param name
*            the name of the resource (like &quot;myfile.js&quot;)
* @param locale
*            the locale of the resource.
* @param style
*            the style of the resource.
* @throw illegalargumentexception when the requested package resource was
*        not found
*/
public static void bind application application  class scope  string name  locale locale
string style
if  name    null
throw new illegalargumentexception
// first check on a direct hit for efficiency
if  exists scope  name  locale  style
// we have got a hit, so we may safely assume the name
// argument is not a regular expression, and can thus
// just add the resource and return
get scope  name  locale  style
else
throw new illegalargumentexception     scope
name       locale       style
/**
* gets whether a resource for a given set of criteria exists.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in.
*            typically this is the class in which you call this method
* @param path
*            the path to the resource
* @param locale
*            the locale of the resource
* @param style
*            the style of the resource (see {@link org.apache.wicket.session})
* @return true if a resource could be loaded, false otherwise
*/
public static boolean exists final class scope  final string path  final locale locale
final string style
string absolutepath   packages absolutepath scope  path
return application get   getresourcesettings   getresourcestreamlocator   locate scope
absolutepath  style  locale  null     null
/**
* gets non-localized resources for a given set of criteria. multiple
* resource can be loaded for the same criteria if they match the pattern.
* if no resources were found, this method returns null.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in.
*            typically this is the calling class/ the class in which you
*            call this method
* @param pattern
*            regexp pattern to match resources
* @return the resources, never null but may be empty
* @deprecated will be removed in 2.0; contribute resources one by one
*             instead
*/
public static packageresource get class scope  pattern pattern
return get scope  pattern  false
/**
* gets non-localized resources for a given set of criteria. multiple
* resource can be loaded for the same criteria if they match the pattern.
* if no resources were found, this method returns null.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in.
*            typically this is the calling class/ the class in which you
*            call this method
* @param pattern
*            regexp pattern to match resources
* @param recurse
*            whether this method should recurse into sub packages
* @return the resources, never null but may be empty
* @deprecated will be removed in 2.0; contribute resources one by one
*             instead
*/
public static packageresource get class scope  pattern pattern  boolean recurse
final list resources   new arraylist
string packageref   strings replaceall packagename forclass scope  getname
tostring
classloader loader   scope getclassloader
try
// loop through the resources of the package
enumeration packageresources   loader getresources packageref
while  packageresources hasmoreelements
url resource    url packageresources nextelement
urlconnection connection   resource openconnection
if  connection instanceof jarurlconnection
jarfile jf     jarurlconnection connection  getjarfile
scanjarfile scope  pattern  recurse  resources  packageref  jf
else
string absolutepath   scope getresource    toexternalform
file basedir
uri uri
try
uri   new uri absolutepath
catch  urisyntaxexception e
throw new runtimeexception e
try
basedir   new file uri
catch  illegalargumentexception e
log debug     absolutepath
// if this is throwen then the path is not really a
// file. but could be a zip.
string jarzippart   uri getschemespecificpart
// lowercased for testing if jar/zip, but leave the real
// filespec unchanged
string lowerjarzippart   jarzippart tolowercase
int index   lowerjarzippart indexof
if  index     1
index   lowerjarzippart indexof
if  index     1
throw e
string filename   jarzippart substring 0  index   4      4
// len of ".jar" or ".zip"
log debug     filename
jarfile jarfile   new jarfile filename  false
scanjarfile scope  pattern  recurse  resources  packageref  jarfile
return  packageresource resources toarray new packageresource[resources
size  ]
if   basedir isdirectory
throw new illegalstateexception
basedir
catch  ioexception e
throw new wicketruntimeexception e
return  packageresource resources toarray new packageresource
/**
* gets a non-localized resource for a given set of criteria. only one
* resource will be loaded for the same criteria.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in.
*            typically this is the calling class/ the class in which you
*            call this method
* @param path
*            the path to the resource
* @return the resource
*/
public static packageresource get final class scope  final string path
return get scope  path  null  null
/**
* gets the resource for a given set of criteria. only one resource will be
* loaded for the same criteria.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in.
*            typically this is the class in which you call this method
* @param path
*            the path to the resource
* @param locale
*            the locale of the resource
* @param style
*            the style of the resource (see {@link org.apache.wicket.session})
* @return the resource
*/
public static packageresource get final class scope  final string path  final locale locale
final string style
final sharedresources sharedresources   application get   getsharedresources
packageresource resource    packageresource sharedresources get scope  path  locale  style
true
if  resource    null
resource   new packageresource scope  path  locale  style
sharedresources add scope  path  locale  style  resource
return resource
/* removed in 2.0 */
private static void scanjarfile class scope  pattern pattern  boolean recurse
final list resources  string packageref  jarfile jf
enumeration enumeration   jf entries
while  enumeration hasmoreelements
jarentry je    jarentry enumeration nextelement
string name   je getname
if  name startswith packageref
name   name substring packageref length     1
if  pattern matcher name  matches       recurse     name indexof        1
// we add the entry as a package resource
resources add get scope  name  null  null
/** the path to the resource */
private final string absolutepath
/** the resource's locale */
private locale locale
/** the path this resource was created with. */
private final string path
/** the scoping class, used for class loading and to determine the package. */
private final class scope
/** the resource's style */
private final string style
/**
* hidden constructor.
*
* @param scope
*            this argument will be used to get the class loader for loading
*            the package resource, and to determine what package it is in
* @param path
*            the path to the resource
* @param locale
*            the locale of the resource
* @param style
*            the style of the resource
*/
protected packageresource final class scope  final string path  final locale locale
final string style
// convert resource path to absolute path relative to base package
this absolutepath   packages absolutepath scope  path
ipackageresourceguard guard   application get   getresourcesettings
getpackageresourceguard
if   guard accept scope  path
throw new packageresourceblockedexception     absolutepath
this scope   scope
this path   path
this locale   locale
this style   style
if  locale    null
// get the resource stream so that the real locale that could be
// resolved is set.
getresourcestream
// invalidate it again so that it won't hold up resources
invalidate
/**
* gets the absolute path of the resource.
*
* @return the absolute resource path
*/
public final string getabsolutepath
return absolutepath
/**
* gets the locale.
*
* @return the locale of this package resource
*/
public final locale getlocale
return locale
/**
* gets the path this resource was created with.
*
* @return the path
*/
public final string getpath
return path
/**
* @return gets the resource for the component.
*/
public iresourcestream getresourcestream
// locate resource
iresourcestream resourcestream   application get   getresourcesettings
getresourcestreamlocator   locate scope  absolutepath  style  locale  null
// check that resource was found
if  resourcestream    null
string msg       absolutepath
style       locale
log warn msg
if  requestcycle get   instanceof webrequestcycle
throw new abortwithweberrorcodeexception httpservletresponse sc_not_found  msg
else
throw new abortexception
this locale   resourcestream getlocale
return resourcestream
/**
* gets the scoping class, used for class loading and to determine the
* package.
*
* @return the scoping class
*/
public final class getscope
return scope
/**
* gets the style.
*
* @return the style
*/
public final string getstyle
return style