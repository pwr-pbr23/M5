/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions util resource
import java io ioexception
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket util io streams
import org apache wicket util lang packages
import org apache wicket util resource iresourcestream
import org apache wicket util resource resourcestreamnotfoundexception
import org apache wicket util resource locator iresourcestreamlocator
import org apache wicket util resource locator resourcestreamlocator
import org apache wicket util string interpolator mapvariableinterpolator
/**
* a string resource that can be appended to.
*
* @author eelco hillenius
*/
// todo cache templates application scoped with a watch
public class packagedtexttemplate extends texttemplate
private static final long serialversionuid   1l
/** log. */
private static final log log   logfactory getlog packagedtexttemplate class
/** class loader stream locator. */
private static final iresourcestreamlocator streamlocator   new resourcestreamlocator
/** contents */
private stringbuffer buffer   new stringbuffer
/**
* constructor.
*
* @param clazz
*            the class to be used for retrieving the classloader for
*            loading the packaged template.
* @param filename
*            the name of the file, relative to the clazz position
*/
public packagedtexttemplate final class clazz  final string filename
this clazz  filename
/**
* constructor.
*
* @param clazz
*            the class to be used for retrieving the classloader for
*            loading the packaged template.
* @param filename
*            the name of the file, relative to the clazz position
* @param contenttype
*            the mime type of this resource, such as "image/jpeg" or
*            "text/html"
*/
public packagedtexttemplate final class clazz  final string filename  final string contenttype
this clazz  filename  contenttype  null
/**
* constructor.
*
* @param clazz
*            the class to be used for retrieving the classloader for
*            loading the packaged template.
* @param filename
*            the name of the file, relative to the clazz position
* @param contenttype
*            the mime type of this resource, such as "image/jpeg" or
*            "text/html"
* @param encoding
*            the file's encoding, e.g. 'utf-8'
*/
public packagedtexttemplate final class clazz  final string filename  final string contenttype
final string encoding
super contenttype
string path   packages absolutepath clazz  filename
iresourcestream stream   streamlocator locate clazz  path
if  stream    null
throw new illegalargumentexception     filename
clazz       path
try
if  encoding    null
buffer append streams readstring stream getinputstream    encoding
else
buffer append streams readstring stream getinputstream
catch  ioexception e
throw new runtimeexception e
catch  resourcestreamnotfoundexception e
throw new runtimeexception e
finally
try
stream close
catch  ioexception e
log error e getmessage    e
/**
* interpolate the map of variables with the content and replace the content
* with the result. variables are denoted in this string by the syntax
* ${variablename}. the contents will be altered by replacing each variable
* of the form ${variablename} with the value returned by
* variables.getvalue("variablename").
* <p>
* warning there is no going back to the original contents after the
* interpolation is done. if you need to do different interpolations on the
* same original contents, use method {@link #asstring(map)} instead.
* </p>
*
* @param variables
*            the variables to interpolate
* @return this for chaining
*/
public final texttemplate interpolate map variables
if  variables    null
string result   new mapvariableinterpolator buffer tostring    variables  tostring
buffer delete 0  buffer length
buffer append result
return this
/**
* @see org.apache.wicket.util.resource.iresourcestream#length()
*/
public final long length
return buffer length
/**
* @see org.apache.wicket.util.resource.abstractstringresourcestream#getstring()
*/
public string getstring
return buffer tostring