/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util lang
import java text numberformat
import java text parseexception
import java util locale
import java util regex matcher
import java util regex pattern
import org apache wicket util string stringvalue
import org apache wicket util string stringvalueconversionexception
import org apache wicket util value longvalue
/**
* represents an immutable byte count. these static factory methods allow easy
* construction of value objects using either long values like bytes(2034) or
* megabytes(3):
* <p>
* <ul>
* <li>bytes.bytes(long)
* <li>bytes.kilobytes(long)
* <li>bytes.megabytes(long)
* <li>bytes.gigabytes(long)
* <li>bytes.terabytes(long)
* </ul>
* <p>
* or double precision floating point values like megabytes(3.2):
* <p>
* <ul>
* <li>bytes.bytes(double)
* <li>bytes.kilobytes(double)
* <li>bytes.megabytes(double)
* <li>bytes.gigabytes(double)
* <li>bytes.terabytes(double)
* </ul>
* <p>
* in the case of bytes(double), the value will be rounded off to the nearest
* integer byte count using math.round().
* <p>
* the precise number of bytes in a bytes object can be retrieved by calling
* bytes(). approximate values for different units can be retrieved as double
* precision values using these methods:
* <p>
* <ul>
* <li>kilobytes()
* <li>megabytes()
* <li>gigabytes()
* <li>terabytes()
* </ul>
* <p>
* also, value objects can be constructed from strings, optionally using a
* locale with valueof(string) and valueof(string,locale). the string may
* contain a decimal or floating point number followed by optional whitespace
* followed by a unit (nothing for bytes, k for kilobyte, m for megabytes, g for
* gigabytes or t for terabytes) optionally followed by a b (for bytes). any of
* these letters can be any case. so, examples of permissible string values are:
* <p>
* <ul>
* <li>37 (37 bytes)
* <li>2.3k (2.3 kilobytes)
* <li>2.5 kb (2.5 kilobytes)
* <li>4k (4 kilobytes)
* <li>35.2gb (35.2 gigabytes)
* <li>1024m (1024 megabytes)
* </ul>
* <p>
* note that if the locale was not us, the values might substitute "," for "."
* as that is the custom in euroland.
* <p>
* the tostring() and tostring(locale) methods are smart enough to convert a
* given value object to the most appropriate units for the given value.
*
* @author jonathan locke
*/
public final class bytes extends longvalue
private static final long serialversionuid   1l
/** pattern for string parsing. */
private static final pattern valuepattern   pattern compile
pattern case_insensitive
/** maximum bytes value */
public static bytes max   bytes long max_value
/**
* private constructor forces use of static factory methods.
*
* @param bytes
*            number of bytes
*/
private bytes final long bytes
super bytes
/**
* instantiate immutable bytes value object..
*
* @param bytes
*            value to convert
* @return input as bytes
*/
public static bytes bytes final long bytes
return new bytes bytes
/**
* instantiate immutable bytes value object..
*
* @param kilobytes
*            value to convert
* @return input as bytes
*/
public static bytes kilobytes final long kilobytes
return bytes kilobytes   1024
/**
* instantiate immutable bytes value object..
*
* @param megabytes
*            value to convert
* @return input as bytes
*/
public static bytes megabytes final long megabytes
return kilobytes megabytes   1024
/**
* instantiate immutable bytes value object..
*
* @param gigabytes
*            value to convert
* @return input as bytes
*/
public static bytes gigabytes final long gigabytes
return megabytes gigabytes   1024
/**
* instantiate immutable bytes value object..
*
* @param terabytes
*            value to convert
* @return input as bytes
*/
public static bytes terabytes final long terabytes
return gigabytes terabytes   1024
/**
* instantiate immutable bytes value object..
*
* @param bytes
*            value to convert
* @return input as bytes
*/
public static bytes bytes final double bytes
return bytes math round bytes
/**
* instantiate immutable bytes value object..
*
* @param kilobytes
*            value to convert
* @return input as bytes
*/
public static bytes kilobytes final double kilobytes
return bytes kilobytes   1024 0
/**
* instantiate immutable bytes value object..
*
* @param megabytes
*            value to convert
* @return input as bytes
*/
public static bytes megabytes final double megabytes
return kilobytes megabytes   1024 0
/**
* instantiate immutable bytes value object..
*
* @param gigabytes
*            value to convert
* @return input as bytes
*/
public static bytes gigabytes final double gigabytes
return megabytes gigabytes   1024 0
/**
* instantiate immutable bytes value object..
*
* @param terabytes
*            value to convert
* @return input as bytes
*/
public static bytes terabytes final double terabytes
return gigabytes terabytes   1024 0
/**
* gets the byte count represented by this value object.
*
* @return byte count
*/
public final long bytes
return value
/**
* gets the byte count in kilobytes.
*
* @return the value in kilobytes
*/
public final double kilobytes
return value   1024 0
/**
* gets the byte count in megabytes.
*
* @return the value in megabytes
*/
public final double megabytes
return kilobytes     1024 0
/**
* gets the byte count in gigabytes.
*
* @return the value in gigabytes
*/
public final double gigabytes
return megabytes     1024 0
/**
* gets the byte count in terabytes.
*
* @return the value in terabytes
*/
public final double terabytes
return gigabytes     1024 0
/**
* converts a string to a number of bytes. strings consist of a floating
* point value followed by k, m, g or t for kilobytes, megabytes, gigabytes
* or terabytes, respectively. the abbreviations kb, mb, gb and tb are also
* accepted. matching is case insensitive.
*
* @param string
*            the string to convert
* @param locale
*            the locale to be used for transformation
* @return the bytes value for the string
* @throws stringvalueconversionexception
*/
public static bytes valueof final string string  final locale locale
throws stringvalueconversionexception
final matcher matcher   valuepattern matcher string
// valid input?
if  matcher matches
try
// get double precision value
final double value   numberformat getnumberinstance locale  parse matcher group 1
doublevalue
// get units specified
final string units   matcher group 3
if  units equalsignorecase
return bytes value
else if  units equalsignorecase
return kilobytes value
else if  units equalsignorecase
return megabytes value
else if  units equalsignorecase
return gigabytes value
else if  units equalsignorecase
return terabytes value
else
throw new stringvalueconversionexception     string
catch  parseexception e
throw new stringvalueconversionexception     string
e
else
throw new stringvalueconversionexception     string
/**
* converts a string to a number of bytes. strings consist of a floating
* point value followed by k, m, g or t for kilobytes, megabytes, gigabytes
* or terabytes, respectively. the abbreviations kb, mb, gb and tb are also
* accepted. matching is case insensitive.
*
* @param string
*            the string to convert
* @return the bytes value for the string
* @throws stringvalueconversionexception
*/
public static bytes valueof final string string  throws stringvalueconversionexception
return valueof string  locale getdefault
/**
* converts this byte count to a string using the default locale.
*
* @return the string for this byte count
*/
public string tostring
return tostring locale getdefault
/**
* converts this byte count to a string using the given locale.
*
* @param locale
*            locale to use for conversion
* @return the string for this byte count
*/
public string tostring final locale locale
if  value >  0
if  terabytes   >  1 0
return unitstring terabytes       locale
if  gigabytes   >  1 0
return unitstring gigabytes       locale
if  megabytes   >  1 0
return unitstring megabytes       locale
if  kilobytes   >  1 0
return unitstring kilobytes       locale
return long tostring value
else
return
/**
* convert value to formatted floating point number and units.
*
* @param value
*            the value
* @param units
*            the units
* @param locale
*            the locale
* @return the formatted string
*/
private string unitstring final double value  final string units  final locale locale
return stringvalue valueof value  locale    units