/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket settings
import java util list
import org apache wicket iresourcefactory
import org apache wicket localizer
import org apache wicket markup html ipackageresourceguard
import org apache wicket markup html javascriptpackageresource
import org apache wicket markup html packageresourceguard
import org apache wicket model imodel
import org apache wicket resource ipropertiesfactory
import org apache wicket resource loader istringresourceloader
import org apache wicket util file iresourcefinder
import org apache wicket util resource locator iresourcestreamlocator
import org apache wicket util time duration
import org apache wicket util watch modificationwatcher
/**
* interface for resource related settings
* <p>
* <i>resourcepollfrequency </i> (defaults to no polling frequency) - frequency
* at which resources should be polled for changes.
* <p>
* <i>resourcefinder </i> (classpath) - set this to alter the search path for
* resources.
* <p>
* <i>usedefaultonmissingresource </i> (defaults to true) - set to true to
* return a default value if available when a required string resource is not
* found. if set to false then the throwexceptiononmissingresource flag is used
* to determine how to behave. if no default is available then this is the same
* as if this flag were false
* <p>
* <i>a resourcestreamlocator </i>- an application's resourcestreamlocator is
* used to find resources such as images or markup files. you can supply your
* own resourcestreamlocator if your prefer to store your application's
* resources in a non-standard location (such as a different filesystem
* location, a particular jar file or even a database) by overriding the
* getresourcelocator() method.
* <p>
* <i>resource factories </i>- resource factories can be used to create
* resources dynamically from specially formatted html tag attribute values. for
* more details, see {@link iresourcefactory},
* {@link org.apache.wicket.markup.html.image.resource.defaultbuttonimageresourcefactory}
* and especially
* {@link org.apache.wicket.markup.html.image.resource.localizedimageresource}.
* <p>
* <i>a localizer </i> the getlocalizer() method returns an object encapsulating
* all of the functionality required to access localized resources. for many
* localization problems, even this will not be required, as there are
* convenience methods available to all components:
* {@link org.apache.wicket.component#getstring(string key)} and
* {@link org.apache.wicket.component#getstring(string key, imodel model)}.
* <p>
* <i>stringresourceloaders </i>- a chain of <code>istringresourceloader</code>
* instances that are searched in order to obtain string resources used during
* localization. by default the chain is set up to first search for resources
* against a particular component (e.g. page etc.) and then against the
* application.
* </p>
*
* @author igor vaynberg (ivaynberg)
*/
public interface iresourcesettings
/**
* adds a resource factory to the list of factories to consult when
* generating resources automatically
*
* @param name
*            the name to give to the factory
* @param resourcefactory
*            the resource factory to add
*/
void addresourcefactory final string name  final iresourcefactory resourcefactory
/**
* convenience method that sets the resource search path to a single folder.
* use when searching for resources. by default, the resources are located
* on the classpath. if you want to configure other, additional, search
* paths, you can use this method
*
* @param resourcefolder
*            the resourcefolder to set
*/
void addresourcefolder final string resourcefolder
/**
* add a string resource loader to the chain of loaders. if this is the
* first call to this method since the creation of the application settings
* then the existing chain is cleared before the new loader is added.
*
* @param loader
*            the loader to be added
*/
void addstringresourceloader final istringresourceloader loader
/**
* get the application's localizer.
*
* @see iresourcesettings#addstringresourceloader(org.apache.wicket.resource.loader.istringresourceloader)
*      for means of extending the way wicket resolves keys to localized
*      messages.
*
* @return the application wide localizer instance
*/
localizer getlocalizer
/**
* gets the {@link packageresourceguard package resource guard}.
*
* @return the package resource guard
*/
ipackageresourceguard getpackageresourceguard
/**
* get the property factory which will be used to load property files
*
* @return propertiesfactory
*/
ipropertiesfactory getpropertiesfactory
/**
* @param name
*            name of the factory to get
* @return the iresourcefactory with the given name.
*/
iresourcefactory getresourcefactory final string name
/**
* gets the resource finder to use when searching for resources.
*
* @return returns the resourcefinder.
* @see iresourcesettings#setresourcefinder(iresourcefinder)
*/
iresourcefinder getresourcefinder
/**
* @return returns the resourcepollfrequency.
* @see iresourcesettings#setresourcepollfrequency(duration)
*/
duration getresourcepollfrequency
/**
* @return resource locator for this application
*/
iresourcestreamlocator getresourcestreamlocator
/**
* @param start
*            boolean if the resource watcher should be started if not
*            already started.
*
* @return resource watcher with polling frequency determined by setting, or
*         null if no polling frequency has been set.
*/
modificationwatcher getresourcewatcher boolean start
/**
* @return an unmodifiable list of all available string resource loaders
*/
list getstringresourceloaders
/**
* @see org.apache.wicket.settings.iexceptionsettings#getthrowexceptiononmissingresource()
*
* @return boolean
*/
boolean getthrowexceptiononmissingresource
/**
* @return whether to use a default value (if available) when a missing
*         resource is requested
*/
boolean getusedefaultonmissingresource
/**
* sets the {@link packageresourceguard package resource guard}.
*
* @param packageresourceguard
*            the package resource guard
*/
void setpackageresourceguard ipackageresourceguard packageresourceguard
/**
* set the property factory which will be used to load property files
*
* @param factory
*/
void setpropertiesfactory ipropertiesfactory factory
/**
* sets the finder to use when searching for resources. by default, the
* resources are located on the classpath. if you want to configure other,
* additional, search paths, you can use this method.
*
* @param resourcefinder
*            the resourcefinder to set
*/
void setresourcefinder final iresourcefinder resourcefinder
/**
* sets the resource polling frequency. this is the duration of time between
* checks of resource modification times. if a resource, such as an html
* file, has changed, it will be reloaded. default is for no resource
* polling to occur.
*
* @param resourcepollfrequency
*            frequency at which to poll resources
* @see iresourcesettings#setresourcefinder(iresourcefinder)
*/
void setresourcepollfrequency final duration resourcepollfrequency
/**
* sets the resource stream locator for this application
*
* @param resourcestreamlocator
*            new resource stream locator
*/
void setresourcestreamlocator iresourcestreamlocator resourcestreamlocator
/**
* @see org.apache.wicket.settings.iexceptionsettings#setthrowexceptiononmissingresource(boolean)
*
* @param throwexceptiononmissingresource
*/
void setthrowexceptiononmissingresource final boolean throwexceptiononmissingresource
/**
* @param usedefaultonmissingresource
*            whether to use a default value (if available) when a missing
*            resource is requested
*/
void setusedefaultonmissingresource final boolean usedefaultonmissingresource
/**
* sets whether the whitespace characters and comments should be stripped for
* resources served through {@link javascriptpackageresource}
* @param value
*/
void setstripjavascriptcommentsandwhitespace boolean value
/**
* @return whether the comments and whitespace characters will be stripped
* from resources served through {@link javascriptpackageresource}
*/
boolean getstripjavascriptcommentsandwhitespace