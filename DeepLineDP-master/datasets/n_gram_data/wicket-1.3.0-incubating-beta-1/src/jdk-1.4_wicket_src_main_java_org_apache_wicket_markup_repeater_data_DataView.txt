/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup repeater data
import org apache wicket markup html navigation paging ipageable
/**
* dataview is a basic implementation of abstractdataview.
*
* data views aim to make it very simple to populate your repeating view from a
* database by utilizing {@link idataprovider} to act as an interface between
* the database and the dataview.
*
*
*
* <p>
* example:
*
* <pre>
*     &lt;tbody&gt;
*       &lt;tr wicket:id=&quot;rows&quot;&gt;
*         &lt;td&gt;&lt;span wicket:id=&quot;id&quot;&gt;test id&lt;/span&gt;&lt;/td&gt;
*         ...
* </pre>
*
* <p>
* though this example is about a html table, dataview is not at all limited to
* html tables. any kind of list can be rendered using dataview.
* <p>
* and the related java code:
*
* <pre>
* add(new dataview(&quot;rows&quot;, dataprovider)
* {
* 	public void populateitem(final item item)
* 	{
* 		final userdetails user = (userdetails)item.getmodelobject();
* 		item.add(new label(&quot;id&quot;, user.getid()));
* 	}
* });
* </pre>
*
* @see idataprovider
* @see ipageable
*
* @author igor vaynberg (ivaynberg)
*
*/
public abstract class dataview extends dataviewbase
/**
* @param id
*            component id
* @param dataprovider
*            data provider
*/
public dataview string id  idataprovider dataprovider
super id  dataprovider
/**
* @param id
*            component id
* @param dataprovider
*            data provider
* @param itemsperpage
*            items per page
*/
public dataview string id  idataprovider dataprovider  int itemsperpage
super id  dataprovider
setitemsperpage itemsperpage
/**
* sets the number of items to be displayed per page
*
* @param items
*            number of items to display per page
*/
public void setitemsperpage int items
internalsetrowsperpage items
/**
* @return number of items displayed per page
*/
public int getitemsperpage
return internalgetrowsperpage
/**
* @return data provider
*/
public idataprovider getdataprovider
return internalgetdataprovider