/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket authorization strategies page
import org apache wicket application
import org apache wicket component
import org apache wicket page
import org apache wicket restartresponseatinterceptpageexception
import org apache wicket authorization iunauthorizedcomponentinstantiationlistener
import org apache wicket authorization unauthorizedinstantiationexception
/**
* a very simple authorization strategy that takes a supertype (a base class or
* tagging interface) and performs a simple authorization check by calling the
* abstract method isauthorized() whenever a page class that extends or
* implements the supertype is about to be instantiated. if that method returns
* true, page instantiation proceeds normally. if it returns false, the user is
* automatically directed to the specified sign-in page for authentication,
* which will presumably allow authorization to succeed once they have signed
* in.
* <p>
* in your application.init() method do something like the following:
*
* <pre>
* simplepageauthorizationstrategy authorizationstrategy = new simplepageauthorizationstrategy(
* 		mysecurewebpage.class, mysigninpage.class)
* {
*     protected boolean isauthorized()
* 	   {
* 		   // authorize access based on user authentication in the session
* 		   return (((mysession)session.get()).issignedin());
* 	   }
* };
*
* getsecuritysettings().setauthorizationstrategy(authorizationstrategy);
* </pre>
*
* @author eelco hillenius
* @author jonathan locke
*/
public abstract class simplepageauthorizationstrategy extends abstractpageauthorizationstrategy
/**
* the supertype (class or interface) of pages that require authorization to
* be instantiated.
*/
private final class securepagesupertype
/**
* construct.
*
* @param securepagesupertype
*            the class or interface supertype that indicates that a given
*            page requires authorization
* @param signinpageclass
*            the sign in page class
*/
public simplepageauthorizationstrategy final class securepagesupertype
final class signinpageclass
if  securepagesupertype    null
throw new illegalargumentexception
this securepagesupertype   securepagesupertype
// handle unauthorized access to pages
application get   getsecuritysettings   setunauthorizedcomponentinstantiationlistener
new iunauthorizedcomponentinstantiationlistener
public void onunauthorizedinstantiation final component component
// if there is a sign in page class declared, and the
// unauthorized component is a page, but it's not the
// sign in page
if  component instanceof page
// redirect to page to let the user sign in
throw new restartresponseatinterceptpageexception signinpageclass
else
// the component was not a page, so throw exception
throw new unauthorizedinstantiationexception component getclass
/**
* @see org.apache.wicket.authorization.strategies.page.abstractpageauthorizationstrategy#ispageauthorized(java.lang.class)
*/
protected boolean ispageauthorized final class pageclass
if  instanceof pageclass  securepagesupertype
return isauthorized
// allow construction by default
return true
/**
* gets whether the current user/session is authorized to instantiate a page
* class which extends or implements the supertype (base class or tagging
* interface) passed to the constructor.
*
* @return true if the instantiation should be allowed to proceed. false, if
*         the user should be directed to the application's sign-in page.
*/
protected abstract boolean isauthorized