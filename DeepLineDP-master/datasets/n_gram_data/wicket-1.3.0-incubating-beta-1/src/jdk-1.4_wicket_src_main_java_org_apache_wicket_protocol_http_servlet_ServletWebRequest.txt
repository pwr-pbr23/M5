/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http servlet
import java util hashmap
import java util locale
import java util map
import javax servlet http httpservletrequest
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket iredirectlistener
import org apache wicket requestlistenerinterface
import org apache wicket wicketruntimeexception
import org apache wicket protocol http webapplication
import org apache wicket protocol http webrequest
import org apache wicket util lang bytes
import org apache wicket util string stringvalueconversionexception
import org apache wicket util string strings
import org apache wicket util upload fileuploadexception
/**
* a servlet specific webrequest implementation wrapping a httpservletrequest
*
* @author ate douma
*/
public class servletwebrequest extends webrequest
/** log */
private static final log log   logfactory getlog servletwebrequest class
/** servlet request information. */
private final httpservletrequest httpservletrequest
/**
* protected constructor.
*
* @param httpservletrequest
*            the servlet request information
*/
public servletwebrequest final httpservletrequest httpservletrequest
this httpservletrequest   httpservletrequest
/**
* gets the servlet context path.
*
* @return servlet context path
*/
public string getcontextpath
return httpservletrequest getcontextpath
/**
* gets the wrapped http servlet request object.
*
* @return the wrapped http serlvet request object.
*/
public final httpservletrequest gethttpservletrequest
return httpservletrequest
/**
* returns the preferred <code>locale</code> that the client will accept
* content in, based on the accept-language header. if the client request
* doesn't provide an accept-language header, this method returns the
* default locale for the server.
*
* @return the preferred <code>locale</code> for the client
*/
public locale getlocale
return httpservletrequest getlocale
/**
* gets the request parameter with the given key.
*
* @param key
*            parameter name
* @return parameter value
*/
public string getparameter final string key
return httpservletrequest getparameter key
/**
* gets the request parameters.
*
* @return map of parameters
*/
public map getparametermap
// return a mutable copy
return new hashmap httpservletrequest getparametermap
/**
* gets the request parameters with the given key.
*
* @param key
*            parameter name
* @return parameter values
*/
public string getparameters final string key
return httpservletrequest getparametervalues key
/**
* gets the path info if any.
*
* @return any servlet path info
*/
public string getpath
return   webapplication application get    getwicketfilter   getrelativepath
httpservletrequest
/**
* gets the relative url (url without the context path and without a leading
* '/'). use this method to load resources using the servlet context.
*
* @return request url
*/
public string getrelativeurl
/*
* servlet 2.3 specification :
*
* servlet path: the path section that directly corresponds to the
* mapping which activated this request. this path starts with a "/"
* character except in the case where the request is matched with the
* "/*" pattern, in which case it is the empty string.
*
* pathinfo: the part of the request path that is not part of the
* context path or the servlet path. it is either null if there is no
* extra path, or is a string with a leading "/".
*/
string url   getservletpath
final string pathinfo   httpservletrequest getpathinfo
if  pathinfo    null
url    pathinfo
final string querystring   httpservletrequest getquerystring
if  querystring    null
url         querystring
// if url is non-empty it has to start with '/', which we should lose
if   url equals
// remove leading '/'
url   url substring 1
return url
/**
* gets the servlet path.
*
* @return servlet path
*/
public string getservletpath
return httpservletrequest getservletpath
/**
* this will return true if the header "wicket-ajax" is set.
*
* @see org.apache.wicket.protocol.http.webrequest#isajax()
*/
// todo matej? should we have a simple way of supporting other ajax things?
// or should they just set that same header??
public boolean isajax
boolean ajax   false
string ajaxheader   httpservletrequest getheader
if  strings isempty ajaxheader     false
try
ajax   strings istrue ajaxheader
catch  stringvalueconversionexception e
// we are not interested in this exception but we log it anyway
log debug     ajaxheader
return ajax
/**
* this method by default calls isajax(), wicket ajax request do have an
* header set. and for all the ajax request the versioning should be merged
* with the previous one. and when it sees that the current request is a
* redirect to page request the version will also be merged with the
* previous one because refresh in the browser or redirects to a page
* shouldn't generate a new version.
*
* @see org.apache.wicket.request#mergeversion()
*/
public boolean mergeversion
requestlistenerinterface intface   getrequestparameters   getinterface
return isajax      intface    iredirectlistener interface
/**
* @see org.apache.wicket.protocol.http.webrequest#newmultipartwebrequest(org.apache.wicket.util.lang.bytes)
*/
public webrequest newmultipartwebrequest bytes maxsize
try
return new multipartservletwebrequest httpservletrequest  maxsize
catch  fileuploadexception e
throw new wicketruntimeexception e
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     httpservletrequest getmethod
httpservletrequest getprotocol
httpservletrequest getrequesturl
httpservletrequest getcontenttype
httpservletrequest getcontentlength
httpservletrequest getcontextpath
httpservletrequest getpathinfo
httpservletrequest getrequesturi
httpservletrequest getservletpath
httpservletrequest getpathtranslated