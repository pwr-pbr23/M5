/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket protocol http
import java io file
import java io fileinputstream
import java io fileoutputstream
import java io filenamefilter
import java io ioexception
import java nio bytebuffer
import java util iterator
import java util linkedlist
import java util list
import java util map
import java util map entry
import org apache commons logging log
import org apache commons logging logfactory
import org apache wicket application
import org apache wicket page
import org apache wicket protocol http secondlevelcachesessionstore ipagestore
import org apache wicket util concurrent concurrenthashmap
import org apache wicket util lang objects
/**
* stores pages on disk.
* <p>
* override {@link #getworkdir()} to change the default directory for pages,
* which is configured from the javax.servlet.context.tempdir attribute in the
* servlet context.
*
* @author jcompagner
*/
public class filepagestore implements ipagestore
private class pagesavingthread implements runnable
private volatile boolean stop   false
private long totalsavingtime   0
private int saved
private int bytessaved
/**
* @see java.lang.runnable#run()
*/
public void run
while   stop
try
while  pagestobesaved size      0
thread sleep 2000
if  stop
return
// if ( pagestobesaved.size() > 100)
// {
// system.err.println("max");
// thread.currentthread().setpriority(thread.max_priority);
// }
// else if ( pagestobesaved.size() > 25)
// {
// system.err.println("normal");
// thread.currentthread().setpriority(thread.norm_priority);
// }
// else
// {
// system.err.println("min");
// thread.currentthread().setpriority(thread.min_priority);
// }
iterator it   pagestobesaved entryset   iterator
while  it hasnext
map entry entry    entry it next
sessionpagekey key    sessionpagekey entry getkey
if  key data instanceof byte
savepage key   byte key data
it remove
catch  exception e
log error    e
/**
* stops this thread.
*/
public void stop
if  log isdebugenabled
log debug     totalsavingtime
log debug     bytessaved
log debug     saved
stop   true
/**
* @param sessionid
* @param key
* @param bytes
*/
private void savepage sessionpagekey key  byte bytes
file sessiondir   new file getworkdir    key sessionid
sessiondir mkdirs
file pagefile   getpagefile key  sessiondir
fileoutputstream fos   null
long t1   system currenttimemillis
int length   0
try
fos   new fileoutputstream pagefile
bytebuffer bb   bytebuffer wrap bytes
fos getchannel   write bb
length   bytes length
catch  exception e
log error     key pageclass       key id
key versionnumber       key sessionid
finally
try
if  fos    null
fos close
catch  ioexception ex
// ignore
long t3   system currenttimemillis
if  log isdebugenabled
log debug     key pageclass       key id       key versionnumber
length       key sessionid
t3   t1
totalsavingtime     t3   t1
saved
bytessaved    length
private class pageserializingthread implements runnable
private volatile boolean stop   false
private int serializedinthread   0
/**
* @see java.lang.runnable#run()
*/
public void run
while   stop
try
while  pagestobeserialized size      0
thread sleep 2000
if  stop
return
iterator it   pagestobeserialized entryset   iterator
outer   while  it hasnext
map entry entry    entry it next
list sessionlist    list entry getvalue
while  true
page page   null
sessionpagekey key   null
synchronized  sessionlist
if  sessionlist size      0
key    sessionpagekey sessionlist get 0
if  key data instanceof page
page    page key data
key setobject serializing
else
sessionlist remove 0
system err println
continue
// no key found in the current list.
if  key    null
// the list is removed now!
// but it could be that a request add
// something to the list now.
// thats why a request has to check it
// again.
pagestobeserialized remove entry getkey
continue outer
byte pagebytes   serializepage key  page
serializedinthread
synchronized  sessionlist
key setobject pagebytes
sessionlist remove key
sessionlist notifyall
pagestobesaved put key  key
catch  exception e
log error    e
/**
* stops this thread.
*/
public void stop
if  log isdebugenabled
log debug     totalserializationtime
log debug     serialized
log debug     serializedinthread
stop   true
/**
* key based on session id, page id, version numbers, etc
*/
private static class sessionpagekey
private final string sessionid
private final int id
private final int versionnumber
private final int ajaxversionnumber
private final string pagemap
private final class pageclass
private volatile object data
sessionpagekey string sessionid  int id  int versionnumber  int ajaxversionnumber
string pagemap  class pageclass
this sessionid  id  versionnumber  ajaxversionnumber  pagemap  pageclass  null
sessionpagekey string sessionid  int id  int versionnumber  int ajaxversionnumber
string pagemap  class pageclass  page page
this sessionid   sessionid
this id   id
this versionnumber   versionnumber
this ajaxversionnumber   ajaxversionnumber
this pageclass   pageclass
this pagemap   pagemap
this data   page
sessionpagekey string sessionid  page page
this sessionid  page getnumericid    page getcurrentversionnumber    page
getajaxversionnumber    page getpagemap   getname    page getclass    page
/**
* @see java.lang.object#equals(java.lang.object)
*/
public boolean equals object obj
if  obj instanceof sessionpagekey
sessionpagekey key    sessionpagekey obj
return id    key id
versionnumber    key versionnumber
ajaxversionnumber    key ajaxversionnumber
pagemap    null    pagemap equals key pagemap       pagemap    null    key pagemap    null
sessionid equals key sessionid
return false
/**
* @return the current object inside the sessionpagekey
*/
public object getobject
return data
/**
* @see java.lang.object#hashcode()
*/
public int hashcode
// todo with java 5, replace by .valueof usage
return objects hashcode new object   new integer id   new integer versionnumber
new integer ajaxversionnumber   pagemap  sessionid
/**
* sets the current object inside the sessionpagekey
*
* @param o
*            the object
*/
public void setobject object o
data   o
/**
* @see java.lang.object#tostring()
*/
public string tostring
return     sessionid       id       versionnumber
ajaxversionnumber       pagemap       data
private static final object serializing   new object
/** log. */
protected static log log   logfactory getlog filepagestore class
private final file defaultworkdir
private final pageserializingthread serthread
private final concurrenthashmap pagestobeserialized
private final pagesavingthread savethread
private final concurrenthashmap pagestobesaved
private final string appname
private volatile int serialized
private volatile long totalserializationtime   0
/**
* construct.
*/
public filepagestore
this  file   webapplication application get    getservletcontext   getattribute
/**
* construct.
*
* @param dir
*            the directory to save to.
*/
public filepagestore file dir
defaultworkdir   new file dir
defaultworkdir mkdirs
pagestobeserialized   new concurrenthashmap
pagestobesaved   new concurrenthashmap
appname   application get   getapplicationkey
savethread   new pagesavingthread
thread t   new thread savethread      appname
t setdaemon true
t setpriority thread max_priority
t start
serthread   new pageserializingthread
t   new thread serthread      appname
t setdaemon true
t setpriority thread norm_priority
t start
log info     dir
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#destroy()
*/
public void destroy
savethread stop
serthread stop
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#getpage(java.lang.string,
*      int, int)
*/
public page getpage string sessionid  string pagemapname  int id  int versionnumber
int ajaxversionnumber
sessionpagekey currentkey   new sessionpagekey sessionid  id  versionnumber
ajaxversionnumber  pagemapname  null
long t   system currenttimemillis
byte bytes   testmap currentkey
if  bytes    null
page page    page objects bytearraytoobject bytes
page   page getversion versionnumber
return page
file sessiondir   new file getworkdir    sessionid
if  sessiondir exists
file pagefile   getpagefile currentkey  sessiondir
if  pagefile exists
long t1   system currenttimemillis
fileinputstream fis   null
try
byte pagedata   null
fis   new fileinputstream pagefile
int length    int pagefile length
bytebuffer bb   bytebuffer allocate length
fis getchannel   read bb
if  bb hasarray
pagedata   bb array
else
pagedata   new byte
bb get pagedata
long t2   system currenttimemillis
page page    page objects bytearraytoobject pagedata
page   page getversion versionnumber
if  page    null    log isdebugenabled
long t3   system currenttimemillis
log debug     page getclass         page getnumericid
page getcurrentversionnumber
pagedata length       sessionid
t2   t1         t3   t2
return page
catch  exception e
log debug     id       versionnumber
sessionid      e
finally
try
if  fis    null
fis close
catch  ioexception ex
// ignore
return null
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#pageaccessed(java.lang.string,
*      org.apache.wicket.page)
*/
public void pageaccessed string sessionid  page page
sessionpagekey currentkey   new sessionpagekey sessionid  page
testmap currentkey
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#removepage(java.lang.string,
*      org.apache.wicket.page)
*/
public void removepage string sessionid  page page
removepagefrompendingmap sessionid  page getnumericid
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#storepage(java.lang.string,
*      org.apache.wicket.page)
*/
public void storepage string sessionid  page page
list list    list pagestobeserialized get sessionid
if  list    null
list   new linkedlist
synchronized  list
list add new sessionpagekey sessionid  page
// do really put it back in.. the writer thread could have removed it.
pagestobeserialized put sessionid  list
/**
* @see org.apache.wicket.protocol.http.secondlevelcachesessionstore.ipagestore#unbind(java.lang.string)
*/
public void unbind string sessionid
removesessionfrompendingmap sessionid
/**
* @param key
* @param sessiondir
* @return the file pointing to the page
*/
private file getpagefile sessionpagekey key  file sessiondir
return new file sessiondir  appname       key pagemap       key id
key versionnumber       key ajaxversionnumber
private void removepage string sessionid  int id
file sessiondir   new file getworkdir    sessionid
if  sessiondir exists
final string filepart   appname       id
file listfiles   sessiondir listfiles new filenamefilter
public boolean accept file dir  string name
return name startswith filepart
for  int i   0  i < listfiles length  i
listfiles delete
/**
* @param sessionid
* @param id
*/
private void removepagefrompendingmap string sessionid  int id
list list    list pagestobeserialized get sessionid
if  list    null
return
synchronized  list
iterator iterator   list iterator
while  iterator hasnext
sessionpagekey key    sessionpagekey iterator next
if  key sessionid    sessionid    key id    id
iterator remove
// todo remove from pages to be saved
removepage sessionid  id
private void removesession string sessionid
file sessiondir   new file getworkdir    sessionid
if  sessiondir exists
file files   sessiondir listfiles
if  files    null
for  int i   0  i < files length  i
files delete
if   sessiondir delete
sessiondir deleteonexit
private void removesessionfrompendingmap string sessionid
pagestobeserialized remove sessionid
// todo remove from pagestobesaved..
removesession sessionid
private byte serializepage sessionpagekey key  page page
long t1   system currenttimemillis
byte bytes   objects objecttobytearray page
totalserializationtime     system currenttimemillis     t1
serialized
if  log isdebugenabled      bytes    null
log debug     key pageclass       key id       key versionnumber
bytes length       key sessionid
system currenttimemillis     t1
return bytes
private byte testmap sessionpagekey currentkey
sessionpagekey previouspage    sessionpagekey pagestobesaved get currentkey
if  previouspage    null
return  byte previouspage data
list list    list pagestobeserialized get currentkey sessionid
if  list    null
return null
synchronized  list
int index   list indexof currentkey
if  index     1
currentkey    sessionpagekey list get index
object object   currentkey data
if  object instanceof page
list remove index
else if  object    serializing
try
list wait
catch  interruptedexception ex
throw new runtimeexception ex
object   currentkey data
if  object instanceof byte
return  byte object
else
previouspage    sessionpagekey pagestobesaved get currentkey
if  previouspage    null
return  byte previouspage data
return null
else
return null
byte bytes   serializepage currentkey   page currentkey data
if  bytes    null
currentkey setobject bytes
pagestobesaved put currentkey  currentkey
return bytes
/**
* returns the working directory for this disk-based pagestore. override
* this to configure a different location. the default is
* javax.servlet.context.tempdir from the servlet context.
*
* @return working directory
*/
protected file getworkdir
return defaultworkdir