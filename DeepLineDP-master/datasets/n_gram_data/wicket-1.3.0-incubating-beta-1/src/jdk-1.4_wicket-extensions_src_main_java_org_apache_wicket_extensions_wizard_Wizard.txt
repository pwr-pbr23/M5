/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions wizard
import java util iterator
import org apache wicket component
import org apache wicket behavior headercontributor
import org apache wicket feedback containerfeedbackmessagefilter
import org apache wicket markup html webmarkupcontainer
import org apache wicket markup html form form
import org apache wicket markup html panel feedbackpanel
import org apache wicket markup html panel panel
/**
* a wizard is a dialog component that takes it's users through a number of
* predefined steps. it has common functionality like a next, previous, finish
* and cancel button, and it uses a {@link iwizardmodel} to navigate through the
* steps.
*
* <p>
* this default implementation should be useful for basic cases, if the layout
* is exactly what you need. if you want to provide your own layout and/ or have
* more or less components (e.g. you want to additionally provide an overview
* component), you can override this class and add the components you want
* yourself.
* </p>
* <p>
* if that's still not enough flexiblity for you, but you want to use the
* {@link iwizardmodel wizard model} and {@link iwizardstep wizard step}
* functionality provided in this package, you can provde a custom wizard
* </p>
*
* @author eelco hillenius
*/
public class wizard extends panel implements iwizardmodellistener  iwizard
/** component id of the buttons panel as used by the default wizard panel. */
public static final string buttons_id
/** component id of the feedback panel as used by the default wizard panel. */
public static final string feedback_id
/** component id of the header panel as used by the default wizard panel. */
public static final string header_id
/** component id of the overview panel as used by the default wizard panel. */
public static final string overview_id
/**
* component id of the view panel (where the main wizard contents go) as
* used by the default wizard panel.
*/
public static final string view_id
private static final long serialversionuid   1l
/** the currently active step. */
private iwizardstep activestep
/**
* the form in which the view is nested, and on which the wizard buttons
* work.
*/
private form form
/** the wizard model. */
private iwizardmodel wizardmodel
/**
* construct. adds the default style.
* <p>
* if you override this class, it makes sense to call this constructor
* (super(id)), then - in your constructor - construct a transition model
* and then call {@link #init(iwizardmodel)} to initialize the wizard.
* </p>
* <p>
* this constructor is not meant for normal clients of this class
* </p>
*
* @param id
*            the component model
*/
public wizard string id
this id  true
/**
* construct.
* <p>
* if you override this class, it makes sense to call this constructor
* (super(id)), then - in your constructor - construct a transition model
* and then call {@link #init(iwizardmodel)} to initialize the wizard.
* </p>
* <p>
* this constructor is not meant for normal clients of this class
* </p>
*
* @param id
*            the component model
* @param adddefaultcssstyle
*            whether to add the {@link #adddefaultcssstyle() default style}
*/
public wizard string id  boolean adddefaultcssstyle
super id
if  adddefaultcssstyle
adddefaultcssstyle
/**
* construct with a transition model. adds the default style.
* <p>
* for most clients, this is typically the right constructor to use.
* </p>
*
* @param id
*            the component id
* @param wizardmodel
*            the transitions model
*/
public wizard string id  iwizardmodel wizardmodel
this id  wizardmodel  true
/**
* construct with a transition model.
* <p>
* for most clients, this is typically the right constructor to use.
* </p>
*
* @param id
*            the component id
* @param wizardmodel
*            the transitions model
* @param adddefaultcssstyle
*            whether to add the {@link #adddefaultcssstyle() default style}
*/
public wizard string id  iwizardmodel wizardmodel  boolean adddefaultcssstyle
super id
init wizardmodel
if  adddefaultcssstyle
adddefaultcssstyle
/**
* will let the wizard contribute a css include to the page's header. it
* will add wizard.css from this package. this method is typically called by
* the class that creates the wizard.
*/
public final void adddefaultcssstyle
add headercontributor forcss wizard class
/**
* convenience method to get the active step from the model.
*
* @return the active step
*/
public final iwizardstep getactivestep
return getwizardmodel   getactivestep
/**
* gets the form in which the view is nested, and on which the wizard
* buttons work.
*
* @return the wizard form
*/
public final form getform
return form
/**
* @see org.apache.wicket.extensions.wizard.iwizard#getwizardmodel()
*/
public final iwizardmodel getwizardmodel
return wizardmodel
/**
* turn versioning off for wizards. this works best when the wizard is
* <strong>not</strong> accessed from bookmarkable pages, so that the url
* doesn't change at all.
*
* @return false
* @see org.apache.wicket.component#isversioned()
*/
public boolean isversioned
return false
/**
* @see org.apache.wicket.extensions.wizard.iwizardmodellistener#onactivestepchanged(org.apache.wicket.extensions.wizard.iwizardstep)
*/
public void onactivestepchanged iwizardstep newstep
this activestep   newstep
form replace activestep getview view_id  this  this
form replace activestep getheader header_id  this  this
/**
* called when the wizard is cancelled.
*/
public void oncancel
/**
* called when the wizard is finished.
*/
public void onfinish
/**
* initialize this wizard with a transition model.
* <p>
* if you constructed this wizard using a constructor without the
* transitions model argument, <strong>you must</strong> call this method
* prior to actually using it.
* </p>
*
* @param wizardmodel
*/
protected void init iwizardmodel wizardmodel
if  wizardmodel    null
throw new illegalargumentexception
this wizardmodel   wizardmodel
form   new form
add form
// dummy view to be replaced
form add new webmarkupcontainer header_id
form add newfeedbackpanel feedback_id
// add dummy view; will be replaced on initialization
form add new webmarkupcontainer view_id
form add newbuttonbar buttons_id
form add newoverviewbar overview_id
wizardmodel addlistener this
for  iterator iter   wizardmodel stepiterator    iter hasnext
iwizardstep iter next    init wizardmodel
// reset model to prepare for action
wizardmodel reset
/**
* create a new button bar. clients can override this method to provide a
* custom button bar.
*
* @param id
*            the id to be used to construct the component
*
* @return a new button bar
*/
protected component newbuttonbar string id
return new wizardbuttonbar id  this
/**
* create a new feedback panel. clients can override this method to provide
* a custom feedback panel.
*
* @param id
*            the id to be used to construct the component
*
* @return a new feedback panel
*/
protected feedbackpanel newfeedbackpanel string id
return new feedbackpanel id  new containerfeedbackmessagefilter this
/**
* create a new overview bar. clients can override this method to provide a
* custom bar.
*
* @param id
*            the id to be used to construct the component
*
* @return a new ovewview bar
*/
protected component newoverviewbar string id
// return a dummy component by default as we don't have an overview
// component
return new webmarkupcontainer id  setvisible false