/*
* ====================================================================
*
* the apache software license, version 1.1
*
* copyright (c) 1999-2003 the apache software foundation.
* all rights reserved.
*
* redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* 1. redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
*
* 2. redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in
*    the documentation and/or other materials provided with the
*    distribution.
*
* 3. the end-user documentation included with the redistribution, if
*    any, must include the following acknowledgement:
*       "this product includes software developed by the
*        apache software foundation (http://www.apache.org/)."
*    alternately, this acknowledgement may appear in the software itself,
*    if and wherever such third-party acknowledgements normally appear.
*
* 4. the names "the jakarta project", "commons", and "apache software
*    foundation" must not be used to endorse or promote products derived
*    from this software without prior written permission. for written
*    permission, please contact apache@apache.org.
*
* 5. products derived from this software may not be called "apache"
*    nor may "apache" appear in their names without prior written
*    permission of the apache software foundation.
*
* this software is provided ``as is'' and any expressed or implied
* warranties, including, but not limited to, the implied warranties
* of merchantability and fitness for a particular purpose are
* disclaimed.  in no event shall the apache software foundation or
* its contributors be liable for any direct, indirect, incidental,
* special, exemplary, or consequential damages (including, but not
* limited to, procurement of substitute goods or services; loss of
* use, data, or profits; or business interruption) however caused and
* on any theory of liability, whether in contract, strict liability,
* or tort (including negligence or otherwise) arising in any way out
* of the use of this software, even if advised of the possibility of
* such damage.
* ====================================================================
*
* this software consists of voluntary contributions made by many
* individuals on behalf of the apache software foundation.  for more
* information on the apache software foundation, please see
* <http://www.apache.org/>.
*
*/
package org apache wicket util diff
import java util list
/**
* holds a "delta" difference between to revisions of a text.
*
* @version $revision: 1.1 $ $date: 2006/03/12 00:24:21 $
*
* @author <a href="mailto:juanco@suigeneris.org">juanco anez</a>
* @author <a href="mailto:bwm@hplb.hpl.hp.com">brian mcbride</a>
* @see diff
* @see chunk
* @see revision
*
* modifications
*
* 27 apr 2003 bwm
*
* added getoriginal() and getrevised() accessor methods added visitor pattern
* accept() method
*/
public abstract class delta extends tostring
protected chunk original
protected chunk revised
static class deltaclass
static
deltaclass   new class
try
deltaclass   changedelta class
deltaclass   adddelta class
deltaclass   deletedelta class
deltaclass   changedelta class
catch  throwable o
/**
* returns a delta that corresponds to the given chunks in the original and
* revised text respectively.
*
* @param orig
*            the chunk in the original text.
* @param rev
*            the chunk in the revised text.
* @return delta
*/
public static delta newdelta chunk orig  chunk rev
class c   deltaclass
delta result
try
result    delta  c newinstance
catch  throwable e
return null
result init orig  rev
return result
/**
* creates an uninitialized delta.
*/
protected delta
/**
* creates a delta object with the given chunks from the original and
* revised texts.
* @param orig
* @param rev
*/
protected delta chunk orig  chunk rev
init orig  rev
/**
* initializaes the delta with the given chunks from the original and
* revised texts.
* @param orig
* @param rev
*/
protected void init chunk orig  chunk rev
original   orig
revised   rev
/**
* verifies that this delta can be used to patch the given text.
*
* @param target
*            the text to patch.
* @throws patchfailedexception
*             if the patch cannot be applied.
*/
public abstract void verify list target  throws patchfailedexception
/**
* applies this delta as a patch to the given text.
*
* @param target
*            the text to patch.
* @throws patchfailedexception
*             if the patch cannot be applied.
*/
public final void patch list target  throws patchfailedexception
verify target
try
applyto target
catch  exception e
throw new patchfailedexception e getmessage
/**
* applies this delta as a patch to the given text.
*
* @param target
*            the text to patch.
* @throws patchfailedexception
*             if the patch cannot be applied.
*/
public abstract void applyto list target
/**
* converts this delta into its unix diff style string representation.
*
* @param s
*            a {@link stringbuffer stringbuffer} to which the string
*            representation will be appended.
*/
public void tostring stringbuffer s
original rangestring s
s append
revised rangestring s
s append diff nl
original tostring s
s append
s append diff nl
revised tostring s
/**
* converts this delta into its rcs style string representation.
*
* @param s
*            a {@link stringbuffer stringbuffer} to which the string
*            representation will be appended.
* @param eol
*            the string to use as line separator.
*/
public abstract void torcsstring stringbuffer s  string eol
/**
* converts this delta into its rcs style string representation.
*
* @param eol
*            the string to use as line separator.
* @return string
*/
public string torcsstring string eol
stringbuffer s   new stringbuffer
torcsstring s  eol
return s tostring
/**
* accessor method to return the chunk representing the original sequence of
* items
*
* @return the original sequence
*/
public chunk getoriginal
return original
/**
* accessor method to return the chunk representing the updated sequence of
* items.
*
* @return the updated sequence
*/
public chunk getrevised
return revised
/**
* accepts a visitor.
* <p>
* see the visitor pattern in "design patterns" by the gof4.
*
* @param visitor
*            the visitor.
*/
public abstract void accept revisionvisitor visitor