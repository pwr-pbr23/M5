/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket markup repeater
import java util iterator
import java util nosuchelementexception
import org apache wicket markup html navigation paging ipageable
import org apache wicket model imodel
import org apache wicket version undo change
/**
* an abstract repeater view that provides paging functionality to its
* subclasses.
* <p>
* the view is populated by overriding the
* <code>getitemmodels(int offset, int count)</code> method and providing an
* iterator that returns models for items in the current page. the
* abstractpageableview builds the items that will be rendered by looping over
* the models and calling the
* <code>newitem(string id, int index, imodel model)</code> to generate the
* child item container followed by <code>populateitem(component item)</code>
* to let the user populate the newly created item container with with custom
* components.
* </p>
*
* @see org.apache.wicket.extensions.markup.html.repeater.refreshing.refreshingview
* @see org.apache.wicket.markup.html.navigation.paging.ipageable
*
* @author igor vaynberg (ivaynberg)
*
*/
public abstract class abstractpageableview extends refreshingview implements ipageable
/**
* keeps track of the number of items we show per page. the default is
* integer.max_value which effectively disables paging.
*/
private int itemsperpage   integer max_value
/**
* keeps track of the current page number.
*/
private int currentpage
/**
* <code>cacheditemcount</code> is used to cache the call to
* <code>internalgetitemcount()</code> for the duration of the request
* because that call can potentially be expensive ( a select count query )
* and so we do not want to execute it multiple times.
*/
private int cacheditemcount
/** @see org.apache.wicket.component#component(string, imodel) */
public abstractpageableview string id  imodel model
super id  model
clearcacheditemcount
/** @see org.apache.wicket.component#component(string) */
public abstractpageableview string id
super id
clearcacheditemcount
/**
* this method retrieves the subset of models for items in the current page
* and allows refreshingview to generate items.
*
* @return iterator over models for items in the current page
*/
protected iterator getitemmodels
int offset   getviewoffset
int size   getviewsize
iterator models   getitemmodels offset  size
models   new cappediteratoradapter models  size
return models
protected void ondetach
clearcacheditemcount
super ondetach
/**
* returns an iterator over models for items in the current page
*
* @param offset
*            index of first item in this page
* @param size
*            number of items that will be showin in the current page
* @return an iterator over models for items in the current page
*/
protected abstract iterator getitemmodels int offset  int size
// /////////////////////////////////////////////////////////////////////////
// item count cache
// /////////////////////////////////////////////////////////////////////////
private void clearcacheditemcount
cacheditemcount    1
private void setcacheditemcount int itemcount
cacheditemcount   itemcount
private int getcacheditemcount
if  cacheditemcount < 0
throw new illegalstateexception
return cacheditemcount
private boolean isitemcountcached
return cacheditemcount >  0
// /////////////////////////////////////////////////////////////////////////
// paging
// /////////////////////////////////////////////////////////////////////////
/**
* @return maximum number of items that will be shown per page
*/
protected final int internalgetrowsperpage
return itemsperpage
/**
* sets the maximum number of items to show per page. the current page will
* also be set to zero
*
* @param items
*/
protected final void internalsetrowsperpage int items
if  items < 1
throw new illegalargumentexception
if  itemsperpage    items
if  isversioned
addstatechange new change
private static final long serialversionuid   1l
final int old   itemsperpage
public void undo
itemsperpage   old
public string tostring
return     getpath
old
itemsperpage   items
// because items per page can effect the total number of pages we always
// reset the current page back to zero
setcurrentpage 0
/**
* @return total item count
*/
protected abstract int internalgetitemcount
/**
* @return total item count
*/
public final int getrowcount
if   isvisibleinhierarchy
return 0
if  isitemcountcached
return getcacheditemcount
int count   internalgetitemcount
setcacheditemcount count
return count
/**
* @see org.apache.wicket.markup.html.navigation.paging.ipageable#getcurrentpage()
*/
public final int getcurrentpage
int page   currentpage
/*
* trim current page if its out of bounds this can happen if items are
* added/deleted between requests
*/
if  page >  getpagecount
page   math max getpagecount     1  0
setcurrentpage page
return page
return page
/**
* @see org.apache.wicket.markup.html.navigation.paging.ipageable#setcurrentpage(int)
*/
public final void setcurrentpage int page
if  page < 0     page >  getpagecount      getpagecount   > 0
throw new indexoutofboundsexception     page
getpagecount
if  currentpage    page
if  isversioned
addstatechange new change
private static final long serialversionuid   1l
private final int old   currentpage
public void undo
currentpage   old
public string tostring
return     getpath
old
currentpage   page
/**
* @see org.apache.wicket.markup.html.navigation.paging.ipageable#getpagecount()
*/
public final int getpagecount
int total   getrowcount
int page   internalgetrowsperpage
int count   total   page
if  page   count < total
count
return count
/**
* @return the index of the first visible item
*/
protected int getviewoffset
return getcurrentpage     internalgetrowsperpage
/**
* @return the number of items visible
*/
protected int getviewsize
return math min internalgetrowsperpage    getrowcount     getviewoffset
// /////////////////////////////////////////////////////////////////////////
// helper classes
// /////////////////////////////////////////////////////////////////////////
/**
* iterator adapter that makes sure only the specified max number of items
* can be accessed from its delegate.
*/
private static class cappediteratoradapter implements iterator
private int max
private int index
private iterator delegate
/**
* constructor
*
* @param delegate
*            delegate iterator
* @param max
*            maximum number of items that can be accessed.
*/
public cappediteratoradapter iterator delegate  int max
this delegate   delegate
this max   max
/**
* @see java.util.iterator#remove()
*/
public void remove
throw new unsupportedoperationexception
/**
* @see java.util.iterator#hasnext()
*/
public boolean hasnext
return  index < max     delegate hasnext
/**
* @see java.util.iterator#next()
*/
public object next
if  index >  max
throw new nosuchelementexception
index
return delegate next