/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket extensions markup html repeater data grid
import java util list
import org apache wicket markup repeater data idataprovider
/**
* simple concrete implementation of {@link abstractdatagridview}
*
* <p>
* example:
*
* <pre>
*           &lt;table&gt;
*             &lt;tr wicket:id=&quot;rows&quot;&gt;
*               &lt;td wicket:id=&quot;cells&quot;&gt;
*                 &lt;span wicket:id=&quot;cell&quot;&gt; &lt;/span&gt;
*               &lt;/td&gt;
*             &lt;/tr&gt;
*           &lt;/table&gt;
* </pre>
*
* <p>
* though this example is about a html table, datagridview is not at all limited
* to html tables. any kind of grid can be rendered using datagridview.
* <p>
* and the related java code:
*
* <pre>
*
* icellpopulator[] columns = new icellpopulator[2];
*
* columns[0] = new propertypopulator(&quot;firstname&quot;);
* columns[1] = new propertypopulator(&quot;lastname&quot;);
*
* add(new datagridview(&quot;rows&quot;, columns, new userprovider()));
*
* </pre>
*
* @see abstractdatagridview
* @see idataprovider
*
* @author igor vaynberg (ivaynberg)
*
*/
public class datagridview extends abstractdatagridview
private static final long serialversionuid   1l
/**
* constructor
*
* notice cells are created in the same order as cell populators in the list
*
* @param id
*            component id
* @param populators
*            list of icellpopulators used to populate cells
* @param dataprovider
*            data provider
*/
public datagridview string id  list   <icellpopulator>   populators  idataprovider dataprovider
super id   icellpopulator populators toarray new icellpopulator
dataprovider
/**
* constructor
*
* notice cells are created in the same order as cell populators in the
* array
*
* @param id
*            component id
* @param populators
*            array of icellpopulators used to populate cells
* @param dataprovider
*            data provider
*/
public datagridview string id  icellpopulator populators  idataprovider dataprovider
super id  populators  dataprovider
/**
* returns the array of cell populators
*
* @return the array of cell populators
*/
public icellpopulator getpopulators
return internalgetpopulators
/**
* sets the number of items to be displayed per page
*
* @param items
*            number of items to display per page
*
*/
public void setrowsperpage int items
internalsetrowsperpage items
/**
* @return number of items displayed per page
*/
public int getrowsperpage
return internalgetrowsperpage
/**
* returns the data provider
*
* @return data provider
*/
public idataprovider getdataprovider
return internalgetdataprovider