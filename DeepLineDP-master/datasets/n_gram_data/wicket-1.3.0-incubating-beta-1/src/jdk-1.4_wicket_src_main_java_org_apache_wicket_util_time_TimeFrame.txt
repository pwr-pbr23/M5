/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util time
/**
* immutable class which represents an interval of time with a beginning and an
* end. the beginning value is inclusive and the end value is exclusive. in
* other words, the time frame of 1pm to 2pm includes 1pm, but not 2pm. 1:59:59
* is the last value in the timeframe.
* <p>
* timeframes can be constructed by calling the valueof static factory methods
* valueof(time, time) (yielding a timeframe between two absolute times) and
* valueof(time, duration) yielding a timeframe starting at an absolute time and
* having a given length.
* <p>
* the start and end of a timeframe can be retrieved by calling getstart() and
* getend(). its duration can be retrieved by calling getduration().
* <p>
* the contains(time) method can be called to determine if a timeframe contains
* a given point in time. the overlaps(timeframe) method can be called to
* determine if two timeframes overlap.
* <p>
* the eachday(timeofday, timeofday) will return a timeframesource which
* generates a timeframe using the two times of day. in other words, if the
* start is 3pm and the end is 4pm, the timeframesource returned will yield
* 3-4pm on the day it is called (each day).
*
* @author jonathan locke
*/
public final class timeframe implements itimeframesource
/** end of this timeframe */
private final time end
/** begining of this timeframe */
private final time start
/**
* returns a timeframe source for a start and end time-of-day. for example,
* called with 3pm and 5pm as parameters, the timeframe source returned
* would produce timeframe objects representing 3pm-5pm on whatever day it
* is when the caller calls the timeframesource interface.
*
* @param starttimeofday
*            the start time for this time frame each day
* @param endtimeofday
*            the end time for this time frame each day
* @return a timeframe source which will return the specified timeframe each
*         day
*/
public static itimeframesource eachday final timeofday starttimeofday
final timeofday endtimeofday
check starttimeofday  endtimeofday
return new itimeframesource
public timeframe gettimeframe
return new timeframe time valueof starttimeofday   time valueof endtimeofday
/**
* creates a time frame for a start and duration
*
* @param start
*            the start time
* @param duration
*            the duration
* @return the time frame
* @throws illegalargumentexception
*             thrown if start time is before end time
*/
public static timeframe valueof final time start  final duration duration
return new timeframe start  start add duration
/**
* creates a time frame for a start and end time
*
* @param start
*            the start time
* @param end
*            the end time
* @return the time frame
* @throws illegalargumentexception
*             thrown if start time is before end time
*/
public static timeframe valueof final time start  final time end
return new timeframe start  end
/**
* checks consistency of start and end values, ensuring that the end value
* is less than the start value.
*
* @param start
*            start value
* @param end
*            end value
* @throws illegalargumentexception
*             thrown if end is less than start
*/
private static void check final abstracttimevalue start  final abstracttimevalue end
// throw illegal argument exception if end is less than start
if  end lessthan start
throw new illegalargumentexception     start
end
/**
* private constructor to force use of static factory methods
*
* @param start
*            the start time
* @param end
*            the end time
* @throws illegalargumentexception
*             thrown if start time is before end time
*/
private timeframe final time start  final time end
check start  end
this start   start
this end   end
/**
* @param time
*            the time to check
* @return true if this time frame contains the given time
*/
public boolean contains final time time
return  start equals time     start before time      end after time
/**
* @return the duration of this time frame
*/
public duration getduration
return end subtract start
/**
* @return the end of this time frame
*/
public time getend
return end
/**
* @return the start of this time frame
*/
public time getstart
return start
/**
* implementation of itimeframesource that simply returns this timeframe
*
* @return gets this timeframe
*/
public timeframe gettimeframe
return this
/**
* @param timeframe
*            the timeframe to test
* @return true if the given timeframe overlaps this one
*/
public boolean overlaps final timeframe timeframe
return contains timeframe start     contains timeframe end     timeframe contains start
timeframe contains end
/**
* @return string representation of this object
*/
public string tostring
return     start       end