/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket spring
import javax servlet servletcontext
import org apache wicket application
import org apache wicket protocol http webapplication
import org apache wicket proxy lazyinitproxyfactory
import org springframework beans beansexception
import org springframework context applicationcontext
import org springframework context applicationcontextaware
import org springframework web context support webapplicationcontextutils
/**
* base class for spring aware wicket web application object. this class has
* helper methods to create lazy init proxies based on spring beans, as well as
* an implementation of {@link ispringcontextlocator}.
*
* @author igor vaynberg (ivaynberg)
*/
public abstract class springwebapplication extends webapplication implements
applicationcontextaware
private applicationcontext applicationcontext
/**
* singleton instance of spring application context locator
*/
private final static ispringcontextlocator contextlocator   new ispringcontextlocator
public applicationcontext getspringcontext
application app   application get
return   springwebapplication  app  internalgetapplicationcontext
/**
* construct.
*/
public springwebapplication
/**
* @see org.apache.wicket.application#internalinit()
*/
protected void internalinit
super internalinit
if  applicationcontext    null
// this application was not created as a spring bean so we
// locate the app context from servlet context
servletcontext sc   getservletcontext
applicationcontext   webapplicationcontextutils
getrequiredwebapplicationcontext sc
/**
* @see org.springframework.context.applicationcontextaware#setapplicationcontext(org.springframework.context.applicationcontext)
*/
public final void setapplicationcontext applicationcontext applicationcontext
throws beansexception
this applicationcontext   applicationcontext
/**
* retrieves the spring application context associated with this application
* object
*
* this method is protected and named internalgetapplicationcontext so that
* the subclass can choose whether or not to add a public
* getapplicationcontext() method
*
* @return spring application context
*/
protected final applicationcontext internalgetapplicationcontext
return applicationcontext
/**
* retrieves the spring application context locator object
*
* @return spring application context locator object
*/
public ispringcontextlocator getspringcontextlocator
return contextlocator
/**
* creates a proxy for a spring bean that is safe to put into session and
* serialize
*
* @param clazz
*            class of spring bean
* @param beanname
*            name of spring bean
* @return proxy representing the spring bean
*/
protected object createspringbeanproxy class clazz  string beanname
return lazyinitproxyfactory createproxy clazz  new springbeanlocator beanname
clazz  getspringcontextlocator
/**
* creates a proxy for a spring bean that is safe to put into session and
* serialize
*
* @param clazz
*            class of spring bean
* @return proxy representing the spring bean
*/
protected object createspringbeanproxy class clazz
return lazyinitproxyfactory createproxy clazz  new springbeanlocator clazz
getspringcontextlocator