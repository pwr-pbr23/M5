/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util io
import java io bufferedinputstream
import java io bufferedreader
import java io chararraywriter
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java io outputstreamwriter
import java io reader
import java io stringwriter
import java io writer
/**
* general io stream manipulation.
* <p>
* this class provides static utility methods for input/output operations.
* <ul>
* <li>closequietly - these methods close a stream ignoring nulls and
* exceptions
* <li>toxxx - these methods read data from a stream
* <li>write - these methods write data to a stream
* <li>copy - these methods copy all the data from one stream to another
* <li>contentequals - these methods compare the content of two streams
* </ul>
* <p>
* the byte-to-char methods and char-to-byte methods involve a conversion step.
* two methods are provided in each case, one that uses the platform default
* encoding and the other which allows you to specify an encoding. you are
* encouraged to always specify an encoding because relying on the platform
* default can lead to unexpected results, for example when moving from
* development to production.
* <p>
* all the methods in this class that read a stream are buffered internally.
* this means that there is no cause to use a <code>bufferedinputstream</code>
* or <code>bufferedreader</code>. the default buffer size of 4k has been
* show to be efficient in tests.
* <p>
* wherever possible, the methods in this class do <em>not</em> flush or close
* the stream. this is to avoid making non-portable assumptions about the
* streams' origin and further use. thus the caller is still responsible for
* closing streams after use.
* <p>
* origin of code: apache avalon (excalibur)
*
* @author peter donald
* @author jeff turner
* @author matthew hawthorne
* @author stephen colebourne
* @author gareth davis
* @version cvs $revision$ $date$
*/
public final class ioutils
// note: this class is focussed on inputstream, outputstream, reader and
// writer. each method should take at least one of these as a parameter.
// note: this class should not depend on any other classes
/**
* the default buffer size to use.
*/
private static final int default_buffer_size   1024   4
/**
* instances should not be constructed in standard programming.
*/
public ioutils
// -----------------------------------------------------------------------
/**
* unconditionally close an <code>reader</code>.
* <p>
* equivalent to {@link reader#close()}, except any exceptions will be
* ignored. this is typically used in finally blocks.
*
* @param input
*            the reader to close, may be null or already closed
*/
public static void closequietly reader input
if  input    null
try
input close
catch  exception e
// ignore
/**
* unconditionally close a <code>writer</code>.
* <p>
* equivalent to {@link writer#close()}, except any exceptions will be
* ignored. this is typically used in finally blocks.
*
* @param output
*            the writer to close, may be null or already closed
*/
public static void closequietly writer output
if  output    null
try
output close
catch  exception e
// ignore
/**
* unconditionally close an <code>inputstream</code>.
* <p>
* equivalent to {@link inputstream#close()}, except any exceptions will be
* ignored. this is typically used in finally blocks.
*
* @param input
*            the inputstream to close, may be null or already closed
*/
public static void closequietly inputstream input
if  input    null
try
input close
catch  exception e
// ignore
/**
* unconditionally close an <code>outputstream</code>.
* <p>
* equivalent to {@link outputstream#close()}, except any exceptions will
* be ignored. this is typically used in finally blocks.
*
* @param output
*            the outputstream to close, may be null or already closed
*/
public static void closequietly outputstream output
if  output    null
try
output close
catch  exception e
// ignore
// read tobytearray
// -----------------------------------------------------------------------
/**
* get the contents of an <code>inputstream</code> as a
* <code>byte[]</code>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param input
*            the <code>inputstream</code> to read from
* @return the requested byte array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static byte tobytearray inputstream input  throws ioexception
bytearrayoutputstream output   new bytearrayoutputstream
copy input  output
return output tobytearray
/**
* get the contents of a <code>reader</code> as a <code>byte[]</code>
* using the default character encoding of the platform.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
*
* @param input
*            the <code>reader</code> to read from
* @return the requested byte array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static byte tobytearray reader input  throws ioexception
bytearrayoutputstream output   new bytearrayoutputstream
copy input  output
return output tobytearray
/**
* get the contents of a <code>reader</code> as a <code>byte[]</code>
* using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
*
* @param input
*            the <code>reader</code> to read from
* @param encoding
*            the encoding to use, null means platform default
* @return the requested byte array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static byte tobytearray reader input  string encoding  throws ioexception
bytearrayoutputstream output   new bytearrayoutputstream
copy input  output  encoding
return output tobytearray
// read char[]
// -----------------------------------------------------------------------
/**
* get the contents of an <code>inputstream</code> as a character array
* using the default character encoding of the platform.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param is
*            the <code>inputstream</code> to read from
* @return the requested character array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static char tochararray inputstream is  throws ioexception
chararraywriter output   new chararraywriter
copy is  output
return output tochararray
/**
* get the contents of an <code>inputstream</code> as a character array
* using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param is
*            the <code>inputstream</code> to read from
* @param encoding
*            the encoding to use, null means platform default
* @return the requested character array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static char tochararray inputstream is  string encoding  throws ioexception
chararraywriter output   new chararraywriter
copy is  output  encoding
return output tochararray
/**
* get the contents of a <code>reader</code> as a character array.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
*
* @param input
*            the <code>reader</code> to read from
* @return the requested character array
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static char tochararray reader input  throws ioexception
chararraywriter sw   new chararraywriter
copy input  sw
return sw tochararray
// read tostring
// -----------------------------------------------------------------------
/**
* get the contents of an <code>inputstream</code> as a string using the
* default character encoding of the platform.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param input
*            the <code>inputstream</code> to read from
* @return the requested string
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static string tostring inputstream input  throws ioexception
stringwriter sw   new stringwriter
copy input  sw
return sw tostring
/**
* get the contents of an <code>inputstream</code> as a string using the
* specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param input
*            the <code>inputstream</code> to read from
* @param encoding
*            the encoding to use, null means platform default
* @return the requested string
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static string tostring inputstream input  string encoding  throws ioexception
stringwriter sw   new stringwriter
copy input  sw  encoding
return sw tostring
/**
* get the contents of a <code>reader</code> as a string.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
*
* @param input
*            the <code>reader</code> to read from
* @return the requested string
* @throws nullpointerexception
*             if the input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static string tostring reader input  throws ioexception
stringwriter sw   new stringwriter
copy input  sw
return sw tostring
// write byte[]
// -----------------------------------------------------------------------
/**
* writes bytes from a <code>byte[]</code> to an <code>outputstream</code>.
*
* @param data
*            the byte array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>outputstream</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write byte data  outputstream output  throws ioexception
if  data    null
output write data
/**
* writes bytes from a <code>byte[]</code> to chars on a
* <code>writer</code> using the default character encoding of the
* platform.
* <p>
* this method uses {@link string#string(byte[])}.
*
* @param data
*            the byte array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>writer</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write byte data  writer output  throws ioexception
if  data    null
output write new string data
/**
* writes bytes from a <code>byte[]</code> to chars on a
* <code>writer</code> using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method uses {@link string#string(byte[], string)}.
*
* @param data
*            the byte array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>writer</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write byte data  writer output  string encoding  throws ioexception
if  data    null
if  encoding    null
write data  output
else
output write new string data  encoding
// write char[]
// -----------------------------------------------------------------------
/**
* writes chars from a <code>char[]</code> to a <code>writer</code>
* using the default character encoding of the platform.
*
* @param data
*            the char array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>writer</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write char data  writer output  throws ioexception
if  data    null
output write data
/**
* writes chars from a <code>char[]</code> to bytes on an
* <code>outputstream</code>.
* <p>
* this method uses {@link string#string(char[])} and
* {@link string#getbytes()}.
*
* @param data
*            the char array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>outputstream</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write char data  outputstream output  throws ioexception
if  data    null
output write new string data  getbytes
/**
* writes chars from a <code>char[]</code> to bytes on an
* <code>outputstream</code> using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method uses {@link string#string(char[])} and
* {@link string#getbytes(string)}.
*
* @param data
*            the char array to write, do not modify during output, null
*            ignored
* @param output
*            the <code>outputstream</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write char data  outputstream output  string encoding  throws ioexception
if  data    null
if  encoding    null
write data  output
else
output write new string data  getbytes encoding
// write string
// -----------------------------------------------------------------------
/**
* writes chars from a <code>string</code> to a <code>writer</code>.
*
* @param data
*            the <code>string</code> to write, null ignored
* @param output
*            the <code>writer</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write string data  writer output  throws ioexception
if  data    null
output write data
/**
* writes chars from a <code>string</code> to bytes on an
* <code>outputstream</code> using the default character encoding of the
* platform.
* <p>
* this method uses {@link string#getbytes()}.
*
* @param data
*            the <code>string</code> to write, null ignored
* @param output
*            the <code>outputstream</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write string data  outputstream output  throws ioexception
if  data    null
output write data getbytes
/**
* writes chars from a <code>string</code> to bytes on an
* <code>outputstream</code> using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method uses {@link string#getbytes(string)}.
*
* @param data
*            the <code>string</code> to write, null ignored
* @param output
*            the <code>outputstream</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write string data  outputstream output  string encoding  throws ioexception
if  data    null
if  encoding    null
write data  output
else
output write data getbytes encoding
// write appendingstringbuffer
// -----------------------------------------------------------------------
/**
* writes chars from a <code>appendingstringbuffer</code> to a
* <code>writer</code>.
*
* @param data
*            the <code>appendingstringbuffer</code> to write, null
*            ignored
* @param output
*            the <code>writer</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write stringbuffer data  writer output  throws ioexception
if  data    null
output write data tostring
/**
* writes chars from a <code>appendingstringbuffer</code> to bytes on an
* <code>outputstream</code> using the default character encoding of the
* platform.
* <p>
* this method uses {@link string#getbytes()}.
*
* @param data
*            the <code>appendingstringbuffer</code> to write, null
*            ignored
* @param output
*            the <code>outputstream</code> to write to
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write stringbuffer data  outputstream output  throws ioexception
if  data    null
output write data tostring   getbytes
/**
* writes chars from a <code>appendingstringbuffer</code> to bytes on an
* <code>outputstream</code> using the specified character encoding.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method uses {@link string#getbytes(string)}.
*
* @param data
*            the <code>appendingstringbuffer</code> to write, null
*            ignored
* @param output
*            the <code>outputstream</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void write stringbuffer data  outputstream output  string encoding
throws ioexception
if  data    null
if  encoding    null
write data  output
else
output write data tostring   getbytes encoding
// copy from inputstream
// -----------------------------------------------------------------------
/**
* copy bytes from an <code>inputstream</code> to an
* <code>outputstream</code>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
*
* @param input
*            the <code>inputstream</code> to read from
* @param output
*            the <code>outputstream</code> to write to
* @return the number of bytes copied
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static int copy inputstream input  outputstream output  throws ioexception
byte buffer   new byte
int count   0
int n   0
while   1     n   input read buffer
output write buffer  0  n
count    n
return count
/**
* copy bytes from an <code>inputstream</code> to chars on a
* <code>writer</code> using the default character encoding of the
* platform.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
* <p>
* this method uses {@link inputstreamreader}.
*
* @param input
*            the <code>inputstream</code> to read from
* @param output
*            the <code>writer</code> to write to
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void copy inputstream input  writer output  throws ioexception
inputstreamreader in   new inputstreamreader input
copy in  output
/**
* copy bytes from an <code>inputstream</code> to chars on a
* <code>writer</code> using the specified character encoding.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedinputstream</code>.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* this method uses {@link inputstreamreader}.
*
* @param input
*            the <code>inputstream</code> to read from
* @param output
*            the <code>writer</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void copy inputstream input  writer output  string encoding  throws ioexception
if  encoding    null
copy input  output
else
inputstreamreader in   new inputstreamreader input  encoding
copy in  output
// copy from reader
// -----------------------------------------------------------------------
/**
* copy chars from a <code>reader</code> to a <code>writer</code>.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
*
* @param input
*            the <code>reader</code> to read from
* @param output
*            the <code>writer</code> to write to
* @return the number of characters copied
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static int copy reader input  writer output  throws ioexception
char buffer   new char
int count   0
int n   0
while   1     n   input read buffer
output write buffer  0  n
count    n
return count
/**
* copy chars from a <code>reader</code> to bytes on an
* <code>outputstream</code> using the default character encoding of the
* platform, and calling flush.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
* <p>
* due to the implementation of outputstreamwriter, this method performs a
* flush.
* <p>
* this method uses {@link outputstreamwriter}.
*
* @param input
*            the <code>reader</code> to read from
* @param output
*            the <code>outputstream</code> to write to
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void copy reader input  outputstream output  throws ioexception
outputstreamwriter out   new outputstreamwriter output
copy input  out
out flush
/**
* copy chars from a <code>reader</code> to bytes on an
* <code>outputstream</code> using the specified character encoding, and
* calling flush.
* <p>
* this method buffers the input internally, so there is no need to use a
* <code>bufferedreader</code>.
* <p>
* character encoding names can be found at <a
* href="http://www.iana.org/assignments/character-sets">iana</a>.
* <p>
* due to the implementation of outputstreamwriter, this method performs a
* flush.
* <p>
* this method uses {@link outputstreamwriter}.
*
* @param input
*            the <code>reader</code> to read from
* @param output
*            the <code>outputstream</code> to write to
* @param encoding
*            the encoding to use, null means platform default
* @throws nullpointerexception
*             if the input or output is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static void copy reader input  outputstream output  string encoding  throws ioexception
if  encoding    null
copy input  output
else
outputstreamwriter out   new outputstreamwriter output  encoding
copy input  out
out flush
// content equals
// -----------------------------------------------------------------------
/**
* compare the contents of two streams to determine if they are equal or
* not.
* <p>
* this method buffers the input internally using
* <code>bufferedinputstream</code> if they are not already buffered.
*
* @param input1
*            the first stream
* @param input2
*            the second stream
* @return true if the content of the streams are equal or they both don't
*         exist, false otherwise
* @throws nullpointerexception
*             if either input is null
* @throws ioexception
*             if an i/o error occurs
*/
public static boolean contentequals inputstream input1  inputstream input2  throws ioexception
if    input1 instanceof bufferedinputstream
input1   new bufferedinputstream input1
if    input2 instanceof bufferedinputstream
input2   new bufferedinputstream input2
int ch   input1 read
while   1    ch
int ch2   input2 read
if  ch    ch2
return false
ch   input1 read
int ch2   input2 read
return  ch2     1
/**
* compare the contents of two readers to determine if they are equal or
* not.
* <p>
* this method buffers the input internally using
* <code>bufferedreader</code> if they are not already buffered.
*
* @param input1
*            the first reader
* @param input2
*            the second reader
* @return true if the content of the readers are equal or they both don't
*         exist, false otherwise
* @throws nullpointerexception
*             if either input is null
* @throws ioexception
*             if an i/o error occurs
* @since 1.1
*/
public static boolean contentequals reader input1  reader input2  throws ioexception
if    input1 instanceof bufferedreader
input1   new bufferedreader input1
if    input2 instanceof bufferedreader
input2   new bufferedreader input2
int ch   input1 read
while   1    ch
int ch2   input2 read
if  ch    ch2
return false
ch   input1 read
int ch2   input2 read
return  ch2     1