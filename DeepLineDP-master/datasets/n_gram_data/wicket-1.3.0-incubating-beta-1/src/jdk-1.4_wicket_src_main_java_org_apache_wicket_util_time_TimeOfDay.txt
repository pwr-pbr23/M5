/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util time
import java text parseexception
import java util calendar
import org apache wicket util lang enumeratedtype
/**
* an immutable time of day value represented as milliseconds since the most
* recent midnight.
* <p>
* values can be constructed using various factory methods:
* <ul>
* <li>valueof(long) where long is milliseconds since midnight
* <li>valueof(string) where the string is in h.mma format
* <li>valueof(calendar, string) where the string is in h.mma format
* <li>valueof(duration) where duration is time since midnight
* <li>valueof(time) where time is some point in time today
* <li>valueof(calendar, time) where time is some point in time today
* <li>militarytime(int hour, int minute, int second) for 24 hour time
* <li>time(int hour, int minute, meridian) where meridian is am or pm
* <li>time(int hour, int minute, int second, meridian) where meridian is am or
* pm
* <li>now() to construct the current time of day
* <li>now(calendar) to construct the current time of day using a given
* calendar
* </ul>
* <p>
* if an attempt is made to construct an illegal time of day value (one that is
* greater than 24 hours worth of milliseconds), an illegalargumentexception
* will be thrown.
* <p>
* military hours, minutes and seconds of the time of day can be retrieved by
* calling hour(), minute() and second().
* <p>
* the next occurrence of a given time of day can be retrieved by calling next()
* or next(calendar).
*
* @author jonathan locke
*/
public final class timeofday extends abstracttime
private static final long serialversionuid   1l
/** constant for am time. */
public static final meridian am   new meridian
/** constant for midnight. */
public static final timeofday midnight   time 12  0  am
/** constant for pm time. */
public static final meridian pm   new meridian
/** constant for noon. */
public static final timeofday noon   time 12  0  pm
/** typesafe am/pm enumeration. */
public static final class meridian extends enumeratedtype
private static final long serialversionuid   1l
/**
* construct.
*
* @param name
*            the meridian name (value)
*/
meridian final string name
super name
/**
* gets a time of day value on a 24 hour clock.
*
* @param hour
*            the hour (0-23)
* @param minute
*            the minute (0-59)
* @param second
*            the second (0-59)
* @return the time of day
*/
public static timeofday militarytime final int hour  final int minute  final int second
if   hour > 23      hour < 0
throw new illegalargumentexception     hour
if   minute > 59      minute < 0
throw new illegalargumentexception     minute
if   second > 59      second < 0
throw new illegalargumentexception     second
return valueof duration hours hour  add duration minutes minute   add
duration seconds second
/**
* gets the time of day it is now.
*
* @return the time of day it is now
*/
public static timeofday now
return valueof time now
/**
* gets the time of day it is now on the given calendar.
*
* @param calendar
*            the calendar to use
* @return the time of day it is now on the given calendar
*/
public static timeofday now final calendar calendar
return valueof calendar  time now
/**
* gets a time of day on a 12 hour clock.
*
* @param hour
*            the hour (1-12)
* @param minute
*            the minute (0-59)
* @param second
*            the second (0-59)
* @param meridian
*            am/pm
* @return the time value
*/
public static timeofday time final int hour  final int minute  final int second
final meridian meridian
if  meridian    pm
if  hour    12
return militarytime 12  minute  second
else
return militarytime hour   12  minute  second
else
if  hour    12
return militarytime 0  minute  second
else
return militarytime hour  minute  second
/**
* gets a time of day on a 12 hour clock.
*
* @param hour
*            the hour (1-12)
* @param minute
*            the minute (0-59)
* @param meridian
*            am/pm
* @return the time value
*/
public static timeofday time final int hour  final int minute  final meridian meridian
return time hour  minute  0  meridian
/**
* converts to timeofday instance.
*
* @param calendar
*            the calendar to use when parsing time string
* @param time
*            a string in h.mma format
* @return the time of day on the given calendar
* @throws parseexception
*/
public static timeofday valueof final calendar calendar  final string time
throws parseexception
synchronized  timeformat
synchronized  calendar
timeformat setcalendar calendar
return new timeofday timeformat parse time  gettime
/**
* converts to timeofday instance.
*
* @param calendar
*            the calendar to use when converting time value
* @param time
*            the time to convert to a time of day
* @return the time of day for this time
*/
public static timeofday valueof final calendar calendar  final time time
return militarytime time gethour calendar   time getminute calendar   time
getsecond calendar
/**
* converts to timeofday instance.
*
* @param duration
*            the duration
* @return the time of day for the duration since midnight
*/
public static timeofday valueof final duration duration
return new timeofday duration getmilliseconds
/**
* converts to timeofday instance.
*
* @param time
*            the time in milliseconds today
* @return the time of day
*/
public static timeofday valueof final long time
return new timeofday time
/**
* converts to timeofday instance.
*
* @param time
*            a string in h.mma format
* @return the time of day on the given calendar
* @throws parseexception
*/
public static timeofday valueof final string time  throws parseexception
return valueof localtime  time
/**
* converts to timeofday instance.
*
* @param time
*            time to convert to time of day
* @return the time of day in the current timezone
*/
public static timeofday valueof final time time
return valueof abstracttime localtime  time
/**
* private utility constructor forces use of static factory methods.
*
* @param time
*            time today in milliseconds
*/
private timeofday final long time
super time
// a time of day value must be less than 1 day of milliseconds
if  duration valueof time  greaterthan duration one_day
throw new illegalargumentexception     this
/**
* gets the hour of the day.
*
* @return the hour of the day (0-23)
*/
public int hour
return tohours getmilliseconds
/**
* gets the minute.
*
* @return the minute (0-59)
*/
public int minute
return tominutes getmilliseconds    % 60
/**
* gets the next occurrence of this time of day in localtime.
*
* @return the next occurrence of this time of day in localtime
*/
public time next
return next abstracttime localtime
/**
* gets the next occurence of this time of day on the given calendar.
*
* @param calendar
*            the calendar to use
* @return the next occurrence of this time of day on the given calendar
*/
public time next final calendar calendar
// get this time of day today
final time timetoday   time valueof calendar  this
// if it has already passed
if  timetoday before time now
// return the time tomorrow
calendar add calendar date  1
return time valueof calendar  this
else
// time hasn't happened yet today
return timetoday
/**
* gets the second.
*
* @return the second (0-59)
*/
public int second
return toseconds getmilliseconds    % 60
/**
* @see object#tostring()
*/
public string tostring
final int second   second
return     hour         minute      second    0 ?     second
/**
* gets miliseconds as hours.
*
* @param milliseconds
*            miliseconds to convert
* @return converted input
*/
private int tohours final long milliseconds
return tominutes milliseconds    60
/**
* gets miliseconds as minutes.
*
* @param milliseconds
*            miliseconds to convert
* @return converted input
*/
private int tominutes final long milliseconds
return toseconds milliseconds    60
/**
* gets miliseconds as seconds.
*
* @param milliseconds
*            miliseconds to convert
* @return converted input
*/
private int toseconds final long milliseconds
return  int  milliseconds   1000