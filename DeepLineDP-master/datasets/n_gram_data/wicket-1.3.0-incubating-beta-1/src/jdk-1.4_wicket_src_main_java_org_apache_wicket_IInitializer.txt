/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket
import org apache wicket markup html packageresource
/**
* initializes something when application loads.
*
* initializer is there for clustering. lets say you access a page that has a
* link to a resource on node a now the url for the resource gets forwarded to
* node b, but node b doesnt have the resource registered yet because maybe the
* page class hasn't been loaded and so its static block hasn't run yet. so the
* initializer is a place for you to register all those resources and do all the
* stuff you used to do in the static blocks.
* <p>
* you don't have to pre-register {@link packageresource package resources}, as
* they can be initialized lazily.
* </p>
* <p>
* initializers can be configured by having a wicket.properties file in the
* class path root, with property 'initializer=${initializer class name}'. you
* can have one such properties per jar file, but the initializer that property
* denotes can delegate to other initializers of that library.
* </p>
* <p>
* if an initializer also implement {@link idestroyer}, the instance will be
* kept for destroying, so that it may clean up whatever it did when
* initializing.
* </p>
*
* @author jonathan locke
*/
public interface iinitializer
/**
* @param application
*            the application loading the component
*/
void init application application