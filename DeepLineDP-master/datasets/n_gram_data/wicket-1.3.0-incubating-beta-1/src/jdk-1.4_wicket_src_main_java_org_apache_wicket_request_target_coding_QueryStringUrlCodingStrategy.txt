/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket request target coding
import java util iterator
import java util map
import java util treemap
import java util map entry
import org apache wicket pagemap
import org apache wicket protocol http unittestsettings
import org apache wicket util string appendingstringbuffer
import org apache wicket util string strings
import org apache wicket util value valuemap
/**
* encodes and decodes mounts for a single bookmarkable page class, but with the
* parameters appended in a url query string rather than integrated into a url
* hierarchical path.
* <p>
* for example, whereas
* {@link org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy bookmarkablepagerequesttargeturlcodingstrategy}
* might encode a request target as
* "mywebapp/myservlet/admin/productmanagement/action/edit/product/4995",
* <code>querystringrequesttargeturlcodingstrategy</code> would encode the
* same target as
* "mywebapp/myservlet/admin/productmanagement?action=edit&amp;product=4995".
* <p>
* urls encoded in this way can be bookmarked just as easily as those produced
* by <code>bookmarkablepagerequesttargeturlcodingstrategy</code>. for
* example, google searches produce bookmarkable links with query strings.
* <p>
* whether <code>bookmarkablepagerequesttargeturlcodingstrategy</code> or
* <code>querystringrequesttargeturlcodingstrategy</code> is appropriate for a
* given mount depends on:
* <ul>
* <li>aesthetic criteria
* <li>interpretations of <a
* href="http://www.gbiv.com/protocols/uri/rfc/rfc3986.html">rfc 3986</a>. this
* defines the uri standard, including query strings, and states that whereas
* the "path component contains data, usually organized in hierarchical form
* [divided by slashes]", the "query component [after the question mark]
* contains non-hierarchical data".
* <li>findability. public search engines prefer urls with parameters stored
* hierarchically or in a shorter query string. google's <a
* href="http://www.google.com/support/webmasters/bin/answer.py?answer=35770">design
* and content guidelines</a> (as of may 6 2006) state: "make a site with a
* clear hierarchy and text links. every page should be reachable from at least
* one static text link. &#8230; if you decide to use dynamic pages (i.e., the
* url contains a '?' character), be aware that not every search engine spider
* crawls dynamic pages as well as static pages. it helps to keep the parameters
* short and the number of them few."
* <li>the complexity of the parameters being passed. more complex parameters
* may make more sense expressed as a series of "key=value(s)" pairs in a query
* string than shoehorned into a hierarchical structure.
* </ul>
* <p>
* regardless of which coding strategy is chosen for the mount,
* {@link org.apache.wicket.markup.html.link.bookmarkablepagelink bookmarkablepagelink} can
* be used to insert a bookmarkable link to the request target.
* <p>
* this example demonstrates how to mount a path with
* <code>querystringrequesttargeturlcodingstrategy</code> within the
* <code>init</code> method of a class implementing
* {@link org.apache.wicket.protocol.http.webapplication webapplication}:
* <p>
* <code>mount("/admin/productmanagement", new
* querystringrequesttargeturlcodingstrategy("/admin/productmanagement",
* admin.productmanagement.class));</code>
* <p>
* note that, as with the main bookmarkablepagerequesttargeturlcodingstrategy,
* if the output of this coding strategy is passed through
* {@link javax.servlet.http.httpservletresponse#encodeurl(java.lang.string) httpservletresponse.encodeurl}
* and the client has cookies turned off, the client's session id will be stored
* in a path parameter, like so:
* "/mywebapp/myservlet/admin/productmanagement;jsessionid=730ec527564af1c73f8c2fb19b604f55?action=edit&amp;product=4995".
*
* @author benjamin hawkes-lewis
*/
public class querystringurlcodingstrategy extends bookmarkablepagerequesttargeturlcodingstrategy
/**
* sole constructor.
*
* @param mountpath
*            the relative reference url on which the page is mounted
* @param bookmarkablepageclass
*            the class of the mounted page
*/
public querystringurlcodingstrategy final string mountpath  final class bookmarkablepageclass
super mountpath  bookmarkablepageclass  pagemap default_name
/**
* gets the encoded url for the request target. typically, the result will
* be prepended with a protocol specific prefix. in a servlet environment,
* the prefix concatenates the context path and the servlet path, for
* example "mywebapp/myservlet".
*
* @param url
*            the relative reference url
* @param parameters
*            parameter names mapped to parameter values
*/
protected void appendparameters appendingstringbuffer url  map parameters
if  parameters    null    parameters size   > 0
boolean firstparam   url indexof    < 0
final iterator entries
if  unittestsettings getsorturlparameters
entries   new treemap parameters  entryset   iterator
else
entries   parameters entryset   iterator
while  entries hasnext
map entry entry    entry entries next
if  entry getvalue      null
string escapedvalue   urlencode entry getvalue   tostring
if   strings isempty escapedvalue
if  firstparam
url append        begin query string
firstparam   false
else
/*
* separate new key=value(s) pair from previous pair
* with an ampersand.
*/
url append
/* append key=value(s) pair. */
url append entry getkey
url append
url append escapedvalue
/**
* decodes parameters object from the provided query string
*
* @param fragment
*            contains the query string
* @param passedparameters
*            paremeters decoded by wicket before this method - usually off
*            the query string
*
* @return parameters
*/
protected valuemap decodeparameters string fragment  map passedparameters
valuemap parameters   new valuemap
if  passedparameters    null
parameters putall passedparameters
return parameters