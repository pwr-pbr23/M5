/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util lang
import org apache wicket util string istringiterator
import org apache wicket util string stringlist
/**
* utilities for dealing with packages.
*
* @author jonathan locke
* @author niclas hedhman
*/
public final class packages
/**
* takes a package and a relative path to a resource and returns an absolute
* path to the resource. for example, if the given package was java.lang and
* the relative path was "../util/list", then "java/util/list" would be
* returned.
*
* @param p
*            the package to start at
* @param relativepath
*            the relative path to the class
* @return the absolute path
*/
public static string absolutepath final class p  final string relativepath
string packname   extractpackagename p
return absolutepath packname  relativepath
/**
* takes a package and a relative path to a resource and returns an absolute
* path to the resource. for example, if the given package was java.lang and
* the relative path was "../util/list", then "java/util/list" would be
* returned.
*
* @param p
*            the package to start at
* @param relativepath
*            the relative path to the class
* @return the absolute path
*/
public static string absolutepath final package p  final string relativepath
return absolutepath p getname    relativepath
/**
* takes a package and a relative path to a resource and returns an absolute
* path to the resource. for example, if the given package was java.lang and
* the relative path was "../util/list", then "java/util/list" would be
* returned.
*
* @param packagename
*            the package to start at
* @param relativepath
*            the relative path to the class
* @return the absolute path
*/
public static string absolutepath final string packagename  final string relativepath
// is path already absolute?
if  relativepath startswith
return relativepath
else
// break package into list of package names
final stringlist absolutepath   stringlist tokenize packagename
// break path into folders
final stringlist folders   stringlist tokenize relativepath
// iterate through folders
for  final istringiterator iterator   folders iterator    iterator hasnext
// get next folder
final string folder   iterator next
// up one?
if    equals folder
// pop off stack
if  absolutepath size   > 0
absolutepath removelast
else
throw new illegalargumentexception     relativepath
else
// add to stack
absolutepath add folder
// return absolute path
return absolutepath join
/**
* determines the package name for the given class.
*
* @param forclass
*            the class
* @return the package name
*/
public static string extractpackagename final class forclass
string classname   forclass getname
string parent   parent classname
return parent
/**
* gets the parent package name.
*
* @param packagename
*            the package name
* @return the parent package
*/
public static string parent final string packagename
int pos   packagename lastindexof
string parent
if  pos < 0
pos   packagename lastindexof
if  pos < 0
pos   0
parent   packagename substring 0  pos
return parent
/**
* resolve scope for the given class by extracting it's package name and
* converting all dots to slashes.
*
* @param forclass
*            the class
* @return the scope string
*/
public static string resolvescope final class forclass
string packname   extractpackagename forclass
return packname replace
/**
* instantiation not allowed.
*/
private packages