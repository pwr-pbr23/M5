/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util string
import java io serializable
import java util arraylist
import java util list
/**
* an abstract base class for string list implementations. besides having an
* implementation for istringsequence (iterator(), get(int index) and size()),
* an abstractstringlist can be converted to a string array or a list of
* strings.
* <p>
* the total length of all strings in the list can be determined by calling
* totallength().
* <p>
* strings or a subset of strings in the list can be formatted using three
* join() methods:
* <p>
* <ul>
* <li>join(string) joins strings together using a given separator
* <li>join() joins strings using comma as a separator
* <li>join(int first, int last, string) joins a sublist of strings using a
* given separator
* </ul>
*
* @author jonathan locke
*/
public abstract class abstractstringlist implements istringsequence  serializable
/**
* @return string iterator
* @see org.apache.wicket.util.string.istringsequence#iterator()
*/
public abstract istringiterator iterator
/**
* @return number of strings in this string list
* @see org.apache.wicket.util.string.istringsequence#size()
*/
public abstract int size
/**
* @param index
*            the index into this string list
* @return the string at the given index
* @see org.apache.wicket.util.string.istringsequence#get(int)
*/
public abstract string get int index
/**
* returns this string sequence as an array of strings. subclasses may
* provide a more efficient implementation than the one provided here.
*
* @return an array containing exactly this sequence of strings
*/
public string toarray
// get number of strings
final int size   size
// allocate array
final string strings   new string
// copy string references
for  int i   0  i < size  i
strings   get i
return strings
/**
* returns this string sequence as an array of strings. subclasses may
* provide a more efficient implementation than the one provided here.
*
* @return an array containing exactly this sequence of strings
*/
public final list tolist
// get number of strings
final int size   size
// allocate list of exactly the right size
final list strings   new arraylist size
// add strings to list
for  int i   0  i < size  i
strings add get i
return strings
/**
* @return the total length of all strings in this sequence.
*/
public int totallength
// get number of strings
final int size   size
// add strings to list
int totallength   0
for  int i   0  i < size  i
totallength    get i  length
return totallength
/**
* joins this sequence of strings using a comma separator. for example, if
* this sequence contains [1 2 3], the result of calling this method will be
* "1, 2, 3".
*
* @return the joined string
*/
public final string join
return join
/**
* joins this sequence of strings using a separator
*
* @param separator
*            the separator to use
* @return the joined string
*/
public final string join final string separator
return join 0  size    separator
/**
* joins this sequence of strings from first index to last using a separator
*
* @param first
*            the first index to use, inclusive
* @param last
*            the last index to use, exclusive
* @param separator
*            the separator to use
* @return the joined string
*/
public final string join final int first  final int last  final string separator
// allocate buffer of exactly the right length
final int length   totallength      separator length      math max 0  last   first   1
final appendingstringbuffer buf   new appendingstringbuffer length
// loop through indexes requested
for  int i   first  i < last  i
// add next string
buf append get i
// add separator?
if  i     last   1
buf append separator
return buf tostring
/**
* converts this object to a string representation
*
* @return string version of this object
*/
public string tostring
return     join