/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket util string
import java io ioexception
/**
* this is a copy or combination of <code>java.lang.stringbuffer</code> and
* <code>java.lang.string</code> it has a special method getvalue() which
* returns the internal char array.
*
* hashcode and equals methods are also implemented.
*
* this appendingstringbuffer is not synchronized.
*
* @author johan compagner
* @see java.lang.stringbuffer
*/
public final class appendingstringbuffer implements java io serializable  charsequence
/** use serialversionuid from jdk 1.0.2 for interoperability */
static final long serialversionuid   1l
private static final appendingstringbuffer null   new appendingstringbuffer
private static final stringbuffer sb_null   new stringbuffer
/**
* the value is used for character storage.
*
* @serial
*/
private char value
/**
* the count is the number of characters in the buffer.
*
* @serial
*/
private int count
/**
* constructs a string buffer with no characters in it and an initial
* capacity of 16 characters.
*/
public appendingstringbuffer
this 16
/**
* constructs a string buffer with no characters in it and an initial
* capacity specified by the <code>length</code> argument.
*
* @param length
*            the initial capacity.
* @exception negativearraysizeexception
*                if the <code>length</code> argument is less than
*                <code>0</code>.
*/
public appendingstringbuffer int length
value   new char
/**
* constructs a string buffer so that it represents the same sequence of
* characters as the string argument; in other words, the initial contents
* of the string buffer is a copy of the argument string. the initial
* capacity of the string buffer is <code>16</code> plus the length of the
* string argument.
*
* @param str
*            the initial contents of the buffer.
* @exception nullpointerexception
*                if <code>str</code> is <code>null</code>
*/
public appendingstringbuffer charsequence str
this str length     16
append str
/**
* returns the length (character count) of this string buffer.
*
* @return the length of the sequence of characters currently represented by
*         this string buffer.
*/
public int length
return count
/**
* returns the current capacity of the string buffer. the capacity is the
* amount of storage available for newly inserted characters; beyond which
* an allocation will occur.
*
* @return the current capacity of this string buffer.
*/
public int capacity
return value length
/**
* ensures that the capacity of the buffer is at least equal to the
* specified minimum. if the current capacity of this string buffer is less
* than the argument, then a new internal buffer is allocated with greater
* capacity. the new capacity is the larger of:
* <ul>
* <li>the <code>minimumcapacity</code> argument.
* <li>twice the old capacity, plus <code>2</code>.
* </ul>
* if the <code>minimumcapacity</code> argument is nonpositive, this
* method takes no action and simply returns.
*
* @param minimumcapacity
*            the minimum desired capacity.
*/
public void ensurecapacity int minimumcapacity
if  minimumcapacity > value length
expandcapacity minimumcapacity
/**
* this implements the expansion semantics of ensurecapacity but is
* unsynchronized for use internally by methods which are already
* synchronized.
*
* @param minimumcapacity
*
* @see java.lang.stringbuffer#ensurecapacity(int)
*/
private void expandcapacity int minimumcapacity
int newcapacity    value length   1    2
if  newcapacity < 0
newcapacity   integer max_value
else if  minimumcapacity > newcapacity
newcapacity   minimumcapacity
char newvalue   new char
system arraycopy value  0  newvalue  0  count
value   newvalue
/**
* sets the length of this string buffer. this string buffer is altered to
* represent a new character sequence whose length is specified by the
* argument. for every nonnegative index <i>k</i> less than
* <code>newlength</code>, the character at index <i>k</i> in the new
* character sequence is the same as the character at index <i>k</i> in the
* old sequence if <i>k</i> is less than the length of the old character
* sequence; otherwise, it is the null character <code>'&#92;u0000'</code>.
*
* in other words, if the <code>newlength</code> argument is less than the
* current length of the string buffer, the string buffer is truncated to
* contain exactly the number of characters given by the
* <code>newlength</code> argument.
* <p>
* if the <code>newlength</code> argument is greater than or equal to the
* current length, sufficient null characters (<code>'&#92;u0000'</code>)
* are appended to the string buffer so that length becomes the
* <code>newlength</code> argument.
* <p>
* the <code>newlength</code> argument must be greater than or equal to
* <code>0</code>.
*
* @param newlength
*            the new length of the buffer.
* @exception indexoutofboundsexception
*                if the <code>newlength</code> argument is negative.
* @see java.lang.stringbuffer#length()
*/
public void setlength int newlength
if  newlength < 0
throw new stringindexoutofboundsexception newlength
if  newlength > value length
expandcapacity newlength
if  count < newlength
for    count < newlength  count
value
else
count   newlength
/**
* the specified character of the sequence currently represented by the
* string buffer, as indicated by the <code>index</code> argument, is
* returned. the first character of a string buffer is at index
* <code>0</code>, the next at index <code>1</code>, and so on, for
* array indexing.
* <p>
* the index argument must be greater than or equal to <code>0</code>,
* and less than the length of this string buffer.
*
* @param index
*            the index of the desired character.
* @return the character at the specified index of this string buffer.
* @exception indexoutofboundsexception
*                if <code>index</code> is negative or greater than or
*                equal to <code>length()</code>.
* @see java.lang.stringbuffer#length()
*/
public char charat int index
if   index < 0      index >  count
throw new stringindexoutofboundsexception index
return value
/**
* characters are copied from this string buffer into the destination
* character array <code>dst</code>. the first character to be copied is
* at index <code>srcbegin</code>; the last character to be copied is at
* index <code>srcend-1</code>. the total number of characters to be
* copied is <code>srcend-srcbegin</code>. the characters are copied into
* the subarray of <code>dst</code> starting at index
* <code>dstbegin</code> and ending at index:
* <p>
* <blockquote>
*
* <pre>
* dstbegin + (srcend - srcbegin) - 1
* </pre>
*
* </blockquote>
*
* @param srcbegin
*            start copying at this offset in the string buffer.
* @param srcend
*            stop copying at this offset in the string buffer.
* @param dst
*            the array to copy the data into.
* @param dstbegin
*            offset into <code>dst</code>.
* @exception nullpointerexception
*                if <code>dst</code> is <code>null</code>.
* @exception indexoutofboundsexception
*                if any of the following is true:
*                <ul>
*                <li><code>srcbegin</code> is negative
*                <li><code>dstbegin</code> is negative
*                <li>the <code>srcbegin</code> argument is greater than
*                the <code>srcend</code> argument.
*                <li><code>srcend</code> is greater than
*                <code>this.length()</code>, the current length of this
*                string buffer.
*                <li><code>dstbegin+srcend-srcbegin</code> is greater
*                than <code>dst.length</code>
*                </ul>
*/
public void getchars int srcbegin  int srcend  char dst  int dstbegin
if  srcbegin < 0
throw new stringindexoutofboundsexception srcbegin
if   srcend < 0      srcend > count
throw new stringindexoutofboundsexception srcend
if  srcbegin > srcend
throw new stringindexoutofboundsexception
system arraycopy value  srcbegin  dst  dstbegin  srcend   srcbegin
/**
* the character at the specified index of this string buffer is set to
* <code>ch</code>. the string buffer is altered to represent a new
* character sequence that is identical to the old character sequence,
* except that it contains the character <code>ch</code> at position
* <code>index</code>.
* <p>
* the index argument must be greater than or equal to <code>0</code>,
* and less than the length of this string buffer.
*
* @param index
*            the index of the character to modify.
* @param ch
*            the new character.
* @exception indexoutofboundsexception
*                if <code>index</code> is negative or greater than or
*                equal to <code>length()</code>.
* @see java.lang.stringbuffer#length()
*/
public void setcharat int index  char ch
if   index < 0      index >  count
throw new stringindexoutofboundsexception index
value   ch
/**
* appends the string representation of the <code>object</code> argument
* to this string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param obj
*            an <code>object</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @see java.lang.string#valueof(java.lang.object)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append object obj
if  obj instanceof appendingstringbuffer
return append  appendingstringbuffer obj
else if  obj instanceof stringbuffer
return append  stringbuffer obj
return append string valueof obj
/**
* appends the string to this string buffer.
* <p>
* the characters of the <code>string</code> argument are appended, in
* order, to the contents of this string buffer, increasing the length of
* this string buffer by the length of the argument. if <code>str</code>
* is <code>null</code>, then the four characters <code>"null"</code>
* are appended to this string buffer.
* <p>
* let <i>n</i> be the length of the old character sequence, the one
* contained in the string buffer just prior to execution of the
* <code>append</code> method. then the character at index <i>k</i> in
* the new character sequence is equal to the character at index <i>k</i>
* in the old character sequence, if <i>k</i> is less than <i>n</i>;
* otherwise, it is equal to the character at index <i>k-n</i> in the
* argument <code>str</code>.
*
* @param str
*            a string.
* @return a reference to this <code>appendingstringbuffer</code>.
*/
public appendingstringbuffer append string str
if  str    null
str   string valueof str
int len   str length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
str getchars 0  len  value  count
count   newcount
return this
/**
* appends the specified <tt>appendingstringbuffer</tt> to this
* <tt>appendingstringbuffer</tt>.
* <p>
* the characters of the <tt>appendingstringbuffer</tt> argument are
* appended, in order, to the contents of this
* <tt>appendingstringbuffer</tt>, increasing the length of this
* <tt>appendingstringbuffer</tt> by the length of the argument. if
* <tt>sb</tt> is <tt>null</tt>, then the four characters
* <tt>"null"</tt> are appended to this <tt>appendingstringbuffer</tt>.
* <p>
* let <i>n</i> be the length of the old character sequence, the one
* contained in the <tt>appendingstringbuffer</tt> just prior to execution
* of the <tt>append</tt> method. then the character at index <i>k</i> in
* the new character sequence is equal to the character at index <i>k</i>
* in the old character sequence, if <i>k</i> is less than <i>n</i>;
* otherwise, it is equal to the character at index <i>k-n</i> in the
* argument <code>sb</code>.
* <p>
* the method <tt>ensurecapacity</tt> is first called on this
* <tt>appendingstringbuffer</tt> with the new buffer length as its
* argument. (this ensures that the storage of this
* <tt>appendingstringbuffer</tt> is adequate to contain the additional
* characters being appended.)
*
* @param sb
*            the <tt>appendingstringbuffer</tt> to append.
* @return a reference to this <tt>appendingstringbuffer</tt>.
* @since 1.4
*/
public appendingstringbuffer append appendingstringbuffer sb
if  sb    null
sb   null
int len   sb length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
sb getchars 0  len  value  count
count   newcount
return this
/**
* appends the specified <tt>appendingstringbuffer</tt> to this
* <tt>appendingstringbuffer</tt>.
* <p>
* the characters of the <tt>appendingstringbuffer</tt> argument are
* appended, in order, to the contents of this
* <tt>appendingstringbuffer</tt>, increasing the length of this
* <tt>appendingstringbuffer</tt> by the length of the argument. if
* <tt>sb</tt> is <tt>null</tt>, then the four characters
* <tt>"null"</tt> are appended to this <tt>appendingstringbuffer</tt>.
* <p>
* let <i>n</i> be the length of the old character sequence, the one
* contained in the <tt>appendingstringbuffer</tt> just prior to execution
* of the <tt>append</tt> method. then the character at index <i>k</i> in
* the new character sequence is equal to the character at index <i>k</i>
* in the old character sequence, if <i>k</i> is less than <i>n</i>;
* otherwise, it is equal to the character at index <i>k-n</i> in the
* argument <code>sb</code>.
* <p>
* the method <tt>ensurecapacity</tt> is first called on this
* <tt>appendingstringbuffer</tt> with the new buffer length as its
* argument. (this ensures that the storage of this
* <tt>appendingstringbuffer</tt> is adequate to contain the additional
* characters being appended.)
*
* @param sb
*            the <tt>appendingstringbuffer</tt> to append.
* @return a reference to this <tt>appendingstringbuffer</tt>.
* @since 1.4
*/
public appendingstringbuffer append stringbuffer sb
if  sb    null
sb   sb_null
int len   sb length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
sb getchars 0  len  value  count
count   newcount
return this
/**
* appends the specified <tt>appendingstringbuffer</tt> to this
* <tt>appendingstringbuffer</tt>.
* <p>
* the characters of the <tt>appendingstringbuffer</tt> argument are
* appended, in order, to the contents of this
* <tt>appendingstringbuffer</tt>, increasing the length of this
* <tt>appendingstringbuffer</tt> by the length of the argument. if
* <tt>sb</tt> is <tt>null</tt>, then the four characters
* <tt>"null"</tt> are appended to this <tt>appendingstringbuffer</tt>.
* <p>
* let <i>n</i> be the length of the old character sequence, the one
* contained in the <tt>appendingstringbuffer</tt> just prior to execution
* of the <tt>append</tt> method. then the character at index <i>k</i> in
* the new character sequence is equal to the character at index <i>k</i>
* in the old character sequence, if <i>k</i> is less than <i>n</i>;
* otherwise, it is equal to the character at index <i>k-n</i> in the
* argument <code>sb</code>.
* <p>
* the method <tt>ensurecapacity</tt> is first called on this
* <tt>appendingstringbuffer</tt> with the new buffer length as its
* argument. (this ensures that the storage of this
* <tt>appendingstringbuffer</tt> is adequate to contain the additional
* characters being appended.)
*
* @param sb
*            the <tt>appendingstringbuffer</tt> to append.
* @param from
*            the index where it must start from
* @param length
*            the length that must be copied
* @return a reference to this <tt>appendingstringbuffer</tt>.
*/
public appendingstringbuffer append stringbuffer sb  int from  int length
if  sb    null
sb   sb_null
int newcount   count   length
if  newcount > value length
expandcapacity newcount
sb getchars from  length  value  count
count   newcount
return this
/**
* appends the string representation of the <code>char</code> array
* argument to this string buffer.
* <p>
* the characters of the array argument are appended, in order, to the
* contents of this string buffer. the length of this string buffer
* increases by the length of the argument.
* <p>
* the overall effect is exactly as if the argument were converted to a
* string by the method {@link string#valueof(char[])} and the characters of
* that string were then {@link #append(string) appended} to this
* <code>appendingstringbuffer</code> object.
*
* @param str
*            the characters to be appended.
* @return a reference to this <code>appendingstringbuffer</code> object.
*/
public appendingstringbuffer append char str
int len   str length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy str  0  value  count  len
count   newcount
return this
/**
* appends the string representation of a subarray of the <code>char</code>
* array argument to this string buffer.
* <p>
* characters of the character array <code>str</code>, starting at index
* <code>offset</code>, are appended, in order, to the contents of this
* string buffer. the length of this string buffer increases by the value of
* <code>len</code>.
* <p>
* the overall effect is exactly as if the arguments were converted to a
* string by the method {@link string#valueof(char[],int,int)} and the
* characters of that string were then {@link #append(string) appended} to
* this <code>appendingstringbuffer</code> object.
*
* @param str
*            the characters to be appended.
* @param offset
*            the index of the first character to append.
* @param len
*            the number of characters to append.
* @return a reference to this <code>appendingstringbuffer</code> object.
*/
public appendingstringbuffer append char str  int offset  int len
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy str  offset  value  count  len
count   newcount
return this
/**
* appends the string representation of the <code>boolean</code> argument
* to the string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param b
*            a <code>boolean</code>.
* @return a reference to this <code>appendingstringbuffer</code>.
* @see java.lang.string#valueof(boolean)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append boolean b
if  b
int newcount   count   4
if  newcount > value length
expandcapacity newcount
value
value
value
value
else
int newcount   count   5
if  newcount > value length
expandcapacity newcount
value
value
value
value
value
return this
/**
* appends the string representation of the <code>char</code> argument to
* this string buffer.
* <p>
* the argument is appended to the contents of this string buffer. the
* length of this string buffer increases by <code>1</code>.
* <p>
* the overall effect is exactly as if the argument were converted to a
* string by the method {@link string#valueof(char)} and the character in
* that string were then {@link #append(string) appended} to this
* <code>appendingstringbuffer</code> object.
*
* @param c
*            a <code>char</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
*/
public appendingstringbuffer append char c
int newcount   count   1
if  newcount > value length
expandcapacity newcount
value   c
return this
/**
* appends the string representation of the <code>int</code> argument to
* this string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param i
*            an <code>int</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @see java.lang.string#valueof(int)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append int i
return append string valueof i
/**
* appends the string representation of the <code>long</code> argument to
* this string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param l
*            a <code>long</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @see java.lang.string#valueof(long)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append long l
return append string valueof l
/**
* appends the string representation of the <code>float</code> argument to
* this string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param f
*            a <code>float</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @see java.lang.string#valueof(float)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append float f
return append string valueof f
/**
* appends the string representation of the <code>double</code> argument
* to this string buffer.
* <p>
* the argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then appended to this string buffer.
*
* @param d
*            a <code>double</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @see java.lang.string#valueof(double)
* @see java.lang.stringbuffer#append(java.lang.string)
*/
public appendingstringbuffer append double d
return append string valueof d
/**
* removes the characters in a substring of this
* <code>appendingstringbuffer</code>. the substring begins at the
* specified <code>start</code> and extends to the character at index
* <code>end - 1</code> or to the end of the
* <code>appendingstringbuffer</code> if no such character exists. if
* <code>start</code> is equal to <code>end</code>, no changes are
* made.
*
* @param start
*            the beginning index, inclusive.
* @param end
*            the ending index, exclusive.
* @return this string buffer.
* @exception stringindexoutofboundsexception
*                if <code>start</code> is negative, greater than
*                <code>length()</code>, or greater than <code>end</code>.
* @since 1.2
*/
public appendingstringbuffer delete int start  int end
if  start < 0
throw new stringindexoutofboundsexception start
if  end > count
end   count
if  start > end
throw new stringindexoutofboundsexception
int len   end   start
if  len > 0
system arraycopy value  start   len  value  start  count   end
count    len
return this
/**
* removes the character at the specified position in this
* <code>appendingstringbuffer</code> (shortening the
* <code>appendingstringbuffer</code> by one character).
*
* @param index
*            index of character to remove
* @return this string buffer.
* @exception stringindexoutofboundsexception
*                if the <code>index</code> is negative or greater than or
*                equal to <code>length()</code>.
* @since 1.2
*/
public appendingstringbuffer deletecharat int index
if   index < 0      index >  count
throw new stringindexoutofboundsexception
system arraycopy value  index   1  value  index  count   index   1
count
return this
/**
* replaces the characters in a substring of this
* <code>appendingstringbuffer</code> with characters in the specified
* <code>string</code>. the substring begins at the specified
* <code>start</code> and extends to the character at index
* <code>end - 1</code> or to the end of the
* <code>appendingstringbuffer</code> if no such character exists. first
* the characters in the substring are removed and then the specified
* <code>string</code> is inserted at <code>start</code>. (the
* <code>appendingstringbuffer</code> will be lengthened to accommodate
* the specified string if necessary.)
*
* @param start
*            the beginning index, inclusive.
* @param end
*            the ending index, exclusive.
* @param str
*            string that will replace previous contents.
* @return this string buffer.
* @exception stringindexoutofboundsexception
*                if <code>start</code> is negative, greater than
*                <code>length()</code>, or greater than <code>end</code>.
* @since 1.2
*/
public appendingstringbuffer replace int start  int end  string str
if  start < 0
throw new stringindexoutofboundsexception start
if  end > count
end   count
if  start > end
throw new stringindexoutofboundsexception
int len   str length
int newcount   count   len    end   start
if  newcount > value length
expandcapacity newcount
system arraycopy value  end  value  start   len  count   end
str getchars 0  len  value  start
count   newcount
return this
/**
* returns a new <code>string</code> that contains a subsequence of
* characters currently contained in this <code>appendingstringbuffer</code>.the
* substring begins at the specified index and extends to the end of the
* <code>appendingstringbuffer</code>.
*
* @param start
*            the beginning index, inclusive.
* @return the new string.
* @exception stringindexoutofboundsexception
*                if <code>start</code> is less than zero, or greater than
*                the length of this <code>appendingstringbuffer</code>.
* @since 1.2
*/
public string substring int start
return substring start  count
/**
* returns a new character sequence that is a subsequence of this sequence.
*
* <p>
* an invocation of this method of the form
*
* <blockquote>
*
* <pre>
* sb.subsequence(begin, end)
* </pre>
*
* </blockquote>
*
* behaves in exactly the same way as the invocation
*
* <blockquote>
*
* <pre>
* sb.substring(begin, end)
* </pre>
*
* </blockquote>
*
* this method is provided so that the <tt>appendingstringbuffer</tt>
* class can implement the {@link charsequence} interface.
* </p>
*
* @param start
*            the start index, inclusive.
* @param end
*            the end index, exclusive.
* @return the specified subsequence.
*
* @throws indexoutofboundsexception
*             if <tt>start</tt> or <tt>end</tt> are negative, if
*             <tt>end</tt> is greater than <tt>length()</tt>, or if
*             <tt>start</tt> is greater than <tt>end</tt>
*
* @since 1.4
* @spec jsr-51
*/
public charsequence subsequence int start  int end
return this substring start  end
/**
* returns a new <code>string</code> that contains a subsequence of
* characters currently contained in this <code>appendingstringbuffer</code>.
* the substring begins at the specified <code>start</code> and extends to
* the character at index <code>end - 1</code>. an exception is thrown if
*
* @param start
*            the beginning index, inclusive.
* @param end
*            the ending index, exclusive.
* @return the new string.
* @exception stringindexoutofboundsexception
*                if <code>start</code> or <code>end</code> are negative
*                or greater than <code>length()</code>, or
*                <code>start</code> is greater than <code>end</code>.
* @since 1.2
*/
public string substring int start  int end
if  start < 0
throw new stringindexoutofboundsexception start
if  end > count
throw new stringindexoutofboundsexception end
if  start > end
throw new stringindexoutofboundsexception end   start
return new string value  start  end   start
/**
* inserts the string representation of a subarray of the <code>str</code>
* array argument into this string buffer. the subarray begins at the
* specified <code>offset</code> and extends <code>len</code>
* characters. the characters of the subarray are inserted into this string
* buffer at the position indicated by <code>index</code>. the length of
* this <code>appendingstringbuffer</code> increases by <code>len</code>
* characters.
*
* @param index
*            position at which to insert subarray.
* @param str
*            a character array.
* @param offset
*            the index of the first character in subarray to to be
*            inserted.
* @param len
*            the number of characters in the subarray to to be inserted.
* @return this string buffer.
* @exception stringindexoutofboundsexception
*                if <code>index</code> is negative or greater than
*                <code>length()</code>, or <code>offset</code> or
*                <code>len</code> are negative, or
*                <code>(offset+len)</code> is greater than
*                <code>str.length</code>.
* @since 1.2
*/
public appendingstringbuffer insert int index  char str  int offset  int len
if   index < 0      index > count
throw new stringindexoutofboundsexception
if   offset < 0      offset   len < 0      offset   len > str length
throw new stringindexoutofboundsexception offset
if  len < 0
throw new stringindexoutofboundsexception len
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy value  index  value  index   len  count   index
system arraycopy str  offset  value  index  len
count   newcount
return this
/**
* inserts the string representation of the <code>object</code> argument
* into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the indicated offset.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param obj
*            an <code>object</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(java.lang.object)
* @see appendingstringbuffer#insert(int, java.lang.string)
* @see appendingstringbuffer#length()
*/
public appendingstringbuffer insert int offset  object obj
if  obj instanceof appendingstringbuffer
appendingstringbuffer asb    appendingstringbuffer obj
return insert offset  asb value  0  asb count
else if  obj instanceof stringbuffer
return insert offset   stringbuffer obj
return insert offset  string valueof obj
/**
* inserts the string into this string buffer.
* <p>
* the characters of the <code>string</code> argument are inserted, in
* order, into this string buffer at the indicated offset, moving up any
* characters originally above that position and increasing the length of
* this string buffer by the length of the argument. if <code>str</code>
* is <code>null</code>, then the four characters <code>"null"</code>
* are inserted into this string buffer.
* <p>
* the character at index <i>k</i> in the new character sequence is equal
* to:
* <ul>
* <li>the character at index <i>k</i> in the old character sequence, if
* <i>k</i> is less than <code>offset</code>
* <li>the character at index <i>k</i><code>-offset</code> in the
* argument <code>str</code>, if <i>k</i> is not less than
* <code>offset</code> but is less than <code>offset+str.length()</code>
* <li>the character at index <i>k</i><code>-str.length()</code> in the
* old character sequence, if <i>k</i> is not less than
* <code>offset+str.length()</code>
* </ul>
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param str
*            a string.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  string str
if   offset < 0      offset > count
throw new stringindexoutofboundsexception
if  str    null
str   string valueof str
int len   str length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy value  offset  value  offset   len  count   offset
str getchars 0  len  value  offset
count   newcount
return this
/**
* inserts the string into this string buffer.
* <p>
* the characters of the <code>string</code> argument are inserted, in
* order, into this string buffer at the indicated offset, moving up any
* characters originally above that position and increasing the length of
* this string buffer by the length of the argument. if <code>str</code>
* is <code>null</code>, then the four characters <code>"null"</code>
* are inserted into this string buffer.
* <p>
* the character at index <i>k</i> in the new character sequence is equal
* to:
* <ul>
* <li>the character at index <i>k</i> in the old character sequence, if
* <i>k</i> is less than <code>offset</code>
* <li>the character at index <i>k</i><code>-offset</code> in the
* argument <code>str</code>, if <i>k</i> is not less than
* <code>offset</code> but is less than <code>offset+str.length()</code>
* <li>the character at index <i>k</i><code>-str.length()</code> in the
* old character sequence, if <i>k</i> is not less than
* <code>offset+str.length()</code>
* </ul>
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param str
*            a string.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  stringbuffer str
if   offset < 0      offset > count
throw new stringindexoutofboundsexception
if  str    null
str   sb_null
int len   str length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy value  offset  value  offset   len  count   offset
str getchars 0  len  value  offset
count   newcount
return this
/**
* inserts the string representation of the <code>char</code> array
* argument into this string buffer.
* <p>
* the characters of the array argument are inserted into the contents of
* this string buffer at the position indicated by <code>offset</code>.
* the length of this string buffer increases by the length of the argument.
* <p>
* the overall effect is exactly as if the argument were converted to a
* string by the method {@link string#valueof(char[])} and the characters of
* that string were then {@link #insert(int,string) inserted} into this
* <code>appendingstringbuffer</code> object at the position indicated by
* <code>offset</code>.
*
* @param offset
*            the offset.
* @param str
*            a character array.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
*/
public appendingstringbuffer insert int offset  char str
if   offset < 0      offset > count
throw new stringindexoutofboundsexception
int len   str length
int newcount   count   len
if  newcount > value length
expandcapacity newcount
system arraycopy value  offset  value  offset   len  count   offset
system arraycopy str  0  value  offset  len
count   newcount
return this
/**
* inserts the string representation of the <code>boolean</code> argument
* into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the indicated offset.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param b
*            a <code>boolean</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(boolean)
* @see java.lang.stringbuffer#insert(int, java.lang.string)
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  boolean b
return insert offset  string valueof b
/**
* inserts the string representation of the <code>char</code> argument
* into this string buffer.
* <p>
* the second argument is inserted into the contents of this string buffer
* at the position indicated by <code>offset</code>. the length of this
* string buffer increases by one.
* <p>
* the overall effect is exactly as if the argument were converted to a
* string by the method {@link string#valueof(char)} and the character in
* that string were then {@link #insert(int, string) inserted} into this
* <code>appendingstringbuffer</code> object at the position indicated by
* <code>offset</code>.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param c
*            a <code>char</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception indexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  char c
int newcount   count   1
if  newcount > value length
expandcapacity newcount
system arraycopy value  offset  value  offset   1  count   offset
value   c
count   newcount
return this
/**
* inserts the string representation of the second <code>int</code>
* argument into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the indicated offset.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param i
*            an <code>int</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(int)
* @see java.lang.stringbuffer#insert(int, java.lang.string)
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  int i
return insert offset  string valueof i
/**
* inserts the string representation of the <code>long</code> argument
* into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the position indicated by
* <code>offset</code>.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param l
*            a <code>long</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(long)
* @see java.lang.stringbuffer#insert(int, java.lang.string)
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  long l
return insert offset  string valueof l
/**
* inserts the string representation of the <code>float</code> argument
* into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the indicated offset.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param f
*            a <code>float</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(float)
* @see java.lang.stringbuffer#insert(int, java.lang.string)
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  float f
return insert offset  string valueof f
/**
* inserts the string representation of the <code>double</code> argument
* into this string buffer.
* <p>
* the second argument is converted to a string as if by the method
* <code>string.valueof</code>, and the characters of that string are
* then inserted into this string buffer at the indicated offset.
* <p>
* the offset argument must be greater than or equal to <code>0</code>,
* and less than or equal to the length of this string buffer.
*
* @param offset
*            the offset.
* @param d
*            a <code>double</code>.
* @return a reference to this <code>appendingstringbuffer</code> object.
* @exception stringindexoutofboundsexception
*                if the offset is invalid.
* @see java.lang.string#valueof(double)
* @see java.lang.stringbuffer#insert(int, java.lang.string)
* @see java.lang.stringbuffer#length()
*/
public appendingstringbuffer insert int offset  double d
return insert offset  string valueof d
/**
* returns the index within this string of the first occurrence of the
* specified substring. the integer returned is the smallest value <i>k</i>
* such that: <blockquote>
*
* <pre>
*       this.tostring().startswith(str, &lt;i&gt;k&lt;/i&gt;)
* </pre>
*
* </blockquote> is <code>true</code>.
*
* @param str
*            any string.
* @return if the string argument occurs as a substring within this object,
*         then the index of the first character of the first such substring
*         is returned; if it does not occur as a substring, <code>-1</code>
*         is returned.
* @exception java.lang.nullpointerexception
*                if <code>str</code> is <code>null</code>.
* @since 1.4
*/
public int indexof string str
return indexof str  0
/**
* returns the index within this string of the first occurrence of the
* specified substring, starting at the specified index. the integer
* returned is the smallest value <tt>k</tt> for which: <blockquote>
*
* <pre>
* k &gt;= math.min(fromindex, str.length()) &amp;&amp; this.tostring().startswith(str, k)
* </pre>
*
* </blockquote> if no such value of <i>k</i> exists, then -1 is returned.
*
* @param str
*            the substring for which to search.
* @param fromindex
*            the index from which to start the search.
* @return the index within this string of the first occurrence of the
*         specified substring, starting at the specified index.
* @exception java.lang.nullpointerexception
*                if <code>str</code> is <code>null</code>.
* @since 1.4
*/
public int indexof string str  int fromindex
return indexof value  0  count  str tochararray    0  str length    fromindex
static int indexof char source  int sourceoffset  int sourcecount  char target
int targetoffset  int targetcount  int fromindex
if  fromindex >  sourcecount
return  targetcount    0 ? sourcecount    1
if  fromindex < 0
fromindex   0
if  targetcount    0
return fromindex
char first   target
int i   sourceoffset   fromindex
int max   sourceoffset    sourcecount   targetcount
startsearchforfirstchar   while  true
/* look for first character. */
while  i <  max    source    first
i
if  i > max
return  1
/* found first character, now look at the rest of v2 */
int j   i   1
int end   j   targetcount   1
int k   targetoffset   1
while  j < end
if  source    target
i
/* look for str's first char again. */
continue startsearchforfirstchar
return i   sourceoffset     found whole string
/**
* returns the index within this string of the rightmost occurrence of the
* specified substring. the rightmost empty string "" is considered to occur
* at the index value <code>this.length()</code>. the returned index is
* the largest value <i>k</i> such that <blockquote>
*
* <pre>
* this.tostring().startswith(str, k)
* </pre>
*
* </blockquote> is true.
*
* @param str
*            the substring to search for.
* @return if the string argument occurs one or more times as a substring
*         within this object, then the index of the first character of the
*         last such substring is returned. if it does not occur as a
*         substring, <code>-1</code> is returned.
* @exception java.lang.nullpointerexception
*                if <code>str</code> is <code>null</code>.
* @since 1.4
*/
public int lastindexof string str
return lastindexof str  count
/**
* returns the index within this string of the last occurrence of the
* specified substring. the integer returned is the largest value <i>k</i>
* such that: <blockquote>
*
* <pre>
* k &lt;= math.min(fromindex, str.length()) &amp;&amp; this.tostring().startswith(str, k)
* </pre>
*
* </blockquote> if no such value of <i>k</i> exists, then -1 is returned.
*
* @param str
*            the substring to search for.
* @param fromindex
*            the index to start the search from.
* @return the index within this string of the last occurrence of the
*         specified substring.
* @exception java.lang.nullpointerexception
*                if <code>str</code> is <code>null</code>.
* @since 1.4
*/
public int lastindexof string str  int fromindex
return lastindexof value  0  count  str tochararray    0  str length    fromindex
static int lastindexof char source  int sourceoffset  int sourcecount  char target
int targetoffset  int targetcount  int fromindex
/*
* check arguments; return immediately where possible. for consistency,
* don't check for null str.
*/
int rightindex   sourcecount   targetcount
if  fromindex < 0
return  1
if  fromindex > rightindex
fromindex   rightindex
/* empty string always matches. */
if  targetcount    0
return fromindex
int strlastindex   targetoffset   targetcount   1
char strlastchar   target
int min   sourceoffset   targetcount   1
int i   min   fromindex
startsearchforlastchar   while  true
while  i >  min    source    strlastchar
i
if  i < min
return  1
int j   i   1
int start   j    targetcount   1
int k   strlastindex   1
while  j > start
if  source    target
i
continue startsearchforlastchar
return start   sourceoffset   1
/**
* tests if this appendingstringbuffer starts with the specified prefix beginning a
* specified index.
*
* @param prefix
*            the prefix.
* @param toffset
*            where to begin looking in the string.
* @return <code>true</code> if the character sequence represented by the
*         argument is a prefix of the substring of this object starting at
*         index <code>toffset</code>; <code>false</code> otherwise.
*         the result is <code>false</code> if <code>toffset</code> is
*         negative or greater than the length of this <code>string</code>
*         object; otherwise the result is the same as the result of the
*         expression
*
* <pre>
* this.substring(toffset).startswith(prefix)
* </pre>
*/
public boolean startswith charsequence prefix  int toffset
char ta   value
int to   toffset
int po   0
int pc   prefix length
// note: toffset might be near -1>>>1.
if   toffset < 0      toffset > count   pc
return false
while    pc >  0
if  ta    prefix charat po
return false
return true
/**
* tests if this appendingstringbuffer starts with the specified prefix.
*
* @param prefix
*            the prefix.
* @return <code>true</code> if the character sequence represented by the
*         argument is a prefix of the character sequence represented by
*         this appendingstringbuffer; <code>false</code> otherwise. note also that
*         <code>true</code> will be returned if the argument is an empty
*         string or is equal to this <code>appendingstringbuffer</code> object as
*         determined by the {@link #equals(object)} method.
* @since 1. 0
*/
public boolean startswith charsequence prefix
return startswith prefix  0
/**
* tests if this appendingstringbuffer ends with the specified suffix.
*
* @param suffix
*            the suffix.
* @return <code>true</code> if the character sequence represented by the
*         argument is a suffix of the character sequence represented by
*         this appendingstringbuffer; <code>false</code> otherwise. note that the result
*         will be <code>true</code> if the argument is the empty string
*         or is equal to this <code>appendingstringbuffer</code> object as determined by
*         the {@link #equals(object)} method.
*/
public boolean endswith charsequence suffix
return startswith suffix  count   suffix length
/**
* converts to a string representing the data in this appendingstringbuffer. a new
* <code>string</code> object is allocated and initialized to contain the
* character sequence currently represented by this string buffer. this
* <code>string</code> is then returned. subsequent changes to the string
* buffer do not affect the contents of the <code>string</code>.
* <p>
* implementation advice: this method can be coded so as to create a new
* <code>string</code> object without allocating new memory to hold a copy
* of the character sequence. instead, the string can share the memory used
* by the string buffer. any subsequent operation that alters the content or
* capacity of the string buffer must then make a copy of the internal
* buffer at that time. this strategy is effective for reducing the amount
* of memory allocated by a string concatenation operation when it is
* implemented using a string buffer.
*
* @return a string representation of the string buffer.
*/
public string tostring
return new string this value  0  count
/**
* this method returns the internal char array. so it is not
*
* @return the internal char array
*/
public final char getvalue
return value
/**
* readobject is called to restore the state of the appendingstringbuffer
* from a stream.
*
* @param s
* @throws classnotfoundexception
* @throws ioexception
*/
private void readobject java io objectinputstream s  throws ioexception  classnotfoundexception
s defaultreadobject
value    char value clone
/**
* compares this appendingstringbuffer to the specified object. the result
* is <code>true</code> if and only if the argument is not
* <code>null</code> and is a <code>appendingstringbuffer</code> object
* or another charsequence object! that represents the same sequence of
* characters as this object.
*
* @param anobject
*            the object to compare this <code>appendingstringbuffer</code>
*            against.
* @return <code>true</code> if the <code>appendingstringbuffer</code>are
*         equal; <code>false</code> otherwise.
*/
public boolean equals object anobject
if  this    anobject
return true
if  anobject instanceof appendingstringbuffer
appendingstringbuffer anotherstring    appendingstringbuffer anobject
int n   count
if  n    anotherstring count
char v1   value
char v2   anotherstring value
int i   0
while  n      0
if  v1    v2
return false
return true
else if  anobject instanceof charsequence
charsequence sequence    charsequence anobject
int n   count
if sequence length      count
char v1   value
int i   0
while  n      0
if  v1    sequence charat i
return false
return true
return false
/**
* returns a hash code for this appendingstringbuffer. the hash code for a
* <code>appendingstringbuffer</code> object is computed as <blockquote>
*
* <pre>
*    s[0]*31&circ;(n-1) + s[1]*31&circ;(n-2) + ... + s[n-1]
* </pre>
*
* </blockquote> using <code>int</code> arithmetic, where
* <code>s[i]</code> is the <i>i</i>th character of the
* appendingstringbuffer, <code>n</code> is the length of the
* appendingstringbuffer, and <code>^</code> indicates exponentiation.
* (the hash value of the empty appendingstringbuffer is zero.)
*
* @return a hash code value for this object.
*/
public int hashcode
int h   0
if  h    0
int off   0
char val   value
int len   count
for  int i   0  i < len  i
h   31   h   val
return h
/**
* clears the buffer contents, but leaves the allocated size intact
*/
public void clear
count   0