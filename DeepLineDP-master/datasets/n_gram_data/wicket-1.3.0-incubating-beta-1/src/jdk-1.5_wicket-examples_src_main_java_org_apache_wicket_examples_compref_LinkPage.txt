/*
* licensed to the apache software foundation (asf) under one or more
* contributor license agreements.  see the notice file distributed with
* this work for additional information regarding copyright ownership.
* the asf licenses this file to you under the apache license, version 2.0
* (the "license"); you may not use this file except in compliance with
* the license.  you may obtain a copy of the license at
*
*      http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache wicket examples compref
import org apache wicket attributemodifier
import org apache wicket iclusterable
import org apache wicket examples wicketexamplepage
import org apache wicket markup html basic label
import org apache wicket markup html link link
import org apache wicket model model
/**
* page with examples on {@link org.apache.wicket.markup.html.link.link}.
*
* @author eelco hillenius
*/
public class linkpage extends wicketexamplepage
/**
* constructor
*/
public linkpage
// power to the annonymous classes!
// first create a simple value holder object
final clickcount count1   new clickcount
// add a link which, when clicked, increases our counter
// when a link is clicked, its onclick method is called
link link1   new link
public void onclick
count1 clicks
add link1
// add a counter label to the link so that we can display it in the body
// of the link
link1 add new label    new model
public object getobject
return integer tostring count1 clicks
// we can attach link components to any html tag we want. if it is an
// anchor (<a href...),
// the url to this component is put in the href attribute. for other
// components, a
// onclick javascript event handler is created that triggers the round
// trip
// it is ofcourse possible to - instead of the above approach - hide as
// much of the
// component as possible within a class.
class customlink extends link
final clickcount count2
/**
* construct.
*
* @param id
*/
public customlink string id
super id
count2   new clickcount
add new clickcountlabel    count2
public void onclick
count2 clicks
add new customlink
// and if we know we are going to attach it to a <input type="button>
// tag, we shouldn't
// use a label, but an attributemodifier instead.
class buttonlink extends link
final clickcount count3
/**
* construct.
*
* @param id
*/
public buttonlink string id
super id
count3   new clickcount
add new attributemodifier    new model
public object getobject
// we just replace the whole string. you could use
// custom
// attributemodifiers to e.g. just replace one part of
// the
// string if you want
return     count3 clicks
public void onclick
count3 clicks
add new buttonlink
/**
* simple class to holds the number of clicks.
*/
private static class clickcount implements iclusterable
/** number of clicks. */
private int clicks   0
/**
* simple custom label that displays the link click count.
*/
private static class clickcountlabel extends label
/**
* construct.
*
* @param id
*            component id
* @param clickcount
*            the count object
*/
public clickcountlabel string id  final clickcount clickcount
// call super with a simple annonymous class model that displays the
// current number of clicks
super id  new model
public object getobject
return integer tostring clickcount clicks
// ----------
final clickcount count1   new clickcount       simple counter object
link link1   new link
public void onclick
count1 clicks
/**
* override base method to provide an explanation
*/
protected void explain
string html    #  link1  label1
string code
link1
label1
add new explainpanel html  code