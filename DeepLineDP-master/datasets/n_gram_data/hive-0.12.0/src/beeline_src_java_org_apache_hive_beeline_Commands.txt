/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/*
* this source file is based on code taken from sqlline 1.0.2
* see sqlline notice in license
*/
package org apache hive beeline
import java io bufferedreader
import java io fileinputstream
import java io filereader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java lang reflect method
import java sql callablestatement
import java sql connection
import java sql databasemetadata
import java sql driver
import java sql resultset
import java sql sqlexception
import java sql statement
import java util arrays
import java util iterator
import java util linkedlist
import java util list
import java util properties
import java util set
import java util treeset
public class commands
private final beeline beeline
/**
* @param beeline
*/
commands beeline beeline
this beeline   beeline
public boolean metadata string line
beeline debug line
string parts   beeline split line
list<string> params   new linkedlist<string> arrays aslist parts
if  parts    null    parts length    0
return dbinfo
params remove 0
params remove 0
beeline debug params tostring
return metadata parts
params toarray new string
public boolean metadata string cmd  string args
if    beeline assertconnection
return false
try
method m   beeline getdatabasemetadata   getclass   getmethods
set<string> methodnames   new treeset<string>
set<string> methodnamesupper   new treeset<string>
for  int i   0  i < m length  i
methodnames add m getname
methodnamesupper add m getname   touppercase
if   methodnamesupper contains cmd touppercase
beeline error beeline loc    cmd
beeline error beeline loc
for  iterator<string> i   methodnames iterator    i hasnext
beeline error     i next
return false
object res   beeline getreflector   invoke beeline getdatabasemetadata
databasemetadata class  cmd  arrays aslist args
if  res instanceof resultset
resultset rs    resultset  res
if  rs    null
try
beeline print rs
finally
rs close
else if  res    null
beeline output res tostring
catch  exception e
return beeline error e
return true
public boolean history string line
list hist   beeline getconsolereader   gethistory   gethistorylist
int index   1
for  iterator i   hist iterator    i hasnext    index
beeline output beeline getcolorbuffer   pad index      6
append i next   tostring
return true
string arg1 string line  string paramname
return arg1 line  paramname  null
string arg1 string line  string paramname  string def
string ret   beeline split line
if  ret    null    ret length    2
if  def    null
return def
throw new illegalargumentexception beeline loc
new object  ret length    0 ?     ret
paramname
return ret
public boolean indexes string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
false
true
public boolean primarykeys string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
public boolean exportedkeys string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
public boolean importedkeys string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
public boolean procedures string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
public boolean tables string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line         null
public boolean typeinfo string line  throws exception
return metadata    new string
public boolean nativesql string sql  throws exception
if  sql startswith beeline command_prefix
sql   sql substring 1
if  sql startswith
sql   sql substring   length     1
string nat   beeline getconnection   nativesql sql
beeline output nat
return true
public boolean columns string line  throws exception
return metadata    new string
beeline getconnection   getcatalog    null
arg1 line
public boolean dropall string line
if  beeline getdatabaseconnection      null    beeline getdatabaseconnection   geturl      null
return beeline error beeline loc
try
if    beeline getconsolereader   readline beeline loc     equals
return beeline error
list<string> cmds   new linkedlist<string>
resultset rs   beeline gettables
try
while  rs next
cmds add
rs getstring
finally
try
rs close
catch  exception e
// run as a batch
return beeline runcommands cmds     cmds size
catch  exception e
return beeline error e
public boolean reconnect string line
if  beeline getdatabaseconnection      null    beeline getdatabaseconnection   geturl      null
return beeline error beeline loc
beeline info beeline loc    beeline getdatabaseconnection   geturl
try
beeline getdatabaseconnection   reconnect
catch  exception e
return beeline error e
return true
public boolean scan string line  throws ioexception
treeset<string> names   new treeset<string>
if  beeline getdrivers      null
beeline setdrivers arrays aslist beeline scandrivers line
beeline info beeline loc    beeline getdrivers   size
// unique the list
for  iterator<driver> i   beeline getdrivers   iterator    i hasnext
names add i next   getclass   getname
beeline output beeline getcolorbuffer
bold beeline getcolorbuffer   pad beeline loc     10  getmono
bold beeline getcolorbuffer   pad beeline loc     8  getmono
bold beeline getcolorbuffer beeline loc     getmono
for  iterator<string> i   names iterator    i hasnext
string name   i next   tostring
try
driver driver    driver  class forname name  newinstance
colorbuffer msg   beeline getcolorbuffer
pad driver jdbccompliant   ?        10
pad driver getmajorversion
driver getminorversion    8
append name
if  driver jdbccompliant
beeline output msg
else
beeline output beeline getcolorbuffer   red msg getmono
catch  throwable t
beeline output beeline getcolorbuffer   red name       error with driver
return true
public boolean save string line  throws ioexception
beeline info beeline loc    beeline getopts   getpropertiesfile
beeline getopts   save
return true
public boolean load string line  throws ioexception
beeline getopts   load
beeline info beeline loc    beeline getopts   getpropertiesfile
return true
public boolean config string line
try
properties props   beeline getopts   toproperties
set keys   new treeset props keyset
for  iterator i   keys iterator    i hasnext
string key    string  i next
beeline output beeline getcolorbuffer
green beeline getcolorbuffer   pad key substring
beeline getopts   property_prefix length     20
getmono
append props getproperty key
catch  exception e
return beeline error e
return true
public boolean set string line
if  line    null    line trim   equals
line length      0
return config null
string parts   beeline split line  3
if  parts    null
return false
string key   parts
string value   parts
boolean success   beeline getopts   set key  value  false
// if we autosave, then save
if  success    beeline getopts   getautosave
try
beeline getopts   save
catch  exception saveexception
return success
public boolean commit string line  throws sqlexception
if    beeline assertconnection
return false
if    beeline assertautocommit
return false
try
long start   system currenttimemillis
beeline getdatabaseconnection   getconnection   commit
long end   system currenttimemillis
beeline showwarnings
beeline info beeline loc
beeline locelapsedtime end   start
return true
catch  exception e
return beeline error e
public boolean rollback string line  throws sqlexception
if    beeline assertconnection
return false
if    beeline assertautocommit
return false
try
long start   system currenttimemillis
beeline getdatabaseconnection   getconnection   rollback
long end   system currenttimemillis
beeline showwarnings
beeline info beeline loc
beeline locelapsedtime end   start
return true
catch  exception e
return beeline error e
public boolean autocommit string line  throws sqlexception
if    beeline assertconnection
return false
if  line endswith
beeline getdatabaseconnection   getconnection   setautocommit true
else if  line endswith
beeline getdatabaseconnection   getconnection   setautocommit false
beeline showwarnings
beeline autocommitstatus beeline getdatabaseconnection   getconnection
return true
public boolean dbinfo string line
if    beeline assertconnection
return false
beeline showwarnings
int padlen   50
string m   new string
for  int i   0  i < m length  i
try
beeline output beeline getcolorbuffer   pad m  padlen  append
beeline getreflector   invoke beeline getdatabasemetadata
m  new object
catch  exception e
beeline handleexception e
return true
public boolean verbose string line
beeline info
return set
public boolean outputformat string line
return set     line
public boolean brief string line
beeline info
return set
public boolean isolation string line  throws sqlexception
if    beeline assertconnection
return false
int i
if  line endswith
i   connection transaction_none
else if  line endswith
i   connection transaction_read_committed
else if  line endswith
i   connection transaction_read_uncommitted
else if  line endswith
i   connection transaction_repeatable_read
else if  line endswith
i   connection transaction_serializable
else
return beeline error
beeline getdatabaseconnection   getconnection   settransactionisolation i
int isol   beeline getdatabaseconnection   getconnection   gettransactionisolation
final string isoldesc
switch  i
case connection transaction_none
isoldesc
break
case connection transaction_read_committed
isoldesc
break
case connection transaction_read_uncommitted
isoldesc
break
case connection transaction_repeatable_read
isoldesc
break
case connection transaction_serializable
isoldesc
break
default
isoldesc
beeline info beeline loc    isoldesc
return true
public boolean batch string line
if    beeline assertconnection
return false
if  beeline getbatch      null
beeline setbatch new linkedlist<string>
beeline info beeline loc
return true
else
beeline info beeline loc
try
beeline runbatch beeline getbatch
return true
catch  exception e
return beeline error e
finally
beeline setbatch null
public boolean sql string line
return execute line  false
public boolean call string line
return execute line  true
private boolean execute string line  boolean call
if  line    null    line length      0
return false     ???
// ### fixme: doing the multi-line handling down here means
// higher-level logic never sees the extra lines. so,
// for example, if a script is being saved, it won't include
// the continuation lines! this is logged as sf.net
// bug 879518.
// use multiple lines for statements not terminated by ";"
try
while    line trim   endswith        beeline getopts   isallowmultilinecommand
stringbuilder prompt   new stringbuilder beeline getprompt
for  int i   0  i < prompt length     1  i
if  prompt charat i
prompt setcharat i  i % 2    0 ?
string extra   beeline getconsolereader   readline prompt tostring
if   beeline iscomment extra
line        extra
catch  exception e
beeline handleexception e
if  line endswith
line   line substring 0  line length     1
if    beeline assertconnection
return false
string sql   line
if  sql startswith beeline command_prefix
sql   sql substring 1
string prefix   call ?
if  sql startswith prefix
sql   sql substring prefix length
// batch statements?
if  beeline getbatch      null
beeline getbatch   add sql
return true
try
statement stmnt   null
boolean hasresults
try
long start   system currenttimemillis
if  call
stmnt   beeline getdatabaseconnection   getconnection   preparecall sql
hasresults     callablestatement  stmnt  execute
else
stmnt   beeline createstatement
hasresults   stmnt execute sql
beeline showwarnings
if  hasresults
do
resultset rs   stmnt getresultset
try
int count   beeline print rs
long end   system currenttimemillis
beeline info beeline loc    count
beeline locelapsedtime end   start
finally
rs close
while  beeline getmoreresults stmnt
else
int count   stmnt getupdatecount
long end   system currenttimemillis
beeline info beeline loc    count
beeline locelapsedtime end   start
finally
if  stmnt    null
stmnt close
catch  exception e
return beeline error e
beeline showwarnings
return true
public boolean quit string line
beeline setexit true
close null
return true
/**
* close all connections.
*/
public boolean closeall string line
if  close null
while  close null
return true
return false
/**
* close the current connection.
*/
public boolean close string line
if  beeline getdatabaseconnection      null
return false
try
if  beeline getdatabaseconnection   getconnection      null
beeline getdatabaseconnection   getconnection   isclosed
beeline info beeline loc
beeline getdatabaseconnection   getconnection   getclass   getname
beeline getdatabaseconnection   getconnection   close
else
beeline info beeline loc
catch  exception e
return beeline error e
beeline getdatabaseconnections   remove
return true
/**
* connect to the database defined in the specified properties file.
*/
public boolean properties string line  throws exception
string example
example        beeline getseparator
string parts   beeline split line
if  parts length < 2
return beeline error example
int successes   0
for  int i   1  i < parts length  i
properties props   new properties
props load new fileinputstream parts
if  connect props
successes
if  successes     parts length   1
return false
else
return true
public boolean connect string line  throws exception
string example
beeline getseparator
string parts   beeline split line
if  parts    null
return false
if  parts length < 2
return beeline error example
string url   parts length < 2 ? null   parts
string user   parts length < 3 ? null   parts
string pass   parts length < 4 ? null   parts
string driver   parts length < 5 ? null   parts
properties props   new properties
if  url    null
props setproperty    url
if  driver    null
props setproperty    driver
if  user    null
props setproperty    user
if  pass    null
props setproperty    pass
return connect props
private string getproperty properties props  string keys
for  int i   0  i < keys length  i
string val   props getproperty keys
if  val    null
return val
for  iterator i   props keyset   iterator    i hasnext
string key    string  i next
for  int j   0  j < keys length  j
if  key endswith keys
return props getproperty key
return null
public boolean connect properties props  throws ioexception
string url   getproperty props  new string
string driver   getproperty props  new string
string username   getproperty props  new string
string password   getproperty props  new string
if  url    null    url length      0
return beeline error  url
if  driver    null    driver length      0
if   beeline scanfordriver url
return beeline error beeline loc    url
beeline info     url
if  username    null
username   beeline getconsolereader   readline     url
if  password    null
password   beeline getconsolereader   readline     url
new character
try
beeline getdatabaseconnections   setconnection
new databaseconnection beeline  driver  url  username  password
beeline getdatabaseconnection   getconnection
beeline setcompletions
return true
catch  sqlexception sqle
return beeline error sqle
catch  ioexception ioe
return beeline error ioe
public boolean rehash string line
try
if    beeline assertconnection
return false
if  beeline getdatabaseconnection      null
beeline getdatabaseconnection   setcompletions false
return true
catch  exception e
return beeline error e
/**
* list the current connections
*/
public boolean list string line
int index   0
beeline info beeline loc    beeline getdatabaseconnections   size
for  iterator<databaseconnection> i   beeline getdatabaseconnections   iterator    i hasnext    index
databaseconnection c   i next
boolean closed   false
try
closed   c getconnection   isclosed
catch  exception e
closed   true
beeline output beeline getcolorbuffer   pad     index      5
pad closed ? beeline loc      beeline loc     9
append c geturl
return true
public boolean all string line
int index   beeline getdatabaseconnections   getindex
boolean success   true
for  int i   0  i < beeline getdatabaseconnections   size    i
beeline getdatabaseconnections   setindex i
beeline output beeline loc    beeline getdatabaseconnection
// ### fixme: this is broken for multi-line sql
success   sql line substring   length        success
// restore index
beeline getdatabaseconnections   setindex index
return success
public boolean go string line
string parts   beeline split line  2
if  parts    null
return false
int index   integer parseint parts
if    beeline getdatabaseconnections   setindex index
beeline error beeline loc        index
list        list the current connections
return false
return true
/**
* save or stop saving a script to a file
*/
public boolean script string line
if  beeline getscriptoutputfile      null
return startscript line
else
return stopscript line
/**
* stop writing to the script file and close the script.
*/
private boolean stopscript string line
try
beeline getscriptoutputfile   close
catch  exception e
beeline handleexception e
beeline output beeline loc    beeline getscriptoutputfile
beeline setscriptoutputfile null
return true
/**
* start writing to the specified script file.
*/
private boolean startscript string line
if  beeline getscriptoutputfile      null
return beeline error beeline loc    beeline getscriptoutputfile
string parts   beeline split line  2
if  parts    null
return false
try
beeline setscriptoutputfile new outputfile parts
beeline output beeline loc    beeline getscriptoutputfile
return true
catch  exception e
return beeline error e
/**
* run a script from the specified file.
*/
public boolean run string line
string parts   beeline split line  2
if  parts    null
return false
list<string> cmds   new linkedlist<string>
try
bufferedreader reader   new bufferedreader new filereader
parts
try
// ### note: fix for sf.net bug 879427
stringbuilder cmd   null
for
string scriptline   reader readline
if  scriptline    null
break
string trimmedline   scriptline trim
if  beeline getopts   gettrimscripts
scriptline   trimmedline
if  cmd    null
// we're continuing an existing command
cmd append
cmd append scriptline
if  trimmedline endswith
// this command has terminated
cmds add cmd tostring
cmd   null
else
// we're starting a new command
if  beeline needscontinuation scriptline
// multi-line
cmd   new stringbuilder scriptline
else
// single-line
cmds add scriptline
if  cmd    null
// ### review: oops, somebody left the last command
// unterminated; should we fix it for them or complain?
// for now be nice and fix it.
cmd append
cmds add cmd tostring
finally
reader close
// success only if all the commands were successful
return beeline runcommands cmds     cmds size
catch  exception e
return beeline error e
/**
* save or stop saving all output to a file.
*/
public boolean record string line
if  beeline getrecordoutputfile      null
return startrecording line
else
return stoprecording line
/**
* stop writing output to the record file.
*/
private boolean stoprecording string line
try
beeline getrecordoutputfile   close
catch  exception e
beeline handleexception e
beeline output beeline loc    beeline getrecordoutputfile
beeline setrecordoutputfile null
return true
/**
* start writing to the specified record file.
*/
private boolean startrecording string line
if  beeline getrecordoutputfile      null
return beeline error beeline loc    beeline getrecordoutputfile
string parts   beeline split line  2
if  parts    null
return false
try
beeline setrecordoutputfile new outputfile parts
beeline output beeline loc    beeline getrecordoutputfile
return true
catch  exception e
return beeline error e
public boolean describe string line  throws sqlexception
string table   beeline split line  2
if  table    null
return false
resultset rs
if  table equals
rs   beeline gettables
else
rs   beeline getcolumns table
if  rs    null
return false
beeline print rs
rs close
return true
public boolean help string line
string parts   beeline split line
string cmd   parts length > 1 ? parts
int count   0
treeset<colorbuffer> clist   new treeset<colorbuffer>
for  int i   0  i < beeline commandhandlers length  i
if  cmd length      0
arrays aslist beeline commandhandlers getnames    contains cmd
clist add beeline getcolorbuffer   pad     beeline commandhandlers getname    20
append beeline wrap beeline commandhandlers gethelptext    60  20
for  iterator<colorbuffer> i   clist iterator    i hasnext
beeline output i next
if  cmd length      0
beeline output
beeline output beeline loc    beeline getapplicationcontactinformation
return true
public boolean manual string line  throws ioexception
inputstream in   beeline class getresourceasstream
if  in    null
return beeline error beeline loc
bufferedreader breader   new bufferedreader
new inputstreamreader in
string man
int index   0
while   man   breader readline       null
index
beeline output man
// silly little pager
if  index %  beeline getopts   getmaxheight     1     0
string ret   beeline getconsolereader   readline beeline loc
if  ret    null    ret startswith
break
breader close
return true