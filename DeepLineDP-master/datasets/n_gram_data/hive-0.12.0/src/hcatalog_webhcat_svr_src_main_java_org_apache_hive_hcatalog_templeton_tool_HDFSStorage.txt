/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing,
* software distributed under the license is distributed on an
* "as is" basis, without warranties or conditions of any
* kind, either express or implied.  see the license for the
* specific language governing permissions and limitations
* under the license.
*/
package org apache hive hcatalog templeton tool
import java io bufferedreader
import java io closeable
import java io ioexception
import java io inputstreamreader
import java io outputstreamwriter
import java io printwriter
import java util arraylist
import java util hashmap
import java util list
import java util map
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
/**
*  hdfs implementation of templeton storage.
*
*  this implementation assumes that all keys in key/value pairs are
*  chosen such that they don't have any newlines in them.
*
*/
public class hdfsstorage implements templetonstorage
filesystem fs   null
public string storage_root   null
public static final string job_path
public static final string job_trackingpath
public static final string overhead_path
private static final log log   logfactory getlog hdfsstorage class
public void startcleanup configuration config
try
hdfscleanup startinstance config
catch  exception e
log warn
@override
public void savefield type type  string id  string key  string val
throws notfoundexception
if  val    null
return
printwriter out   null
//todo: filesystem#setpermission() - should this make sure to set 777 on jobs/ ?
path keyfile  new path getpath type        id       key
try
// this will replace the old value if there is one
// overwrite the existing file
out   new printwriter new outputstreamwriter fs create keyfile
out write val
out flush
catch  exception e
string errmsg       keyfile       e getmessage
log error errmsg  e
throw new notfoundexception errmsg  e
finally
close out
@override
public string getfield type type  string id  string key
bufferedreader in   null
path p   new path getpath type        id       key
try
in   new bufferedreader new inputstreamreader fs open p
string line   null
string val
while   line   in readline       null
if   val equals
val
val    line
return val
catch  exception e
//don't print stack trace since clients poll for 'exitvalue', 'completed',
//files which are not there until job completes
log info     p       e getmessage
finally
close in
return null
@override
public map<string  string> getfields type type  string id
hashmap<string  string> map   new hashmap<string  string>
bufferedreader in   null
path p   new path getpath type        id
try
for  filestatus status   fs liststatus p
in   new bufferedreader new inputstreamreader fs open status getpath
string line   null
string val
while   line   in readline       null
if   val equals
val
val    line
map put status getpath   getname    val
catch  ioexception e
log trace     p
finally
close in
return map
@override
public boolean delete type type  string id  throws notfoundexception
path p   new path getpath type        id
try
fs delete p  true
catch  ioexception e
throw new notfoundexception     p
e getmessage
return false
@override
public list<string> getall
arraylist<string> allnodes   new arraylist<string>
for  type type   type values
allnodes addall getallfortype type
return allnodes
@override
public list<string> getallfortype type type
arraylist<string> allnodes   new arraylist<string>
try
for  filestatus status   fs liststatus new path getpath type
allnodes add status getpath   getname
return null
catch  exception e
log trace     type tostring
return allnodes
@override
public list<string> getallforkey string key  string value
arraylist<string> allnodes   new arraylist<string>
try
for  type type   type values
allnodes addall getallfortypeandkey type  key  value
catch  exception e
log trace     key
e getmessage
return allnodes
@override
public list<string> getallfortypeandkey type type  string key  string value
arraylist<string> allnodes   new arraylist<string>
hashmap<string  string> map   new hashmap<string  string>
try
for  filestatus status
fs liststatus new path getpath type
map    hashmap<string  string>
getfields type  status getpath   getname
if  map get key  equals value
allnodes add status getpath   getname
catch  exception e
log trace     key
e getmessage
return allnodes
@override
public void openstorage configuration config  throws ioexception
storage_root   config get templetonstorage storage_root
if  fs    null
fs   new path storage_root  getfilesystem config
@override
public void closestorage   throws ioexception
// nothing to do here
/**
* get the path to storage based on the type.
* @param type
*/
public string getpath type type
return getpath type  storage_root
/**
* static method to get the path based on the type.
*
* @param type
* @param root
*/
public static string getpath type type  string root
string typepath   root   overhead_path
switch  type
case job
typepath   root   job_path
break
case jobtracking
typepath   root   job_trackingpath
break
return typepath
private void close closeable is
if is    null
return
try
is close
catch  ioexception ex
log trace     ex getmessage