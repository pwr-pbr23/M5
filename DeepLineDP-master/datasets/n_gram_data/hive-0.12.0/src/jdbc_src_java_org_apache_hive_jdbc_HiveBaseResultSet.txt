/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hive jdbc
import java io inputstream
import java io reader
import java math bigdecimal
import java math mathcontext
import java net url
import java sql array
import java sql blob
import java sql clob
import java sql date
import java sql nclob
import java sql ref
import java sql resultset
import java sql resultsetmetadata
import java sql rowid
import java sql sqlexception
import java sql sqlwarning
import java sql sqlxml
import java sql statement
import java sql time
import java sql timestamp
import java util calendar
import java util list
import java util map
import org apache hive service cli tableschema
import org apache hive service cli type
import org apache hive service cli thrift tboolvalue
import org apache hive service cli thrift tbytevalue
import org apache hive service cli thrift tcolumnvalue
import org apache hive service cli thrift tdoublevalue
import org apache hive service cli thrift ti16value
import org apache hive service cli thrift ti32value
import org apache hive service cli thrift ti64value
import org apache hive service cli thrift trow
import org apache hive service cli thrift tstringvalue
/**
* data independent base class which implements the common part of
* all hive result sets.
*/
public abstract class hivebaseresultset implements resultset
protected sqlwarning warningchain   null
protected boolean wasnull   false
protected trow row
protected list<string> columnnames
protected list<string> columntypes
protected list<jdbccolumnattributes> columnattributes
private tableschema schema
public boolean absolute int row  throws sqlexception
throw new sqlexception
}
public void afterlast   throws sqlexception
throw new sqlexception
}
public void beforefirst   throws sqlexception
throw new sqlexception
}
public void cancelrowupdates   throws sqlexception
throw new sqlexception
}
public void deleterow   throws sqlexception
throw new sqlexception
}
public int findcolumn string columnname  throws sqlexception
int columnindex   columnnames indexof columnname
if  columnindex   1
throw new sqlexception
else
return   columnindex
}
}
public boolean first   throws sqlexception
throw new sqlexception
}
public array getarray int i  throws sqlexception
throw new sqlexception
}
public array getarray string colname  throws sqlexception
throw new sqlexception
}
public inputstream getasciistream int columnindex  throws sqlexception
throw new sqlexception
}
public inputstream getasciistream string columnname  throws sqlexception
throw new sqlexception
}
public bigdecimal getbigdecimal int columnindex  throws sqlexception
object val   getobject columnindex
if  val    null    val instanceof bigdecimal
return  bigdecimal val
}
throw new sqlexception
}
public bigdecimal getbigdecimal string columnname  throws sqlexception
return getbigdecimal findcolumn columnname
}
public bigdecimal getbigdecimal int columnindex  int scale  throws sqlexception
mathcontext mc   new mathcontext scale
return getbigdecimal columnindex  round mc
}
public bigdecimal getbigdecimal string columnname  int scale  throws sqlexception
return getbigdecimal findcolumn columnname   scale
}
public inputstream getbinarystream int columnindex  throws sqlexception
throw new sqlexception
}
public inputstream getbinarystream string columnname  throws sqlexception
throw new sqlexception
}
public blob getblob int i  throws sqlexception
throw new sqlexception
}
public blob getblob string colname  throws sqlexception
throw new sqlexception
}
public boolean getboolean int columnindex  throws sqlexception
object obj   getobject columnindex
if  boolean class isinstance obj
return  boolean  obj
else if  obj    null
return false
else if  number class isinstance obj
return   number  obj  intvalue      0
else if  string class isinstance obj
return    string  obj  equals
}
throw new sqlexception     columnindex
}
public boolean getboolean string columnname  throws sqlexception
return getboolean findcolumn columnname
}
public byte getbyte int columnindex  throws sqlexception
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  bytevalue
else if  obj    null
return 0
}
throw new sqlexception     columnindex
}
public byte getbyte string columnname  throws sqlexception
return getbyte findcolumn columnname
}
public byte getbytes int columnindex  throws sqlexception
throw new sqlexception
}
public byte getbytes string columnname  throws sqlexception
throw new sqlexception
}
public reader getcharacterstream int columnindex  throws sqlexception
throw new sqlexception
}
public reader getcharacterstream string columnname  throws sqlexception
throw new sqlexception
}
public clob getclob int i  throws sqlexception
throw new sqlexception
}
public clob getclob string colname  throws sqlexception
throw new sqlexception
}
public int getconcurrency   throws sqlexception
return resultset concur_read_only
}
public string getcursorname   throws sqlexception
throw new sqlexception
}
public date getdate int columnindex  throws sqlexception
object obj   getobject columnindex
if  obj    null
return null
}
if  obj instanceof date
return  date  obj
}
try
if  obj instanceof string
return date valueof  string obj
}
catch  exception e
throw new sqlexception     columnindex
e tostring    e
}
// if we fell through to here this is not a valid type conversion
throw new sqlexception     columnindex
}
public date getdate string columnname  throws sqlexception
return getdate findcolumn columnname
}
public date getdate int columnindex  calendar cal  throws sqlexception
throw new sqlexception
}
public date getdate string columnname  calendar cal  throws sqlexception
throw new sqlexception
}
public double getdouble int columnindex  throws sqlexception
try
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  doublevalue
else if  obj    null
return 0
else if  string class isinstance obj
return double valueof  string obj
}
throw new exception
catch  exception e
throw new sqlexception     columnindex
e tostring    e
}
}
public double getdouble string columnname  throws sqlexception
return getdouble findcolumn columnname
}
public int getfetchdirection   throws sqlexception
return resultset fetch_forward
}
public int getfetchsize   throws sqlexception
throw new sqlexception
}
public float getfloat int columnindex  throws sqlexception
try
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  floatvalue
else if  obj    null
return 0
else if  string class isinstance obj
return float valueof  string obj
}
throw new exception
catch  exception e
throw new sqlexception     columnindex
e tostring    e
}
}
public float getfloat string columnname  throws sqlexception
return getfloat findcolumn columnname
}
public int getholdability   throws sqlexception
throw new sqlexception
}
public int getint int columnindex  throws sqlexception
try
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  intvalue
else if  obj    null
return 0
else if  string class isinstance obj
return integer valueof  string obj
}
throw new exception
catch  exception e
throw new sqlexception
columnindex       e tostring
e
}
}
public int getint string columnname  throws sqlexception
return getint findcolumn columnname
}
public long getlong int columnindex  throws sqlexception
try
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  longvalue
else if  obj    null
return 0
else if  string class isinstance obj
return long valueof  string obj
}
throw new exception
catch  exception e
throw new sqlexception
columnindex       e tostring
e
}
}
public long getlong string columnname  throws sqlexception
return getlong findcolumn columnname
}
public resultsetmetadata getmetadata   throws sqlexception
return new hiveresultsetmetadata columnnames  columntypes  columnattributes
}
public reader getncharacterstream int arg0  throws sqlexception
throw new sqlexception
}
public reader getncharacterstream string arg0  throws sqlexception
throw new sqlexception
}
public nclob getnclob int arg0  throws sqlexception
throw new sqlexception
}
public nclob getnclob string columnlabel  throws sqlexception
throw new sqlexception
}
public string getnstring int columnindex  throws sqlexception
throw new sqlexception
}
public string getnstring string columnlabel  throws sqlexception
throw new sqlexception
}
private boolean getbooleanvalue tboolvalue tboolvalue
if  tboolvalue issetvalue
wasnull   false
return tboolvalue isvalue
}
wasnull   true
return null
}
private byte getbytevalue tbytevalue tbytevalue
if  tbytevalue issetvalue
wasnull   false
return tbytevalue getvalue
}
wasnull   true
return null
}
private short getshortvalue ti16value ti16value
if  ti16value issetvalue
wasnull   false
return ti16value getvalue
}
wasnull   true
return null
}
private integer getintegervalue ti32value ti32value
if  ti32value issetvalue
wasnull   false
return ti32value getvalue
}
wasnull   true
return null
}
private long getlongvalue ti64value ti64value
if  ti64value issetvalue
wasnull   false
return ti64value getvalue
}
wasnull   true
return null
}
private double getdoublevalue tdoublevalue tdoublevalue
if  tdoublevalue issetvalue
wasnull   false
return tdoublevalue getvalue
}
wasnull   true
return null
}
private string getstringvalue tstringvalue tstringvalue
if  tstringvalue issetvalue
wasnull   false
return tstringvalue getvalue
}
wasnull   true
return null
}
private date getdatevalue tstringvalue tstringvalue
if  tstringvalue issetvalue
wasnull   false
return date valueof tstringvalue getvalue
}
wasnull   true
return null
}
private timestamp gettimestampvalue tstringvalue tstringvalue
if  tstringvalue issetvalue
wasnull   false
return timestamp valueof tstringvalue getvalue
}
wasnull   true
return null
}
private byte getbinaryvalue tstringvalue tstring
if  tstring issetvalue
wasnull   false
return tstring getvalue   getbytes
}
wasnull   true
return null
}
private bigdecimal getbigdecimalvalue tstringvalue tstringvalue
if  tstringvalue issetvalue
wasnull   false
return new bigdecimal tstringvalue getvalue
}
wasnull   true
return null
}
private object getcolumnvalue int columnindex  throws sqlexception
if  row    null
throw new sqlexception
}
list<tcolumnvalue> colvals   row getcolvals
if  colvals    null
throw new sqlexception
}
if  columnindex > colvals size
throw new sqlexception     columnindex
}
tcolumnvalue tcolumnvalue   colvals get columnindex   1
type columntype   getschema   getcolumndescriptorat columnindex   1  gettype
switch  columntype
case boolean_type
return getbooleanvalue(tcolumnvalue.getboolval());
case tinyint_type
return getbytevalue(tcolumnvalue.getbyteval());
case smallint_type
return getshortvalue(tcolumnvalue.geti16val());
case int_type
return getintegervalue(tcolumnvalue.geti32val());
case bigint_type
return getlongvalue(tcolumnvalue.geti64val());
case float_type
return getdoublevalue(tcolumnvalue.getdoubleval());
case double_type
return getdoublevalue(tcolumnvalue.getdoubleval());
case string_type
return getstringvalue(tcolumnvalue.getstringval());
case varchar_type
return getstringvalue(tcolumnvalue.getstringval());
case binary_type
return getbinaryvalue tcolumnvalue getstringval
case date_type
return getdatevalue tcolumnvalue getstringval
case timestamp_type
return gettimestampvalue tcolumnvalue getstringval
case decimal_type
return getbigdecimalvalue tcolumnvalue getstringval
case null_type
wasnull   true
return null
default:
throw new sqlexception     columntype
}
/*
switch (tcolumnvalue.getsetfield()) {
case bool_val:
return getbooleanvalue(tcolumnvalue.getboolval());
case byte_val:
return getbytevalue(tcolumnvalue.getbyteval());
case i16_val:
return getshortvalue(tcolumnvalue.geti16val());
case i32_val:
return getintegervalue(tcolumnvalue.geti32val());
case i64_val:
return getlongvalue(tcolumnvalue.geti64val());
case double_val:
return getdoublevalue(tcolumnvalue.getdoubleval());
case string_val:
return getstringvalue(tcolumnvalue.getstringval());
default:
throw new sqlexception("unrecognized column type:" + tcolumnvalue.getsetfield());
}
*/
}
public object getobject int columnindex  throws sqlexception
return getcolumnvalue columnindex
}
public object getobject string columnname  throws sqlexception
return getobject findcolumn columnname
}
public object getobject int i  map<string  class<?>> map  throws sqlexception
throw new sqlexception
}
public object getobject string colname  map<string  class<?>> map  throws sqlexception
throw new sqlexception
}
public ref getref int i  throws sqlexception
throw new sqlexception
}
public ref getref string colname  throws sqlexception
throw new sqlexception
}
public int getrow   throws sqlexception
throw new sqlexception
}
public rowid getrowid int columnindex  throws sqlexception
throw new sqlexception
}
public rowid getrowid string columnlabel  throws sqlexception
throw new sqlexception
}
public sqlxml getsqlxml int columnindex  throws sqlexception
throw new sqlexception
}
public sqlxml getsqlxml string columnlabel  throws sqlexception
throw new sqlexception
}
public short getshort int columnindex  throws sqlexception
try
object obj   getobject columnindex
if  number class isinstance obj
return   number  obj  shortvalue
else if  obj    null
return 0
else if  string class isinstance obj
return short valueof  string obj
}
throw new exception
catch  exception e
throw new sqlexception     columnindex
e tostring    e
}
}
public short getshort string columnname  throws sqlexception
return getshort findcolumn columnname
}
public statement getstatement   throws sqlexception
throw new sqlexception
}
/**
* @param columnindex - the first column is 1, the second is 2, ...
* @see java.sql.resultset#getstring(int)
*/
public string getstring int columnindex  throws sqlexception
object value   getcolumnvalue columnindex
if  wasnull
return null
}
if  value instanceof byte
return new string  byte value
}
return value tostring
}
public string getstring string columnname  throws sqlexception
return getstring findcolumn columnname
}
public time gettime int columnindex  throws sqlexception
throw new sqlexception
}
public time gettime string columnname  throws sqlexception
throw new sqlexception
}
public time gettime int columnindex  calendar cal  throws sqlexception
throw new sqlexception
}
public time gettime string columnname  calendar cal  throws sqlexception
throw new sqlexception
}
public timestamp gettimestamp int columnindex  throws sqlexception
object obj   getobject columnindex
if  obj    null
return null
}
if  obj instanceof timestamp
return  timestamp  obj
}
if  obj instanceof string
return timestamp valueof  string obj
}
throw new sqlexception
}
public timestamp gettimestamp string columnname  throws sqlexception
return gettimestamp findcolumn columnname
}
public timestamp gettimestamp int columnindex  calendar cal  throws sqlexception
throw new sqlexception
}
public timestamp gettimestamp string columnname  calendar cal  throws sqlexception
throw new sqlexception
}
public int gettype   throws sqlexception
return resultset type_forward_only
}
public url geturl int columnindex  throws sqlexception
throw new sqlexception
}
public url geturl string columnname  throws sqlexception
throw new sqlexception
}
public inputstream getunicodestream int columnindex  throws sqlexception
throw new sqlexception
}
public inputstream getunicodestream string columnname  throws sqlexception
throw new sqlexception
}
public void insertrow   throws sqlexception
throw new sqlexception
}
public boolean isafterlast   throws sqlexception
throw new sqlexception
}
public boolean isbeforefirst   throws sqlexception
throw new sqlexception
}
public boolean isclosed   throws sqlexception
throw new sqlexception
}
public boolean isfirst   throws sqlexception
throw new sqlexception
}
public boolean islast   throws sqlexception
throw new sqlexception
}
public boolean last   throws sqlexception
throw new sqlexception
}
public void movetocurrentrow   throws sqlexception
throw new sqlexception
}
public void movetoinsertrow   throws sqlexception
throw new sqlexception
}
public boolean previous   throws sqlexception
throw new sqlexception
}
public void refreshrow   throws sqlexception
throw new sqlexception
}
public boolean relative int rows  throws sqlexception
throw new sqlexception
}
public boolean rowdeleted   throws sqlexception
throw new sqlexception
}
public boolean rowinserted   throws sqlexception
throw new sqlexception
}
public boolean rowupdated   throws sqlexception
throw new sqlexception
}
public void setfetchdirection int direction  throws sqlexception
throw new sqlexception
}
public void setfetchsize int rows  throws sqlexception
throw new sqlexception
}
public void updatearray int columnindex  array x  throws sqlexception
throw new sqlexception
}
public void updatearray string columnname  array x  throws sqlexception
throw new sqlexception
}
public void updateasciistream int columnindex  inputstream x  throws sqlexception
throw new sqlexception
}
public void updateasciistream string columnlabel  inputstream x  throws sqlexception
throw new sqlexception
}
public void updateasciistream int columnindex  inputstream x  int length
throws sqlexception
throw new sqlexception
}
public void updateasciistream string columnname  inputstream x  int length
throws sqlexception
throw new sqlexception
}
public void updateasciistream int columnindex  inputstream x  long length
throws sqlexception
throw new sqlexception
}
public void updateasciistream string columnlabel  inputstream x  long length
throws sqlexception
throw new sqlexception
}
public void updatebigdecimal int columnindex  bigdecimal x  throws sqlexception
throw new sqlexception
}
public void updatebigdecimal string columnname  bigdecimal x  throws sqlexception
throw new sqlexception
}
public void updatebinarystream int columnindex  inputstream x  throws sqlexception
throw new sqlexception
}
public void updatebinarystream string columnlabel  inputstream x  throws sqlexception
throw new sqlexception
}
public void updatebinarystream int columnindex  inputstream x  int length
throws sqlexception
throw new sqlexception
}
public void updatebinarystream string columnname  inputstream x  int length
throws sqlexception
throw new sqlexception
}
public void updatebinarystream int columnindex  inputstream x  long length
throws sqlexception
throw new sqlexception
}
public void updatebinarystream string columnlabel  inputstream x  long length
throws sqlexception
throw new sqlexception
}
public void updateblob int columnindex  blob x  throws sqlexception
throw new sqlexception
}
public void updateblob string columnname  blob x  throws sqlexception
throw new sqlexception
}
public void updateblob int columnindex  inputstream inputstream  throws sqlexception
throw new sqlexception
}
public void updateblob string columnlabel  inputstream inputstream  throws sqlexception
throw new sqlexception
}
public void updateblob int columnindex  inputstream inputstream  long length
throws sqlexception
throw new sqlexception
}
public void updateblob string columnlabel  inputstream inputstream
long length  throws sqlexception
throw new sqlexception
}
public void updateboolean int columnindex  boolean x  throws sqlexception
throw new sqlexception
}
public void updateboolean string columnname  boolean x  throws sqlexception
throw new sqlexception
}
public void updatebyte int columnindex  byte x  throws sqlexception
throw new sqlexception
}
public void updatebyte string columnname  byte x  throws sqlexception
throw new sqlexception
}
public void updatebytes int columnindex  byte x  throws sqlexception
throw new sqlexception
}
public void updatebytes string columnname  byte x  throws sqlexception
throw new sqlexception
}
public void updatecharacterstream int columnindex  reader x  throws sqlexception
throw new sqlexception
}
public void updatecharacterstream string columnlabel  reader reader  throws sqlexception
throw new sqlexception
}
public void updatecharacterstream int columnindex  reader x  int length
throws sqlexception
throw new sqlexception
}
public void updatecharacterstream string columnname  reader reader  int length
throws sqlexception
throw new sqlexception
}
public void updatecharacterstream int columnindex  reader x  long length
throws sqlexception
throw new sqlexception
}
public void updatecharacterstream string columnlabel  reader reader
long length  throws sqlexception
throw new sqlexception
}
public void updateclob int columnindex  clob x  throws sqlexception
throw new sqlexception
}
public void updateclob string columnname  clob x  throws sqlexception
throw new sqlexception
}
public void updateclob int columnindex  reader reader  throws sqlexception
throw new sqlexception
}
public void updateclob string columnlabel  reader reader  throws sqlexception
throw new sqlexception
}
public void updateclob int columnindex  reader reader  long length  throws sqlexception
throw new sqlexception
}
public void updateclob string columnlabel  reader reader  long length  throws sqlexception
throw new sqlexception
}
public void updatedate int columnindex  date x  throws sqlexception
throw new sqlexception
}
public void updatedate string columnname  date x  throws sqlexception
throw new sqlexception
}
public void updatedouble int columnindex  double x  throws sqlexception
throw new sqlexception
}
public void updatedouble string columnname  double x  throws sqlexception
throw new sqlexception
}
public void updatefloat int columnindex  float x  throws sqlexception
throw new sqlexception
}
public void updatefloat string columnname  float x  throws sqlexception
throw new sqlexception
}
public void updateint int columnindex  int x  throws sqlexception
throw new sqlexception
}
public void updateint string columnname  int x  throws sqlexception
throw new sqlexception
}
public void updatelong int columnindex  long x  throws sqlexception
throw new sqlexception
}
public void updatelong string columnname  long x  throws sqlexception
throw new sqlexception
}
public void updatencharacterstream int columnindex  reader x  throws sqlexception
throw new sqlexception
}
public void updatencharacterstream string columnlabel  reader reader  throws sqlexception
throw new sqlexception
}
public void updatencharacterstream int columnindex  reader x  long length  throws sqlexception
throw new sqlexception
}
public void updatencharacterstream string columnlabel  reader reader
long length  throws sqlexception
throw new sqlexception
}
public void updatenclob int columnindex  nclob clob  throws sqlexception
throw new sqlexception
}
public void updatenclob string columnlabel  nclob clob  throws sqlexception
throw new sqlexception
}
public void updatenclob int columnindex  reader reader  throws sqlexception
throw new sqlexception
}
public void updatenclob string columnlabel  reader reader  throws sqlexception
throw new sqlexception
}
public void updatenclob int columnindex  reader reader  long length  throws sqlexception
throw new sqlexception
}
public void updatenclob string columnlabel  reader reader  long length  throws sqlexception
throw new sqlexception
}
public void updatenstring int columnindex  string string  throws sqlexception
throw new sqlexception
}
public void updatenstring string columnlabel  string string  throws sqlexception
throw new sqlexception
}
public void updatenull int columnindex  throws sqlexception
throw new sqlexception
}
public void updatenull string columnname  throws sqlexception
throw new sqlexception
}
public void updateobject int columnindex  object x  throws sqlexception
throw new sqlexception
}
public void updateobject string columnname  object x  throws sqlexception
throw new sqlexception
}
public void updateobject int columnindex  object x  int scale  throws sqlexception
throw new sqlexception
}
public void updateobject string columnname  object x  int scale  throws sqlexception
throw new sqlexception
}
public void updateref int columnindex  ref x  throws sqlexception
throw new sqlexception
}
public void updateref string columnname  ref x  throws sqlexception
throw new sqlexception
}
public void updaterow   throws sqlexception
throw new sqlexception
}
public void updaterowid int columnindex  rowid x  throws sqlexception
throw new sqlexception
}
public void updaterowid string columnlabel  rowid x  throws sqlexception
throw new sqlexception
}
public void updatesqlxml int columnindex  sqlxml xmlobject  throws sqlexception
throw new sqlexception
}
public void updatesqlxml string columnlabel  sqlxml xmlobject  throws sqlexception
throw new sqlexception
}
public void updateshort int columnindex  short x  throws sqlexception
throw new sqlexception
}
public void updateshort string columnname  short x  throws sqlexception
throw new sqlexception
}
public void updatestring int columnindex  string x  throws sqlexception
throw new sqlexception
}
public void updatestring string columnname  string x  throws sqlexception
throw new sqlexception
}
public void updatetime int columnindex  time x  throws sqlexception
throw new sqlexception
}
public void updatetime string columnname  time x  throws sqlexception
throw new sqlexception
}
public void updatetimestamp int columnindex  timestamp x  throws sqlexception
throw new sqlexception
}
public void updatetimestamp string columnname  timestamp x  throws sqlexception
throw new sqlexception
}
public sqlwarning getwarnings   throws sqlexception
return warningchain
}
public void clearwarnings   throws sqlexception
warningchain   null
}
public void close   throws sqlexception
throw new sqlexception
}
public boolean wasnull   throws sqlexception
return wasnull
}
public boolean iswrapperfor class<?> iface  throws sqlexception
throw new sqlexception
}
public <t> t unwrap class<t> iface  throws sqlexception
throw new sqlexception
}
protected void setschema tableschema schema
this schema   schema
}
protected tableschema getschema
return schema
}
}