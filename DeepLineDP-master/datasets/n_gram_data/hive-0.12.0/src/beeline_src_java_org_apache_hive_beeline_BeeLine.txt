/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
/*
* this source file is based on code taken from sqlline 1.0.2
* see sqlline notice in license
*/
package org apache hive beeline
import java io bytearrayinputstream
import java io bytearrayoutputstream
import java io eofexception
import java io file
import java io fileinputstream
import java io filewriter
import java io ioexception
import java io inputstream
import java io printstream
import java io printwriter
import java lang reflect invocationtargetexception
import java lang reflect method
import java lang reflect modifier
import java net jarurlconnection
import java net url
import java net urlconnection
import java sql connection
import java sql databasemetadata
import java sql driver
import java sql drivermanager
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import java sql statement
import java text choiceformat
import java text messageformat
import java util arrays
import java util collection
import java util collections
import java util date
import java util enumeration
import java util hashmap
import java util hashset
import java util iterator
import java util linkedlist
import java util list
import java util map
import java util resourcebundle
import java util set
import java util sortedset
import java util stringtokenizer
import java util treemap
import java util treeset
import java util jar attributes
import java util jar manifest
import java util zip zipentry
import java util zip zipfile
import jline classnamecompletor
import jline completor
import jline consolereader
import jline filenamecompletor
import jline simplecompletor
/**
* a console sql shell with command completion.
* <p>
* todo:
* <ul>
* <li>user-friendly connection prompts</li>
* <li>page results</li>
* <li>handle binary data (blob fields)</li>
* <li>implement command aliases</li>
* <li>stored procedure execution</li>
* <li>binding parameters to prepared statements</li>
* <li>scripting language</li>
* <li>xa transactions</li>
* </ul>
*
*/
public class beeline
private static final resourcebundle resourcebundle
resourcebundle getbundle beeline class getname
private beelinesignalhandler signalhandler   null
private static final string separator   system getproperty
private boolean exit   false
private final databaseconnections connections   new databaseconnections
public static final string command_prefix
private final completor beelinecommandcompletor
private collection<driver> drivers   null
private final beelineopts opts   new beelineopts this  system getproperties
private string lastprogress   null
private final map<sqlwarning  date> seenwarnings   new hashmap<sqlwarning  date>
private final commands commands   new commands this
private outputfile scriptoutputfile   null
private outputfile recordoutputfile   null
private printstream outputstream   new printstream system out  true
private printstream errorstream   new printstream system err  true
private consolereader consolereader
private list<string> batch   null
private final reflector reflector
public static final string beeline_default_jdbc_driver
public static final string beeline_default_jdbc_url
private static final string script_output_prefix
private static final int script_output_pad_size   5
private static final int errno_ok   0
private static final int errno_args   1
private static final int errno_other   2
private final map<object  object> formats   map new object
new verticaloutputformat this
new tableoutputformat this
new separatedvaluesoutputformat this
new separatedvaluesoutputformat this
new xmlattributeoutputformat this
new xmlelementoutputformat this
final commandhandler commandhandlers   new commandhandler
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new simplecompletor getconnectionurlexamples
new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new tablenamecompletor this
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor
new simplecompletor getmetadatamethodnames
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new filenamecompletor
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new filenamecompletor
new reflectivecommandhandler this  new string
new completor  new filenamecompletor
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new simplecompletor getisolationlevels
new reflectivecommandhandler this  new string
new completor  new simplecompletor
formats keyset   toarray new string
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
new completor  new filenamecompletor
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string
getopts   optioncompletors
new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

new reflectivecommandhandler this  new string

static final sortedset<string> known_drivers   new treeset<string> arrays aslist
new string
static
try {
class forname
} catch (throwable t) {
throw new exceptionininitializererror
}
}
static manifest getmanifest   throws ioexception
url base   beeline class getresource
urlconnection c   base openconnection
if  c instanceof jarurlconnection
return   jarurlconnection  c  getmanifest
}
return null
}
string getmanifestattribute string name
try {
manifest m   getmanifest
if  m    null
return
}
attributes attrs   m getattributes
if  attrs    null
return
}
string val   attrs getvalue name
if  val    null      equals val
return
}
return val
catch  exception e
e printstacktrace errorstream
return
}
}
string getapplicationtitle
package pack   beeline class getpackage
return loc    new object
pack getimplementationversion      null ?
pack getimplementationversion
// getmanifestattribute ("specification-title"),
// getmanifestattribute ("implementation-version"),
// getmanifestattribute ("implementation-releasedate"),
// getmanifestattribute ("implementation-vendor"),
// getmanifestattribute ("implementation-license"),
}
string getapplicationcontactinformation
return getmanifestattribute
}
string loc string res
return loc res  new object
}
string loc string res  int param
try {
return messageformat format
new choiceformat resourcebundle getstring res   format param
new object  new integer param
catch  exception e
return res       param
}
}
string loc string res  object param1
return loc res  new object  param1
}
string loc string res  object param1  object param2
return loc res  new object  param1  param2
}
string loc string res  object params
try {
return messageformat format resourcebundle getstring res   params
catch  exception e
e printstacktrace geterrorstream
try {
return res       arrays aslist params
catch  exception e2
return res
}
}
}
protected string locelapsedtime long milliseconds
if  getopts   getshowelapsedtime
return loc    new object  new double milliseconds   1000d
}
return
}
/**
* starts the program.
*/
public static void main string args  throws ioexception
mainwithinputredirection args  null
}
/**
* starts the program with redirected input. for redirected output,
* setoutputstream() and seterrorstream can be used.
* exits with 0 on success, 1 on invalid arguments, and 2 on any other error
*
* @param args
*          same as main()
*
* @param inputstream
*          redirected input, or null to use standard input
*/
public static void mainwithinputredirection string args  inputstream inputstream
throws ioexception
beeline beeline   new beeline
int status   beeline begin args  inputstream
if   boolean getboolean beelineopts property_name_exit
system exit status
}
}
public beeline
beelinecommandcompletor   new beelinecommandcompletor this
reflector   new reflector this
// attempt to dynamically load signal handler
/* todo disable signal handler
try {
class<?> handlerclass =
class.forname("org.apache.hive.beeline.sunsignalhandler");
signalhandler = (beelinesignalhandler)
handlerclass.newinstance();
} catch (throwable t) {
// ignore and leave cancel functionality disabled
}
*/
}
databaseconnection getdatabaseconnection
return getdatabaseconnections   current
}
connection getconnection   throws sqlexception
if  getdatabaseconnections   current      null
throw new illegalargumentexception loc
}
if  getdatabaseconnections   current   getconnection      null
throw new illegalargumentexception loc
}
return getdatabaseconnections   current   getconnection
}
databasemetadata getdatabasemetadata
if  getdatabaseconnections   current      null
throw new illegalargumentexception loc
}
if  getdatabaseconnections   current   getdatabasemetadata      null
throw new illegalargumentexception loc
}
return getdatabaseconnections   current   getdatabasemetadata
}
public string getisolationlevels
return new string
}
public string getmetadatamethodnames
try {
treeset<string> mnames   new treeset<string>
method m   databasemetadata class getdeclaredmethods
for  int i   0  m    null    i < m length  i
mnames add m getname
}
return mnames toarray new string
} catch (throwable t) {
return new string
}
}
public string getconnectionurlexamples
return new string
}
/**
* entry point to creating a {@link colorbuffer} with color
* enabled or disabled depending on the value of {@link beelineopts#getcolor}.
*/
colorbuffer getcolorbuffer
return new colorbuffer getopts   getcolor
}
/**
* entry point to creating a {@link colorbuffer} with color
* enabled or disabled depending on the value of {@link beelineopts#getcolor}.
*/
colorbuffer getcolorbuffer string msg
return new colorbuffer msg  getopts   getcolor
}
boolean initargs string args
list<string> commands   new linkedlist<string>
list<string> files   new linkedlist<string>
string driver   null  user   null  pass   null  url   null  cmd   null
for  int i   0  i < args length  i
if  args equals       args equals
usage
return false
}
// -- arguments are treated as properties
if  args startswith
string parts   split args substring 2
debug loc    arrays aslist parts
if  parts length > 0
boolean ret
if  parts length >  2
ret   getopts   set parts  parts  true
else
ret   getopts   set parts     true
}
if   ret
return false
}
}
continue
}
if  args equals
driver   args
else if  args equals
user   args
else if  args equals
pass   args
else if  args equals
url   args
else if  args equals
commands add args
else if  args equals
getopts   setscriptfile args
else
files add args
}
}
// todo: temporary disable this for easier debugging
/*
if (url == null) {
url = beeline_default_jdbc_url;
}
if (driver == null) {
driver = beeline_default_jdbc_driver;
}
*/
if  url    null
string com
url
user    null    user length      0 ?     user
pass    null    pass length      0 ?     pass
driver    null ?     driver
debug     com
dispatch com
}
// now load properties files
for  iterator<string> i   files iterator    i hasnext
dispatch     i next
}
if  commands size   > 0
// for single command execute, disable color
getopts   setcolor false
getopts   setheaderinterval  1
for  iterator<string> i   commands iterator    i hasnext
string command   i next   tostring
debug loc    command
dispatch command
}
exit   true     execute and exit
}
return true
}
/**
* start accepting input from stdin, and dispatch it
* to the appropriate {@link commandhandler} until the
* global variable <code>exit</code> is true.
*/
public int begin string args  inputstream inputstream  throws ioexception
int status   errno_ok
try {
// load the options first, so we can override on the command line
getopts   load
catch  exception e
// nothing
}
if    initargs args
usage
return errno_args
}
consolereader reader   null
boolean runningscript    getopts   getscriptfile      null
if  runningscript
try {
fileinputstream scriptstream   new fileinputstream getopts   getscriptfile
reader   getconsolereader scriptstream
} catch (throwable t) {
handleexception t
commands quit null
status   errno_other
}
else
reader   getconsolereader inputstream
}
try {
info getapplicationtitle
catch  exception e
// ignore
}
while   exit
try {
// execute one instruction; terminate on executing a script if there is an error
if   dispatch reader readline getprompt        runningscript
commands quit null
status   errno_other
}
catch  eofexception eof
// ctrl-d
commands quit null
} catch (throwable t) {
handleexception t
status   errno_other
}
}
// ### note jvs 10-aug-2004: clean up any outstanding
// connections automatically.
commands closeall null
return status
}
public void close
commands quit null
commands closeall null
}
public consolereader getconsolereader inputstream inputstream  throws ioexception
if  inputstream    null
// ### note: fix for sf.net bug 879425.
consolereader   new consolereader inputstream  new printwriter getoutputstream    true
else
consolereader   new consolereader
}
// setup history
bytearrayinputstream historybuffer   null
if  new file getopts   gethistoryfile    isfile
try {
// save the current contents of the history buffer. this gets
// around a bug in jline where setting the output before the
// input will clobber the history input, but setting the
// input before the output will cause the previous commands
// to not be saved to the buffer.
fileinputstream historyin   new fileinputstream getopts   gethistoryfile
bytearrayoutputstream hist   new bytearrayoutputstream
int n
while   n   historyin read        1
hist write n
}
historyin close
historybuffer   new bytearrayinputstream hist tobytearray
catch  exception e
handleexception e
}
}
try {
// now set the output for the history
printwriter historyout   new printwriter new filewriter getopts   gethistoryfile     true
consolereader gethistory   setoutput historyout
catch  exception e
handleexception e
}
try {
// now load in the previous history
if  historybuffer    null
consolereader gethistory   load historybuffer
}
catch  exception e
handleexception e
}
consolereader addcompletor new beelinecompletor this
return consolereader
}
void usage
output loc
}
/**
* dispatch the specified line to the appropriate {@link commandhandler}.
*
* @param line
*          the commmand-line to dispatch
* @return true if the command was "successful"
*/
boolean dispatch string line
if  line    null
// exit
exit   true
return true
}
if  line trim   length      0
return true
}
if  iscomment line
return true
}
line   line trim
// save it to the current script, if any
if  scriptoutputfile    null
scriptoutputfile addline line
}
if  ishelprequest line
line
}
if  line startswith command_prefix
map<string  commandhandler> cmdmap   new treemap<string  commandhandler>
line   line substring 1
for  int i   0  i < commandhandlers length  i
string match   commandhandlers matches line
if  match    null
cmdmap put match  commandhandlers
}
}
if  cmdmap size      0
return error loc    line
else if  cmdmap size   > 1
return error loc
cmdmap keyset   tostring
else
return cmdmap values   iterator   next
execute line
}
else
return commands sql line
}
}
/**
* test whether a line requires a continuation.
*
* @param line
*          the line to be tested
*
* @return true if continuation required
*/
boolean needscontinuation string line
if  ishelprequest line
return false
}
if  line startswith command_prefix
return false
}
if  iscomment line
return false
}
string trimmed   line trim
if  trimmed length      0
return false
}
if   getopts   isallowmultilinecommand
return false
}
return  trimmed endswith
}
/**
* test whether a line is a help request other than !help.
*
* @param line
*          the line to be tested
*
* @return true if a help request
*/
boolean ishelprequest string line
return line equals       line equalsignorecase
}
/**
* test whether a line is a comment.
*
* @param line
*          the line to be tested
*
* @return true if a comment
*/
boolean iscomment string line
// sql92 comment prefix is "--"
// beeline also supports shell-style "#" prefix
return line startswith       line startswith
}
/**
* print the specified message to the console
*
* @param msg
*          the message to print
*/
void output string msg
output msg  true
}
void info string msg
if    getopts   issilent
output msg  true  geterrorstream
}
}
void info colorbuffer msg
if    getopts   issilent
output msg  true  geterrorstream
}
}
/**
* issue the specified error message
*
* @param msg
*          the message to issue
* @return false always
*/
boolean error string msg
output getcolorbuffer   red msg   true  geterrorstream
return false
}
boolean error throwable t
handleexception t
return false
}
void debug string msg
if  getopts   getverbose
output getcolorbuffer   blue msg   true  geterrorstream
}
}
void output colorbuffer msg
output msg  true
}
void output string msg  boolean newline  printstream out
output getcolorbuffer msg   newline  out
}
void output colorbuffer msg  boolean newline
output msg  newline  getoutputstream
}
void output colorbuffer msg  boolean newline  printstream out
if  newline
out println msg getcolor
else
out print msg getcolor
}
if  recordoutputfile    null
return
}
// only write to the record file if we are writing a line ...
// otherwise we might get garbage from backspaces and such.
if  newline
recordoutputfile addline msg getmono        always just write mono
else
recordoutputfile print msg getmono
}
}
/**
* print the specified message to the console
*
* @param msg
*          the message to print
* @param newline
*          if false, do not append a newline
*/
void output string msg  boolean newline
output getcolorbuffer msg   newline
}
void autocommitstatus connection c  throws sqlexception
info loc    c getautocommit
}
/**
* ensure that autocommit is on for the current connection
*
* @return true if autocommit is set
*/
boolean assertautocommit
if    assertconnection
return false
}
try {
if  getdatabaseconnection   getconnection   getautocommit
return error loc
}
catch  exception e
return error e
}
return true
}
/**
* assert that we have an active, living connection. print
* an error message if we do not.
*
* @return true if there is a current, active connection
*/
boolean assertconnection
try {
if  getdatabaseconnection      null    getdatabaseconnection   getconnection      null
return error loc
}
if  getdatabaseconnection   getconnection   isclosed
return error loc
}
catch  sqlexception sqle
return error loc
}
return true
}
/**
* print out any warnings that exist for the current connection.
*/
void showwarnings
try {
if  getdatabaseconnection   getconnection      null
getopts   getverbose
return
}
showwarnings getdatabaseconnection   getconnection   getwarnings
catch  exception e
handleexception e
}
}
/**
* print the specified warning on the console, as well as
* any warnings that are returned from {@link sqlwarning#getnextwarning}.
*
* @param warn
*          the {@link sqlwarning} to print
*/
void showwarnings sqlwarning warn
if  warn    null
return
}
if  seenwarnings get warn     null
// don't re-display warnings we have already seen
seenwarnings put warn  new java util date
handlesqlexception warn
}
sqlwarning next   warn getnextwarning
if  next    warn
showwarnings next
}
}
string getprompt
if  getdatabaseconnection      null    getdatabaseconnection   geturl      null
return
else
return getprompt getdatabaseconnections   getindex
getdatabaseconnection   geturl
}
}
static string getprompt string url
if  url    null    url length      0
url
}
if  url indexof    >  1
url   url substring 0  url indexof
}
if  url indexof    >  1
url   url substring 0  url indexof
}
if  url length   > 45
url   url substring 0  45
}
return url
}
/**
* try to obtain the current size of the specified {@link resultset} by jumping to the last row
* and getting the row number.
*
* @param rs
*          the {@link resultset} to get the size for
* @return the size, or -1 if it could not be obtained
*/
int getsize resultset rs
try {
if  rs gettype      rs type_forward_only
return  1
}
rs last
int total   rs getrow
rs beforefirst
return total
catch  sqlexception sqle
return  1
}
// jdbc 1 driver error
catch  abstractmethoderror ame
return  1
}
}
resultset getcolumns string table  throws sqlexception
if    assertconnection
return null
}
return getdatabaseconnection   getdatabasemetadata   getcolumns
getdatabaseconnection   getdatabasemetadata   getconnection   getcatalog    null  table
}
resultset gettables   throws sqlexception
if    assertconnection
return null
}
return getdatabaseconnection   getdatabasemetadata   gettables
getdatabaseconnection   getdatabasemetadata   getconnection   getcatalog    null
new string
}
string getcolumnnames databasemetadata meta  throws sqlexception
set<string> names   new hashset<string>
info loc
try {
resultset columns   getcolumns
try {
int total   getsize columns
int index   0
while  columns next
// add the following strings:
// 1. column name
// 2. table name
// 3. tablename.columnname
progress index    total
string name   columns getstring
names add name
names add columns getstring
names add columns getstring
columns getstring
}
progress index  index
finally
columns close
}
info loc
return names toarray new string
} catch (throwable t) {
handleexception t
return new string
}
}
// //////////////////
// string utilities
// //////////////////
/**
* split the line into an array by tokenizing on space characters
*
* @param line
*          the line to break up
* @return an array of individual words
*/
string split string line
return split line
}
string dequote string str
if  str    null
return null
}
while   str startswith       str endswith
str startswith
str   str substring 1  str length     1
}
return str
}
string split string line  string delim
stringtokenizer tok   new stringtokenizer line  delim
string ret   new string
int index   0
while  tok hasmoretokens
string t   tok nexttoken
t   dequote t
ret   t
}
return ret
}
static map<object  object> map object obs
map<object  object> m   new hashmap<object  object>
for  int i   0  i < obs length   1  i    2
m put obs  obs
}
return collections unmodifiablemap m
}
static boolean getmoreresults statement stmnt
try {
return stmnt getmoreresults
} catch (throwable t) {
return false
}
}
static string xmlattrencode string str
str   replace str     quot "
str   replace str
return str
}
static string replace string source  string from  string to
if  source    null
return null
}
if  from equals to
return source
}
stringbuilder replaced   new stringbuilder
int index    1
while   index   source indexof from       1
replaced append source substring 0  index
replaced append to
source   source substring index   from length
}
replaced append source
return replaced tostring
}
/**
* split the line based on spaces, asserting that the
* number of words is correct.
*
* @param line
*          the line to split
* @param assertlen
*          the number of words to assure
* @param usage
*          the message to output if there are an incorrect
*          number of words.
* @return the split lines, or null if the assertion failed.
*/
string split string line  int assertlen  string usage
string ret   split line
if  ret length    assertlen
error usage
return null
}
return ret
}
/**
* wrap the specified string by breaking on space characters.
*
* @param towrap
*          the string to wrap
* @param len
*          the maximum length of any line
* @param start
*          the number of spaces to pad at the
*          beginning of a line
* @return the wrapped string
*/
string wrap string towrap  int len  int start
stringbuilder buff   new stringbuilder
stringbuilder line   new stringbuilder
char head   new char
arrays fill head
for  stringtokenizer tok   new stringtokenizer towrap      tok hasmoretokens
string next   tok nexttoken
if  line length     next length   > len
buff append line  append separator  append head
line setlength 0
}
line append line length      0 ?        append next
}
buff append line
return buff tostring
}
/**
* output a progress indicator to the console.
*
* @param cur
*          the current progress
* @param max
*          the maximum progress, or -1 if unknown
*/
void progress int cur  int max
stringbuilder out   new stringbuilder
if  lastprogress    null
char back   new char
arrays fill back
out append back
}
string progress   cur
max     1 ?         max
max     1 ?
cur   100    max    0 ? 1   max
if  cur >  max    max     1
progress        loc      separator
lastprogress   null
else
lastprogress   progress
}
out append progress
outputstream print out tostring
outputstream flush
}
// /////////////////////////////
// exception handling routines
// /////////////////////////////
void handleexception throwable e
while  e instanceof invocationtargetexception
e     invocationtargetexception  e  gettargetexception
}
if  e instanceof sqlexception
handlesqlexception  sqlexception  e
else if    getopts   getverbose
if  e getmessage      null
error e getclass   getname
else
error e getmessage
}
else
e printstacktrace geterrorstream
}
}
void handlesqlexception sqlexception e
if  e instanceof sqlwarning      getopts   getshowwarnings
return
}
error loc e instanceof sqlwarning ?
new object
e getmessage      null ?     e getmessage   trim
e getsqlstate      null ?     e getsqlstate   trim
new integer e geterrorcode
if  getopts   getverbose
e printstacktrace geterrorstream
}
if   getopts   getshownestederrs
return
}
for  sqlexception nested   e getnextexception    nested    null    nested    e  nested   nested
getnextexception
handlesqlexception nested
}
}
boolean scanfordriver string url
try {
// already registered
if  findregistereddriver url     null
return true
}
// first try known drivers...
scandrivers true
if  findregistereddriver url     null
return true
}
// now really scan...
scandrivers false
if  findregistereddriver url     null
return true
}
return false
catch  exception e
debug e tostring
return false
}
}
private driver findregistereddriver string url
for  enumeration drivers   drivermanager getdrivers    drivers    null
drivers hasmoreelements
driver driver    driver  drivers nextelement
try {
if  driver acceptsurl url
return driver
}
catch  exception e
}
}
return null
}
driver scandrivers string line  throws ioexception
return scandrivers false
}
driver scandrivers boolean knownonly  throws ioexception
long start   system currenttimemillis
set<string> classnames   new hashset<string>
if   knownonly
classnames addall arrays aslist
classnamecompletor getclassnames
}
classnames addall known_drivers
set driverclasses   new hashset
for  iterator<string> i   classnames iterator    i hasnext
string classname   i next   tostring
if  classname tolowercase   indexof        1
continue
}
try {
class c   class forname classname  false
thread currentthread   getcontextclassloader
if   driver class isassignablefrom c
continue
}
if  modifier isabstract c getmodifiers
continue
}
// now instantiate and initialize it
driverclasses add c newinstance
} catch (throwable t) {
}
}
info
system currenttimemillis     start
return  driver  driverclasses toarray new driver
}
private driver scandriversold string line
long start   system currenttimemillis
set<string> paths   new hashset<string>
set driverclasses   new hashset
for  stringtokenizer tok   new stringtokenizer
system getproperty
system getproperty      tok hasmoretokens
file files   new file tok nexttoken    listfiles
for  int i   0  files    null    i < files length  i
paths add files getabsolutepath
}
}
for  stringtokenizer tok   new stringtokenizer
system getproperty
system getproperty      tok hasmoretokens
paths add new file tok nexttoken    getabsolutepath
}
for  iterator<string> i   paths iterator    i hasnext
file f   new file i next
output getcolorbuffer   pad loc    f getabsolutepath     60
false
try {
zipfile zf   new zipfile f
int total   zf size
int index   0
for  enumeration zfenum   zf entries    zfenum hasmoreelements
zipentry entry    zipentry  zfenum nextelement
string name   entry getname
progress index    total
if  name endswith
name   name replace
name   name substring 0  name length     6
try {
// check for the string "driver" in the class
// to see if we should load it. not perfect, but
// it is far too slow otherwise.
if  name tolowercase   indexof        1
class c   class forname name  false
getclass   getclassloader
if  driver class isassignablefrom c
modifier isabstract
c getmodifiers
try {
// load and initialize
class forname name
catch  exception e
}
driverclasses add c newinstance
}
}
} catch (throwable t) {
}
}
}
progress total  total
catch  exception e
}
}
info
system currenttimemillis     start
return  driver  driverclasses toarray new driver
}
// /////////////////////////////////////
// resultset output formatting classes
// /////////////////////////////////////
int print resultset rs  throws sqlexception
string format   getopts   getoutputformat
outputformat f    outputformat  formats get format
if  f    null
error loc    new object
format  formats keyset
f   new tableoutputformat this
}
rows rows
if  getopts   getincremental
rows   new incrementalrows this  rs
else
rows   new bufferedrows this  rs
}
return f print rows
}
statement createstatement   throws sqlexception
statement stmnt   getdatabaseconnection   getconnection   createstatement
if  getopts   timeout >  1
stmnt setquerytimeout getopts   timeout
}
if  signalhandler    null
signalhandler setstatement stmnt
}
return stmnt
}
void runbatch list<string> statements
try {
statement stmnt   createstatement
try {
for  iterator<string> i   statements iterator    i hasnext
stmnt addbatch i next   tostring
}
int counts   stmnt executebatch
output getcolorbuffer   pad getcolorbuffer   bold     8
append getcolorbuffer   bold
for  int i   0  counts    null    i < counts length  i
output getcolorbuffer   pad counts      8
append statements get i  tostring
}
finally
try {
stmnt close
catch  exception e
}
}
catch  exception e
handleexception e
}
}
public int runcommands string cmds
return runcommands arrays aslist cmds
}
public int runcommands list<string> cmds
int successcount   0
try {
// todo: make script output prefixing configurable. had to disable this since
// it results in lots of test diffs.
for  string cmd   cmds
info getcolorbuffer   pad script_output_prefix  script_output_pad_size  append cmd
// if we do not force script execution, abort
// when a failure occurs.
if  dispatch cmd     getopts   getforce
successcount
else
error loc    cmd
return successcount
}
}
catch  exception e
handleexception e
}
return successcount
}
// ////////////////////////
// command methods follow
// ////////////////////////
void setcompletions   throws sqlexception  ioexception
if  getdatabaseconnection      null
getdatabaseconnection   setcompletions getopts   getfastconnect
}
}
public beelineopts getopts
return opts
}
databaseconnections getdatabaseconnections
return connections
}
completor getcommandcompletor
return beelinecommandcompletor
}
public boolean isexit
return exit
}
public void setexit boolean exit
this exit   exit
}
collection<driver> getdrivers
return drivers
}
void setdrivers collection<driver> drivers
this drivers   drivers
}
public static string getseparator
return separator
}
commands getcommands
return commands
}
outputfile getscriptoutputfile
return scriptoutputfile
}
void setscriptoutputfile outputfile script
this scriptoutputfile   script
}
outputfile getrecordoutputfile
return recordoutputfile
}
void setrecordoutputfile outputfile record
this recordoutputfile   record
}
public void setoutputstream printstream outputstream
this outputstream   new printstream outputstream  true
}
printstream getoutputstream
return outputstream
}
public void seterrorstream printstream errorstream
this errorstream   new printstream errorstream  true
}
printstream geterrorstream
return errorstream
}
consolereader getconsolereader
return consolereader
}
void setconsolereader consolereader reader
this consolereader   reader
}
list<string> getbatch
return batch
}
void setbatch list<string> batch
this batch   batch
}
protected reflector getreflector
return reflector
}
}