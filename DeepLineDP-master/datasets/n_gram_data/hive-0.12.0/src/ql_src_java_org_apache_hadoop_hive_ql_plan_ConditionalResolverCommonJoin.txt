/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java io serializable
import java util arraylist
import java util collections
import java util hashmap
import java util list
import java util map
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec task
/**
* conditionalresolverskewjoin.
*
*/
public class conditionalresolvercommonjoin implements conditionalresolver  serializable
private static final long serialversionuid   1l
/**
* conditionalresolverskewjoinctx.
*
*/
public static class conditionalresolvercommonjoinctx implements serializable
private static final long serialversionuid   1l
private hashmap<string  task<? extends serializable>> aliastotask
hashmap<string  arraylist<string>> pathtoaliases
hashmap<string  long> aliastoknownsize
private task<? extends serializable> commonjointask
private string localtmpdir
private string hdfstmpdir
public conditionalresolvercommonjoinctx
public hashmap<string  task<? extends serializable>> getaliastotask
return aliastotask
public void setaliastotask hashmap<string  task<? extends serializable>> aliastotask
this aliastotask   aliastotask
public task<? extends serializable> getcommonjointask
return commonjointask
public void setcommonjointask task<? extends serializable> commonjointask
this commonjointask   commonjointask
public hashmap<string  long> getaliastoknownsize
return aliastoknownsize    null ? new hashmap<string  long>     aliastoknownsize
public void setaliastoknownsize hashmap<string  long> aliastoknownsize
this aliastoknownsize   aliastoknownsize
public hashmap<string  arraylist<string>> getpathtoaliases
return pathtoaliases
public void setpathtoaliases hashmap<string  arraylist<string>> pathtoaliases
this pathtoaliases   pathtoaliases
public string getlocaltmpdir
return localtmpdir
public void setlocaltmpdir string localtmpdir
this localtmpdir   localtmpdir
public string gethdfstmpdir
return hdfstmpdir
public void sethdfstmpdir string hdfstmpdir
this hdfstmpdir   hdfstmpdir
public conditionalresolvercommonjoin
@override
public list<task<? extends serializable>> gettasks hiveconf conf  object objctx
conditionalresolvercommonjoinctx ctx    conditionalresolvercommonjoinctx  objctx
list<task<? extends serializable>> restsks   new arraylist<task<? extends serializable>>
// get aliastopath and pass it to the heuristic
hashmap<string  arraylist<string>> pathtoaliases   ctx getpathtoaliases
hashmap<string  long> aliastoknownsize   ctx getaliastoknownsize
string bigtablealias   this resolvemapjointask pathtoaliases  ctx
getaliastotask    aliastoknownsize  ctx gethdfstmpdir    ctx
getlocaltmpdir    conf
if  bigtablealias    null
// run common join task
restsks add ctx getcommonjointask
else
// run the map join task
task<? extends serializable> task   ctx getaliastotask   get bigtablealias
//set task tag
if task gettasktag      task converted_local_mapjoin
task getbackuptask   settasktag task backup_common_join
restsks add task
return restsks
static class aliasfilesizepair implements comparable<aliasfilesizepair>
string alias
long size
aliasfilesizepair string alias  long size
super
this alias   alias
this size   size
@override
public int compareto aliasfilesizepair o
if  o    null
return 1
return  size < o size  ?  1     size > o size  ? 1   0
private string resolvemapjointask
hashmap<string  arraylist<string>> pathtoaliases
hashmap<string  task<? extends serializable>> aliastotask
hashmap<string  long> aliastoknownsize  string hdfstmpdir
string localtmpdir  hiveconf conf
string bigtablefilealias   null
long smalltablesfilesizesum   0
map<string  aliasfilesizepair> aliastofilesizemap   new hashmap<string  aliasfilesizepair>
for  map entry<string  long> entry   aliastoknownsize entryset
string alias   entry getkey
aliasfilesizepair pair   new aliasfilesizepair alias  entry getvalue
aliastofilesizemap put alias  pair
try
// need to compute the input size at runtime, and select the biggest as
// the big table.
for  map entry<string  arraylist<string>> oneentry   pathtoaliases
entryset
string p   oneentry getkey
// this path is intermediate data
if  p startswith hdfstmpdir     p startswith localtmpdir
arraylist<string> aliasarray   oneentry getvalue
if  aliasarray size   <  0
continue
path path   new path p
filesystem fs   path getfilesystem conf
long filesize   fs getcontentsummary path  getlength
for  string alias   aliasarray
aliasfilesizepair pair   aliastofilesizemap get alias
if  pair    null
pair   new aliasfilesizepair alias  0
aliastofilesizemap put alias  pair
pair size    filesize
// generate file size to alias mapping; but not set file size as key,
// because different file may have the same file size.
list<aliasfilesizepair> aliasfilesizelist   new arraylist<aliasfilesizepair>
aliastofilesizemap values
collections sort aliasfilesizelist
// iterating through this list from the end to beginning, trying to find
// the big table for mapjoin
int idx   aliasfilesizelist size     1
boolean bigaliasfound   false
while  idx >  0
aliasfilesizepair pair   aliasfilesizelist get idx
string alias   pair alias
long size   pair size
idx
if   bigaliasfound    aliastotask get alias     null
// got the big table
bigaliasfound   true
bigtablefilealias   alias
continue
smalltablesfilesizesum    size
// compare with threshold
long threshold   hiveconf getlongvar conf  hiveconf confvars hivesmalltablesfilesize
if  smalltablesfilesizesum <  threshold
return bigtablefilealias
else
return null
catch  exception e
e printstacktrace
return null