/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql session
import static org apache hadoop hive metastore metastoreutils default_database_name
import java io file
import java io ioexception
import java io inputstream
import java io printstream
import java net uri
import java text simpledateformat
import java util arraylist
import java util hashmap
import java util hashset
import java util list
import java util map
import java util set
import java util uuid
import org apache commons io fileutils
import org apache commons lang stringutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive conf hiveconf confvars
import org apache hadoop hive ql mapredstats
import org apache hadoop hive ql exec utilities
import org apache hadoop hive ql history hivehistory
import org apache hadoop hive ql history hivehistoryimpl
import org apache hadoop hive ql history hivehistoryproxyhandler
import org apache hadoop hive ql log perflogger
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata hiveutils
import org apache hadoop hive ql plan hiveoperation
import org apache hadoop hive ql security hiveauthenticationprovider
import org apache hadoop hive ql security authorization hiveauthorizationprovider
import org apache hadoop hive ql util dostounix
import org apache hadoop util reflectionutils
/**
* sessionstate encapsulates common data associated with a session.
*
* also provides support for a thread static session object that can be accessed
* from any point in the code to interact with the user and to retrieve
* configuration information
*/
public class sessionstate
private static final log log   logfactory getlog sessionstate class
/**
* current configuration.
*/
protected hiveconf conf
/**
* silent mode.
*/
protected boolean issilent
/**
* verbose mode
*/
protected boolean isverbose
/*
* hivehistory object
*/
protected hivehistory hivehist
/**
* streams to read/write from.
*/
public inputstream in
public printstream out
public printstream info
public printstream err
/**
* standard output from any child process(es).
*/
public printstream childout
/**
* error output from any child process(es).
*/
public printstream childerr
/**
* temporary file name used to store results of non-hive commands (e.g., set, dfs)
* and hiveserver.fetch*() function will read results from this file
*/
protected file tmpoutputfile
/**
* type of the command.
*/
private hiveoperation commandtype
private hiveauthorizationprovider authorizer
private hiveauthenticationprovider authenticator
private createtableautomaticgrant createtablegrants
private list<mapredstats> lastmapredstatslist
private map<string  string> hivevariables
// a mapping from a hadoop job id to the stack traces collected from the map reduce task logs
private map<string  list<list<string>>> stacktraces
// this mapping collects all the configuration variables which have been set by the user
// explicitely, either via set in the cli, the hiveconf option, or a system property.
// it is a mapping from the variable name to its value.  note that if a user repeatedly
// changes the value of a variable, the corresponding change will be made in this mapping.
private map<string  string> overriddenconfigurations
private map<string  list<string>> localmaprederrors
private string currentdatabase
/**
* lineage state.
*/
lineagestate ls
private perflogger perflogger
/**
* get the lineage state stored in this session.
*
* @return lineagestate
*/
public lineagestate getlineagestate
return ls
public hiveconf getconf
return conf
public void setconf hiveconf conf
this conf   conf
public file gettmpoutputfile
return tmpoutputfile
public void settmpoutputfile file f
tmpoutputfile   f
public boolean getissilent
if conf    null
return conf getboolvar hiveconf confvars hivesessionsilent
else
return issilent
public void setissilent boolean issilent
if conf    null
conf setboolvar hiveconf confvars hivesessionsilent  issilent
this issilent   issilent
public boolean getisverbose
return isverbose
public void setisverbose boolean isverbose
this isverbose   isverbose
public sessionstate hiveconf conf
this conf   conf
issilent   conf getboolvar hiveconf confvars hivesessionsilent
ls   new lineagestate
overriddenconfigurations   new hashmap<string  string>
overriddenconfigurations putall hiveconf getconfsystemproperties
// if there isn't already a session name, go ahead and create it.
if  stringutils isempty conf getvar hiveconf confvars hivesessionid
conf setvar hiveconf confvars hivesessionid  makesessionid
private static final simpledateformat date_format
new simpledateformat
public void setcmd string cmdstring
conf setvar hiveconf confvars hivequerystring  cmdstring
public string getcmd
return  conf getvar hiveconf confvars hivequerystring
public string getqueryid
return  conf getvar hiveconf confvars hivequeryid
public map<string  string> gethivevariables
if  hivevariables    null
hivevariables   new hashmap<string  string>
return hivevariables
public void sethivevariables map<string  string> hivevariables
this hivevariables   hivevariables
public string getsessionid
return  conf getvar hiveconf confvars hivesessionid
/**
* singleton session object per thread.
*
**/
private static threadlocal<sessionstate> tss   new threadlocal<sessionstate>
/**
* start a new session and set it to current session.
*/
public static sessionstate start hiveconf conf
sessionstate ss   new sessionstate conf
return start ss
/**
* set current session to existing session object if a thread is running
* multiple sessions - it must call this method with the new session object
* when switching from one session to another.
* @throws hiveexception
*/
public static sessionstate start sessionstate startss
tss set startss
if startss hivehist    null
if  startss getconf   getboolvar hiveconf confvars hive_session_history_enabled
startss hivehist   new hivehistoryimpl startss
else
//hive history is disabled, create a no-op proxy
startss hivehist   hivehistoryproxyhandler getnoophivehistoryproxy
if  startss gettmpoutputfile      null
// set temp file containing results to be sent to hiveclient
try
startss settmpoutputfile createtempfile startss getconf
catch  ioexception e
throw new runtimeexception e
try
startss authenticator   hiveutils getauthenticator
startss getconf   hiveconf confvars hive_authenticator_manager
startss authorizer   hiveutils getauthorizeprovidermanager
startss getconf    hiveconf confvars hive_authorization_manager
startss authenticator
startss createtablegrants   createtableautomaticgrant create startss
getconf
catch  hiveexception e
throw new runtimeexception e
return startss
/**
* @param conf
* @return per-session temp file
* @throws ioexception
*/
private static file createtempfile hiveconf conf  throws ioexception
string lscratchdir
hiveconf getvar conf  hiveconf confvars localscratchdir
file tmpdir   new file lscratchdir
string sessionid   conf getvar hiveconf confvars hivesessionid
if   tmpdir exists
if   tmpdir mkdirs
//do another exists to check to handle possible race condition
// another thread might have created the dir, if that is why
// mkdirs returned false, that is fine
if  tmpdir exists
throw new runtimeexception
lscratchdir
file tmpfile   file createtempfile sessionid     tmpdir
tmpfile deleteonexit
return tmpfile
/**
* get the current session.
*/
public static sessionstate get
return tss get
/**
* get hivehitsory object which does structured logging.
*
* @return the hive history object
*/
public hivehistory gethivehistory
return hivehist
/**
* create a session id. looks like:
*   $user_$pid@$host_$date
* @return the unique string
*/
private static string makesessionid
return uuid randomuuid   tostring
/**
* this class provides helper routines to emit informational and error
* messages to the user and log4j files while obeying the current session's
* verbosity levels.
*
* never write directly to the sessionstates standard output other than to
* emit result data do use printinfo and printerror provided by loghelper to
* emit non result data strings.
*
* it is perfectly acceptable to have global static loghelper objects (for
* example - once per module) loghelper always emits info/error to current
* session as required.
*/
public static class loghelper
protected log log
protected boolean issilent
public loghelper log log
this log  false
public loghelper log log  boolean issilent
this log   log
this issilent   issilent
public printstream getoutstream
sessionstate ss   sessionstate get
return   ss    null      ss out    null   ? ss out   system out
public printstream getinfostream
sessionstate ss   sessionstate get
return   ss    null      ss info    null   ? ss info   geterrstream
public printstream geterrstream
sessionstate ss   sessionstate get
return   ss    null      ss err    null   ? ss err   system err
public printstream getchildoutstream
sessionstate ss   sessionstate get
return   ss    null      ss childout    null   ? ss childout   system out
public printstream getchilderrstream
sessionstate ss   sessionstate get
return   ss    null      ss childerr    null   ? ss childerr   system err
public boolean getissilent
sessionstate ss   sessionstate get
// use the session or the one supplied in constructor
return  ss    null  ? ss getissilent     issilent
public void printinfo string info
printinfo info  null
public void printinfo string info  string detail
if   getissilent
getinfostream   println info
log info info   stringutils defaultstring detail
public void printerror string error
printerror error  null
public void printerror string error  string detail
geterrstream   println error
log error error   stringutils defaultstring detail
private static loghelper _console
/**
* initialize or retrieve console object for sessionstate.
*/
public static loghelper getconsole
if  _console    null
log log   logfactory getlog
_console   new loghelper log
return _console
public static string validatefile set<string> curfiles  string newfile
sessionstate ss   sessionstate get
loghelper console   getconsole
configuration conf    ss    null  ? new configuration     ss getconf
try
if  utilities realfile newfile  conf     null
return newfile
else
console printerror newfile
return null
catch  ioexception e
console printerror     newfile
e getmessage
org apache hadoop util stringutils stringifyexception e
return null
public static boolean registerjar string newjar
loghelper console   getconsole
try
classloader loader   thread currentthread   getcontextclassloader
classloader newloader   utilities addtoclasspath loader  stringutils split newjar
thread currentthread   setcontextclassloader newloader
sessionstate get   getconf   setclassloader newloader
console printinfo     newjar
return true
catch  exception e
console printerror     newjar
e getmessage
org apache hadoop util stringutils stringifyexception e
return false
public static boolean unregisterjar string jarstounregister
loghelper console   getconsole
try
utilities removefromclasspath stringutils split jarstounregister
console printinfo     jarstounregister
return true
catch  exception e
console printerror     jarstounregister
e getmessage
org apache hadoop util stringutils stringifyexception e
return false
/**
* resourcehook.
*
*/
public static interface resourcehook
string prehook set<string> cur  string s
boolean posthook set<string> cur  string s
/**
* resourcetype.
*
*/
public static enum resourcetype
file new resourcehook
public string prehook set<string> cur  string s
return validatefile cur  s
public boolean posthook set<string> cur  string s
return true
jar new resourcehook
public string prehook set<string> cur  string s
string newjar   validatefile cur  s
if  newjar    null
return  registerjar newjar  ? newjar   null
else
return null
public boolean posthook set<string> cur  string s
return unregisterjar s
archive new resourcehook
public string prehook set<string> cur  string s
return validatefile cur  s
public boolean posthook set<string> cur  string s
return true
public resourcehook hook
resourcetype resourcehook hook
this hook   hook
public static resourcetype find_resource_type string s
s   s trim   touppercase
try
return resourcetype valueof s
catch  illegalargumentexception e
// try singular
if  s endswith
s   s substring 0  s length     1
else
return null
try
return resourcetype valueof s
catch  illegalargumentexception e
return null
private final hashmap<resourcetype  set<string>> resource_map
new hashmap<resourcetype  set<string>>
public string add_resource resourcetype t  string value
// by default don't convert to unix
return add_resource t  value  false
public string add_resource resourcetype t  string value  boolean converttounix
try
value   downloadresource value  converttounix
catch  exception e
getconsole   printerror e getmessage
return null
set<string> resourcemap   getresourcemap t
string fnlval   value
if  t hook    null
fnlval   t hook prehook resourcemap  value
if  fnlval    null
return fnlval
getconsole   printinfo     fnlval
resourcemap add fnlval
return fnlval
public void add_builtin_resource resourcetype t  string value
getresourcemap t  add value
private set<string> getresourcemap resourcetype t
set<string> result   resource_map get t
if  result    null
result   new hashset<string>
resource_map put t  result
return result
/**
* returns  true if it is from any external file systems except local
*/
public static boolean candownloadresource string value
// allow to download resources from any external filesystem.
// and no need to download if it already exists on local file system.
string scheme   new path value  touri   getscheme
return  scheme    null      scheme equalsignorecase
private string downloadresource string value  boolean converttounix
if  candownloadresource value
getconsole   printinfo     value
file resourcedir   new file getconf   getvar hiveconf confvars downloaded_resources_dir
string destinationname   new path value  getname
file destinationfile   new file resourcedir  destinationname
if  resourcedir exists        resourcedir isdirectory
throw new runtimeexception     resourcedir
if   resourcedir exists       resourcedir mkdirs
throw new runtimeexception     resourcedir
try
filesystem fs   filesystem get new uri value   conf
fs copytolocalfile new path value   new path destinationfile getcanonicalpath
value   destinationfile getcanonicalpath
if  converttounix    dostounix iswindowsscript destinationfile
try
dostounix convertwindowsscripttounix destinationfile
catch  exception e
throw new runtimeexception
destinationfile      e
catch  exception e
throw new runtimeexception     value  e
return value
public boolean delete_resource resourcetype t  string value
if  resource_map get t     null
return false
if  t hook    null
if   t hook posthook resource_map get t   value
return false
return  resource_map get t  remove value
public set<string> list_resource resourcetype t  list<string> filter
if  resource_map get t     null
return null
set<string> orig   resource_map get t
if  filter    null
return orig
else
set<string> fnl   new hashset<string>
for  string one   orig
if  filter contains one
fnl add one
return fnl
public void delete_resource resourcetype t
if  resource_map get t     null
for  string value   resource_map get t
delete_resource t  value
resource_map remove t
public string getcommandtype
if  commandtype    null
return null
return commandtype getoperationname
public hiveoperation gethiveoperation
return commandtype
public void setcommandtype hiveoperation commandtype
this commandtype   commandtype
public hiveauthorizationprovider getauthorizer
return authorizer
public void setauthorizer hiveauthorizationprovider authorizer
this authorizer   authorizer
public hiveauthenticationprovider getauthenticator
return authenticator
public void setauthenticator hiveauthenticationprovider authenticator
this authenticator   authenticator
public createtableautomaticgrant getcreatetablegrants
return createtablegrants
public void setcreatetablegrants createtableautomaticgrant createtablegrants
this createtablegrants   createtablegrants
public list<mapredstats> getlastmapredstatslist
return lastmapredstatslist
public void setlastmapredstatslist list<mapredstats> lastmapredstatslist
this lastmapredstatslist   lastmapredstatslist
public void setstacktraces map<string  list<list<string>>> stacktraces
this stacktraces   stacktraces
public map<string  list<list<string>>> getstacktraces
return stacktraces
public map<string  string> getoverriddenconfigurations
if  overriddenconfigurations    null
overriddenconfigurations   new hashmap<string  string>
return overriddenconfigurations
public void setoverriddenconfigurations map<string  string> overriddenconfigurations
this overriddenconfigurations   overriddenconfigurations
public map<string  list<string>> getlocalmaprederrors
return localmaprederrors
public void addlocalmaprederrors string id  list<string> localmaprederrors
if   this localmaprederrors containskey id
this localmaprederrors put id  new arraylist<string>
this localmaprederrors get id  addall localmaprederrors
public void setlocalmaprederrors map<string  list<string>> localmaprederrors
this localmaprederrors   localmaprederrors
public string getcurrentdatabase
if  currentdatabase    null
currentdatabase   default_database_name
return currentdatabase
public void setcurrentdatabase string currentdatabase
this currentdatabase   currentdatabase
public void close   throws ioexception
file resourcedir
new file getconf   getvar hiveconf confvars downloaded_resources_dir
log debug     resourcedir
try
if  resourcedir exists
fileutils deletedirectory resourcedir
catch  ioexception e
log info     resourcedir  e
/**
* @param resetperflogger
* @return  tries to return an instance of the class whose name is configured in
*          hive.exec.perf.logger, but if it can't it just returns an instance of
*          the base perflogger class
*/
public perflogger getperflogger boolean resetperflogger
if   perflogger    null     resetperflogger
try
perflogger    perflogger  reflectionutils newinstance conf getclassbyname
conf getvar confvars hive_perf_logger    conf
catch  classnotfoundexception e
log error     e getmessage
perflogger   new perflogger
return perflogger