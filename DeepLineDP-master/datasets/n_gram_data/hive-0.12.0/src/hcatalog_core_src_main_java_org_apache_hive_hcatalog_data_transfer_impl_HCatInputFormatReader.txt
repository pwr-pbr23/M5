/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing,
* software distributed under the license is distributed on an
* "as is" basis, without warranties or conditions of any
* kind, either express or implied.  see the license for the
* specific language governing permissions and limitations
* under the license.
*/
package org apache hive hcatalog data transfer impl
import java io ioexception
import java util iterator
import java util map
import org apache hadoop conf configuration
import org apache hadoop hive shims shimloader
import org apache hadoop io writablecomparable
import org apache hadoop mapreduce inputsplit
import org apache hadoop mapreduce job
import org apache hadoop mapreduce recordreader
import org apache hadoop mapreduce taskattemptcontext
import org apache hadoop mapreduce taskattemptid
import org apache hive hcatalog common errortype
import org apache hive hcatalog common hcatexception
import org apache hive hcatalog data hcatrecord
import org apache hive hcatalog data transfer hcatreader
import org apache hive hcatalog data transfer readentity
import org apache hive hcatalog data transfer readercontext
import org apache hive hcatalog data transfer state stateprovider
import org apache hive hcatalog mapreduce hcatinputformat
/**
* this reader reads via {@link hcatinputformat}
*
*/
public class hcatinputformatreader extends hcatreader
private inputsplit split
public hcatinputformatreader inputsplit split  configuration config
stateprovider sp
super config  sp
this split   split
public hcatinputformatreader readentity info  map<string  string> config
super info  config
@override
public readercontext prepareread   throws hcatexception
try
job job   new job conf
hcatinputformat hcif   hcatinputformat setinput
job  re getdbname    re gettablename    setfilter re getfilterstring
readercontext cntxt   new readercontext
cntxt setinputsplits hcif getsplits
shimloader gethadoopshims   gethcatshim   createjobcontext job getconfiguration    null
cntxt setconf job getconfiguration
return cntxt
catch  ioexception e
throw new hcatexception errortype error_not_initialized  e
catch  interruptedexception e
throw new hcatexception errortype error_not_initialized  e
@override
public iterator<hcatrecord> read   throws hcatexception
hcatinputformat inpfmt   new hcatinputformat
recordreader<writablecomparable  hcatrecord> rr
try
taskattemptcontext cntxt   shimloader gethadoopshims   gethcatshim   createtaskattemptcontext conf  new taskattemptid
rr   inpfmt createrecordreader split  cntxt
rr initialize split  cntxt
catch  ioexception e
throw new hcatexception errortype error_not_initialized  e
catch  interruptedexception e
throw new hcatexception errortype error_not_initialized  e
return new hcatrecorditr rr
private static class hcatrecorditr implements iterator<hcatrecord>
private recordreader<writablecomparable  hcatrecord> currecreader
hcatrecorditr recordreader<writablecomparable  hcatrecord> rr
currecreader   rr
@override
public boolean hasnext
try
boolean retval   currecreader nextkeyvalue
if  retval
return true
// if its false, we need to close recordreader.
currecreader close
return false
catch  ioexception e
throw new runtimeexception e
catch  interruptedexception e
throw new runtimeexception e
@override
public hcatrecord next
try
return currecreader getcurrentvalue
catch  ioexception e
throw new runtimeexception e
catch  interruptedexception e
throw new runtimeexception e
@override
public void remove
throw new unsupportedoperationexception