/**
* copyright 2010 the apache software foundation
*
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql exec
import java io ioexception
import java util arraylist
import java util arrays
import java util comparator
import java util list
import java util random
import org apache hadoop fs fsdatainputstream
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql io hivekey
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql plan fetchwork
import org apache hadoop hive serde2 objectinspector inspectableobject
import org apache hadoop io byteswritable
import org apache hadoop io ioutils
import org apache hadoop io nullwritable
import org apache hadoop io sequencefile
import org apache hadoop io writablecomparator
import org apache hadoop mapred jobconf
import org apache hadoop mapred outputcollector
public class partitionkeysampler implements outputcollector<hivekey  object>
public static final comparator<byte> c   new comparator<byte>
public final int compare byte o1  byte o2
return writablecomparator comparebytes o1  0  o1 length  o2  0  o2 length
private final list<byte> sampled   new arraylist<byte>
public void addsamplefile path inputpath  jobconf job  throws ioexception
filesystem fs   inputpath getfilesystem job
fsdatainputstream input   fs open inputpath
try
int count   input readint
for  int i   0  i < count  i
byte key   new byte
input readfully key
sampled add key
finally
ioutils closestream input
// keys from fetchsampler are collected here
public void collect hivekey key  object value  throws ioexception
sampled add arrays copyofrange key getbytes    0  key getlength
// sort and pick partition keys
// copied from org.apache.hadoop.mapred.lib.inputsampler
private byte getpartitionkeys int numreduce
if  sampled size   < numreduce   1
throw new illegalstateexception
byte sorted   sampled toarray new byte
arrays sort sorted  c
byte partitionkeys   new byte
float stepsize   sorted length    float  numreduce
int last    1
for int i   1  i < numreduce    i
int k   math round stepsize   i
while  last >  k    c compare sorted  sorted     0
k
if  k >  sorted length
throw new illegalstateexception
partitionkeys   sorted
last   k
return partitionkeys
public void writepartitionkeys path path  jobconf job  throws ioexception
byte partitionkeys   getpartitionkeys job getnumreducetasks
filesystem fs   path getfilesystem job
sequencefile writer writer   sequencefile createwriter fs  job  path
byteswritable class  nullwritable class
try
for  byte pkey   partitionkeys
byteswritable wrapper   new byteswritable pkey
writer append wrapper  nullwritable get
finally
ioutils closestream writer
// random sampling
public static fetchsampler createsampler fetchwork work  hiveconf conf  jobconf job
operator<?> operator
int samplenum   conf getintvar hiveconf confvars hivesamplingnumberfororderby
float samplepercent   conf getfloatvar hiveconf confvars hivesamplingpercentfororderby
if  samplepercent < 0 0    samplepercent > 1 0
throw new runtimeexception
fetchsampler sampler   new fetchsampler work  job  operator
sampler setsamplenum samplenum
sampler setsamplepercent samplepercent
return sampler
private static class fetchsampler extends fetchoperator
private int samplenum   1000
private float samplepercent   0 1f
private final random random   new random
private int sampled
public fetchsampler fetchwork work  jobconf job  operator<?> operator
super work  job  operator  null
public void setsamplenum int numsample
this samplenum   numsample
public void setsamplepercent float samplepercent
this samplepercent   samplepercent
@override
public boolean pushrow   throws ioexception  hiveexception
if   super pushrow
return false
if  sampled < samplenum
return true
operator flush
return false
@override
protected void pushrow inspectableobject row  throws hiveexception
if  random nextfloat   < samplepercent
sampled
super pushrow row