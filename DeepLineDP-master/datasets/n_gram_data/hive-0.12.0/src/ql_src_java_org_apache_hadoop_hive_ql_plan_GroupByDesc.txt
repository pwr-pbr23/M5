/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java util arraylist
import java util list
import org apache hadoop hive ql udf udftype
import org apache hadoop hive ql udf generic genericudafevaluator
/**
* groupbydesc.
*
*/
@explain displayname
public class groupbydesc extends abstractoperatordesc
/**
* group-by mode: complete: complete 1-phase aggregation: iterate, terminate
* partial1: partial aggregation - first phase: iterate, terminatepartial
* partial2: partial aggregation - second phase: merge, terminatepartial
* partials: for non-distinct the same as partial2, for distinct the same as
* partial1
* final: partial aggregation - final phase: merge, terminate
* hash: for non-distinct the same as partial1 but use hash-table-based aggregation
* mergepartial: final for non-distinct aggregations, complete for distinct
* aggregations.
*/
private static long serialversionuid   1l
/**
* mode.
*
*/
public static enum mode
complete  partial1  partial2  partials  final  hash  mergepartial
private mode mode
private boolean groupkeynotreductionkey
// no hash aggregations for group by
private boolean bucketgroup
private arraylist<exprnodedesc> keys
private list<integer> listgroupingsets
private boolean groupingsetspresent
private int groupingsetposition
private arraylist<org apache hadoop hive ql plan aggregationdesc> aggregators
private arraylist<java lang string> outputcolumnnames
private float groupbymemoryusage
private float memorythreshold
transient private boolean isdistinct
private boolean dontresetaggrsdistinct
public groupbydesc
public groupbydesc
final mode mode
final arraylist<java lang string> outputcolumnnames
final arraylist<exprnodedesc> keys
final arraylist<org apache hadoop hive ql plan aggregationdesc> aggregators
final boolean groupkeynotreductionkey
final float groupbymemoryusage
final float memorythreshold
final list<integer> listgroupingsets
final boolean groupingsetspresent
final int groupingsetsposition
final boolean isdistinct
this mode  outputcolumnnames  keys  aggregators  groupkeynotreductionkey
false  groupbymemoryusage  memorythreshold  listgroupingsets
groupingsetspresent  groupingsetsposition  isdistinct
public groupbydesc
final mode mode
final arraylist<java lang string> outputcolumnnames
final arraylist<exprnodedesc> keys
final arraylist<org apache hadoop hive ql plan aggregationdesc> aggregators
final boolean groupkeynotreductionkey
final boolean bucketgroup
final float groupbymemoryusage
final float memorythreshold
final list<integer> listgroupingsets
final boolean groupingsetspresent
final int groupingsetsposition
final boolean isdistinct
this mode   mode
this outputcolumnnames   outputcolumnnames
this keys   keys
this aggregators   aggregators
this groupkeynotreductionkey   groupkeynotreductionkey
this bucketgroup   bucketgroup
this groupbymemoryusage   groupbymemoryusage
this memorythreshold   memorythreshold
this listgroupingsets   listgroupingsets
this groupingsetspresent   groupingsetspresent
this groupingsetposition   groupingsetsposition
this isdistinct   isdistinct
public mode getmode
return mode
@explain displayname
public string getmodestring
switch  mode
case complete
return
case partial1
return
case partial2
return
case partials
return
case hash
return
case final
return
case mergepartial
return
return
public void setmode final mode mode
this mode   mode
@explain displayname
public arraylist<exprnodedesc> getkeys
return keys
public void setkeys final arraylist<exprnodedesc> keys
this keys   keys
@explain displayname
public arraylist<java lang string> getoutputcolumnnames
return outputcolumnnames
public void setoutputcolumnnames
arraylist<java lang string> outputcolumnnames
this outputcolumnnames   outputcolumnnames
public float getgroupbymemoryusage
return groupbymemoryusage
public void setgroupbymemoryusage float groupbymemoryusage
this groupbymemoryusage   groupbymemoryusage
public float getmemorythreshold
return memorythreshold
public void setmemorythreshold float memorythreshold
this memorythreshold   memorythreshold
@explain displayname
public arraylist<org apache hadoop hive ql plan aggregationdesc> getaggregators
return aggregators
public void setaggregators
final arraylist<org apache hadoop hive ql plan aggregationdesc> aggregators
this aggregators   aggregators
public boolean getgroupkeynotreductionkey
return groupkeynotreductionkey
public void setgroupkeynotreductionkey final boolean groupkeynotreductionkey
this groupkeynotreductionkey   groupkeynotreductionkey
@explain displayname
public boolean getbucketgroup
return bucketgroup
public void setbucketgroup boolean bucketgroup
this bucketgroup   bucketgroup
/**
* checks if this grouping is like distinct, which means that all non-distinct grouping
* columns behave like they were distinct - for example min and max operators.
*/
public boolean isdistinctlike
arraylist<aggregationdesc> aggregators   getaggregators
for  aggregationdesc ad   aggregators
if   ad getdistinct
genericudafevaluator udafeval   ad getgenericudafevaluator
udftype annot   udafeval getclass   getannotation udftype class
if  annot    null     annot distinctlike
return false
return true
// consider a query like:
// select a, b, count(distinct c) from t group by a,b with rollup;
// assume that hive.map.aggr is set to true and hive.groupby.skewindata is false,
// in which case the group by would execute as a single map-reduce job.
// for the group-by, the group by keys should be: a,b,groupingset(for rollup), c
// so, the starting position of grouping set need to be known
public list<integer> getlistgroupingsets
return listgroupingsets
public void setlistgroupingsets final list<integer> listgroupingsets
this listgroupingsets   listgroupingsets
public boolean isgroupingsetspresent
return groupingsetspresent
public void setgroupingsetspresent boolean groupingsetspresent
this groupingsetspresent   groupingsetspresent
public int getgroupingsetposition
return groupingsetposition
public void setgroupingsetposition int groupingsetposition
this groupingsetposition   groupingsetposition
public boolean isdistinct
return isdistinct
public void setdistinct boolean isdistinct
this isdistinct   isdistinct
public boolean isdontresetaggrsdistinct
return dontresetaggrsdistinct
public void setdontresetaggrsdistinct boolean dontresetaggrsdistinct
this dontresetaggrsdistinct   dontresetaggrsdistinct