/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql plan
import java util arraylist
import java util linkedhashmap
import java util list
import java util map
import java util properties
import java util stack
import org apache hadoop hive conf hiveconf
import org apache hadoop hive ql exec exprnodeevaluator
import org apache hadoop hive ql exec ptfpartition
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql parse ptftranslator leadlaginfo
import org apache hadoop hive ql parse windowingexprnodeevaluatorfactory
import org apache hadoop hive ql plan ptfdesc boundarydef
import org apache hadoop hive ql plan ptfdesc ptfexpressiondef
import org apache hadoop hive ql plan ptfdesc ptfinputdef
import org apache hadoop hive ql plan ptfdesc ptfqueryinputdef
import org apache hadoop hive ql plan ptfdesc partitionedtablefunctiondef
import org apache hadoop hive ql plan ptfdesc shapedetails
import org apache hadoop hive ql plan ptfdesc valueboundarydef
import org apache hadoop hive ql plan ptfdesc windowframedef
import org apache hadoop hive ql plan ptfdesc windowfunctiondef
import org apache hadoop hive ql plan ptfdesc windowtablefunctiondef
import org apache hadoop hive ql udf generic genericudafevaluator
import org apache hadoop hive ql udf generic genericudfleadlag
import org apache hadoop hive ql udf ptf tablefunctionevaluator
import org apache hadoop hive ql udf ptf tablefunctionresolver
import org apache hadoop hive ql udf ptf windowingtablefunction windowingtablefunctionresolver
import org apache hadoop hive serde2 serde
import org apache hadoop hive serde2 serdeexception
import org apache hadoop hive serde2 serdeutils
import org apache hadoop hive serde2 objectinspector listobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector structfield
import org apache hadoop hive serde2 objectinspector structobjectinspector
import org apache hadoop hive serde2 typeinfo structtypeinfo
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfoutils
import org apache hadoop util reflectionutils
@suppresswarnings
public class ptfdeserializer
ptfdesc ptfdesc
structobjectinspector inputoi
hiveconf hconf
leadlaginfo llinfo
public ptfdeserializer ptfdesc ptfdesc  structobjectinspector inputoi  hiveconf hconf
super
this ptfdesc   ptfdesc
ptfdesc setcfg hconf
this inputoi   inputoi
this hconf   hconf
llinfo   new leadlaginfo
ptfdesc setllinfo llinfo
public void initializeptfchain partitionedtablefunctiondef tblfndef  throws hiveexception
stack<ptfinputdef> ptfchain   new stack<ptfinputdef>
ptfinputdef currentdef   tblfndef
while  currentdef    null
ptfchain push currentdef
currentdef   currentdef getinput
while   ptfchain isempty
currentdef   ptfchain pop
if  currentdef instanceof ptfqueryinputdef
initialize  ptfqueryinputdef  currentdef  inputoi
else if  currentdef instanceof windowtablefunctiondef
initializewindowing  windowtablefunctiondef  currentdef
else
initialize  partitionedtablefunctiondef  currentdef
public void initializewindowing windowtablefunctiondef def  throws hiveexception
shapedetails inpshape   def getinput   getoutputshape
/*
* 1. setup resolve, make connections
*/
tablefunctionevaluator teval   def gettfunction
windowingtablefunctionresolver tresolver
windowingtablefunctionresolver  constructresolver def getresolverclassname
tresolver initialize ptfdesc  def  teval
/*
* 2. initialize wfns.
*/
for  windowfunctiondef wfndef   def getwindowfunctions
if  wfndef getargs      null
for  ptfexpressiondef arg   wfndef getargs
initialize arg  inpshape
if  wfndef getwindowframe      null
windowframedef wfrmdef   wfndef getwindowframe
initialize wfrmdef getstart    inpshape
initialize wfrmdef getend    inpshape
setupwdwfnevaluator wfndef
arraylist<string> aliases   new arraylist<string>
arraylist<objectinspector> fieldois   new arraylist<objectinspector>
for  windowfunctiondef wfndef   def getwindowfunctions
aliases add wfndef getalias
if  wfndef ispivotresult
fieldois add   listobjectinspector  wfndef getoi    getlistelementobjectinspector
else
fieldois add wfndef getoi
ptfdeserializer addinputcolumnstolist inpshape  aliases  fieldois
structobjectinspector wdwoutoi   objectinspectorfactory getstandardstructobjectinspector
aliases  fieldois
tresolver setwdwprocessingoutputoi wdwoutoi
initialize def getoutputshape    wdwoutoi
tresolver initializeoutputoi
protected void initialize ptfqueryinputdef def  structobjectinspector oi  throws hiveexception
shapedetails outshape   def getoutputshape
initialize outshape  oi
protected void initialize partitionedtablefunctiondef def  throws hiveexception
shapedetails inpshape   def getinput   getoutputshape
/*
* 1. initialize args
*/
if  def getargs      null
for  ptfexpressiondef arg   def getargs
initialize arg  inpshape
/*
* 2. setup resolve, make connections
*/
tablefunctionevaluator teval   def gettfunction
// tablefunctionresolver tresolver = functionregistry.gettablefunctionresolver(def.getname());
tablefunctionresolver tresolver   constructresolver def getresolverclassname
tresolver initialize ptfdesc  def  teval
/*
* 3. give evaluator chance to setup for rawinput execution; setup rawinput shape
*/
if  teval istransformsrawinput
tresolver initializerawinputoi
initialize def getrawinputshape    teval getrawinputoi
else
def setrawinputshape inpshape
inpshape   def getrawinputshape
/*
* 4. give evaluator chance to setup for output execution; setup output shape.
*/
tresolver initializeoutputoi
initialize def getoutputshape    teval getoutputoi
static void setupwdwfnevaluator windowfunctiondef def  throws hiveexception
arraylist<ptfexpressiondef> args   def getargs
arraylist<objectinspector> argois   new arraylist<objectinspector>
objectinspector funcargois   null
if  args    null
for  ptfexpressiondef arg   args
argois add arg getoi
funcargois   new objectinspector
funcargois   argois toarray funcargois
genericudafevaluator wfneval   def getwfneval
objectinspector oi   wfneval init genericudafevaluator mode complete  funcargois
def setwfneval wfneval
def setoi oi
protected void initialize boundarydef def  shapedetails inpshape  throws hiveexception
if  def instanceof valueboundarydef
valueboundarydef vdef    valueboundarydef  def
initialize vdef getexpressiondef    inpshape
protected void initialize ptfexpressiondef edef  shapedetails inpshape  throws hiveexception
exprnodedesc exprnode   edef getexprnode
exprnodeevaluator expreval   windowingexprnodeevaluatorfactory get llinfo  exprnode
objectinspector oi   initexprnodeevaluator expreval  exprnode  inpshape
edef setexprevaluator expreval
edef setoi oi
private objectinspector initexprnodeevaluator exprnodeevaluator expreval
exprnodedesc exprnode
shapedetails inpshape
throws hiveexception
objectinspector outoi
outoi   expreval initialize inpshape getoi
/*
* if there are any leadlag functions in this expression tree: - setup a
* duplicate evaluator for the 1st arg of the llfuncdesc - initialize it
* using the inputinfo provided for this expr tree - set the duplicate
* evaluator on the lludf instance.
*/
list<exprnodegenericfuncdesc> llfuncexprs   llinfo getllfuncexprsintopexpr exprnode
if  llfuncexprs    null
for  exprnodegenericfuncdesc llfuncexpr   llfuncexprs
exprnodedesc firstarg   llfuncexpr getchildren   get 0
exprnodeevaluator dupexpreval   windowingexprnodeevaluatorfactory get llinfo  firstarg
dupexpreval initialize inpshape getoi
genericudfleadlag llfn    genericudfleadlag  llfuncexpr getgenericudf
llfn setexprevaluator dupexpreval
return outoi
protected void initialize shapedetails shp  structobjectinspector oi  throws hiveexception
string serdeclassname   shp getserdeclassname
properties serdeprops   new properties
map<string  string> serdepropsmap   new linkedhashmap<string  string>
addoipropertiestoserdepropsmap oi  serdepropsmap
for  string serdename   serdepropsmap keyset
serdeprops setproperty serdename  serdepropsmap get serdename
try
serde serde    serde  serdeutils lookupdeserializer serdeclassname
serde initialize hconf  serdeprops
shp setserde serde
structobjectinspector outoi   ptfpartition setuppartitionoutputoi serde  oi
shp setoi outoi
catch  serdeexception se
throw new hiveexception se
private static void addinputcolumnstolist shapedetails shape
arraylist<string> fieldnames  arraylist<objectinspector> fieldois
structobjectinspector oi   shape getoi
for  structfield f   oi getallstructfieldrefs
fieldnames add f getfieldname
fieldois add f getfieldobjectinspector
private tablefunctionresolver constructresolver string classname  throws hiveexception
try
@suppresswarnings
class<? extends tablefunctionresolver> rcls    class<? extends tablefunctionresolver>
class forname classname
return  tablefunctionresolver  reflectionutils newinstance rcls  null
catch  exception e
throw new hiveexception e
@suppresswarnings
public static void addoipropertiestoserdepropsmap structobjectinspector oi
map<string  string> serdepropsmap
if  serdepropsmap    null
return
arraylist<? extends object> tinfo   gettypemap oi
arraylist<string> columnnames    arraylist<string>  tinfo
arraylist<typeinfo> fields    arraylist<typeinfo>  tinfo
stringbuilder cnames   new stringbuilder
stringbuilder ctypes   new stringbuilder
for  int i   0  i < fields size    i
cnames append i > 0 ?
ctypes append i > 0 ?
cnames append columnnames get i
ctypes append fields get i  gettypename
serdepropsmap put org apache hadoop hive serde serdeconstants list_columns
cnames tostring
serdepropsmap put org apache hadoop hive serde serdeconstants list_column_types
ctypes tostring
private static arraylist<? extends object> gettypemap
structobjectinspector oi
structtypeinfo t    structtypeinfo  typeinfoutils
gettypeinfofromobjectinspector oi
arraylist<string> fnames   t getallstructfieldnames
arraylist<typeinfo> fields   t getallstructfieldtypeinfos
return new arraylist<?>
fnames  fields