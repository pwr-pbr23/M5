/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hive jdbc
import java sql connection
import java sql resultset
import java sql sqlexception
import java sql sqlwarning
import java util hashmap
import java util map
import org apache hive service cli thrift tcliservice
import org apache hive service cli thrift tcanceloperationreq
import org apache hive service cli thrift tcanceloperationresp
import org apache hive service cli thrift tcloseoperationreq
import org apache hive service cli thrift tcloseoperationresp
import org apache hive service cli thrift texecutestatementreq
import org apache hive service cli thrift texecutestatementresp
import org apache hive service cli thrift tgetoperationstatusreq
import org apache hive service cli thrift tgetoperationstatusresp
import org apache hive service cli thrift toperationhandle
import org apache hive service cli thrift tsessionhandle
/**
* hivestatement.
*
*/
public class hivestatement implements java sql statement
private tcliservice iface client
private toperationhandle stmthandle   null
private final tsessionhandle sesshandle
map<string string> sessconf   new hashmap<string string>
private int fetchsize   50
/**
* we need to keep a reference to the result set to support the following:
* <code>
* statement.execute(string sql);
* statement.getresultset();
* </code>.
*/
private resultset resultset   null
/**
* sets the limit for the maximum number of rows that any resultset object produced by this
* statement can contain to the given number. if the limit is exceeded, the excess rows
* are silently dropped. the value must be >= 0, and 0 means there is not limit.
*/
private int maxrows   0
/**
* add sqlwarnings to the warningchain if needed.
*/
private sqlwarning warningchain   null
/**
* keep state so we can fail certain calls made after close().
*/
private boolean isclosed   false
/**
*
*/
public hivestatement tcliservice iface client  tsessionhandle sesshandle
this client   client
this sesshandle   sesshandle
/*
* (non-javadoc)
*
* @see java.sql.statement#addbatch(java.lang.string)
*/
public void addbatch string sql  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#cancel()
*/
public void cancel   throws sqlexception
if  isclosed
throw new sqlexception
if  stmthandle    null
return
tcanceloperationreq cancelreq   new tcanceloperationreq
cancelreq setoperationhandle stmthandle
try
tcanceloperationresp cancelresp   client canceloperation cancelreq
utils verifysuccesswithinfo cancelresp getstatus
catch  sqlexception e
throw e
catch  exception e
throw new sqlexception e tostring       e
/*
* (non-javadoc)
*
* @see java.sql.statement#clearbatch()
*/
public void clearbatch   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#clearwarnings()
*/
public void clearwarnings   throws sqlexception
warningchain   null
void closeclientoperation   throws sqlexception
try
if  stmthandle    null
tcloseoperationreq closereq   new tcloseoperationreq
closereq setoperationhandle stmthandle
tcloseoperationresp closeresp   client closeoperation closereq
utils verifysuccesswithinfo closeresp getstatus
catch  sqlexception e
throw e
catch  exception e
throw new sqlexception e tostring       e
stmthandle   null
/*
* (non-javadoc)
*
* @see java.sql.statement#close()
*/
public void close   throws sqlexception
if  isclosed
return
if  stmthandle    null
closeclientoperation
client   null
resultset   null
isclosed   true
public void closeoncompletion   throws sqlexception
// jdk 1.7
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string)
*/
public boolean execute string sql  throws sqlexception
if  isclosed
throw new sqlexception
try
if  stmthandle    null
closeclientoperation
texecutestatementreq execreq   new texecutestatementreq sesshandle  sql
execreq setconfoverlay sessconf
texecutestatementresp execresp   client executestatement execreq
utils verifysuccesswithinfo execresp getstatus
stmthandle   execresp getoperationhandle
catch  sqlexception es
throw es
catch  exception ex
throw new sqlexception ex tostring       ex
if   stmthandle ishasresultset
// poll until the query has completed one way or another. dml queries will not return a result
// set, but we should not return from this method until the query has completed to avoid
// racing with possible subsequent session shutdown, or queries that depend on the results
// materialised here.
tgetoperationstatusreq statusreq   new tgetoperationstatusreq stmthandle
boolean requestcomplete   false
while   requestcomplete
try
tgetoperationstatusresp statusresp   client getoperationstatus statusreq
utils verifysuccesswithinfo statusresp getstatus
if  statusresp issetoperationstate
switch  statusresp getoperationstate
case closed_state
case finished_state
return false
case canceled_state
// 01000 -> warning
throw new sqlexception
case error_state
// hy000 -> general error
throw new sqlexception
case uknown_state
throw new sqlexception
case initialized_state
case running_state
break
catch  exception ex
throw new sqlexception ex tostring       ex
try
thread sleep 100
catch  interruptedexception ex
// ignore
return false
resultset    new hivequeryresultset builder   setclient client  setsessionhandle sesshandle
setstmthandle stmthandle  sethivestatement this  setmaxrows maxrows  setfetchsize fetchsize
build
return true
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, int)
*/
public boolean execute string sql  int autogeneratedkeys  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, int[])
*/
public boolean execute string sql  int columnindexes  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#execute(java.lang.string, java.lang.string[])
*/
public boolean execute string sql  string columnnames  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executebatch()
*/
public int executebatch   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executequery(java.lang.string)
*/
public resultset executequery string sql  throws sqlexception
if   execute sql
throw new sqlexception
return resultset
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string)
*/
public int executeupdate string sql  throws sqlexception
execute sql
return 0
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, int)
*/
public int executeupdate string sql  int autogeneratedkeys  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, int[])
*/
public int executeupdate string sql  int columnindexes  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#executeupdate(java.lang.string, java.lang.string[])
*/
public int executeupdate string sql  string columnnames  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getconnection()
*/
public connection getconnection   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getfetchdirection()
*/
public int getfetchdirection   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getfetchsize()
*/
public int getfetchsize   throws sqlexception
return fetchsize
/*
* (non-javadoc)
*
* @see java.sql.statement#getgeneratedkeys()
*/
public resultset getgeneratedkeys   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmaxfieldsize()
*/
public int getmaxfieldsize   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmaxrows()
*/
public int getmaxrows   throws sqlexception
return maxrows
/*
* (non-javadoc)
*
* @see java.sql.statement#getmoreresults()
*/
public boolean getmoreresults   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getmoreresults(int)
*/
public boolean getmoreresults int current  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getquerytimeout()
*/
public int getquerytimeout   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultset()
*/
public resultset getresultset   throws sqlexception
return resultset
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsetconcurrency()
*/
public int getresultsetconcurrency   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsetholdability()
*/
public int getresultsetholdability   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getresultsettype()
*/
public int getresultsettype   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#getupdatecount()
*/
public int getupdatecount   throws sqlexception
return 0
/*
* (non-javadoc)
*
* @see java.sql.statement#getwarnings()
*/
public sqlwarning getwarnings   throws sqlexception
return warningchain
/*
* (non-javadoc)
*
* @see java.sql.statement#isclosed()
*/
public boolean isclosed   throws sqlexception
return isclosed
public boolean iscloseoncompletion   throws sqlexception
// jdk 1.7
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#ispoolable()
*/
public boolean ispoolable   throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setcursorname(java.lang.string)
*/
public void setcursorname string name  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setescapeprocessing(boolean)
*/
public void setescapeprocessing boolean enable  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setfetchdirection(int)
*/
public void setfetchdirection int direction  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setfetchsize(int)
*/
public void setfetchsize int rows  throws sqlexception
fetchsize   rows
/*
* (non-javadoc)
*
* @see java.sql.statement#setmaxfieldsize(int)
*/
public void setmaxfieldsize int max  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setmaxrows(int)
*/
public void setmaxrows int max  throws sqlexception
if  max < 0
throw new sqlexception
maxrows   max
/*
* (non-javadoc)
*
* @see java.sql.statement#setpoolable(boolean)
*/
public void setpoolable boolean poolable  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.statement#setquerytimeout(int)
*/
public void setquerytimeout int seconds  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.wrapper#iswrapperfor(java.lang.class)
*/
public boolean iswrapperfor class<?> iface  throws sqlexception
throw new sqlexception
/*
* (non-javadoc)
*
* @see java.sql.wrapper#unwrap(java.lang.class)
*/
public <t> t unwrap class<t> iface  throws sqlexception
throw new sqlexception