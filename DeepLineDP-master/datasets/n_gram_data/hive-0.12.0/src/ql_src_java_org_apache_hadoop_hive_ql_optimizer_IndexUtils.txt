/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql optimizer
import java io ioexception
import java util arraylist
import java util hashmap
import java util linkedhashmap
import java util list
import java util map
import java util set
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore api index
import org apache hadoop hive ql driver
import org apache hadoop hive ql exec tablescanoperator
import org apache hadoop hive ql exec task
import org apache hadoop hive ql hooks readentity
import org apache hadoop hive ql hooks writeentity
import org apache hadoop hive ql index indexmetadatachangetask
import org apache hadoop hive ql index indexmetadatachangework
import org apache hadoop hive ql metadata hive
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql optimizer physical index indexwhereprocessor
import org apache hadoop hive ql parse parsecontext
import org apache hadoop hive ql parse prunedpartitionlist
import org apache hadoop hive ql parse semanticexception
/**
* utility class for index support.
* currently used for bitmap and aggregate index
*
*/
public final class indexutils
private static final log log   logfactory getlog indexwhereprocessor class getname
private static final map<index  table> indextoindextable   new hashmap<index  table>
private indexutils
/**
* check the partitions used by the table scan to make sure they also exist in the
* index table.
* @param pctx
* @param indexes
* @return partitions used by query.  null if they do not exist in index table
* @throws hiveexception
*/
public static set<partition> checkpartitionscoveredbyindex tablescanoperator tablescan
parsecontext pctx
map<table  list<index>> indexes
throws hiveexception
hive hive   hive get pctx getconf
// make sure each partition exists on the index table
prunedpartitionlist querypartitionlist   pctx getoptopartlist   get tablescan
set<partition> querypartitions   querypartitionlist getpartitions
if  querypartitions    null    querypartitions isempty
return null
for  partition part   querypartitions
list<table> sourceindextables   getindextables hive  part  indexes
if   containspartition hive  part  indexes
return null     problem if it doesn't contain the partition
return querypartitions
/**
* return index tables associated with a given base table
*/
private list<table> getindextables hive hive  table table
map<table  list<index>> indexes  throws
hiveexception
list<table> indextables   new arraylist<table>
if  indexes    null    indexes get table     null
return indextables
for  index index   indexes get table
table indextable   hive gettable index getindextablename
indextoindextable put index  indextable
indextables add indextable
return indextables
/**
* return index tables associated with the base table of the partition
*/
private static list<table> getindextables hive hive  partition part
map<table  list<index>> indexes  throws hiveexception
list<table> indextables   new arraylist<table>
table partitionedtable   part gettable
if  indexes    null    indexes get partitionedtable     null
return indextables
for  index index   indexes get partitionedtable
table indextable   hive gettable index getindextablename
indextoindextable put index  indextable
indextables add indextable
return indextables
/**
* check that every index table contains the given partition and is fresh
*/
private static boolean containspartition hive hive  partition part
map<table  list<index>> indexes
throws hiveexception
hashmap<string  string> partspec   part getspec
if  indexes    null    indexes get part gettable       null
return false
if  partspec isempty
// empty specs come from non-partitioned tables
return isindextablefresh hive  indexes get part gettable     part gettable
for  index index   indexes get part gettable
table indextable   indextoindextable get index
// get partitions that match the spec
list<partition> matchingpartitions   hive getpartitions indextable  partspec
if  matchingpartitions    null    matchingpartitions size      0
log info     indextable       partspec
return false
else if   isindexpartitionfresh hive  index  part
return false
return true
/**
* check the index partitions on a parttioned table exist and are fresh
*/
private static boolean isindexpartitionfresh hive hive  index index
partition part  throws hiveexception
log info
try
filesystem partfs   part getpartitionpath   getfilesystem hive getconf
filestatus partfss   partfs getfilestatus part getpartitionpath
string ts   index getparameters   get part getspec   tostring
if  ts    null
return false
long indexts   long parselong ts
log info partfss getmodificationtime
log info ts
if  partfss getmodificationtime   > indexts
log info     part getspec
return false
catch  ioexception e
log info
throw new hiveexception e
return true
/**
* check that the indexes on the unpartioned table exist and are fresh
*/
private static boolean isindextablefresh hive hive  list<index> indexes  table src
throws hiveexception
//check that they exist
if  indexes    null    indexes size      0
return false
//check that they are not stale
for  index index   indexes
log info
try
filesystem srcfs   src getpath   getfilesystem hive getconf
filestatus srcfss  srcfs getfilestatus src getpath
string ts   index getparameters   get
if  ts    null
return false
long indexts   long parselong ts
log info srcfss getmodificationtime
log info ts
if  srcfss getmodificationtime   > indexts
log info
return false
catch  ioexception e
log info
throw new hiveexception e
return true
/**
* get a list of indexes on a table that match given types.
*/
public static list<index> getindexes table basetablemetadata  list<string> matchindextypes
throws semanticexception
list<index> matchingindexes   new arraylist<index>
list<index> indexesontable   null
try
indexesontable   basetablemetadata getallindexes  short   1      get all indexes
catch  hiveexception e
throw new semanticexception    e
for  index index   indexesontable
string indextype   index getindexhandlerclass
if  matchindextypes contains indextype
matchingindexes add index
return matchingindexes
public static task<?> createroottask hiveconf builderconf  set<readentity> inputs
set<writeentity> outputs  stringbuilder command
linkedhashmap<string  string> partspec
string indextablename  string dbname
// don't try to index optimize the query to build the index
hiveconf setboolvar builderconf  hiveconf confvars hiveoptindexfilter  false
driver driver   new driver builderconf
driver compile command tostring
task<?> roottask   driver getplan   getroottasks   get 0
inputs addall driver getplan   getinputs
outputs addall driver getplan   getoutputs
indexmetadatachangework indexmetachange   new indexmetadatachangework partspec
indextablename  dbname
indexmetadatachangetask indexmetachangetsk   new indexmetadatachangetask
indexmetachangetsk setwork indexmetachange
roottask adddependenttask indexmetachangetsk
return roottask