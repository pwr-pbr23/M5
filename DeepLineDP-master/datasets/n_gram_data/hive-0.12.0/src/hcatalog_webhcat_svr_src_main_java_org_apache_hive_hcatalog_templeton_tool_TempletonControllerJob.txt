/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing,
* software distributed under the license is distributed on an
* "as is" basis, without warranties or conditions of any
* kind, either express or implied.  see the license for the
* specific language governing permissions and limitations
* under the license.
*/
package org apache hive hcatalog templeton tool
import java io bufferedreader
import java io ioexception
import java io inputstream
import java io inputstreamreader
import java io outputstream
import java io printwriter
import java net urisyntaxexception
import java util arraylist
import java util arrays
import java util iterator
import java util linkedlist
import java util list
import java util map
import java util concurrent executorservice
import java util concurrent executors
import java util concurrent timeunit
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop conf configuration
import org apache hadoop conf configured
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop io nullwritable
import org apache hadoop io text
import org apache hadoop mapred jobclient
import org apache hadoop mapred jobconf
import org apache hadoop mapreduce job
import org apache hadoop mapreduce jobid
import org apache hadoop mapreduce mapper
import org apache hadoop mapreduce mapper context
import org apache hadoop mapreduce lib output nulloutputformat
import org apache hadoop mapreduce security token delegation delegationtokenidentifier
import org apache hadoop security usergroupinformation
import org apache hadoop security token token
import org apache hadoop util shell
import org apache hadoop util tool
import org apache hadoop util toolrunner
import org apache hive hcatalog templeton badparam
import org apache hive hcatalog templeton launcherdelegator
/**
* a map reduce job that will start another job.
*
* we have a single mapper job that starts a child mr job.  the parent
* monitors the child child job and ends when the child job exits.  in
* addition, we
*
* - write out the parent job id so the caller can record it.
* - run a keep alive thread so the job doesn't end.
* - optionally, store the stdout, stderr, and exit value of the child
*   in hdfs files.
*/
public class templetoncontrollerjob extends configured implements tool
public static final string copy_name
public static final string statusdir_name
public static final string enable_log
public static final string job_type
public static final string jar_args_name
public static final string override_classpath
public static final string stdout_fname
public static final string stderr_fname
public static final string exit_fname
public static final int watcher_timeout_secs   10
public static final int keep_alive_msec   60   1000
public static final string token_file_arg_placeholder
private static trivialexecservice execservice   trivialexecservice getinstance
private static final log log   logfactory getlog templetoncontrollerjob class
public static class launchmapper
extends mapper<nullwritable  nullwritable  text  text>
protected process startjob context context  string user
string overrideclasspath
throws ioexception  interruptedexception
configuration conf   context getconfiguration
copylocal copy_name  conf
string jarargs
templetonutils decodearray conf get jar_args_name
arraylist<string> removeenv   new arraylist<string>
removeenv add
removeenv add
removeenv add
removeenv add
map<string  string> env   templetonutils hadoopuserenv user
overrideclasspath
list<string> jarargslist   new linkedlist<string> arrays aslist jarargs
string tokenfile   system getenv
if  tokenfile    null
//token is available, so replace the placeholder
tokenfile   tokenfile replaceall   "
string tokenarg       tokenfile
if  shell windows
try
tokenarg   templetonutils quoteforwindows tokenarg
catch  badparam e
throw new ioexception     tokenfile      e
for int i 0  i<jarargslist size    i
string newarg
jarargslist get i  replace token_file_arg_placeholder  tokenarg
jarargslist set i  newarg
else
//no token, so remove the placeholder arg
iterator<string> it   jarargslist iterator
while it hasnext
string arg   it next
if arg contains token_file_arg_placeholder
it remove
return execservice run jarargslist  removeenv  env
private void copylocal string var  configuration conf
throws ioexception
string filenames   templetonutils decodearray conf get var
if  filenames    null
for  string filename   filenames
path src   new path filename
path dst   new path src getname
filesystem fs   src getfilesystem conf
system err println     src       dst
fs copytolocalfile src  dst
@override
public void run context context
throws ioexception  interruptedexception
configuration conf   context getconfiguration
process proc   startjob context
conf get
conf get override_classpath
string statusdir   conf get statusdir_name
if  statusdir    null
try
statusdir   templetonutils adduserhomedirectoryifapplicable statusdir
conf get
catch  urisyntaxexception e
throw new ioexception    e
boolean enablelog   boolean parseboolean conf get enable_log
launcherdelegator jobtype jobtype   launcherdelegator jobtype valueof conf get job_type
executorservice pool   executors newcachedthreadpool
executewatcher pool  conf  context getjobid
proc getinputstream    statusdir  stdout_fname
executewatcher pool  conf  context getjobid
proc geterrorstream    statusdir  stderr_fname
keepalive keepalive   startcounterkeepalive pool  context
proc waitfor
keepalive sendreport   false
pool shutdown
if   pool awaittermination watcher_timeout_secs  timeunit seconds
pool shutdownnow
writeexitvalue conf  proc exitvalue    statusdir
jobstate state   new jobstate context getjobid   tostring    conf
state setexitvalue proc exitvalue
state setcompletestatus
state close
if  enablelog    templetonutils isset statusdir
system err println     context getjobid   tostring
statusdir
logretriever logretriever   new logretriever statusdir  jobtype  conf
logretriever run
if  proc exitvalue      0
system err println
proc exitvalue
else
system err println
private void executewatcher executorservice pool  configuration conf
jobid jobid  inputstream in  string statusdir
string name
throws ioexception
watcher w   new watcher conf  jobid  in  statusdir  name
pool execute w
private keepalive startcounterkeepalive executorservice pool  context context
throws ioexception
keepalive k   new keepalive context
pool execute k
return k
private void writeexitvalue configuration conf  int exitvalue  string statusdir
throws ioexception
if  templetonutils isset statusdir
path p   new path statusdir  exit_fname
filesystem fs   p getfilesystem conf
outputstream out   fs create p
system err println
exitvalue       p
printwriter writer   new printwriter out
writer println exitvalue
writer close
private static class watcher implements runnable
private inputstream in
private outputstream out
private jobid jobid
private configuration conf
public watcher configuration conf  jobid jobid  inputstream in
string statusdir  string name
throws ioexception
this conf   conf
this jobid   jobid
this in   in
if  name equals stderr_fname
out   system err
else
out   system out
if  templetonutils isset statusdir
path p   new path statusdir  name
filesystem fs   p getfilesystem conf
out   fs create p
system err println     p
@override
public void run
try
inputstreamreader isr   new inputstreamreader in
bufferedreader reader   new bufferedreader isr
printwriter writer   new printwriter out
string line
while   line   reader readline       null
writer println line
jobstate state   null
try
string percent   templetonutils extractpercentcomplete line
string childid   templetonutils extractchildjobid line
if  percent    null    childid    null
state   new jobstate jobid tostring    conf
state setpercentcomplete percent
state setchildid childid
catch  ioexception e
system err println     e
finally
if  state    null
try
state close
catch  ioexception e
writer flush
catch  ioexception e
system err println     e
public static class keepalive implements runnable
private context context
public boolean sendreport
public keepalive context context
this sendreport   true
this context   context
@override
public void run
try
while  sendreport
// periodically report progress on the context object
// to prevent tasktracker from killing the templeton
// controller task
context progress
system err println
thread sleep keep_alive_msec
catch  interruptedexception e
// ok to be interrupted
private jobid submittedjobid
public string getsubmittedid
if  submittedjobid    null
return null
else
return submittedjobid tostring
/**
* enqueue the job and print out the job id for later collection.
*/
@override
public int run string args
throws ioexception  interruptedexception  classnotfoundexception
configuration conf   getconf
conf set jar_args_name  templetonutils encodearray args
conf set    usergroupinformation getcurrentuser   getshortusername
job job   new job conf
job setjarbyclass templetoncontrollerjob class
job setjobname
job setmapperclass launchmapper class
job setmapoutputkeyclass text class
job setmapoutputvalueclass text class
job setinputformatclass singleinputformat class
nulloutputformat<nullwritable  nullwritable> of
new nulloutputformat<nullwritable  nullwritable>
job setoutputformatclass of getclass
job setnumreducetasks 0
jobclient jc   new jobclient new jobconf job getconfiguration
token<delegationtokenidentifier> mrdt   jc getdelegationtoken new text
job getcredentials   addtoken new text     mrdt
job submit
submittedjobid   job getjobid
return 0
public static void main string args  throws exception
int ret   toolrunner run new templetoncontrollerjob    args
if  ret    0
system err println
system exit ret