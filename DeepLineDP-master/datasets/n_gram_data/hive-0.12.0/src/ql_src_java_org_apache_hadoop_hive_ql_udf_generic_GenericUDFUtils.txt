/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql udf generic
import java lang reflect array
import java lang reflect method
import java lang reflect parameterizedtype
import java lang reflect type
import java nio bytebuffer
import java util hashmap
import org apache hadoop hive ql exec functionregistry
import org apache hadoop hive ql exec udfargumentexception
import org apache hadoop hive ql exec udfargumentlengthexception
import org apache hadoop hive ql exec udfargumenttypeexception
import org apache hadoop hive serde2 io hivevarcharwritable
import org apache hadoop hive serde2 objectinspector objectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorconverters
import org apache hadoop hive serde2 objectinspector objectinspectorfactory
import org apache hadoop hive serde2 objectinspector objectinspectorutils
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector
import org apache hadoop hive serde2 objectinspector objectinspectorconverters converter
import org apache hadoop hive serde2 objectinspector objectinspectorconverters identityconverter
import org apache hadoop hive serde2 objectinspector objectinspectorfactory objectinspectoroptions
import org apache hadoop hive serde2 objectinspector objectinspectorutils objectinspectorcopyoption
import org apache hadoop hive serde2 objectinspector primitiveobjectinspector primitivecategory
import org apache hadoop hive serde2 objectinspector primitive voidobjectinspector
import org apache hadoop hive serde2 typeinfo typeinfo
import org apache hadoop hive serde2 typeinfo typeinfoutils
import org apache hadoop hive serde2 typeinfo varchartypeparams
import org apache hadoop io text
/**
* util functions for genericudf classes.
*/
public final class genericudfutils
/**
* checks if b is the first byte of a utf-8 character.
*
*/
public static boolean isutfstartbyte byte b
return  b   0xc0     0x80
/**
* this class helps to find the return objectinspector for a genericudf.
*
* in many cases like case and if, the genericudf is returning a value out of
* several possibilities. however these possibilities may not always have the
* same objectinspector.
*
* this class will help detect whether all possibilities have exactly the same
* objectinspector. if not, then we need to convert the objects to the same
* objectinspector.
*
* a special case is when some values are constant null. in this case we can
* use the same objectinspector.
*/
public static class returnobjectinspectorresolver
boolean allowtypeconversion
objectinspector returnobjectinspector
// we create converters beforehand, so that the converters can reuse the
// same object for returning conversion results.
hashmap<objectinspector  converter> converters
public returnobjectinspectorresolver
this false
public returnobjectinspectorresolver boolean allowtypeconversion
this allowtypeconversion   allowtypeconversion
/**
* update returnobjectinspector and valueinspectorsarethesame based on the
* objectinspector seen.
*
* @return false if there is a type mismatch
*/
public boolean update objectinspector oi  throws udfargumenttypeexception
if  oi instanceof voidobjectinspector
return true
if  returnobjectinspector    null
// the first argument, just set the return to be the standard
// writable version of this oi.
returnobjectinspector   objectinspectorutils
getstandardobjectinspector oi
objectinspectorcopyoption writable
return true
if  returnobjectinspector    oi
// the new objectinspector is the same as the old one, directly return
// true
return true
typeinfo oitypeinfo   typeinfoutils gettypeinfofromobjectinspector oi
typeinfo rtypeinfo   typeinfoutils
gettypeinfofromobjectinspector returnobjectinspector
if  oitypeinfo    rtypeinfo
// convert everything to writable, if types of arguments are the same,
// but objectinspectors are different.
returnobjectinspector   objectinspectorutils
getstandardobjectinspector returnobjectinspector
objectinspectorcopyoption writable
return true
if   allowtypeconversion
return false
// types are different, we need to check whether we can convert them to
// a common base class or not.
typeinfo commontypeinfo   functionregistry getcommonclass oitypeinfo
rtypeinfo
if  commontypeinfo    null
return false
returnobjectinspector   typeinfoutils
getstandardwritableobjectinspectorfromtypeinfo commontypeinfo
return true
/**
* returns the objectinspector of the return value.
*/
public objectinspector get
return returnobjectinspector
/**
* convert the return object if necessary (when the objectinspectors of
* different possibilities are not all the same).
*/
public object convertifnecessary object o  objectinspector oi
object converted   null
if  oi    returnobjectinspector
converted   o
else
if  o    null
return null
if  converters    null
converters   new hashmap<objectinspector  converter>
converter converter   converters get oi
if  converter    null
converter   objectinspectorconverters getconverter oi
returnobjectinspector
converters put oi  converter
converted   converter convert o
return converted
/**
* convert parameters for the method if needed.
*/
public static class conversionhelper
private final objectinspector givenparameterois
type methodparametertypes
private final boolean isvariablelengthargument
type lastparaelementtype
boolean conversionneeded
converter converters
object convertedparameters
object convertedparametersinarray
private static class<?> getclassfromtype type t
if  t instanceof class<?>
return  class<?>  t
else if  t instanceof parameterizedtype
parameterizedtype pt    parameterizedtype  t
return  class<?>  pt getrawtype
return null
/**
* create a primitiveconversionhelper for method m. the objectinspector's
* input parameters are specified in parameters.
*/
public conversionhelper method m  objectinspector parameterois
throws udfargumentexception
givenparameterois   parameterois
methodparametertypes   m getgenericparametertypes
// whether the method takes an array like object[],
// or string[] etc in the last argument.
lastparaelementtype   typeinfoutils
getarrayelementtype methodparametertypes length    0 ? null
methodparametertypes
isvariablelengthargument    lastparaelementtype    null
// create the output oi array
objectinspector methodparameterois   new objectinspector
if  isvariablelengthargument
// conversionhelper can be called without method parameter length
// checkings
// for terminatepartial() and merge() calls.
if  parameterois length < methodparametertypes length   1
throw new udfargumentlengthexception m tostring
methodparametertypes length   1
parameterois length
// copy the first methodparametertypes.length - 1 entries
for  int i   0  i < methodparametertypes length   1  i
// this method takes object, so it accepts whatever types that are
// passed in.
if  methodparametertypes    object class
methodparameterois   objectinspectorutils
getstandardobjectinspector parameterois
objectinspectorcopyoption java
else
methodparameterois   objectinspectorfactory
getreflectionobjectinspector methodparametertypes
objectinspectoroptions java
// deal with the last entry
if  lastparaelementtype    object class
// this method takes object[], so it accepts whatever types that are
// passed in.
for  int i   methodparametertypes length   1  i < parameterois length  i
methodparameterois   objectinspectorutils
getstandardobjectinspector parameterois
objectinspectorcopyoption java
else
// this method takes something like string[], so it only accepts
// something like string
objectinspector oi   objectinspectorfactory
getreflectionobjectinspector lastparaelementtype
objectinspectoroptions java
for  int i   methodparametertypes length   1  i < parameterois length  i
methodparameterois   oi
else
// normal case, the last parameter is a normal parameter.
// conversionhelper can be called without method parameter length
// checkings
// for terminatepartial() and merge() calls.
if  methodparametertypes length    parameterois length
throw new udfargumentlengthexception m tostring
methodparametertypes length
parameterois length
for  int i   0  i < methodparametertypes length  i
// this method takes object, so it accepts whatever types that are
// passed in.
if  methodparametertypes    object class
methodparameterois   objectinspectorutils
getstandardobjectinspector parameterois
objectinspectorcopyoption java
else
methodparameterois   objectinspectorfactory
getreflectionobjectinspector methodparametertypes
objectinspectoroptions java
// create the converters
conversionneeded   false
converters   new converter
for  int i   0  i < parameterois length  i
converter pc   objectinspectorconverters getconverter parameterois
methodparameterois
converters   pc
// conversion is needed?
conversionneeded   conversionneeded
pc instanceof identityconverter
if  isvariablelengthargument
convertedparameters   new object
convertedparametersinarray    object  array newinstance
getclassfromtype lastparaelementtype   parameterois length
methodparametertypes length   1
convertedparameters   convertedparametersinarray
else
convertedparameters   new object
public object convertifnecessary object    parameters
assert  parameters length    givenparameterois length
if   conversionneeded     isvariablelengthargument
// no conversion needed, and not variable-length argument:
// just return what is passed in.
return parameters
if  isvariablelengthargument
// convert the first methodparametertypes.length - 1 entries
for  int i   0  i < methodparametertypes length   1  i
convertedparameters   converters convert parameters
// convert the rest and put into the last entry
for  int i   methodparametertypes length   1  i < parameters length  i
convertedparametersinarray   converters
convert parameters
else
// normal case, convert all parameters
for  int i   0  i < methodparametertypes length  i
convertedparameters   converters convert parameters
return convertedparameters
/**
* helper class for udfs returning string/varchar/char
*/
public static class stringhelper
protected object returnvalue
protected primitivecategory type
public stringhelper primitivecategory type  throws udfargumentexception
this type   type
switch  type
case string
returnvalue   new text
break
case varchar
returnvalue   new hivevarcharwritable
break
default
throw new udfargumentexception     type
public object setreturnvalue string val  throws udfargumentexception
if  val    null
return null
switch  type
case string
text returnvalue  set val
return returnvalue
case varchar
hivevarcharwritable returnvalue  set val
return returnvalue
default
throw new udfargumentexception     type
/**
* helper function to help genericudfs determine the return type
* character length for char/varchar.
* @param poi primitiveobjectinspector representing the type
* @return character length of the type
* @throws udfargumentexception
*/
public static int getfixedstringsizefortype primitiveobjectinspector poi
throws udfargumentexception
// todo: we can support date, int, .. any types which would have a fixed length value
switch  poi getprimitivecategory
case varchar
varchartypeparams varcharparams   null
varcharparams    varchartypeparams  poi gettypeparams
if  varcharparams    null    varcharparams length < 0
throw new udfargumentexception
return varcharparams length
default
throw new udfargumentexception     poi gettypename
/**
* return an ordinal from an integer.
*/
public static string getordinal int i
int unit   i % 10
return  i <  0  ?      i    11    unit    1  ? i
i    12    unit    2  ? i        i    13    unit    3  ? i
i
/**
* finds any occurence of <code>subtext</code> from <code>text</code> in the
* backing buffer, for avoiding string encoding and decoding. shamelessly copy
* from {@link org.apache.hadoop.io.text#find(string, int)}.
*/
public static int findtext text text  text subtext  int start
// src.position(start) can't accept negative numbers.
if  start < 0
return  1
bytebuffer src   bytebuffer wrap text getbytes    0  text getlength
bytebuffer tgt   bytebuffer
wrap subtext getbytes    0  subtext getlength
byte b   tgt get
src position start
while  src hasremaining
if  b    src get         matching first byte
src mark       save position in loop
tgt mark       save position in target
boolean found   true
int pos   src position     1
while  tgt hasremaining
if   src hasremaining         src expired first
tgt reset
src reset
found   false
break
if    tgt get      src get
tgt reset
src reset
found   false
break     no match
if  found
return pos
return  1     not found
private genericudfutils
// prevent instantiation