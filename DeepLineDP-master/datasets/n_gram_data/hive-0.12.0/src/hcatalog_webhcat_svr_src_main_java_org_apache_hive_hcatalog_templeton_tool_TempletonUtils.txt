/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing,
* software distributed under the license is distributed on an
* "as is" basis, without warranties or conditions of any
* kind, either express or implied.  see the license for the
* specific language governing permissions and limitations
* under the license.
*/
package org apache hive hcatalog templeton tool
import java io filenotfoundexception
import java io ioexception
import java io inputstream
import java net uri
import java net urisyntaxexception
import java net url
import java net urlconnection
import java security privilegedexceptionaction
import java util arraylist
import java util collection
import java util hashmap
import java util list
import java util map
import java util regex matcher
import java util regex pattern
import javax ws rs core uribuilder
import org apache hadoop conf configuration
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop security usergroupinformation
import org apache hadoop util shell
import org apache hadoop util stringutils
import org apache hive hcatalog templeton ugifactory
import org apache hive hcatalog templeton badparam
/**
* general utility methods.
*/
public class templetonutils
/**
* is the object non-empty?
*/
public static boolean isset string s
return  s    null      s length   > 0
/**
* is the object non-empty?
*/
public static boolean isset char ch
return  ch    0
/**
* is the object non-empty?
*/
public static <t> boolean isset t a
return  a    null      a length > 0
/**
* is the object non-empty?
*/
public static <t> boolean isset collection<t> col
return  col    null       col isempty
/**
* is the object non-empty?
*/
public static <k  v> boolean isset map<k  v> col
return  col    null       col isempty
public static final pattern jar_complete
pattern compile
public static final pattern pig_complete   pattern compile
/**
* extract the percent complete line from pig or jar jobs.
*/
public static string extractpercentcomplete string line
matcher jar   jar_complete matcher line
if  jar find
return jar group   trim
matcher pig   pig_complete matcher line
if  pig find
return pig group   trim
return null
public static final pattern jar_id   pattern compile
public static final pattern pig_id   pattern compile
public static final pattern id_patterns    jar_id  pig_id
/**
* extract the job id from jar jobs.
*/
public static string extractchildjobid string line
for  pattern p   id_patterns
matcher m   p matcher line
if  m find
return m group 1
return null
/**
* take an array of strings and encode it into one string.
*/
public static string encodearray string plain
if  plain    null
return null
string escaped   new string
for  int i   0  i < plain length    i
if  plain    null
plain
escaped   stringutils escapestring plain
return stringutils arraytostring escaped
/**
* encode a list into a string.
*/
public static string encodearray list<string> list
if  list    null
return null
string array   new string
return encodearray list toarray array
/**
* take an encode strings and decode it into an array of strings.
*/
public static string decodearray string s
if  s    null
return null
string escaped   stringutils split s
string plain   new string
for  int i   0  i < escaped length    i
plain   stringutils unescapestring escaped
return plain
public static string hadoopfslistasarray string files  configuration conf
string user
throws urisyntaxexception  filenotfoundexception  ioexception
interruptedexception
if  files    null    conf    null
return null
string dirty   files split
string clean   new string
for  int i   0  i < dirty length    i
clean   hadoopfsfilename dirty  conf  user
return clean
public static string hadoopfslistasstring string files  configuration conf
string user
throws urisyntaxexception  filenotfoundexception  ioexception
interruptedexception
if  files    null    conf    null
return null
return stringutils arraytostring hadoopfslistasarray files  conf  user
public static string hadoopfsfilename string fname  configuration conf  string user
throws urisyntaxexception  filenotfoundexception  ioexception
interruptedexception
path p   hadoopfspath fname  conf  user
if  p    null
return null
else
return p tostring
/**
* @return true iff we are sure the file is not there.
*/
public static boolean hadoopfsismissing filesystem fs  path p
try
return  fs exists p
catch  throwable t
// got an error, might be there anyway due to a
// permissions problem.
return false
public static string adduserhomedirectoryifapplicable string origpathstr  string user
throws ioexception  urisyntaxexception
uri uri   new uri origpathstr
if  uri getpath   isempty
string newpath       user
uri   uribuilder fromuri uri  replacepath newpath  build
else if   new path uri getpath    isabsolute
string newpath       user       uri getpath
uri   uribuilder fromuri uri  replacepath newpath  build
no work needed for absolute paths
return uri tostring
public static path hadoopfspath string fname  final configuration conf  string user
throws urisyntaxexception  ioexception
interruptedexception
if  fname    null    conf    null
return null
usergroupinformation ugi
if  user  null
ugi   ugifactory getugi user
else
ugi   usergroupinformation getloginuser
final string finalfname   new string fname
final filesystem defaultfs
ugi doas new privilegedexceptionaction<filesystem>
public filesystem run
throws urisyntaxexception  ioexception  interruptedexception
return filesystem get new uri finalfname   conf
fname   adduserhomedirectoryifapplicable fname  user
uri u   new uri fname
path p   new path u  makequalified defaultfs
if  hadoopfsismissing defaultfs  p
throw new filenotfoundexception     fname
return p
/**
* get the given url.  returns the number of bytes received.
*/
public static int fetchurl url url
throws ioexception
urlconnection cnx   url openconnection
inputstream in   cnx getinputstream
byte buf   new byte
int total   0
int len   0
while   len   in read buf   >  0
total    len
return total
/**
* set the environment variables to specify the hadoop user.
*/
public static map<string  string> hadoopuserenv string user
string overrideclasspath
hashmap<string  string> env   new hashmap<string  string>
env put    user
if  overrideclasspath    null
env put
string cur   system getenv
if  templetonutils isset cur
overrideclasspath   overrideclasspath       cur
env put    overrideclasspath
return env
// add double quotes around the given input parameter if it is not already
// quoted. quotes are not allowed in the middle of the parameter, and
// badparam exception is thrown if this is the case.
//
// this method should be used to escape parameters before they get passed to
// windows cmd scripts (specifically, special characters like a comma or an
// equal sign might be lost as part of the cmd script processing if not
// under quotes).
public static string quoteforwindows string param  throws badparam
if  shell windows
if  param    null    param length   > 0
string nonquotedpart   param
boolean addquotes   true
if  param charat 0
if  param length   < 2
throw new badparam     param
addquotes   false
nonquotedpart   param substring 1  param length     1
// if we have any quotes other then the outside quotes, throw
if  nonquotedpart contains  "
throw new badparam     param
if  addquotes
param
return param
public static void addcmdforwindows arraylist<string> args
if shell windows
args add
args add
args add