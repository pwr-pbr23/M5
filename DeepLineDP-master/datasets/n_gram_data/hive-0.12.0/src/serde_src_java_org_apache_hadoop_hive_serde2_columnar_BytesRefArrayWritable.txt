/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive serde2 columnar
import java io datainput
import java io dataoutput
import java io ioexception
import java util arrays
import org apache hadoop io writable
import org apache hadoop io writablefactories
import org apache hadoop io writablefactory
/**
* <tt>bytesrefarraywritable</tt> holds an array reference to bytesrefwritable,
* and is able to resize without recreating new array if not necessary.
* <p>
*
* each <tt>bytesrefarraywritable holds</tt> instance has a <i>valid</i> field,
* which is the desired valid number of <tt>bytesrefwritable</tt> it holds.
* <tt>resetvalid</tt> can reset the valid, but it will not care the underlying
* bytesrefwritable.
*/
public class bytesrefarraywritable implements writable
comparable<bytesrefarraywritable>
private bytesrefwritable bytesrefwritables   null
private int valid   0
/**
* constructs an empty array with the specified capacity.
*
* @param capacity
*          initial capacity
* @exception illegalargumentexception
*              if the specified initial capacity is negative
*/
public bytesrefarraywritable int capacity
if  capacity < 0
throw new illegalargumentexception
bytesrefwritables   new bytesrefwritable
ensurecapacity capacity
/**
* constructs an empty array with a capacity of ten.
*/
public bytesrefarraywritable
this 10
/**
* returns the number of valid elements.
*
* @return the number of valid elements
*/
public int size
return valid
/**
* gets the bytesrefwritable at the specified position. make sure the position
* is valid by first call resetvalid.
*
* @param index
*          the position index, starting from zero
* @throws indexoutofboundsexception
*/
public bytesrefwritable get int index
if  index >  valid
throw new indexoutofboundsexception
valid
return bytesrefwritables
/**
* gets the bytesrefwritable at the specified position without checking.
*
* @param index
*          the position index, starting from zero
* @throws indexoutofboundsexception
*/
public bytesrefwritable uncheckedget int index
return bytesrefwritables
/**
* set the bytesrefwritable at the specified position with the specified
* bytesrefwritable.
*
* @param index
*          index position
* @param bytesrefwritable
*          the new element
* @throws illegalargumentexception
*           if the specified new element is null
*/
public void set int index  bytesrefwritable bytesrefwritable
ensurecapacity index   1
bytesrefwritables   bytesrefwritable
if  valid <  index
valid   index   1
/**
* {@inheritdoc}
*/
@override
public int compareto bytesrefarraywritable other
if  other    null
throw new illegalargumentexception
if  this    other
return 0
int sizediff   valid   other valid
if  sizediff    0
return sizediff
for  int i   0  i < valid  i
if  other contains bytesrefwritables
continue
else
return 1
return 0
/**
* returns <tt>true</tt> if this instance contains one or more the specified
* bytesrefwritable.
*
* @param bytesrefwritable
*          bytesrefwritable element to be tested
* @return <tt>true</tt> if contains the specified element
* @throws illegalargumentexception
*           if the specified element is null
*/
public boolean contains bytesrefwritable bytesrefwritable
if  bytesrefwritable    null
throw new illegalargumentexception
for  int i   0  i < valid  i
if  bytesrefwritables equals bytesrefwritable
return true
return false
/**
* {@inheritdoc}
*/
@override
public boolean equals object o
if  o    null      o instanceof bytesrefarraywritable
return false
return compareto  bytesrefarraywritable  o     0
/**
* removes all elements.
*/
public void clear
valid   0
/**
* enlarge the capacity if necessary, to ensure that it can hold the number of
* elements specified by newvalidcapacity argument. it will also narrow the
* valid capacity when needed. notice: it only enlarge or narrow the valid
* capacity with no care of the already stored invalid bytesrefwritable.
*
* @param newvalidcapacity
*          the desired capacity
*/
public void resetvalid int newvalidcapacity
ensurecapacity newvalidcapacity
valid   newvalidcapacity
protected void ensurecapacity int newcapacity
int size   bytesrefwritables length
if  size < newcapacity
bytesrefwritables   arrays copyof bytesrefwritables  newcapacity
while  size < newcapacity
bytesrefwritables   new bytesrefwritable
size
/**
* {@inheritdoc}
*/
@override
public void readfields datainput in  throws ioexception
int count   in readint
ensurecapacity count
for  int i   0  i < count  i
bytesrefwritables readfields in
valid   count
/**
* {@inheritdoc}
*/
@override
public void write dataoutput out  throws ioexception
out writeint valid
for  int i   0  i < valid  i
bytesrefwritable cu   bytesrefwritables
cu write out
static
writablefactories setfactory bytesrefarraywritable class
new writablefactory
@override
public writable newinstance
return new bytesrefarraywritable