/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop fs
import java io ioexception
import java net uri
import java net urisyntaxexception
import org apache hadoop conf configuration
import org apache hadoop fs permission fspermission
import org apache hadoop util progressable
import org apache hadoop util shell
/****************************************************************
* a filesystem that can serve a given scheme/authority using some
* other file system. in that sense, it serves as a proxy for the
* real/underlying file system
*****************************************************************/
public class proxyfilesystem extends filterfilesystem
protected string myscheme
protected string myauthority
protected uri myuri
protected string realscheme
protected string realauthority
protected uri realuri
private path swizzleparampath path p
string pathuristring   p touri   tostring
uri newpathuri   uri create pathuristring
return new path  realscheme  realauthority  newpathuri getpath
private path swizzlereturnpath path p
string pathuristring   p touri   tostring
uri newpathuri   uri create pathuristring
return new path  myscheme  myauthority  newpathuri getpath
private filestatus swizzlefilestatus filestatus orig  boolean isparam
filestatus ret
new filestatus orig getlen    orig isdir    orig getreplication
orig getblocksize    orig getmodificationtime
orig getaccesstime    orig getpermission
orig getowner    orig getgroup
isparam ? swizzleparampath orig getpath
swizzlereturnpath orig getpath
return ret
public proxyfilesystem
throw new runtimeexception
public proxyfilesystem filesystem fs
throw new runtimeexception
/**
*
* @param p
* @return
* @throws ioexception
*/
public path resolvepath final path p  throws ioexception
// return the fully-qualified path of path f resolving the path
// through any symlinks or mount point
checkpath p
return getfilestatus p  getpath
/**
* create a proxy file system for fs.
*
* @param fs filesystem to create proxy for
* @param myuri uri to use as proxy. only the scheme and authority from
*              this are used right now
*/
public proxyfilesystem filesystem fs  uri myuri
super fs
uri realuri   fs geturi
this realscheme   realuri getscheme
this realauthority realuri getauthority
this realuri   realuri
this myscheme   myuri getscheme
this myauthority myuri getauthority
this myuri   myuri
@override
public void initialize uri name  configuration conf  throws ioexception
try
uri realuri   new uri  realscheme  realauthority
name getpath    name getquery    name getfragment
super initialize realuri  conf
catch  urisyntaxexception e
throw new runtimeexception e
@override
public uri geturi
return myuri
@override
public string getname
return geturi   tostring
@override
public path makequalified path path
return swizzlereturnpath super makequalified swizzleparampath path
@override
protected void checkpath final path path
super checkpath swizzleparampath path
@override
public blocklocation getfileblocklocations filestatus file  long start
long len  throws ioexception
return super getfileblocklocations swizzlefilestatus file  true
start  len
@override
public fsdatainputstream open path f  int buffersize  throws ioexception
return super open swizzleparampath f   buffersize
@override
public fsdataoutputstream append path f  int buffersize
progressable progress  throws ioexception
return super append swizzleparampath f   buffersize  progress
@override
public fsdataoutputstream create path f  fspermission permission
boolean overwrite  int buffersize  short replication  long blocksize
progressable progress  throws ioexception
return super create swizzleparampath f   permission
overwrite  buffersize  replication  blocksize  progress
@override
public boolean setreplication path src  short replication  throws ioexception
return super setreplication swizzleparampath src   replication
@override
public boolean rename path src  path dst  throws ioexception
return super rename swizzleparampath src   swizzleparampath dst
@override
public boolean delete path f  boolean recursive  throws ioexception
return super delete swizzleparampath f   recursive
@override
public boolean deleteonexit path f  throws ioexception
return super deleteonexit swizzleparampath f
@override
public filestatus liststatus path f  throws ioexception
filestatus orig   super liststatus swizzleparampath f
filestatus ret   new filestatus
for  int i 0  i<orig length  i
ret   swizzlefilestatus orig  false
return ret
@override
public path gethomedirectory
return swizzlereturnpath super gethomedirectory
@override
public void setworkingdirectory path newdir
super setworkingdirectory swizzleparampath newdir
@override
public path getworkingdirectory
return swizzlereturnpath super getworkingdirectory
@override
public boolean mkdirs path f  fspermission permission  throws ioexception
return super mkdirs swizzleparampath f   permission
@override
public void copyfromlocalfile boolean delsrc  path src  path dst
throws ioexception
super copyfromlocalfile delsrc  swizzleparampath src   swizzleparampath dst
@override
public void copyfromlocalfile boolean delsrc  boolean overwrite
path srcs  path dst
throws ioexception
super copyfromlocalfile delsrc  overwrite  srcs  swizzleparampath dst
@override
public void copyfromlocalfile boolean delsrc  boolean overwrite
path src  path dst
throws ioexception
super copyfromlocalfile delsrc  overwrite  src  swizzleparampath dst
@override
public void copytolocalfile boolean delsrc  path src  path dst
throws ioexception
super copytolocalfile delsrc  swizzleparampath src   dst
@override
public path startlocaloutput path fsoutputfile  path tmplocalfile
throws ioexception
return super startlocaloutput swizzleparampath fsoutputfile   tmplocalfile
@override
public void completelocaloutput path fsoutputfile  path tmplocalfile
throws ioexception
super completelocaloutput swizzleparampath fsoutputfile   tmplocalfile
@override
public contentsummary getcontentsummary path f  throws ioexception
return super getcontentsummary swizzleparampath f
@override
public filestatus getfilestatus path f  throws ioexception
return swizzlefilestatus super getfilestatus swizzleparampath f    false
@override
public filechecksum getfilechecksum path f  throws ioexception
return super getfilechecksum swizzleparampath f
@override
public void setowner path p  string username  string groupname
throws ioexception
super setowner swizzleparampath p   username  groupname
@override
public void settimes path p  long mtime  long atime
throws ioexception
super settimes swizzleparampath p   mtime  atime
@override
public void setpermission path p  fspermission permission
throws ioexception
super setpermission swizzleparampath p   permission