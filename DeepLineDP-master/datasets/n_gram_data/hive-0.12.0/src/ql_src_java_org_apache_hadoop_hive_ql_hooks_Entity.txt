/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql hooks
import java io serializable
import java net uri
import java util map
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata dummypartition
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql session sessionstate
import org apache hadoop hive conf hiveconf
/**
* this class encapsulates an object that is being read or written to by the
* query. this object may be a table, partition, dfs directory or a local
* directory.
*/
public class entity implements serializable
private static final long serialversionuid   1l
/**
* the type of the entity.
*/
public static enum type
table  partition  dummypartition  dfs_dir  local_dir
/**
* the type.
*/
private type typ
/**
* the table. this is null if this is a directory.
*/
private table t
/**
* the partition.this is null if this object is not a partition.
*/
private partition p
/**
* the directory if this is a directory.
*/
private string d
/**
* this is derived from t and p, but we need to serialize this field to make
* sure entity.hashcode() does not need to recursively read into t and p.
*/
private string name
/**
* whether the output is complete or not. for eg, for dynamic partitions, the
* complete output may not be known
*/
private boolean complete
public boolean iscomplete
return complete
public void setcomplete boolean complete
this complete   complete
public string getname
return name
public void setname string name
this name   name
public type gettyp
return typ
public void settyp type typ
this typ   typ
public table gett
return t
public void sett table t
this t   t
public partition getp
return p
public void setp partition p
this p   p
public string getd
return d
public void setd string d
this d   d
/**
* only used by serialization.
*/
public entity
/**
* constructor for a table.
*
* @param t
*          table that is read or written to.
*/
public entity table t
this t  true
public entity table t  boolean complete
d   null
p   null
this t   t
typ   type table
name   computename
this complete   complete
/**
* constructor for a partition.
*
* @param p
*          partition that is read or written to.
*/
public entity partition p
this p  true
public entity partition p  boolean complete
d   null
this p   p
t   p gettable
typ   type partition
name   computename
this complete   complete
public entity dummypartition p  boolean complete
d   null
this p   p
t   p gettable
typ   type dummypartition
name   computename
this complete   complete
/**
* constructor for a file.
*
* @param d
*          the name of the directory that is being read or written to.
* @param islocal
*          flag to decide whether this directory is local or in dfs.
*/
public entity string d  boolean islocal
this d  islocal  true
public entity string d  boolean islocal  boolean complete
this d   d
p   null
t   null
if  islocal
typ   type local_dir
else
typ   type dfs_dir
name   computename
this complete   complete
/**
* get the parameter map of the entity.
*/
public map<string  string> getparameters
if  p    null
return p getparameters
else
return t getparameters
/**
* get the type of the entity.
*/
public type gettype
return typ
/**
* get the location of the entity.
*/
public uri getlocation   throws exception
if  typ    type table
return t getdatalocation
if  typ    type partition
return p getdatalocation
if  typ    type dfs_dir    typ    type local_dir
return new uri d
return null
/**
* get the partition associated with the entity.
*/
public partition getpartition
return p
/**
* get the table associated with the entity.
*/
public table gettable
return t
/**
* tostring function.
*/
@override
public string tostring
return name
private string computename
switch  typ
case table
return t getdbname         t gettablename
case partition
return t getdbname         t gettablename         p getname
case dummypartition
return p getname
default
return d
/**
* equals function.
*/
@override
public boolean equals object o
if  o    null
return false
if  o instanceof entity
entity ore    entity  o
return  tostring   equalsignorecase ore tostring
else
return false
/**
* hashcode function.
*/
@override
public int hashcode
return tostring   hashcode