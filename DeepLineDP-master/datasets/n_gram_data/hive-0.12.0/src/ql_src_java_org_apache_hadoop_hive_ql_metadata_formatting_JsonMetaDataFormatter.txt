/**
* licensed to the apache software foundation (asf) under one
* or more contributor license agreements.  see the notice file
* distributed with this work for additional information
* regarding copyright ownership.  the asf licenses this file
* to you under the apache license, version 2.0 (the
* "license"); you may not use this file except in compliance
* with the license.  you may obtain a copy of the license at
*
*     http://www.apache.org/licenses/license-2.0
*
* unless required by applicable law or agreed to in writing, software
* distributed under the license is distributed on an "as is" basis,
* without warranties or conditions of any kind, either express or implied.
* see the license for the specific language governing permissions and
* limitations under the license.
*/
package org apache hadoop hive ql metadata formatting
import java io dataoutputstream
import java io outputstream
import java io ioexception
import java io unsupportedencodingexception
import java net urldecoder
import java util arraylist
import java util list
import java util map
import java util set
import org apache commons lang stringutils
import org apache commons logging log
import org apache commons logging logfactory
import org apache hadoop fs filestatus
import org apache hadoop fs filesystem
import org apache hadoop fs path
import org apache hadoop hive conf hiveconf
import org apache hadoop hive metastore api fieldschema
import org apache hadoop hive ql metadata hive
import org apache hadoop hive ql metadata hiveexception
import org apache hadoop hive ql metadata partition
import org apache hadoop hive ql metadata table
import org apache hadoop hive ql session sessionstate loghelper
import org apache hadoop hive shims shimloader
import org codehaus jackson map objectmapper
/**
* format table and index information for machine readability using
* json.
*/
public class jsonmetadataformatter implements metadataformatter
private static final log log   logfactory getlog jsonmetadataformatter class
/**
* convert the map to a json string.
*/
private void asjson outputstream out  map<string  object> data
throws hiveexception
try
new objectmapper   writevalue out  data
catch  ioexception e
throw new hiveexception    e
/**
* write an error message.
*/
@override
public void error outputstream out  string msg  int errorcode  string sqlstate
throws hiveexception
error out  msg  errorcode  sqlstate  null
@override
public void error outputstream out  string errormessage  int errorcode  string sqlstate  string errordetail  throws hiveexception
mapbuilder mb   mapbuilder create   put    errormessage
if errordetail    null
mb put    errordetail
mb put    errorcode
if sqlstate    null
mb put    sqlstate
asjson out mb build
/**
* show a list of tables.
*/
@override
public void showtables dataoutputstream out  set<string> tables
throws hiveexception
asjson out
mapbuilder create
put    tables
build
/**
* describe table.
*/
@override
public void describetable dataoutputstream out
string colpath  string tablename
table tbl  partition part  list<fieldschema> cols
boolean isformatted  boolean isext
boolean ispretty
throws hiveexception
mapbuilder builder   mapbuilder create
builder put    makecolsunformatted cols
if  isext
if  part    null
builder put    part gettpartition
else
builder put    tbl getttable
asjson out  builder build
private list<map<string  object>> makecolsunformatted list<fieldschema> cols
arraylist<map<string  object>> res   new arraylist<map<string  object>>
for  fieldschema col   cols
res add makeonecolunformatted col
return res
private map<string  object> makeonecolunformatted fieldschema col
return mapbuilder create
put    col getname
put    col gettype
put    col getcomment
build
@override
public void showtablestatus dataoutputstream out
hive db
hiveconf conf
list<table> tbls
map<string  string> part
partition par
throws hiveexception
asjson out  mapbuilder
create
put    makealltablestatus db  conf
tbls  part  par
build
private list<map<string  object>> makealltablestatus hive db
hiveconf conf
list<table> tbls
map<string  string> part
partition par
throws hiveexception
try
arraylist<map<string  object>> res   new arraylist<map<string  object>>
for  table tbl   tbls
res add makeonetablestatus tbl  db  conf  part  par
return res
catch ioexception e
throw new hiveexception e
private map<string  object> makeonetablestatus table tbl
hive db
hiveconf conf
map<string  string> part
partition par
throws hiveexception  ioexception
string tblloc   null
string inputformattcls   null
string outputformattcls   null
if  part    null
if  par    null
if  par getlocation      null
tblloc   par getdatalocation   tostring
inputformattcls   par getinputformatclass   getname
outputformattcls   par getoutputformatclass   getname
else
if  tbl getpath      null
tblloc   tbl getdatalocation   tostring
inputformattcls   tbl getinputformatclass   getname
outputformattcls   tbl getoutputformatclass   getname
mapbuilder builder   mapbuilder create
builder put    tbl gettablename
builder put    tbl getowner
builder put    tblloc
builder put    inputformattcls
builder put    outputformattcls
builder put    makecolsunformatted tbl getcols
builder put    tbl ispartitioned
if  tbl ispartitioned
builder put    makecolsunformatted tbl getpartcols
putfilesystemsstats builder  maketablestatuslocations tbl  db  par
conf  tbl getpath
return builder build
private list<path> maketablestatuslocations table tbl  hive db  partition par
throws hiveexception
// output file system information
path tblpath   tbl getpath
list<path> locations   new arraylist<path>
if  tbl ispartitioned
if  par    null
for  partition curpart   db getpartitions tbl
if  curpart getlocation      null
locations add new path curpart getlocation
else
if  par getlocation      null
locations add new path par getlocation
else
if  tblpath    null
locations add tblpath
return locations
// duplicates logic in textmetadataformatter
private void putfilesystemsstats mapbuilder builder  list<path> locations
hiveconf conf  path tblpath
throws ioexception
long totalfilesize   0
long maxfilesize   0
long minfilesize   long max_value
long lastaccesstime   0
long lastupdatetime   0
int numoffiles   0
boolean unknown   false
filesystem fs   tblpath getfilesystem conf
// in case all files in locations do not exist
try
filestatus tmpstatus   fs getfilestatus tblpath
lastaccesstime   shimloader gethadoopshims   getaccesstime tmpstatus
lastupdatetime   tmpstatus getmodificationtime
catch  ioexception e
log warn
e
unknown   true
if   unknown
for  path loc   locations
try
filestatus status   fs getfilestatus tblpath
filestatus files   fs liststatus loc
long accesstime   shimloader gethadoopshims   getaccesstime status
long updatetime   status getmodificationtime
// no matter loc is the table location or part location, it must be a
// directory.
if   status isdir
continue
if  accesstime > lastaccesstime
lastaccesstime   accesstime
if  updatetime > lastupdatetime
lastupdatetime   updatetime
for  filestatus currentstatus   files
if  currentstatus isdir
continue
numoffiles
long filelen   currentstatus getlen
totalfilesize    filelen
if  filelen > maxfilesize
maxfilesize   filelen
if  filelen < minfilesize
minfilesize   filelen
accesstime   shimloader gethadoopshims   getaccesstime
currentstatus
updatetime   currentstatus getmodificationtime
if  accesstime > lastaccesstime
lastaccesstime   accesstime
if  updatetime > lastupdatetime
lastupdatetime   updatetime
catch  ioexception e
// ignore
builder
put    numoffiles    unknown
put       totalfilesize    unknown
put         maxfilesize    unknown
put         numoffiles > 0 ? minfilesize   0    unknown
put      lastaccesstime     unknown     lastaccesstime < 0
put      lastupdatetime    unknown
/**
* show the table partitions.
*/
@override
public void showtablepartitons dataoutputstream out  list<string> parts
throws hiveexception
asjson out
mapbuilder create
put    maketablepartions parts
build
private list<map<string  object>> maketablepartions list<string> parts
throws hiveexception
try
arraylist<map<string  object>> res   new arraylist<map<string  object>>
for  string part   parts
res add makeonetablepartition part
return res
catch  unsupportedencodingexception e
throw new hiveexception e
// this seems like a very wrong implementation.
private map<string  object> makeonetablepartition string partident
throws unsupportedencodingexception
arraylist<map<string  object>> res   new arraylist<map<string  object>>
arraylist<string> names   new arraylist<string>
for  string part   stringutils split partident
string name   part
string val   null
string kv   stringutils split part     2
if  kv    null
name   kv
if  kv length > 1
val   urldecoder decode kv
if  val    null
names add name       val
else
names add name
res add mapbuilder create
put    name
put    val
build
return mapbuilder create
put    stringutils join names
put    res
build
/**
* show a list of databases
*/
@override
public void showdatabases dataoutputstream out  list<string> databases
throws hiveexception
asjson out
mapbuilder create
put    databases
build
/**
* show the description of a database
*/
@override
public void showdatabasedescription dataoutputstream out
string database
string comment
string location
map<string  string> params
throws hiveexception
if  params    null    params isempty
asjson out  mapbuilder
create
put    database
put    comment
put    location
build
else
asjson out  mapbuilder
create
put    database
put    comment
put    location
put    params
build